// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "GameBasic.pb.h"

@class Dice;
@class Dice_Builder;
@class LieDiceGameResult;
@class LieDiceGameResult_Builder;
@class PBDrawAction;
@class PBDrawAction_Builder;
@class PBGameItem;
@class PBGameItem_Builder;
@class PBGameSession;
@class PBGameSessionChanged;
@class PBGameSessionChanged_Builder;
@class PBGameSession_Builder;
@class PBGameUser;
@class PBGameUser_Builder;
@class PBMessage;
@class PBMessageStat;
@class PBMessageStat_Builder;
@class PBMessage_Builder;
@class PBSNSUser;
@class PBSNSUser_Builder;
@class UserDice;
@class UserDice_Builder;
@class UserResult;
@class UserResult_Builder;

@interface LieDiceRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface Dice : PBGeneratedMessage {
@private
  BOOL hasDiceId_:1;
  BOOL hasDice_:1;
  int32_t diceId;
  int32_t dice;
}
- (BOOL) hasDiceId;
- (BOOL) hasDice;
@property (readonly) int32_t diceId;
@property (readonly) int32_t dice;

+ (Dice*) defaultInstance;
- (Dice*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (Dice_Builder*) builder;
+ (Dice_Builder*) builder;
+ (Dice_Builder*) builderWithPrototype:(Dice*) prototype;

+ (Dice*) parseFromData:(NSData*) data;
+ (Dice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Dice*) parseFromInputStream:(NSInputStream*) input;
+ (Dice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Dice*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (Dice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface Dice_Builder : PBGeneratedMessage_Builder {
@private
  Dice* result;
}

- (Dice*) defaultInstance;

- (Dice_Builder*) clear;
- (Dice_Builder*) clone;

- (Dice*) build;
- (Dice*) buildPartial;

- (Dice_Builder*) mergeFrom:(Dice*) other;
- (Dice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (Dice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasDiceId;
- (int32_t) diceId;
- (Dice_Builder*) setDiceId:(int32_t) value;
- (Dice_Builder*) clearDiceId;

- (BOOL) hasDice;
- (int32_t) dice;
- (Dice_Builder*) setDice:(int32_t) value;
- (Dice_Builder*) clearDice;
@end

@interface UserDice : PBGeneratedMessage {
@private
  BOOL hasUserId_:1;
  int32_t userId;
  NSMutableArray* mutableDicesList;
}
- (BOOL) hasUserId;
@property (readonly) int32_t userId;
- (NSArray*) dicesList;
- (Dice*) dicesAtIndex:(int32_t) index;

+ (UserDice*) defaultInstance;
- (UserDice*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (UserDice_Builder*) builder;
+ (UserDice_Builder*) builder;
+ (UserDice_Builder*) builderWithPrototype:(UserDice*) prototype;

+ (UserDice*) parseFromData:(NSData*) data;
+ (UserDice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (UserDice*) parseFromInputStream:(NSInputStream*) input;
+ (UserDice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (UserDice*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (UserDice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface UserDice_Builder : PBGeneratedMessage_Builder {
@private
  UserDice* result;
}

- (UserDice*) defaultInstance;

- (UserDice_Builder*) clear;
- (UserDice_Builder*) clone;

- (UserDice*) build;
- (UserDice*) buildPartial;

- (UserDice_Builder*) mergeFrom:(UserDice*) other;
- (UserDice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (UserDice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (int32_t) userId;
- (UserDice_Builder*) setUserId:(int32_t) value;
- (UserDice_Builder*) clearUserId;

- (NSArray*) dicesList;
- (Dice*) dicesAtIndex:(int32_t) index;
- (UserDice_Builder*) replaceDicesAtIndex:(int32_t) index with:(Dice*) value;
- (UserDice_Builder*) addDices:(Dice*) value;
- (UserDice_Builder*) addAllDices:(NSArray*) values;
- (UserDice_Builder*) clearDicesList;
@end

@interface UserResult : PBGeneratedMessage {
@private
  BOOL hasWin_:1;
  BOOL hasGainCoins_:1;
  BOOL hasUserId_:1;
  BOOL win_:1;
  int32_t gainCoins;
  NSString* userId;
}
- (BOOL) hasUserId;
- (BOOL) hasWin;
- (BOOL) hasGainCoins;
@property (readonly, retain) NSString* userId;
- (BOOL) win;
@property (readonly) int32_t gainCoins;

+ (UserResult*) defaultInstance;
- (UserResult*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (UserResult_Builder*) builder;
+ (UserResult_Builder*) builder;
+ (UserResult_Builder*) builderWithPrototype:(UserResult*) prototype;

+ (UserResult*) parseFromData:(NSData*) data;
+ (UserResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (UserResult*) parseFromInputStream:(NSInputStream*) input;
+ (UserResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (UserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (UserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface UserResult_Builder : PBGeneratedMessage_Builder {
@private
  UserResult* result;
}

- (UserResult*) defaultInstance;

- (UserResult_Builder*) clear;
- (UserResult_Builder*) clone;

- (UserResult*) build;
- (UserResult*) buildPartial;

- (UserResult_Builder*) mergeFrom:(UserResult*) other;
- (UserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (UserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (NSString*) userId;
- (UserResult_Builder*) setUserId:(NSString*) value;
- (UserResult_Builder*) clearUserId;

- (BOOL) hasWin;
- (BOOL) win;
- (UserResult_Builder*) setWin:(BOOL) value;
- (UserResult_Builder*) clearWin;

- (BOOL) hasGainCoins;
- (int32_t) gainCoins;
- (UserResult_Builder*) setGainCoins:(int32_t) value;
- (UserResult_Builder*) clearGainCoins;
@end

@interface LieDiceGameResult : PBGeneratedMessage {
@private
  BOOL hasOpenType_:1;
  BOOL hasOpenDiceUserResult_:1;
  BOOL hasCallDiceUserResult_:1;
  int32_t openType;
  UserResult* openDiceUserResult;
  UserResult* callDiceUserResult;
}
- (BOOL) hasOpenDiceUserResult;
- (BOOL) hasCallDiceUserResult;
- (BOOL) hasOpenType;
@property (readonly, retain) UserResult* openDiceUserResult;
@property (readonly, retain) UserResult* callDiceUserResult;
@property (readonly) int32_t openType;

+ (LieDiceGameResult*) defaultInstance;
- (LieDiceGameResult*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (LieDiceGameResult_Builder*) builder;
+ (LieDiceGameResult_Builder*) builder;
+ (LieDiceGameResult_Builder*) builderWithPrototype:(LieDiceGameResult*) prototype;

+ (LieDiceGameResult*) parseFromData:(NSData*) data;
+ (LieDiceGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LieDiceGameResult*) parseFromInputStream:(NSInputStream*) input;
+ (LieDiceGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LieDiceGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (LieDiceGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface LieDiceGameResult_Builder : PBGeneratedMessage_Builder {
@private
  LieDiceGameResult* result;
}

- (LieDiceGameResult*) defaultInstance;

- (LieDiceGameResult_Builder*) clear;
- (LieDiceGameResult_Builder*) clone;

- (LieDiceGameResult*) build;
- (LieDiceGameResult*) buildPartial;

- (LieDiceGameResult_Builder*) mergeFrom:(LieDiceGameResult*) other;
- (LieDiceGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (LieDiceGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasOpenDiceUserResult;
- (UserResult*) openDiceUserResult;
- (LieDiceGameResult_Builder*) setOpenDiceUserResult:(UserResult*) value;
- (LieDiceGameResult_Builder*) setOpenDiceUserResultBuilder:(UserResult_Builder*) builderForValue;
- (LieDiceGameResult_Builder*) mergeOpenDiceUserResult:(UserResult*) value;
- (LieDiceGameResult_Builder*) clearOpenDiceUserResult;

- (BOOL) hasCallDiceUserResult;
- (UserResult*) callDiceUserResult;
- (LieDiceGameResult_Builder*) setCallDiceUserResult:(UserResult*) value;
- (LieDiceGameResult_Builder*) setCallDiceUserResultBuilder:(UserResult_Builder*) builderForValue;
- (LieDiceGameResult_Builder*) mergeCallDiceUserResult:(UserResult*) value;
- (LieDiceGameResult_Builder*) clearCallDiceUserResult;

- (BOOL) hasOpenType;
- (int32_t) openType;
- (LieDiceGameResult_Builder*) setOpenType:(int32_t) value;
- (LieDiceGameResult_Builder*) clearOpenType;
@end

