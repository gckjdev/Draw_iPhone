// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameConstants.pb.h"
// @@protoc_insertion_point(imports)

@implementation GameConstantsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameConstantsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL GameCommandTypeIsValidValue(GameCommandType value) {
  switch (value) {
    case GameCommandTypeJoinGameRequest:
    case GameCommandTypeJoinGameResponse:
    case GameCommandTypeStartGameRequest:
    case GameCommandTypeStartGameResponse:
    case GameCommandTypeQuitGameRequest:
    case GameCommandTypeQuitGameResponse:
    case GameCommandTypeSendDrawDataRequest:
    case GameCommandTypeSendDrawDataResponse:
    case GameCommandTypeCleanDrawRequest:
    case GameCommandTypeCleanDrawResponse:
    case GameCommandTypeChatRequest:
    case GameCommandTypeChatResponse:
    case GameCommandTypeCompleteGameRequest:
    case GameCommandTypeCompleteGameResponse:
    case GameCommandTypeForceUserQuitRequest:
    case GameCommandTypeForceUserQuitResponse:
    case GameCommandTypeFacetimeChatRequest:
    case GameCommandTypeFacetimeChatResponse:
    case GameCommandTypeFacetimeChatStart:
    case GameCommandTypeKeepAliveRequest:
    case GameCommandTypeKeepAliveResponse:
    case GameCommandTypeGetRoomsRequest:
    case GameCommandTypeGetRoomsResponse:
    case GameCommandTypeCreateRoomRequest:
    case GameCommandTypeCreateRoomResponse:
    case GameCommandTypeEnterRoomRequest:
    case GameCommandTypeEnterRoomResponse:
    case GameCommandTypeRegisterRoomsNotificationRequest:
    case GameCommandTypeRegisterRoomsNotificationResponse:
    case GameCommandTypeUnregisterRoomsNotificationRequest:
    case GameCommandTypeUnregisterRoomsNotificationResponse:
    case GameCommandTypeSerachRoomRequest:
    case GameCommandTypeSearchRoomResponse:
    case GameCommandTypeCallDiceRequest:
    case GameCommandTypeCallDiceResponse:
    case GameCommandTypeOpenDiceRequest:
    case GameCommandTypeOpenDiceResponse:
    case GameCommandTypeBetDiceRequest:
    case GameCommandTypeBetDiceResponse:
    case GameCommandTypeUseItemRequest:
    case GameCommandTypeUseItemResponse:
    case GameCommandTypeBetRequest:
    case GameCommandTypeBetResponse:
    case GameCommandTypeCheckCardRequest:
    case GameCommandTypeCheckCardResponse:
    case GameCommandTypeFoldCardRequest:
    case GameCommandTypeFoldCardResponse:
    case GameCommandTypeShowCardRequest:
    case GameCommandTypeShowCardResponse:
    case GameCommandTypeCompareCardRequest:
    case GameCommandTypeCompareCardResponse:
    case GameCommandTypeChangeCardRequest:
    case GameCommandTypeChangeCardResponse:
    case GameCommandTypeTimeoutSettingRequest:
    case GameCommandTypeTimeoutSettingResponse:
    case GameCommandTypeUserJoinNotificationRequest:
    case GameCommandTypeUserJoinNotificationResponse:
    case GameCommandTypeUserQuitNotificationRequest:
    case GameCommandTypeUserQuitNotificationResponse:
    case GameCommandTypeGameStartNotificationRequest:
    case GameCommandTypeGameStartNotificationResponse:
    case GameCommandTypeHostChangeNotificationRequest:
    case GameCommandTypeHostChangeNotificationResponse:
    case GameCommandTypeNewDrawDataNotificationRequest:
    case GameCommandTypeNewDrawDataNotificationResponse:
    case GameCommandTypeCleanDrawNotificationRequest:
    case GameCommandTypeCleanDrawNotificationResponse:
    case GameCommandTypeChatNotificationRequest:
    case GameCommandTypeChatNotificationResponse:
    case GameCommandTypeGameTurnCompleteNotificationRequest:
    case GameCommandTypeGameTurnCompleteNotificationResponse:
    case GameCommandTypeLocalChannelDisconnect:
    case GameCommandTypeLocalFinishGame:
    case GameCommandTypeLocalJoinGame:
    case GameCommandTypeLocalGameTurnComplete:
    case GameCommandTypeLocalUserTimeOut:
    case GameCommandTypeLocalNewUserJoin:
    case GameCommandTypeLocalUserQuit:
    case GameCommandTypeLocalDrawUserQuit:
    case GameCommandTypeLocalAllOtherUserQuit:
    case GameCommandTypeLocalOtherUserQuit:
    case GameCommandTypeLocalTimeOut:
    case GameCommandTypeLocalStartGame:
    case GameCommandTypeLocalAllUserQuit:
    case GameCommandTypeLocalAllUserGuess:
    case GameCommandTypeLocalDrawUserChat:
    case GameCommandTypeLocalPlayUserQuit:
    case GameCommandTypeLocalCallDice:
    case GameCommandTypeLocalOpenDice:
    case GameCommandTypeLocalUserSkip:
    case GameCommandTypeLocalAllUserBet:
    case GameCommandTypeLocalBet:
    case GameCommandTypeLocalCheckCard:
    case GameCommandTypeLocalFoldCard:
    case GameCommandTypeLocalShowCard:
    case GameCommandTypeLocalCompareCard:
    case GameCommandTypeLocalNotCurrentTurnFoldCard:
    case GameCommandTypeLocalChangeCard:
    case GameCommandTypeLocalWordPicked:
    case GameCommandTypeRoomNotificationRequest:
    case GameCommandTypeRoomNotificationResponse:
    case GameCommandTypeRollDiceBeginNotificationRequest:
    case GameCommandTypeRollDiceBeginNotificationResponse:
    case GameCommandTypeRollDiceEndNotificationRequest:
    case GameCommandTypeRollDiceEndNotificationResponse:
    case GameCommandTypeNextPlayerStartNotificationRequest:
    case GameCommandTypeNextPlayerStartNotificationResponse:
    case GameCommandTypeUserDiceNotification:
    case GameCommandTypeGameOverNotificationRequest:
    case GameCommandTypeGameOverNotificationResponse:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGameCommandType(GameCommandType value) {
  switch (value) {
    case GameCommandTypeJoinGameRequest:
      return @"GameCommandTypeJoinGameRequest";
    case GameCommandTypeJoinGameResponse:
      return @"GameCommandTypeJoinGameResponse";
    case GameCommandTypeStartGameRequest:
      return @"GameCommandTypeStartGameRequest";
    case GameCommandTypeStartGameResponse:
      return @"GameCommandTypeStartGameResponse";
    case GameCommandTypeQuitGameRequest:
      return @"GameCommandTypeQuitGameRequest";
    case GameCommandTypeQuitGameResponse:
      return @"GameCommandTypeQuitGameResponse";
    case GameCommandTypeSendDrawDataRequest:
      return @"GameCommandTypeSendDrawDataRequest";
    case GameCommandTypeSendDrawDataResponse:
      return @"GameCommandTypeSendDrawDataResponse";
    case GameCommandTypeCleanDrawRequest:
      return @"GameCommandTypeCleanDrawRequest";
    case GameCommandTypeCleanDrawResponse:
      return @"GameCommandTypeCleanDrawResponse";
    case GameCommandTypeChatRequest:
      return @"GameCommandTypeChatRequest";
    case GameCommandTypeChatResponse:
      return @"GameCommandTypeChatResponse";
    case GameCommandTypeCompleteGameRequest:
      return @"GameCommandTypeCompleteGameRequest";
    case GameCommandTypeCompleteGameResponse:
      return @"GameCommandTypeCompleteGameResponse";
    case GameCommandTypeForceUserQuitRequest:
      return @"GameCommandTypeForceUserQuitRequest";
    case GameCommandTypeForceUserQuitResponse:
      return @"GameCommandTypeForceUserQuitResponse";
    case GameCommandTypeFacetimeChatRequest:
      return @"GameCommandTypeFacetimeChatRequest";
    case GameCommandTypeFacetimeChatResponse:
      return @"GameCommandTypeFacetimeChatResponse";
    case GameCommandTypeFacetimeChatStart:
      return @"GameCommandTypeFacetimeChatStart";
    case GameCommandTypeKeepAliveRequest:
      return @"GameCommandTypeKeepAliveRequest";
    case GameCommandTypeKeepAliveResponse:
      return @"GameCommandTypeKeepAliveResponse";
    case GameCommandTypeGetRoomsRequest:
      return @"GameCommandTypeGetRoomsRequest";
    case GameCommandTypeGetRoomsResponse:
      return @"GameCommandTypeGetRoomsResponse";
    case GameCommandTypeCreateRoomRequest:
      return @"GameCommandTypeCreateRoomRequest";
    case GameCommandTypeCreateRoomResponse:
      return @"GameCommandTypeCreateRoomResponse";
    case GameCommandTypeEnterRoomRequest:
      return @"GameCommandTypeEnterRoomRequest";
    case GameCommandTypeEnterRoomResponse:
      return @"GameCommandTypeEnterRoomResponse";
    case GameCommandTypeRegisterRoomsNotificationRequest:
      return @"GameCommandTypeRegisterRoomsNotificationRequest";
    case GameCommandTypeRegisterRoomsNotificationResponse:
      return @"GameCommandTypeRegisterRoomsNotificationResponse";
    case GameCommandTypeUnregisterRoomsNotificationRequest:
      return @"GameCommandTypeUnregisterRoomsNotificationRequest";
    case GameCommandTypeUnregisterRoomsNotificationResponse:
      return @"GameCommandTypeUnregisterRoomsNotificationResponse";
    case GameCommandTypeSerachRoomRequest:
      return @"GameCommandTypeSerachRoomRequest";
    case GameCommandTypeSearchRoomResponse:
      return @"GameCommandTypeSearchRoomResponse";
    case GameCommandTypeCallDiceRequest:
      return @"GameCommandTypeCallDiceRequest";
    case GameCommandTypeCallDiceResponse:
      return @"GameCommandTypeCallDiceResponse";
    case GameCommandTypeOpenDiceRequest:
      return @"GameCommandTypeOpenDiceRequest";
    case GameCommandTypeOpenDiceResponse:
      return @"GameCommandTypeOpenDiceResponse";
    case GameCommandTypeBetDiceRequest:
      return @"GameCommandTypeBetDiceRequest";
    case GameCommandTypeBetDiceResponse:
      return @"GameCommandTypeBetDiceResponse";
    case GameCommandTypeUseItemRequest:
      return @"GameCommandTypeUseItemRequest";
    case GameCommandTypeUseItemResponse:
      return @"GameCommandTypeUseItemResponse";
    case GameCommandTypeBetRequest:
      return @"GameCommandTypeBetRequest";
    case GameCommandTypeBetResponse:
      return @"GameCommandTypeBetResponse";
    case GameCommandTypeCheckCardRequest:
      return @"GameCommandTypeCheckCardRequest";
    case GameCommandTypeCheckCardResponse:
      return @"GameCommandTypeCheckCardResponse";
    case GameCommandTypeFoldCardRequest:
      return @"GameCommandTypeFoldCardRequest";
    case GameCommandTypeFoldCardResponse:
      return @"GameCommandTypeFoldCardResponse";
    case GameCommandTypeShowCardRequest:
      return @"GameCommandTypeShowCardRequest";
    case GameCommandTypeShowCardResponse:
      return @"GameCommandTypeShowCardResponse";
    case GameCommandTypeCompareCardRequest:
      return @"GameCommandTypeCompareCardRequest";
    case GameCommandTypeCompareCardResponse:
      return @"GameCommandTypeCompareCardResponse";
    case GameCommandTypeChangeCardRequest:
      return @"GameCommandTypeChangeCardRequest";
    case GameCommandTypeChangeCardResponse:
      return @"GameCommandTypeChangeCardResponse";
    case GameCommandTypeTimeoutSettingRequest:
      return @"GameCommandTypeTimeoutSettingRequest";
    case GameCommandTypeTimeoutSettingResponse:
      return @"GameCommandTypeTimeoutSettingResponse";
    case GameCommandTypeUserJoinNotificationRequest:
      return @"GameCommandTypeUserJoinNotificationRequest";
    case GameCommandTypeUserJoinNotificationResponse:
      return @"GameCommandTypeUserJoinNotificationResponse";
    case GameCommandTypeUserQuitNotificationRequest:
      return @"GameCommandTypeUserQuitNotificationRequest";
    case GameCommandTypeUserQuitNotificationResponse:
      return @"GameCommandTypeUserQuitNotificationResponse";
    case GameCommandTypeGameStartNotificationRequest:
      return @"GameCommandTypeGameStartNotificationRequest";
    case GameCommandTypeGameStartNotificationResponse:
      return @"GameCommandTypeGameStartNotificationResponse";
    case GameCommandTypeHostChangeNotificationRequest:
      return @"GameCommandTypeHostChangeNotificationRequest";
    case GameCommandTypeHostChangeNotificationResponse:
      return @"GameCommandTypeHostChangeNotificationResponse";
    case GameCommandTypeNewDrawDataNotificationRequest:
      return @"GameCommandTypeNewDrawDataNotificationRequest";
    case GameCommandTypeNewDrawDataNotificationResponse:
      return @"GameCommandTypeNewDrawDataNotificationResponse";
    case GameCommandTypeCleanDrawNotificationRequest:
      return @"GameCommandTypeCleanDrawNotificationRequest";
    case GameCommandTypeCleanDrawNotificationResponse:
      return @"GameCommandTypeCleanDrawNotificationResponse";
    case GameCommandTypeChatNotificationRequest:
      return @"GameCommandTypeChatNotificationRequest";
    case GameCommandTypeChatNotificationResponse:
      return @"GameCommandTypeChatNotificationResponse";
    case GameCommandTypeGameTurnCompleteNotificationRequest:
      return @"GameCommandTypeGameTurnCompleteNotificationRequest";
    case GameCommandTypeGameTurnCompleteNotificationResponse:
      return @"GameCommandTypeGameTurnCompleteNotificationResponse";
    case GameCommandTypeLocalChannelDisconnect:
      return @"GameCommandTypeLocalChannelDisconnect";
    case GameCommandTypeLocalFinishGame:
      return @"GameCommandTypeLocalFinishGame";
    case GameCommandTypeLocalJoinGame:
      return @"GameCommandTypeLocalJoinGame";
    case GameCommandTypeLocalGameTurnComplete:
      return @"GameCommandTypeLocalGameTurnComplete";
    case GameCommandTypeLocalUserTimeOut:
      return @"GameCommandTypeLocalUserTimeOut";
    case GameCommandTypeLocalNewUserJoin:
      return @"GameCommandTypeLocalNewUserJoin";
    case GameCommandTypeLocalUserQuit:
      return @"GameCommandTypeLocalUserQuit";
    case GameCommandTypeLocalDrawUserQuit:
      return @"GameCommandTypeLocalDrawUserQuit";
    case GameCommandTypeLocalAllOtherUserQuit:
      return @"GameCommandTypeLocalAllOtherUserQuit";
    case GameCommandTypeLocalOtherUserQuit:
      return @"GameCommandTypeLocalOtherUserQuit";
    case GameCommandTypeLocalTimeOut:
      return @"GameCommandTypeLocalTimeOut";
    case GameCommandTypeLocalStartGame:
      return @"GameCommandTypeLocalStartGame";
    case GameCommandTypeLocalAllUserQuit:
      return @"GameCommandTypeLocalAllUserQuit";
    case GameCommandTypeLocalAllUserGuess:
      return @"GameCommandTypeLocalAllUserGuess";
    case GameCommandTypeLocalDrawUserChat:
      return @"GameCommandTypeLocalDrawUserChat";
    case GameCommandTypeLocalPlayUserQuit:
      return @"GameCommandTypeLocalPlayUserQuit";
    case GameCommandTypeLocalCallDice:
      return @"GameCommandTypeLocalCallDice";
    case GameCommandTypeLocalOpenDice:
      return @"GameCommandTypeLocalOpenDice";
    case GameCommandTypeLocalUserSkip:
      return @"GameCommandTypeLocalUserSkip";
    case GameCommandTypeLocalAllUserBet:
      return @"GameCommandTypeLocalAllUserBet";
    case GameCommandTypeLocalBet:
      return @"GameCommandTypeLocalBet";
    case GameCommandTypeLocalCheckCard:
      return @"GameCommandTypeLocalCheckCard";
    case GameCommandTypeLocalFoldCard:
      return @"GameCommandTypeLocalFoldCard";
    case GameCommandTypeLocalShowCard:
      return @"GameCommandTypeLocalShowCard";
    case GameCommandTypeLocalCompareCard:
      return @"GameCommandTypeLocalCompareCard";
    case GameCommandTypeLocalNotCurrentTurnFoldCard:
      return @"GameCommandTypeLocalNotCurrentTurnFoldCard";
    case GameCommandTypeLocalChangeCard:
      return @"GameCommandTypeLocalChangeCard";
    case GameCommandTypeLocalWordPicked:
      return @"GameCommandTypeLocalWordPicked";
    case GameCommandTypeRoomNotificationRequest:
      return @"GameCommandTypeRoomNotificationRequest";
    case GameCommandTypeRoomNotificationResponse:
      return @"GameCommandTypeRoomNotificationResponse";
    case GameCommandTypeRollDiceBeginNotificationRequest:
      return @"GameCommandTypeRollDiceBeginNotificationRequest";
    case GameCommandTypeRollDiceBeginNotificationResponse:
      return @"GameCommandTypeRollDiceBeginNotificationResponse";
    case GameCommandTypeRollDiceEndNotificationRequest:
      return @"GameCommandTypeRollDiceEndNotificationRequest";
    case GameCommandTypeRollDiceEndNotificationResponse:
      return @"GameCommandTypeRollDiceEndNotificationResponse";
    case GameCommandTypeNextPlayerStartNotificationRequest:
      return @"GameCommandTypeNextPlayerStartNotificationRequest";
    case GameCommandTypeNextPlayerStartNotificationResponse:
      return @"GameCommandTypeNextPlayerStartNotificationResponse";
    case GameCommandTypeUserDiceNotification:
      return @"GameCommandTypeUserDiceNotification";
    case GameCommandTypeGameOverNotificationRequest:
      return @"GameCommandTypeGameOverNotificationRequest";
    case GameCommandTypeGameOverNotificationResponse:
      return @"GameCommandTypeGameOverNotificationResponse";
    default:
      return nil;
  }
}

BOOL GameResultCodeIsValidValue(GameResultCode value) {
  switch (value) {
    case GameResultCodeSuccess:
    case GameResultCodeErrorJoinGame:
    case GameResultCodeErrorUseridNull:
    case GameResultCodeErrorUserCannotStartGame:
    case GameResultCodeErrorUserNotInSession:
    case GameResultCodeErrorUserNotCurrentPlayUser:
    case GameResultCodeErrorCurrentPlayUserNull:
    case GameResultCodeErrorNoSessionId:
    case GameResultCodeErrorNextStateNotFound:
    case GameResultCodeErrorSessionidNull:
    case GameResultCodeErrorSessionAlreadyStart:
    case GameResultCodeErrorSessionNotStart:
    case GameResultCodeErrorNoSessionAvailable:
    case GameResultCodeErrorSessionidFull:
    case GameResultCodeErrorSessionNameDuplicated:
    case GameResultCodeErrorNoDrawData:
    case GameResultCodeErrorDiceAlreadyOpen:
    case GameResultCodeErrorUserAlreadyCallDice:
    case GameResultCodeErrorDiceOpenSelf:
    case GameResultCodeErrorCannotBet:
    case GameResultCodeErrorAlreadyCheckCard:
    case GameResultCodeErrorCannotCheckCard:
    case GameResultCodeErrorAlreadyFoldCard:
    case GameResultCodeErrorCannotFoldCard:
    case GameResultCodeErrorAlreadyShowCard:
    case GameResultCodeErrorCannotShowCard:
    case GameResultCodeErrorAlreadyCompareCard:
    case GameResultCodeErrorCannotCompareCard:
    case GameResultCodeErrorExcessChahgeQuota:
    case GameResultCodeErrorAlreadyChangeCardThisRound:
    case GameResultCodeErrorUnknownItem:
    case GameResultCodeErrorExcessTimeLimit:
    case GameResultCodeErrorSystemHandlerNotFound:
    case GameResultCodeErrorSystemException:
    case GameResultCodeErrorSystemSecurityCheck:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGameResultCode(GameResultCode value) {
  switch (value) {
    case GameResultCodeSuccess:
      return @"GameResultCodeSuccess";
    case GameResultCodeErrorJoinGame:
      return @"GameResultCodeErrorJoinGame";
    case GameResultCodeErrorUseridNull:
      return @"GameResultCodeErrorUseridNull";
    case GameResultCodeErrorUserCannotStartGame:
      return @"GameResultCodeErrorUserCannotStartGame";
    case GameResultCodeErrorUserNotInSession:
      return @"GameResultCodeErrorUserNotInSession";
    case GameResultCodeErrorUserNotCurrentPlayUser:
      return @"GameResultCodeErrorUserNotCurrentPlayUser";
    case GameResultCodeErrorCurrentPlayUserNull:
      return @"GameResultCodeErrorCurrentPlayUserNull";
    case GameResultCodeErrorNoSessionId:
      return @"GameResultCodeErrorNoSessionId";
    case GameResultCodeErrorNextStateNotFound:
      return @"GameResultCodeErrorNextStateNotFound";
    case GameResultCodeErrorSessionidNull:
      return @"GameResultCodeErrorSessionidNull";
    case GameResultCodeErrorSessionAlreadyStart:
      return @"GameResultCodeErrorSessionAlreadyStart";
    case GameResultCodeErrorSessionNotStart:
      return @"GameResultCodeErrorSessionNotStart";
    case GameResultCodeErrorNoSessionAvailable:
      return @"GameResultCodeErrorNoSessionAvailable";
    case GameResultCodeErrorSessionidFull:
      return @"GameResultCodeErrorSessionidFull";
    case GameResultCodeErrorSessionNameDuplicated:
      return @"GameResultCodeErrorSessionNameDuplicated";
    case GameResultCodeErrorNoDrawData:
      return @"GameResultCodeErrorNoDrawData";
    case GameResultCodeErrorDiceAlreadyOpen:
      return @"GameResultCodeErrorDiceAlreadyOpen";
    case GameResultCodeErrorUserAlreadyCallDice:
      return @"GameResultCodeErrorUserAlreadyCallDice";
    case GameResultCodeErrorDiceOpenSelf:
      return @"GameResultCodeErrorDiceOpenSelf";
    case GameResultCodeErrorCannotBet:
      return @"GameResultCodeErrorCannotBet";
    case GameResultCodeErrorAlreadyCheckCard:
      return @"GameResultCodeErrorAlreadyCheckCard";
    case GameResultCodeErrorCannotCheckCard:
      return @"GameResultCodeErrorCannotCheckCard";
    case GameResultCodeErrorAlreadyFoldCard:
      return @"GameResultCodeErrorAlreadyFoldCard";
    case GameResultCodeErrorCannotFoldCard:
      return @"GameResultCodeErrorCannotFoldCard";
    case GameResultCodeErrorAlreadyShowCard:
      return @"GameResultCodeErrorAlreadyShowCard";
    case GameResultCodeErrorCannotShowCard:
      return @"GameResultCodeErrorCannotShowCard";
    case GameResultCodeErrorAlreadyCompareCard:
      return @"GameResultCodeErrorAlreadyCompareCard";
    case GameResultCodeErrorCannotCompareCard:
      return @"GameResultCodeErrorCannotCompareCard";
    case GameResultCodeErrorExcessChahgeQuota:
      return @"GameResultCodeErrorExcessChahgeQuota";
    case GameResultCodeErrorAlreadyChangeCardThisRound:
      return @"GameResultCodeErrorAlreadyChangeCardThisRound";
    case GameResultCodeErrorUnknownItem:
      return @"GameResultCodeErrorUnknownItem";
    case GameResultCodeErrorExcessTimeLimit:
      return @"GameResultCodeErrorExcessTimeLimit";
    case GameResultCodeErrorSystemHandlerNotFound:
      return @"GameResultCodeErrorSystemHandlerNotFound";
    case GameResultCodeErrorSystemException:
      return @"GameResultCodeErrorSystemException";
    case GameResultCodeErrorSystemSecurityCheck:
      return @"GameResultCodeErrorSystemSecurityCheck";
    default:
      return nil;
  }
}

BOOL GameCompleteReasonIsValidValue(GameCompleteReason value) {
  switch (value) {
    case GameCompleteReasonReasonNotComplete:
    case GameCompleteReasonReasonAllUserGuess:
    case GameCompleteReasonReasonAllUserQuit:
    case GameCompleteReasonReasonDrawUserQuit:
    case GameCompleteReasonReasonOnlyOneUser:
    case GameCompleteReasonReasonExpired:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGameCompleteReason(GameCompleteReason value) {
  switch (value) {
    case GameCompleteReasonReasonNotComplete:
      return @"GameCompleteReasonReasonNotComplete";
    case GameCompleteReasonReasonAllUserGuess:
      return @"GameCompleteReasonReasonAllUserGuess";
    case GameCompleteReasonReasonAllUserQuit:
      return @"GameCompleteReasonReasonAllUserQuit";
    case GameCompleteReasonReasonDrawUserQuit:
      return @"GameCompleteReasonReasonDrawUserQuit";
    case GameCompleteReasonReasonOnlyOneUser:
      return @"GameCompleteReasonReasonOnlyOneUser";
    case GameCompleteReasonReasonExpired:
      return @"GameCompleteReasonReasonExpired";
    default:
      return nil;
  }
}

BOOL GameChatTypeIsValidValue(GameChatType value) {
  switch (value) {
    case GameChatTypeChatGroup:
    case GameChatTypeChatPrivate:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGameChatType(GameChatType value) {
  switch (value) {
    case GameChatTypeChatGroup:
      return @"GameChatTypeChatGroup";
    case GameChatTypeChatPrivate:
      return @"GameChatTypeChatPrivate";
    default:
      return nil;
  }
}

BOOL DiceGameRuleTypeIsValidValue(DiceGameRuleType value) {
  switch (value) {
    case DiceGameRuleTypeRuleNormal:
    case DiceGameRuleTypeRuleHigh:
    case DiceGameRuleTypeRuleSuperHigh:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromDiceGameRuleType(DiceGameRuleType value) {
  switch (value) {
    case DiceGameRuleTypeRuleNormal:
      return @"DiceGameRuleTypeRuleNormal";
    case DiceGameRuleTypeRuleHigh:
      return @"DiceGameRuleTypeRuleHigh";
    case DiceGameRuleTypeRuleSuperHigh:
      return @"DiceGameRuleTypeRuleSuperHigh";
    default:
      return nil;
  }
}

BOOL PBWordTypeIsValidValue(PBWordType value) {
  switch (value) {
    case PBWordTypeSystem:
    case PBWordTypeCustom:
    case PBWordTypeHot:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBWordType(PBWordType value) {
  switch (value) {
    case PBWordTypeSystem:
      return @"PBWordTypeSystem";
    case PBWordTypeCustom:
      return @"PBWordTypeCustom";
    case PBWordTypeHot:
      return @"PBWordTypeHot";
    default:
      return nil;
  }
}

BOOL PBWallTypeIsValidValue(PBWallType value) {
  switch (value) {
    case PBWallTypeOpuses:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBWallType(PBWallType value) {
  switch (value) {
    case PBWallTypeOpuses:
      return @"PBWallTypeOpuses";
    default:
      return nil;
  }
}

BOOL PBMessageTypeIsValidValue(PBMessageType value) {
  switch (value) {
    case PBMessageTypeText:
    case PBMessageTypeLocationRequest:
    case PBMessageTypeLocationResponse:
    case PBMessageTypeDraw:
    case PBMessageTypeImage:
    case PBMessageTypeVoice:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBMessageType(PBMessageType value) {
  switch (value) {
    case PBMessageTypeText:
      return @"PBMessageTypeText";
    case PBMessageTypeLocationRequest:
      return @"PBMessageTypeLocationRequest";
    case PBMessageTypeLocationResponse:
      return @"PBMessageTypeLocationResponse";
    case PBMessageTypeDraw:
      return @"PBMessageTypeDraw";
    case PBMessageTypeImage:
      return @"PBMessageTypeImage";
    case PBMessageTypeVoice:
      return @"PBMessageTypeVoice";
    default:
      return nil;
  }
}

BOOL PBContestStatusIsValidValue(PBContestStatus value) {
  switch (value) {
    case PBContestStatusPending:
    case PBContestStatusRunning:
    case PBContestStatusPassed:
    case PBContestStatusDeleted:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBContestStatus(PBContestStatus value) {
  switch (value) {
    case PBContestStatusPending:
      return @"PBContestStatusPending";
    case PBContestStatusRunning:
      return @"PBContestStatusRunning";
    case PBContestStatusPassed:
      return @"PBContestStatusPassed";
    case PBContestStatusDeleted:
      return @"PBContestStatusDeleted";
    default:
      return nil;
  }
}

BOOL PBOpusCategoryTypeIsValidValue(PBOpusCategoryType value) {
  switch (value) {
    case PBOpusCategoryTypeDrawCategory:
    case PBOpusCategoryTypeSingCategory:
    case PBOpusCategoryTypeAskPsCategory:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBOpusCategoryType(PBOpusCategoryType value) {
  switch (value) {
    case PBOpusCategoryTypeDrawCategory:
      return @"PBOpusCategoryTypeDrawCategory";
    case PBOpusCategoryTypeSingCategory:
      return @"PBOpusCategoryTypeSingCategory";
    case PBOpusCategoryTypeAskPsCategory:
      return @"PBOpusCategoryTypeAskPsCategory";
    default:
      return nil;
  }
}


// @@protoc_insertion_point(global_scope)
