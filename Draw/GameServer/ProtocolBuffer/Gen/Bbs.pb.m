// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "BBS.pb.h"
// @@protoc_insertion_point(imports)

@implementation BbsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BbsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBBBSUser ()
@property (strong) NSString* userId;
@property (strong) NSString* nickName;
@property (strong) NSString* avatar;
@property BOOL gender;
@property SInt32 vip;
@end

@implementation PBBBSUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) _value_ {
  gender_ = !!_value_;
}
- (BOOL) hasVip {
  return !!hasVip_;
}
- (void) setHasVip:(BOOL) _value_ {
  hasVip_ = !!_value_;
}
@synthesize vip;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.vip = 0;
  }
  return self;
}
static PBBBSUser* defaultPBBBSUserInstance = nil;
+ (void) initialize {
  if (self == [PBBBSUser class]) {
    defaultPBBBSUserInstance = [[PBBBSUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:4 value:self.gender];
  }
  if (self.hasVip) {
    [output writeInt32:5 value:self.vip];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeBoolSize(4, self.gender);
  }
  if (self.hasVip) {
    size_ += computeInt32Size(5, self.vip);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSUser*) parseFromData:(NSData*) data {
  return (PBBBSUser*)[[[PBBBSUser builder] mergeFromData:data] build];
}
+ (PBBBSUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSUser*)[[[PBBBSUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSUser*)[[[PBBBSUser builder] mergeFromInputStream:input] build];
}
+ (PBBBSUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSUser*)[[[PBBBSUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSUser*)[[[PBBBSUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSUser*)[[[PBBBSUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSUserBuilder*) builder {
  return [[PBBBSUserBuilder alloc] init];
}
+ (PBBBSUserBuilder*) builderWithPrototype:(PBBBSUser*) prototype {
  return [[PBBBSUser builder] mergeFrom:prototype];
}
- (PBBBSUserBuilder*) builder {
  return [PBBBSUser builder];
}
- (PBBBSUserBuilder*) toBuilder {
  return [PBBBSUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithBool:self.gender]];
  }
  if (self.hasVip) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vip", [NSNumber numberWithInteger:self.vip]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSUser class]]) {
    return NO;
  }
  PBBBSUser *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasVip == otherMessage.hasVip &&
      (!self.hasVip || self.vip == otherMessage.vip) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gender] hash];
  }
  if (self.hasVip) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.vip] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSUserBuilder()
@property (strong) PBBBSUser* resultPbbbsuser;
@end

@implementation PBBBSUserBuilder
@synthesize resultPbbbsuser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsuser = [[PBBBSUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsuser;
}
- (PBBBSUserBuilder*) clear {
  self.resultPbbbsuser = [[PBBBSUser alloc] init];
  return self;
}
- (PBBBSUserBuilder*) clone {
  return [PBBBSUser builderWithPrototype:resultPbbbsuser];
}
- (PBBBSUser*) defaultInstance {
  return [PBBBSUser defaultInstance];
}
- (PBBBSUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSUser*) buildPartial {
  PBBBSUser* returnMe = resultPbbbsuser;
  self.resultPbbbsuser = nil;
  return returnMe;
}
- (PBBBSUserBuilder*) mergeFrom:(PBBBSUser*) other {
  if (other == [PBBBSUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasVip) {
    [self setVip:other.vip];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGender:[input readBool]];
        break;
      }
      case 40: {
        [self setVip:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbbbsuser.hasUserId;
}
- (NSString*) userId {
  return resultPbbbsuser.userId;
}
- (PBBBSUserBuilder*) setUserId:(NSString*) value {
  resultPbbbsuser.hasUserId = YES;
  resultPbbbsuser.userId = value;
  return self;
}
- (PBBBSUserBuilder*) clearUserId {
  resultPbbbsuser.hasUserId = NO;
  resultPbbbsuser.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return resultPbbbsuser.hasNickName;
}
- (NSString*) nickName {
  return resultPbbbsuser.nickName;
}
- (PBBBSUserBuilder*) setNickName:(NSString*) value {
  resultPbbbsuser.hasNickName = YES;
  resultPbbbsuser.nickName = value;
  return self;
}
- (PBBBSUserBuilder*) clearNickName {
  resultPbbbsuser.hasNickName = NO;
  resultPbbbsuser.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbbbsuser.hasAvatar;
}
- (NSString*) avatar {
  return resultPbbbsuser.avatar;
}
- (PBBBSUserBuilder*) setAvatar:(NSString*) value {
  resultPbbbsuser.hasAvatar = YES;
  resultPbbbsuser.avatar = value;
  return self;
}
- (PBBBSUserBuilder*) clearAvatar {
  resultPbbbsuser.hasAvatar = NO;
  resultPbbbsuser.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultPbbbsuser.hasGender;
}
- (BOOL) gender {
  return resultPbbbsuser.gender;
}
- (PBBBSUserBuilder*) setGender:(BOOL) value {
  resultPbbbsuser.hasGender = YES;
  resultPbbbsuser.gender = value;
  return self;
}
- (PBBBSUserBuilder*) clearGender {
  resultPbbbsuser.hasGender = NO;
  resultPbbbsuser.gender = NO;
  return self;
}
- (BOOL) hasVip {
  return resultPbbbsuser.hasVip;
}
- (SInt32) vip {
  return resultPbbbsuser.vip;
}
- (PBBBSUserBuilder*) setVip:(SInt32) value {
  resultPbbbsuser.hasVip = YES;
  resultPbbbsuser.vip = value;
  return self;
}
- (PBBBSUserBuilder*) clearVip {
  resultPbbbsuser.hasVip = NO;
  resultPbbbsuser.vip = 0;
  return self;
}
@end

@interface PBBBSDraw ()
@property (strong) NSMutableArray * drawActionListArray;
@property SInt32 version;
@property (strong) PBSize* canvasSize;
@end

@implementation PBBBSDraw

@synthesize drawActionListArray;
@dynamic drawActionList;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
    self.canvasSize = [PBSize defaultInstance];
  }
  return self;
}
static PBBBSDraw* defaultPBBBSDrawInstance = nil;
+ (void) initialize {
  if (self == [PBBBSDraw class]) {
    defaultPBBBSDrawInstance = [[PBBBSDraw alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSDrawInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSDrawInstance;
}
- (NSArray *)drawActionList {
  return drawActionListArray;
}
- (PBDrawAction*)drawActionListAtIndex:(NSUInteger)index {
  return [drawActionListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitdrawActionList = YES;
   [self.drawActionList enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawActionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawActionList) return isInitdrawActionList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasVersion) {
    [output writeInt32:2 value:self.version];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:3 value:self.canvasSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasVersion) {
    size_ += computeInt32Size(2, self.version);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(3, self.canvasSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSDraw*) parseFromData:(NSData*) data {
  return (PBBBSDraw*)[[[PBBBSDraw builder] mergeFromData:data] build];
}
+ (PBBBSDraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSDraw*)[[[PBBBSDraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSDraw*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSDraw*)[[[PBBBSDraw builder] mergeFromInputStream:input] build];
}
+ (PBBBSDraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSDraw*)[[[PBBBSDraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSDraw*)[[[PBBBSDraw builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSDraw*)[[[PBBBSDraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSDrawBuilder*) builder {
  return [[PBBBSDrawBuilder alloc] init];
}
+ (PBBBSDrawBuilder*) builderWithPrototype:(PBBBSDraw*) prototype {
  return [[PBBBSDraw builder] mergeFrom:prototype];
}
- (PBBBSDrawBuilder*) builder {
  return [PBBBSDraw builder];
}
- (PBBBSDrawBuilder*) toBuilder {
  return [PBBBSDraw builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawActionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSDraw class]]) {
    return NO;
  }
  PBBBSDraw *otherMessage = other;
  return
      [self.drawActionListArray isEqualToArray:otherMessage.drawActionListArray] &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSDrawBuilder()
@property (strong) PBBBSDraw* resultPbbbsdraw;
@end

@implementation PBBBSDrawBuilder
@synthesize resultPbbbsdraw;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsdraw = [[PBBBSDraw alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsdraw;
}
- (PBBBSDrawBuilder*) clear {
  self.resultPbbbsdraw = [[PBBBSDraw alloc] init];
  return self;
}
- (PBBBSDrawBuilder*) clone {
  return [PBBBSDraw builderWithPrototype:resultPbbbsdraw];
}
- (PBBBSDraw*) defaultInstance {
  return [PBBBSDraw defaultInstance];
}
- (PBBBSDraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSDraw*) buildPartial {
  PBBBSDraw* returnMe = resultPbbbsdraw;
  self.resultPbbbsdraw = nil;
  return returnMe;
}
- (PBBBSDrawBuilder*) mergeFrom:(PBBBSDraw*) other {
  if (other == [PBBBSDraw defaultInstance]) {
    return self;
  }
  if (other.drawActionListArray.count > 0) {
    if (resultPbbbsdraw.drawActionListArray == nil) {
      resultPbbbsdraw.drawActionListArray = [[NSMutableArray alloc] initWithArray:other.drawActionListArray];
    } else {
      [resultPbbbsdraw.drawActionListArray addObjectsFromArray:other.drawActionListArray];
    }
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSDrawBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSDrawBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBDrawActionBuilder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawActionList:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 26: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)drawActionList {
  return resultPbbbsdraw.drawActionListArray;
}
- (PBDrawAction*)drawActionListAtIndex:(NSUInteger)index {
  return [resultPbbbsdraw drawActionListAtIndex:index];
}
- (PBBBSDrawBuilder *)addDrawActionList:(PBDrawAction*)value {
  if (resultPbbbsdraw.drawActionListArray == nil) {
    resultPbbbsdraw.drawActionListArray = [[NSMutableArray alloc]init];
  }
  [resultPbbbsdraw.drawActionListArray addObject:value];
  return self;
}
- (PBBBSDrawBuilder *)setDrawActionListArray:(NSArray *)array {
  resultPbbbsdraw.drawActionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBBBSDrawBuilder *)clearDrawActionList {
  resultPbbbsdraw.drawActionListArray = nil;
  return self;
}
- (BOOL) hasVersion {
  return resultPbbbsdraw.hasVersion;
}
- (SInt32) version {
  return resultPbbbsdraw.version;
}
- (PBBBSDrawBuilder*) setVersion:(SInt32) value {
  resultPbbbsdraw.hasVersion = YES;
  resultPbbbsdraw.version = value;
  return self;
}
- (PBBBSDrawBuilder*) clearVersion {
  resultPbbbsdraw.hasVersion = NO;
  resultPbbbsdraw.version = 0;
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbbbsdraw.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbbbsdraw.canvasSize;
}
- (PBBBSDrawBuilder*) setCanvasSize:(PBSize*) value {
  resultPbbbsdraw.hasCanvasSize = YES;
  resultPbbbsdraw.canvasSize = value;
  return self;
}
- (PBBBSDrawBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBBBSDrawBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbbbsdraw.hasCanvasSize &&
      resultPbbbsdraw.canvasSize != [PBSize defaultInstance]) {
    resultPbbbsdraw.canvasSize =
      [[[PBSize builderWithPrototype:resultPbbbsdraw.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbbbsdraw.canvasSize = value;
  }
  resultPbbbsdraw.hasCanvasSize = YES;
  return self;
}
- (PBBBSDrawBuilder*) clearCanvasSize {
  resultPbbbsdraw.hasCanvasSize = NO;
  resultPbbbsdraw.canvasSize = [PBSize defaultInstance];
  return self;
}
@end

@interface PBBBSContent ()
@property SInt32 type;
@property (strong) NSString* text;
@property (strong) NSString* thumbImageUrl;
@property (strong) NSString* imageUrl;
@property (strong) NSString* drawThumbUrl;
@property (strong) NSString* drawImageUrl;
@property (strong) PBBBSDraw* drawData;
@property (strong) NSString* opusId;
@property SInt32 opusCategory;
@end

@implementation PBBBSContent

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasThumbImageUrl {
  return !!hasThumbImageUrl_;
}
- (void) setHasThumbImageUrl:(BOOL) _value_ {
  hasThumbImageUrl_ = !!_value_;
}
@synthesize thumbImageUrl;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) _value_ {
  hasImageUrl_ = !!_value_;
}
@synthesize imageUrl;
- (BOOL) hasDrawThumbUrl {
  return !!hasDrawThumbUrl_;
}
- (void) setHasDrawThumbUrl:(BOOL) _value_ {
  hasDrawThumbUrl_ = !!_value_;
}
@synthesize drawThumbUrl;
- (BOOL) hasDrawImageUrl {
  return !!hasDrawImageUrl_;
}
- (void) setHasDrawImageUrl:(BOOL) _value_ {
  hasDrawImageUrl_ = !!_value_;
}
@synthesize drawImageUrl;
- (BOOL) hasDrawData {
  return !!hasDrawData_;
}
- (void) setHasDrawData:(BOOL) _value_ {
  hasDrawData_ = !!_value_;
}
@synthesize drawData;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasOpusCategory {
  return !!hasOpusCategory_;
}
- (void) setHasOpusCategory:(BOOL) _value_ {
  hasOpusCategory_ = !!_value_;
}
@synthesize opusCategory;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.text = @"";
    self.thumbImageUrl = @"";
    self.imageUrl = @"";
    self.drawThumbUrl = @"";
    self.drawImageUrl = @"";
    self.drawData = [PBBBSDraw defaultInstance];
    self.opusId = @"";
    self.opusCategory = 0;
  }
  return self;
}
static PBBBSContent* defaultPBBBSContentInstance = nil;
+ (void) initialize {
  if (self == [PBBBSContent class]) {
    defaultPBBBSContentInstance = [[PBBBSContent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSContentInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSContentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasDrawData) {
    if (!self.drawData.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasText) {
    [output writeString:2 value:self.text];
  }
  if (self.hasThumbImageUrl) {
    [output writeString:10 value:self.thumbImageUrl];
  }
  if (self.hasImageUrl) {
    [output writeString:11 value:self.imageUrl];
  }
  if (self.hasDrawThumbUrl) {
    [output writeString:20 value:self.drawThumbUrl];
  }
  if (self.hasDrawImageUrl) {
    [output writeString:21 value:self.drawImageUrl];
  }
  if (self.hasDrawData) {
    [output writeMessage:22 value:self.drawData];
  }
  if (self.hasOpusId) {
    [output writeString:30 value:self.opusId];
  }
  if (self.hasOpusCategory) {
    [output writeInt32:31 value:self.opusCategory];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasText) {
    size_ += computeStringSize(2, self.text);
  }
  if (self.hasThumbImageUrl) {
    size_ += computeStringSize(10, self.thumbImageUrl);
  }
  if (self.hasImageUrl) {
    size_ += computeStringSize(11, self.imageUrl);
  }
  if (self.hasDrawThumbUrl) {
    size_ += computeStringSize(20, self.drawThumbUrl);
  }
  if (self.hasDrawImageUrl) {
    size_ += computeStringSize(21, self.drawImageUrl);
  }
  if (self.hasDrawData) {
    size_ += computeMessageSize(22, self.drawData);
  }
  if (self.hasOpusId) {
    size_ += computeStringSize(30, self.opusId);
  }
  if (self.hasOpusCategory) {
    size_ += computeInt32Size(31, self.opusCategory);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSContent*) parseFromData:(NSData*) data {
  return (PBBBSContent*)[[[PBBBSContent builder] mergeFromData:data] build];
}
+ (PBBBSContent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSContent*)[[[PBBBSContent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSContent*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSContent*)[[[PBBBSContent builder] mergeFromInputStream:input] build];
}
+ (PBBBSContent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSContent*)[[[PBBBSContent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSContent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSContent*)[[[PBBBSContent builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSContent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSContent*)[[[PBBBSContent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSContentBuilder*) builder {
  return [[PBBBSContentBuilder alloc] init];
}
+ (PBBBSContentBuilder*) builderWithPrototype:(PBBBSContent*) prototype {
  return [[PBBBSContent builder] mergeFrom:prototype];
}
- (PBBBSContentBuilder*) builder {
  return [PBBBSContent builder];
}
- (PBBBSContentBuilder*) toBuilder {
  return [PBBBSContent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasThumbImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumbImageUrl", self.thumbImageUrl];
  }
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  if (self.hasDrawThumbUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"drawThumbUrl", self.drawThumbUrl];
  }
  if (self.hasDrawImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"drawImageUrl", self.drawImageUrl];
  }
  if (self.hasDrawData) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawData"];
    [self.drawData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasOpusCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCategory", [NSNumber numberWithInteger:self.opusCategory]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSContent class]]) {
    return NO;
  }
  PBBBSContent *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasThumbImageUrl == otherMessage.hasThumbImageUrl &&
      (!self.hasThumbImageUrl || [self.thumbImageUrl isEqual:otherMessage.thumbImageUrl]) &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      self.hasDrawThumbUrl == otherMessage.hasDrawThumbUrl &&
      (!self.hasDrawThumbUrl || [self.drawThumbUrl isEqual:otherMessage.drawThumbUrl]) &&
      self.hasDrawImageUrl == otherMessage.hasDrawImageUrl &&
      (!self.hasDrawImageUrl || [self.drawImageUrl isEqual:otherMessage.drawImageUrl]) &&
      self.hasDrawData == otherMessage.hasDrawData &&
      (!self.hasDrawData || [self.drawData isEqual:otherMessage.drawData]) &&
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasOpusCategory == otherMessage.hasOpusCategory &&
      (!self.hasOpusCategory || self.opusCategory == otherMessage.opusCategory) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasThumbImageUrl) {
    hashCode = hashCode * 31 + [self.thumbImageUrl hash];
  }
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  if (self.hasDrawThumbUrl) {
    hashCode = hashCode * 31 + [self.drawThumbUrl hash];
  }
  if (self.hasDrawImageUrl) {
    hashCode = hashCode * 31 + [self.drawImageUrl hash];
  }
  if (self.hasDrawData) {
    hashCode = hashCode * 31 + [self.drawData hash];
  }
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasOpusCategory) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.opusCategory] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSContentBuilder()
@property (strong) PBBBSContent* resultPbbbscontent;
@end

@implementation PBBBSContentBuilder
@synthesize resultPbbbscontent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbscontent = [[PBBBSContent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbscontent;
}
- (PBBBSContentBuilder*) clear {
  self.resultPbbbscontent = [[PBBBSContent alloc] init];
  return self;
}
- (PBBBSContentBuilder*) clone {
  return [PBBBSContent builderWithPrototype:resultPbbbscontent];
}
- (PBBBSContent*) defaultInstance {
  return [PBBBSContent defaultInstance];
}
- (PBBBSContent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSContent*) buildPartial {
  PBBBSContent* returnMe = resultPbbbscontent;
  self.resultPbbbscontent = nil;
  return returnMe;
}
- (PBBBSContentBuilder*) mergeFrom:(PBBBSContent*) other {
  if (other == [PBBBSContent defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasThumbImageUrl) {
    [self setThumbImageUrl:other.thumbImageUrl];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  if (other.hasDrawThumbUrl) {
    [self setDrawThumbUrl:other.drawThumbUrl];
  }
  if (other.hasDrawImageUrl) {
    [self setDrawImageUrl:other.drawImageUrl];
  }
  if (other.hasDrawData) {
    [self mergeDrawData:other.drawData];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasOpusCategory) {
    [self setOpusCategory:other.opusCategory];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setText:[input readString]];
        break;
      }
      case 82: {
        [self setThumbImageUrl:[input readString]];
        break;
      }
      case 90: {
        [self setImageUrl:[input readString]];
        break;
      }
      case 162: {
        [self setDrawThumbUrl:[input readString]];
        break;
      }
      case 170: {
        [self setDrawImageUrl:[input readString]];
        break;
      }
      case 178: {
        PBBBSDrawBuilder* subBuilder = [PBBBSDraw builder];
        if (self.hasDrawData) {
          [subBuilder mergeFrom:self.drawData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawData:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        [self setOpusId:[input readString]];
        break;
      }
      case 248: {
        [self setOpusCategory:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbbbscontent.hasType;
}
- (SInt32) type {
  return resultPbbbscontent.type;
}
- (PBBBSContentBuilder*) setType:(SInt32) value {
  resultPbbbscontent.hasType = YES;
  resultPbbbscontent.type = value;
  return self;
}
- (PBBBSContentBuilder*) clearType {
  resultPbbbscontent.hasType = NO;
  resultPbbbscontent.type = 0;
  return self;
}
- (BOOL) hasText {
  return resultPbbbscontent.hasText;
}
- (NSString*) text {
  return resultPbbbscontent.text;
}
- (PBBBSContentBuilder*) setText:(NSString*) value {
  resultPbbbscontent.hasText = YES;
  resultPbbbscontent.text = value;
  return self;
}
- (PBBBSContentBuilder*) clearText {
  resultPbbbscontent.hasText = NO;
  resultPbbbscontent.text = @"";
  return self;
}
- (BOOL) hasThumbImageUrl {
  return resultPbbbscontent.hasThumbImageUrl;
}
- (NSString*) thumbImageUrl {
  return resultPbbbscontent.thumbImageUrl;
}
- (PBBBSContentBuilder*) setThumbImageUrl:(NSString*) value {
  resultPbbbscontent.hasThumbImageUrl = YES;
  resultPbbbscontent.thumbImageUrl = value;
  return self;
}
- (PBBBSContentBuilder*) clearThumbImageUrl {
  resultPbbbscontent.hasThumbImageUrl = NO;
  resultPbbbscontent.thumbImageUrl = @"";
  return self;
}
- (BOOL) hasImageUrl {
  return resultPbbbscontent.hasImageUrl;
}
- (NSString*) imageUrl {
  return resultPbbbscontent.imageUrl;
}
- (PBBBSContentBuilder*) setImageUrl:(NSString*) value {
  resultPbbbscontent.hasImageUrl = YES;
  resultPbbbscontent.imageUrl = value;
  return self;
}
- (PBBBSContentBuilder*) clearImageUrl {
  resultPbbbscontent.hasImageUrl = NO;
  resultPbbbscontent.imageUrl = @"";
  return self;
}
- (BOOL) hasDrawThumbUrl {
  return resultPbbbscontent.hasDrawThumbUrl;
}
- (NSString*) drawThumbUrl {
  return resultPbbbscontent.drawThumbUrl;
}
- (PBBBSContentBuilder*) setDrawThumbUrl:(NSString*) value {
  resultPbbbscontent.hasDrawThumbUrl = YES;
  resultPbbbscontent.drawThumbUrl = value;
  return self;
}
- (PBBBSContentBuilder*) clearDrawThumbUrl {
  resultPbbbscontent.hasDrawThumbUrl = NO;
  resultPbbbscontent.drawThumbUrl = @"";
  return self;
}
- (BOOL) hasDrawImageUrl {
  return resultPbbbscontent.hasDrawImageUrl;
}
- (NSString*) drawImageUrl {
  return resultPbbbscontent.drawImageUrl;
}
- (PBBBSContentBuilder*) setDrawImageUrl:(NSString*) value {
  resultPbbbscontent.hasDrawImageUrl = YES;
  resultPbbbscontent.drawImageUrl = value;
  return self;
}
- (PBBBSContentBuilder*) clearDrawImageUrl {
  resultPbbbscontent.hasDrawImageUrl = NO;
  resultPbbbscontent.drawImageUrl = @"";
  return self;
}
- (BOOL) hasDrawData {
  return resultPbbbscontent.hasDrawData;
}
- (PBBBSDraw*) drawData {
  return resultPbbbscontent.drawData;
}
- (PBBBSContentBuilder*) setDrawData:(PBBBSDraw*) value {
  resultPbbbscontent.hasDrawData = YES;
  resultPbbbscontent.drawData = value;
  return self;
}
- (PBBBSContentBuilder*) setDrawDataBuilder:(PBBBSDrawBuilder*) builderForValue {
  return [self setDrawData:[builderForValue build]];
}
- (PBBBSContentBuilder*) mergeDrawData:(PBBBSDraw*) value {
  if (resultPbbbscontent.hasDrawData &&
      resultPbbbscontent.drawData != [PBBBSDraw defaultInstance]) {
    resultPbbbscontent.drawData =
      [[[PBBBSDraw builderWithPrototype:resultPbbbscontent.drawData] mergeFrom:value] buildPartial];
  } else {
    resultPbbbscontent.drawData = value;
  }
  resultPbbbscontent.hasDrawData = YES;
  return self;
}
- (PBBBSContentBuilder*) clearDrawData {
  resultPbbbscontent.hasDrawData = NO;
  resultPbbbscontent.drawData = [PBBBSDraw defaultInstance];
  return self;
}
- (BOOL) hasOpusId {
  return resultPbbbscontent.hasOpusId;
}
- (NSString*) opusId {
  return resultPbbbscontent.opusId;
}
- (PBBBSContentBuilder*) setOpusId:(NSString*) value {
  resultPbbbscontent.hasOpusId = YES;
  resultPbbbscontent.opusId = value;
  return self;
}
- (PBBBSContentBuilder*) clearOpusId {
  resultPbbbscontent.hasOpusId = NO;
  resultPbbbscontent.opusId = @"";
  return self;
}
- (BOOL) hasOpusCategory {
  return resultPbbbscontent.hasOpusCategory;
}
- (SInt32) opusCategory {
  return resultPbbbscontent.opusCategory;
}
- (PBBBSContentBuilder*) setOpusCategory:(SInt32) value {
  resultPbbbscontent.hasOpusCategory = YES;
  resultPbbbscontent.opusCategory = value;
  return self;
}
- (PBBBSContentBuilder*) clearOpusCategory {
  resultPbbbscontent.hasOpusCategory = NO;
  resultPbbbscontent.opusCategory = 0;
  return self;
}
@end

@interface PBBBSReward ()
@property SInt32 bonus;
@property SInt32 status;
@property (strong) PBBBSUser* winner;
@property SInt32 awardDate;
@property (strong) NSString* actionId;
@end

@implementation PBBBSReward

- (BOOL) hasBonus {
  return !!hasBonus_;
}
- (void) setHasBonus:(BOOL) _value_ {
  hasBonus_ = !!_value_;
}
@synthesize bonus;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasWinner {
  return !!hasWinner_;
}
- (void) setHasWinner:(BOOL) _value_ {
  hasWinner_ = !!_value_;
}
@synthesize winner;
- (BOOL) hasAwardDate {
  return !!hasAwardDate_;
}
- (void) setHasAwardDate:(BOOL) _value_ {
  hasAwardDate_ = !!_value_;
}
@synthesize awardDate;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) _value_ {
  hasActionId_ = !!_value_;
}
@synthesize actionId;
- (instancetype) init {
  if ((self = [super init])) {
    self.bonus = 0;
    self.status = 0;
    self.winner = [PBBBSUser defaultInstance];
    self.awardDate = 0;
    self.actionId = @"";
  }
  return self;
}
static PBBBSReward* defaultPBBBSRewardInstance = nil;
+ (void) initialize {
  if (self == [PBBBSReward class]) {
    defaultPBBBSRewardInstance = [[PBBBSReward alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSRewardInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSRewardInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBonus) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  if (self.hasWinner) {
    if (!self.winner.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBonus) {
    [output writeInt32:1 value:self.bonus];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasWinner) {
    [output writeMessage:3 value:self.winner];
  }
  if (self.hasAwardDate) {
    [output writeInt32:4 value:self.awardDate];
  }
  if (self.hasActionId) {
    [output writeString:5 value:self.actionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBonus) {
    size_ += computeInt32Size(1, self.bonus);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(2, self.status);
  }
  if (self.hasWinner) {
    size_ += computeMessageSize(3, self.winner);
  }
  if (self.hasAwardDate) {
    size_ += computeInt32Size(4, self.awardDate);
  }
  if (self.hasActionId) {
    size_ += computeStringSize(5, self.actionId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSReward*) parseFromData:(NSData*) data {
  return (PBBBSReward*)[[[PBBBSReward builder] mergeFromData:data] build];
}
+ (PBBBSReward*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSReward*)[[[PBBBSReward builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSReward*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSReward*)[[[PBBBSReward builder] mergeFromInputStream:input] build];
}
+ (PBBBSReward*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSReward*)[[[PBBBSReward builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSReward*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSReward*)[[[PBBBSReward builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSReward*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSReward*)[[[PBBBSReward builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSRewardBuilder*) builder {
  return [[PBBBSRewardBuilder alloc] init];
}
+ (PBBBSRewardBuilder*) builderWithPrototype:(PBBBSReward*) prototype {
  return [[PBBBSReward builder] mergeFrom:prototype];
}
- (PBBBSRewardBuilder*) builder {
  return [PBBBSReward builder];
}
- (PBBBSRewardBuilder*) toBuilder {
  return [PBBBSReward builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBonus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bonus", [NSNumber numberWithInteger:self.bonus]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasWinner) {
    [output appendFormat:@"%@%@ {\n", indent, @"winner"];
    [self.winner writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAwardDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardDate", [NSNumber numberWithInteger:self.awardDate]];
  }
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", self.actionId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSReward class]]) {
    return NO;
  }
  PBBBSReward *otherMessage = other;
  return
      self.hasBonus == otherMessage.hasBonus &&
      (!self.hasBonus || self.bonus == otherMessage.bonus) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasWinner == otherMessage.hasWinner &&
      (!self.hasWinner || [self.winner isEqual:otherMessage.winner]) &&
      self.hasAwardDate == otherMessage.hasAwardDate &&
      (!self.hasAwardDate || self.awardDate == otherMessage.awardDate) &&
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || [self.actionId isEqual:otherMessage.actionId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBonus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bonus] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasWinner) {
    hashCode = hashCode * 31 + [self.winner hash];
  }
  if (self.hasAwardDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.awardDate] hash];
  }
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [self.actionId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSRewardBuilder()
@property (strong) PBBBSReward* resultPbbbsreward;
@end

@implementation PBBBSRewardBuilder
@synthesize resultPbbbsreward;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsreward = [[PBBBSReward alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsreward;
}
- (PBBBSRewardBuilder*) clear {
  self.resultPbbbsreward = [[PBBBSReward alloc] init];
  return self;
}
- (PBBBSRewardBuilder*) clone {
  return [PBBBSReward builderWithPrototype:resultPbbbsreward];
}
- (PBBBSReward*) defaultInstance {
  return [PBBBSReward defaultInstance];
}
- (PBBBSReward*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSReward*) buildPartial {
  PBBBSReward* returnMe = resultPbbbsreward;
  self.resultPbbbsreward = nil;
  return returnMe;
}
- (PBBBSRewardBuilder*) mergeFrom:(PBBBSReward*) other {
  if (other == [PBBBSReward defaultInstance]) {
    return self;
  }
  if (other.hasBonus) {
    [self setBonus:other.bonus];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasWinner) {
    [self mergeWinner:other.winner];
  }
  if (other.hasAwardDate) {
    [self setAwardDate:other.awardDate];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSRewardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSRewardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBonus:[input readInt32]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        PBBBSUserBuilder* subBuilder = [PBBBSUser builder];
        if (self.hasWinner) {
          [subBuilder mergeFrom:self.winner];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWinner:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setAwardDate:[input readInt32]];
        break;
      }
      case 42: {
        [self setActionId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBonus {
  return resultPbbbsreward.hasBonus;
}
- (SInt32) bonus {
  return resultPbbbsreward.bonus;
}
- (PBBBSRewardBuilder*) setBonus:(SInt32) value {
  resultPbbbsreward.hasBonus = YES;
  resultPbbbsreward.bonus = value;
  return self;
}
- (PBBBSRewardBuilder*) clearBonus {
  resultPbbbsreward.hasBonus = NO;
  resultPbbbsreward.bonus = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultPbbbsreward.hasStatus;
}
- (SInt32) status {
  return resultPbbbsreward.status;
}
- (PBBBSRewardBuilder*) setStatus:(SInt32) value {
  resultPbbbsreward.hasStatus = YES;
  resultPbbbsreward.status = value;
  return self;
}
- (PBBBSRewardBuilder*) clearStatus {
  resultPbbbsreward.hasStatus = NO;
  resultPbbbsreward.status = 0;
  return self;
}
- (BOOL) hasWinner {
  return resultPbbbsreward.hasWinner;
}
- (PBBBSUser*) winner {
  return resultPbbbsreward.winner;
}
- (PBBBSRewardBuilder*) setWinner:(PBBBSUser*) value {
  resultPbbbsreward.hasWinner = YES;
  resultPbbbsreward.winner = value;
  return self;
}
- (PBBBSRewardBuilder*) setWinnerBuilder:(PBBBSUserBuilder*) builderForValue {
  return [self setWinner:[builderForValue build]];
}
- (PBBBSRewardBuilder*) mergeWinner:(PBBBSUser*) value {
  if (resultPbbbsreward.hasWinner &&
      resultPbbbsreward.winner != [PBBBSUser defaultInstance]) {
    resultPbbbsreward.winner =
      [[[PBBBSUser builderWithPrototype:resultPbbbsreward.winner] mergeFrom:value] buildPartial];
  } else {
    resultPbbbsreward.winner = value;
  }
  resultPbbbsreward.hasWinner = YES;
  return self;
}
- (PBBBSRewardBuilder*) clearWinner {
  resultPbbbsreward.hasWinner = NO;
  resultPbbbsreward.winner = [PBBBSUser defaultInstance];
  return self;
}
- (BOOL) hasAwardDate {
  return resultPbbbsreward.hasAwardDate;
}
- (SInt32) awardDate {
  return resultPbbbsreward.awardDate;
}
- (PBBBSRewardBuilder*) setAwardDate:(SInt32) value {
  resultPbbbsreward.hasAwardDate = YES;
  resultPbbbsreward.awardDate = value;
  return self;
}
- (PBBBSRewardBuilder*) clearAwardDate {
  resultPbbbsreward.hasAwardDate = NO;
  resultPbbbsreward.awardDate = 0;
  return self;
}
- (BOOL) hasActionId {
  return resultPbbbsreward.hasActionId;
}
- (NSString*) actionId {
  return resultPbbbsreward.actionId;
}
- (PBBBSRewardBuilder*) setActionId:(NSString*) value {
  resultPbbbsreward.hasActionId = YES;
  resultPbbbsreward.actionId = value;
  return self;
}
- (PBBBSRewardBuilder*) clearActionId {
  resultPbbbsreward.hasActionId = NO;
  resultPbbbsreward.actionId = @"";
  return self;
}
@end

@interface PBBBSPost ()
@property (strong) NSString* postId;
@property (strong) NSString* boardId;
@property (strong) NSString* appId;
@property SInt32 deviceType;
@property SInt32 replyCount;
@property SInt32 supportCount;
@property SInt32 createDate;
@property SInt32 modifyDate;
@property (strong) PBBBSUser* createUser;
@property (strong) PBBBSContent* content;
@property (strong) PBBBSReward* reward;
@property SInt32 status;
@property (strong) NSMutableArray * boardAdminListArray;
@property BOOL marked;
@property BOOL isPrivate;
@end

@implementation PBBBSPost

- (BOOL) hasPostId {
  return !!hasPostId_;
}
- (void) setHasPostId:(BOOL) _value_ {
  hasPostId_ = !!_value_;
}
@synthesize postId;
- (BOOL) hasBoardId {
  return !!hasBoardId_;
}
- (void) setHasBoardId:(BOOL) _value_ {
  hasBoardId_ = !!_value_;
}
@synthesize boardId;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) _value_ {
  hasReplyCount_ = !!_value_;
}
@synthesize replyCount;
- (BOOL) hasSupportCount {
  return !!hasSupportCount_;
}
- (void) setHasSupportCount:(BOOL) _value_ {
  hasSupportCount_ = !!_value_;
}
@synthesize supportCount;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasModifyDate {
  return !!hasModifyDate_;
}
- (void) setHasModifyDate:(BOOL) _value_ {
  hasModifyDate_ = !!_value_;
}
@synthesize modifyDate;
- (BOOL) hasCreateUser {
  return !!hasCreateUser_;
}
- (void) setHasCreateUser:(BOOL) _value_ {
  hasCreateUser_ = !!_value_;
}
@synthesize createUser;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasReward {
  return !!hasReward_;
}
- (void) setHasReward:(BOOL) _value_ {
  hasReward_ = !!_value_;
}
@synthesize reward;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize boardAdminListArray;
@dynamic boardAdminList;
- (BOOL) hasMarked {
  return !!hasMarked_;
}
- (void) setHasMarked:(BOOL) _value_ {
  hasMarked_ = !!_value_;
}
- (BOOL) marked {
  return !!marked_;
}
- (void) setMarked:(BOOL) _value_ {
  marked_ = !!_value_;
}
- (BOOL) hasIsPrivate {
  return !!hasIsPrivate_;
}
- (void) setHasIsPrivate:(BOOL) _value_ {
  hasIsPrivate_ = !!_value_;
}
- (BOOL) isPrivate {
  return !!isPrivate_;
}
- (void) setIsPrivate:(BOOL) _value_ {
  isPrivate_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.postId = @"";
    self.boardId = @"";
    self.appId = @"";
    self.deviceType = 0;
    self.replyCount = 0;
    self.supportCount = 0;
    self.createDate = 0;
    self.modifyDate = 0;
    self.createUser = [PBBBSUser defaultInstance];
    self.content = [PBBBSContent defaultInstance];
    self.reward = [PBBBSReward defaultInstance];
    self.status = 0;
    self.marked = NO;
    self.isPrivate = NO;
  }
  return self;
}
static PBBBSPost* defaultPBBBSPostInstance = nil;
+ (void) initialize {
  if (self == [PBBBSPost class]) {
    defaultPBBBSPostInstance = [[PBBBSPost alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSPostInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSPostInstance;
}
- (NSArray *)boardAdminList {
  return boardAdminListArray;
}
- (PBBBSUser*)boardAdminListAtIndex:(NSUInteger)index {
  return [boardAdminListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPostId) {
    return NO;
  }
  if (!self.hasBoardId) {
    return NO;
  }
  if (!self.hasAppId) {
    return NO;
  }
  if (!self.hasDeviceType) {
    return NO;
  }
  if (!self.hasReplyCount) {
    return NO;
  }
  if (!self.hasSupportCount) {
    return NO;
  }
  if (!self.hasCreateDate) {
    return NO;
  }
  if (!self.hasModifyDate) {
    return NO;
  }
  if (!self.hasCreateUser) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.createUser.isInitialized) {
    return NO;
  }
  if (!self.content.isInitialized) {
    return NO;
  }
  if (self.hasReward) {
    if (!self.reward.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitboardAdminList = YES;
   [self.boardAdminList enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitboardAdminList = NO;
      *stop = YES;
    }
  }];
  if (!isInitboardAdminList) return isInitboardAdminList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPostId) {
    [output writeString:1 value:self.postId];
  }
  if (self.hasBoardId) {
    [output writeString:2 value:self.boardId];
  }
  if (self.hasAppId) {
    [output writeString:3 value:self.appId];
  }
  if (self.hasDeviceType) {
    [output writeInt32:4 value:self.deviceType];
  }
  if (self.hasReplyCount) {
    [output writeInt32:5 value:self.replyCount];
  }
  if (self.hasSupportCount) {
    [output writeInt32:6 value:self.supportCount];
  }
  if (self.hasCreateDate) {
    [output writeInt32:7 value:self.createDate];
  }
  if (self.hasModifyDate) {
    [output writeInt32:8 value:self.modifyDate];
  }
  if (self.hasCreateUser) {
    [output writeMessage:9 value:self.createUser];
  }
  if (self.hasContent) {
    [output writeMessage:10 value:self.content];
  }
  if (self.hasReward) {
    [output writeMessage:11 value:self.reward];
  }
  if (self.hasStatus) {
    [output writeInt32:12 value:self.status];
  }
  [self.boardAdminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  if (self.hasMarked) {
    [output writeBool:14 value:self.marked];
  }
  if (self.hasIsPrivate) {
    [output writeBool:15 value:self.isPrivate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPostId) {
    size_ += computeStringSize(1, self.postId);
  }
  if (self.hasBoardId) {
    size_ += computeStringSize(2, self.boardId);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(3, self.appId);
  }
  if (self.hasDeviceType) {
    size_ += computeInt32Size(4, self.deviceType);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(5, self.replyCount);
  }
  if (self.hasSupportCount) {
    size_ += computeInt32Size(6, self.supportCount);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(7, self.createDate);
  }
  if (self.hasModifyDate) {
    size_ += computeInt32Size(8, self.modifyDate);
  }
  if (self.hasCreateUser) {
    size_ += computeMessageSize(9, self.createUser);
  }
  if (self.hasContent) {
    size_ += computeMessageSize(10, self.content);
  }
  if (self.hasReward) {
    size_ += computeMessageSize(11, self.reward);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(12, self.status);
  }
  [self.boardAdminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  if (self.hasMarked) {
    size_ += computeBoolSize(14, self.marked);
  }
  if (self.hasIsPrivate) {
    size_ += computeBoolSize(15, self.isPrivate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSPost*) parseFromData:(NSData*) data {
  return (PBBBSPost*)[[[PBBBSPost builder] mergeFromData:data] build];
}
+ (PBBBSPost*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSPost*)[[[PBBBSPost builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSPost*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSPost*)[[[PBBBSPost builder] mergeFromInputStream:input] build];
}
+ (PBBBSPost*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSPost*)[[[PBBBSPost builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSPost*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSPost*)[[[PBBBSPost builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSPost*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSPost*)[[[PBBBSPost builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSPostBuilder*) builder {
  return [[PBBBSPostBuilder alloc] init];
}
+ (PBBBSPostBuilder*) builderWithPrototype:(PBBBSPost*) prototype {
  return [[PBBBSPost builder] mergeFrom:prototype];
}
- (PBBBSPostBuilder*) builder {
  return [PBBBSPost builder];
}
- (PBBBSPostBuilder*) toBuilder {
  return [PBBBSPost builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPostId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postId", self.postId];
  }
  if (self.hasBoardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardId", self.boardId];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", [NSNumber numberWithInteger:self.deviceType]];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInteger:self.replyCount]];
  }
  if (self.hasSupportCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportCount", [NSNumber numberWithInteger:self.supportCount]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasModifyDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifyDate", [NSNumber numberWithInteger:self.modifyDate]];
  }
  if (self.hasCreateUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"createUser"];
    [self.createUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@ {\n", indent, @"content"];
    [self.content writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReward) {
    [output appendFormat:@"%@%@ {\n", indent, @"reward"];
    [self.reward writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.boardAdminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"boardAdminList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMarked) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marked", [NSNumber numberWithBool:self.marked]];
  }
  if (self.hasIsPrivate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isPrivate", [NSNumber numberWithBool:self.isPrivate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSPost class]]) {
    return NO;
  }
  PBBBSPost *otherMessage = other;
  return
      self.hasPostId == otherMessage.hasPostId &&
      (!self.hasPostId || [self.postId isEqual:otherMessage.postId]) &&
      self.hasBoardId == otherMessage.hasBoardId &&
      (!self.hasBoardId || [self.boardId isEqual:otherMessage.boardId]) &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasSupportCount == otherMessage.hasSupportCount &&
      (!self.hasSupportCount || self.supportCount == otherMessage.supportCount) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasModifyDate == otherMessage.hasModifyDate &&
      (!self.hasModifyDate || self.modifyDate == otherMessage.modifyDate) &&
      self.hasCreateUser == otherMessage.hasCreateUser &&
      (!self.hasCreateUser || [self.createUser isEqual:otherMessage.createUser]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasReward == otherMessage.hasReward &&
      (!self.hasReward || [self.reward isEqual:otherMessage.reward]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.boardAdminListArray isEqualToArray:otherMessage.boardAdminListArray] &&
      self.hasMarked == otherMessage.hasMarked &&
      (!self.hasMarked || self.marked == otherMessage.marked) &&
      self.hasIsPrivate == otherMessage.hasIsPrivate &&
      (!self.hasIsPrivate || self.isPrivate == otherMessage.isPrivate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPostId) {
    hashCode = hashCode * 31 + [self.postId hash];
  }
  if (self.hasBoardId) {
    hashCode = hashCode * 31 + [self.boardId hash];
  }
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deviceType] hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.replyCount] hash];
  }
  if (self.hasSupportCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.supportCount] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasModifyDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.modifyDate] hash];
  }
  if (self.hasCreateUser) {
    hashCode = hashCode * 31 + [self.createUser hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasReward) {
    hashCode = hashCode * 31 + [self.reward hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  [self.boardAdminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMarked) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.marked] hash];
  }
  if (self.hasIsPrivate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isPrivate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSPostBuilder()
@property (strong) PBBBSPost* resultPbbbspost;
@end

@implementation PBBBSPostBuilder
@synthesize resultPbbbspost;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbspost = [[PBBBSPost alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbspost;
}
- (PBBBSPostBuilder*) clear {
  self.resultPbbbspost = [[PBBBSPost alloc] init];
  return self;
}
- (PBBBSPostBuilder*) clone {
  return [PBBBSPost builderWithPrototype:resultPbbbspost];
}
- (PBBBSPost*) defaultInstance {
  return [PBBBSPost defaultInstance];
}
- (PBBBSPost*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSPost*) buildPartial {
  PBBBSPost* returnMe = resultPbbbspost;
  self.resultPbbbspost = nil;
  return returnMe;
}
- (PBBBSPostBuilder*) mergeFrom:(PBBBSPost*) other {
  if (other == [PBBBSPost defaultInstance]) {
    return self;
  }
  if (other.hasPostId) {
    [self setPostId:other.postId];
  }
  if (other.hasBoardId) {
    [self setBoardId:other.boardId];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasSupportCount) {
    [self setSupportCount:other.supportCount];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasModifyDate) {
    [self setModifyDate:other.modifyDate];
  }
  if (other.hasCreateUser) {
    [self mergeCreateUser:other.createUser];
  }
  if (other.hasContent) {
    [self mergeContent:other.content];
  }
  if (other.hasReward) {
    [self mergeReward:other.reward];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.boardAdminListArray.count > 0) {
    if (resultPbbbspost.boardAdminListArray == nil) {
      resultPbbbspost.boardAdminListArray = [[NSMutableArray alloc] initWithArray:other.boardAdminListArray];
    } else {
      [resultPbbbspost.boardAdminListArray addObjectsFromArray:other.boardAdminListArray];
    }
  }
  if (other.hasMarked) {
    [self setMarked:other.marked];
  }
  if (other.hasIsPrivate) {
    [self setIsPrivate:other.isPrivate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSPostBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSPostBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPostId:[input readString]];
        break;
      }
      case 18: {
        [self setBoardId:[input readString]];
        break;
      }
      case 26: {
        [self setAppId:[input readString]];
        break;
      }
      case 32: {
        [self setDeviceType:[input readInt32]];
        break;
      }
      case 40: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 48: {
        [self setSupportCount:[input readInt32]];
        break;
      }
      case 56: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 64: {
        [self setModifyDate:[input readInt32]];
        break;
      }
      case 74: {
        PBBBSUserBuilder* subBuilder = [PBBBSUser builder];
        if (self.hasCreateUser) {
          [subBuilder mergeFrom:self.createUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateUser:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        PBBBSContentBuilder* subBuilder = [PBBBSContent builder];
        if (self.hasContent) {
          [subBuilder mergeFrom:self.content];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContent:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        PBBBSRewardBuilder* subBuilder = [PBBBSReward builder];
        if (self.hasReward) {
          [subBuilder mergeFrom:self.reward];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReward:[subBuilder buildPartial]];
        break;
      }
      case 96: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 106: {
        PBBBSUserBuilder* subBuilder = [PBBBSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBoardAdminList:[subBuilder buildPartial]];
        break;
      }
      case 112: {
        [self setMarked:[input readBool]];
        break;
      }
      case 120: {
        [self setIsPrivate:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasPostId {
  return resultPbbbspost.hasPostId;
}
- (NSString*) postId {
  return resultPbbbspost.postId;
}
- (PBBBSPostBuilder*) setPostId:(NSString*) value {
  resultPbbbspost.hasPostId = YES;
  resultPbbbspost.postId = value;
  return self;
}
- (PBBBSPostBuilder*) clearPostId {
  resultPbbbspost.hasPostId = NO;
  resultPbbbspost.postId = @"";
  return self;
}
- (BOOL) hasBoardId {
  return resultPbbbspost.hasBoardId;
}
- (NSString*) boardId {
  return resultPbbbspost.boardId;
}
- (PBBBSPostBuilder*) setBoardId:(NSString*) value {
  resultPbbbspost.hasBoardId = YES;
  resultPbbbspost.boardId = value;
  return self;
}
- (PBBBSPostBuilder*) clearBoardId {
  resultPbbbspost.hasBoardId = NO;
  resultPbbbspost.boardId = @"";
  return self;
}
- (BOOL) hasAppId {
  return resultPbbbspost.hasAppId;
}
- (NSString*) appId {
  return resultPbbbspost.appId;
}
- (PBBBSPostBuilder*) setAppId:(NSString*) value {
  resultPbbbspost.hasAppId = YES;
  resultPbbbspost.appId = value;
  return self;
}
- (PBBBSPostBuilder*) clearAppId {
  resultPbbbspost.hasAppId = NO;
  resultPbbbspost.appId = @"";
  return self;
}
- (BOOL) hasDeviceType {
  return resultPbbbspost.hasDeviceType;
}
- (SInt32) deviceType {
  return resultPbbbspost.deviceType;
}
- (PBBBSPostBuilder*) setDeviceType:(SInt32) value {
  resultPbbbspost.hasDeviceType = YES;
  resultPbbbspost.deviceType = value;
  return self;
}
- (PBBBSPostBuilder*) clearDeviceType {
  resultPbbbspost.hasDeviceType = NO;
  resultPbbbspost.deviceType = 0;
  return self;
}
- (BOOL) hasReplyCount {
  return resultPbbbspost.hasReplyCount;
}
- (SInt32) replyCount {
  return resultPbbbspost.replyCount;
}
- (PBBBSPostBuilder*) setReplyCount:(SInt32) value {
  resultPbbbspost.hasReplyCount = YES;
  resultPbbbspost.replyCount = value;
  return self;
}
- (PBBBSPostBuilder*) clearReplyCount {
  resultPbbbspost.hasReplyCount = NO;
  resultPbbbspost.replyCount = 0;
  return self;
}
- (BOOL) hasSupportCount {
  return resultPbbbspost.hasSupportCount;
}
- (SInt32) supportCount {
  return resultPbbbspost.supportCount;
}
- (PBBBSPostBuilder*) setSupportCount:(SInt32) value {
  resultPbbbspost.hasSupportCount = YES;
  resultPbbbspost.supportCount = value;
  return self;
}
- (PBBBSPostBuilder*) clearSupportCount {
  resultPbbbspost.hasSupportCount = NO;
  resultPbbbspost.supportCount = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbbbspost.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbbbspost.createDate;
}
- (PBBBSPostBuilder*) setCreateDate:(SInt32) value {
  resultPbbbspost.hasCreateDate = YES;
  resultPbbbspost.createDate = value;
  return self;
}
- (PBBBSPostBuilder*) clearCreateDate {
  resultPbbbspost.hasCreateDate = NO;
  resultPbbbspost.createDate = 0;
  return self;
}
- (BOOL) hasModifyDate {
  return resultPbbbspost.hasModifyDate;
}
- (SInt32) modifyDate {
  return resultPbbbspost.modifyDate;
}
- (PBBBSPostBuilder*) setModifyDate:(SInt32) value {
  resultPbbbspost.hasModifyDate = YES;
  resultPbbbspost.modifyDate = value;
  return self;
}
- (PBBBSPostBuilder*) clearModifyDate {
  resultPbbbspost.hasModifyDate = NO;
  resultPbbbspost.modifyDate = 0;
  return self;
}
- (BOOL) hasCreateUser {
  return resultPbbbspost.hasCreateUser;
}
- (PBBBSUser*) createUser {
  return resultPbbbspost.createUser;
}
- (PBBBSPostBuilder*) setCreateUser:(PBBBSUser*) value {
  resultPbbbspost.hasCreateUser = YES;
  resultPbbbspost.createUser = value;
  return self;
}
- (PBBBSPostBuilder*) setCreateUserBuilder:(PBBBSUserBuilder*) builderForValue {
  return [self setCreateUser:[builderForValue build]];
}
- (PBBBSPostBuilder*) mergeCreateUser:(PBBBSUser*) value {
  if (resultPbbbspost.hasCreateUser &&
      resultPbbbspost.createUser != [PBBBSUser defaultInstance]) {
    resultPbbbspost.createUser =
      [[[PBBBSUser builderWithPrototype:resultPbbbspost.createUser] mergeFrom:value] buildPartial];
  } else {
    resultPbbbspost.createUser = value;
  }
  resultPbbbspost.hasCreateUser = YES;
  return self;
}
- (PBBBSPostBuilder*) clearCreateUser {
  resultPbbbspost.hasCreateUser = NO;
  resultPbbbspost.createUser = [PBBBSUser defaultInstance];
  return self;
}
- (BOOL) hasContent {
  return resultPbbbspost.hasContent;
}
- (PBBBSContent*) content {
  return resultPbbbspost.content;
}
- (PBBBSPostBuilder*) setContent:(PBBBSContent*) value {
  resultPbbbspost.hasContent = YES;
  resultPbbbspost.content = value;
  return self;
}
- (PBBBSPostBuilder*) setContentBuilder:(PBBBSContentBuilder*) builderForValue {
  return [self setContent:[builderForValue build]];
}
- (PBBBSPostBuilder*) mergeContent:(PBBBSContent*) value {
  if (resultPbbbspost.hasContent &&
      resultPbbbspost.content != [PBBBSContent defaultInstance]) {
    resultPbbbspost.content =
      [[[PBBBSContent builderWithPrototype:resultPbbbspost.content] mergeFrom:value] buildPartial];
  } else {
    resultPbbbspost.content = value;
  }
  resultPbbbspost.hasContent = YES;
  return self;
}
- (PBBBSPostBuilder*) clearContent {
  resultPbbbspost.hasContent = NO;
  resultPbbbspost.content = [PBBBSContent defaultInstance];
  return self;
}
- (BOOL) hasReward {
  return resultPbbbspost.hasReward;
}
- (PBBBSReward*) reward {
  return resultPbbbspost.reward;
}
- (PBBBSPostBuilder*) setReward:(PBBBSReward*) value {
  resultPbbbspost.hasReward = YES;
  resultPbbbspost.reward = value;
  return self;
}
- (PBBBSPostBuilder*) setRewardBuilder:(PBBBSRewardBuilder*) builderForValue {
  return [self setReward:[builderForValue build]];
}
- (PBBBSPostBuilder*) mergeReward:(PBBBSReward*) value {
  if (resultPbbbspost.hasReward &&
      resultPbbbspost.reward != [PBBBSReward defaultInstance]) {
    resultPbbbspost.reward =
      [[[PBBBSReward builderWithPrototype:resultPbbbspost.reward] mergeFrom:value] buildPartial];
  } else {
    resultPbbbspost.reward = value;
  }
  resultPbbbspost.hasReward = YES;
  return self;
}
- (PBBBSPostBuilder*) clearReward {
  resultPbbbspost.hasReward = NO;
  resultPbbbspost.reward = [PBBBSReward defaultInstance];
  return self;
}
- (BOOL) hasStatus {
  return resultPbbbspost.hasStatus;
}
- (SInt32) status {
  return resultPbbbspost.status;
}
- (PBBBSPostBuilder*) setStatus:(SInt32) value {
  resultPbbbspost.hasStatus = YES;
  resultPbbbspost.status = value;
  return self;
}
- (PBBBSPostBuilder*) clearStatus {
  resultPbbbspost.hasStatus = NO;
  resultPbbbspost.status = 0;
  return self;
}
- (NSMutableArray *)boardAdminList {
  return resultPbbbspost.boardAdminListArray;
}
- (PBBBSUser*)boardAdminListAtIndex:(NSUInteger)index {
  return [resultPbbbspost boardAdminListAtIndex:index];
}
- (PBBBSPostBuilder *)addBoardAdminList:(PBBBSUser*)value {
  if (resultPbbbspost.boardAdminListArray == nil) {
    resultPbbbspost.boardAdminListArray = [[NSMutableArray alloc]init];
  }
  [resultPbbbspost.boardAdminListArray addObject:value];
  return self;
}
- (PBBBSPostBuilder *)setBoardAdminListArray:(NSArray *)array {
  resultPbbbspost.boardAdminListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBBBSPostBuilder *)clearBoardAdminList {
  resultPbbbspost.boardAdminListArray = nil;
  return self;
}
- (BOOL) hasMarked {
  return resultPbbbspost.hasMarked;
}
- (BOOL) marked {
  return resultPbbbspost.marked;
}
- (PBBBSPostBuilder*) setMarked:(BOOL) value {
  resultPbbbspost.hasMarked = YES;
  resultPbbbspost.marked = value;
  return self;
}
- (PBBBSPostBuilder*) clearMarked {
  resultPbbbspost.hasMarked = NO;
  resultPbbbspost.marked = NO;
  return self;
}
- (BOOL) hasIsPrivate {
  return resultPbbbspost.hasIsPrivate;
}
- (BOOL) isPrivate {
  return resultPbbbspost.isPrivate;
}
- (PBBBSPostBuilder*) setIsPrivate:(BOOL) value {
  resultPbbbspost.hasIsPrivate = YES;
  resultPbbbspost.isPrivate = value;
  return self;
}
- (PBBBSPostBuilder*) clearIsPrivate {
  resultPbbbspost.hasIsPrivate = NO;
  resultPbbbspost.isPrivate = NO;
  return self;
}
@end

@interface PBBBSPrivilege ()
@property (strong) NSString* boardId;
@property SInt32 permission;
@end

@implementation PBBBSPrivilege

- (BOOL) hasBoardId {
  return !!hasBoardId_;
}
- (void) setHasBoardId:(BOOL) _value_ {
  hasBoardId_ = !!_value_;
}
@synthesize boardId;
- (BOOL) hasPermission {
  return !!hasPermission_;
}
- (void) setHasPermission:(BOOL) _value_ {
  hasPermission_ = !!_value_;
}
@synthesize permission;
- (instancetype) init {
  if ((self = [super init])) {
    self.boardId = @"";
    self.permission = 0;
  }
  return self;
}
static PBBBSPrivilege* defaultPBBBSPrivilegeInstance = nil;
+ (void) initialize {
  if (self == [PBBBSPrivilege class]) {
    defaultPBBBSPrivilegeInstance = [[PBBBSPrivilege alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSPrivilegeInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSPrivilegeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBoardId) {
    return NO;
  }
  if (!self.hasPermission) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBoardId) {
    [output writeString:1 value:self.boardId];
  }
  if (self.hasPermission) {
    [output writeInt32:2 value:self.permission];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBoardId) {
    size_ += computeStringSize(1, self.boardId);
  }
  if (self.hasPermission) {
    size_ += computeInt32Size(2, self.permission);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSPrivilege*) parseFromData:(NSData*) data {
  return (PBBBSPrivilege*)[[[PBBBSPrivilege builder] mergeFromData:data] build];
}
+ (PBBBSPrivilege*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSPrivilege*)[[[PBBBSPrivilege builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSPrivilege*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSPrivilege*)[[[PBBBSPrivilege builder] mergeFromInputStream:input] build];
}
+ (PBBBSPrivilege*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSPrivilege*)[[[PBBBSPrivilege builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSPrivilege*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSPrivilege*)[[[PBBBSPrivilege builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSPrivilege*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSPrivilege*)[[[PBBBSPrivilege builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSPrivilegeBuilder*) builder {
  return [[PBBBSPrivilegeBuilder alloc] init];
}
+ (PBBBSPrivilegeBuilder*) builderWithPrototype:(PBBBSPrivilege*) prototype {
  return [[PBBBSPrivilege builder] mergeFrom:prototype];
}
- (PBBBSPrivilegeBuilder*) builder {
  return [PBBBSPrivilege builder];
}
- (PBBBSPrivilegeBuilder*) toBuilder {
  return [PBBBSPrivilege builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBoardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardId", self.boardId];
  }
  if (self.hasPermission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permission", [NSNumber numberWithInteger:self.permission]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSPrivilege class]]) {
    return NO;
  }
  PBBBSPrivilege *otherMessage = other;
  return
      self.hasBoardId == otherMessage.hasBoardId &&
      (!self.hasBoardId || [self.boardId isEqual:otherMessage.boardId]) &&
      self.hasPermission == otherMessage.hasPermission &&
      (!self.hasPermission || self.permission == otherMessage.permission) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBoardId) {
    hashCode = hashCode * 31 + [self.boardId hash];
  }
  if (self.hasPermission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.permission] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSPrivilegeBuilder()
@property (strong) PBBBSPrivilege* resultPbbbsprivilege;
@end

@implementation PBBBSPrivilegeBuilder
@synthesize resultPbbbsprivilege;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsprivilege = [[PBBBSPrivilege alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsprivilege;
}
- (PBBBSPrivilegeBuilder*) clear {
  self.resultPbbbsprivilege = [[PBBBSPrivilege alloc] init];
  return self;
}
- (PBBBSPrivilegeBuilder*) clone {
  return [PBBBSPrivilege builderWithPrototype:resultPbbbsprivilege];
}
- (PBBBSPrivilege*) defaultInstance {
  return [PBBBSPrivilege defaultInstance];
}
- (PBBBSPrivilege*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSPrivilege*) buildPartial {
  PBBBSPrivilege* returnMe = resultPbbbsprivilege;
  self.resultPbbbsprivilege = nil;
  return returnMe;
}
- (PBBBSPrivilegeBuilder*) mergeFrom:(PBBBSPrivilege*) other {
  if (other == [PBBBSPrivilege defaultInstance]) {
    return self;
  }
  if (other.hasBoardId) {
    [self setBoardId:other.boardId];
  }
  if (other.hasPermission) {
    [self setPermission:other.permission];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSPrivilegeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSPrivilegeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBoardId:[input readString]];
        break;
      }
      case 16: {
        [self setPermission:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBoardId {
  return resultPbbbsprivilege.hasBoardId;
}
- (NSString*) boardId {
  return resultPbbbsprivilege.boardId;
}
- (PBBBSPrivilegeBuilder*) setBoardId:(NSString*) value {
  resultPbbbsprivilege.hasBoardId = YES;
  resultPbbbsprivilege.boardId = value;
  return self;
}
- (PBBBSPrivilegeBuilder*) clearBoardId {
  resultPbbbsprivilege.hasBoardId = NO;
  resultPbbbsprivilege.boardId = @"";
  return self;
}
- (BOOL) hasPermission {
  return resultPbbbsprivilege.hasPermission;
}
- (SInt32) permission {
  return resultPbbbsprivilege.permission;
}
- (PBBBSPrivilegeBuilder*) setPermission:(SInt32) value {
  resultPbbbsprivilege.hasPermission = YES;
  resultPbbbsprivilege.permission = value;
  return self;
}
- (PBBBSPrivilegeBuilder*) clearPermission {
  resultPbbbsprivilege.hasPermission = NO;
  resultPbbbsprivilege.permission = 0;
  return self;
}
@end

@interface PBBBSActionSource ()
@property (strong) NSString* postId;
@property (strong) NSString* postUid;
@property (strong) NSString* actionId;
@property (strong) NSString* actionUid;
@property (strong) NSString* actionNick;
@property SInt32 actionType;
@property (strong) NSString* briefText;
@end

@implementation PBBBSActionSource

- (BOOL) hasPostId {
  return !!hasPostId_;
}
- (void) setHasPostId:(BOOL) _value_ {
  hasPostId_ = !!_value_;
}
@synthesize postId;
- (BOOL) hasPostUid {
  return !!hasPostUid_;
}
- (void) setHasPostUid:(BOOL) _value_ {
  hasPostUid_ = !!_value_;
}
@synthesize postUid;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) _value_ {
  hasActionId_ = !!_value_;
}
@synthesize actionId;
- (BOOL) hasActionUid {
  return !!hasActionUid_;
}
- (void) setHasActionUid:(BOOL) _value_ {
  hasActionUid_ = !!_value_;
}
@synthesize actionUid;
- (BOOL) hasActionNick {
  return !!hasActionNick_;
}
- (void) setHasActionNick:(BOOL) _value_ {
  hasActionNick_ = !!_value_;
}
@synthesize actionNick;
- (BOOL) hasActionType {
  return !!hasActionType_;
}
- (void) setHasActionType:(BOOL) _value_ {
  hasActionType_ = !!_value_;
}
@synthesize actionType;
- (BOOL) hasBriefText {
  return !!hasBriefText_;
}
- (void) setHasBriefText:(BOOL) _value_ {
  hasBriefText_ = !!_value_;
}
@synthesize briefText;
- (instancetype) init {
  if ((self = [super init])) {
    self.postId = @"";
    self.postUid = @"";
    self.actionId = @"";
    self.actionUid = @"";
    self.actionNick = @"";
    self.actionType = 0;
    self.briefText = @"";
  }
  return self;
}
static PBBBSActionSource* defaultPBBBSActionSourceInstance = nil;
+ (void) initialize {
  if (self == [PBBBSActionSource class]) {
    defaultPBBBSActionSourceInstance = [[PBBBSActionSource alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSActionSourceInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSActionSourceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPostId) {
    return NO;
  }
  if (!self.hasPostUid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPostId) {
    [output writeString:1 value:self.postId];
  }
  if (self.hasPostUid) {
    [output writeString:2 value:self.postUid];
  }
  if (self.hasActionId) {
    [output writeString:3 value:self.actionId];
  }
  if (self.hasActionUid) {
    [output writeString:4 value:self.actionUid];
  }
  if (self.hasActionNick) {
    [output writeString:5 value:self.actionNick];
  }
  if (self.hasActionType) {
    [output writeInt32:6 value:self.actionType];
  }
  if (self.hasBriefText) {
    [output writeString:7 value:self.briefText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPostId) {
    size_ += computeStringSize(1, self.postId);
  }
  if (self.hasPostUid) {
    size_ += computeStringSize(2, self.postUid);
  }
  if (self.hasActionId) {
    size_ += computeStringSize(3, self.actionId);
  }
  if (self.hasActionUid) {
    size_ += computeStringSize(4, self.actionUid);
  }
  if (self.hasActionNick) {
    size_ += computeStringSize(5, self.actionNick);
  }
  if (self.hasActionType) {
    size_ += computeInt32Size(6, self.actionType);
  }
  if (self.hasBriefText) {
    size_ += computeStringSize(7, self.briefText);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSActionSource*) parseFromData:(NSData*) data {
  return (PBBBSActionSource*)[[[PBBBSActionSource builder] mergeFromData:data] build];
}
+ (PBBBSActionSource*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSActionSource*)[[[PBBBSActionSource builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSActionSource*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSActionSource*)[[[PBBBSActionSource builder] mergeFromInputStream:input] build];
}
+ (PBBBSActionSource*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSActionSource*)[[[PBBBSActionSource builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSActionSource*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSActionSource*)[[[PBBBSActionSource builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSActionSource*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSActionSource*)[[[PBBBSActionSource builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSActionSourceBuilder*) builder {
  return [[PBBBSActionSourceBuilder alloc] init];
}
+ (PBBBSActionSourceBuilder*) builderWithPrototype:(PBBBSActionSource*) prototype {
  return [[PBBBSActionSource builder] mergeFrom:prototype];
}
- (PBBBSActionSourceBuilder*) builder {
  return [PBBBSActionSource builder];
}
- (PBBBSActionSourceBuilder*) toBuilder {
  return [PBBBSActionSource builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPostId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postId", self.postId];
  }
  if (self.hasPostUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postUid", self.postUid];
  }
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", self.actionId];
  }
  if (self.hasActionUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionUid", self.actionUid];
  }
  if (self.hasActionNick) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionNick", self.actionNick];
  }
  if (self.hasActionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionType", [NSNumber numberWithInteger:self.actionType]];
  }
  if (self.hasBriefText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"briefText", self.briefText];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSActionSource class]]) {
    return NO;
  }
  PBBBSActionSource *otherMessage = other;
  return
      self.hasPostId == otherMessage.hasPostId &&
      (!self.hasPostId || [self.postId isEqual:otherMessage.postId]) &&
      self.hasPostUid == otherMessage.hasPostUid &&
      (!self.hasPostUid || [self.postUid isEqual:otherMessage.postUid]) &&
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || [self.actionId isEqual:otherMessage.actionId]) &&
      self.hasActionUid == otherMessage.hasActionUid &&
      (!self.hasActionUid || [self.actionUid isEqual:otherMessage.actionUid]) &&
      self.hasActionNick == otherMessage.hasActionNick &&
      (!self.hasActionNick || [self.actionNick isEqual:otherMessage.actionNick]) &&
      self.hasActionType == otherMessage.hasActionType &&
      (!self.hasActionType || self.actionType == otherMessage.actionType) &&
      self.hasBriefText == otherMessage.hasBriefText &&
      (!self.hasBriefText || [self.briefText isEqual:otherMessage.briefText]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPostId) {
    hashCode = hashCode * 31 + [self.postId hash];
  }
  if (self.hasPostUid) {
    hashCode = hashCode * 31 + [self.postUid hash];
  }
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [self.actionId hash];
  }
  if (self.hasActionUid) {
    hashCode = hashCode * 31 + [self.actionUid hash];
  }
  if (self.hasActionNick) {
    hashCode = hashCode * 31 + [self.actionNick hash];
  }
  if (self.hasActionType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actionType] hash];
  }
  if (self.hasBriefText) {
    hashCode = hashCode * 31 + [self.briefText hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSActionSourceBuilder()
@property (strong) PBBBSActionSource* resultPbbbsactionSource;
@end

@implementation PBBBSActionSourceBuilder
@synthesize resultPbbbsactionSource;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsactionSource = [[PBBBSActionSource alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsactionSource;
}
- (PBBBSActionSourceBuilder*) clear {
  self.resultPbbbsactionSource = [[PBBBSActionSource alloc] init];
  return self;
}
- (PBBBSActionSourceBuilder*) clone {
  return [PBBBSActionSource builderWithPrototype:resultPbbbsactionSource];
}
- (PBBBSActionSource*) defaultInstance {
  return [PBBBSActionSource defaultInstance];
}
- (PBBBSActionSource*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSActionSource*) buildPartial {
  PBBBSActionSource* returnMe = resultPbbbsactionSource;
  self.resultPbbbsactionSource = nil;
  return returnMe;
}
- (PBBBSActionSourceBuilder*) mergeFrom:(PBBBSActionSource*) other {
  if (other == [PBBBSActionSource defaultInstance]) {
    return self;
  }
  if (other.hasPostId) {
    [self setPostId:other.postId];
  }
  if (other.hasPostUid) {
    [self setPostUid:other.postUid];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasActionUid) {
    [self setActionUid:other.actionUid];
  }
  if (other.hasActionNick) {
    [self setActionNick:other.actionNick];
  }
  if (other.hasActionType) {
    [self setActionType:other.actionType];
  }
  if (other.hasBriefText) {
    [self setBriefText:other.briefText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSActionSourceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSActionSourceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPostId:[input readString]];
        break;
      }
      case 18: {
        [self setPostUid:[input readString]];
        break;
      }
      case 26: {
        [self setActionId:[input readString]];
        break;
      }
      case 34: {
        [self setActionUid:[input readString]];
        break;
      }
      case 42: {
        [self setActionNick:[input readString]];
        break;
      }
      case 48: {
        [self setActionType:[input readInt32]];
        break;
      }
      case 58: {
        [self setBriefText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPostId {
  return resultPbbbsactionSource.hasPostId;
}
- (NSString*) postId {
  return resultPbbbsactionSource.postId;
}
- (PBBBSActionSourceBuilder*) setPostId:(NSString*) value {
  resultPbbbsactionSource.hasPostId = YES;
  resultPbbbsactionSource.postId = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearPostId {
  resultPbbbsactionSource.hasPostId = NO;
  resultPbbbsactionSource.postId = @"";
  return self;
}
- (BOOL) hasPostUid {
  return resultPbbbsactionSource.hasPostUid;
}
- (NSString*) postUid {
  return resultPbbbsactionSource.postUid;
}
- (PBBBSActionSourceBuilder*) setPostUid:(NSString*) value {
  resultPbbbsactionSource.hasPostUid = YES;
  resultPbbbsactionSource.postUid = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearPostUid {
  resultPbbbsactionSource.hasPostUid = NO;
  resultPbbbsactionSource.postUid = @"";
  return self;
}
- (BOOL) hasActionId {
  return resultPbbbsactionSource.hasActionId;
}
- (NSString*) actionId {
  return resultPbbbsactionSource.actionId;
}
- (PBBBSActionSourceBuilder*) setActionId:(NSString*) value {
  resultPbbbsactionSource.hasActionId = YES;
  resultPbbbsactionSource.actionId = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearActionId {
  resultPbbbsactionSource.hasActionId = NO;
  resultPbbbsactionSource.actionId = @"";
  return self;
}
- (BOOL) hasActionUid {
  return resultPbbbsactionSource.hasActionUid;
}
- (NSString*) actionUid {
  return resultPbbbsactionSource.actionUid;
}
- (PBBBSActionSourceBuilder*) setActionUid:(NSString*) value {
  resultPbbbsactionSource.hasActionUid = YES;
  resultPbbbsactionSource.actionUid = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearActionUid {
  resultPbbbsactionSource.hasActionUid = NO;
  resultPbbbsactionSource.actionUid = @"";
  return self;
}
- (BOOL) hasActionNick {
  return resultPbbbsactionSource.hasActionNick;
}
- (NSString*) actionNick {
  return resultPbbbsactionSource.actionNick;
}
- (PBBBSActionSourceBuilder*) setActionNick:(NSString*) value {
  resultPbbbsactionSource.hasActionNick = YES;
  resultPbbbsactionSource.actionNick = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearActionNick {
  resultPbbbsactionSource.hasActionNick = NO;
  resultPbbbsactionSource.actionNick = @"";
  return self;
}
- (BOOL) hasActionType {
  return resultPbbbsactionSource.hasActionType;
}
- (SInt32) actionType {
  return resultPbbbsactionSource.actionType;
}
- (PBBBSActionSourceBuilder*) setActionType:(SInt32) value {
  resultPbbbsactionSource.hasActionType = YES;
  resultPbbbsactionSource.actionType = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearActionType {
  resultPbbbsactionSource.hasActionType = NO;
  resultPbbbsactionSource.actionType = 0;
  return self;
}
- (BOOL) hasBriefText {
  return resultPbbbsactionSource.hasBriefText;
}
- (NSString*) briefText {
  return resultPbbbsactionSource.briefText;
}
- (PBBBSActionSourceBuilder*) setBriefText:(NSString*) value {
  resultPbbbsactionSource.hasBriefText = YES;
  resultPbbbsactionSource.briefText = value;
  return self;
}
- (PBBBSActionSourceBuilder*) clearBriefText {
  resultPbbbsactionSource.hasBriefText = NO;
  resultPbbbsactionSource.briefText = @"";
  return self;
}
@end

@interface PBBBSAction ()
@property (strong) NSString* actionId;
@property SInt32 type;
@property (strong) PBBBSUser* createUser;
@property SInt32 deviceType;
@property SInt32 createDate;
@property SInt32 replyCount;
@property (strong) PBBBSContent* content;
@property (strong) PBBBSActionSource* source;
@end

@implementation PBBBSAction

- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) _value_ {
  hasActionId_ = !!_value_;
}
@synthesize actionId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasCreateUser {
  return !!hasCreateUser_;
}
- (void) setHasCreateUser:(BOOL) _value_ {
  hasCreateUser_ = !!_value_;
}
@synthesize createUser;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) _value_ {
  hasReplyCount_ = !!_value_;
}
@synthesize replyCount;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (instancetype) init {
  if ((self = [super init])) {
    self.actionId = @"";
    self.type = 0;
    self.createUser = [PBBBSUser defaultInstance];
    self.deviceType = 0;
    self.createDate = 0;
    self.replyCount = 0;
    self.content = [PBBBSContent defaultInstance];
    self.source = [PBBBSActionSource defaultInstance];
  }
  return self;
}
static PBBBSAction* defaultPBBBSActionInstance = nil;
+ (void) initialize {
  if (self == [PBBBSAction class]) {
    defaultPBBBSActionInstance = [[PBBBSAction alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSActionInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSActionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasActionId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasCreateUser) {
    return NO;
  }
  if (!self.hasDeviceType) {
    return NO;
  }
  if (!self.hasCreateDate) {
    return NO;
  }
  if (!self.createUser.isInitialized) {
    return NO;
  }
  if (self.hasContent) {
    if (!self.content.isInitialized) {
      return NO;
    }
  }
  if (self.hasSource) {
    if (!self.source.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActionId) {
    [output writeString:1 value:self.actionId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasCreateUser) {
    [output writeMessage:3 value:self.createUser];
  }
  if (self.hasDeviceType) {
    [output writeInt32:5 value:self.deviceType];
  }
  if (self.hasCreateDate) {
    [output writeInt32:6 value:self.createDate];
  }
  if (self.hasReplyCount) {
    [output writeInt32:7 value:self.replyCount];
  }
  if (self.hasContent) {
    [output writeMessage:8 value:self.content];
  }
  if (self.hasSource) {
    [output writeMessage:9 value:self.source];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasActionId) {
    size_ += computeStringSize(1, self.actionId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasCreateUser) {
    size_ += computeMessageSize(3, self.createUser);
  }
  if (self.hasDeviceType) {
    size_ += computeInt32Size(5, self.deviceType);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(6, self.createDate);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(7, self.replyCount);
  }
  if (self.hasContent) {
    size_ += computeMessageSize(8, self.content);
  }
  if (self.hasSource) {
    size_ += computeMessageSize(9, self.source);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSAction*) parseFromData:(NSData*) data {
  return (PBBBSAction*)[[[PBBBSAction builder] mergeFromData:data] build];
}
+ (PBBBSAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSAction*)[[[PBBBSAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSAction*)[[[PBBBSAction builder] mergeFromInputStream:input] build];
}
+ (PBBBSAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSAction*)[[[PBBBSAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSAction*)[[[PBBBSAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSAction*)[[[PBBBSAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSActionBuilder*) builder {
  return [[PBBBSActionBuilder alloc] init];
}
+ (PBBBSActionBuilder*) builderWithPrototype:(PBBBSAction*) prototype {
  return [[PBBBSAction builder] mergeFrom:prototype];
}
- (PBBBSActionBuilder*) builder {
  return [PBBBSAction builder];
}
- (PBBBSActionBuilder*) toBuilder {
  return [PBBBSAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", self.actionId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasCreateUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"createUser"];
    [self.createUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", [NSNumber numberWithInteger:self.deviceType]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInteger:self.replyCount]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@ {\n", indent, @"content"];
    [self.content writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@ {\n", indent, @"source"];
    [self.source writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSAction class]]) {
    return NO;
  }
  PBBBSAction *otherMessage = other;
  return
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || [self.actionId isEqual:otherMessage.actionId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasCreateUser == otherMessage.hasCreateUser &&
      (!self.hasCreateUser || [self.createUser isEqual:otherMessage.createUser]) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [self.actionId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasCreateUser) {
    hashCode = hashCode * 31 + [self.createUser hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deviceType] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.replyCount] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSActionBuilder()
@property (strong) PBBBSAction* resultPbbbsaction;
@end

@implementation PBBBSActionBuilder
@synthesize resultPbbbsaction;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsaction = [[PBBBSAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsaction;
}
- (PBBBSActionBuilder*) clear {
  self.resultPbbbsaction = [[PBBBSAction alloc] init];
  return self;
}
- (PBBBSActionBuilder*) clone {
  return [PBBBSAction builderWithPrototype:resultPbbbsaction];
}
- (PBBBSAction*) defaultInstance {
  return [PBBBSAction defaultInstance];
}
- (PBBBSAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSAction*) buildPartial {
  PBBBSAction* returnMe = resultPbbbsaction;
  self.resultPbbbsaction = nil;
  return returnMe;
}
- (PBBBSActionBuilder*) mergeFrom:(PBBBSAction*) other {
  if (other == [PBBBSAction defaultInstance]) {
    return self;
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCreateUser) {
    [self mergeCreateUser:other.createUser];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasContent) {
    [self mergeContent:other.content];
  }
  if (other.hasSource) {
    [self mergeSource:other.source];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setActionId:[input readString]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 26: {
        PBBBSUserBuilder* subBuilder = [PBBBSUser builder];
        if (self.hasCreateUser) {
          [subBuilder mergeFrom:self.createUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateUser:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setDeviceType:[input readInt32]];
        break;
      }
      case 48: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 66: {
        PBBBSContentBuilder* subBuilder = [PBBBSContent builder];
        if (self.hasContent) {
          [subBuilder mergeFrom:self.content];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContent:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PBBBSActionSourceBuilder* subBuilder = [PBBBSActionSource builder];
        if (self.hasSource) {
          [subBuilder mergeFrom:self.source];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSource:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasActionId {
  return resultPbbbsaction.hasActionId;
}
- (NSString*) actionId {
  return resultPbbbsaction.actionId;
}
- (PBBBSActionBuilder*) setActionId:(NSString*) value {
  resultPbbbsaction.hasActionId = YES;
  resultPbbbsaction.actionId = value;
  return self;
}
- (PBBBSActionBuilder*) clearActionId {
  resultPbbbsaction.hasActionId = NO;
  resultPbbbsaction.actionId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbbbsaction.hasType;
}
- (SInt32) type {
  return resultPbbbsaction.type;
}
- (PBBBSActionBuilder*) setType:(SInt32) value {
  resultPbbbsaction.hasType = YES;
  resultPbbbsaction.type = value;
  return self;
}
- (PBBBSActionBuilder*) clearType {
  resultPbbbsaction.hasType = NO;
  resultPbbbsaction.type = 0;
  return self;
}
- (BOOL) hasCreateUser {
  return resultPbbbsaction.hasCreateUser;
}
- (PBBBSUser*) createUser {
  return resultPbbbsaction.createUser;
}
- (PBBBSActionBuilder*) setCreateUser:(PBBBSUser*) value {
  resultPbbbsaction.hasCreateUser = YES;
  resultPbbbsaction.createUser = value;
  return self;
}
- (PBBBSActionBuilder*) setCreateUserBuilder:(PBBBSUserBuilder*) builderForValue {
  return [self setCreateUser:[builderForValue build]];
}
- (PBBBSActionBuilder*) mergeCreateUser:(PBBBSUser*) value {
  if (resultPbbbsaction.hasCreateUser &&
      resultPbbbsaction.createUser != [PBBBSUser defaultInstance]) {
    resultPbbbsaction.createUser =
      [[[PBBBSUser builderWithPrototype:resultPbbbsaction.createUser] mergeFrom:value] buildPartial];
  } else {
    resultPbbbsaction.createUser = value;
  }
  resultPbbbsaction.hasCreateUser = YES;
  return self;
}
- (PBBBSActionBuilder*) clearCreateUser {
  resultPbbbsaction.hasCreateUser = NO;
  resultPbbbsaction.createUser = [PBBBSUser defaultInstance];
  return self;
}
- (BOOL) hasDeviceType {
  return resultPbbbsaction.hasDeviceType;
}
- (SInt32) deviceType {
  return resultPbbbsaction.deviceType;
}
- (PBBBSActionBuilder*) setDeviceType:(SInt32) value {
  resultPbbbsaction.hasDeviceType = YES;
  resultPbbbsaction.deviceType = value;
  return self;
}
- (PBBBSActionBuilder*) clearDeviceType {
  resultPbbbsaction.hasDeviceType = NO;
  resultPbbbsaction.deviceType = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbbbsaction.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbbbsaction.createDate;
}
- (PBBBSActionBuilder*) setCreateDate:(SInt32) value {
  resultPbbbsaction.hasCreateDate = YES;
  resultPbbbsaction.createDate = value;
  return self;
}
- (PBBBSActionBuilder*) clearCreateDate {
  resultPbbbsaction.hasCreateDate = NO;
  resultPbbbsaction.createDate = 0;
  return self;
}
- (BOOL) hasReplyCount {
  return resultPbbbsaction.hasReplyCount;
}
- (SInt32) replyCount {
  return resultPbbbsaction.replyCount;
}
- (PBBBSActionBuilder*) setReplyCount:(SInt32) value {
  resultPbbbsaction.hasReplyCount = YES;
  resultPbbbsaction.replyCount = value;
  return self;
}
- (PBBBSActionBuilder*) clearReplyCount {
  resultPbbbsaction.hasReplyCount = NO;
  resultPbbbsaction.replyCount = 0;
  return self;
}
- (BOOL) hasContent {
  return resultPbbbsaction.hasContent;
}
- (PBBBSContent*) content {
  return resultPbbbsaction.content;
}
- (PBBBSActionBuilder*) setContent:(PBBBSContent*) value {
  resultPbbbsaction.hasContent = YES;
  resultPbbbsaction.content = value;
  return self;
}
- (PBBBSActionBuilder*) setContentBuilder:(PBBBSContentBuilder*) builderForValue {
  return [self setContent:[builderForValue build]];
}
- (PBBBSActionBuilder*) mergeContent:(PBBBSContent*) value {
  if (resultPbbbsaction.hasContent &&
      resultPbbbsaction.content != [PBBBSContent defaultInstance]) {
    resultPbbbsaction.content =
      [[[PBBBSContent builderWithPrototype:resultPbbbsaction.content] mergeFrom:value] buildPartial];
  } else {
    resultPbbbsaction.content = value;
  }
  resultPbbbsaction.hasContent = YES;
  return self;
}
- (PBBBSActionBuilder*) clearContent {
  resultPbbbsaction.hasContent = NO;
  resultPbbbsaction.content = [PBBBSContent defaultInstance];
  return self;
}
- (BOOL) hasSource {
  return resultPbbbsaction.hasSource;
}
- (PBBBSActionSource*) source {
  return resultPbbbsaction.source;
}
- (PBBBSActionBuilder*) setSource:(PBBBSActionSource*) value {
  resultPbbbsaction.hasSource = YES;
  resultPbbbsaction.source = value;
  return self;
}
- (PBBBSActionBuilder*) setSourceBuilder:(PBBBSActionSourceBuilder*) builderForValue {
  return [self setSource:[builderForValue build]];
}
- (PBBBSActionBuilder*) mergeSource:(PBBBSActionSource*) value {
  if (resultPbbbsaction.hasSource &&
      resultPbbbsaction.source != [PBBBSActionSource defaultInstance]) {
    resultPbbbsaction.source =
      [[[PBBBSActionSource builderWithPrototype:resultPbbbsaction.source] mergeFrom:value] buildPartial];
  } else {
    resultPbbbsaction.source = value;
  }
  resultPbbbsaction.hasSource = YES;
  return self;
}
- (PBBBSActionBuilder*) clearSource {
  resultPbbbsaction.hasSource = NO;
  resultPbbbsaction.source = [PBBBSActionSource defaultInstance];
  return self;
}
@end

@interface PBBBSBoard ()
@property (strong) NSString* boardId;
@property SInt32 type;
@property (strong) NSString* name;
@property SInt32 actionCount;
@property SInt32 postCount;
@property (strong) NSString* icon;
@property (strong) NSString* parentBoardId;
@property (strong) PBBBSPost* lastPost;
@property (strong) NSString* desc;
@property (strong) NSMutableArray * adminListArray;
@property SInt32 index;
@end

@implementation PBBBSBoard

- (BOOL) hasBoardId {
  return !!hasBoardId_;
}
- (void) setHasBoardId:(BOOL) _value_ {
  hasBoardId_ = !!_value_;
}
@synthesize boardId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasActionCount {
  return !!hasActionCount_;
}
- (void) setHasActionCount:(BOOL) _value_ {
  hasActionCount_ = !!_value_;
}
@synthesize actionCount;
- (BOOL) hasPostCount {
  return !!hasPostCount_;
}
- (void) setHasPostCount:(BOOL) _value_ {
  hasPostCount_ = !!_value_;
}
@synthesize postCount;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) _value_ {
  hasIcon_ = !!_value_;
}
@synthesize icon;
- (BOOL) hasParentBoardId {
  return !!hasParentBoardId_;
}
- (void) setHasParentBoardId:(BOOL) _value_ {
  hasParentBoardId_ = !!_value_;
}
@synthesize parentBoardId;
- (BOOL) hasLastPost {
  return !!hasLastPost_;
}
- (void) setHasLastPost:(BOOL) _value_ {
  hasLastPost_ = !!_value_;
}
@synthesize lastPost;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
@synthesize adminListArray;
@dynamic adminList;
- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) _value_ {
  hasIndex_ = !!_value_;
}
@synthesize index;
- (instancetype) init {
  if ((self = [super init])) {
    self.boardId = @"";
    self.type = 0;
    self.name = @"";
    self.actionCount = 0;
    self.postCount = 0;
    self.icon = @"";
    self.parentBoardId = @"";
    self.lastPost = [PBBBSPost defaultInstance];
    self.desc = @"";
    self.index = 0;
  }
  return self;
}
static PBBBSBoard* defaultPBBBSBoardInstance = nil;
+ (void) initialize {
  if (self == [PBBBSBoard class]) {
    defaultPBBBSBoardInstance = [[PBBBSBoard alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBBBSBoardInstance;
}
- (instancetype) defaultInstance {
  return defaultPBBBSBoardInstance;
}
- (NSArray *)adminList {
  return adminListArray;
}
- (PBBBSUser*)adminListAtIndex:(NSUInteger)index {
  return [adminListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasBoardId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasActionCount) {
    return NO;
  }
  if (!self.hasPostCount) {
    return NO;
  }
  if (self.hasLastPost) {
    if (!self.lastPost.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitadminList = YES;
   [self.adminList enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitadminList = NO;
      *stop = YES;
    }
  }];
  if (!isInitadminList) return isInitadminList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBoardId) {
    [output writeString:1 value:self.boardId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasIcon) {
    [output writeString:4 value:self.icon];
  }
  if (self.hasActionCount) {
    [output writeInt32:5 value:self.actionCount];
  }
  if (self.hasPostCount) {
    [output writeInt32:6 value:self.postCount];
  }
  if (self.hasParentBoardId) {
    [output writeString:7 value:self.parentBoardId];
  }
  if (self.hasLastPost) {
    [output writeMessage:8 value:self.lastPost];
  }
  if (self.hasDesc) {
    [output writeString:9 value:self.desc];
  }
  [self.adminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasIndex) {
    [output writeInt32:11 value:self.index];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBoardId) {
    size_ += computeStringSize(1, self.boardId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(4, self.icon);
  }
  if (self.hasActionCount) {
    size_ += computeInt32Size(5, self.actionCount);
  }
  if (self.hasPostCount) {
    size_ += computeInt32Size(6, self.postCount);
  }
  if (self.hasParentBoardId) {
    size_ += computeStringSize(7, self.parentBoardId);
  }
  if (self.hasLastPost) {
    size_ += computeMessageSize(8, self.lastPost);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(9, self.desc);
  }
  [self.adminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasIndex) {
    size_ += computeInt32Size(11, self.index);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBBBSBoard*) parseFromData:(NSData*) data {
  return (PBBBSBoard*)[[[PBBBSBoard builder] mergeFromData:data] build];
}
+ (PBBBSBoard*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSBoard*)[[[PBBBSBoard builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBBBSBoard*) parseFromInputStream:(NSInputStream*) input {
  return (PBBBSBoard*)[[[PBBBSBoard builder] mergeFromInputStream:input] build];
}
+ (PBBBSBoard*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSBoard*)[[[PBBBSBoard builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSBoard*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBBBSBoard*)[[[PBBBSBoard builder] mergeFromCodedInputStream:input] build];
}
+ (PBBBSBoard*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBBBSBoard*)[[[PBBBSBoard builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBBBSBoardBuilder*) builder {
  return [[PBBBSBoardBuilder alloc] init];
}
+ (PBBBSBoardBuilder*) builderWithPrototype:(PBBBSBoard*) prototype {
  return [[PBBBSBoard builder] mergeFrom:prototype];
}
- (PBBBSBoardBuilder*) builder {
  return [PBBBSBoard builder];
}
- (PBBBSBoardBuilder*) toBuilder {
  return [PBBBSBoard builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBoardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardId", self.boardId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  if (self.hasActionCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionCount", [NSNumber numberWithInteger:self.actionCount]];
  }
  if (self.hasPostCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postCount", [NSNumber numberWithInteger:self.postCount]];
  }
  if (self.hasParentBoardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentBoardId", self.parentBoardId];
  }
  if (self.hasLastPost) {
    [output appendFormat:@"%@%@ {\n", indent, @"lastPost"];
    [self.lastPost writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  [self.adminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"adminList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"index", [NSNumber numberWithInteger:self.index]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBBBSBoard class]]) {
    return NO;
  }
  PBBBSBoard *otherMessage = other;
  return
      self.hasBoardId == otherMessage.hasBoardId &&
      (!self.hasBoardId || [self.boardId isEqual:otherMessage.boardId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      self.hasActionCount == otherMessage.hasActionCount &&
      (!self.hasActionCount || self.actionCount == otherMessage.actionCount) &&
      self.hasPostCount == otherMessage.hasPostCount &&
      (!self.hasPostCount || self.postCount == otherMessage.postCount) &&
      self.hasParentBoardId == otherMessage.hasParentBoardId &&
      (!self.hasParentBoardId || [self.parentBoardId isEqual:otherMessage.parentBoardId]) &&
      self.hasLastPost == otherMessage.hasLastPost &&
      (!self.hasLastPost || [self.lastPost isEqual:otherMessage.lastPost]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      [self.adminListArray isEqualToArray:otherMessage.adminListArray] &&
      self.hasIndex == otherMessage.hasIndex &&
      (!self.hasIndex || self.index == otherMessage.index) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBoardId) {
    hashCode = hashCode * 31 + [self.boardId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  if (self.hasActionCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actionCount] hash];
  }
  if (self.hasPostCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.postCount] hash];
  }
  if (self.hasParentBoardId) {
    hashCode = hashCode * 31 + [self.parentBoardId hash];
  }
  if (self.hasLastPost) {
    hashCode = hashCode * 31 + [self.lastPost hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  [self.adminListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.index] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBBBSBoardBuilder()
@property (strong) PBBBSBoard* resultPbbbsboard;
@end

@implementation PBBBSBoardBuilder
@synthesize resultPbbbsboard;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbbbsboard = [[PBBBSBoard alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbbbsboard;
}
- (PBBBSBoardBuilder*) clear {
  self.resultPbbbsboard = [[PBBBSBoard alloc] init];
  return self;
}
- (PBBBSBoardBuilder*) clone {
  return [PBBBSBoard builderWithPrototype:resultPbbbsboard];
}
- (PBBBSBoard*) defaultInstance {
  return [PBBBSBoard defaultInstance];
}
- (PBBBSBoard*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBBBSBoard*) buildPartial {
  PBBBSBoard* returnMe = resultPbbbsboard;
  self.resultPbbbsboard = nil;
  return returnMe;
}
- (PBBBSBoardBuilder*) mergeFrom:(PBBBSBoard*) other {
  if (other == [PBBBSBoard defaultInstance]) {
    return self;
  }
  if (other.hasBoardId) {
    [self setBoardId:other.boardId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasActionCount) {
    [self setActionCount:other.actionCount];
  }
  if (other.hasPostCount) {
    [self setPostCount:other.postCount];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.hasParentBoardId) {
    [self setParentBoardId:other.parentBoardId];
  }
  if (other.hasLastPost) {
    [self mergeLastPost:other.lastPost];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.adminListArray.count > 0) {
    if (resultPbbbsboard.adminListArray == nil) {
      resultPbbbsboard.adminListArray = [[NSMutableArray alloc] initWithArray:other.adminListArray];
    } else {
      [resultPbbbsboard.adminListArray addObjectsFromArray:other.adminListArray];
    }
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBBBSBoardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBBBSBoardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBoardId:[input readString]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setIcon:[input readString]];
        break;
      }
      case 40: {
        [self setActionCount:[input readInt32]];
        break;
      }
      case 48: {
        [self setPostCount:[input readInt32]];
        break;
      }
      case 58: {
        [self setParentBoardId:[input readString]];
        break;
      }
      case 66: {
        PBBBSPostBuilder* subBuilder = [PBBBSPost builder];
        if (self.hasLastPost) {
          [subBuilder mergeFrom:self.lastPost];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLastPost:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        [self setDesc:[input readString]];
        break;
      }
      case 82: {
        PBBBSUserBuilder* subBuilder = [PBBBSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAdminList:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        [self setIndex:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBoardId {
  return resultPbbbsboard.hasBoardId;
}
- (NSString*) boardId {
  return resultPbbbsboard.boardId;
}
- (PBBBSBoardBuilder*) setBoardId:(NSString*) value {
  resultPbbbsboard.hasBoardId = YES;
  resultPbbbsboard.boardId = value;
  return self;
}
- (PBBBSBoardBuilder*) clearBoardId {
  resultPbbbsboard.hasBoardId = NO;
  resultPbbbsboard.boardId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbbbsboard.hasType;
}
- (SInt32) type {
  return resultPbbbsboard.type;
}
- (PBBBSBoardBuilder*) setType:(SInt32) value {
  resultPbbbsboard.hasType = YES;
  resultPbbbsboard.type = value;
  return self;
}
- (PBBBSBoardBuilder*) clearType {
  resultPbbbsboard.hasType = NO;
  resultPbbbsboard.type = 0;
  return self;
}
- (BOOL) hasName {
  return resultPbbbsboard.hasName;
}
- (NSString*) name {
  return resultPbbbsboard.name;
}
- (PBBBSBoardBuilder*) setName:(NSString*) value {
  resultPbbbsboard.hasName = YES;
  resultPbbbsboard.name = value;
  return self;
}
- (PBBBSBoardBuilder*) clearName {
  resultPbbbsboard.hasName = NO;
  resultPbbbsboard.name = @"";
  return self;
}
- (BOOL) hasActionCount {
  return resultPbbbsboard.hasActionCount;
}
- (SInt32) actionCount {
  return resultPbbbsboard.actionCount;
}
- (PBBBSBoardBuilder*) setActionCount:(SInt32) value {
  resultPbbbsboard.hasActionCount = YES;
  resultPbbbsboard.actionCount = value;
  return self;
}
- (PBBBSBoardBuilder*) clearActionCount {
  resultPbbbsboard.hasActionCount = NO;
  resultPbbbsboard.actionCount = 0;
  return self;
}
- (BOOL) hasPostCount {
  return resultPbbbsboard.hasPostCount;
}
- (SInt32) postCount {
  return resultPbbbsboard.postCount;
}
- (PBBBSBoardBuilder*) setPostCount:(SInt32) value {
  resultPbbbsboard.hasPostCount = YES;
  resultPbbbsboard.postCount = value;
  return self;
}
- (PBBBSBoardBuilder*) clearPostCount {
  resultPbbbsboard.hasPostCount = NO;
  resultPbbbsboard.postCount = 0;
  return self;
}
- (BOOL) hasIcon {
  return resultPbbbsboard.hasIcon;
}
- (NSString*) icon {
  return resultPbbbsboard.icon;
}
- (PBBBSBoardBuilder*) setIcon:(NSString*) value {
  resultPbbbsboard.hasIcon = YES;
  resultPbbbsboard.icon = value;
  return self;
}
- (PBBBSBoardBuilder*) clearIcon {
  resultPbbbsboard.hasIcon = NO;
  resultPbbbsboard.icon = @"";
  return self;
}
- (BOOL) hasParentBoardId {
  return resultPbbbsboard.hasParentBoardId;
}
- (NSString*) parentBoardId {
  return resultPbbbsboard.parentBoardId;
}
- (PBBBSBoardBuilder*) setParentBoardId:(NSString*) value {
  resultPbbbsboard.hasParentBoardId = YES;
  resultPbbbsboard.parentBoardId = value;
  return self;
}
- (PBBBSBoardBuilder*) clearParentBoardId {
  resultPbbbsboard.hasParentBoardId = NO;
  resultPbbbsboard.parentBoardId = @"";
  return self;
}
- (BOOL) hasLastPost {
  return resultPbbbsboard.hasLastPost;
}
- (PBBBSPost*) lastPost {
  return resultPbbbsboard.lastPost;
}
- (PBBBSBoardBuilder*) setLastPost:(PBBBSPost*) value {
  resultPbbbsboard.hasLastPost = YES;
  resultPbbbsboard.lastPost = value;
  return self;
}
- (PBBBSBoardBuilder*) setLastPostBuilder:(PBBBSPostBuilder*) builderForValue {
  return [self setLastPost:[builderForValue build]];
}
- (PBBBSBoardBuilder*) mergeLastPost:(PBBBSPost*) value {
  if (resultPbbbsboard.hasLastPost &&
      resultPbbbsboard.lastPost != [PBBBSPost defaultInstance]) {
    resultPbbbsboard.lastPost =
      [[[PBBBSPost builderWithPrototype:resultPbbbsboard.lastPost] mergeFrom:value] buildPartial];
  } else {
    resultPbbbsboard.lastPost = value;
  }
  resultPbbbsboard.hasLastPost = YES;
  return self;
}
- (PBBBSBoardBuilder*) clearLastPost {
  resultPbbbsboard.hasLastPost = NO;
  resultPbbbsboard.lastPost = [PBBBSPost defaultInstance];
  return self;
}
- (BOOL) hasDesc {
  return resultPbbbsboard.hasDesc;
}
- (NSString*) desc {
  return resultPbbbsboard.desc;
}
- (PBBBSBoardBuilder*) setDesc:(NSString*) value {
  resultPbbbsboard.hasDesc = YES;
  resultPbbbsboard.desc = value;
  return self;
}
- (PBBBSBoardBuilder*) clearDesc {
  resultPbbbsboard.hasDesc = NO;
  resultPbbbsboard.desc = @"";
  return self;
}
- (NSMutableArray *)adminList {
  return resultPbbbsboard.adminListArray;
}
- (PBBBSUser*)adminListAtIndex:(NSUInteger)index {
  return [resultPbbbsboard adminListAtIndex:index];
}
- (PBBBSBoardBuilder *)addAdminList:(PBBBSUser*)value {
  if (resultPbbbsboard.adminListArray == nil) {
    resultPbbbsboard.adminListArray = [[NSMutableArray alloc]init];
  }
  [resultPbbbsboard.adminListArray addObject:value];
  return self;
}
- (PBBBSBoardBuilder *)setAdminListArray:(NSArray *)array {
  resultPbbbsboard.adminListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBBBSBoardBuilder *)clearAdminList {
  resultPbbbsboard.adminListArray = nil;
  return self;
}
- (BOOL) hasIndex {
  return resultPbbbsboard.hasIndex;
}
- (SInt32) index {
  return resultPbbbsboard.index;
}
- (PBBBSBoardBuilder*) setIndex:(SInt32) value {
  resultPbbbsboard.hasIndex = YES;
  resultPbbbsboard.index = value;
  return self;
}
- (PBBBSBoardBuilder*) clearIndex {
  resultPbbbsboard.hasIndex = NO;
  resultPbbbsboard.index = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
