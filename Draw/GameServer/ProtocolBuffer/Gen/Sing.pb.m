// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Sing.pb.h"
// @@protoc_insertion_point(imports)

@implementation SingRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SingRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBVoiceTypeIsValidValue(PBVoiceType value) {
  switch (value) {
    case PBVoiceTypeVoiceTypeOrigin:
    case PBVoiceTypeVoiceTypeTomCat:
    case PBVoiceTypeVoiceTypeMale:
    case PBVoiceTypeVoiceTypeFemale:
    case PBVoiceTypeVoiceTypeDuck:
    case PBVoiceTypeVoiceTypeChild:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBVoiceType(PBVoiceType value) {
  switch (value) {
    case PBVoiceTypeVoiceTypeOrigin:
      return @"PBVoiceTypeVoiceTypeOrigin";
    case PBVoiceTypeVoiceTypeTomCat:
      return @"PBVoiceTypeVoiceTypeTomCat";
    case PBVoiceTypeVoiceTypeMale:
      return @"PBVoiceTypeVoiceTypeMale";
    case PBVoiceTypeVoiceTypeFemale:
      return @"PBVoiceTypeVoiceTypeFemale";
    case PBVoiceTypeVoiceTypeDuck:
      return @"PBVoiceTypeVoiceTypeDuck";
    case PBVoiceTypeVoiceTypeChild:
      return @"PBVoiceTypeVoiceTypeChild";
    default:
      return nil;
  }
}

@interface PBSongCategory ()
@property (strong) NSString* name;
@property (strong) NSMutableArray * songTagsArray;
@end

@implementation PBSongCategory

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize songTagsArray;
@dynamic songTags;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static PBSongCategory* defaultPBSongCategoryInstance = nil;
+ (void) initialize {
  if (self == [PBSongCategory class]) {
    defaultPBSongCategoryInstance = [[PBSongCategory alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSongCategoryInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSongCategoryInstance;
}
- (NSArray *)songTags {
  return songTagsArray;
}
- (NSString*)songTagsAtIndex:(NSUInteger)index {
  return [songTagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  [self.songTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.songTagsArray.count;
    [self.songTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSongCategory*) parseFromData:(NSData*) data {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromData:data] build];
}
+ (PBSongCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategory*) parseFromInputStream:(NSInputStream*) input {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromInputStream:input] build];
}
+ (PBSongCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromCodedInputStream:input] build];
}
+ (PBSongCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryBuilder*) builder {
  return [[PBSongCategoryBuilder alloc] init];
}
+ (PBSongCategoryBuilder*) builderWithPrototype:(PBSongCategory*) prototype {
  return [[PBSongCategory builder] mergeFrom:prototype];
}
- (PBSongCategoryBuilder*) builder {
  return [PBSongCategory builder];
}
- (PBSongCategoryBuilder*) toBuilder {
  return [PBSongCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.songTagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"songTags", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSongCategory class]]) {
    return NO;
  }
  PBSongCategory *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.songTagsArray isEqualToArray:otherMessage.songTagsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  [self.songTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSongCategoryBuilder()
@property (strong) PBSongCategory* resultPbsongCategory;
@end

@implementation PBSongCategoryBuilder
@synthesize resultPbsongCategory;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsongCategory = [[PBSongCategory alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsongCategory;
}
- (PBSongCategoryBuilder*) clear {
  self.resultPbsongCategory = [[PBSongCategory alloc] init];
  return self;
}
- (PBSongCategoryBuilder*) clone {
  return [PBSongCategory builderWithPrototype:resultPbsongCategory];
}
- (PBSongCategory*) defaultInstance {
  return [PBSongCategory defaultInstance];
}
- (PBSongCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSongCategory*) buildPartial {
  PBSongCategory* returnMe = resultPbsongCategory;
  self.resultPbsongCategory = nil;
  return returnMe;
}
- (PBSongCategoryBuilder*) mergeFrom:(PBSongCategory*) other {
  if (other == [PBSongCategory defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.songTagsArray.count > 0) {
    if (resultPbsongCategory.songTagsArray == nil) {
      resultPbsongCategory.songTagsArray = [[NSMutableArray alloc] initWithArray:other.songTagsArray];
    } else {
      [resultPbsongCategory.songTagsArray addObjectsFromArray:other.songTagsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongCategoryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongCategoryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self addSongTags:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultPbsongCategory.hasName;
}
- (NSString*) name {
  return resultPbsongCategory.name;
}
- (PBSongCategoryBuilder*) setName:(NSString*) value {
  resultPbsongCategory.hasName = YES;
  resultPbsongCategory.name = value;
  return self;
}
- (PBSongCategoryBuilder*) clearName {
  resultPbsongCategory.hasName = NO;
  resultPbsongCategory.name = @"";
  return self;
}
- (NSMutableArray *)songTags {
  return resultPbsongCategory.songTagsArray;
}
- (NSString*)songTagsAtIndex:(NSUInteger)index {
  return [resultPbsongCategory songTagsAtIndex:index];
}
- (PBSongCategoryBuilder *)addSongTags:(NSString*)value {
  if (resultPbsongCategory.songTagsArray == nil) {
    resultPbsongCategory.songTagsArray = [[NSMutableArray alloc]init];
  }
  [resultPbsongCategory.songTagsArray addObject:value];
  return self;
}
- (PBSongCategoryBuilder *)setSongTagsArray:(NSArray *)array {
  resultPbsongCategory.songTagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBSongCategoryBuilder *)clearSongTags {
  resultPbsongCategory.songTagsArray = nil;
  return self;
}
@end

@interface PBSongCategoryList ()
@property (strong) NSMutableArray * categorysArray;
@end

@implementation PBSongCategoryList

@synthesize categorysArray;
@dynamic categorys;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBSongCategoryList* defaultPBSongCategoryListInstance = nil;
+ (void) initialize {
  if (self == [PBSongCategoryList class]) {
    defaultPBSongCategoryListInstance = [[PBSongCategoryList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSongCategoryListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSongCategoryListInstance;
}
- (NSArray *)categorys {
  return categorysArray;
}
- (PBSongCategory*)categorysAtIndex:(NSUInteger)index {
  return [categorysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitcategorys = YES;
   [self.categorys enumerateObjectsUsingBlock:^(PBSongCategory *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcategorys = NO;
      *stop = YES;
    }
  }];
  if (!isInitcategorys) return isInitcategorys;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.categorysArray enumerateObjectsUsingBlock:^(PBSongCategory *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.categorysArray enumerateObjectsUsingBlock:^(PBSongCategory *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSongCategoryList*) parseFromData:(NSData*) data {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromData:data] build];
}
+ (PBSongCategoryList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryList*) parseFromInputStream:(NSInputStream*) input {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromInputStream:input] build];
}
+ (PBSongCategoryList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromCodedInputStream:input] build];
}
+ (PBSongCategoryList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryListBuilder*) builder {
  return [[PBSongCategoryListBuilder alloc] init];
}
+ (PBSongCategoryListBuilder*) builderWithPrototype:(PBSongCategoryList*) prototype {
  return [[PBSongCategoryList builder] mergeFrom:prototype];
}
- (PBSongCategoryListBuilder*) builder {
  return [PBSongCategoryList builder];
}
- (PBSongCategoryListBuilder*) toBuilder {
  return [PBSongCategoryList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.categorysArray enumerateObjectsUsingBlock:^(PBSongCategory *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"categorys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSongCategoryList class]]) {
    return NO;
  }
  PBSongCategoryList *otherMessage = other;
  return
      [self.categorysArray isEqualToArray:otherMessage.categorysArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.categorysArray enumerateObjectsUsingBlock:^(PBSongCategory *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSongCategoryListBuilder()
@property (strong) PBSongCategoryList* resultPbsongCategoryList;
@end

@implementation PBSongCategoryListBuilder
@synthesize resultPbsongCategoryList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsongCategoryList = [[PBSongCategoryList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsongCategoryList;
}
- (PBSongCategoryListBuilder*) clear {
  self.resultPbsongCategoryList = [[PBSongCategoryList alloc] init];
  return self;
}
- (PBSongCategoryListBuilder*) clone {
  return [PBSongCategoryList builderWithPrototype:resultPbsongCategoryList];
}
- (PBSongCategoryList*) defaultInstance {
  return [PBSongCategoryList defaultInstance];
}
- (PBSongCategoryList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSongCategoryList*) buildPartial {
  PBSongCategoryList* returnMe = resultPbsongCategoryList;
  self.resultPbsongCategoryList = nil;
  return returnMe;
}
- (PBSongCategoryListBuilder*) mergeFrom:(PBSongCategoryList*) other {
  if (other == [PBSongCategoryList defaultInstance]) {
    return self;
  }
  if (other.categorysArray.count > 0) {
    if (resultPbsongCategoryList.categorysArray == nil) {
      resultPbsongCategoryList.categorysArray = [[NSMutableArray alloc] initWithArray:other.categorysArray];
    } else {
      [resultPbsongCategoryList.categorysArray addObjectsFromArray:other.categorysArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongCategoryListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongCategoryListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSongCategoryBuilder* subBuilder = [PBSongCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCategorys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)categorys {
  return resultPbsongCategoryList.categorysArray;
}
- (PBSongCategory*)categorysAtIndex:(NSUInteger)index {
  return [resultPbsongCategoryList categorysAtIndex:index];
}
- (PBSongCategoryListBuilder *)addCategorys:(PBSongCategory*)value {
  if (resultPbsongCategoryList.categorysArray == nil) {
    resultPbsongCategoryList.categorysArray = [[NSMutableArray alloc]init];
  }
  [resultPbsongCategoryList.categorysArray addObject:value];
  return self;
}
- (PBSongCategoryListBuilder *)setCategorysArray:(NSArray *)array {
  resultPbsongCategoryList.categorysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSongCategoryListBuilder *)clearCategorys {
  resultPbsongCategoryList.categorysArray = nil;
  return self;
}
@end

@interface PBSong ()
@property (strong) NSString* songId;
@property (strong) NSString* name;
@property (strong) NSString* author;
@property (strong) NSString* lyric;
@property (strong) NSString* lyricUrl;
@property (strong) NSMutableArray * tagArray;
@end

@implementation PBSong

- (BOOL) hasSongId {
  return !!hasSongId_;
}
- (void) setHasSongId:(BOOL) _value_ {
  hasSongId_ = !!_value_;
}
@synthesize songId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) _value_ {
  hasAuthor_ = !!_value_;
}
@synthesize author;
- (BOOL) hasLyric {
  return !!hasLyric_;
}
- (void) setHasLyric:(BOOL) _value_ {
  hasLyric_ = !!_value_;
}
@synthesize lyric;
- (BOOL) hasLyricUrl {
  return !!hasLyricUrl_;
}
- (void) setHasLyricUrl:(BOOL) _value_ {
  hasLyricUrl_ = !!_value_;
}
@synthesize lyricUrl;
@synthesize tagArray;
@dynamic tag;
- (instancetype) init {
  if ((self = [super init])) {
    self.songId = @"";
    self.name = @"";
    self.author = @"";
    self.lyric = @"";
    self.lyricUrl = @"";
  }
  return self;
}
static PBSong* defaultPBSongInstance = nil;
+ (void) initialize {
  if (self == [PBSong class]) {
    defaultPBSongInstance = [[PBSong alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSongInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSongInstance;
}
- (NSArray *)tag {
  return tagArray;
}
- (NSString*)tagAtIndex:(NSUInteger)index {
  return [tagArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSongId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSongId) {
    [output writeString:1 value:self.songId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasAuthor) {
    [output writeString:3 value:self.author];
  }
  if (self.hasLyric) {
    [output writeString:4 value:self.lyric];
  }
  if (self.hasLyricUrl) {
    [output writeString:5 value:self.lyricUrl];
  }
  [self.tagArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:20 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSongId) {
    size_ += computeStringSize(1, self.songId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasAuthor) {
    size_ += computeStringSize(3, self.author);
  }
  if (self.hasLyric) {
    size_ += computeStringSize(4, self.lyric);
  }
  if (self.hasLyricUrl) {
    size_ += computeStringSize(5, self.lyricUrl);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tagArray.count;
    [self.tagArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSong*) parseFromData:(NSData*) data {
  return (PBSong*)[[[PBSong builder] mergeFromData:data] build];
}
+ (PBSong*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSong*)[[[PBSong builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSong*) parseFromInputStream:(NSInputStream*) input {
  return (PBSong*)[[[PBSong builder] mergeFromInputStream:input] build];
}
+ (PBSong*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSong*)[[[PBSong builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSong*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSong*)[[[PBSong builder] mergeFromCodedInputStream:input] build];
}
+ (PBSong*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSong*)[[[PBSong builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongBuilder*) builder {
  return [[PBSongBuilder alloc] init];
}
+ (PBSongBuilder*) builderWithPrototype:(PBSong*) prototype {
  return [[PBSong builder] mergeFrom:prototype];
}
- (PBSongBuilder*) builder {
  return [PBSong builder];
}
- (PBSongBuilder*) toBuilder {
  return [PBSong builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSongId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"songId", self.songId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAuthor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"author", self.author];
  }
  if (self.hasLyric) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lyric", self.lyric];
  }
  if (self.hasLyricUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lyricUrl", self.lyricUrl];
  }
  [self.tagArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSong class]]) {
    return NO;
  }
  PBSong *otherMessage = other;
  return
      self.hasSongId == otherMessage.hasSongId &&
      (!self.hasSongId || [self.songId isEqual:otherMessage.songId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAuthor == otherMessage.hasAuthor &&
      (!self.hasAuthor || [self.author isEqual:otherMessage.author]) &&
      self.hasLyric == otherMessage.hasLyric &&
      (!self.hasLyric || [self.lyric isEqual:otherMessage.lyric]) &&
      self.hasLyricUrl == otherMessage.hasLyricUrl &&
      (!self.hasLyricUrl || [self.lyricUrl isEqual:otherMessage.lyricUrl]) &&
      [self.tagArray isEqualToArray:otherMessage.tagArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSongId) {
    hashCode = hashCode * 31 + [self.songId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAuthor) {
    hashCode = hashCode * 31 + [self.author hash];
  }
  if (self.hasLyric) {
    hashCode = hashCode * 31 + [self.lyric hash];
  }
  if (self.hasLyricUrl) {
    hashCode = hashCode * 31 + [self.lyricUrl hash];
  }
  [self.tagArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSongBuilder()
@property (strong) PBSong* resultPbsong;
@end

@implementation PBSongBuilder
@synthesize resultPbsong;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsong = [[PBSong alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsong;
}
- (PBSongBuilder*) clear {
  self.resultPbsong = [[PBSong alloc] init];
  return self;
}
- (PBSongBuilder*) clone {
  return [PBSong builderWithPrototype:resultPbsong];
}
- (PBSong*) defaultInstance {
  return [PBSong defaultInstance];
}
- (PBSong*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSong*) buildPartial {
  PBSong* returnMe = resultPbsong;
  self.resultPbsong = nil;
  return returnMe;
}
- (PBSongBuilder*) mergeFrom:(PBSong*) other {
  if (other == [PBSong defaultInstance]) {
    return self;
  }
  if (other.hasSongId) {
    [self setSongId:other.songId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  if (other.hasLyric) {
    [self setLyric:other.lyric];
  }
  if (other.hasLyricUrl) {
    [self setLyricUrl:other.lyricUrl];
  }
  if (other.tagArray.count > 0) {
    if (resultPbsong.tagArray == nil) {
      resultPbsong.tagArray = [[NSMutableArray alloc] initWithArray:other.tagArray];
    } else {
      [resultPbsong.tagArray addObjectsFromArray:other.tagArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSongId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setAuthor:[input readString]];
        break;
      }
      case 34: {
        [self setLyric:[input readString]];
        break;
      }
      case 42: {
        [self setLyricUrl:[input readString]];
        break;
      }
      case 162: {
        [self addTag:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSongId {
  return resultPbsong.hasSongId;
}
- (NSString*) songId {
  return resultPbsong.songId;
}
- (PBSongBuilder*) setSongId:(NSString*) value {
  resultPbsong.hasSongId = YES;
  resultPbsong.songId = value;
  return self;
}
- (PBSongBuilder*) clearSongId {
  resultPbsong.hasSongId = NO;
  resultPbsong.songId = @"";
  return self;
}
- (BOOL) hasName {
  return resultPbsong.hasName;
}
- (NSString*) name {
  return resultPbsong.name;
}
- (PBSongBuilder*) setName:(NSString*) value {
  resultPbsong.hasName = YES;
  resultPbsong.name = value;
  return self;
}
- (PBSongBuilder*) clearName {
  resultPbsong.hasName = NO;
  resultPbsong.name = @"";
  return self;
}
- (BOOL) hasAuthor {
  return resultPbsong.hasAuthor;
}
- (NSString*) author {
  return resultPbsong.author;
}
- (PBSongBuilder*) setAuthor:(NSString*) value {
  resultPbsong.hasAuthor = YES;
  resultPbsong.author = value;
  return self;
}
- (PBSongBuilder*) clearAuthor {
  resultPbsong.hasAuthor = NO;
  resultPbsong.author = @"";
  return self;
}
- (BOOL) hasLyric {
  return resultPbsong.hasLyric;
}
- (NSString*) lyric {
  return resultPbsong.lyric;
}
- (PBSongBuilder*) setLyric:(NSString*) value {
  resultPbsong.hasLyric = YES;
  resultPbsong.lyric = value;
  return self;
}
- (PBSongBuilder*) clearLyric {
  resultPbsong.hasLyric = NO;
  resultPbsong.lyric = @"";
  return self;
}
- (BOOL) hasLyricUrl {
  return resultPbsong.hasLyricUrl;
}
- (NSString*) lyricUrl {
  return resultPbsong.lyricUrl;
}
- (PBSongBuilder*) setLyricUrl:(NSString*) value {
  resultPbsong.hasLyricUrl = YES;
  resultPbsong.lyricUrl = value;
  return self;
}
- (PBSongBuilder*) clearLyricUrl {
  resultPbsong.hasLyricUrl = NO;
  resultPbsong.lyricUrl = @"";
  return self;
}
- (NSMutableArray *)tag {
  return resultPbsong.tagArray;
}
- (NSString*)tagAtIndex:(NSUInteger)index {
  return [resultPbsong tagAtIndex:index];
}
- (PBSongBuilder *)addTag:(NSString*)value {
  if (resultPbsong.tagArray == nil) {
    resultPbsong.tagArray = [[NSMutableArray alloc]init];
  }
  [resultPbsong.tagArray addObject:value];
  return self;
}
- (PBSongBuilder *)setTagArray:(NSArray *)array {
  resultPbsong.tagArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBSongBuilder *)clearTag {
  resultPbsong.tagArray = nil;
  return self;
}
@end

@interface PBSongList ()
@property (strong) NSMutableArray * songsArray;
@end

@implementation PBSongList

@synthesize songsArray;
@dynamic songs;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBSongList* defaultPBSongListInstance = nil;
+ (void) initialize {
  if (self == [PBSongList class]) {
    defaultPBSongListInstance = [[PBSongList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSongListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSongListInstance;
}
- (NSArray *)songs {
  return songsArray;
}
- (PBSong*)songsAtIndex:(NSUInteger)index {
  return [songsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitsongs = YES;
   [self.songs enumerateObjectsUsingBlock:^(PBSong *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsongs = NO;
      *stop = YES;
    }
  }];
  if (!isInitsongs) return isInitsongs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.songsArray enumerateObjectsUsingBlock:^(PBSong *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.songsArray enumerateObjectsUsingBlock:^(PBSong *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSongList*) parseFromData:(NSData*) data {
  return (PBSongList*)[[[PBSongList builder] mergeFromData:data] build];
}
+ (PBSongList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongList*)[[[PBSongList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSongList*) parseFromInputStream:(NSInputStream*) input {
  return (PBSongList*)[[[PBSongList builder] mergeFromInputStream:input] build];
}
+ (PBSongList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongList*)[[[PBSongList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSongList*)[[[PBSongList builder] mergeFromCodedInputStream:input] build];
}
+ (PBSongList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongList*)[[[PBSongList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongListBuilder*) builder {
  return [[PBSongListBuilder alloc] init];
}
+ (PBSongListBuilder*) builderWithPrototype:(PBSongList*) prototype {
  return [[PBSongList builder] mergeFrom:prototype];
}
- (PBSongListBuilder*) builder {
  return [PBSongList builder];
}
- (PBSongListBuilder*) toBuilder {
  return [PBSongList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.songsArray enumerateObjectsUsingBlock:^(PBSong *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"songs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSongList class]]) {
    return NO;
  }
  PBSongList *otherMessage = other;
  return
      [self.songsArray isEqualToArray:otherMessage.songsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.songsArray enumerateObjectsUsingBlock:^(PBSong *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSongListBuilder()
@property (strong) PBSongList* resultPbsongList;
@end

@implementation PBSongListBuilder
@synthesize resultPbsongList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsongList = [[PBSongList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsongList;
}
- (PBSongListBuilder*) clear {
  self.resultPbsongList = [[PBSongList alloc] init];
  return self;
}
- (PBSongListBuilder*) clone {
  return [PBSongList builderWithPrototype:resultPbsongList];
}
- (PBSongList*) defaultInstance {
  return [PBSongList defaultInstance];
}
- (PBSongList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSongList*) buildPartial {
  PBSongList* returnMe = resultPbsongList;
  self.resultPbsongList = nil;
  return returnMe;
}
- (PBSongListBuilder*) mergeFrom:(PBSongList*) other {
  if (other == [PBSongList defaultInstance]) {
    return self;
  }
  if (other.songsArray.count > 0) {
    if (resultPbsongList.songsArray == nil) {
      resultPbsongList.songsArray = [[NSMutableArray alloc] initWithArray:other.songsArray];
    } else {
      [resultPbsongList.songsArray addObjectsFromArray:other.songsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSongBuilder* subBuilder = [PBSong builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSongs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)songs {
  return resultPbsongList.songsArray;
}
- (PBSong*)songsAtIndex:(NSUInteger)index {
  return [resultPbsongList songsAtIndex:index];
}
- (PBSongListBuilder *)addSongs:(PBSong*)value {
  if (resultPbsongList.songsArray == nil) {
    resultPbsongList.songsArray = [[NSMutableArray alloc]init];
  }
  [resultPbsongList.songsArray addObject:value];
  return self;
}
- (PBSongListBuilder *)setSongsArray:(NSArray *)array {
  resultPbsongList.songsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSongListBuilder *)clearSongs {
  resultPbsongList.songsArray = nil;
  return self;
}
@end

@interface PBSingOpus ()
@property (strong) PBSong* song;
@property PBVoiceType voiceType;
@property Float32 duration;
@property Float32 pitch;
@property Float32 formant;
@property Float32 voiceDuration;
@property (strong) NSString* localNativeDataUrl;
@end

@implementation PBSingOpus

- (BOOL) hasSong {
  return !!hasSong_;
}
- (void) setHasSong:(BOOL) _value_ {
  hasSong_ = !!_value_;
}
@synthesize song;
- (BOOL) hasVoiceType {
  return !!hasVoiceType_;
}
- (void) setHasVoiceType:(BOOL) _value_ {
  hasVoiceType_ = !!_value_;
}
@synthesize voiceType;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) _value_ {
  hasDuration_ = !!_value_;
}
@synthesize duration;
- (BOOL) hasPitch {
  return !!hasPitch_;
}
- (void) setHasPitch:(BOOL) _value_ {
  hasPitch_ = !!_value_;
}
@synthesize pitch;
- (BOOL) hasFormant {
  return !!hasFormant_;
}
- (void) setHasFormant:(BOOL) _value_ {
  hasFormant_ = !!_value_;
}
@synthesize formant;
- (BOOL) hasVoiceDuration {
  return !!hasVoiceDuration_;
}
- (void) setHasVoiceDuration:(BOOL) _value_ {
  hasVoiceDuration_ = !!_value_;
}
@synthesize voiceDuration;
- (BOOL) hasLocalNativeDataUrl {
  return !!hasLocalNativeDataUrl_;
}
- (void) setHasLocalNativeDataUrl:(BOOL) _value_ {
  hasLocalNativeDataUrl_ = !!_value_;
}
@synthesize localNativeDataUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.song = [PBSong defaultInstance];
    self.voiceType = PBVoiceTypeVoiceTypeOrigin;
    self.duration = 1;
    self.pitch = 1;
    self.formant = 1;
    self.voiceDuration = 0;
    self.localNativeDataUrl = @"";
  }
  return self;
}
static PBSingOpus* defaultPBSingOpusInstance = nil;
+ (void) initialize {
  if (self == [PBSingOpus class]) {
    defaultPBSingOpusInstance = [[PBSingOpus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSingOpusInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSingOpusInstance;
}
- (BOOL) isInitialized {
  if (self.hasSong) {
    if (!self.song.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSong) {
    [output writeMessage:1 value:self.song];
  }
  if (self.hasVoiceType) {
    [output writeEnum:2 value:self.voiceType];
  }
  if (self.hasDuration) {
    [output writeFloat:3 value:self.duration];
  }
  if (self.hasPitch) {
    [output writeFloat:4 value:self.pitch];
  }
  if (self.hasFormant) {
    [output writeFloat:5 value:self.formant];
  }
  if (self.hasVoiceDuration) {
    [output writeFloat:20 value:self.voiceDuration];
  }
  if (self.hasLocalNativeDataUrl) {
    [output writeString:100 value:self.localNativeDataUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSong) {
    size_ += computeMessageSize(1, self.song);
  }
  if (self.hasVoiceType) {
    size_ += computeEnumSize(2, self.voiceType);
  }
  if (self.hasDuration) {
    size_ += computeFloatSize(3, self.duration);
  }
  if (self.hasPitch) {
    size_ += computeFloatSize(4, self.pitch);
  }
  if (self.hasFormant) {
    size_ += computeFloatSize(5, self.formant);
  }
  if (self.hasVoiceDuration) {
    size_ += computeFloatSize(20, self.voiceDuration);
  }
  if (self.hasLocalNativeDataUrl) {
    size_ += computeStringSize(100, self.localNativeDataUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSingOpus*) parseFromData:(NSData*) data {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromData:data] build];
}
+ (PBSingOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSingOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromInputStream:input] build];
}
+ (PBSingOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSingOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBSingOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSingOpusBuilder*) builder {
  return [[PBSingOpusBuilder alloc] init];
}
+ (PBSingOpusBuilder*) builderWithPrototype:(PBSingOpus*) prototype {
  return [[PBSingOpus builder] mergeFrom:prototype];
}
- (PBSingOpusBuilder*) builder {
  return [PBSingOpus builder];
}
- (PBSingOpusBuilder*) toBuilder {
  return [PBSingOpus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSong) {
    [output appendFormat:@"%@%@ {\n", indent, @"song"];
    [self.song writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVoiceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceType", NSStringFromPBVoiceType(self.voiceType)];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithFloat:self.duration]];
  }
  if (self.hasPitch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pitch", [NSNumber numberWithFloat:self.pitch]];
  }
  if (self.hasFormant) {
    [output appendFormat:@"%@%@: %@\n", indent, @"formant", [NSNumber numberWithFloat:self.formant]];
  }
  if (self.hasVoiceDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceDuration", [NSNumber numberWithFloat:self.voiceDuration]];
  }
  if (self.hasLocalNativeDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localNativeDataUrl", self.localNativeDataUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSingOpus class]]) {
    return NO;
  }
  PBSingOpus *otherMessage = other;
  return
      self.hasSong == otherMessage.hasSong &&
      (!self.hasSong || [self.song isEqual:otherMessage.song]) &&
      self.hasVoiceType == otherMessage.hasVoiceType &&
      (!self.hasVoiceType || self.voiceType == otherMessage.voiceType) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasPitch == otherMessage.hasPitch &&
      (!self.hasPitch || self.pitch == otherMessage.pitch) &&
      self.hasFormant == otherMessage.hasFormant &&
      (!self.hasFormant || self.formant == otherMessage.formant) &&
      self.hasVoiceDuration == otherMessage.hasVoiceDuration &&
      (!self.hasVoiceDuration || self.voiceDuration == otherMessage.voiceDuration) &&
      self.hasLocalNativeDataUrl == otherMessage.hasLocalNativeDataUrl &&
      (!self.hasLocalNativeDataUrl || [self.localNativeDataUrl isEqual:otherMessage.localNativeDataUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSong) {
    hashCode = hashCode * 31 + [self.song hash];
  }
  if (self.hasVoiceType) {
    hashCode = hashCode * 31 + self.voiceType;
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.duration] hash];
  }
  if (self.hasPitch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.pitch] hash];
  }
  if (self.hasFormant) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.formant] hash];
  }
  if (self.hasVoiceDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.voiceDuration] hash];
  }
  if (self.hasLocalNativeDataUrl) {
    hashCode = hashCode * 31 + [self.localNativeDataUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSingOpusBuilder()
@property (strong) PBSingOpus* resultPbsingOpus;
@end

@implementation PBSingOpusBuilder
@synthesize resultPbsingOpus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsingOpus = [[PBSingOpus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsingOpus;
}
- (PBSingOpusBuilder*) clear {
  self.resultPbsingOpus = [[PBSingOpus alloc] init];
  return self;
}
- (PBSingOpusBuilder*) clone {
  return [PBSingOpus builderWithPrototype:resultPbsingOpus];
}
- (PBSingOpus*) defaultInstance {
  return [PBSingOpus defaultInstance];
}
- (PBSingOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSingOpus*) buildPartial {
  PBSingOpus* returnMe = resultPbsingOpus;
  self.resultPbsingOpus = nil;
  return returnMe;
}
- (PBSingOpusBuilder*) mergeFrom:(PBSingOpus*) other {
  if (other == [PBSingOpus defaultInstance]) {
    return self;
  }
  if (other.hasSong) {
    [self mergeSong:other.song];
  }
  if (other.hasVoiceType) {
    [self setVoiceType:other.voiceType];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasPitch) {
    [self setPitch:other.pitch];
  }
  if (other.hasFormant) {
    [self setFormant:other.formant];
  }
  if (other.hasVoiceDuration) {
    [self setVoiceDuration:other.voiceDuration];
  }
  if (other.hasLocalNativeDataUrl) {
    [self setLocalNativeDataUrl:other.localNativeDataUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSingOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSingOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSongBuilder* subBuilder = [PBSong builder];
        if (self.hasSong) {
          [subBuilder mergeFrom:self.song];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSong:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        PBVoiceType value = (PBVoiceType)[input readEnum];
        if (PBVoiceTypeIsValidValue(value)) {
          [self setVoiceType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 29: {
        [self setDuration:[input readFloat]];
        break;
      }
      case 37: {
        [self setPitch:[input readFloat]];
        break;
      }
      case 45: {
        [self setFormant:[input readFloat]];
        break;
      }
      case 165: {
        [self setVoiceDuration:[input readFloat]];
        break;
      }
      case 802: {
        [self setLocalNativeDataUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSong {
  return resultPbsingOpus.hasSong;
}
- (PBSong*) song {
  return resultPbsingOpus.song;
}
- (PBSingOpusBuilder*) setSong:(PBSong*) value {
  resultPbsingOpus.hasSong = YES;
  resultPbsingOpus.song = value;
  return self;
}
- (PBSingOpusBuilder*) setSongBuilder:(PBSongBuilder*) builderForValue {
  return [self setSong:[builderForValue build]];
}
- (PBSingOpusBuilder*) mergeSong:(PBSong*) value {
  if (resultPbsingOpus.hasSong &&
      resultPbsingOpus.song != [PBSong defaultInstance]) {
    resultPbsingOpus.song =
      [[[PBSong builderWithPrototype:resultPbsingOpus.song] mergeFrom:value] buildPartial];
  } else {
    resultPbsingOpus.song = value;
  }
  resultPbsingOpus.hasSong = YES;
  return self;
}
- (PBSingOpusBuilder*) clearSong {
  resultPbsingOpus.hasSong = NO;
  resultPbsingOpus.song = [PBSong defaultInstance];
  return self;
}
- (BOOL) hasVoiceType {
  return resultPbsingOpus.hasVoiceType;
}
- (PBVoiceType) voiceType {
  return resultPbsingOpus.voiceType;
}
- (PBSingOpusBuilder*) setVoiceType:(PBVoiceType) value {
  resultPbsingOpus.hasVoiceType = YES;
  resultPbsingOpus.voiceType = value;
  return self;
}
- (PBSingOpusBuilder*) clearVoiceType {
  resultPbsingOpus.hasVoiceType = NO;
  resultPbsingOpus.voiceType = PBVoiceTypeVoiceTypeOrigin;
  return self;
}
- (BOOL) hasDuration {
  return resultPbsingOpus.hasDuration;
}
- (Float32) duration {
  return resultPbsingOpus.duration;
}
- (PBSingOpusBuilder*) setDuration:(Float32) value {
  resultPbsingOpus.hasDuration = YES;
  resultPbsingOpus.duration = value;
  return self;
}
- (PBSingOpusBuilder*) clearDuration {
  resultPbsingOpus.hasDuration = NO;
  resultPbsingOpus.duration = 1;
  return self;
}
- (BOOL) hasPitch {
  return resultPbsingOpus.hasPitch;
}
- (Float32) pitch {
  return resultPbsingOpus.pitch;
}
- (PBSingOpusBuilder*) setPitch:(Float32) value {
  resultPbsingOpus.hasPitch = YES;
  resultPbsingOpus.pitch = value;
  return self;
}
- (PBSingOpusBuilder*) clearPitch {
  resultPbsingOpus.hasPitch = NO;
  resultPbsingOpus.pitch = 1;
  return self;
}
- (BOOL) hasFormant {
  return resultPbsingOpus.hasFormant;
}
- (Float32) formant {
  return resultPbsingOpus.formant;
}
- (PBSingOpusBuilder*) setFormant:(Float32) value {
  resultPbsingOpus.hasFormant = YES;
  resultPbsingOpus.formant = value;
  return self;
}
- (PBSingOpusBuilder*) clearFormant {
  resultPbsingOpus.hasFormant = NO;
  resultPbsingOpus.formant = 1;
  return self;
}
- (BOOL) hasVoiceDuration {
  return resultPbsingOpus.hasVoiceDuration;
}
- (Float32) voiceDuration {
  return resultPbsingOpus.voiceDuration;
}
- (PBSingOpusBuilder*) setVoiceDuration:(Float32) value {
  resultPbsingOpus.hasVoiceDuration = YES;
  resultPbsingOpus.voiceDuration = value;
  return self;
}
- (PBSingOpusBuilder*) clearVoiceDuration {
  resultPbsingOpus.hasVoiceDuration = NO;
  resultPbsingOpus.voiceDuration = 0;
  return self;
}
- (BOOL) hasLocalNativeDataUrl {
  return resultPbsingOpus.hasLocalNativeDataUrl;
}
- (NSString*) localNativeDataUrl {
  return resultPbsingOpus.localNativeDataUrl;
}
- (PBSingOpusBuilder*) setLocalNativeDataUrl:(NSString*) value {
  resultPbsingOpus.hasLocalNativeDataUrl = YES;
  resultPbsingOpus.localNativeDataUrl = value;
  return self;
}
- (PBSingOpusBuilder*) clearLocalNativeDataUrl {
  resultPbsingOpus.hasLocalNativeDataUrl = NO;
  resultPbsingOpus.localNativeDataUrl = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
