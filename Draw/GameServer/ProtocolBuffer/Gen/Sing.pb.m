// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Sing.pb.h"

@implementation SingRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SingRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBVoiceTypeIsValidValue(PBVoiceType value) {
  switch (value) {
    case PBVoiceTypeVoiceTypeOrigin:
    case PBVoiceTypeVoiceTypeTomCat:
    case PBVoiceTypeVoiceTypeDuck:
    case PBVoiceTypeVoiceTypeMale:
    case PBVoiceTypeVoiceTypeChild:
    case PBVoiceTypeVoiceTypeFemale:
      return YES;
    default:
      return NO;
  }
}
@interface PBSongCategory ()
@property (retain) NSString* name;
@property (retain) NSMutableArray* mutableSongTagsList;
@end

@implementation PBSongCategory

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize mutableSongTagsList;
- (void) dealloc {
  self.name = nil;
  self.mutableSongTagsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static PBSongCategory* defaultPBSongCategoryInstance = nil;
+ (void) initialize {
  if (self == [PBSongCategory class]) {
    defaultPBSongCategoryInstance = [[PBSongCategory alloc] init];
  }
}
+ (PBSongCategory*) defaultInstance {
  return defaultPBSongCategoryInstance;
}
- (PBSongCategory*) defaultInstance {
  return defaultPBSongCategoryInstance;
}
- (NSArray*) songTagsList {
  return mutableSongTagsList;
}
- (NSString*) songTagsAtIndex:(int32_t) index {
  id value = [mutableSongTagsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  for (NSString* element in self.mutableSongTagsList) {
    [output writeString:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableSongTagsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableSongTagsList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSongCategory*) parseFromData:(NSData*) data {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromData:data] build];
}
+ (PBSongCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategory*) parseFromInputStream:(NSInputStream*) input {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromInputStream:input] build];
}
+ (PBSongCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromCodedInputStream:input] build];
}
+ (PBSongCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategory*)[[[PBSongCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategory_Builder*) builder {
  return [[[PBSongCategory_Builder alloc] init] autorelease];
}
+ (PBSongCategory_Builder*) builderWithPrototype:(PBSongCategory*) prototype {
  return [[PBSongCategory builder] mergeFrom:prototype];
}
- (PBSongCategory_Builder*) builder {
  return [PBSongCategory builder];
}
@end

@interface PBSongCategory_Builder()
@property (retain) PBSongCategory* result;
@end

@implementation PBSongCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSongCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSongCategory_Builder*) clear {
  self.result = [[[PBSongCategory alloc] init] autorelease];
  return self;
}
- (PBSongCategory_Builder*) clone {
  return [PBSongCategory builderWithPrototype:result];
}
- (PBSongCategory*) defaultInstance {
  return [PBSongCategory defaultInstance];
}
- (PBSongCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSongCategory*) buildPartial {
  PBSongCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSongCategory_Builder*) mergeFrom:(PBSongCategory*) other {
  if (other == [PBSongCategory defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.mutableSongTagsList.count > 0) {
    if (result.mutableSongTagsList == nil) {
      result.mutableSongTagsList = [NSMutableArray array];
    }
    [result.mutableSongTagsList addObjectsFromArray:other.mutableSongTagsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self addSongTags:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBSongCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBSongCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (NSArray*) songTagsList {
  if (result.mutableSongTagsList == nil) {
    return [NSArray array];
  }
  return result.mutableSongTagsList;
}
- (NSString*) songTagsAtIndex:(int32_t) index {
  return [result songTagsAtIndex:index];
}
- (PBSongCategory_Builder*) replaceSongTagsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableSongTagsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBSongCategory_Builder*) addSongTags:(NSString*) value {
  if (result.mutableSongTagsList == nil) {
    result.mutableSongTagsList = [NSMutableArray array];
  }
  [result.mutableSongTagsList addObject:value];
  return self;
}
- (PBSongCategory_Builder*) addAllSongTags:(NSArray*) values {
  if (result.mutableSongTagsList == nil) {
    result.mutableSongTagsList = [NSMutableArray array];
  }
  [result.mutableSongTagsList addObjectsFromArray:values];
  return self;
}
- (PBSongCategory_Builder*) clearSongTagsList {
  result.mutableSongTagsList = nil;
  return self;
}
@end

@interface PBSongCategoryList ()
@property (retain) NSMutableArray* mutableCategorysList;
@end

@implementation PBSongCategoryList

@synthesize mutableCategorysList;
- (void) dealloc {
  self.mutableCategorysList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBSongCategoryList* defaultPBSongCategoryListInstance = nil;
+ (void) initialize {
  if (self == [PBSongCategoryList class]) {
    defaultPBSongCategoryListInstance = [[PBSongCategoryList alloc] init];
  }
}
+ (PBSongCategoryList*) defaultInstance {
  return defaultPBSongCategoryListInstance;
}
- (PBSongCategoryList*) defaultInstance {
  return defaultPBSongCategoryListInstance;
}
- (NSArray*) categorysList {
  return mutableCategorysList;
}
- (PBSongCategory*) categorysAtIndex:(int32_t) index {
  id value = [mutableCategorysList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBSongCategory* element in self.categorysList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBSongCategory* element in self.categorysList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBSongCategory* element in self.categorysList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSongCategoryList*) parseFromData:(NSData*) data {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromData:data] build];
}
+ (PBSongCategoryList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryList*) parseFromInputStream:(NSInputStream*) input {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromInputStream:input] build];
}
+ (PBSongCategoryList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromCodedInputStream:input] build];
}
+ (PBSongCategoryList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongCategoryList*)[[[PBSongCategoryList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongCategoryList_Builder*) builder {
  return [[[PBSongCategoryList_Builder alloc] init] autorelease];
}
+ (PBSongCategoryList_Builder*) builderWithPrototype:(PBSongCategoryList*) prototype {
  return [[PBSongCategoryList builder] mergeFrom:prototype];
}
- (PBSongCategoryList_Builder*) builder {
  return [PBSongCategoryList builder];
}
@end

@interface PBSongCategoryList_Builder()
@property (retain) PBSongCategoryList* result;
@end

@implementation PBSongCategoryList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSongCategoryList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSongCategoryList_Builder*) clear {
  self.result = [[[PBSongCategoryList alloc] init] autorelease];
  return self;
}
- (PBSongCategoryList_Builder*) clone {
  return [PBSongCategoryList builderWithPrototype:result];
}
- (PBSongCategoryList*) defaultInstance {
  return [PBSongCategoryList defaultInstance];
}
- (PBSongCategoryList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSongCategoryList*) buildPartial {
  PBSongCategoryList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSongCategoryList_Builder*) mergeFrom:(PBSongCategoryList*) other {
  if (other == [PBSongCategoryList defaultInstance]) {
    return self;
  }
  if (other.mutableCategorysList.count > 0) {
    if (result.mutableCategorysList == nil) {
      result.mutableCategorysList = [NSMutableArray array];
    }
    [result.mutableCategorysList addObjectsFromArray:other.mutableCategorysList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongCategoryList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongCategoryList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSongCategory_Builder* subBuilder = [PBSongCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCategorys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) categorysList {
  if (result.mutableCategorysList == nil) { return [NSArray array]; }
  return result.mutableCategorysList;
}
- (PBSongCategory*) categorysAtIndex:(int32_t) index {
  return [result categorysAtIndex:index];
}
- (PBSongCategoryList_Builder*) replaceCategorysAtIndex:(int32_t) index with:(PBSongCategory*) value {
  [result.mutableCategorysList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBSongCategoryList_Builder*) addAllCategorys:(NSArray*) values {
  if (result.mutableCategorysList == nil) {
    result.mutableCategorysList = [NSMutableArray array];
  }
  [result.mutableCategorysList addObjectsFromArray:values];
  return self;
}
- (PBSongCategoryList_Builder*) clearCategorysList {
  result.mutableCategorysList = nil;
  return self;
}
- (PBSongCategoryList_Builder*) addCategorys:(PBSongCategory*) value {
  if (result.mutableCategorysList == nil) {
    result.mutableCategorysList = [NSMutableArray array];
  }
  [result.mutableCategorysList addObject:value];
  return self;
}
@end

@interface PBSong ()
@property (retain) NSString* songId;
@property (retain) NSString* name;
@property (retain) NSString* author;
@property (retain) NSString* lyric;
@property (retain) NSMutableArray* mutableTagList;
@end

@implementation PBSong

- (BOOL) hasSongId {
  return !!hasSongId_;
}
- (void) setHasSongId:(BOOL) value {
  hasSongId_ = !!value;
}
@synthesize songId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) value {
  hasAuthor_ = !!value;
}
@synthesize author;
- (BOOL) hasLyric {
  return !!hasLyric_;
}
- (void) setHasLyric:(BOOL) value {
  hasLyric_ = !!value;
}
@synthesize lyric;
@synthesize mutableTagList;
- (void) dealloc {
  self.songId = nil;
  self.name = nil;
  self.author = nil;
  self.lyric = nil;
  self.mutableTagList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.songId = @"";
    self.name = @"";
    self.author = @"";
    self.lyric = @"";
  }
  return self;
}
static PBSong* defaultPBSongInstance = nil;
+ (void) initialize {
  if (self == [PBSong class]) {
    defaultPBSongInstance = [[PBSong alloc] init];
  }
}
+ (PBSong*) defaultInstance {
  return defaultPBSongInstance;
}
- (PBSong*) defaultInstance {
  return defaultPBSongInstance;
}
- (NSArray*) tagList {
  return mutableTagList;
}
- (NSString*) tagAtIndex:(int32_t) index {
  id value = [mutableTagList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasSongId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSongId) {
    [output writeString:1 value:self.songId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasAuthor) {
    [output writeString:3 value:self.author];
  }
  if (self.hasLyric) {
    [output writeString:4 value:self.lyric];
  }
  for (NSString* element in self.mutableTagList) {
    [output writeString:20 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSongId) {
    size += computeStringSize(1, self.songId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasAuthor) {
    size += computeStringSize(3, self.author);
  }
  if (self.hasLyric) {
    size += computeStringSize(4, self.lyric);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableTagList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 2 * self.mutableTagList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSong*) parseFromData:(NSData*) data {
  return (PBSong*)[[[PBSong builder] mergeFromData:data] build];
}
+ (PBSong*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSong*)[[[PBSong builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSong*) parseFromInputStream:(NSInputStream*) input {
  return (PBSong*)[[[PBSong builder] mergeFromInputStream:input] build];
}
+ (PBSong*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSong*)[[[PBSong builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSong*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSong*)[[[PBSong builder] mergeFromCodedInputStream:input] build];
}
+ (PBSong*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSong*)[[[PBSong builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSong_Builder*) builder {
  return [[[PBSong_Builder alloc] init] autorelease];
}
+ (PBSong_Builder*) builderWithPrototype:(PBSong*) prototype {
  return [[PBSong builder] mergeFrom:prototype];
}
- (PBSong_Builder*) builder {
  return [PBSong builder];
}
@end

@interface PBSong_Builder()
@property (retain) PBSong* result;
@end

@implementation PBSong_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSong alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSong_Builder*) clear {
  self.result = [[[PBSong alloc] init] autorelease];
  return self;
}
- (PBSong_Builder*) clone {
  return [PBSong builderWithPrototype:result];
}
- (PBSong*) defaultInstance {
  return [PBSong defaultInstance];
}
- (PBSong*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSong*) buildPartial {
  PBSong* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSong_Builder*) mergeFrom:(PBSong*) other {
  if (other == [PBSong defaultInstance]) {
    return self;
  }
  if (other.hasSongId) {
    [self setSongId:other.songId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  if (other.hasLyric) {
    [self setLyric:other.lyric];
  }
  if (other.mutableTagList.count > 0) {
    if (result.mutableTagList == nil) {
      result.mutableTagList = [NSMutableArray array];
    }
    [result.mutableTagList addObjectsFromArray:other.mutableTagList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSong_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSong_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSongId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setAuthor:[input readString]];
        break;
      }
      case 34: {
        [self setLyric:[input readString]];
        break;
      }
      case 162: {
        [self addTag:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSongId {
  return result.hasSongId;
}
- (NSString*) songId {
  return result.songId;
}
- (PBSong_Builder*) setSongId:(NSString*) value {
  result.hasSongId = YES;
  result.songId = value;
  return self;
}
- (PBSong_Builder*) clearSongId {
  result.hasSongId = NO;
  result.songId = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBSong_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBSong_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAuthor {
  return result.hasAuthor;
}
- (NSString*) author {
  return result.author;
}
- (PBSong_Builder*) setAuthor:(NSString*) value {
  result.hasAuthor = YES;
  result.author = value;
  return self;
}
- (PBSong_Builder*) clearAuthor {
  result.hasAuthor = NO;
  result.author = @"";
  return self;
}
- (BOOL) hasLyric {
  return result.hasLyric;
}
- (NSString*) lyric {
  return result.lyric;
}
- (PBSong_Builder*) setLyric:(NSString*) value {
  result.hasLyric = YES;
  result.lyric = value;
  return self;
}
- (PBSong_Builder*) clearLyric {
  result.hasLyric = NO;
  result.lyric = @"";
  return self;
}
- (NSArray*) tagList {
  if (result.mutableTagList == nil) {
    return [NSArray array];
  }
  return result.mutableTagList;
}
- (NSString*) tagAtIndex:(int32_t) index {
  return [result tagAtIndex:index];
}
- (PBSong_Builder*) replaceTagAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableTagList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBSong_Builder*) addTag:(NSString*) value {
  if (result.mutableTagList == nil) {
    result.mutableTagList = [NSMutableArray array];
  }
  [result.mutableTagList addObject:value];
  return self;
}
- (PBSong_Builder*) addAllTag:(NSArray*) values {
  if (result.mutableTagList == nil) {
    result.mutableTagList = [NSMutableArray array];
  }
  [result.mutableTagList addObjectsFromArray:values];
  return self;
}
- (PBSong_Builder*) clearTagList {
  result.mutableTagList = nil;
  return self;
}
@end

@interface PBSongList ()
@property (retain) NSMutableArray* mutableSongsList;
@end

@implementation PBSongList

@synthesize mutableSongsList;
- (void) dealloc {
  self.mutableSongsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBSongList* defaultPBSongListInstance = nil;
+ (void) initialize {
  if (self == [PBSongList class]) {
    defaultPBSongListInstance = [[PBSongList alloc] init];
  }
}
+ (PBSongList*) defaultInstance {
  return defaultPBSongListInstance;
}
- (PBSongList*) defaultInstance {
  return defaultPBSongListInstance;
}
- (NSArray*) songsList {
  return mutableSongsList;
}
- (PBSong*) songsAtIndex:(int32_t) index {
  id value = [mutableSongsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBSong* element in self.songsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBSong* element in self.songsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBSong* element in self.songsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSongList*) parseFromData:(NSData*) data {
  return (PBSongList*)[[[PBSongList builder] mergeFromData:data] build];
}
+ (PBSongList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongList*)[[[PBSongList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSongList*) parseFromInputStream:(NSInputStream*) input {
  return (PBSongList*)[[[PBSongList builder] mergeFromInputStream:input] build];
}
+ (PBSongList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongList*)[[[PBSongList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSongList*)[[[PBSongList builder] mergeFromCodedInputStream:input] build];
}
+ (PBSongList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSongList*)[[[PBSongList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSongList_Builder*) builder {
  return [[[PBSongList_Builder alloc] init] autorelease];
}
+ (PBSongList_Builder*) builderWithPrototype:(PBSongList*) prototype {
  return [[PBSongList builder] mergeFrom:prototype];
}
- (PBSongList_Builder*) builder {
  return [PBSongList builder];
}
@end

@interface PBSongList_Builder()
@property (retain) PBSongList* result;
@end

@implementation PBSongList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSongList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSongList_Builder*) clear {
  self.result = [[[PBSongList alloc] init] autorelease];
  return self;
}
- (PBSongList_Builder*) clone {
  return [PBSongList builderWithPrototype:result];
}
- (PBSongList*) defaultInstance {
  return [PBSongList defaultInstance];
}
- (PBSongList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSongList*) buildPartial {
  PBSongList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSongList_Builder*) mergeFrom:(PBSongList*) other {
  if (other == [PBSongList defaultInstance]) {
    return self;
  }
  if (other.mutableSongsList.count > 0) {
    if (result.mutableSongsList == nil) {
      result.mutableSongsList = [NSMutableArray array];
    }
    [result.mutableSongsList addObjectsFromArray:other.mutableSongsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSongList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSongList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSong_Builder* subBuilder = [PBSong builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSongs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) songsList {
  if (result.mutableSongsList == nil) { return [NSArray array]; }
  return result.mutableSongsList;
}
- (PBSong*) songsAtIndex:(int32_t) index {
  return [result songsAtIndex:index];
}
- (PBSongList_Builder*) replaceSongsAtIndex:(int32_t) index with:(PBSong*) value {
  [result.mutableSongsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBSongList_Builder*) addAllSongs:(NSArray*) values {
  if (result.mutableSongsList == nil) {
    result.mutableSongsList = [NSMutableArray array];
  }
  [result.mutableSongsList addObjectsFromArray:values];
  return self;
}
- (PBSongList_Builder*) clearSongsList {
  result.mutableSongsList = nil;
  return self;
}
- (PBSongList_Builder*) addSongs:(PBSong*) value {
  if (result.mutableSongsList == nil) {
    result.mutableSongsList = [NSMutableArray array];
  }
  [result.mutableSongsList addObject:value];
  return self;
}
@end

@interface PBSingOpus ()
@property (retain) PBSong* song;
@property PBVoiceType voiceType;
@property Float32 duration;
@property Float32 pitch;
@property Float32 formant;
@property (retain) NSString* localNativeDataUrl;
@end

@implementation PBSingOpus

- (BOOL) hasSong {
  return !!hasSong_;
}
- (void) setHasSong:(BOOL) value {
  hasSong_ = !!value;
}
@synthesize song;
- (BOOL) hasVoiceType {
  return !!hasVoiceType_;
}
- (void) setHasVoiceType:(BOOL) value {
  hasVoiceType_ = !!value;
}
@synthesize voiceType;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (BOOL) hasPitch {
  return !!hasPitch_;
}
- (void) setHasPitch:(BOOL) value {
  hasPitch_ = !!value;
}
@synthesize pitch;
- (BOOL) hasFormant {
  return !!hasFormant_;
}
- (void) setHasFormant:(BOOL) value {
  hasFormant_ = !!value;
}
@synthesize formant;
- (BOOL) hasLocalNativeDataUrl {
  return !!hasLocalNativeDataUrl_;
}
- (void) setHasLocalNativeDataUrl:(BOOL) value {
  hasLocalNativeDataUrl_ = !!value;
}
@synthesize localNativeDataUrl;
- (void) dealloc {
  self.song = nil;
  self.localNativeDataUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.song = [PBSong defaultInstance];
    self.voiceType = PBVoiceTypeVoiceTypeOrigin;
    self.duration = 1;
    self.pitch = 1;
    self.formant = 1;
    self.localNativeDataUrl = @"";
  }
  return self;
}
static PBSingOpus* defaultPBSingOpusInstance = nil;
+ (void) initialize {
  if (self == [PBSingOpus class]) {
    defaultPBSingOpusInstance = [[PBSingOpus alloc] init];
  }
}
+ (PBSingOpus*) defaultInstance {
  return defaultPBSingOpusInstance;
}
- (PBSingOpus*) defaultInstance {
  return defaultPBSingOpusInstance;
}
- (BOOL) isInitialized {
  if (self.hasSong) {
    if (!self.song.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSong) {
    [output writeMessage:1 value:self.song];
  }
  if (self.hasVoiceType) {
    [output writeEnum:2 value:self.voiceType];
  }
  if (self.hasDuration) {
    [output writeFloat:3 value:self.duration];
  }
  if (self.hasPitch) {
    [output writeFloat:4 value:self.pitch];
  }
  if (self.hasFormant) {
    [output writeFloat:5 value:self.formant];
  }
  if (self.hasLocalNativeDataUrl) {
    [output writeString:100 value:self.localNativeDataUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSong) {
    size += computeMessageSize(1, self.song);
  }
  if (self.hasVoiceType) {
    size += computeEnumSize(2, self.voiceType);
  }
  if (self.hasDuration) {
    size += computeFloatSize(3, self.duration);
  }
  if (self.hasPitch) {
    size += computeFloatSize(4, self.pitch);
  }
  if (self.hasFormant) {
    size += computeFloatSize(5, self.formant);
  }
  if (self.hasLocalNativeDataUrl) {
    size += computeStringSize(100, self.localNativeDataUrl);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSingOpus*) parseFromData:(NSData*) data {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromData:data] build];
}
+ (PBSingOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSingOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromInputStream:input] build];
}
+ (PBSingOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSingOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBSingOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSingOpus*)[[[PBSingOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSingOpus_Builder*) builder {
  return [[[PBSingOpus_Builder alloc] init] autorelease];
}
+ (PBSingOpus_Builder*) builderWithPrototype:(PBSingOpus*) prototype {
  return [[PBSingOpus builder] mergeFrom:prototype];
}
- (PBSingOpus_Builder*) builder {
  return [PBSingOpus builder];
}
@end

@interface PBSingOpus_Builder()
@property (retain) PBSingOpus* result;
@end

@implementation PBSingOpus_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSingOpus alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSingOpus_Builder*) clear {
  self.result = [[[PBSingOpus alloc] init] autorelease];
  return self;
}
- (PBSingOpus_Builder*) clone {
  return [PBSingOpus builderWithPrototype:result];
}
- (PBSingOpus*) defaultInstance {
  return [PBSingOpus defaultInstance];
}
- (PBSingOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSingOpus*) buildPartial {
  PBSingOpus* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSingOpus_Builder*) mergeFrom:(PBSingOpus*) other {
  if (other == [PBSingOpus defaultInstance]) {
    return self;
  }
  if (other.hasSong) {
    [self mergeSong:other.song];
  }
  if (other.hasVoiceType) {
    [self setVoiceType:other.voiceType];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasPitch) {
    [self setPitch:other.pitch];
  }
  if (other.hasFormant) {
    [self setFormant:other.formant];
  }
  if (other.hasLocalNativeDataUrl) {
    [self setLocalNativeDataUrl:other.localNativeDataUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSingOpus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSingOpus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSong_Builder* subBuilder = [PBSong builder];
        if (self.hasSong) {
          [subBuilder mergeFrom:self.song];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSong:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (PBVoiceTypeIsValidValue(value)) {
          [self setVoiceType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 29: {
        [self setDuration:[input readFloat]];
        break;
      }
      case 37: {
        [self setPitch:[input readFloat]];
        break;
      }
      case 45: {
        [self setFormant:[input readFloat]];
        break;
      }
      case 802: {
        [self setLocalNativeDataUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSong {
  return result.hasSong;
}
- (PBSong*) song {
  return result.song;
}
- (PBSingOpus_Builder*) setSong:(PBSong*) value {
  result.hasSong = YES;
  result.song = value;
  return self;
}
- (PBSingOpus_Builder*) setSongBuilder:(PBSong_Builder*) builderForValue {
  return [self setSong:[builderForValue build]];
}
- (PBSingOpus_Builder*) mergeSong:(PBSong*) value {
  if (result.hasSong &&
      result.song != [PBSong defaultInstance]) {
    result.song =
      [[[PBSong builderWithPrototype:result.song] mergeFrom:value] buildPartial];
  } else {
    result.song = value;
  }
  result.hasSong = YES;
  return self;
}
- (PBSingOpus_Builder*) clearSong {
  result.hasSong = NO;
  result.song = [PBSong defaultInstance];
  return self;
}
- (BOOL) hasVoiceType {
  return result.hasVoiceType;
}
- (PBVoiceType) voiceType {
  return result.voiceType;
}
- (PBSingOpus_Builder*) setVoiceType:(PBVoiceType) value {
  result.hasVoiceType = YES;
  result.voiceType = value;
  return self;
}
- (PBSingOpus_Builder*) clearVoiceType {
  result.hasVoiceType = NO;
  result.voiceType = PBVoiceTypeVoiceTypeOrigin;
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (Float32) duration {
  return result.duration;
}
- (PBSingOpus_Builder*) setDuration:(Float32) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (PBSingOpus_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 1;
  return self;
}
- (BOOL) hasPitch {
  return result.hasPitch;
}
- (Float32) pitch {
  return result.pitch;
}
- (PBSingOpus_Builder*) setPitch:(Float32) value {
  result.hasPitch = YES;
  result.pitch = value;
  return self;
}
- (PBSingOpus_Builder*) clearPitch {
  result.hasPitch = NO;
  result.pitch = 1;
  return self;
}
- (BOOL) hasFormant {
  return result.hasFormant;
}
- (Float32) formant {
  return result.formant;
}
- (PBSingOpus_Builder*) setFormant:(Float32) value {
  result.hasFormant = YES;
  result.formant = value;
  return self;
}
- (PBSingOpus_Builder*) clearFormant {
  result.hasFormant = NO;
  result.formant = 1;
  return self;
}
- (BOOL) hasLocalNativeDataUrl {
  return result.hasLocalNativeDataUrl;
}
- (NSString*) localNativeDataUrl {
  return result.localNativeDataUrl;
}
- (PBSingOpus_Builder*) setLocalNativeDataUrl:(NSString*) value {
  result.hasLocalNativeDataUrl = YES;
  result.localNativeDataUrl = value;
  return self;
}
- (PBSingOpus_Builder*) clearLocalNativeDataUrl {
  result.hasLocalNativeDataUrl = NO;
  result.localNativeDataUrl = @"";
  return self;
}
@end

