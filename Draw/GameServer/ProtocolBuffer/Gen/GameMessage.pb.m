// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameMessage.pb.h"

@implementation GameMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface JoinGameRequest ()
@property (retain) NSString* userId;
@property (retain) NSString* gameId;
@property int32_t autoNew;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property (retain) NSMutableArray* mutableExcludeSessionIdList;
@property int64_t sessionToBeChange;
@property BOOL gender;
@property BOOL isRobot;
@property int32_t targetSessionId;
@property int32_t guessDifficultLevel;
@property (retain) NSString* roomId;
@property (retain) NSString* roomName;
@end

@implementation JoinGameRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasAutoNew {
  return !!hasAutoNew_;
}
- (void) setHasAutoNew:(BOOL) value {
  hasAutoNew_ = !!value;
}
@synthesize autoNew;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
@synthesize mutableExcludeSessionIdList;
- (BOOL) hasSessionToBeChange {
  return !!hasSessionToBeChange_;
}
- (void) setHasSessionToBeChange:(BOOL) value {
  hasSessionToBeChange_ = !!value;
}
@synthesize sessionToBeChange;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
- (BOOL) hasIsRobot {
  return !!hasIsRobot_;
}
- (void) setHasIsRobot:(BOOL) value {
  hasIsRobot_ = !!value;
}
- (BOOL) isRobot {
  return !!isRobot_;
}
- (void) setIsRobot:(BOOL) value {
  isRobot_ = !!value;
}
- (BOOL) hasTargetSessionId {
  return !!hasTargetSessionId_;
}
- (void) setHasTargetSessionId:(BOOL) value {
  hasTargetSessionId_ = !!value;
}
@synthesize targetSessionId;
- (BOOL) hasGuessDifficultLevel {
  return !!hasGuessDifficultLevel_;
}
- (void) setHasGuessDifficultLevel:(BOOL) value {
  hasGuessDifficultLevel_ = !!value;
}
@synthesize guessDifficultLevel;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) value {
  hasRoomName_ = !!value;
}
@synthesize roomName;
- (void) dealloc {
  self.userId = nil;
  self.gameId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.mutableExcludeSessionIdList = nil;
  self.roomId = nil;
  self.roomName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.gameId = @"";
    self.autoNew = 0;
    self.nickName = @"";
    self.avatar = @"";
    self.sessionToBeChange = 0L;
    self.gender = NO;
    self.isRobot = NO;
    self.targetSessionId = 0;
    self.guessDifficultLevel = 0;
    self.roomId = @"";
    self.roomName = @"";
  }
  return self;
}
static JoinGameRequest* defaultJoinGameRequestInstance = nil;
+ (void) initialize {
  if (self == [JoinGameRequest class]) {
    defaultJoinGameRequestInstance = [[JoinGameRequest alloc] init];
  }
}
+ (JoinGameRequest*) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (JoinGameRequest*) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (NSArray*) excludeSessionIdList {
  return mutableExcludeSessionIdList;
}
- (int64_t) excludeSessionIdAtIndex:(int32_t) index {
  id value = [mutableExcludeSessionIdList objectAtIndex:index];
  return [value longLongValue];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasAutoNew) {
    [output writeInt32:3 value:self.autoNew];
  }
  if (self.hasNickName) {
    [output writeString:4 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:5 value:self.avatar];
  }
  for (NSNumber* value in self.mutableExcludeSessionIdList) {
    [output writeInt64:6 value:[value longLongValue]];
  }
  if (self.hasSessionToBeChange) {
    [output writeInt64:7 value:self.sessionToBeChange];
  }
  if (self.hasGender) {
    [output writeBool:8 value:self.gender];
  }
  if (self.hasIsRobot) {
    [output writeBool:9 value:self.isRobot];
  }
  if (self.hasTargetSessionId) {
    [output writeInt32:10 value:self.targetSessionId];
  }
  if (self.hasGuessDifficultLevel) {
    [output writeInt32:11 value:self.guessDifficultLevel];
  }
  if (self.hasRoomId) {
    [output writeString:12 value:self.roomId];
  }
  if (self.hasRoomName) {
    [output writeString:13 value:self.roomName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasGameId) {
    size += computeStringSize(2, self.gameId);
  }
  if (self.hasAutoNew) {
    size += computeInt32Size(3, self.autoNew);
  }
  if (self.hasNickName) {
    size += computeStringSize(4, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(5, self.avatar);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableExcludeSessionIdList) {
      dataSize += computeInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    size += 1 * self.mutableExcludeSessionIdList.count;
  }
  if (self.hasSessionToBeChange) {
    size += computeInt64Size(7, self.sessionToBeChange);
  }
  if (self.hasGender) {
    size += computeBoolSize(8, self.gender);
  }
  if (self.hasIsRobot) {
    size += computeBoolSize(9, self.isRobot);
  }
  if (self.hasTargetSessionId) {
    size += computeInt32Size(10, self.targetSessionId);
  }
  if (self.hasGuessDifficultLevel) {
    size += computeInt32Size(11, self.guessDifficultLevel);
  }
  if (self.hasRoomId) {
    size += computeStringSize(12, self.roomId);
  }
  if (self.hasRoomName) {
    size += computeStringSize(13, self.roomName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (JoinGameRequest*) parseFromData:(NSData*) data {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data] build];
}
+ (JoinGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest_Builder*) builder {
  return [[[JoinGameRequest_Builder alloc] init] autorelease];
}
+ (JoinGameRequest_Builder*) builderWithPrototype:(JoinGameRequest*) prototype {
  return [[JoinGameRequest builder] mergeFrom:prototype];
}
- (JoinGameRequest_Builder*) builder {
  return [JoinGameRequest builder];
}
@end

@interface JoinGameRequest_Builder()
@property (retain) JoinGameRequest* result;
@end

@implementation JoinGameRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[JoinGameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (JoinGameRequest_Builder*) clear {
  self.result = [[[JoinGameRequest alloc] init] autorelease];
  return self;
}
- (JoinGameRequest_Builder*) clone {
  return [JoinGameRequest builderWithPrototype:result];
}
- (JoinGameRequest*) defaultInstance {
  return [JoinGameRequest defaultInstance];
}
- (JoinGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameRequest*) buildPartial {
  JoinGameRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (JoinGameRequest_Builder*) mergeFrom:(JoinGameRequest*) other {
  if (other == [JoinGameRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasAutoNew) {
    [self setAutoNew:other.autoNew];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.mutableExcludeSessionIdList.count > 0) {
    if (result.mutableExcludeSessionIdList == nil) {
      result.mutableExcludeSessionIdList = [NSMutableArray array];
    }
    [result.mutableExcludeSessionIdList addObjectsFromArray:other.mutableExcludeSessionIdList];
  }
  if (other.hasSessionToBeChange) {
    [self setSessionToBeChange:other.sessionToBeChange];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasIsRobot) {
    [self setIsRobot:other.isRobot];
  }
  if (other.hasTargetSessionId) {
    [self setTargetSessionId:other.targetSessionId];
  }
  if (other.hasGuessDifficultLevel) {
    [self setGuessDifficultLevel:other.guessDifficultLevel];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        [self setAutoNew:[input readInt32]];
        break;
      }
      case 34: {
        [self setNickName:[input readString]];
        break;
      }
      case 42: {
        [self setAvatar:[input readString]];
        break;
      }
      case 48: {
        [self addExcludeSessionId:[input readInt64]];
        break;
      }
      case 56: {
        [self setSessionToBeChange:[input readInt64]];
        break;
      }
      case 64: {
        [self setGender:[input readBool]];
        break;
      }
      case 72: {
        [self setIsRobot:[input readBool]];
        break;
      }
      case 80: {
        [self setTargetSessionId:[input readInt32]];
        break;
      }
      case 88: {
        [self setGuessDifficultLevel:[input readInt32]];
        break;
      }
      case 98: {
        [self setRoomId:[input readString]];
        break;
      }
      case 106: {
        [self setRoomName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (JoinGameRequest_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (JoinGameRequest_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasAutoNew {
  return result.hasAutoNew;
}
- (int32_t) autoNew {
  return result.autoNew;
}
- (JoinGameRequest_Builder*) setAutoNew:(int32_t) value {
  result.hasAutoNew = YES;
  result.autoNew = value;
  return self;
}
- (JoinGameRequest_Builder*) clearAutoNew {
  result.hasAutoNew = NO;
  result.autoNew = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (JoinGameRequest_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (JoinGameRequest_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (JoinGameRequest_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (JoinGameRequest_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (NSArray*) excludeSessionIdList {
  if (result.mutableExcludeSessionIdList == nil) {
    return [NSArray array];
  }
  return result.mutableExcludeSessionIdList;
}
- (int64_t) excludeSessionIdAtIndex:(int32_t) index {
  return [result excludeSessionIdAtIndex:index];
}
- (JoinGameRequest_Builder*) replaceExcludeSessionIdAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableExcludeSessionIdList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (JoinGameRequest_Builder*) addExcludeSessionId:(int64_t) value {
  if (result.mutableExcludeSessionIdList == nil) {
    result.mutableExcludeSessionIdList = [NSMutableArray array];
  }
  [result.mutableExcludeSessionIdList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (JoinGameRequest_Builder*) addAllExcludeSessionId:(NSArray*) values {
  if (result.mutableExcludeSessionIdList == nil) {
    result.mutableExcludeSessionIdList = [NSMutableArray array];
  }
  [result.mutableExcludeSessionIdList addObjectsFromArray:values];
  return self;
}
- (JoinGameRequest_Builder*) clearExcludeSessionIdList {
  result.mutableExcludeSessionIdList = nil;
  return self;
}
- (BOOL) hasSessionToBeChange {
  return result.hasSessionToBeChange;
}
- (int64_t) sessionToBeChange {
  return result.sessionToBeChange;
}
- (JoinGameRequest_Builder*) setSessionToBeChange:(int64_t) value {
  result.hasSessionToBeChange = YES;
  result.sessionToBeChange = value;
  return self;
}
- (JoinGameRequest_Builder*) clearSessionToBeChange {
  result.hasSessionToBeChange = NO;
  result.sessionToBeChange = 0L;
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (JoinGameRequest_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (BOOL) hasIsRobot {
  return result.hasIsRobot;
}
- (BOOL) isRobot {
  return result.isRobot;
}
- (JoinGameRequest_Builder*) setIsRobot:(BOOL) value {
  result.hasIsRobot = YES;
  result.isRobot = value;
  return self;
}
- (JoinGameRequest_Builder*) clearIsRobot {
  result.hasIsRobot = NO;
  result.isRobot = NO;
  return self;
}
- (BOOL) hasTargetSessionId {
  return result.hasTargetSessionId;
}
- (int32_t) targetSessionId {
  return result.targetSessionId;
}
- (JoinGameRequest_Builder*) setTargetSessionId:(int32_t) value {
  result.hasTargetSessionId = YES;
  result.targetSessionId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearTargetSessionId {
  result.hasTargetSessionId = NO;
  result.targetSessionId = 0;
  return self;
}
- (BOOL) hasGuessDifficultLevel {
  return result.hasGuessDifficultLevel;
}
- (int32_t) guessDifficultLevel {
  return result.guessDifficultLevel;
}
- (JoinGameRequest_Builder*) setGuessDifficultLevel:(int32_t) value {
  result.hasGuessDifficultLevel = YES;
  result.guessDifficultLevel = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGuessDifficultLevel {
  result.hasGuessDifficultLevel = NO;
  result.guessDifficultLevel = 0;
  return self;
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (NSString*) roomId {
  return result.roomId;
}
- (JoinGameRequest_Builder*) setRoomId:(NSString*) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = @"";
  return self;
}
- (BOOL) hasRoomName {
  return result.hasRoomName;
}
- (NSString*) roomName {
  return result.roomName;
}
- (JoinGameRequest_Builder*) setRoomName:(NSString*) value {
  result.hasRoomName = YES;
  result.roomName = value;
  return self;
}
- (JoinGameRequest_Builder*) clearRoomName {
  result.hasRoomName = NO;
  result.roomName = @"";
  return self;
}
@end

@interface JoinGameResponse ()
@property (retain) PBGameSession* gameSession;
@end

@implementation JoinGameResponse

- (BOOL) hasGameSession {
  return !!hasGameSession_;
}
- (void) setHasGameSession:(BOOL) value {
  hasGameSession_ = !!value;
}
@synthesize gameSession;
- (void) dealloc {
  self.gameSession = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameSession = [PBGameSession defaultInstance];
  }
  return self;
}
static JoinGameResponse* defaultJoinGameResponseInstance = nil;
+ (void) initialize {
  if (self == [JoinGameResponse class]) {
    defaultJoinGameResponseInstance = [[JoinGameResponse alloc] init];
  }
}
+ (JoinGameResponse*) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (JoinGameResponse*) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameSession) {
    return NO;
  }
  if (!self.gameSession.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSession) {
    [output writeMessage:1 value:self.gameSession];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameSession) {
    size += computeMessageSize(1, self.gameSession);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (JoinGameResponse*) parseFromData:(NSData*) data {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data] build];
}
+ (JoinGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse_Builder*) builder {
  return [[[JoinGameResponse_Builder alloc] init] autorelease];
}
+ (JoinGameResponse_Builder*) builderWithPrototype:(JoinGameResponse*) prototype {
  return [[JoinGameResponse builder] mergeFrom:prototype];
}
- (JoinGameResponse_Builder*) builder {
  return [JoinGameResponse builder];
}
@end

@interface JoinGameResponse_Builder()
@property (retain) JoinGameResponse* result;
@end

@implementation JoinGameResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[JoinGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (JoinGameResponse_Builder*) clear {
  self.result = [[[JoinGameResponse alloc] init] autorelease];
  return self;
}
- (JoinGameResponse_Builder*) clone {
  return [JoinGameResponse builderWithPrototype:result];
}
- (JoinGameResponse*) defaultInstance {
  return [JoinGameResponse defaultInstance];
}
- (JoinGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameResponse*) buildPartial {
  JoinGameResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (JoinGameResponse_Builder*) mergeFrom:(JoinGameResponse*) other {
  if (other == [JoinGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasGameSession) {
    [self mergeGameSession:other.gameSession];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        if (self.hasGameSession) {
          [subBuilder mergeFrom:self.gameSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSession:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSession {
  return result.hasGameSession;
}
- (PBGameSession*) gameSession {
  return result.gameSession;
}
- (JoinGameResponse_Builder*) setGameSession:(PBGameSession*) value {
  result.hasGameSession = YES;
  result.gameSession = value;
  return self;
}
- (JoinGameResponse_Builder*) setGameSessionBuilder:(PBGameSession_Builder*) builderForValue {
  return [self setGameSession:[builderForValue build]];
}
- (JoinGameResponse_Builder*) mergeGameSession:(PBGameSession*) value {
  if (result.hasGameSession &&
      result.gameSession != [PBGameSession defaultInstance]) {
    result.gameSession =
      [[[PBGameSession builderWithPrototype:result.gameSession] mergeFrom:value] buildPartial];
  } else {
    result.gameSession = value;
  }
  result.hasGameSession = YES;
  return self;
}
- (JoinGameResponse_Builder*) clearGameSession {
  result.hasGameSession = NO;
  result.gameSession = [PBGameSession defaultInstance];
  return self;
}
@end

@interface StartGameRequest ()
@end

@implementation StartGameRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static StartGameRequest* defaultStartGameRequestInstance = nil;
+ (void) initialize {
  if (self == [StartGameRequest class]) {
    defaultStartGameRequestInstance = [[StartGameRequest alloc] init];
  }
}
+ (StartGameRequest*) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (StartGameRequest*) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartGameRequest*) parseFromData:(NSData*) data {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data] build];
}
+ (StartGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest_Builder*) builder {
  return [[[StartGameRequest_Builder alloc] init] autorelease];
}
+ (StartGameRequest_Builder*) builderWithPrototype:(StartGameRequest*) prototype {
  return [[StartGameRequest builder] mergeFrom:prototype];
}
- (StartGameRequest_Builder*) builder {
  return [StartGameRequest builder];
}
@end

@interface StartGameRequest_Builder()
@property (retain) StartGameRequest* result;
@end

@implementation StartGameRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartGameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartGameRequest_Builder*) clear {
  self.result = [[[StartGameRequest alloc] init] autorelease];
  return self;
}
- (StartGameRequest_Builder*) clone {
  return [StartGameRequest builderWithPrototype:result];
}
- (StartGameRequest*) defaultInstance {
  return [StartGameRequest defaultInstance];
}
- (StartGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameRequest*) buildPartial {
  StartGameRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartGameRequest_Builder*) mergeFrom:(StartGameRequest*) other {
  if (other == [StartGameRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface StartGameResponse ()
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@end

@implementation StartGameResponse

- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (void) dealloc {
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
  }
  return self;
}
static StartGameResponse* defaultStartGameResponseInstance = nil;
+ (void) initialize {
  if (self == [StartGameResponse class]) {
    defaultStartGameResponseInstance = [[StartGameResponse alloc] init];
  }
}
+ (StartGameResponse*) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (StartGameResponse*) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(6, self.nextPlayUserId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartGameResponse*) parseFromData:(NSData*) data {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data] build];
}
+ (StartGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse_Builder*) builder {
  return [[[StartGameResponse_Builder alloc] init] autorelease];
}
+ (StartGameResponse_Builder*) builderWithPrototype:(StartGameResponse*) prototype {
  return [[StartGameResponse builder] mergeFrom:prototype];
}
- (StartGameResponse_Builder*) builder {
  return [StartGameResponse builder];
}
@end

@interface StartGameResponse_Builder()
@property (retain) StartGameResponse* result;
@end

@implementation StartGameResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartGameResponse_Builder*) clear {
  self.result = [[[StartGameResponse alloc] init] autorelease];
  return self;
}
- (StartGameResponse_Builder*) clone {
  return [StartGameResponse builderWithPrototype:result];
}
- (StartGameResponse*) defaultInstance {
  return [StartGameResponse defaultInstance];
}
- (StartGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameResponse*) buildPartial {
  StartGameResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartGameResponse_Builder*) mergeFrom:(StartGameResponse*) other {
  if (other == [StartGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (StartGameResponse_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (StartGameResponse_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (StartGameResponse_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (StartGameResponse_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
@end

@interface GameChatRequest ()
@property (retain) NSMutableArray* mutableToUserIdList;
@property (retain) NSString* content;
@end

@implementation GameChatRequest

@synthesize mutableToUserIdList;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (void) dealloc {
  self.mutableToUserIdList = nil;
  self.content = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.content = @"";
  }
  return self;
}
static GameChatRequest* defaultGameChatRequestInstance = nil;
+ (void) initialize {
  if (self == [GameChatRequest class]) {
    defaultGameChatRequestInstance = [[GameChatRequest alloc] init];
  }
}
+ (GameChatRequest*) defaultInstance {
  return defaultGameChatRequestInstance;
}
- (GameChatRequest*) defaultInstance {
  return defaultGameChatRequestInstance;
}
- (NSArray*) toUserIdList {
  return mutableToUserIdList;
}
- (NSString*) toUserIdAtIndex:(int32_t) index {
  id value = [mutableToUserIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutableToUserIdList) {
    [output writeString:1 value:element];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableToUserIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableToUserIdList.count;
  }
  if (self.hasContent) {
    size += computeStringSize(2, self.content);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameChatRequest*) parseFromData:(NSData*) data {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromData:data] build];
}
+ (GameChatRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromInputStream:input] build];
}
+ (GameChatRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest_Builder*) builder {
  return [[[GameChatRequest_Builder alloc] init] autorelease];
}
+ (GameChatRequest_Builder*) builderWithPrototype:(GameChatRequest*) prototype {
  return [[GameChatRequest builder] mergeFrom:prototype];
}
- (GameChatRequest_Builder*) builder {
  return [GameChatRequest builder];
}
@end

@interface GameChatRequest_Builder()
@property (retain) GameChatRequest* result;
@end

@implementation GameChatRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameChatRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameChatRequest_Builder*) clear {
  self.result = [[[GameChatRequest alloc] init] autorelease];
  return self;
}
- (GameChatRequest_Builder*) clone {
  return [GameChatRequest builderWithPrototype:result];
}
- (GameChatRequest*) defaultInstance {
  return [GameChatRequest defaultInstance];
}
- (GameChatRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameChatRequest*) buildPartial {
  GameChatRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameChatRequest_Builder*) mergeFrom:(GameChatRequest*) other {
  if (other == [GameChatRequest defaultInstance]) {
    return self;
  }
  if (other.mutableToUserIdList.count > 0) {
    if (result.mutableToUserIdList == nil) {
      result.mutableToUserIdList = [NSMutableArray array];
    }
    [result.mutableToUserIdList addObjectsFromArray:other.mutableToUserIdList];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameChatRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameChatRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addToUserId:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) toUserIdList {
  if (result.mutableToUserIdList == nil) {
    return [NSArray array];
  }
  return result.mutableToUserIdList;
}
- (NSString*) toUserIdAtIndex:(int32_t) index {
  return [result toUserIdAtIndex:index];
}
- (GameChatRequest_Builder*) replaceToUserIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableToUserIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GameChatRequest_Builder*) addToUserId:(NSString*) value {
  if (result.mutableToUserIdList == nil) {
    result.mutableToUserIdList = [NSMutableArray array];
  }
  [result.mutableToUserIdList addObject:value];
  return self;
}
- (GameChatRequest_Builder*) addAllToUserId:(NSArray*) values {
  if (result.mutableToUserIdList == nil) {
    result.mutableToUserIdList = [NSMutableArray array];
  }
  [result.mutableToUserIdList addObjectsFromArray:values];
  return self;
}
- (GameChatRequest_Builder*) clearToUserIdList {
  result.mutableToUserIdList = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (GameChatRequest_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (GameChatRequest_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
@end

@interface GameChatResponse ()
@end

@implementation GameChatResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameChatResponse* defaultGameChatResponseInstance = nil;
+ (void) initialize {
  if (self == [GameChatResponse class]) {
    defaultGameChatResponseInstance = [[GameChatResponse alloc] init];
  }
}
+ (GameChatResponse*) defaultInstance {
  return defaultGameChatResponseInstance;
}
- (GameChatResponse*) defaultInstance {
  return defaultGameChatResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameChatResponse*) parseFromData:(NSData*) data {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromData:data] build];
}
+ (GameChatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromInputStream:input] build];
}
+ (GameChatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse_Builder*) builder {
  return [[[GameChatResponse_Builder alloc] init] autorelease];
}
+ (GameChatResponse_Builder*) builderWithPrototype:(GameChatResponse*) prototype {
  return [[GameChatResponse builder] mergeFrom:prototype];
}
- (GameChatResponse_Builder*) builder {
  return [GameChatResponse builder];
}
@end

@interface GameChatResponse_Builder()
@property (retain) GameChatResponse* result;
@end

@implementation GameChatResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameChatResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameChatResponse_Builder*) clear {
  self.result = [[[GameChatResponse alloc] init] autorelease];
  return self;
}
- (GameChatResponse_Builder*) clone {
  return [GameChatResponse builderWithPrototype:result];
}
- (GameChatResponse*) defaultInstance {
  return [GameChatResponse defaultInstance];
}
- (GameChatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameChatResponse*) buildPartial {
  GameChatResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameChatResponse_Builder*) mergeFrom:(GameChatResponse*) other {
  if (other == [GameChatResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameChatResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameChatResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface SendDrawDataRequest ()
@property (retain) NSString* word;
@property int32_t level;
@property int32_t language;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@property (retain) NSString* guessWord;
@property (retain) NSString* guessUserId;
@property BOOL guessCorrect;
@end

@implementation SendDrawDataRequest

- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasGuessWord {
  return !!hasGuessWord_;
}
- (void) setHasGuessWord:(BOOL) value {
  hasGuessWord_ = !!value;
}
@synthesize guessWord;
- (BOOL) hasGuessUserId {
  return !!hasGuessUserId_;
}
- (void) setHasGuessUserId:(BOOL) value {
  hasGuessUserId_ = !!value;
}
@synthesize guessUserId;
- (BOOL) hasGuessCorrect {
  return !!hasGuessCorrect_;
}
- (void) setHasGuessCorrect:(BOOL) value {
  hasGuessCorrect_ = !!value;
}
- (BOOL) guessCorrect {
  return !!guessCorrect_;
}
- (void) setGuessCorrect:(BOOL) value {
  guessCorrect_ = !!value;
}
- (void) dealloc {
  self.word = nil;
  self.mutablePointsList = nil;
  self.guessWord = nil;
  self.guessUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.width = 0;
    self.color = 0;
    self.guessWord = @"";
    self.guessUserId = @"";
    self.guessCorrect = NO;
  }
  return self;
}
static SendDrawDataRequest* defaultSendDrawDataRequestInstance = nil;
+ (void) initialize {
  if (self == [SendDrawDataRequest class]) {
    defaultSendDrawDataRequestInstance = [[SendDrawDataRequest alloc] init];
  }
}
+ (SendDrawDataRequest*) defaultInstance {
  return defaultSendDrawDataRequestInstance;
}
- (SendDrawDataRequest*) defaultInstance {
  return defaultSendDrawDataRequestInstance;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:10];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWord) {
    [output writeString:10 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:11 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:12 value:self.language];
  }
  if (self.hasWidth) {
    [output writeFloat:22 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:23 value:self.color];
  }
  if (self.hasGuessWord) {
    [output writeString:41 value:self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output writeString:42 value:self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output writeBool:43 value:self.guessCorrect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWord) {
    size += computeStringSize(10, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(11, self.level);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(12, self.language);
  }
  if (self.hasWidth) {
    size += computeFloatSize(22, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(23, self.color);
  }
  if (self.hasGuessWord) {
    size += computeStringSize(41, self.guessWord);
  }
  if (self.hasGuessUserId) {
    size += computeStringSize(42, self.guessUserId);
  }
  if (self.hasGuessCorrect) {
    size += computeBoolSize(43, self.guessCorrect);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SendDrawDataRequest*) parseFromData:(NSData*) data {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromData:data] build];
}
+ (SendDrawDataRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromInputStream:input] build];
}
+ (SendDrawDataRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SendDrawDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest_Builder*) builder {
  return [[[SendDrawDataRequest_Builder alloc] init] autorelease];
}
+ (SendDrawDataRequest_Builder*) builderWithPrototype:(SendDrawDataRequest*) prototype {
  return [[SendDrawDataRequest builder] mergeFrom:prototype];
}
- (SendDrawDataRequest_Builder*) builder {
  return [SendDrawDataRequest builder];
}
@end

@interface SendDrawDataRequest_Builder()
@property (retain) SendDrawDataRequest* result;
@end

@implementation SendDrawDataRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SendDrawDataRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SendDrawDataRequest_Builder*) clear {
  self.result = [[[SendDrawDataRequest alloc] init] autorelease];
  return self;
}
- (SendDrawDataRequest_Builder*) clone {
  return [SendDrawDataRequest builderWithPrototype:result];
}
- (SendDrawDataRequest*) defaultInstance {
  return [SendDrawDataRequest defaultInstance];
}
- (SendDrawDataRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDrawDataRequest*) buildPartial {
  SendDrawDataRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SendDrawDataRequest_Builder*) mergeFrom:(SendDrawDataRequest*) other {
  if (other == [SendDrawDataRequest defaultInstance]) {
    return self;
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasGuessWord) {
    [self setGuessWord:other.guessWord];
  }
  if (other.hasGuessUserId) {
    [self setGuessUserId:other.guessUserId];
  }
  if (other.hasGuessCorrect) {
    [self setGuessCorrect:other.guessCorrect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDrawDataRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDrawDataRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 82: {
        [self setWord:[input readString]];
        break;
      }
      case 88: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 96: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 181: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 184: {
        [self setColor:[input readInt32]];
        break;
      }
      case 330: {
        [self setGuessWord:[input readString]];
        break;
      }
      case 338: {
        [self setGuessUserId:[input readString]];
        break;
      }
      case 344: {
        [self setGuessCorrect:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (SendDrawDataRequest_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (SendDrawDataRequest_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (SendDrawDataRequest_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (SendDrawDataRequest_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (SendDrawDataRequest_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (SendDrawDataRequest_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (SendDrawDataRequest_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (SendDrawDataRequest_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (SendDrawDataRequest_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
- (BOOL) hasGuessWord {
  return result.hasGuessWord;
}
- (NSString*) guessWord {
  return result.guessWord;
}
- (SendDrawDataRequest_Builder*) setGuessWord:(NSString*) value {
  result.hasGuessWord = YES;
  result.guessWord = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearGuessWord {
  result.hasGuessWord = NO;
  result.guessWord = @"";
  return self;
}
- (BOOL) hasGuessUserId {
  return result.hasGuessUserId;
}
- (NSString*) guessUserId {
  return result.guessUserId;
}
- (SendDrawDataRequest_Builder*) setGuessUserId:(NSString*) value {
  result.hasGuessUserId = YES;
  result.guessUserId = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearGuessUserId {
  result.hasGuessUserId = NO;
  result.guessUserId = @"";
  return self;
}
- (BOOL) hasGuessCorrect {
  return result.hasGuessCorrect;
}
- (BOOL) guessCorrect {
  return result.guessCorrect;
}
- (SendDrawDataRequest_Builder*) setGuessCorrect:(BOOL) value {
  result.hasGuessCorrect = YES;
  result.guessCorrect = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearGuessCorrect {
  result.hasGuessCorrect = NO;
  result.guessCorrect = NO;
  return self;
}
@end

@interface SendDrawDataResponse ()
@end

@implementation SendDrawDataResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static SendDrawDataResponse* defaultSendDrawDataResponseInstance = nil;
+ (void) initialize {
  if (self == [SendDrawDataResponse class]) {
    defaultSendDrawDataResponseInstance = [[SendDrawDataResponse alloc] init];
  }
}
+ (SendDrawDataResponse*) defaultInstance {
  return defaultSendDrawDataResponseInstance;
}
- (SendDrawDataResponse*) defaultInstance {
  return defaultSendDrawDataResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SendDrawDataResponse*) parseFromData:(NSData*) data {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromData:data] build];
}
+ (SendDrawDataResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse*) parseFromInputStream:(NSInputStream*) input {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromInputStream:input] build];
}
+ (SendDrawDataResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SendDrawDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse_Builder*) builder {
  return [[[SendDrawDataResponse_Builder alloc] init] autorelease];
}
+ (SendDrawDataResponse_Builder*) builderWithPrototype:(SendDrawDataResponse*) prototype {
  return [[SendDrawDataResponse builder] mergeFrom:prototype];
}
- (SendDrawDataResponse_Builder*) builder {
  return [SendDrawDataResponse builder];
}
@end

@interface SendDrawDataResponse_Builder()
@property (retain) SendDrawDataResponse* result;
@end

@implementation SendDrawDataResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SendDrawDataResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SendDrawDataResponse_Builder*) clear {
  self.result = [[[SendDrawDataResponse alloc] init] autorelease];
  return self;
}
- (SendDrawDataResponse_Builder*) clone {
  return [SendDrawDataResponse builderWithPrototype:result];
}
- (SendDrawDataResponse*) defaultInstance {
  return [SendDrawDataResponse defaultInstance];
}
- (SendDrawDataResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDrawDataResponse*) buildPartial {
  SendDrawDataResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SendDrawDataResponse_Builder*) mergeFrom:(SendDrawDataResponse*) other {
  if (other == [SendDrawDataResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDrawDataResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDrawDataResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GeneralNotification ()
@property (retain) NSString* sessionHost;
@property int32_t sessionStatus;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@property (retain) NSString* newUserId;
@property (retain) NSString* quitUserId;
@property (retain) NSString* nickName;
@property (retain) NSString* userAvatar;
@property BOOL userGender;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@property (retain) NSString* word;
@property int32_t level;
@property int32_t round;
@property int32_t language;
@property (retain) NSString* guessWord;
@property (retain) NSString* guessUserId;
@property BOOL guessCorrect;
@property int32_t guessGainCoins;
@property (retain) NSMutableArray* mutableChatToUserIdList;
@property (retain) NSString* chatContent;
@property int32_t turnGainCoins;
@end

@implementation GeneralNotification

- (BOOL) hasSessionHost {
  return !!hasSessionHost_;
}
- (void) setHasSessionHost:(BOOL) value {
  hasSessionHost_ = !!value;
}
@synthesize sessionHost;
- (BOOL) hasSessionStatus {
  return !!hasSessionStatus_;
}
- (void) setHasSessionStatus:(BOOL) value {
  hasSessionStatus_ = !!value;
}
@synthesize sessionStatus;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasNewUserId {
  return !!hasNewUserId_;
}
- (void) setHasNewUserId:(BOOL) value {
  hasNewUserId_ = !!value;
}
@synthesize newUserId;
- (BOOL) hasQuitUserId {
  return !!hasQuitUserId_;
}
- (void) setHasQuitUserId:(BOOL) value {
  hasQuitUserId_ = !!value;
}
@synthesize quitUserId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasUserAvatar {
  return !!hasUserAvatar_;
}
- (void) setHasUserAvatar:(BOOL) value {
  hasUserAvatar_ = !!value;
}
@synthesize userAvatar;
- (BOOL) hasUserGender {
  return !!hasUserGender_;
}
- (void) setHasUserGender:(BOOL) value {
  hasUserGender_ = !!value;
}
- (BOOL) userGender {
  return !!userGender_;
}
- (void) setUserGender:(BOOL) value {
  userGender_ = !!value;
}
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) value {
  hasRound_ = !!value;
}
@synthesize round;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasGuessWord {
  return !!hasGuessWord_;
}
- (void) setHasGuessWord:(BOOL) value {
  hasGuessWord_ = !!value;
}
@synthesize guessWord;
- (BOOL) hasGuessUserId {
  return !!hasGuessUserId_;
}
- (void) setHasGuessUserId:(BOOL) value {
  hasGuessUserId_ = !!value;
}
@synthesize guessUserId;
- (BOOL) hasGuessCorrect {
  return !!hasGuessCorrect_;
}
- (void) setHasGuessCorrect:(BOOL) value {
  hasGuessCorrect_ = !!value;
}
- (BOOL) guessCorrect {
  return !!guessCorrect_;
}
- (void) setGuessCorrect:(BOOL) value {
  guessCorrect_ = !!value;
}
- (BOOL) hasGuessGainCoins {
  return !!hasGuessGainCoins_;
}
- (void) setHasGuessGainCoins:(BOOL) value {
  hasGuessGainCoins_ = !!value;
}
@synthesize guessGainCoins;
@synthesize mutableChatToUserIdList;
- (BOOL) hasChatContent {
  return !!hasChatContent_;
}
- (void) setHasChatContent:(BOOL) value {
  hasChatContent_ = !!value;
}
@synthesize chatContent;
- (BOOL) hasTurnGainCoins {
  return !!hasTurnGainCoins_;
}
- (void) setHasTurnGainCoins:(BOOL) value {
  hasTurnGainCoins_ = !!value;
}
@synthesize turnGainCoins;
- (void) dealloc {
  self.sessionHost = nil;
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  self.newUserId = nil;
  self.quitUserId = nil;
  self.nickName = nil;
  self.userAvatar = nil;
  self.mutablePointsList = nil;
  self.word = nil;
  self.guessWord = nil;
  self.guessUserId = nil;
  self.mutableChatToUserIdList = nil;
  self.chatContent = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionHost = @"";
    self.sessionStatus = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.newUserId = @"";
    self.quitUserId = @"";
    self.nickName = @"";
    self.userAvatar = @"";
    self.userGender = NO;
    self.width = 0;
    self.color = 0;
    self.word = @"";
    self.level = 0;
    self.round = 0;
    self.language = 0;
    self.guessWord = @"";
    self.guessUserId = @"";
    self.guessCorrect = NO;
    self.guessGainCoins = 0;
    self.chatContent = @"";
    self.turnGainCoins = 0;
  }
  return self;
}
static GeneralNotification* defaultGeneralNotificationInstance = nil;
+ (void) initialize {
  if (self == [GeneralNotification class]) {
    defaultGeneralNotificationInstance = [[GeneralNotification alloc] init];
  }
}
+ (GeneralNotification*) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (GeneralNotification*) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) chatToUserIdList {
  return mutableChatToUserIdList;
}
- (NSString*) chatToUserIdAtIndex:(int32_t) index {
  id value = [mutableChatToUserIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionHost) {
    [output writeString:3 value:self.sessionHost];
  }
  if (self.hasSessionStatus) {
    [output writeInt32:4 value:self.sessionStatus];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  if (self.hasNewUserId) {
    [output writeString:7 value:self.newUserId];
  }
  if (self.hasQuitUserId) {
    [output writeString:8 value:self.quitUserId];
  }
  if (self.hasNickName) {
    [output writeString:9 value:self.nickName];
  }
  if (self.hasUserAvatar) {
    [output writeString:10 value:self.userAvatar];
  }
  if (self.hasUserGender) {
    [output writeBool:11 value:self.userGender];
  }
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:170];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWidth) {
    [output writeFloat:22 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:23 value:self.color];
  }
  if (self.hasWord) {
    [output writeString:31 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:32 value:self.level];
  }
  if (self.hasRound) {
    [output writeInt32:33 value:self.round];
  }
  if (self.hasLanguage) {
    [output writeInt32:34 value:self.language];
  }
  if (self.hasGuessWord) {
    [output writeString:41 value:self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output writeString:42 value:self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output writeBool:43 value:self.guessCorrect];
  }
  if (self.hasGuessGainCoins) {
    [output writeInt32:44 value:self.guessGainCoins];
  }
  for (NSString* element in self.mutableChatToUserIdList) {
    [output writeString:51 value:element];
  }
  if (self.hasChatContent) {
    [output writeString:52 value:self.chatContent];
  }
  if (self.hasTurnGainCoins) {
    [output writeInt32:61 value:self.turnGainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionHost) {
    size += computeStringSize(3, self.sessionHost);
  }
  if (self.hasSessionStatus) {
    size += computeInt32Size(4, self.sessionStatus);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(6, self.nextPlayUserId);
  }
  if (self.hasNewUserId) {
    size += computeStringSize(7, self.newUserId);
  }
  if (self.hasQuitUserId) {
    size += computeStringSize(8, self.quitUserId);
  }
  if (self.hasNickName) {
    size += computeStringSize(9, self.nickName);
  }
  if (self.hasUserAvatar) {
    size += computeStringSize(10, self.userAvatar);
  }
  if (self.hasUserGender) {
    size += computeBoolSize(11, self.userGender);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 2;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size += computeFloatSize(22, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(23, self.color);
  }
  if (self.hasWord) {
    size += computeStringSize(31, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(32, self.level);
  }
  if (self.hasRound) {
    size += computeInt32Size(33, self.round);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(34, self.language);
  }
  if (self.hasGuessWord) {
    size += computeStringSize(41, self.guessWord);
  }
  if (self.hasGuessUserId) {
    size += computeStringSize(42, self.guessUserId);
  }
  if (self.hasGuessCorrect) {
    size += computeBoolSize(43, self.guessCorrect);
  }
  if (self.hasGuessGainCoins) {
    size += computeInt32Size(44, self.guessGainCoins);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableChatToUserIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 2 * self.mutableChatToUserIdList.count;
  }
  if (self.hasChatContent) {
    size += computeStringSize(52, self.chatContent);
  }
  if (self.hasTurnGainCoins) {
    size += computeInt32Size(61, self.turnGainCoins);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GeneralNotification*) parseFromData:(NSData*) data {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data] build];
}
+ (GeneralNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification_Builder*) builder {
  return [[[GeneralNotification_Builder alloc] init] autorelease];
}
+ (GeneralNotification_Builder*) builderWithPrototype:(GeneralNotification*) prototype {
  return [[GeneralNotification builder] mergeFrom:prototype];
}
- (GeneralNotification_Builder*) builder {
  return [GeneralNotification builder];
}
@end

@interface GeneralNotification_Builder()
@property (retain) GeneralNotification* result;
@end

@implementation GeneralNotification_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GeneralNotification alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GeneralNotification_Builder*) clear {
  self.result = [[[GeneralNotification alloc] init] autorelease];
  return self;
}
- (GeneralNotification_Builder*) clone {
  return [GeneralNotification builderWithPrototype:result];
}
- (GeneralNotification*) defaultInstance {
  return [GeneralNotification defaultInstance];
}
- (GeneralNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GeneralNotification*) buildPartial {
  GeneralNotification* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GeneralNotification_Builder*) mergeFrom:(GeneralNotification*) other {
  if (other == [GeneralNotification defaultInstance]) {
    return self;
  }
  if (other.hasSessionHost) {
    [self setSessionHost:other.sessionHost];
  }
  if (other.hasSessionStatus) {
    [self setSessionStatus:other.sessionStatus];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasNewUserId) {
    [self setNewUserId:other.newUserId];
  }
  if (other.hasQuitUserId) {
    [self setQuitUserId:other.quitUserId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasUserAvatar) {
    [self setUserAvatar:other.userAvatar];
  }
  if (other.hasUserGender) {
    [self setUserGender:other.userGender];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasGuessWord) {
    [self setGuessWord:other.guessWord];
  }
  if (other.hasGuessUserId) {
    [self setGuessUserId:other.guessUserId];
  }
  if (other.hasGuessCorrect) {
    [self setGuessCorrect:other.guessCorrect];
  }
  if (other.hasGuessGainCoins) {
    [self setGuessGainCoins:other.guessGainCoins];
  }
  if (other.mutableChatToUserIdList.count > 0) {
    if (result.mutableChatToUserIdList == nil) {
      result.mutableChatToUserIdList = [NSMutableArray array];
    }
    [result.mutableChatToUserIdList addObjectsFromArray:other.mutableChatToUserIdList];
  }
  if (other.hasChatContent) {
    [self setChatContent:other.chatContent];
  }
  if (other.hasTurnGainCoins) {
    [self setTurnGainCoins:other.turnGainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GeneralNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GeneralNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 26: {
        [self setSessionHost:[input readString]];
        break;
      }
      case 32: {
        [self setSessionStatus:[input readInt32]];
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 58: {
        [self setNewUserId:[input readString]];
        break;
      }
      case 66: {
        [self setQuitUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNickName:[input readString]];
        break;
      }
      case 82: {
        [self setUserAvatar:[input readString]];
        break;
      }
      case 88: {
        [self setUserGender:[input readBool]];
        break;
      }
      case 170: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 181: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 184: {
        [self setColor:[input readInt32]];
        break;
      }
      case 250: {
        [self setWord:[input readString]];
        break;
      }
      case 256: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 264: {
        [self setRound:[input readInt32]];
        break;
      }
      case 272: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 330: {
        [self setGuessWord:[input readString]];
        break;
      }
      case 338: {
        [self setGuessUserId:[input readString]];
        break;
      }
      case 344: {
        [self setGuessCorrect:[input readBool]];
        break;
      }
      case 352: {
        [self setGuessGainCoins:[input readInt32]];
        break;
      }
      case 410: {
        [self addChatToUserId:[input readString]];
        break;
      }
      case 418: {
        [self setChatContent:[input readString]];
        break;
      }
      case 488: {
        [self setTurnGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionHost {
  return result.hasSessionHost;
}
- (NSString*) sessionHost {
  return result.sessionHost;
}
- (GeneralNotification_Builder*) setSessionHost:(NSString*) value {
  result.hasSessionHost = YES;
  result.sessionHost = value;
  return self;
}
- (GeneralNotification_Builder*) clearSessionHost {
  result.hasSessionHost = NO;
  result.sessionHost = @"";
  return self;
}
- (BOOL) hasSessionStatus {
  return result.hasSessionStatus;
}
- (int32_t) sessionStatus {
  return result.sessionStatus;
}
- (GeneralNotification_Builder*) setSessionStatus:(int32_t) value {
  result.hasSessionStatus = YES;
  result.sessionStatus = value;
  return self;
}
- (GeneralNotification_Builder*) clearSessionStatus {
  result.hasSessionStatus = NO;
  result.sessionStatus = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (GeneralNotification_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (GeneralNotification_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasNewUserId {
  return result.hasNewUserId;
}
- (NSString*) newUserId {
  return result.newUserId;
}
- (GeneralNotification_Builder*) setNewUserId:(NSString*) value {
  result.hasNewUserId = YES;
  result.newUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearNewUserId {
  result.hasNewUserId = NO;
  result.newUserId = @"";
  return self;
}
- (BOOL) hasQuitUserId {
  return result.hasQuitUserId;
}
- (NSString*) quitUserId {
  return result.quitUserId;
}
- (GeneralNotification_Builder*) setQuitUserId:(NSString*) value {
  result.hasQuitUserId = YES;
  result.quitUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearQuitUserId {
  result.hasQuitUserId = NO;
  result.quitUserId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (GeneralNotification_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (GeneralNotification_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasUserAvatar {
  return result.hasUserAvatar;
}
- (NSString*) userAvatar {
  return result.userAvatar;
}
- (GeneralNotification_Builder*) setUserAvatar:(NSString*) value {
  result.hasUserAvatar = YES;
  result.userAvatar = value;
  return self;
}
- (GeneralNotification_Builder*) clearUserAvatar {
  result.hasUserAvatar = NO;
  result.userAvatar = @"";
  return self;
}
- (BOOL) hasUserGender {
  return result.hasUserGender;
}
- (BOOL) userGender {
  return result.userGender;
}
- (GeneralNotification_Builder*) setUserGender:(BOOL) value {
  result.hasUserGender = YES;
  result.userGender = value;
  return self;
}
- (GeneralNotification_Builder*) clearUserGender {
  result.hasUserGender = NO;
  result.userGender = NO;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (GeneralNotification_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (GeneralNotification_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (GeneralNotification_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (GeneralNotification_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (GeneralNotification_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (GeneralNotification_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (GeneralNotification_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (GeneralNotification_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (GeneralNotification_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (GeneralNotification_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (GeneralNotification_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (GeneralNotification_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasRound {
  return result.hasRound;
}
- (int32_t) round {
  return result.round;
}
- (GeneralNotification_Builder*) setRound:(int32_t) value {
  result.hasRound = YES;
  result.round = value;
  return self;
}
- (GeneralNotification_Builder*) clearRound {
  result.hasRound = NO;
  result.round = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (GeneralNotification_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (GeneralNotification_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (BOOL) hasGuessWord {
  return result.hasGuessWord;
}
- (NSString*) guessWord {
  return result.guessWord;
}
- (GeneralNotification_Builder*) setGuessWord:(NSString*) value {
  result.hasGuessWord = YES;
  result.guessWord = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessWord {
  result.hasGuessWord = NO;
  result.guessWord = @"";
  return self;
}
- (BOOL) hasGuessUserId {
  return result.hasGuessUserId;
}
- (NSString*) guessUserId {
  return result.guessUserId;
}
- (GeneralNotification_Builder*) setGuessUserId:(NSString*) value {
  result.hasGuessUserId = YES;
  result.guessUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessUserId {
  result.hasGuessUserId = NO;
  result.guessUserId = @"";
  return self;
}
- (BOOL) hasGuessCorrect {
  return result.hasGuessCorrect;
}
- (BOOL) guessCorrect {
  return result.guessCorrect;
}
- (GeneralNotification_Builder*) setGuessCorrect:(BOOL) value {
  result.hasGuessCorrect = YES;
  result.guessCorrect = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessCorrect {
  result.hasGuessCorrect = NO;
  result.guessCorrect = NO;
  return self;
}
- (BOOL) hasGuessGainCoins {
  return result.hasGuessGainCoins;
}
- (int32_t) guessGainCoins {
  return result.guessGainCoins;
}
- (GeneralNotification_Builder*) setGuessGainCoins:(int32_t) value {
  result.hasGuessGainCoins = YES;
  result.guessGainCoins = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessGainCoins {
  result.hasGuessGainCoins = NO;
  result.guessGainCoins = 0;
  return self;
}
- (NSArray*) chatToUserIdList {
  if (result.mutableChatToUserIdList == nil) {
    return [NSArray array];
  }
  return result.mutableChatToUserIdList;
}
- (NSString*) chatToUserIdAtIndex:(int32_t) index {
  return [result chatToUserIdAtIndex:index];
}
- (GeneralNotification_Builder*) replaceChatToUserIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableChatToUserIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GeneralNotification_Builder*) addChatToUserId:(NSString*) value {
  if (result.mutableChatToUserIdList == nil) {
    result.mutableChatToUserIdList = [NSMutableArray array];
  }
  [result.mutableChatToUserIdList addObject:value];
  return self;
}
- (GeneralNotification_Builder*) addAllChatToUserId:(NSArray*) values {
  if (result.mutableChatToUserIdList == nil) {
    result.mutableChatToUserIdList = [NSMutableArray array];
  }
  [result.mutableChatToUserIdList addObjectsFromArray:values];
  return self;
}
- (GeneralNotification_Builder*) clearChatToUserIdList {
  result.mutableChatToUserIdList = nil;
  return self;
}
- (BOOL) hasChatContent {
  return result.hasChatContent;
}
- (NSString*) chatContent {
  return result.chatContent;
}
- (GeneralNotification_Builder*) setChatContent:(NSString*) value {
  result.hasChatContent = YES;
  result.chatContent = value;
  return self;
}
- (GeneralNotification_Builder*) clearChatContent {
  result.hasChatContent = NO;
  result.chatContent = @"";
  return self;
}
- (BOOL) hasTurnGainCoins {
  return result.hasTurnGainCoins;
}
- (int32_t) turnGainCoins {
  return result.turnGainCoins;
}
- (GeneralNotification_Builder*) setTurnGainCoins:(int32_t) value {
  result.hasTurnGainCoins = YES;
  result.turnGainCoins = value;
  return self;
}
- (GeneralNotification_Builder*) clearTurnGainCoins {
  result.hasTurnGainCoins = NO;
  result.turnGainCoins = 0;
  return self;
}
@end

@interface GameMessage ()
@property GameCommandType command;
@property int32_t messageId;
@property GameResultCode resultCode;
@property (retain) NSString* userId;
@property int64_t sessionId;
@property int32_t round;
@property GameCompleteReason completeReason;
@property int32_t onlineUserCount;
@property (retain) NSString* toUserId;
@property (retain) JoinGameRequest* joinGameRequest;
@property (retain) JoinGameResponse* joinGameResponse;
@property (retain) StartGameRequest* startGameRequest;
@property (retain) StartGameResponse* startGameResponse;
@property (retain) SendDrawDataRequest* sendDrawDataRequest;
@property (retain) SendDrawDataResponse* sendDrawDataResponse;
@property (retain) GameChatRequest* chatRequest;
@property (retain) GameChatResponse* chatResponse;
@property (retain) GeneralNotification* notification;
@end

@implementation GameMessage

- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) value {
  hasCommand_ = !!value;
}
@synthesize command;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value {
  hasResultCode_ = !!value;
}
@synthesize resultCode;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) value {
  hasRound_ = !!value;
}
@synthesize round;
- (BOOL) hasCompleteReason {
  return !!hasCompleteReason_;
}
- (void) setHasCompleteReason:(BOOL) value {
  hasCompleteReason_ = !!value;
}
@synthesize completeReason;
- (BOOL) hasOnlineUserCount {
  return !!hasOnlineUserCount_;
}
- (void) setHasOnlineUserCount:(BOOL) value {
  hasOnlineUserCount_ = !!value;
}
@synthesize onlineUserCount;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value {
  hasToUserId_ = !!value;
}
@synthesize toUserId;
- (BOOL) hasJoinGameRequest {
  return !!hasJoinGameRequest_;
}
- (void) setHasJoinGameRequest:(BOOL) value {
  hasJoinGameRequest_ = !!value;
}
@synthesize joinGameRequest;
- (BOOL) hasJoinGameResponse {
  return !!hasJoinGameResponse_;
}
- (void) setHasJoinGameResponse:(BOOL) value {
  hasJoinGameResponse_ = !!value;
}
@synthesize joinGameResponse;
- (BOOL) hasStartGameRequest {
  return !!hasStartGameRequest_;
}
- (void) setHasStartGameRequest:(BOOL) value {
  hasStartGameRequest_ = !!value;
}
@synthesize startGameRequest;
- (BOOL) hasStartGameResponse {
  return !!hasStartGameResponse_;
}
- (void) setHasStartGameResponse:(BOOL) value {
  hasStartGameResponse_ = !!value;
}
@synthesize startGameResponse;
- (BOOL) hasSendDrawDataRequest {
  return !!hasSendDrawDataRequest_;
}
- (void) setHasSendDrawDataRequest:(BOOL) value {
  hasSendDrawDataRequest_ = !!value;
}
@synthesize sendDrawDataRequest;
- (BOOL) hasSendDrawDataResponse {
  return !!hasSendDrawDataResponse_;
}
- (void) setHasSendDrawDataResponse:(BOOL) value {
  hasSendDrawDataResponse_ = !!value;
}
@synthesize sendDrawDataResponse;
- (BOOL) hasChatRequest {
  return !!hasChatRequest_;
}
- (void) setHasChatRequest:(BOOL) value {
  hasChatRequest_ = !!value;
}
@synthesize chatRequest;
- (BOOL) hasChatResponse {
  return !!hasChatResponse_;
}
- (void) setHasChatResponse:(BOOL) value {
  hasChatResponse_ = !!value;
}
@synthesize chatResponse;
- (BOOL) hasNotification {
  return !!hasNotification_;
}
- (void) setHasNotification:(BOOL) value {
  hasNotification_ = !!value;
}
@synthesize notification;
- (void) dealloc {
  self.userId = nil;
  self.toUserId = nil;
  self.joinGameRequest = nil;
  self.joinGameResponse = nil;
  self.startGameRequest = nil;
  self.startGameResponse = nil;
  self.sendDrawDataRequest = nil;
  self.sendDrawDataResponse = nil;
  self.chatRequest = nil;
  self.chatResponse = nil;
  self.notification = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.command = GameCommandTypeJoinGameRequest;
    self.messageId = 0;
    self.resultCode = GameResultCodeSuccess;
    self.userId = @"";
    self.sessionId = 0L;
    self.round = 0;
    self.completeReason = GameCompleteReasonReasonNotComplete;
    self.onlineUserCount = 0;
    self.toUserId = @"";
    self.joinGameRequest = [JoinGameRequest defaultInstance];
    self.joinGameResponse = [JoinGameResponse defaultInstance];
    self.startGameRequest = [StartGameRequest defaultInstance];
    self.startGameResponse = [StartGameResponse defaultInstance];
    self.sendDrawDataRequest = [SendDrawDataRequest defaultInstance];
    self.sendDrawDataResponse = [SendDrawDataResponse defaultInstance];
    self.chatRequest = [GameChatRequest defaultInstance];
    self.chatResponse = [GameChatResponse defaultInstance];
    self.notification = [GeneralNotification defaultInstance];
  }
  return self;
}
static GameMessage* defaultGameMessageInstance = nil;
+ (void) initialize {
  if (self == [GameMessage class]) {
    defaultGameMessageInstance = [[GameMessage alloc] init];
  }
}
+ (GameMessage*) defaultInstance {
  return defaultGameMessageInstance;
}
- (GameMessage*) defaultInstance {
  return defaultGameMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCommand) {
    return NO;
  }
  if (!self.hasMessageId) {
    return NO;
  }
  if (self.hasJoinGameRequest) {
    if (!self.joinGameRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasJoinGameResponse) {
    if (!self.joinGameResponse.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommand) {
    [output writeEnum:1 value:self.command];
  }
  if (self.hasMessageId) {
    [output writeInt32:2 value:self.messageId];
  }
  if (self.hasResultCode) {
    [output writeEnum:3 value:self.resultCode];
  }
  if (self.hasUserId) {
    [output writeString:4 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeInt64:5 value:self.sessionId];
  }
  if (self.hasRound) {
    [output writeInt32:6 value:self.round];
  }
  if (self.hasCompleteReason) {
    [output writeEnum:7 value:self.completeReason];
  }
  if (self.hasOnlineUserCount) {
    [output writeInt32:8 value:self.onlineUserCount];
  }
  if (self.hasToUserId) {
    [output writeString:9 value:self.toUserId];
  }
  if (self.hasJoinGameRequest) {
    [output writeMessage:11 value:self.joinGameRequest];
  }
  if (self.hasJoinGameResponse) {
    [output writeMessage:12 value:self.joinGameResponse];
  }
  if (self.hasStartGameRequest) {
    [output writeMessage:13 value:self.startGameRequest];
  }
  if (self.hasStartGameResponse) {
    [output writeMessage:14 value:self.startGameResponse];
  }
  if (self.hasSendDrawDataRequest) {
    [output writeMessage:21 value:self.sendDrawDataRequest];
  }
  if (self.hasSendDrawDataResponse) {
    [output writeMessage:22 value:self.sendDrawDataResponse];
  }
  if (self.hasChatRequest) {
    [output writeMessage:23 value:self.chatRequest];
  }
  if (self.hasChatResponse) {
    [output writeMessage:24 value:self.chatResponse];
  }
  if (self.hasNotification) {
    [output writeMessage:51 value:self.notification];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommand) {
    size += computeEnumSize(1, self.command);
  }
  if (self.hasMessageId) {
    size += computeInt32Size(2, self.messageId);
  }
  if (self.hasResultCode) {
    size += computeEnumSize(3, self.resultCode);
  }
  if (self.hasUserId) {
    size += computeStringSize(4, self.userId);
  }
  if (self.hasSessionId) {
    size += computeInt64Size(5, self.sessionId);
  }
  if (self.hasRound) {
    size += computeInt32Size(6, self.round);
  }
  if (self.hasCompleteReason) {
    size += computeEnumSize(7, self.completeReason);
  }
  if (self.hasOnlineUserCount) {
    size += computeInt32Size(8, self.onlineUserCount);
  }
  if (self.hasToUserId) {
    size += computeStringSize(9, self.toUserId);
  }
  if (self.hasJoinGameRequest) {
    size += computeMessageSize(11, self.joinGameRequest);
  }
  if (self.hasJoinGameResponse) {
    size += computeMessageSize(12, self.joinGameResponse);
  }
  if (self.hasStartGameRequest) {
    size += computeMessageSize(13, self.startGameRequest);
  }
  if (self.hasStartGameResponse) {
    size += computeMessageSize(14, self.startGameResponse);
  }
  if (self.hasSendDrawDataRequest) {
    size += computeMessageSize(21, self.sendDrawDataRequest);
  }
  if (self.hasSendDrawDataResponse) {
    size += computeMessageSize(22, self.sendDrawDataResponse);
  }
  if (self.hasChatRequest) {
    size += computeMessageSize(23, self.chatRequest);
  }
  if (self.hasChatResponse) {
    size += computeMessageSize(24, self.chatResponse);
  }
  if (self.hasNotification) {
    size += computeMessageSize(51, self.notification);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameMessage*) parseFromData:(NSData*) data {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data] build];
}
+ (GameMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage_Builder*) builder {
  return [[[GameMessage_Builder alloc] init] autorelease];
}
+ (GameMessage_Builder*) builderWithPrototype:(GameMessage*) prototype {
  return [[GameMessage builder] mergeFrom:prototype];
}
- (GameMessage_Builder*) builder {
  return [GameMessage builder];
}
@end

@interface GameMessage_Builder()
@property (retain) GameMessage* result;
@end

@implementation GameMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameMessage_Builder*) clear {
  self.result = [[[GameMessage alloc] init] autorelease];
  return self;
}
- (GameMessage_Builder*) clone {
  return [GameMessage builderWithPrototype:result];
}
- (GameMessage*) defaultInstance {
  return [GameMessage defaultInstance];
}
- (GameMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameMessage*) buildPartial {
  GameMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameMessage_Builder*) mergeFrom:(GameMessage*) other {
  if (other == [GameMessage defaultInstance]) {
    return self;
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  if (other.hasCompleteReason) {
    [self setCompleteReason:other.completeReason];
  }
  if (other.hasOnlineUserCount) {
    [self setOnlineUserCount:other.onlineUserCount];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasJoinGameRequest) {
    [self mergeJoinGameRequest:other.joinGameRequest];
  }
  if (other.hasJoinGameResponse) {
    [self mergeJoinGameResponse:other.joinGameResponse];
  }
  if (other.hasStartGameRequest) {
    [self mergeStartGameRequest:other.startGameRequest];
  }
  if (other.hasStartGameResponse) {
    [self mergeStartGameResponse:other.startGameResponse];
  }
  if (other.hasSendDrawDataRequest) {
    [self mergeSendDrawDataRequest:other.sendDrawDataRequest];
  }
  if (other.hasSendDrawDataResponse) {
    [self mergeSendDrawDataResponse:other.sendDrawDataResponse];
  }
  if (other.hasChatRequest) {
    [self mergeChatRequest:other.chatRequest];
  }
  if (other.hasChatResponse) {
    [self mergeChatResponse:other.chatResponse];
  }
  if (other.hasNotification) {
    [self mergeNotification:other.notification];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (GameCommandTypeIsValidValue(value)) {
          [self setCommand:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setMessageId:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (GameResultCodeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setUserId:[input readString]];
        break;
      }
      case 40: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 48: {
        [self setRound:[input readInt32]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (GameCompleteReasonIsValidValue(value)) {
          [self setCompleteReason:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setOnlineUserCount:[input readInt32]];
        break;
      }
      case 74: {
        [self setToUserId:[input readString]];
        break;
      }
      case 90: {
        JoinGameRequest_Builder* subBuilder = [JoinGameRequest builder];
        if (self.hasJoinGameRequest) {
          [subBuilder mergeFrom:self.joinGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        JoinGameResponse_Builder* subBuilder = [JoinGameResponse builder];
        if (self.hasJoinGameResponse) {
          [subBuilder mergeFrom:self.joinGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        StartGameRequest_Builder* subBuilder = [StartGameRequest builder];
        if (self.hasStartGameRequest) {
          [subBuilder mergeFrom:self.startGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        StartGameResponse_Builder* subBuilder = [StartGameResponse builder];
        if (self.hasStartGameResponse) {
          [subBuilder mergeFrom:self.startGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        SendDrawDataRequest_Builder* subBuilder = [SendDrawDataRequest builder];
        if (self.hasSendDrawDataRequest) {
          [subBuilder mergeFrom:self.sendDrawDataRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendDrawDataRequest:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        SendDrawDataResponse_Builder* subBuilder = [SendDrawDataResponse builder];
        if (self.hasSendDrawDataResponse) {
          [subBuilder mergeFrom:self.sendDrawDataResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendDrawDataResponse:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        GameChatRequest_Builder* subBuilder = [GameChatRequest builder];
        if (self.hasChatRequest) {
          [subBuilder mergeFrom:self.chatRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatRequest:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        GameChatResponse_Builder* subBuilder = [GameChatResponse builder];
        if (self.hasChatResponse) {
          [subBuilder mergeFrom:self.chatResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatResponse:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        GeneralNotification_Builder* subBuilder = [GeneralNotification builder];
        if (self.hasNotification) {
          [subBuilder mergeFrom:self.notification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotification:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommand {
  return result.hasCommand;
}
- (GameCommandType) command {
  return result.command;
}
- (GameMessage_Builder*) setCommand:(GameCommandType) value {
  result.hasCommand = YES;
  result.command = value;
  return self;
}
- (GameMessage_Builder*) clearCommand {
  result.hasCommand = NO;
  result.command = GameCommandTypeJoinGameRequest;
  return self;
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (int32_t) messageId {
  return result.messageId;
}
- (GameMessage_Builder*) setMessageId:(int32_t) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (GameMessage_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (GameResultCode) resultCode {
  return result.resultCode;
}
- (GameMessage_Builder*) setResultCode:(GameResultCode) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (GameMessage_Builder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = GameResultCodeSuccess;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (GameMessage_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (GameMessage_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (GameMessage_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (GameMessage_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasRound {
  return result.hasRound;
}
- (int32_t) round {
  return result.round;
}
- (GameMessage_Builder*) setRound:(int32_t) value {
  result.hasRound = YES;
  result.round = value;
  return self;
}
- (GameMessage_Builder*) clearRound {
  result.hasRound = NO;
  result.round = 0;
  return self;
}
- (BOOL) hasCompleteReason {
  return result.hasCompleteReason;
}
- (GameCompleteReason) completeReason {
  return result.completeReason;
}
- (GameMessage_Builder*) setCompleteReason:(GameCompleteReason) value {
  result.hasCompleteReason = YES;
  result.completeReason = value;
  return self;
}
- (GameMessage_Builder*) clearCompleteReason {
  result.hasCompleteReason = NO;
  result.completeReason = GameCompleteReasonReasonNotComplete;
  return self;
}
- (BOOL) hasOnlineUserCount {
  return result.hasOnlineUserCount;
}
- (int32_t) onlineUserCount {
  return result.onlineUserCount;
}
- (GameMessage_Builder*) setOnlineUserCount:(int32_t) value {
  result.hasOnlineUserCount = YES;
  result.onlineUserCount = value;
  return self;
}
- (GameMessage_Builder*) clearOnlineUserCount {
  result.hasOnlineUserCount = NO;
  result.onlineUserCount = 0;
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (GameMessage_Builder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (GameMessage_Builder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasJoinGameRequest {
  return result.hasJoinGameRequest;
}
- (JoinGameRequest*) joinGameRequest {
  return result.joinGameRequest;
}
- (GameMessage_Builder*) setJoinGameRequest:(JoinGameRequest*) value {
  result.hasJoinGameRequest = YES;
  result.joinGameRequest = value;
  return self;
}
- (GameMessage_Builder*) setJoinGameRequestBuilder:(JoinGameRequest_Builder*) builderForValue {
  return [self setJoinGameRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeJoinGameRequest:(JoinGameRequest*) value {
  if (result.hasJoinGameRequest &&
      result.joinGameRequest != [JoinGameRequest defaultInstance]) {
    result.joinGameRequest =
      [[[JoinGameRequest builderWithPrototype:result.joinGameRequest] mergeFrom:value] buildPartial];
  } else {
    result.joinGameRequest = value;
  }
  result.hasJoinGameRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearJoinGameRequest {
  result.hasJoinGameRequest = NO;
  result.joinGameRequest = [JoinGameRequest defaultInstance];
  return self;
}
- (BOOL) hasJoinGameResponse {
  return result.hasJoinGameResponse;
}
- (JoinGameResponse*) joinGameResponse {
  return result.joinGameResponse;
}
- (GameMessage_Builder*) setJoinGameResponse:(JoinGameResponse*) value {
  result.hasJoinGameResponse = YES;
  result.joinGameResponse = value;
  return self;
}
- (GameMessage_Builder*) setJoinGameResponseBuilder:(JoinGameResponse_Builder*) builderForValue {
  return [self setJoinGameResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeJoinGameResponse:(JoinGameResponse*) value {
  if (result.hasJoinGameResponse &&
      result.joinGameResponse != [JoinGameResponse defaultInstance]) {
    result.joinGameResponse =
      [[[JoinGameResponse builderWithPrototype:result.joinGameResponse] mergeFrom:value] buildPartial];
  } else {
    result.joinGameResponse = value;
  }
  result.hasJoinGameResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearJoinGameResponse {
  result.hasJoinGameResponse = NO;
  result.joinGameResponse = [JoinGameResponse defaultInstance];
  return self;
}
- (BOOL) hasStartGameRequest {
  return result.hasStartGameRequest;
}
- (StartGameRequest*) startGameRequest {
  return result.startGameRequest;
}
- (GameMessage_Builder*) setStartGameRequest:(StartGameRequest*) value {
  result.hasStartGameRequest = YES;
  result.startGameRequest = value;
  return self;
}
- (GameMessage_Builder*) setStartGameRequestBuilder:(StartGameRequest_Builder*) builderForValue {
  return [self setStartGameRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeStartGameRequest:(StartGameRequest*) value {
  if (result.hasStartGameRequest &&
      result.startGameRequest != [StartGameRequest defaultInstance]) {
    result.startGameRequest =
      [[[StartGameRequest builderWithPrototype:result.startGameRequest] mergeFrom:value] buildPartial];
  } else {
    result.startGameRequest = value;
  }
  result.hasStartGameRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearStartGameRequest {
  result.hasStartGameRequest = NO;
  result.startGameRequest = [StartGameRequest defaultInstance];
  return self;
}
- (BOOL) hasStartGameResponse {
  return result.hasStartGameResponse;
}
- (StartGameResponse*) startGameResponse {
  return result.startGameResponse;
}
- (GameMessage_Builder*) setStartGameResponse:(StartGameResponse*) value {
  result.hasStartGameResponse = YES;
  result.startGameResponse = value;
  return self;
}
- (GameMessage_Builder*) setStartGameResponseBuilder:(StartGameResponse_Builder*) builderForValue {
  return [self setStartGameResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeStartGameResponse:(StartGameResponse*) value {
  if (result.hasStartGameResponse &&
      result.startGameResponse != [StartGameResponse defaultInstance]) {
    result.startGameResponse =
      [[[StartGameResponse builderWithPrototype:result.startGameResponse] mergeFrom:value] buildPartial];
  } else {
    result.startGameResponse = value;
  }
  result.hasStartGameResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearStartGameResponse {
  result.hasStartGameResponse = NO;
  result.startGameResponse = [StartGameResponse defaultInstance];
  return self;
}
- (BOOL) hasSendDrawDataRequest {
  return result.hasSendDrawDataRequest;
}
- (SendDrawDataRequest*) sendDrawDataRequest {
  return result.sendDrawDataRequest;
}
- (GameMessage_Builder*) setSendDrawDataRequest:(SendDrawDataRequest*) value {
  result.hasSendDrawDataRequest = YES;
  result.sendDrawDataRequest = value;
  return self;
}
- (GameMessage_Builder*) setSendDrawDataRequestBuilder:(SendDrawDataRequest_Builder*) builderForValue {
  return [self setSendDrawDataRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeSendDrawDataRequest:(SendDrawDataRequest*) value {
  if (result.hasSendDrawDataRequest &&
      result.sendDrawDataRequest != [SendDrawDataRequest defaultInstance]) {
    result.sendDrawDataRequest =
      [[[SendDrawDataRequest builderWithPrototype:result.sendDrawDataRequest] mergeFrom:value] buildPartial];
  } else {
    result.sendDrawDataRequest = value;
  }
  result.hasSendDrawDataRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearSendDrawDataRequest {
  result.hasSendDrawDataRequest = NO;
  result.sendDrawDataRequest = [SendDrawDataRequest defaultInstance];
  return self;
}
- (BOOL) hasSendDrawDataResponse {
  return result.hasSendDrawDataResponse;
}
- (SendDrawDataResponse*) sendDrawDataResponse {
  return result.sendDrawDataResponse;
}
- (GameMessage_Builder*) setSendDrawDataResponse:(SendDrawDataResponse*) value {
  result.hasSendDrawDataResponse = YES;
  result.sendDrawDataResponse = value;
  return self;
}
- (GameMessage_Builder*) setSendDrawDataResponseBuilder:(SendDrawDataResponse_Builder*) builderForValue {
  return [self setSendDrawDataResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeSendDrawDataResponse:(SendDrawDataResponse*) value {
  if (result.hasSendDrawDataResponse &&
      result.sendDrawDataResponse != [SendDrawDataResponse defaultInstance]) {
    result.sendDrawDataResponse =
      [[[SendDrawDataResponse builderWithPrototype:result.sendDrawDataResponse] mergeFrom:value] buildPartial];
  } else {
    result.sendDrawDataResponse = value;
  }
  result.hasSendDrawDataResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearSendDrawDataResponse {
  result.hasSendDrawDataResponse = NO;
  result.sendDrawDataResponse = [SendDrawDataResponse defaultInstance];
  return self;
}
- (BOOL) hasChatRequest {
  return result.hasChatRequest;
}
- (GameChatRequest*) chatRequest {
  return result.chatRequest;
}
- (GameMessage_Builder*) setChatRequest:(GameChatRequest*) value {
  result.hasChatRequest = YES;
  result.chatRequest = value;
  return self;
}
- (GameMessage_Builder*) setChatRequestBuilder:(GameChatRequest_Builder*) builderForValue {
  return [self setChatRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeChatRequest:(GameChatRequest*) value {
  if (result.hasChatRequest &&
      result.chatRequest != [GameChatRequest defaultInstance]) {
    result.chatRequest =
      [[[GameChatRequest builderWithPrototype:result.chatRequest] mergeFrom:value] buildPartial];
  } else {
    result.chatRequest = value;
  }
  result.hasChatRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearChatRequest {
  result.hasChatRequest = NO;
  result.chatRequest = [GameChatRequest defaultInstance];
  return self;
}
- (BOOL) hasChatResponse {
  return result.hasChatResponse;
}
- (GameChatResponse*) chatResponse {
  return result.chatResponse;
}
- (GameMessage_Builder*) setChatResponse:(GameChatResponse*) value {
  result.hasChatResponse = YES;
  result.chatResponse = value;
  return self;
}
- (GameMessage_Builder*) setChatResponseBuilder:(GameChatResponse_Builder*) builderForValue {
  return [self setChatResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeChatResponse:(GameChatResponse*) value {
  if (result.hasChatResponse &&
      result.chatResponse != [GameChatResponse defaultInstance]) {
    result.chatResponse =
      [[[GameChatResponse builderWithPrototype:result.chatResponse] mergeFrom:value] buildPartial];
  } else {
    result.chatResponse = value;
  }
  result.hasChatResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearChatResponse {
  result.hasChatResponse = NO;
  result.chatResponse = [GameChatResponse defaultInstance];
  return self;
}
- (BOOL) hasNotification {
  return result.hasNotification;
}
- (GeneralNotification*) notification {
  return result.notification;
}
- (GameMessage_Builder*) setNotification:(GeneralNotification*) value {
  result.hasNotification = YES;
  result.notification = value;
  return self;
}
- (GameMessage_Builder*) setNotificationBuilder:(GeneralNotification_Builder*) builderForValue {
  return [self setNotification:[builderForValue build]];
}
- (GameMessage_Builder*) mergeNotification:(GeneralNotification*) value {
  if (result.hasNotification &&
      result.notification != [GeneralNotification defaultInstance]) {
    result.notification =
      [[[GeneralNotification builderWithPrototype:result.notification] mergeFrom:value] buildPartial];
  } else {
    result.notification = value;
  }
  result.hasNotification = YES;
  return self;
}
- (GameMessage_Builder*) clearNotification {
  result.hasNotification = NO;
  result.notification = [GeneralNotification defaultInstance];
  return self;
}
@end

