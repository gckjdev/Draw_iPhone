// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameMessage.pb.h"
// @@protoc_insertion_point(imports)

@implementation GameMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [DrawRoot registerAllExtensions:registry];
    [DiceRoot registerAllExtensions:registry];
    [ZhaJinHuaRoot registerAllExtensions:registry];
    [BbsRoot registerAllExtensions:registry];
    [OpusRoot registerAllExtensions:registry];
    [PhotoRoot registerAllExtensions:registry];
    [SingRoot registerAllExtensions:registry];
    [GroupRoot registerAllExtensions:registry];
    [TutorialRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BetTypeIsValidValue(BetType value) {
  switch (value) {
    case BetTypeBetTypeCall:
    case BetTypeBetTypeRaise:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBetType(BetType value) {
  switch (value) {
    case BetTypeBetTypeCall:
      return @"BetTypeBetTypeCall";
    case BetTypeBetTypeRaise:
      return @"BetTypeBetTypeRaise";
    default:
      return nil;
  }
}

@interface GetRoomsRequest ()
@property (strong) NSString* gameId;
@property SInt32 roomType;
@property (strong) NSString* keyword;
@end

@implementation GetRoomsRequest

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasRoomType {
  return !!hasRoomType_;
}
- (void) setHasRoomType:(BOOL) _value_ {
  hasRoomType_ = !!_value_;
}
@synthesize roomType;
- (BOOL) hasKeyword {
  return !!hasKeyword_;
}
- (void) setHasKeyword:(BOOL) _value_ {
  hasKeyword_ = !!_value_;
}
@synthesize keyword;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.roomType = 0;
    self.keyword = @"";
  }
  return self;
}
static GetRoomsRequest* defaultGetRoomsRequestInstance = nil;
+ (void) initialize {
  if (self == [GetRoomsRequest class]) {
    defaultGetRoomsRequestInstance = [[GetRoomsRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGetRoomsRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultGetRoomsRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasRoomType) {
    [output writeInt32:3 value:self.roomType];
  }
  if (self.hasKeyword) {
    [output writeString:4 value:self.keyword];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeStringSize(2, self.gameId);
  }
  if (self.hasRoomType) {
    size_ += computeInt32Size(3, self.roomType);
  }
  if (self.hasKeyword) {
    size_ += computeStringSize(4, self.keyword);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetRoomsRequest*) parseFromData:(NSData*) data {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromData:data] build];
}
+ (GetRoomsRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromInputStream:input] build];
}
+ (GetRoomsRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GetRoomsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsRequestBuilder*) builder {
  return [[GetRoomsRequestBuilder alloc] init];
}
+ (GetRoomsRequestBuilder*) builderWithPrototype:(GetRoomsRequest*) prototype {
  return [[GetRoomsRequest builder] mergeFrom:prototype];
}
- (GetRoomsRequestBuilder*) builder {
  return [GetRoomsRequest builder];
}
- (GetRoomsRequestBuilder*) toBuilder {
  return [GetRoomsRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", self.gameId];
  }
  if (self.hasRoomType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomType", [NSNumber numberWithInteger:self.roomType]];
  }
  if (self.hasKeyword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keyword", self.keyword];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GetRoomsRequest class]]) {
    return NO;
  }
  GetRoomsRequest *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || [self.gameId isEqual:otherMessage.gameId]) &&
      self.hasRoomType == otherMessage.hasRoomType &&
      (!self.hasRoomType || self.roomType == otherMessage.roomType) &&
      self.hasKeyword == otherMessage.hasKeyword &&
      (!self.hasKeyword || [self.keyword isEqual:otherMessage.keyword]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [self.gameId hash];
  }
  if (self.hasRoomType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomType] hash];
  }
  if (self.hasKeyword) {
    hashCode = hashCode * 31 + [self.keyword hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GetRoomsRequestBuilder()
@property (strong) GetRoomsRequest* resultGetRoomsRequest;
@end

@implementation GetRoomsRequestBuilder
@synthesize resultGetRoomsRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGetRoomsRequest = [[GetRoomsRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGetRoomsRequest;
}
- (GetRoomsRequestBuilder*) clear {
  self.resultGetRoomsRequest = [[GetRoomsRequest alloc] init];
  return self;
}
- (GetRoomsRequestBuilder*) clone {
  return [GetRoomsRequest builderWithPrototype:resultGetRoomsRequest];
}
- (GetRoomsRequest*) defaultInstance {
  return [GetRoomsRequest defaultInstance];
}
- (GetRoomsRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetRoomsRequest*) buildPartial {
  GetRoomsRequest* returnMe = resultGetRoomsRequest;
  self.resultGetRoomsRequest = nil;
  return returnMe;
}
- (GetRoomsRequestBuilder*) mergeFrom:(GetRoomsRequest*) other {
  if (other == [GetRoomsRequest defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasRoomType) {
    [self setRoomType:other.roomType];
  }
  if (other.hasKeyword) {
    [self setKeyword:other.keyword];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetRoomsRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetRoomsRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        [self setRoomType:[input readInt32]];
        break;
      }
      case 34: {
        [self setKeyword:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultGetRoomsRequest.hasGameId;
}
- (NSString*) gameId {
  return resultGetRoomsRequest.gameId;
}
- (GetRoomsRequestBuilder*) setGameId:(NSString*) value {
  resultGetRoomsRequest.hasGameId = YES;
  resultGetRoomsRequest.gameId = value;
  return self;
}
- (GetRoomsRequestBuilder*) clearGameId {
  resultGetRoomsRequest.hasGameId = NO;
  resultGetRoomsRequest.gameId = @"";
  return self;
}
- (BOOL) hasRoomType {
  return resultGetRoomsRequest.hasRoomType;
}
- (SInt32) roomType {
  return resultGetRoomsRequest.roomType;
}
- (GetRoomsRequestBuilder*) setRoomType:(SInt32) value {
  resultGetRoomsRequest.hasRoomType = YES;
  resultGetRoomsRequest.roomType = value;
  return self;
}
- (GetRoomsRequestBuilder*) clearRoomType {
  resultGetRoomsRequest.hasRoomType = NO;
  resultGetRoomsRequest.roomType = 0;
  return self;
}
- (BOOL) hasKeyword {
  return resultGetRoomsRequest.hasKeyword;
}
- (NSString*) keyword {
  return resultGetRoomsRequest.keyword;
}
- (GetRoomsRequestBuilder*) setKeyword:(NSString*) value {
  resultGetRoomsRequest.hasKeyword = YES;
  resultGetRoomsRequest.keyword = value;
  return self;
}
- (GetRoomsRequestBuilder*) clearKeyword {
  resultGetRoomsRequest.hasKeyword = NO;
  resultGetRoomsRequest.keyword = @"";
  return self;
}
@end

@interface GetRoomsResponse ()
@property (strong) NSMutableArray * sessionsArray;
@property SInt32 ruleType;
@end

@implementation GetRoomsResponse

@synthesize sessionsArray;
@dynamic sessions;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) _value_ {
  hasRuleType_ = !!_value_;
}
@synthesize ruleType;
- (instancetype) init {
  if ((self = [super init])) {
    self.ruleType = 0;
  }
  return self;
}
static GetRoomsResponse* defaultGetRoomsResponseInstance = nil;
+ (void) initialize {
  if (self == [GetRoomsResponse class]) {
    defaultGetRoomsResponseInstance = [[GetRoomsResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGetRoomsResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultGetRoomsResponseInstance;
}
- (NSArray *)sessions {
  return sessionsArray;
}
- (PBGameSession*)sessionsAtIndex:(NSUInteger)index {
  return [sessionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitsessions = YES;
   [self.sessions enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsessions = NO;
      *stop = YES;
    }
  }];
  if (!isInitsessions) return isInitsessions;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasRuleType) {
    [output writeInt32:2 value:self.ruleType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasRuleType) {
    size_ += computeInt32Size(2, self.ruleType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetRoomsResponse*) parseFromData:(NSData*) data {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromData:data] build];
}
+ (GetRoomsResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromInputStream:input] build];
}
+ (GetRoomsResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GetRoomsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsResponseBuilder*) builder {
  return [[GetRoomsResponseBuilder alloc] init];
}
+ (GetRoomsResponseBuilder*) builderWithPrototype:(GetRoomsResponse*) prototype {
  return [[GetRoomsResponse builder] mergeFrom:prototype];
}
- (GetRoomsResponseBuilder*) builder {
  return [GetRoomsResponse builder];
}
- (GetRoomsResponseBuilder*) toBuilder {
  return [GetRoomsResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessions"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasRuleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ruleType", [NSNumber numberWithInteger:self.ruleType]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GetRoomsResponse class]]) {
    return NO;
  }
  GetRoomsResponse *otherMessage = other;
  return
      [self.sessionsArray isEqualToArray:otherMessage.sessionsArray] &&
      self.hasRuleType == otherMessage.hasRuleType &&
      (!self.hasRuleType || self.ruleType == otherMessage.ruleType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasRuleType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ruleType] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GetRoomsResponseBuilder()
@property (strong) GetRoomsResponse* resultGetRoomsResponse;
@end

@implementation GetRoomsResponseBuilder
@synthesize resultGetRoomsResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGetRoomsResponse = [[GetRoomsResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGetRoomsResponse;
}
- (GetRoomsResponseBuilder*) clear {
  self.resultGetRoomsResponse = [[GetRoomsResponse alloc] init];
  return self;
}
- (GetRoomsResponseBuilder*) clone {
  return [GetRoomsResponse builderWithPrototype:resultGetRoomsResponse];
}
- (GetRoomsResponse*) defaultInstance {
  return [GetRoomsResponse defaultInstance];
}
- (GetRoomsResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetRoomsResponse*) buildPartial {
  GetRoomsResponse* returnMe = resultGetRoomsResponse;
  self.resultGetRoomsResponse = nil;
  return returnMe;
}
- (GetRoomsResponseBuilder*) mergeFrom:(GetRoomsResponse*) other {
  if (other == [GetRoomsResponse defaultInstance]) {
    return self;
  }
  if (other.sessionsArray.count > 0) {
    if (resultGetRoomsResponse.sessionsArray == nil) {
      resultGetRoomsResponse.sessionsArray = [[NSMutableArray alloc] initWithArray:other.sessionsArray];
    } else {
      [resultGetRoomsResponse.sessionsArray addObjectsFromArray:other.sessionsArray];
    }
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetRoomsResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetRoomsResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSessionBuilder* subBuilder = [PBGameSession builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessions:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setRuleType:[input readInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)sessions {
  return resultGetRoomsResponse.sessionsArray;
}
- (PBGameSession*)sessionsAtIndex:(NSUInteger)index {
  return [resultGetRoomsResponse sessionsAtIndex:index];
}
- (GetRoomsResponseBuilder *)addSessions:(PBGameSession*)value {
  if (resultGetRoomsResponse.sessionsArray == nil) {
    resultGetRoomsResponse.sessionsArray = [[NSMutableArray alloc]init];
  }
  [resultGetRoomsResponse.sessionsArray addObject:value];
  return self;
}
- (GetRoomsResponseBuilder *)setSessionsArray:(NSArray *)array {
  resultGetRoomsResponse.sessionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (GetRoomsResponseBuilder *)clearSessions {
  resultGetRoomsResponse.sessionsArray = nil;
  return self;
}
- (BOOL) hasRuleType {
  return resultGetRoomsResponse.hasRuleType;
}
- (SInt32) ruleType {
  return resultGetRoomsResponse.ruleType;
}
- (GetRoomsResponseBuilder*) setRuleType:(SInt32) value {
  resultGetRoomsResponse.hasRuleType = YES;
  resultGetRoomsResponse.ruleType = value;
  return self;
}
- (GetRoomsResponseBuilder*) clearRuleType {
  resultGetRoomsResponse.hasRuleType = NO;
  resultGetRoomsResponse.ruleType = 0;
  return self;
}
@end

@interface CreateRoomRequest ()
@property (strong) NSString* gameId;
@property (strong) PBGameUser* user;
@property (strong) NSString* roomName;
@property (strong) NSString* password;
@property SInt32 ruleType;
@property SInt32 version;
@end

@implementation CreateRoomRequest

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) _value_ {
  hasRoomName_ = !!_value_;
}
@synthesize roomName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) _value_ {
  hasRuleType_ = !!_value_;
}
@synthesize ruleType;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.user = [PBGameUser defaultInstance];
    self.roomName = @"";
    self.password = @"";
    self.ruleType = 0;
    self.version = 0;
  }
  return self;
}
static CreateRoomRequest* defaultCreateRoomRequestInstance = nil;
+ (void) initialize {
  if (self == [CreateRoomRequest class]) {
    defaultCreateRoomRequestInstance = [[CreateRoomRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCreateRoomRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultCreateRoomRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasRoomName) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasRoomName) {
    [output writeString:3 value:self.roomName];
  }
  if (self.hasPassword) {
    [output writeString:4 value:self.password];
  }
  if (self.hasRuleType) {
    [output writeInt32:5 value:self.ruleType];
  }
  if (self.hasVersion) {
    [output writeInt32:6 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeStringSize(1, self.gameId);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasRoomName) {
    size_ += computeStringSize(3, self.roomName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(4, self.password);
  }
  if (self.hasRuleType) {
    size_ += computeInt32Size(5, self.ruleType);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(6, self.version);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CreateRoomRequest*) parseFromData:(NSData*) data {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromData:data] build];
}
+ (CreateRoomRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromInputStream:input] build];
}
+ (CreateRoomRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CreateRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomRequestBuilder*) builder {
  return [[CreateRoomRequestBuilder alloc] init];
}
+ (CreateRoomRequestBuilder*) builderWithPrototype:(CreateRoomRequest*) prototype {
  return [[CreateRoomRequest builder] mergeFrom:prototype];
}
- (CreateRoomRequestBuilder*) builder {
  return [CreateRoomRequest builder];
}
- (CreateRoomRequestBuilder*) toBuilder {
  return [CreateRoomRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", self.gameId];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomName", self.roomName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasRuleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ruleType", [NSNumber numberWithInteger:self.ruleType]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CreateRoomRequest class]]) {
    return NO;
  }
  CreateRoomRequest *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || [self.gameId isEqual:otherMessage.gameId]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasRoomName == otherMessage.hasRoomName &&
      (!self.hasRoomName || [self.roomName isEqual:otherMessage.roomName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasRuleType == otherMessage.hasRuleType &&
      (!self.hasRuleType || self.ruleType == otherMessage.ruleType) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [self.gameId hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasRoomName) {
    hashCode = hashCode * 31 + [self.roomName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasRuleType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ruleType] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CreateRoomRequestBuilder()
@property (strong) CreateRoomRequest* resultCreateRoomRequest;
@end

@implementation CreateRoomRequestBuilder
@synthesize resultCreateRoomRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreateRoomRequest = [[CreateRoomRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreateRoomRequest;
}
- (CreateRoomRequestBuilder*) clear {
  self.resultCreateRoomRequest = [[CreateRoomRequest alloc] init];
  return self;
}
- (CreateRoomRequestBuilder*) clone {
  return [CreateRoomRequest builderWithPrototype:resultCreateRoomRequest];
}
- (CreateRoomRequest*) defaultInstance {
  return [CreateRoomRequest defaultInstance];
}
- (CreateRoomRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreateRoomRequest*) buildPartial {
  CreateRoomRequest* returnMe = resultCreateRoomRequest;
  self.resultCreateRoomRequest = nil;
  return returnMe;
}
- (CreateRoomRequestBuilder*) mergeFrom:(CreateRoomRequest*) other {
  if (other == [CreateRoomRequest defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreateRoomRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreateRoomRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 18: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setRoomName:[input readString]];
        break;
      }
      case 34: {
        [self setPassword:[input readString]];
        break;
      }
      case 40: {
        [self setRuleType:[input readInt32]];
        break;
      }
      case 48: {
        [self setVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultCreateRoomRequest.hasGameId;
}
- (NSString*) gameId {
  return resultCreateRoomRequest.gameId;
}
- (CreateRoomRequestBuilder*) setGameId:(NSString*) value {
  resultCreateRoomRequest.hasGameId = YES;
  resultCreateRoomRequest.gameId = value;
  return self;
}
- (CreateRoomRequestBuilder*) clearGameId {
  resultCreateRoomRequest.hasGameId = NO;
  resultCreateRoomRequest.gameId = @"";
  return self;
}
- (BOOL) hasUser {
  return resultCreateRoomRequest.hasUser;
}
- (PBGameUser*) user {
  return resultCreateRoomRequest.user;
}
- (CreateRoomRequestBuilder*) setUser:(PBGameUser*) value {
  resultCreateRoomRequest.hasUser = YES;
  resultCreateRoomRequest.user = value;
  return self;
}
- (CreateRoomRequestBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CreateRoomRequestBuilder*) mergeUser:(PBGameUser*) value {
  if (resultCreateRoomRequest.hasUser &&
      resultCreateRoomRequest.user != [PBGameUser defaultInstance]) {
    resultCreateRoomRequest.user =
      [[[PBGameUser builderWithPrototype:resultCreateRoomRequest.user] mergeFrom:value] buildPartial];
  } else {
    resultCreateRoomRequest.user = value;
  }
  resultCreateRoomRequest.hasUser = YES;
  return self;
}
- (CreateRoomRequestBuilder*) clearUser {
  resultCreateRoomRequest.hasUser = NO;
  resultCreateRoomRequest.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasRoomName {
  return resultCreateRoomRequest.hasRoomName;
}
- (NSString*) roomName {
  return resultCreateRoomRequest.roomName;
}
- (CreateRoomRequestBuilder*) setRoomName:(NSString*) value {
  resultCreateRoomRequest.hasRoomName = YES;
  resultCreateRoomRequest.roomName = value;
  return self;
}
- (CreateRoomRequestBuilder*) clearRoomName {
  resultCreateRoomRequest.hasRoomName = NO;
  resultCreateRoomRequest.roomName = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultCreateRoomRequest.hasPassword;
}
- (NSString*) password {
  return resultCreateRoomRequest.password;
}
- (CreateRoomRequestBuilder*) setPassword:(NSString*) value {
  resultCreateRoomRequest.hasPassword = YES;
  resultCreateRoomRequest.password = value;
  return self;
}
- (CreateRoomRequestBuilder*) clearPassword {
  resultCreateRoomRequest.hasPassword = NO;
  resultCreateRoomRequest.password = @"";
  return self;
}
- (BOOL) hasRuleType {
  return resultCreateRoomRequest.hasRuleType;
}
- (SInt32) ruleType {
  return resultCreateRoomRequest.ruleType;
}
- (CreateRoomRequestBuilder*) setRuleType:(SInt32) value {
  resultCreateRoomRequest.hasRuleType = YES;
  resultCreateRoomRequest.ruleType = value;
  return self;
}
- (CreateRoomRequestBuilder*) clearRuleType {
  resultCreateRoomRequest.hasRuleType = NO;
  resultCreateRoomRequest.ruleType = 0;
  return self;
}
- (BOOL) hasVersion {
  return resultCreateRoomRequest.hasVersion;
}
- (SInt32) version {
  return resultCreateRoomRequest.version;
}
- (CreateRoomRequestBuilder*) setVersion:(SInt32) value {
  resultCreateRoomRequest.hasVersion = YES;
  resultCreateRoomRequest.version = value;
  return self;
}
- (CreateRoomRequestBuilder*) clearVersion {
  resultCreateRoomRequest.hasVersion = NO;
  resultCreateRoomRequest.version = 0;
  return self;
}
@end

@interface CreateRoomResponse ()
@property (strong) PBGameSession* gameSession;
@end

@implementation CreateRoomResponse

- (BOOL) hasGameSession {
  return !!hasGameSession_;
}
- (void) setHasGameSession:(BOOL) _value_ {
  hasGameSession_ = !!_value_;
}
@synthesize gameSession;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameSession = [PBGameSession defaultInstance];
  }
  return self;
}
static CreateRoomResponse* defaultCreateRoomResponseInstance = nil;
+ (void) initialize {
  if (self == [CreateRoomResponse class]) {
    defaultCreateRoomResponseInstance = [[CreateRoomResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCreateRoomResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultCreateRoomResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameSession) {
    return NO;
  }
  if (!self.gameSession.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSession) {
    [output writeMessage:1 value:self.gameSession];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameSession) {
    size_ += computeMessageSize(1, self.gameSession);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CreateRoomResponse*) parseFromData:(NSData*) data {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromData:data] build];
}
+ (CreateRoomResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromInputStream:input] build];
}
+ (CreateRoomResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CreateRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomResponseBuilder*) builder {
  return [[CreateRoomResponseBuilder alloc] init];
}
+ (CreateRoomResponseBuilder*) builderWithPrototype:(CreateRoomResponse*) prototype {
  return [[CreateRoomResponse builder] mergeFrom:prototype];
}
- (CreateRoomResponseBuilder*) builder {
  return [CreateRoomResponse builder];
}
- (CreateRoomResponseBuilder*) toBuilder {
  return [CreateRoomResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameSession"];
    [self.gameSession writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CreateRoomResponse class]]) {
    return NO;
  }
  CreateRoomResponse *otherMessage = other;
  return
      self.hasGameSession == otherMessage.hasGameSession &&
      (!self.hasGameSession || [self.gameSession isEqual:otherMessage.gameSession]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameSession) {
    hashCode = hashCode * 31 + [self.gameSession hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CreateRoomResponseBuilder()
@property (strong) CreateRoomResponse* resultCreateRoomResponse;
@end

@implementation CreateRoomResponseBuilder
@synthesize resultCreateRoomResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreateRoomResponse = [[CreateRoomResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreateRoomResponse;
}
- (CreateRoomResponseBuilder*) clear {
  self.resultCreateRoomResponse = [[CreateRoomResponse alloc] init];
  return self;
}
- (CreateRoomResponseBuilder*) clone {
  return [CreateRoomResponse builderWithPrototype:resultCreateRoomResponse];
}
- (CreateRoomResponse*) defaultInstance {
  return [CreateRoomResponse defaultInstance];
}
- (CreateRoomResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreateRoomResponse*) buildPartial {
  CreateRoomResponse* returnMe = resultCreateRoomResponse;
  self.resultCreateRoomResponse = nil;
  return returnMe;
}
- (CreateRoomResponseBuilder*) mergeFrom:(CreateRoomResponse*) other {
  if (other == [CreateRoomResponse defaultInstance]) {
    return self;
  }
  if (other.hasGameSession) {
    [self mergeGameSession:other.gameSession];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreateRoomResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreateRoomResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSessionBuilder* subBuilder = [PBGameSession builder];
        if (self.hasGameSession) {
          [subBuilder mergeFrom:self.gameSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSession:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSession {
  return resultCreateRoomResponse.hasGameSession;
}
- (PBGameSession*) gameSession {
  return resultCreateRoomResponse.gameSession;
}
- (CreateRoomResponseBuilder*) setGameSession:(PBGameSession*) value {
  resultCreateRoomResponse.hasGameSession = YES;
  resultCreateRoomResponse.gameSession = value;
  return self;
}
- (CreateRoomResponseBuilder*) setGameSessionBuilder:(PBGameSessionBuilder*) builderForValue {
  return [self setGameSession:[builderForValue build]];
}
- (CreateRoomResponseBuilder*) mergeGameSession:(PBGameSession*) value {
  if (resultCreateRoomResponse.hasGameSession &&
      resultCreateRoomResponse.gameSession != [PBGameSession defaultInstance]) {
    resultCreateRoomResponse.gameSession =
      [[[PBGameSession builderWithPrototype:resultCreateRoomResponse.gameSession] mergeFrom:value] buildPartial];
  } else {
    resultCreateRoomResponse.gameSession = value;
  }
  resultCreateRoomResponse.hasGameSession = YES;
  return self;
}
- (CreateRoomResponseBuilder*) clearGameSession {
  resultCreateRoomResponse.hasGameSession = NO;
  resultCreateRoomResponse.gameSession = [PBGameSession defaultInstance];
  return self;
}
@end

@interface SearchRoomRequest ()
@property (strong) NSString* keyword;
@property SInt32 rangeType;
@end

@implementation SearchRoomRequest

- (BOOL) hasKeyword {
  return !!hasKeyword_;
}
- (void) setHasKeyword:(BOOL) _value_ {
  hasKeyword_ = !!_value_;
}
@synthesize keyword;
- (BOOL) hasRangeType {
  return !!hasRangeType_;
}
- (void) setHasRangeType:(BOOL) _value_ {
  hasRangeType_ = !!_value_;
}
@synthesize rangeType;
- (instancetype) init {
  if ((self = [super init])) {
    self.keyword = @"";
    self.rangeType = 0;
  }
  return self;
}
static SearchRoomRequest* defaultSearchRoomRequestInstance = nil;
+ (void) initialize {
  if (self == [SearchRoomRequest class]) {
    defaultSearchRoomRequestInstance = [[SearchRoomRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSearchRoomRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultSearchRoomRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKeyword) {
    [output writeString:1 value:self.keyword];
  }
  if (self.hasRangeType) {
    [output writeInt32:2 value:self.rangeType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKeyword) {
    size_ += computeStringSize(1, self.keyword);
  }
  if (self.hasRangeType) {
    size_ += computeInt32Size(2, self.rangeType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchRoomRequest*) parseFromData:(NSData*) data {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromData:data] build];
}
+ (SearchRoomRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromInputStream:input] build];
}
+ (SearchRoomRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SearchRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomRequestBuilder*) builder {
  return [[SearchRoomRequestBuilder alloc] init];
}
+ (SearchRoomRequestBuilder*) builderWithPrototype:(SearchRoomRequest*) prototype {
  return [[SearchRoomRequest builder] mergeFrom:prototype];
}
- (SearchRoomRequestBuilder*) builder {
  return [SearchRoomRequest builder];
}
- (SearchRoomRequestBuilder*) toBuilder {
  return [SearchRoomRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKeyword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keyword", self.keyword];
  }
  if (self.hasRangeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rangeType", [NSNumber numberWithInteger:self.rangeType]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SearchRoomRequest class]]) {
    return NO;
  }
  SearchRoomRequest *otherMessage = other;
  return
      self.hasKeyword == otherMessage.hasKeyword &&
      (!self.hasKeyword || [self.keyword isEqual:otherMessage.keyword]) &&
      self.hasRangeType == otherMessage.hasRangeType &&
      (!self.hasRangeType || self.rangeType == otherMessage.rangeType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKeyword) {
    hashCode = hashCode * 31 + [self.keyword hash];
  }
  if (self.hasRangeType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rangeType] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SearchRoomRequestBuilder()
@property (strong) SearchRoomRequest* resultSearchRoomRequest;
@end

@implementation SearchRoomRequestBuilder
@synthesize resultSearchRoomRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSearchRoomRequest = [[SearchRoomRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSearchRoomRequest;
}
- (SearchRoomRequestBuilder*) clear {
  self.resultSearchRoomRequest = [[SearchRoomRequest alloc] init];
  return self;
}
- (SearchRoomRequestBuilder*) clone {
  return [SearchRoomRequest builderWithPrototype:resultSearchRoomRequest];
}
- (SearchRoomRequest*) defaultInstance {
  return [SearchRoomRequest defaultInstance];
}
- (SearchRoomRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SearchRoomRequest*) buildPartial {
  SearchRoomRequest* returnMe = resultSearchRoomRequest;
  self.resultSearchRoomRequest = nil;
  return returnMe;
}
- (SearchRoomRequestBuilder*) mergeFrom:(SearchRoomRequest*) other {
  if (other == [SearchRoomRequest defaultInstance]) {
    return self;
  }
  if (other.hasKeyword) {
    [self setKeyword:other.keyword];
  }
  if (other.hasRangeType) {
    [self setRangeType:other.rangeType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SearchRoomRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SearchRoomRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKeyword:[input readString]];
        break;
      }
      case 16: {
        [self setRangeType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasKeyword {
  return resultSearchRoomRequest.hasKeyword;
}
- (NSString*) keyword {
  return resultSearchRoomRequest.keyword;
}
- (SearchRoomRequestBuilder*) setKeyword:(NSString*) value {
  resultSearchRoomRequest.hasKeyword = YES;
  resultSearchRoomRequest.keyword = value;
  return self;
}
- (SearchRoomRequestBuilder*) clearKeyword {
  resultSearchRoomRequest.hasKeyword = NO;
  resultSearchRoomRequest.keyword = @"";
  return self;
}
- (BOOL) hasRangeType {
  return resultSearchRoomRequest.hasRangeType;
}
- (SInt32) rangeType {
  return resultSearchRoomRequest.rangeType;
}
- (SearchRoomRequestBuilder*) setRangeType:(SInt32) value {
  resultSearchRoomRequest.hasRangeType = YES;
  resultSearchRoomRequest.rangeType = value;
  return self;
}
- (SearchRoomRequestBuilder*) clearRangeType {
  resultSearchRoomRequest.hasRangeType = NO;
  resultSearchRoomRequest.rangeType = 0;
  return self;
}
@end

@interface SearchRoomResponse ()
@property (strong) NSMutableArray * sessionsArray;
@end

@implementation SearchRoomResponse

@synthesize sessionsArray;
@dynamic sessions;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static SearchRoomResponse* defaultSearchRoomResponseInstance = nil;
+ (void) initialize {
  if (self == [SearchRoomResponse class]) {
    defaultSearchRoomResponseInstance = [[SearchRoomResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSearchRoomResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultSearchRoomResponseInstance;
}
- (NSArray *)sessions {
  return sessionsArray;
}
- (PBGameSession*)sessionsAtIndex:(NSUInteger)index {
  return [sessionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitsessions = YES;
   [self.sessions enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsessions = NO;
      *stop = YES;
    }
  }];
  if (!isInitsessions) return isInitsessions;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchRoomResponse*) parseFromData:(NSData*) data {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromData:data] build];
}
+ (SearchRoomResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomResponse*) parseFromInputStream:(NSInputStream*) input {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromInputStream:input] build];
}
+ (SearchRoomResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SearchRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomResponseBuilder*) builder {
  return [[SearchRoomResponseBuilder alloc] init];
}
+ (SearchRoomResponseBuilder*) builderWithPrototype:(SearchRoomResponse*) prototype {
  return [[SearchRoomResponse builder] mergeFrom:prototype];
}
- (SearchRoomResponseBuilder*) builder {
  return [SearchRoomResponse builder];
}
- (SearchRoomResponseBuilder*) toBuilder {
  return [SearchRoomResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessions"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SearchRoomResponse class]]) {
    return NO;
  }
  SearchRoomResponse *otherMessage = other;
  return
      [self.sessionsArray isEqualToArray:otherMessage.sessionsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionsArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SearchRoomResponseBuilder()
@property (strong) SearchRoomResponse* resultSearchRoomResponse;
@end

@implementation SearchRoomResponseBuilder
@synthesize resultSearchRoomResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSearchRoomResponse = [[SearchRoomResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSearchRoomResponse;
}
- (SearchRoomResponseBuilder*) clear {
  self.resultSearchRoomResponse = [[SearchRoomResponse alloc] init];
  return self;
}
- (SearchRoomResponseBuilder*) clone {
  return [SearchRoomResponse builderWithPrototype:resultSearchRoomResponse];
}
- (SearchRoomResponse*) defaultInstance {
  return [SearchRoomResponse defaultInstance];
}
- (SearchRoomResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SearchRoomResponse*) buildPartial {
  SearchRoomResponse* returnMe = resultSearchRoomResponse;
  self.resultSearchRoomResponse = nil;
  return returnMe;
}
- (SearchRoomResponseBuilder*) mergeFrom:(SearchRoomResponse*) other {
  if (other == [SearchRoomResponse defaultInstance]) {
    return self;
  }
  if (other.sessionsArray.count > 0) {
    if (resultSearchRoomResponse.sessionsArray == nil) {
      resultSearchRoomResponse.sessionsArray = [[NSMutableArray alloc] initWithArray:other.sessionsArray];
    } else {
      [resultSearchRoomResponse.sessionsArray addObjectsFromArray:other.sessionsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SearchRoomResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SearchRoomResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSessionBuilder* subBuilder = [PBGameSession builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)sessions {
  return resultSearchRoomResponse.sessionsArray;
}
- (PBGameSession*)sessionsAtIndex:(NSUInteger)index {
  return [resultSearchRoomResponse sessionsAtIndex:index];
}
- (SearchRoomResponseBuilder *)addSessions:(PBGameSession*)value {
  if (resultSearchRoomResponse.sessionsArray == nil) {
    resultSearchRoomResponse.sessionsArray = [[NSMutableArray alloc]init];
  }
  [resultSearchRoomResponse.sessionsArray addObject:value];
  return self;
}
- (SearchRoomResponseBuilder *)setSessionsArray:(NSArray *)array {
  resultSearchRoomResponse.sessionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SearchRoomResponseBuilder *)clearSessions {
  resultSearchRoomResponse.sessionsArray = nil;
  return self;
}
@end

@interface RegisterRoomsNotificationRequest ()
@property (strong) PBAppendableArray * sessionIdsArray;
@end

@implementation RegisterRoomsNotificationRequest

@synthesize sessionIdsArray;
@dynamic sessionIds;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RegisterRoomsNotificationRequest* defaultRegisterRoomsNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RegisterRoomsNotificationRequest class]) {
    defaultRegisterRoomsNotificationRequestInstance = [[RegisterRoomsNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegisterRoomsNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultRegisterRoomsNotificationRequestInstance;
}
- (PBArray *)sessionIds {
  return sessionIdsArray;
}
- (SInt32)sessionIdsAtIndex:(NSUInteger)index {
  return [sessionIdsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger sessionIdsArrayCount = self.sessionIdsArray.count;
  if (sessionIdsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.sessionIdsArray.data;
    [output writeRawVarint32:18];
    [output writeRawVarint32:sessionIdsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < sessionIdsArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionIdsArray.count;
    const SInt32 *values = (const SInt32 *)self.sessionIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    sessionIdsMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegisterRoomsNotificationRequest*) parseFromData:(NSData*) data {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromData:data] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationRequestBuilder*) builder {
  return [[RegisterRoomsNotificationRequestBuilder alloc] init];
}
+ (RegisterRoomsNotificationRequestBuilder*) builderWithPrototype:(RegisterRoomsNotificationRequest*) prototype {
  return [[RegisterRoomsNotificationRequest builder] mergeFrom:prototype];
}
- (RegisterRoomsNotificationRequestBuilder*) builder {
  return [RegisterRoomsNotificationRequest builder];
}
- (RegisterRoomsNotificationRequestBuilder*) toBuilder {
  return [RegisterRoomsNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegisterRoomsNotificationRequest class]]) {
    return NO;
  }
  RegisterRoomsNotificationRequest *otherMessage = other;
  return
      [self.sessionIdsArray isEqualToArray:otherMessage.sessionIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegisterRoomsNotificationRequestBuilder()
@property (strong) RegisterRoomsNotificationRequest* resultRegisterRoomsNotificationRequest;
@end

@implementation RegisterRoomsNotificationRequestBuilder
@synthesize resultRegisterRoomsNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegisterRoomsNotificationRequest = [[RegisterRoomsNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegisterRoomsNotificationRequest;
}
- (RegisterRoomsNotificationRequestBuilder*) clear {
  self.resultRegisterRoomsNotificationRequest = [[RegisterRoomsNotificationRequest alloc] init];
  return self;
}
- (RegisterRoomsNotificationRequestBuilder*) clone {
  return [RegisterRoomsNotificationRequest builderWithPrototype:resultRegisterRoomsNotificationRequest];
}
- (RegisterRoomsNotificationRequest*) defaultInstance {
  return [RegisterRoomsNotificationRequest defaultInstance];
}
- (RegisterRoomsNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterRoomsNotificationRequest*) buildPartial {
  RegisterRoomsNotificationRequest* returnMe = resultRegisterRoomsNotificationRequest;
  self.resultRegisterRoomsNotificationRequest = nil;
  return returnMe;
}
- (RegisterRoomsNotificationRequestBuilder*) mergeFrom:(RegisterRoomsNotificationRequest*) other {
  if (other == [RegisterRoomsNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.sessionIdsArray.count > 0) {
    if (resultRegisterRoomsNotificationRequest.sessionIdsArray == nil) {
      resultRegisterRoomsNotificationRequest.sessionIdsArray = [other.sessionIdsArray copy];
    } else {
      [resultRegisterRoomsNotificationRequest.sessionIdsArray appendArray:other.sessionIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterRoomsNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterRoomsNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultRegisterRoomsNotificationRequest.sessionIdsArray == nil) {
          resultRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultRegisterRoomsNotificationRequest.sessionIdsArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (PBAppendableArray *)sessionIds {
  return resultRegisterRoomsNotificationRequest.sessionIdsArray;
}
- (SInt32)sessionIdsAtIndex:(NSUInteger)index {
  return [resultRegisterRoomsNotificationRequest sessionIdsAtIndex:index];
}
- (RegisterRoomsNotificationRequestBuilder *)addSessionIds:(SInt32)value {
  if (resultRegisterRoomsNotificationRequest.sessionIdsArray == nil) {
    resultRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultRegisterRoomsNotificationRequest.sessionIdsArray addInt32:value];
  return self;
}
- (RegisterRoomsNotificationRequestBuilder *)setSessionIdsArray:(NSArray *)array {
  resultRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (RegisterRoomsNotificationRequestBuilder *)setSessionIdsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (RegisterRoomsNotificationRequestBuilder *)clearSessionIds {
  resultRegisterRoomsNotificationRequest.sessionIdsArray = nil;
  return self;
}
@end

@interface RegisterRoomsNotificationResponse ()
@end

@implementation RegisterRoomsNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RegisterRoomsNotificationResponse* defaultRegisterRoomsNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RegisterRoomsNotificationResponse class]) {
    defaultRegisterRoomsNotificationResponseInstance = [[RegisterRoomsNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegisterRoomsNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultRegisterRoomsNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegisterRoomsNotificationResponse*) parseFromData:(NSData*) data {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromData:data] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationResponseBuilder*) builder {
  return [[RegisterRoomsNotificationResponseBuilder alloc] init];
}
+ (RegisterRoomsNotificationResponseBuilder*) builderWithPrototype:(RegisterRoomsNotificationResponse*) prototype {
  return [[RegisterRoomsNotificationResponse builder] mergeFrom:prototype];
}
- (RegisterRoomsNotificationResponseBuilder*) builder {
  return [RegisterRoomsNotificationResponse builder];
}
- (RegisterRoomsNotificationResponseBuilder*) toBuilder {
  return [RegisterRoomsNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegisterRoomsNotificationResponse class]]) {
    return NO;
  }
  RegisterRoomsNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegisterRoomsNotificationResponseBuilder()
@property (strong) RegisterRoomsNotificationResponse* resultRegisterRoomsNotificationResponse;
@end

@implementation RegisterRoomsNotificationResponseBuilder
@synthesize resultRegisterRoomsNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegisterRoomsNotificationResponse = [[RegisterRoomsNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegisterRoomsNotificationResponse;
}
- (RegisterRoomsNotificationResponseBuilder*) clear {
  self.resultRegisterRoomsNotificationResponse = [[RegisterRoomsNotificationResponse alloc] init];
  return self;
}
- (RegisterRoomsNotificationResponseBuilder*) clone {
  return [RegisterRoomsNotificationResponse builderWithPrototype:resultRegisterRoomsNotificationResponse];
}
- (RegisterRoomsNotificationResponse*) defaultInstance {
  return [RegisterRoomsNotificationResponse defaultInstance];
}
- (RegisterRoomsNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterRoomsNotificationResponse*) buildPartial {
  RegisterRoomsNotificationResponse* returnMe = resultRegisterRoomsNotificationResponse;
  self.resultRegisterRoomsNotificationResponse = nil;
  return returnMe;
}
- (RegisterRoomsNotificationResponseBuilder*) mergeFrom:(RegisterRoomsNotificationResponse*) other {
  if (other == [RegisterRoomsNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterRoomsNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterRoomsNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface UnRegisterRoomsNotificationRequest ()
@property (strong) PBAppendableArray * sessionIdsArray;
@end

@implementation UnRegisterRoomsNotificationRequest

@synthesize sessionIdsArray;
@dynamic sessionIds;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static UnRegisterRoomsNotificationRequest* defaultUnRegisterRoomsNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [UnRegisterRoomsNotificationRequest class]) {
    defaultUnRegisterRoomsNotificationRequestInstance = [[UnRegisterRoomsNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUnRegisterRoomsNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultUnRegisterRoomsNotificationRequestInstance;
}
- (PBArray *)sessionIds {
  return sessionIdsArray;
}
- (SInt32)sessionIdsAtIndex:(NSUInteger)index {
  return [sessionIdsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger sessionIdsArrayCount = self.sessionIdsArray.count;
  if (sessionIdsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.sessionIdsArray.data;
    [output writeRawVarint32:18];
    [output writeRawVarint32:sessionIdsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < sessionIdsArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionIdsArray.count;
    const SInt32 *values = (const SInt32 *)self.sessionIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    sessionIdsMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UnRegisterRoomsNotificationRequest*) parseFromData:(NSData*) data {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromData:data] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationRequestBuilder*) builder {
  return [[UnRegisterRoomsNotificationRequestBuilder alloc] init];
}
+ (UnRegisterRoomsNotificationRequestBuilder*) builderWithPrototype:(UnRegisterRoomsNotificationRequest*) prototype {
  return [[UnRegisterRoomsNotificationRequest builder] mergeFrom:prototype];
}
- (UnRegisterRoomsNotificationRequestBuilder*) builder {
  return [UnRegisterRoomsNotificationRequest builder];
}
- (UnRegisterRoomsNotificationRequestBuilder*) toBuilder {
  return [UnRegisterRoomsNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UnRegisterRoomsNotificationRequest class]]) {
    return NO;
  }
  UnRegisterRoomsNotificationRequest *otherMessage = other;
  return
      [self.sessionIdsArray isEqualToArray:otherMessage.sessionIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UnRegisterRoomsNotificationRequestBuilder()
@property (strong) UnRegisterRoomsNotificationRequest* resultUnRegisterRoomsNotificationRequest;
@end

@implementation UnRegisterRoomsNotificationRequestBuilder
@synthesize resultUnRegisterRoomsNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnRegisterRoomsNotificationRequest = [[UnRegisterRoomsNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnRegisterRoomsNotificationRequest;
}
- (UnRegisterRoomsNotificationRequestBuilder*) clear {
  self.resultUnRegisterRoomsNotificationRequest = [[UnRegisterRoomsNotificationRequest alloc] init];
  return self;
}
- (UnRegisterRoomsNotificationRequestBuilder*) clone {
  return [UnRegisterRoomsNotificationRequest builderWithPrototype:resultUnRegisterRoomsNotificationRequest];
}
- (UnRegisterRoomsNotificationRequest*) defaultInstance {
  return [UnRegisterRoomsNotificationRequest defaultInstance];
}
- (UnRegisterRoomsNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnRegisterRoomsNotificationRequest*) buildPartial {
  UnRegisterRoomsNotificationRequest* returnMe = resultUnRegisterRoomsNotificationRequest;
  self.resultUnRegisterRoomsNotificationRequest = nil;
  return returnMe;
}
- (UnRegisterRoomsNotificationRequestBuilder*) mergeFrom:(UnRegisterRoomsNotificationRequest*) other {
  if (other == [UnRegisterRoomsNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.sessionIdsArray.count > 0) {
    if (resultUnRegisterRoomsNotificationRequest.sessionIdsArray == nil) {
      resultUnRegisterRoomsNotificationRequest.sessionIdsArray = [other.sessionIdsArray copy];
    } else {
      [resultUnRegisterRoomsNotificationRequest.sessionIdsArray appendArray:other.sessionIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnRegisterRoomsNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnRegisterRoomsNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultUnRegisterRoomsNotificationRequest.sessionIdsArray == nil) {
          resultUnRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultUnRegisterRoomsNotificationRequest.sessionIdsArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (PBAppendableArray *)sessionIds {
  return resultUnRegisterRoomsNotificationRequest.sessionIdsArray;
}
- (SInt32)sessionIdsAtIndex:(NSUInteger)index {
  return [resultUnRegisterRoomsNotificationRequest sessionIdsAtIndex:index];
}
- (UnRegisterRoomsNotificationRequestBuilder *)addSessionIds:(SInt32)value {
  if (resultUnRegisterRoomsNotificationRequest.sessionIdsArray == nil) {
    resultUnRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultUnRegisterRoomsNotificationRequest.sessionIdsArray addInt32:value];
  return self;
}
- (UnRegisterRoomsNotificationRequestBuilder *)setSessionIdsArray:(NSArray *)array {
  resultUnRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (UnRegisterRoomsNotificationRequestBuilder *)setSessionIdsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultUnRegisterRoomsNotificationRequest.sessionIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (UnRegisterRoomsNotificationRequestBuilder *)clearSessionIds {
  resultUnRegisterRoomsNotificationRequest.sessionIdsArray = nil;
  return self;
}
@end

@interface UnRegisterRoomsNotificationResponse ()
@end

@implementation UnRegisterRoomsNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static UnRegisterRoomsNotificationResponse* defaultUnRegisterRoomsNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [UnRegisterRoomsNotificationResponse class]) {
    defaultUnRegisterRoomsNotificationResponseInstance = [[UnRegisterRoomsNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUnRegisterRoomsNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultUnRegisterRoomsNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UnRegisterRoomsNotificationResponse*) parseFromData:(NSData*) data {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromData:data] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationResponseBuilder*) builder {
  return [[UnRegisterRoomsNotificationResponseBuilder alloc] init];
}
+ (UnRegisterRoomsNotificationResponseBuilder*) builderWithPrototype:(UnRegisterRoomsNotificationResponse*) prototype {
  return [[UnRegisterRoomsNotificationResponse builder] mergeFrom:prototype];
}
- (UnRegisterRoomsNotificationResponseBuilder*) builder {
  return [UnRegisterRoomsNotificationResponse builder];
}
- (UnRegisterRoomsNotificationResponseBuilder*) toBuilder {
  return [UnRegisterRoomsNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UnRegisterRoomsNotificationResponse class]]) {
    return NO;
  }
  UnRegisterRoomsNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UnRegisterRoomsNotificationResponseBuilder()
@property (strong) UnRegisterRoomsNotificationResponse* resultUnRegisterRoomsNotificationResponse;
@end

@implementation UnRegisterRoomsNotificationResponseBuilder
@synthesize resultUnRegisterRoomsNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnRegisterRoomsNotificationResponse = [[UnRegisterRoomsNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnRegisterRoomsNotificationResponse;
}
- (UnRegisterRoomsNotificationResponseBuilder*) clear {
  self.resultUnRegisterRoomsNotificationResponse = [[UnRegisterRoomsNotificationResponse alloc] init];
  return self;
}
- (UnRegisterRoomsNotificationResponseBuilder*) clone {
  return [UnRegisterRoomsNotificationResponse builderWithPrototype:resultUnRegisterRoomsNotificationResponse];
}
- (UnRegisterRoomsNotificationResponse*) defaultInstance {
  return [UnRegisterRoomsNotificationResponse defaultInstance];
}
- (UnRegisterRoomsNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnRegisterRoomsNotificationResponse*) buildPartial {
  UnRegisterRoomsNotificationResponse* returnMe = resultUnRegisterRoomsNotificationResponse;
  self.resultUnRegisterRoomsNotificationResponse = nil;
  return returnMe;
}
- (UnRegisterRoomsNotificationResponseBuilder*) mergeFrom:(UnRegisterRoomsNotificationResponse*) other {
  if (other == [UnRegisterRoomsNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnRegisterRoomsNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnRegisterRoomsNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CallDiceRequest ()
@property SInt32 num;
@property SInt32 dice;
@property BOOL wilds;
@end

@implementation CallDiceRequest

- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) _value_ {
  hasNum_ = !!_value_;
}
@synthesize num;
- (BOOL) hasDice {
  return !!hasDice_;
}
- (void) setHasDice:(BOOL) _value_ {
  hasDice_ = !!_value_;
}
@synthesize dice;
- (BOOL) hasWilds {
  return !!hasWilds_;
}
- (void) setHasWilds:(BOOL) _value_ {
  hasWilds_ = !!_value_;
}
- (BOOL) wilds {
  return !!wilds_;
}
- (void) setWilds:(BOOL) _value_ {
  wilds_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.num = 0;
    self.dice = 0;
    self.wilds = NO;
  }
  return self;
}
static CallDiceRequest* defaultCallDiceRequestInstance = nil;
+ (void) initialize {
  if (self == [CallDiceRequest class]) {
    defaultCallDiceRequestInstance = [[CallDiceRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCallDiceRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultCallDiceRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNum) {
    [output writeInt32:10 value:self.num];
  }
  if (self.hasDice) {
    [output writeInt32:11 value:self.dice];
  }
  if (self.hasWilds) {
    [output writeBool:20 value:self.wilds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNum) {
    size_ += computeInt32Size(10, self.num);
  }
  if (self.hasDice) {
    size_ += computeInt32Size(11, self.dice);
  }
  if (self.hasWilds) {
    size_ += computeBoolSize(20, self.wilds);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CallDiceRequest*) parseFromData:(NSData*) data {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromData:data] build];
}
+ (CallDiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CallDiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromInputStream:input] build];
}
+ (CallDiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CallDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceRequestBuilder*) builder {
  return [[CallDiceRequestBuilder alloc] init];
}
+ (CallDiceRequestBuilder*) builderWithPrototype:(CallDiceRequest*) prototype {
  return [[CallDiceRequest builder] mergeFrom:prototype];
}
- (CallDiceRequestBuilder*) builder {
  return [CallDiceRequest builder];
}
- (CallDiceRequestBuilder*) toBuilder {
  return [CallDiceRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithInteger:self.num]];
  }
  if (self.hasDice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dice", [NSNumber numberWithInteger:self.dice]];
  }
  if (self.hasWilds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wilds", [NSNumber numberWithBool:self.wilds]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CallDiceRequest class]]) {
    return NO;
  }
  CallDiceRequest *otherMessage = other;
  return
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      self.hasDice == otherMessage.hasDice &&
      (!self.hasDice || self.dice == otherMessage.dice) &&
      self.hasWilds == otherMessage.hasWilds &&
      (!self.hasWilds || self.wilds == otherMessage.wilds) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.num] hash];
  }
  if (self.hasDice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dice] hash];
  }
  if (self.hasWilds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.wilds] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CallDiceRequestBuilder()
@property (strong) CallDiceRequest* resultCallDiceRequest;
@end

@implementation CallDiceRequestBuilder
@synthesize resultCallDiceRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCallDiceRequest = [[CallDiceRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCallDiceRequest;
}
- (CallDiceRequestBuilder*) clear {
  self.resultCallDiceRequest = [[CallDiceRequest alloc] init];
  return self;
}
- (CallDiceRequestBuilder*) clone {
  return [CallDiceRequest builderWithPrototype:resultCallDiceRequest];
}
- (CallDiceRequest*) defaultInstance {
  return [CallDiceRequest defaultInstance];
}
- (CallDiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CallDiceRequest*) buildPartial {
  CallDiceRequest* returnMe = resultCallDiceRequest;
  self.resultCallDiceRequest = nil;
  return returnMe;
}
- (CallDiceRequestBuilder*) mergeFrom:(CallDiceRequest*) other {
  if (other == [CallDiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasDice) {
    [self setDice:other.dice];
  }
  if (other.hasWilds) {
    [self setWilds:other.wilds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CallDiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CallDiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 80: {
        [self setNum:[input readInt32]];
        break;
      }
      case 88: {
        [self setDice:[input readInt32]];
        break;
      }
      case 160: {
        [self setWilds:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasNum {
  return resultCallDiceRequest.hasNum;
}
- (SInt32) num {
  return resultCallDiceRequest.num;
}
- (CallDiceRequestBuilder*) setNum:(SInt32) value {
  resultCallDiceRequest.hasNum = YES;
  resultCallDiceRequest.num = value;
  return self;
}
- (CallDiceRequestBuilder*) clearNum {
  resultCallDiceRequest.hasNum = NO;
  resultCallDiceRequest.num = 0;
  return self;
}
- (BOOL) hasDice {
  return resultCallDiceRequest.hasDice;
}
- (SInt32) dice {
  return resultCallDiceRequest.dice;
}
- (CallDiceRequestBuilder*) setDice:(SInt32) value {
  resultCallDiceRequest.hasDice = YES;
  resultCallDiceRequest.dice = value;
  return self;
}
- (CallDiceRequestBuilder*) clearDice {
  resultCallDiceRequest.hasDice = NO;
  resultCallDiceRequest.dice = 0;
  return self;
}
- (BOOL) hasWilds {
  return resultCallDiceRequest.hasWilds;
}
- (BOOL) wilds {
  return resultCallDiceRequest.wilds;
}
- (CallDiceRequestBuilder*) setWilds:(BOOL) value {
  resultCallDiceRequest.hasWilds = YES;
  resultCallDiceRequest.wilds = value;
  return self;
}
- (CallDiceRequestBuilder*) clearWilds {
  resultCallDiceRequest.hasWilds = NO;
  resultCallDiceRequest.wilds = NO;
  return self;
}
@end

@interface CallDiceResponse ()
@end

@implementation CallDiceResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static CallDiceResponse* defaultCallDiceResponseInstance = nil;
+ (void) initialize {
  if (self == [CallDiceResponse class]) {
    defaultCallDiceResponseInstance = [[CallDiceResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCallDiceResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultCallDiceResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CallDiceResponse*) parseFromData:(NSData*) data {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromData:data] build];
}
+ (CallDiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CallDiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromInputStream:input] build];
}
+ (CallDiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CallDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceResponseBuilder*) builder {
  return [[CallDiceResponseBuilder alloc] init];
}
+ (CallDiceResponseBuilder*) builderWithPrototype:(CallDiceResponse*) prototype {
  return [[CallDiceResponse builder] mergeFrom:prototype];
}
- (CallDiceResponseBuilder*) builder {
  return [CallDiceResponse builder];
}
- (CallDiceResponseBuilder*) toBuilder {
  return [CallDiceResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CallDiceResponse class]]) {
    return NO;
  }
  CallDiceResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CallDiceResponseBuilder()
@property (strong) CallDiceResponse* resultCallDiceResponse;
@end

@implementation CallDiceResponseBuilder
@synthesize resultCallDiceResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCallDiceResponse = [[CallDiceResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCallDiceResponse;
}
- (CallDiceResponseBuilder*) clear {
  self.resultCallDiceResponse = [[CallDiceResponse alloc] init];
  return self;
}
- (CallDiceResponseBuilder*) clone {
  return [CallDiceResponse builderWithPrototype:resultCallDiceResponse];
}
- (CallDiceResponse*) defaultInstance {
  return [CallDiceResponse defaultInstance];
}
- (CallDiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CallDiceResponse*) buildPartial {
  CallDiceResponse* returnMe = resultCallDiceResponse;
  self.resultCallDiceResponse = nil;
  return returnMe;
}
- (CallDiceResponseBuilder*) mergeFrom:(CallDiceResponse*) other {
  if (other == [CallDiceResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CallDiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CallDiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface OpenDiceRequest ()
@property SInt32 openType;
@property SInt32 multiple;
@end

@implementation OpenDiceRequest

- (BOOL) hasOpenType {
  return !!hasOpenType_;
}
- (void) setHasOpenType:(BOOL) _value_ {
  hasOpenType_ = !!_value_;
}
@synthesize openType;
- (BOOL) hasMultiple {
  return !!hasMultiple_;
}
- (void) setHasMultiple:(BOOL) _value_ {
  hasMultiple_ = !!_value_;
}
@synthesize multiple;
- (instancetype) init {
  if ((self = [super init])) {
    self.openType = 0;
    self.multiple = 1;
  }
  return self;
}
static OpenDiceRequest* defaultOpenDiceRequestInstance = nil;
+ (void) initialize {
  if (self == [OpenDiceRequest class]) {
    defaultOpenDiceRequestInstance = [[OpenDiceRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOpenDiceRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultOpenDiceRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOpenType) {
    [output writeInt32:1 value:self.openType];
  }
  if (self.hasMultiple) {
    [output writeInt32:2 value:self.multiple];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOpenType) {
    size_ += computeInt32Size(1, self.openType);
  }
  if (self.hasMultiple) {
    size_ += computeInt32Size(2, self.multiple);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OpenDiceRequest*) parseFromData:(NSData*) data {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromData:data] build];
}
+ (OpenDiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromInputStream:input] build];
}
+ (OpenDiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (OpenDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceRequestBuilder*) builder {
  return [[OpenDiceRequestBuilder alloc] init];
}
+ (OpenDiceRequestBuilder*) builderWithPrototype:(OpenDiceRequest*) prototype {
  return [[OpenDiceRequest builder] mergeFrom:prototype];
}
- (OpenDiceRequestBuilder*) builder {
  return [OpenDiceRequest builder];
}
- (OpenDiceRequestBuilder*) toBuilder {
  return [OpenDiceRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOpenType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openType", [NSNumber numberWithInteger:self.openType]];
  }
  if (self.hasMultiple) {
    [output appendFormat:@"%@%@: %@\n", indent, @"multiple", [NSNumber numberWithInteger:self.multiple]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OpenDiceRequest class]]) {
    return NO;
  }
  OpenDiceRequest *otherMessage = other;
  return
      self.hasOpenType == otherMessage.hasOpenType &&
      (!self.hasOpenType || self.openType == otherMessage.openType) &&
      self.hasMultiple == otherMessage.hasMultiple &&
      (!self.hasMultiple || self.multiple == otherMessage.multiple) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOpenType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.openType] hash];
  }
  if (self.hasMultiple) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.multiple] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OpenDiceRequestBuilder()
@property (strong) OpenDiceRequest* resultOpenDiceRequest;
@end

@implementation OpenDiceRequestBuilder
@synthesize resultOpenDiceRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOpenDiceRequest = [[OpenDiceRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOpenDiceRequest;
}
- (OpenDiceRequestBuilder*) clear {
  self.resultOpenDiceRequest = [[OpenDiceRequest alloc] init];
  return self;
}
- (OpenDiceRequestBuilder*) clone {
  return [OpenDiceRequest builderWithPrototype:resultOpenDiceRequest];
}
- (OpenDiceRequest*) defaultInstance {
  return [OpenDiceRequest defaultInstance];
}
- (OpenDiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OpenDiceRequest*) buildPartial {
  OpenDiceRequest* returnMe = resultOpenDiceRequest;
  self.resultOpenDiceRequest = nil;
  return returnMe;
}
- (OpenDiceRequestBuilder*) mergeFrom:(OpenDiceRequest*) other {
  if (other == [OpenDiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasOpenType) {
    [self setOpenType:other.openType];
  }
  if (other.hasMultiple) {
    [self setMultiple:other.multiple];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OpenDiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OpenDiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOpenType:[input readInt32]];
        break;
      }
      case 16: {
        [self setMultiple:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOpenType {
  return resultOpenDiceRequest.hasOpenType;
}
- (SInt32) openType {
  return resultOpenDiceRequest.openType;
}
- (OpenDiceRequestBuilder*) setOpenType:(SInt32) value {
  resultOpenDiceRequest.hasOpenType = YES;
  resultOpenDiceRequest.openType = value;
  return self;
}
- (OpenDiceRequestBuilder*) clearOpenType {
  resultOpenDiceRequest.hasOpenType = NO;
  resultOpenDiceRequest.openType = 0;
  return self;
}
- (BOOL) hasMultiple {
  return resultOpenDiceRequest.hasMultiple;
}
- (SInt32) multiple {
  return resultOpenDiceRequest.multiple;
}
- (OpenDiceRequestBuilder*) setMultiple:(SInt32) value {
  resultOpenDiceRequest.hasMultiple = YES;
  resultOpenDiceRequest.multiple = value;
  return self;
}
- (OpenDiceRequestBuilder*) clearMultiple {
  resultOpenDiceRequest.hasMultiple = NO;
  resultOpenDiceRequest.multiple = 1;
  return self;
}
@end

@interface OpenDiceResponse ()
@end

@implementation OpenDiceResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static OpenDiceResponse* defaultOpenDiceResponseInstance = nil;
+ (void) initialize {
  if (self == [OpenDiceResponse class]) {
    defaultOpenDiceResponseInstance = [[OpenDiceResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOpenDiceResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultOpenDiceResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OpenDiceResponse*) parseFromData:(NSData*) data {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromData:data] build];
}
+ (OpenDiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromInputStream:input] build];
}
+ (OpenDiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (OpenDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceResponseBuilder*) builder {
  return [[OpenDiceResponseBuilder alloc] init];
}
+ (OpenDiceResponseBuilder*) builderWithPrototype:(OpenDiceResponse*) prototype {
  return [[OpenDiceResponse builder] mergeFrom:prototype];
}
- (OpenDiceResponseBuilder*) builder {
  return [OpenDiceResponse builder];
}
- (OpenDiceResponseBuilder*) toBuilder {
  return [OpenDiceResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OpenDiceResponse class]]) {
    return NO;
  }
  OpenDiceResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OpenDiceResponseBuilder()
@property (strong) OpenDiceResponse* resultOpenDiceResponse;
@end

@implementation OpenDiceResponseBuilder
@synthesize resultOpenDiceResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOpenDiceResponse = [[OpenDiceResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOpenDiceResponse;
}
- (OpenDiceResponseBuilder*) clear {
  self.resultOpenDiceResponse = [[OpenDiceResponse alloc] init];
  return self;
}
- (OpenDiceResponseBuilder*) clone {
  return [OpenDiceResponse builderWithPrototype:resultOpenDiceResponse];
}
- (OpenDiceResponse*) defaultInstance {
  return [OpenDiceResponse defaultInstance];
}
- (OpenDiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OpenDiceResponse*) buildPartial {
  OpenDiceResponse* returnMe = resultOpenDiceResponse;
  self.resultOpenDiceResponse = nil;
  return returnMe;
}
- (OpenDiceResponseBuilder*) mergeFrom:(OpenDiceResponse*) other {
  if (other == [OpenDiceResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OpenDiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OpenDiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface UseItemRequest ()
@property SInt32 itemId;
@property SInt32 extendTime;
@property SInt32 direction;
@property (strong) NSString* nextPlayUserId;
@property BOOL decreaseTimeForNextPlayUser;
@end

@implementation UseItemRequest

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) _value_ {
  hasItemId_ = !!_value_;
}
@synthesize itemId;
- (BOOL) hasExtendTime {
  return !!hasExtendTime_;
}
- (void) setHasExtendTime:(BOOL) _value_ {
  hasExtendTime_ = !!_value_;
}
@synthesize extendTime;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) _value_ {
  hasNextPlayUserId_ = !!_value_;
}
@synthesize nextPlayUserId;
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return !!hasDecreaseTimeForNextPlayUser_;
}
- (void) setHasDecreaseTimeForNextPlayUser:(BOOL) _value_ {
  hasDecreaseTimeForNextPlayUser_ = !!_value_;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return !!decreaseTimeForNextPlayUser_;
}
- (void) setDecreaseTimeForNextPlayUser:(BOOL) _value_ {
  decreaseTimeForNextPlayUser_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.extendTime = 0;
    self.direction = 0;
    self.nextPlayUserId = @"";
    self.decreaseTimeForNextPlayUser = NO;
  }
  return self;
}
static UseItemRequest* defaultUseItemRequestInstance = nil;
+ (void) initialize {
  if (self == [UseItemRequest class]) {
    defaultUseItemRequestInstance = [[UseItemRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUseItemRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultUseItemRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasDirection) {
    [output writeInt32:22 value:self.direction];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:23 value:self.nextPlayUserId];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    [output writeBool:24 value:self.decreaseTimeForNextPlayUser];
  }
  if (self.hasExtendTime) {
    [output writeInt32:100 value:self.extendTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeInt32Size(1, self.itemId);
  }
  if (self.hasDirection) {
    size_ += computeInt32Size(22, self.direction);
  }
  if (self.hasNextPlayUserId) {
    size_ += computeStringSize(23, self.nextPlayUserId);
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    size_ += computeBoolSize(24, self.decreaseTimeForNextPlayUser);
  }
  if (self.hasExtendTime) {
    size_ += computeInt32Size(100, self.extendTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UseItemRequest*) parseFromData:(NSData*) data {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromData:data] build];
}
+ (UseItemRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UseItemRequest*) parseFromInputStream:(NSInputStream*) input {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromInputStream:input] build];
}
+ (UseItemRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromCodedInputStream:input] build];
}
+ (UseItemRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemRequestBuilder*) builder {
  return [[UseItemRequestBuilder alloc] init];
}
+ (UseItemRequestBuilder*) builderWithPrototype:(UseItemRequest*) prototype {
  return [[UseItemRequest builder] mergeFrom:prototype];
}
- (UseItemRequestBuilder*) builder {
  return [UseItemRequest builder];
}
- (UseItemRequestBuilder*) toBuilder {
  return [UseItemRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInteger:self.itemId]];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", [NSNumber numberWithInteger:self.direction]];
  }
  if (self.hasNextPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPlayUserId", self.nextPlayUserId];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"decreaseTimeForNextPlayUser", [NSNumber numberWithBool:self.decreaseTimeForNextPlayUser]];
  }
  if (self.hasExtendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extendTime", [NSNumber numberWithInteger:self.extendTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UseItemRequest class]]) {
    return NO;
  }
  UseItemRequest *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || self.direction == otherMessage.direction) &&
      self.hasNextPlayUserId == otherMessage.hasNextPlayUserId &&
      (!self.hasNextPlayUserId || [self.nextPlayUserId isEqual:otherMessage.nextPlayUserId]) &&
      self.hasDecreaseTimeForNextPlayUser == otherMessage.hasDecreaseTimeForNextPlayUser &&
      (!self.hasDecreaseTimeForNextPlayUser || self.decreaseTimeForNextPlayUser == otherMessage.decreaseTimeForNextPlayUser) &&
      self.hasExtendTime == otherMessage.hasExtendTime &&
      (!self.hasExtendTime || self.extendTime == otherMessage.extendTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemId] hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.direction] hash];
  }
  if (self.hasNextPlayUserId) {
    hashCode = hashCode * 31 + [self.nextPlayUserId hash];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.decreaseTimeForNextPlayUser] hash];
  }
  if (self.hasExtendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.extendTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UseItemRequestBuilder()
@property (strong) UseItemRequest* resultUseItemRequest;
@end

@implementation UseItemRequestBuilder
@synthesize resultUseItemRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUseItemRequest = [[UseItemRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUseItemRequest;
}
- (UseItemRequestBuilder*) clear {
  self.resultUseItemRequest = [[UseItemRequest alloc] init];
  return self;
}
- (UseItemRequestBuilder*) clone {
  return [UseItemRequest builderWithPrototype:resultUseItemRequest];
}
- (UseItemRequest*) defaultInstance {
  return [UseItemRequest defaultInstance];
}
- (UseItemRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UseItemRequest*) buildPartial {
  UseItemRequest* returnMe = resultUseItemRequest;
  self.resultUseItemRequest = nil;
  return returnMe;
}
- (UseItemRequestBuilder*) mergeFrom:(UseItemRequest*) other {
  if (other == [UseItemRequest defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasExtendTime) {
    [self setExtendTime:other.extendTime];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasDecreaseTimeForNextPlayUser) {
    [self setDecreaseTimeForNextPlayUser:other.decreaseTimeForNextPlayUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UseItemRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UseItemRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 176: {
        [self setDirection:[input readInt32]];
        break;
      }
      case 186: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 192: {
        [self setDecreaseTimeForNextPlayUser:[input readBool]];
        break;
      }
      case 800: {
        [self setExtendTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return resultUseItemRequest.hasItemId;
}
- (SInt32) itemId {
  return resultUseItemRequest.itemId;
}
- (UseItemRequestBuilder*) setItemId:(SInt32) value {
  resultUseItemRequest.hasItemId = YES;
  resultUseItemRequest.itemId = value;
  return self;
}
- (UseItemRequestBuilder*) clearItemId {
  resultUseItemRequest.hasItemId = NO;
  resultUseItemRequest.itemId = 0;
  return self;
}
- (BOOL) hasExtendTime {
  return resultUseItemRequest.hasExtendTime;
}
- (SInt32) extendTime {
  return resultUseItemRequest.extendTime;
}
- (UseItemRequestBuilder*) setExtendTime:(SInt32) value {
  resultUseItemRequest.hasExtendTime = YES;
  resultUseItemRequest.extendTime = value;
  return self;
}
- (UseItemRequestBuilder*) clearExtendTime {
  resultUseItemRequest.hasExtendTime = NO;
  resultUseItemRequest.extendTime = 0;
  return self;
}
- (BOOL) hasDirection {
  return resultUseItemRequest.hasDirection;
}
- (SInt32) direction {
  return resultUseItemRequest.direction;
}
- (UseItemRequestBuilder*) setDirection:(SInt32) value {
  resultUseItemRequest.hasDirection = YES;
  resultUseItemRequest.direction = value;
  return self;
}
- (UseItemRequestBuilder*) clearDirection {
  resultUseItemRequest.hasDirection = NO;
  resultUseItemRequest.direction = 0;
  return self;
}
- (BOOL) hasNextPlayUserId {
  return resultUseItemRequest.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return resultUseItemRequest.nextPlayUserId;
}
- (UseItemRequestBuilder*) setNextPlayUserId:(NSString*) value {
  resultUseItemRequest.hasNextPlayUserId = YES;
  resultUseItemRequest.nextPlayUserId = value;
  return self;
}
- (UseItemRequestBuilder*) clearNextPlayUserId {
  resultUseItemRequest.hasNextPlayUserId = NO;
  resultUseItemRequest.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return resultUseItemRequest.hasDecreaseTimeForNextPlayUser;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return resultUseItemRequest.decreaseTimeForNextPlayUser;
}
- (UseItemRequestBuilder*) setDecreaseTimeForNextPlayUser:(BOOL) value {
  resultUseItemRequest.hasDecreaseTimeForNextPlayUser = YES;
  resultUseItemRequest.decreaseTimeForNextPlayUser = value;
  return self;
}
- (UseItemRequestBuilder*) clearDecreaseTimeForNextPlayUser {
  resultUseItemRequest.hasDecreaseTimeForNextPlayUser = NO;
  resultUseItemRequest.decreaseTimeForNextPlayUser = NO;
  return self;
}
@end

@interface UseItemResponse ()
@property SInt32 itemId;
@property (strong) NSMutableArray * dicesArray;
@property (strong) PBDiceAction* action;
@property SInt32 direction;
@property (strong) NSString* nextPlayUserId;
@property BOOL decreaseTimeForNextPlayUser;
@end

@implementation UseItemResponse

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) _value_ {
  hasItemId_ = !!_value_;
}
@synthesize itemId;
@synthesize dicesArray;
@dynamic dices;
- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) _value_ {
  hasAction_ = !!_value_;
}
@synthesize action;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) _value_ {
  hasNextPlayUserId_ = !!_value_;
}
@synthesize nextPlayUserId;
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return !!hasDecreaseTimeForNextPlayUser_;
}
- (void) setHasDecreaseTimeForNextPlayUser:(BOOL) _value_ {
  hasDecreaseTimeForNextPlayUser_ = !!_value_;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return !!decreaseTimeForNextPlayUser_;
}
- (void) setDecreaseTimeForNextPlayUser:(BOOL) _value_ {
  decreaseTimeForNextPlayUser_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.action = [PBDiceAction defaultInstance];
    self.direction = 0;
    self.nextPlayUserId = @"";
    self.decreaseTimeForNextPlayUser = NO;
  }
  return self;
}
static UseItemResponse* defaultUseItemResponseInstance = nil;
+ (void) initialize {
  if (self == [UseItemResponse class]) {
    defaultUseItemResponseInstance = [[UseItemResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUseItemResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultUseItemResponseInstance;
}
- (NSArray *)dices {
  return dicesArray;
}
- (PBDice*)dicesAtIndex:(NSUInteger)index {
  return [dicesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  __block BOOL isInitdices = YES;
   [self.dices enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdices = NO;
      *stop = YES;
    }
  }];
  if (!isInitdices) return isInitdices;
  if (self.hasAction) {
    if (!self.action.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:20 value:element];
  }];
  if (self.hasAction) {
    [output writeMessage:21 value:self.action];
  }
  if (self.hasDirection) {
    [output writeInt32:22 value:self.direction];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:23 value:self.nextPlayUserId];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    [output writeBool:24 value:self.decreaseTimeForNextPlayUser];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeInt32Size(1, self.itemId);
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(20, element);
  }];
  if (self.hasAction) {
    size_ += computeMessageSize(21, self.action);
  }
  if (self.hasDirection) {
    size_ += computeInt32Size(22, self.direction);
  }
  if (self.hasNextPlayUserId) {
    size_ += computeStringSize(23, self.nextPlayUserId);
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    size_ += computeBoolSize(24, self.decreaseTimeForNextPlayUser);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UseItemResponse*) parseFromData:(NSData*) data {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromData:data] build];
}
+ (UseItemResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UseItemResponse*) parseFromInputStream:(NSInputStream*) input {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromInputStream:input] build];
}
+ (UseItemResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromCodedInputStream:input] build];
}
+ (UseItemResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemResponseBuilder*) builder {
  return [[UseItemResponseBuilder alloc] init];
}
+ (UseItemResponseBuilder*) builderWithPrototype:(UseItemResponse*) prototype {
  return [[UseItemResponse builder] mergeFrom:prototype];
}
- (UseItemResponseBuilder*) builder {
  return [UseItemResponse builder];
}
- (UseItemResponseBuilder*) toBuilder {
  return [UseItemResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInteger:self.itemId]];
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"dices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAction) {
    [output appendFormat:@"%@%@ {\n", indent, @"action"];
    [self.action writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", [NSNumber numberWithInteger:self.direction]];
  }
  if (self.hasNextPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPlayUserId", self.nextPlayUserId];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"decreaseTimeForNextPlayUser", [NSNumber numberWithBool:self.decreaseTimeForNextPlayUser]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UseItemResponse class]]) {
    return NO;
  }
  UseItemResponse *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      [self.dicesArray isEqualToArray:otherMessage.dicesArray] &&
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || [self.action isEqual:otherMessage.action]) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || self.direction == otherMessage.direction) &&
      self.hasNextPlayUserId == otherMessage.hasNextPlayUserId &&
      (!self.hasNextPlayUserId || [self.nextPlayUserId isEqual:otherMessage.nextPlayUserId]) &&
      self.hasDecreaseTimeForNextPlayUser == otherMessage.hasDecreaseTimeForNextPlayUser &&
      (!self.hasDecreaseTimeForNextPlayUser || self.decreaseTimeForNextPlayUser == otherMessage.decreaseTimeForNextPlayUser) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemId] hash];
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAction) {
    hashCode = hashCode * 31 + [self.action hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.direction] hash];
  }
  if (self.hasNextPlayUserId) {
    hashCode = hashCode * 31 + [self.nextPlayUserId hash];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.decreaseTimeForNextPlayUser] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UseItemResponseBuilder()
@property (strong) UseItemResponse* resultUseItemResponse;
@end

@implementation UseItemResponseBuilder
@synthesize resultUseItemResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUseItemResponse = [[UseItemResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUseItemResponse;
}
- (UseItemResponseBuilder*) clear {
  self.resultUseItemResponse = [[UseItemResponse alloc] init];
  return self;
}
- (UseItemResponseBuilder*) clone {
  return [UseItemResponse builderWithPrototype:resultUseItemResponse];
}
- (UseItemResponse*) defaultInstance {
  return [UseItemResponse defaultInstance];
}
- (UseItemResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UseItemResponse*) buildPartial {
  UseItemResponse* returnMe = resultUseItemResponse;
  self.resultUseItemResponse = nil;
  return returnMe;
}
- (UseItemResponseBuilder*) mergeFrom:(UseItemResponse*) other {
  if (other == [UseItemResponse defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.dicesArray.count > 0) {
    if (resultUseItemResponse.dicesArray == nil) {
      resultUseItemResponse.dicesArray = [[NSMutableArray alloc] initWithArray:other.dicesArray];
    } else {
      [resultUseItemResponse.dicesArray addObjectsFromArray:other.dicesArray];
    }
  }
  if (other.hasAction) {
    [self mergeAction:other.action];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasDecreaseTimeForNextPlayUser) {
    [self setDecreaseTimeForNextPlayUser:other.decreaseTimeForNextPlayUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UseItemResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UseItemResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 162: {
        PBDiceBuilder* subBuilder = [PBDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDices:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        PBDiceActionBuilder* subBuilder = [PBDiceAction builder];
        if (self.hasAction) {
          [subBuilder mergeFrom:self.action];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAction:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setDirection:[input readInt32]];
        break;
      }
      case 186: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 192: {
        [self setDecreaseTimeForNextPlayUser:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return resultUseItemResponse.hasItemId;
}
- (SInt32) itemId {
  return resultUseItemResponse.itemId;
}
- (UseItemResponseBuilder*) setItemId:(SInt32) value {
  resultUseItemResponse.hasItemId = YES;
  resultUseItemResponse.itemId = value;
  return self;
}
- (UseItemResponseBuilder*) clearItemId {
  resultUseItemResponse.hasItemId = NO;
  resultUseItemResponse.itemId = 0;
  return self;
}
- (NSMutableArray *)dices {
  return resultUseItemResponse.dicesArray;
}
- (PBDice*)dicesAtIndex:(NSUInteger)index {
  return [resultUseItemResponse dicesAtIndex:index];
}
- (UseItemResponseBuilder *)addDices:(PBDice*)value {
  if (resultUseItemResponse.dicesArray == nil) {
    resultUseItemResponse.dicesArray = [[NSMutableArray alloc]init];
  }
  [resultUseItemResponse.dicesArray addObject:value];
  return self;
}
- (UseItemResponseBuilder *)setDicesArray:(NSArray *)array {
  resultUseItemResponse.dicesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UseItemResponseBuilder *)clearDices {
  resultUseItemResponse.dicesArray = nil;
  return self;
}
- (BOOL) hasAction {
  return resultUseItemResponse.hasAction;
}
- (PBDiceAction*) action {
  return resultUseItemResponse.action;
}
- (UseItemResponseBuilder*) setAction:(PBDiceAction*) value {
  resultUseItemResponse.hasAction = YES;
  resultUseItemResponse.action = value;
  return self;
}
- (UseItemResponseBuilder*) setActionBuilder:(PBDiceActionBuilder*) builderForValue {
  return [self setAction:[builderForValue build]];
}
- (UseItemResponseBuilder*) mergeAction:(PBDiceAction*) value {
  if (resultUseItemResponse.hasAction &&
      resultUseItemResponse.action != [PBDiceAction defaultInstance]) {
    resultUseItemResponse.action =
      [[[PBDiceAction builderWithPrototype:resultUseItemResponse.action] mergeFrom:value] buildPartial];
  } else {
    resultUseItemResponse.action = value;
  }
  resultUseItemResponse.hasAction = YES;
  return self;
}
- (UseItemResponseBuilder*) clearAction {
  resultUseItemResponse.hasAction = NO;
  resultUseItemResponse.action = [PBDiceAction defaultInstance];
  return self;
}
- (BOOL) hasDirection {
  return resultUseItemResponse.hasDirection;
}
- (SInt32) direction {
  return resultUseItemResponse.direction;
}
- (UseItemResponseBuilder*) setDirection:(SInt32) value {
  resultUseItemResponse.hasDirection = YES;
  resultUseItemResponse.direction = value;
  return self;
}
- (UseItemResponseBuilder*) clearDirection {
  resultUseItemResponse.hasDirection = NO;
  resultUseItemResponse.direction = 0;
  return self;
}
- (BOOL) hasNextPlayUserId {
  return resultUseItemResponse.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return resultUseItemResponse.nextPlayUserId;
}
- (UseItemResponseBuilder*) setNextPlayUserId:(NSString*) value {
  resultUseItemResponse.hasNextPlayUserId = YES;
  resultUseItemResponse.nextPlayUserId = value;
  return self;
}
- (UseItemResponseBuilder*) clearNextPlayUserId {
  resultUseItemResponse.hasNextPlayUserId = NO;
  resultUseItemResponse.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return resultUseItemResponse.hasDecreaseTimeForNextPlayUser;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return resultUseItemResponse.decreaseTimeForNextPlayUser;
}
- (UseItemResponseBuilder*) setDecreaseTimeForNextPlayUser:(BOOL) value {
  resultUseItemResponse.hasDecreaseTimeForNextPlayUser = YES;
  resultUseItemResponse.decreaseTimeForNextPlayUser = value;
  return self;
}
- (UseItemResponseBuilder*) clearDecreaseTimeForNextPlayUser {
  resultUseItemResponse.hasDecreaseTimeForNextPlayUser = NO;
  resultUseItemResponse.decreaseTimeForNextPlayUser = NO;
  return self;
}
@end

@interface UserDiceNotification ()
@property (strong) NSMutableArray * userDiceArray;
@property BOOL cleanAll;
@property BOOL isWild;
@end

@implementation UserDiceNotification

@synthesize userDiceArray;
@dynamic userDice;
- (BOOL) hasCleanAll {
  return !!hasCleanAll_;
}
- (void) setHasCleanAll:(BOOL) _value_ {
  hasCleanAll_ = !!_value_;
}
- (BOOL) cleanAll {
  return !!cleanAll_;
}
- (void) setCleanAll:(BOOL) _value_ {
  cleanAll_ = !!_value_;
}
- (BOOL) hasIsWild {
  return !!hasIsWild_;
}
- (void) setHasIsWild:(BOOL) _value_ {
  hasIsWild_ = !!_value_;
}
- (BOOL) isWild {
  return !!isWild_;
}
- (void) setIsWild:(BOOL) _value_ {
  isWild_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.cleanAll = NO;
    self.isWild = NO;
  }
  return self;
}
static UserDiceNotification* defaultUserDiceNotificationInstance = nil;
+ (void) initialize {
  if (self == [UserDiceNotification class]) {
    defaultUserDiceNotificationInstance = [[UserDiceNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserDiceNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultUserDiceNotificationInstance;
}
- (NSArray *)userDice {
  return userDiceArray;
}
- (PBUserDice*)userDiceAtIndex:(NSUInteger)index {
  return [userDiceArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserDice = YES;
   [self.userDice enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserDice = NO;
      *stop = YES;
    }
  }];
  if (!isInituserDice) return isInituserDice;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasCleanAll) {
    [output writeBool:2 value:self.cleanAll];
  }
  if (self.hasIsWild) {
    [output writeBool:3 value:self.isWild];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasCleanAll) {
    size_ += computeBoolSize(2, self.cleanAll);
  }
  if (self.hasIsWild) {
    size_ += computeBoolSize(3, self.isWild);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserDiceNotification*) parseFromData:(NSData*) data {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromData:data] build];
}
+ (UserDiceNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserDiceNotification*) parseFromInputStream:(NSInputStream*) input {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromInputStream:input] build];
}
+ (UserDiceNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserDiceNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromCodedInputStream:input] build];
}
+ (UserDiceNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserDiceNotificationBuilder*) builder {
  return [[UserDiceNotificationBuilder alloc] init];
}
+ (UserDiceNotificationBuilder*) builderWithPrototype:(UserDiceNotification*) prototype {
  return [[UserDiceNotification builder] mergeFrom:prototype];
}
- (UserDiceNotificationBuilder*) builder {
  return [UserDiceNotification builder];
}
- (UserDiceNotificationBuilder*) toBuilder {
  return [UserDiceNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userDice"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCleanAll) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cleanAll", [NSNumber numberWithBool:self.cleanAll]];
  }
  if (self.hasIsWild) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isWild", [NSNumber numberWithBool:self.isWild]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserDiceNotification class]]) {
    return NO;
  }
  UserDiceNotification *otherMessage = other;
  return
      [self.userDiceArray isEqualToArray:otherMessage.userDiceArray] &&
      self.hasCleanAll == otherMessage.hasCleanAll &&
      (!self.hasCleanAll || self.cleanAll == otherMessage.cleanAll) &&
      self.hasIsWild == otherMessage.hasIsWild &&
      (!self.hasIsWild || self.isWild == otherMessage.isWild) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCleanAll) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.cleanAll] hash];
  }
  if (self.hasIsWild) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isWild] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserDiceNotificationBuilder()
@property (strong) UserDiceNotification* resultUserDiceNotification;
@end

@implementation UserDiceNotificationBuilder
@synthesize resultUserDiceNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserDiceNotification = [[UserDiceNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserDiceNotification;
}
- (UserDiceNotificationBuilder*) clear {
  self.resultUserDiceNotification = [[UserDiceNotification alloc] init];
  return self;
}
- (UserDiceNotificationBuilder*) clone {
  return [UserDiceNotification builderWithPrototype:resultUserDiceNotification];
}
- (UserDiceNotification*) defaultInstance {
  return [UserDiceNotification defaultInstance];
}
- (UserDiceNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserDiceNotification*) buildPartial {
  UserDiceNotification* returnMe = resultUserDiceNotification;
  self.resultUserDiceNotification = nil;
  return returnMe;
}
- (UserDiceNotificationBuilder*) mergeFrom:(UserDiceNotification*) other {
  if (other == [UserDiceNotification defaultInstance]) {
    return self;
  }
  if (other.userDiceArray.count > 0) {
    if (resultUserDiceNotification.userDiceArray == nil) {
      resultUserDiceNotification.userDiceArray = [[NSMutableArray alloc] initWithArray:other.userDiceArray];
    } else {
      [resultUserDiceNotification.userDiceArray addObjectsFromArray:other.userDiceArray];
    }
  }
  if (other.hasCleanAll) {
    [self setCleanAll:other.cleanAll];
  }
  if (other.hasIsWild) {
    [self setIsWild:other.isWild];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserDiceNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserDiceNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserDiceBuilder* subBuilder = [PBUserDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserDice:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setCleanAll:[input readBool]];
        break;
      }
      case 24: {
        [self setIsWild:[input readBool]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userDice {
  return resultUserDiceNotification.userDiceArray;
}
- (PBUserDice*)userDiceAtIndex:(NSUInteger)index {
  return [resultUserDiceNotification userDiceAtIndex:index];
}
- (UserDiceNotificationBuilder *)addUserDice:(PBUserDice*)value {
  if (resultUserDiceNotification.userDiceArray == nil) {
    resultUserDiceNotification.userDiceArray = [[NSMutableArray alloc]init];
  }
  [resultUserDiceNotification.userDiceArray addObject:value];
  return self;
}
- (UserDiceNotificationBuilder *)setUserDiceArray:(NSArray *)array {
  resultUserDiceNotification.userDiceArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserDiceNotificationBuilder *)clearUserDice {
  resultUserDiceNotification.userDiceArray = nil;
  return self;
}
- (BOOL) hasCleanAll {
  return resultUserDiceNotification.hasCleanAll;
}
- (BOOL) cleanAll {
  return resultUserDiceNotification.cleanAll;
}
- (UserDiceNotificationBuilder*) setCleanAll:(BOOL) value {
  resultUserDiceNotification.hasCleanAll = YES;
  resultUserDiceNotification.cleanAll = value;
  return self;
}
- (UserDiceNotificationBuilder*) clearCleanAll {
  resultUserDiceNotification.hasCleanAll = NO;
  resultUserDiceNotification.cleanAll = NO;
  return self;
}
- (BOOL) hasIsWild {
  return resultUserDiceNotification.hasIsWild;
}
- (BOOL) isWild {
  return resultUserDiceNotification.isWild;
}
- (UserDiceNotificationBuilder*) setIsWild:(BOOL) value {
  resultUserDiceNotification.hasIsWild = YES;
  resultUserDiceNotification.isWild = value;
  return self;
}
- (UserDiceNotificationBuilder*) clearIsWild {
  resultUserDiceNotification.hasIsWild = NO;
  resultUserDiceNotification.isWild = NO;
  return self;
}
@end

@interface TimeoutSettingRequest ()
@property PBZJHUserAction action;
@end

@implementation TimeoutSettingRequest

- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) _value_ {
  hasAction_ = !!_value_;
}
@synthesize action;
- (instancetype) init {
  if ((self = [super init])) {
    self.action = PBZJHUserActionFoldCard;
  }
  return self;
}
static TimeoutSettingRequest* defaultTimeoutSettingRequestInstance = nil;
+ (void) initialize {
  if (self == [TimeoutSettingRequest class]) {
    defaultTimeoutSettingRequestInstance = [[TimeoutSettingRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTimeoutSettingRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultTimeoutSettingRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAction) {
    [output writeEnum:1 value:self.action];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAction) {
    size_ += computeEnumSize(1, self.action);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TimeoutSettingRequest*) parseFromData:(NSData*) data {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromData:data] build];
}
+ (TimeoutSettingRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingRequest*) parseFromInputStream:(NSInputStream*) input {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromInputStream:input] build];
}
+ (TimeoutSettingRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromCodedInputStream:input] build];
}
+ (TimeoutSettingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingRequestBuilder*) builder {
  return [[TimeoutSettingRequestBuilder alloc] init];
}
+ (TimeoutSettingRequestBuilder*) builderWithPrototype:(TimeoutSettingRequest*) prototype {
  return [[TimeoutSettingRequest builder] mergeFrom:prototype];
}
- (TimeoutSettingRequestBuilder*) builder {
  return [TimeoutSettingRequest builder];
}
- (TimeoutSettingRequestBuilder*) toBuilder {
  return [TimeoutSettingRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"action", NSStringFromPBZJHUserAction(self.action)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TimeoutSettingRequest class]]) {
    return NO;
  }
  TimeoutSettingRequest *otherMessage = other;
  return
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || self.action == otherMessage.action) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAction) {
    hashCode = hashCode * 31 + self.action;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TimeoutSettingRequestBuilder()
@property (strong) TimeoutSettingRequest* resultTimeoutSettingRequest;
@end

@implementation TimeoutSettingRequestBuilder
@synthesize resultTimeoutSettingRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTimeoutSettingRequest = [[TimeoutSettingRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTimeoutSettingRequest;
}
- (TimeoutSettingRequestBuilder*) clear {
  self.resultTimeoutSettingRequest = [[TimeoutSettingRequest alloc] init];
  return self;
}
- (TimeoutSettingRequestBuilder*) clone {
  return [TimeoutSettingRequest builderWithPrototype:resultTimeoutSettingRequest];
}
- (TimeoutSettingRequest*) defaultInstance {
  return [TimeoutSettingRequest defaultInstance];
}
- (TimeoutSettingRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TimeoutSettingRequest*) buildPartial {
  TimeoutSettingRequest* returnMe = resultTimeoutSettingRequest;
  self.resultTimeoutSettingRequest = nil;
  return returnMe;
}
- (TimeoutSettingRequestBuilder*) mergeFrom:(TimeoutSettingRequest*) other {
  if (other == [TimeoutSettingRequest defaultInstance]) {
    return self;
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TimeoutSettingRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TimeoutSettingRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PBZJHUserAction value = (PBZJHUserAction)[input readEnum];
        if (PBZJHUserActionIsValidValue(value)) {
          [self setAction:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasAction {
  return resultTimeoutSettingRequest.hasAction;
}
- (PBZJHUserAction) action {
  return resultTimeoutSettingRequest.action;
}
- (TimeoutSettingRequestBuilder*) setAction:(PBZJHUserAction) value {
  resultTimeoutSettingRequest.hasAction = YES;
  resultTimeoutSettingRequest.action = value;
  return self;
}
- (TimeoutSettingRequestBuilder*) clearAction {
  resultTimeoutSettingRequest.hasAction = NO;
  resultTimeoutSettingRequest.action = PBZJHUserActionFoldCard;
  return self;
}
@end

@interface TimeoutSettingResponse ()
@end

@implementation TimeoutSettingResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TimeoutSettingResponse* defaultTimeoutSettingResponseInstance = nil;
+ (void) initialize {
  if (self == [TimeoutSettingResponse class]) {
    defaultTimeoutSettingResponseInstance = [[TimeoutSettingResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTimeoutSettingResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultTimeoutSettingResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TimeoutSettingResponse*) parseFromData:(NSData*) data {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromData:data] build];
}
+ (TimeoutSettingResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingResponse*) parseFromInputStream:(NSInputStream*) input {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromInputStream:input] build];
}
+ (TimeoutSettingResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromCodedInputStream:input] build];
}
+ (TimeoutSettingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingResponseBuilder*) builder {
  return [[TimeoutSettingResponseBuilder alloc] init];
}
+ (TimeoutSettingResponseBuilder*) builderWithPrototype:(TimeoutSettingResponse*) prototype {
  return [[TimeoutSettingResponse builder] mergeFrom:prototype];
}
- (TimeoutSettingResponseBuilder*) builder {
  return [TimeoutSettingResponse builder];
}
- (TimeoutSettingResponseBuilder*) toBuilder {
  return [TimeoutSettingResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TimeoutSettingResponse class]]) {
    return NO;
  }
  TimeoutSettingResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TimeoutSettingResponseBuilder()
@property (strong) TimeoutSettingResponse* resultTimeoutSettingResponse;
@end

@implementation TimeoutSettingResponseBuilder
@synthesize resultTimeoutSettingResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTimeoutSettingResponse = [[TimeoutSettingResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTimeoutSettingResponse;
}
- (TimeoutSettingResponseBuilder*) clear {
  self.resultTimeoutSettingResponse = [[TimeoutSettingResponse alloc] init];
  return self;
}
- (TimeoutSettingResponseBuilder*) clone {
  return [TimeoutSettingResponse builderWithPrototype:resultTimeoutSettingResponse];
}
- (TimeoutSettingResponse*) defaultInstance {
  return [TimeoutSettingResponse defaultInstance];
}
- (TimeoutSettingResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TimeoutSettingResponse*) buildPartial {
  TimeoutSettingResponse* returnMe = resultTimeoutSettingResponse;
  self.resultTimeoutSettingResponse = nil;
  return returnMe;
}
- (TimeoutSettingResponseBuilder*) mergeFrom:(TimeoutSettingResponse*) other {
  if (other == [TimeoutSettingResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TimeoutSettingResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TimeoutSettingResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BetRequest ()
@property SInt32 singleBet;
@property SInt32 count;
@property BOOL isAutoBet;
@end

@implementation BetRequest

- (BOOL) hasSingleBet {
  return !!hasSingleBet_;
}
- (void) setHasSingleBet:(BOOL) _value_ {
  hasSingleBet_ = !!_value_;
}
@synthesize singleBet;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasIsAutoBet {
  return !!hasIsAutoBet_;
}
- (void) setHasIsAutoBet:(BOOL) _value_ {
  hasIsAutoBet_ = !!_value_;
}
- (BOOL) isAutoBet {
  return !!isAutoBet_;
}
- (void) setIsAutoBet:(BOOL) _value_ {
  isAutoBet_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.singleBet = 0;
    self.count = 1;
    self.isAutoBet = NO;
  }
  return self;
}
static BetRequest* defaultBetRequestInstance = nil;
+ (void) initialize {
  if (self == [BetRequest class]) {
    defaultBetRequestInstance = [[BetRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBetRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBetRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSingleBet) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSingleBet) {
    [output writeInt32:1 value:self.singleBet];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  if (self.hasIsAutoBet) {
    [output writeBool:4 value:self.isAutoBet];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSingleBet) {
    size_ += computeInt32Size(1, self.singleBet);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(2, self.count);
  }
  if (self.hasIsAutoBet) {
    size_ += computeBoolSize(4, self.isAutoBet);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BetRequest*) parseFromData:(NSData*) data {
  return (BetRequest*)[[[BetRequest builder] mergeFromData:data] build];
}
+ (BetRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetRequest*)[[[BetRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BetRequest*)[[[BetRequest builder] mergeFromInputStream:input] build];
}
+ (BetRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetRequest*)[[[BetRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetRequest*)[[[BetRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BetRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetRequest*)[[[BetRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetRequestBuilder*) builder {
  return [[BetRequestBuilder alloc] init];
}
+ (BetRequestBuilder*) builderWithPrototype:(BetRequest*) prototype {
  return [[BetRequest builder] mergeFrom:prototype];
}
- (BetRequestBuilder*) builder {
  return [BetRequest builder];
}
- (BetRequestBuilder*) toBuilder {
  return [BetRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSingleBet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"singleBet", [NSNumber numberWithInteger:self.singleBet]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasIsAutoBet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAutoBet", [NSNumber numberWithBool:self.isAutoBet]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BetRequest class]]) {
    return NO;
  }
  BetRequest *otherMessage = other;
  return
      self.hasSingleBet == otherMessage.hasSingleBet &&
      (!self.hasSingleBet || self.singleBet == otherMessage.singleBet) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasIsAutoBet == otherMessage.hasIsAutoBet &&
      (!self.hasIsAutoBet || self.isAutoBet == otherMessage.isAutoBet) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSingleBet) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.singleBet] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasIsAutoBet) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAutoBet] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BetRequestBuilder()
@property (strong) BetRequest* resultBetRequest;
@end

@implementation BetRequestBuilder
@synthesize resultBetRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBetRequest = [[BetRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBetRequest;
}
- (BetRequestBuilder*) clear {
  self.resultBetRequest = [[BetRequest alloc] init];
  return self;
}
- (BetRequestBuilder*) clone {
  return [BetRequest builderWithPrototype:resultBetRequest];
}
- (BetRequest*) defaultInstance {
  return [BetRequest defaultInstance];
}
- (BetRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetRequest*) buildPartial {
  BetRequest* returnMe = resultBetRequest;
  self.resultBetRequest = nil;
  return returnMe;
}
- (BetRequestBuilder*) mergeFrom:(BetRequest*) other {
  if (other == [BetRequest defaultInstance]) {
    return self;
  }
  if (other.hasSingleBet) {
    [self setSingleBet:other.singleBet];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasIsAutoBet) {
    [self setIsAutoBet:other.isAutoBet];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSingleBet:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
      case 32: {
        [self setIsAutoBet:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSingleBet {
  return resultBetRequest.hasSingleBet;
}
- (SInt32) singleBet {
  return resultBetRequest.singleBet;
}
- (BetRequestBuilder*) setSingleBet:(SInt32) value {
  resultBetRequest.hasSingleBet = YES;
  resultBetRequest.singleBet = value;
  return self;
}
- (BetRequestBuilder*) clearSingleBet {
  resultBetRequest.hasSingleBet = NO;
  resultBetRequest.singleBet = 0;
  return self;
}
- (BOOL) hasCount {
  return resultBetRequest.hasCount;
}
- (SInt32) count {
  return resultBetRequest.count;
}
- (BetRequestBuilder*) setCount:(SInt32) value {
  resultBetRequest.hasCount = YES;
  resultBetRequest.count = value;
  return self;
}
- (BetRequestBuilder*) clearCount {
  resultBetRequest.hasCount = NO;
  resultBetRequest.count = 1;
  return self;
}
- (BOOL) hasIsAutoBet {
  return resultBetRequest.hasIsAutoBet;
}
- (BOOL) isAutoBet {
  return resultBetRequest.isAutoBet;
}
- (BetRequestBuilder*) setIsAutoBet:(BOOL) value {
  resultBetRequest.hasIsAutoBet = YES;
  resultBetRequest.isAutoBet = value;
  return self;
}
- (BetRequestBuilder*) clearIsAutoBet {
  resultBetRequest.hasIsAutoBet = NO;
  resultBetRequest.isAutoBet = NO;
  return self;
}
@end

@interface BetResponse ()
@end

@implementation BetResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BetResponse* defaultBetResponseInstance = nil;
+ (void) initialize {
  if (self == [BetResponse class]) {
    defaultBetResponseInstance = [[BetResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBetResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBetResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BetResponse*) parseFromData:(NSData*) data {
  return (BetResponse*)[[[BetResponse builder] mergeFromData:data] build];
}
+ (BetResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetResponse*)[[[BetResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BetResponse*)[[[BetResponse builder] mergeFromInputStream:input] build];
}
+ (BetResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetResponse*)[[[BetResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetResponse*)[[[BetResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BetResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetResponse*)[[[BetResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetResponseBuilder*) builder {
  return [[BetResponseBuilder alloc] init];
}
+ (BetResponseBuilder*) builderWithPrototype:(BetResponse*) prototype {
  return [[BetResponse builder] mergeFrom:prototype];
}
- (BetResponseBuilder*) builder {
  return [BetResponse builder];
}
- (BetResponseBuilder*) toBuilder {
  return [BetResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BetResponse class]]) {
    return NO;
  }
  BetResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BetResponseBuilder()
@property (strong) BetResponse* resultBetResponse;
@end

@implementation BetResponseBuilder
@synthesize resultBetResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBetResponse = [[BetResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBetResponse;
}
- (BetResponseBuilder*) clear {
  self.resultBetResponse = [[BetResponse alloc] init];
  return self;
}
- (BetResponseBuilder*) clone {
  return [BetResponse builderWithPrototype:resultBetResponse];
}
- (BetResponse*) defaultInstance {
  return [BetResponse defaultInstance];
}
- (BetResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetResponse*) buildPartial {
  BetResponse* returnMe = resultBetResponse;
  self.resultBetResponse = nil;
  return returnMe;
}
- (BetResponseBuilder*) mergeFrom:(BetResponse*) other {
  if (other == [BetResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CheckCardRequest ()
@end

@implementation CheckCardRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static CheckCardRequest* defaultCheckCardRequestInstance = nil;
+ (void) initialize {
  if (self == [CheckCardRequest class]) {
    defaultCheckCardRequestInstance = [[CheckCardRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCheckCardRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultCheckCardRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CheckCardRequest*) parseFromData:(NSData*) data {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromData:data] build];
}
+ (CheckCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromInputStream:input] build];
}
+ (CheckCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CheckCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardRequestBuilder*) builder {
  return [[CheckCardRequestBuilder alloc] init];
}
+ (CheckCardRequestBuilder*) builderWithPrototype:(CheckCardRequest*) prototype {
  return [[CheckCardRequest builder] mergeFrom:prototype];
}
- (CheckCardRequestBuilder*) builder {
  return [CheckCardRequest builder];
}
- (CheckCardRequestBuilder*) toBuilder {
  return [CheckCardRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CheckCardRequest class]]) {
    return NO;
  }
  CheckCardRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CheckCardRequestBuilder()
@property (strong) CheckCardRequest* resultCheckCardRequest;
@end

@implementation CheckCardRequestBuilder
@synthesize resultCheckCardRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCheckCardRequest = [[CheckCardRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCheckCardRequest;
}
- (CheckCardRequestBuilder*) clear {
  self.resultCheckCardRequest = [[CheckCardRequest alloc] init];
  return self;
}
- (CheckCardRequestBuilder*) clone {
  return [CheckCardRequest builderWithPrototype:resultCheckCardRequest];
}
- (CheckCardRequest*) defaultInstance {
  return [CheckCardRequest defaultInstance];
}
- (CheckCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CheckCardRequest*) buildPartial {
  CheckCardRequest* returnMe = resultCheckCardRequest;
  self.resultCheckCardRequest = nil;
  return returnMe;
}
- (CheckCardRequestBuilder*) mergeFrom:(CheckCardRequest*) other {
  if (other == [CheckCardRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CheckCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CheckCardResponse ()
@end

@implementation CheckCardResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static CheckCardResponse* defaultCheckCardResponseInstance = nil;
+ (void) initialize {
  if (self == [CheckCardResponse class]) {
    defaultCheckCardResponseInstance = [[CheckCardResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCheckCardResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultCheckCardResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CheckCardResponse*) parseFromData:(NSData*) data {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromData:data] build];
}
+ (CheckCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromInputStream:input] build];
}
+ (CheckCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CheckCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardResponseBuilder*) builder {
  return [[CheckCardResponseBuilder alloc] init];
}
+ (CheckCardResponseBuilder*) builderWithPrototype:(CheckCardResponse*) prototype {
  return [[CheckCardResponse builder] mergeFrom:prototype];
}
- (CheckCardResponseBuilder*) builder {
  return [CheckCardResponse builder];
}
- (CheckCardResponseBuilder*) toBuilder {
  return [CheckCardResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CheckCardResponse class]]) {
    return NO;
  }
  CheckCardResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CheckCardResponseBuilder()
@property (strong) CheckCardResponse* resultCheckCardResponse;
@end

@implementation CheckCardResponseBuilder
@synthesize resultCheckCardResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCheckCardResponse = [[CheckCardResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCheckCardResponse;
}
- (CheckCardResponseBuilder*) clear {
  self.resultCheckCardResponse = [[CheckCardResponse alloc] init];
  return self;
}
- (CheckCardResponseBuilder*) clone {
  return [CheckCardResponse builderWithPrototype:resultCheckCardResponse];
}
- (CheckCardResponse*) defaultInstance {
  return [CheckCardResponse defaultInstance];
}
- (CheckCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CheckCardResponse*) buildPartial {
  CheckCardResponse* returnMe = resultCheckCardResponse;
  self.resultCheckCardResponse = nil;
  return returnMe;
}
- (CheckCardResponseBuilder*) mergeFrom:(CheckCardResponse*) other {
  if (other == [CheckCardResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CheckCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FoldCardRequest ()
@end

@implementation FoldCardRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FoldCardRequest* defaultFoldCardRequestInstance = nil;
+ (void) initialize {
  if (self == [FoldCardRequest class]) {
    defaultFoldCardRequestInstance = [[FoldCardRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFoldCardRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultFoldCardRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FoldCardRequest*) parseFromData:(NSData*) data {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromData:data] build];
}
+ (FoldCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FoldCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromInputStream:input] build];
}
+ (FoldCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (FoldCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardRequestBuilder*) builder {
  return [[FoldCardRequestBuilder alloc] init];
}
+ (FoldCardRequestBuilder*) builderWithPrototype:(FoldCardRequest*) prototype {
  return [[FoldCardRequest builder] mergeFrom:prototype];
}
- (FoldCardRequestBuilder*) builder {
  return [FoldCardRequest builder];
}
- (FoldCardRequestBuilder*) toBuilder {
  return [FoldCardRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FoldCardRequest class]]) {
    return NO;
  }
  FoldCardRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FoldCardRequestBuilder()
@property (strong) FoldCardRequest* resultFoldCardRequest;
@end

@implementation FoldCardRequestBuilder
@synthesize resultFoldCardRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFoldCardRequest = [[FoldCardRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFoldCardRequest;
}
- (FoldCardRequestBuilder*) clear {
  self.resultFoldCardRequest = [[FoldCardRequest alloc] init];
  return self;
}
- (FoldCardRequestBuilder*) clone {
  return [FoldCardRequest builderWithPrototype:resultFoldCardRequest];
}
- (FoldCardRequest*) defaultInstance {
  return [FoldCardRequest defaultInstance];
}
- (FoldCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FoldCardRequest*) buildPartial {
  FoldCardRequest* returnMe = resultFoldCardRequest;
  self.resultFoldCardRequest = nil;
  return returnMe;
}
- (FoldCardRequestBuilder*) mergeFrom:(FoldCardRequest*) other {
  if (other == [FoldCardRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FoldCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FoldCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FoldCardResponse ()
@end

@implementation FoldCardResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FoldCardResponse* defaultFoldCardResponseInstance = nil;
+ (void) initialize {
  if (self == [FoldCardResponse class]) {
    defaultFoldCardResponseInstance = [[FoldCardResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFoldCardResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultFoldCardResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FoldCardResponse*) parseFromData:(NSData*) data {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromData:data] build];
}
+ (FoldCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FoldCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromInputStream:input] build];
}
+ (FoldCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (FoldCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardResponseBuilder*) builder {
  return [[FoldCardResponseBuilder alloc] init];
}
+ (FoldCardResponseBuilder*) builderWithPrototype:(FoldCardResponse*) prototype {
  return [[FoldCardResponse builder] mergeFrom:prototype];
}
- (FoldCardResponseBuilder*) builder {
  return [FoldCardResponse builder];
}
- (FoldCardResponseBuilder*) toBuilder {
  return [FoldCardResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FoldCardResponse class]]) {
    return NO;
  }
  FoldCardResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FoldCardResponseBuilder()
@property (strong) FoldCardResponse* resultFoldCardResponse;
@end

@implementation FoldCardResponseBuilder
@synthesize resultFoldCardResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFoldCardResponse = [[FoldCardResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFoldCardResponse;
}
- (FoldCardResponseBuilder*) clear {
  self.resultFoldCardResponse = [[FoldCardResponse alloc] init];
  return self;
}
- (FoldCardResponseBuilder*) clone {
  return [FoldCardResponse builderWithPrototype:resultFoldCardResponse];
}
- (FoldCardResponse*) defaultInstance {
  return [FoldCardResponse defaultInstance];
}
- (FoldCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FoldCardResponse*) buildPartial {
  FoldCardResponse* returnMe = resultFoldCardResponse;
  self.resultFoldCardResponse = nil;
  return returnMe;
}
- (FoldCardResponseBuilder*) mergeFrom:(FoldCardResponse*) other {
  if (other == [FoldCardResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FoldCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FoldCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface ShowCardRequest ()
@property (strong) PBAppendableArray * cardIdsArray;
@end

@implementation ShowCardRequest

@synthesize cardIdsArray;
@dynamic cardIds;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ShowCardRequest* defaultShowCardRequestInstance = nil;
+ (void) initialize {
  if (self == [ShowCardRequest class]) {
    defaultShowCardRequestInstance = [[ShowCardRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultShowCardRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultShowCardRequestInstance;
}
- (PBArray *)cardIds {
  return cardIdsArray;
}
- (SInt32)cardIdsAtIndex:(NSUInteger)index {
  return [cardIdsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger cardIdsArrayCount = self.cardIdsArray.count;
  if (cardIdsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.cardIdsArray.data;
    [output writeRawVarint32:10];
    [output writeRawVarint32:cardIdsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < cardIdsArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.cardIdsArray.count;
    const SInt32 *values = (const SInt32 *)self.cardIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    cardIdsMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ShowCardRequest*) parseFromData:(NSData*) data {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromData:data] build];
}
+ (ShowCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ShowCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromInputStream:input] build];
}
+ (ShowCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ShowCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardRequestBuilder*) builder {
  return [[ShowCardRequestBuilder alloc] init];
}
+ (ShowCardRequestBuilder*) builderWithPrototype:(ShowCardRequest*) prototype {
  return [[ShowCardRequest builder] mergeFrom:prototype];
}
- (ShowCardRequestBuilder*) builder {
  return [ShowCardRequest builder];
}
- (ShowCardRequestBuilder*) toBuilder {
  return [ShowCardRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.cardIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ShowCardRequest class]]) {
    return NO;
  }
  ShowCardRequest *otherMessage = other;
  return
      [self.cardIdsArray isEqualToArray:otherMessage.cardIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.cardIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ShowCardRequestBuilder()
@property (strong) ShowCardRequest* resultShowCardRequest;
@end

@implementation ShowCardRequestBuilder
@synthesize resultShowCardRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultShowCardRequest = [[ShowCardRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultShowCardRequest;
}
- (ShowCardRequestBuilder*) clear {
  self.resultShowCardRequest = [[ShowCardRequest alloc] init];
  return self;
}
- (ShowCardRequestBuilder*) clone {
  return [ShowCardRequest builderWithPrototype:resultShowCardRequest];
}
- (ShowCardRequest*) defaultInstance {
  return [ShowCardRequest defaultInstance];
}
- (ShowCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ShowCardRequest*) buildPartial {
  ShowCardRequest* returnMe = resultShowCardRequest;
  self.resultShowCardRequest = nil;
  return returnMe;
}
- (ShowCardRequestBuilder*) mergeFrom:(ShowCardRequest*) other {
  if (other == [ShowCardRequest defaultInstance]) {
    return self;
  }
  if (other.cardIdsArray.count > 0) {
    if (resultShowCardRequest.cardIdsArray == nil) {
      resultShowCardRequest.cardIdsArray = [other.cardIdsArray copy];
    } else {
      [resultShowCardRequest.cardIdsArray appendArray:other.cardIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ShowCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ShowCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultShowCardRequest.cardIdsArray == nil) {
          resultShowCardRequest.cardIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultShowCardRequest.cardIdsArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (PBAppendableArray *)cardIds {
  return resultShowCardRequest.cardIdsArray;
}
- (SInt32)cardIdsAtIndex:(NSUInteger)index {
  return [resultShowCardRequest cardIdsAtIndex:index];
}
- (ShowCardRequestBuilder *)addCardIds:(SInt32)value {
  if (resultShowCardRequest.cardIdsArray == nil) {
    resultShowCardRequest.cardIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultShowCardRequest.cardIdsArray addInt32:value];
  return self;
}
- (ShowCardRequestBuilder *)setCardIdsArray:(NSArray *)array {
  resultShowCardRequest.cardIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (ShowCardRequestBuilder *)setCardIdsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultShowCardRequest.cardIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (ShowCardRequestBuilder *)clearCardIds {
  resultShowCardRequest.cardIdsArray = nil;
  return self;
}
@end

@interface ShowCardResponse ()
@end

@implementation ShowCardResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ShowCardResponse* defaultShowCardResponseInstance = nil;
+ (void) initialize {
  if (self == [ShowCardResponse class]) {
    defaultShowCardResponseInstance = [[ShowCardResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultShowCardResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultShowCardResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ShowCardResponse*) parseFromData:(NSData*) data {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromData:data] build];
}
+ (ShowCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ShowCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromInputStream:input] build];
}
+ (ShowCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ShowCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardResponseBuilder*) builder {
  return [[ShowCardResponseBuilder alloc] init];
}
+ (ShowCardResponseBuilder*) builderWithPrototype:(ShowCardResponse*) prototype {
  return [[ShowCardResponse builder] mergeFrom:prototype];
}
- (ShowCardResponseBuilder*) builder {
  return [ShowCardResponse builder];
}
- (ShowCardResponseBuilder*) toBuilder {
  return [ShowCardResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ShowCardResponse class]]) {
    return NO;
  }
  ShowCardResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ShowCardResponseBuilder()
@property (strong) ShowCardResponse* resultShowCardResponse;
@end

@implementation ShowCardResponseBuilder
@synthesize resultShowCardResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultShowCardResponse = [[ShowCardResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultShowCardResponse;
}
- (ShowCardResponseBuilder*) clear {
  self.resultShowCardResponse = [[ShowCardResponse alloc] init];
  return self;
}
- (ShowCardResponseBuilder*) clone {
  return [ShowCardResponse builderWithPrototype:resultShowCardResponse];
}
- (ShowCardResponse*) defaultInstance {
  return [ShowCardResponse defaultInstance];
}
- (ShowCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ShowCardResponse*) buildPartial {
  ShowCardResponse* returnMe = resultShowCardResponse;
  self.resultShowCardResponse = nil;
  return returnMe;
}
- (ShowCardResponseBuilder*) mergeFrom:(ShowCardResponse*) other {
  if (other == [ShowCardResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ShowCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ShowCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CompareCardRequest ()
@property (strong) NSString* toUserId;
@end

@implementation CompareCardRequest

- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.toUserId = @"";
  }
  return self;
}
static CompareCardRequest* defaultCompareCardRequestInstance = nil;
+ (void) initialize {
  if (self == [CompareCardRequest class]) {
    defaultCompareCardRequestInstance = [[CompareCardRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCompareCardRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultCompareCardRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasToUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasToUserId) {
    [output writeString:1 value:self.toUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasToUserId) {
    size_ += computeStringSize(1, self.toUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CompareCardRequest*) parseFromData:(NSData*) data {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromData:data] build];
}
+ (CompareCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompareCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromInputStream:input] build];
}
+ (CompareCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CompareCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardRequestBuilder*) builder {
  return [[CompareCardRequestBuilder alloc] init];
}
+ (CompareCardRequestBuilder*) builderWithPrototype:(CompareCardRequest*) prototype {
  return [[CompareCardRequest builder] mergeFrom:prototype];
}
- (CompareCardRequestBuilder*) builder {
  return [CompareCardRequest builder];
}
- (CompareCardRequestBuilder*) toBuilder {
  return [CompareCardRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CompareCardRequest class]]) {
    return NO;
  }
  CompareCardRequest *otherMessage = other;
  return
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CompareCardRequestBuilder()
@property (strong) CompareCardRequest* resultCompareCardRequest;
@end

@implementation CompareCardRequestBuilder
@synthesize resultCompareCardRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCompareCardRequest = [[CompareCardRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCompareCardRequest;
}
- (CompareCardRequestBuilder*) clear {
  self.resultCompareCardRequest = [[CompareCardRequest alloc] init];
  return self;
}
- (CompareCardRequestBuilder*) clone {
  return [CompareCardRequest builderWithPrototype:resultCompareCardRequest];
}
- (CompareCardRequest*) defaultInstance {
  return [CompareCardRequest defaultInstance];
}
- (CompareCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompareCardRequest*) buildPartial {
  CompareCardRequest* returnMe = resultCompareCardRequest;
  self.resultCompareCardRequest = nil;
  return returnMe;
}
- (CompareCardRequestBuilder*) mergeFrom:(CompareCardRequest*) other {
  if (other == [CompareCardRequest defaultInstance]) {
    return self;
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompareCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompareCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setToUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasToUserId {
  return resultCompareCardRequest.hasToUserId;
}
- (NSString*) toUserId {
  return resultCompareCardRequest.toUserId;
}
- (CompareCardRequestBuilder*) setToUserId:(NSString*) value {
  resultCompareCardRequest.hasToUserId = YES;
  resultCompareCardRequest.toUserId = value;
  return self;
}
- (CompareCardRequestBuilder*) clearToUserId {
  resultCompareCardRequest.hasToUserId = NO;
  resultCompareCardRequest.toUserId = @"";
  return self;
}
@end

@interface CompareCardResponse ()
@property (strong) NSMutableArray * userResultArray;
@end

@implementation CompareCardResponse

@synthesize userResultArray;
@dynamic userResult;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static CompareCardResponse* defaultCompareCardResponseInstance = nil;
+ (void) initialize {
  if (self == [CompareCardResponse class]) {
    defaultCompareCardResponseInstance = [[CompareCardResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCompareCardResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultCompareCardResponseInstance;
}
- (NSArray *)userResult {
  return userResultArray;
}
- (PBUserResult*)userResultAtIndex:(NSUInteger)index {
  return [userResultArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserResult = YES;
   [self.userResult enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserResult = NO;
      *stop = YES;
    }
  }];
  if (!isInituserResult) return isInituserResult;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CompareCardResponse*) parseFromData:(NSData*) data {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromData:data] build];
}
+ (CompareCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompareCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromInputStream:input] build];
}
+ (CompareCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CompareCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardResponseBuilder*) builder {
  return [[CompareCardResponseBuilder alloc] init];
}
+ (CompareCardResponseBuilder*) builderWithPrototype:(CompareCardResponse*) prototype {
  return [[CompareCardResponse builder] mergeFrom:prototype];
}
- (CompareCardResponseBuilder*) builder {
  return [CompareCardResponse builder];
}
- (CompareCardResponseBuilder*) toBuilder {
  return [CompareCardResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userResult"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CompareCardResponse class]]) {
    return NO;
  }
  CompareCardResponse *otherMessage = other;
  return
      [self.userResultArray isEqualToArray:otherMessage.userResultArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CompareCardResponseBuilder()
@property (strong) CompareCardResponse* resultCompareCardResponse;
@end

@implementation CompareCardResponseBuilder
@synthesize resultCompareCardResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCompareCardResponse = [[CompareCardResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCompareCardResponse;
}
- (CompareCardResponseBuilder*) clear {
  self.resultCompareCardResponse = [[CompareCardResponse alloc] init];
  return self;
}
- (CompareCardResponseBuilder*) clone {
  return [CompareCardResponse builderWithPrototype:resultCompareCardResponse];
}
- (CompareCardResponse*) defaultInstance {
  return [CompareCardResponse defaultInstance];
}
- (CompareCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompareCardResponse*) buildPartial {
  CompareCardResponse* returnMe = resultCompareCardResponse;
  self.resultCompareCardResponse = nil;
  return returnMe;
}
- (CompareCardResponseBuilder*) mergeFrom:(CompareCardResponse*) other {
  if (other == [CompareCardResponse defaultInstance]) {
    return self;
  }
  if (other.userResultArray.count > 0) {
    if (resultCompareCardResponse.userResultArray == nil) {
      resultCompareCardResponse.userResultArray = [[NSMutableArray alloc] initWithArray:other.userResultArray];
    } else {
      [resultCompareCardResponse.userResultArray addObjectsFromArray:other.userResultArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompareCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompareCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PBUserResultBuilder* subBuilder = [PBUserResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResult:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userResult {
  return resultCompareCardResponse.userResultArray;
}
- (PBUserResult*)userResultAtIndex:(NSUInteger)index {
  return [resultCompareCardResponse userResultAtIndex:index];
}
- (CompareCardResponseBuilder *)addUserResult:(PBUserResult*)value {
  if (resultCompareCardResponse.userResultArray == nil) {
    resultCompareCardResponse.userResultArray = [[NSMutableArray alloc]init];
  }
  [resultCompareCardResponse.userResultArray addObject:value];
  return self;
}
- (CompareCardResponseBuilder *)setUserResultArray:(NSArray *)array {
  resultCompareCardResponse.userResultArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CompareCardResponseBuilder *)clearUserResult {
  resultCompareCardResponse.userResultArray = nil;
  return self;
}
@end

@interface ChangeCardRequest ()
@property SInt32 cardId;
@end

@implementation ChangeCardRequest

- (BOOL) hasCardId {
  return !!hasCardId_;
}
- (void) setHasCardId:(BOOL) _value_ {
  hasCardId_ = !!_value_;
}
@synthesize cardId;
- (instancetype) init {
  if ((self = [super init])) {
    self.cardId = 0;
  }
  return self;
}
static ChangeCardRequest* defaultChangeCardRequestInstance = nil;
+ (void) initialize {
  if (self == [ChangeCardRequest class]) {
    defaultChangeCardRequestInstance = [[ChangeCardRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChangeCardRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultChangeCardRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCardId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCardId) {
    [output writeInt32:1 value:self.cardId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCardId) {
    size_ += computeInt32Size(1, self.cardId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChangeCardRequest*) parseFromData:(NSData*) data {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromData:data] build];
}
+ (ChangeCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromInputStream:input] build];
}
+ (ChangeCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ChangeCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardRequestBuilder*) builder {
  return [[ChangeCardRequestBuilder alloc] init];
}
+ (ChangeCardRequestBuilder*) builderWithPrototype:(ChangeCardRequest*) prototype {
  return [[ChangeCardRequest builder] mergeFrom:prototype];
}
- (ChangeCardRequestBuilder*) builder {
  return [ChangeCardRequest builder];
}
- (ChangeCardRequestBuilder*) toBuilder {
  return [ChangeCardRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardId", [NSNumber numberWithInteger:self.cardId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChangeCardRequest class]]) {
    return NO;
  }
  ChangeCardRequest *otherMessage = other;
  return
      self.hasCardId == otherMessage.hasCardId &&
      (!self.hasCardId || self.cardId == otherMessage.cardId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCardId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cardId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChangeCardRequestBuilder()
@property (strong) ChangeCardRequest* resultChangeCardRequest;
@end

@implementation ChangeCardRequestBuilder
@synthesize resultChangeCardRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChangeCardRequest = [[ChangeCardRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChangeCardRequest;
}
- (ChangeCardRequestBuilder*) clear {
  self.resultChangeCardRequest = [[ChangeCardRequest alloc] init];
  return self;
}
- (ChangeCardRequestBuilder*) clone {
  return [ChangeCardRequest builderWithPrototype:resultChangeCardRequest];
}
- (ChangeCardRequest*) defaultInstance {
  return [ChangeCardRequest defaultInstance];
}
- (ChangeCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChangeCardRequest*) buildPartial {
  ChangeCardRequest* returnMe = resultChangeCardRequest;
  self.resultChangeCardRequest = nil;
  return returnMe;
}
- (ChangeCardRequestBuilder*) mergeFrom:(ChangeCardRequest*) other {
  if (other == [ChangeCardRequest defaultInstance]) {
    return self;
  }
  if (other.hasCardId) {
    [self setCardId:other.cardId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChangeCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChangeCardRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCardId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCardId {
  return resultChangeCardRequest.hasCardId;
}
- (SInt32) cardId {
  return resultChangeCardRequest.cardId;
}
- (ChangeCardRequestBuilder*) setCardId:(SInt32) value {
  resultChangeCardRequest.hasCardId = YES;
  resultChangeCardRequest.cardId = value;
  return self;
}
- (ChangeCardRequestBuilder*) clearCardId {
  resultChangeCardRequest.hasCardId = NO;
  resultChangeCardRequest.cardId = 0;
  return self;
}
@end

@interface ChangeCardResponse ()
@property SInt32 oldCardId;
@property (strong) NS_RETURNS_NOT_RETAINED PBPoker* newPoker;
@property PBZJHCardType cardType;
@end

@implementation ChangeCardResponse

- (BOOL) hasOldCardId {
  return !!hasOldCardId_;
}
- (void) setHasOldCardId:(BOOL) _value_ {
  hasOldCardId_ = !!_value_;
}
@synthesize oldCardId;
- (BOOL) hasNewPoker {
  return !!hasNewPoker_;
}
- (void) setHasNewPoker:(BOOL) _value_ {
  hasNewPoker_ = !!_value_;
}
@synthesize newPoker;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (instancetype) init {
  if ((self = [super init])) {
    self.oldCardId = 0;
    self.newPoker = [PBPoker defaultInstance];
    self.cardType = PBZJHCardTypeUnknow;
  }
  return self;
}
static ChangeCardResponse* defaultChangeCardResponseInstance = nil;
+ (void) initialize {
  if (self == [ChangeCardResponse class]) {
    defaultChangeCardResponseInstance = [[ChangeCardResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChangeCardResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultChangeCardResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOldCardId) {
    return NO;
  }
  if (!self.hasNewPoker) {
    return NO;
  }
  if (!self.newPoker.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOldCardId) {
    [output writeInt32:1 value:self.oldCardId];
  }
  if (self.hasNewPoker) {
    [output writeMessage:2 value:self.newPoker];
  }
  if (self.hasCardType) {
    [output writeEnum:3 value:self.cardType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOldCardId) {
    size_ += computeInt32Size(1, self.oldCardId);
  }
  if (self.hasNewPoker) {
    size_ += computeMessageSize(2, self.newPoker);
  }
  if (self.hasCardType) {
    size_ += computeEnumSize(3, self.cardType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChangeCardResponse*) parseFromData:(NSData*) data {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromData:data] build];
}
+ (ChangeCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromInputStream:input] build];
}
+ (ChangeCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ChangeCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardResponseBuilder*) builder {
  return [[ChangeCardResponseBuilder alloc] init];
}
+ (ChangeCardResponseBuilder*) builderWithPrototype:(ChangeCardResponse*) prototype {
  return [[ChangeCardResponse builder] mergeFrom:prototype];
}
- (ChangeCardResponseBuilder*) builder {
  return [ChangeCardResponse builder];
}
- (ChangeCardResponseBuilder*) toBuilder {
  return [ChangeCardResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOldCardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oldCardId", [NSNumber numberWithInteger:self.oldCardId]];
  }
  if (self.hasNewPoker) {
    [output appendFormat:@"%@%@ {\n", indent, @"newPoker"];
    [self.newPoker writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", NSStringFromPBZJHCardType(self.cardType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChangeCardResponse class]]) {
    return NO;
  }
  ChangeCardResponse *otherMessage = other;
  return
      self.hasOldCardId == otherMessage.hasOldCardId &&
      (!self.hasOldCardId || self.oldCardId == otherMessage.oldCardId) &&
      self.hasNewPoker == otherMessage.hasNewPoker &&
      (!self.hasNewPoker || [self.newPoker isEqual:otherMessage.newPoker]) &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || self.cardType == otherMessage.cardType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOldCardId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oldCardId] hash];
  }
  if (self.hasNewPoker) {
    hashCode = hashCode * 31 + [self.newPoker hash];
  }
  if (self.hasCardType) {
    hashCode = hashCode * 31 + self.cardType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChangeCardResponseBuilder()
@property (strong) ChangeCardResponse* resultChangeCardResponse;
@end

@implementation ChangeCardResponseBuilder
@synthesize resultChangeCardResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChangeCardResponse = [[ChangeCardResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChangeCardResponse;
}
- (ChangeCardResponseBuilder*) clear {
  self.resultChangeCardResponse = [[ChangeCardResponse alloc] init];
  return self;
}
- (ChangeCardResponseBuilder*) clone {
  return [ChangeCardResponse builderWithPrototype:resultChangeCardResponse];
}
- (ChangeCardResponse*) defaultInstance {
  return [ChangeCardResponse defaultInstance];
}
- (ChangeCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChangeCardResponse*) buildPartial {
  ChangeCardResponse* returnMe = resultChangeCardResponse;
  self.resultChangeCardResponse = nil;
  return returnMe;
}
- (ChangeCardResponseBuilder*) mergeFrom:(ChangeCardResponse*) other {
  if (other == [ChangeCardResponse defaultInstance]) {
    return self;
  }
  if (other.hasOldCardId) {
    [self setOldCardId:other.oldCardId];
  }
  if (other.hasNewPoker) {
    [self mergeNewPoker:other.newPoker];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChangeCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChangeCardResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOldCardId:[input readInt32]];
        break;
      }
      case 18: {
        PBPokerBuilder* subBuilder = [PBPoker builder];
        if (self.hasNewPoker) {
          [subBuilder mergeFrom:self.newPoker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNewPoker:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        PBZJHCardType value = (PBZJHCardType)[input readEnum];
        if (PBZJHCardTypeIsValidValue(value)) {
          [self setCardType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasOldCardId {
  return resultChangeCardResponse.hasOldCardId;
}
- (SInt32) oldCardId {
  return resultChangeCardResponse.oldCardId;
}
- (ChangeCardResponseBuilder*) setOldCardId:(SInt32) value {
  resultChangeCardResponse.hasOldCardId = YES;
  resultChangeCardResponse.oldCardId = value;
  return self;
}
- (ChangeCardResponseBuilder*) clearOldCardId {
  resultChangeCardResponse.hasOldCardId = NO;
  resultChangeCardResponse.oldCardId = 0;
  return self;
}
- (BOOL) hasNewPoker {
  return resultChangeCardResponse.hasNewPoker;
}
- (PBPoker*) newPoker {
  return resultChangeCardResponse.newPoker;
}
- (ChangeCardResponseBuilder*) setNewPoker:(PBPoker*) value {
  resultChangeCardResponse.hasNewPoker = YES;
  resultChangeCardResponse.newPoker = value;
  return self;
}
- (ChangeCardResponseBuilder*) setNewPokerBuilder:(PBPokerBuilder*) builderForValue {
  return [self setNewPoker:[builderForValue build]];
}
- (ChangeCardResponseBuilder*) mergeNewPoker:(PBPoker*) value {
  if (resultChangeCardResponse.hasNewPoker &&
      resultChangeCardResponse.newPoker != [PBPoker defaultInstance]) {
    resultChangeCardResponse.newPoker =
      [[[PBPoker builderWithPrototype:resultChangeCardResponse.newPoker] mergeFrom:value] buildPartial];
  } else {
    resultChangeCardResponse.newPoker = value;
  }
  resultChangeCardResponse.hasNewPoker = YES;
  return self;
}
- (ChangeCardResponseBuilder*) clearNewPoker {
  resultChangeCardResponse.hasNewPoker = NO;
  resultChangeCardResponse.newPoker = [PBPoker defaultInstance];
  return self;
}
- (BOOL) hasCardType {
  return resultChangeCardResponse.hasCardType;
}
- (PBZJHCardType) cardType {
  return resultChangeCardResponse.cardType;
}
- (ChangeCardResponseBuilder*) setCardType:(PBZJHCardType) value {
  resultChangeCardResponse.hasCardType = YES;
  resultChangeCardResponse.cardType = value;
  return self;
}
- (ChangeCardResponseBuilder*) clearCardType {
  resultChangeCardResponse.hasCardType = NO;
  resultChangeCardResponse.cardType = PBZJHCardTypeUnknow;
  return self;
}
@end

@interface JoinGameRequest ()
@property (strong) NSString* userId;
@property (strong) NSString* gameId;
@property SInt32 autoNew;
@property (strong) NSString* nickName;
@property (strong) NSString* avatar;
@property (strong) PBAppendableArray * excludeSessionIdArray;
@property SInt64 sessionToBeChange;
@property BOOL gender;
@property BOOL isRobot;
@property SInt32 targetSessionId;
@property SInt32 guessDifficultLevel;
@property (strong) NSString* roomId;
@property (strong) NSString* roomName;
@property (strong) NSMutableArray * snsUsersArray;
@property (strong) NSString* location;
@property SInt32 userLevel;
@property (strong) PBGameUser* user;
@property SInt32 ruleType;
@property SInt32 version;
@end

@implementation JoinGameRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasAutoNew {
  return !!hasAutoNew_;
}
- (void) setHasAutoNew:(BOOL) _value_ {
  hasAutoNew_ = !!_value_;
}
@synthesize autoNew;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
@synthesize excludeSessionIdArray;
@dynamic excludeSessionId;
- (BOOL) hasSessionToBeChange {
  return !!hasSessionToBeChange_;
}
- (void) setHasSessionToBeChange:(BOOL) _value_ {
  hasSessionToBeChange_ = !!_value_;
}
@synthesize sessionToBeChange;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) _value_ {
  gender_ = !!_value_;
}
- (BOOL) hasIsRobot {
  return !!hasIsRobot_;
}
- (void) setHasIsRobot:(BOOL) _value_ {
  hasIsRobot_ = !!_value_;
}
- (BOOL) isRobot {
  return !!isRobot_;
}
- (void) setIsRobot:(BOOL) _value_ {
  isRobot_ = !!_value_;
}
- (BOOL) hasTargetSessionId {
  return !!hasTargetSessionId_;
}
- (void) setHasTargetSessionId:(BOOL) _value_ {
  hasTargetSessionId_ = !!_value_;
}
@synthesize targetSessionId;
- (BOOL) hasGuessDifficultLevel {
  return !!hasGuessDifficultLevel_;
}
- (void) setHasGuessDifficultLevel:(BOOL) _value_ {
  hasGuessDifficultLevel_ = !!_value_;
}
@synthesize guessDifficultLevel;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) _value_ {
  hasRoomName_ = !!_value_;
}
@synthesize roomName;
@synthesize snsUsersArray;
@dynamic snsUsers;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) _value_ {
  hasUserLevel_ = !!_value_;
}
@synthesize userLevel;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) _value_ {
  hasRuleType_ = !!_value_;
}
@synthesize ruleType;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.gameId = @"";
    self.autoNew = 0;
    self.nickName = @"";
    self.avatar = @"";
    self.sessionToBeChange = 0L;
    self.gender = NO;
    self.isRobot = NO;
    self.targetSessionId = 0;
    self.guessDifficultLevel = 0;
    self.roomId = @"";
    self.roomName = @"";
    self.location = @"";
    self.userLevel = 0;
    self.user = [PBGameUser defaultInstance];
    self.ruleType = 0;
    self.version = 0;
  }
  return self;
}
static JoinGameRequest* defaultJoinGameRequestInstance = nil;
+ (void) initialize {
  if (self == [JoinGameRequest class]) {
    defaultJoinGameRequestInstance = [[JoinGameRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (PBArray *)excludeSessionId {
  return excludeSessionIdArray;
}
- (SInt64)excludeSessionIdAtIndex:(NSUInteger)index {
  return [excludeSessionIdArray int64AtIndex:index];
}
- (NSArray *)snsUsers {
  return snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [snsUsersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  __block BOOL isInitsnsUsers = YES;
   [self.snsUsers enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsnsUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInitsnsUsers) return isInitsnsUsers;
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasAutoNew) {
    [output writeInt32:3 value:self.autoNew];
  }
  if (self.hasNickName) {
    [output writeString:4 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:5 value:self.avatar];
  }
  const NSUInteger excludeSessionIdArrayCount = self.excludeSessionIdArray.count;
  if (excludeSessionIdArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.excludeSessionIdArray.data;
    for (NSUInteger i = 0; i < excludeSessionIdArrayCount; ++i) {
      [output writeInt64:6 value:values[i]];
    }
  }
  if (self.hasSessionToBeChange) {
    [output writeInt64:7 value:self.sessionToBeChange];
  }
  if (self.hasGender) {
    [output writeBool:8 value:self.gender];
  }
  if (self.hasIsRobot) {
    [output writeBool:9 value:self.isRobot];
  }
  if (self.hasTargetSessionId) {
    [output writeInt32:10 value:self.targetSessionId];
  }
  if (self.hasGuessDifficultLevel) {
    [output writeInt32:11 value:self.guessDifficultLevel];
  }
  if (self.hasRoomId) {
    [output writeString:12 value:self.roomId];
  }
  if (self.hasRoomName) {
    [output writeString:13 value:self.roomName];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:14 value:element];
  }];
  if (self.hasLocation) {
    [output writeString:15 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:16 value:self.userLevel];
  }
  if (self.hasUser) {
    [output writeMessage:100 value:self.user];
  }
  if (self.hasRuleType) {
    [output writeInt32:101 value:self.ruleType];
  }
  if (self.hasVersion) {
    [output writeInt32:102 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasGameId) {
    size_ += computeStringSize(2, self.gameId);
  }
  if (self.hasAutoNew) {
    size_ += computeInt32Size(3, self.autoNew);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(4, self.nickName);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(5, self.avatar);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.excludeSessionIdArray.count;
    const SInt64 *values = (const SInt64 *)self.excludeSessionIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasSessionToBeChange) {
    size_ += computeInt64Size(7, self.sessionToBeChange);
  }
  if (self.hasGender) {
    size_ += computeBoolSize(8, self.gender);
  }
  if (self.hasIsRobot) {
    size_ += computeBoolSize(9, self.isRobot);
  }
  if (self.hasTargetSessionId) {
    size_ += computeInt32Size(10, self.targetSessionId);
  }
  if (self.hasGuessDifficultLevel) {
    size_ += computeInt32Size(11, self.guessDifficultLevel);
  }
  if (self.hasRoomId) {
    size_ += computeStringSize(12, self.roomId);
  }
  if (self.hasRoomName) {
    size_ += computeStringSize(13, self.roomName);
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(14, element);
  }];
  if (self.hasLocation) {
    size_ += computeStringSize(15, self.location);
  }
  if (self.hasUserLevel) {
    size_ += computeInt32Size(16, self.userLevel);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(100, self.user);
  }
  if (self.hasRuleType) {
    size_ += computeInt32Size(101, self.ruleType);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(102, self.version);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (JoinGameRequest*) parseFromData:(NSData*) data {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data] build];
}
+ (JoinGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequestBuilder*) builder {
  return [[JoinGameRequestBuilder alloc] init];
}
+ (JoinGameRequestBuilder*) builderWithPrototype:(JoinGameRequest*) prototype {
  return [[JoinGameRequest builder] mergeFrom:prototype];
}
- (JoinGameRequestBuilder*) builder {
  return [JoinGameRequest builder];
}
- (JoinGameRequestBuilder*) toBuilder {
  return [JoinGameRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", self.gameId];
  }
  if (self.hasAutoNew) {
    [output appendFormat:@"%@%@: %@\n", indent, @"autoNew", [NSNumber numberWithInteger:self.autoNew]];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  [self.excludeSessionIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"excludeSessionId", obj];
  }];
  if (self.hasSessionToBeChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToBeChange", [NSNumber numberWithLongLong:self.sessionToBeChange]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithBool:self.gender]];
  }
  if (self.hasIsRobot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRobot", [NSNumber numberWithBool:self.isRobot]];
  }
  if (self.hasTargetSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetSessionId", [NSNumber numberWithInteger:self.targetSessionId]];
  }
  if (self.hasGuessDifficultLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessDifficultLevel", [NSNumber numberWithInteger:self.guessDifficultLevel]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", self.roomId];
  }
  if (self.hasRoomName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomName", self.roomName];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"snsUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasUserLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userLevel", [NSNumber numberWithInteger:self.userLevel]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRuleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ruleType", [NSNumber numberWithInteger:self.ruleType]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[JoinGameRequest class]]) {
    return NO;
  }
  JoinGameRequest *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || [self.gameId isEqual:otherMessage.gameId]) &&
      self.hasAutoNew == otherMessage.hasAutoNew &&
      (!self.hasAutoNew || self.autoNew == otherMessage.autoNew) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      [self.excludeSessionIdArray isEqualToArray:otherMessage.excludeSessionIdArray] &&
      self.hasSessionToBeChange == otherMessage.hasSessionToBeChange &&
      (!self.hasSessionToBeChange || self.sessionToBeChange == otherMessage.sessionToBeChange) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasIsRobot == otherMessage.hasIsRobot &&
      (!self.hasIsRobot || self.isRobot == otherMessage.isRobot) &&
      self.hasTargetSessionId == otherMessage.hasTargetSessionId &&
      (!self.hasTargetSessionId || self.targetSessionId == otherMessage.targetSessionId) &&
      self.hasGuessDifficultLevel == otherMessage.hasGuessDifficultLevel &&
      (!self.hasGuessDifficultLevel || self.guessDifficultLevel == otherMessage.guessDifficultLevel) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || [self.roomId isEqual:otherMessage.roomId]) &&
      self.hasRoomName == otherMessage.hasRoomName &&
      (!self.hasRoomName || [self.roomName isEqual:otherMessage.roomName]) &&
      [self.snsUsersArray isEqualToArray:otherMessage.snsUsersArray] &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasUserLevel == otherMessage.hasUserLevel &&
      (!self.hasUserLevel || self.userLevel == otherMessage.userLevel) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasRuleType == otherMessage.hasRuleType &&
      (!self.hasRuleType || self.ruleType == otherMessage.ruleType) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [self.gameId hash];
  }
  if (self.hasAutoNew) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.autoNew] hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  [self.excludeSessionIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasSessionToBeChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionToBeChange] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gender] hash];
  }
  if (self.hasIsRobot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isRobot] hash];
  }
  if (self.hasTargetSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.targetSessionId] hash];
  }
  if (self.hasGuessDifficultLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guessDifficultLevel] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [self.roomId hash];
  }
  if (self.hasRoomName) {
    hashCode = hashCode * 31 + [self.roomName hash];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasUserLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userLevel] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasRuleType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ruleType] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface JoinGameRequestBuilder()
@property (strong) JoinGameRequest* resultJoinGameRequest;
@end

@implementation JoinGameRequestBuilder
@synthesize resultJoinGameRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultJoinGameRequest = [[JoinGameRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultJoinGameRequest;
}
- (JoinGameRequestBuilder*) clear {
  self.resultJoinGameRequest = [[JoinGameRequest alloc] init];
  return self;
}
- (JoinGameRequestBuilder*) clone {
  return [JoinGameRequest builderWithPrototype:resultJoinGameRequest];
}
- (JoinGameRequest*) defaultInstance {
  return [JoinGameRequest defaultInstance];
}
- (JoinGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameRequest*) buildPartial {
  JoinGameRequest* returnMe = resultJoinGameRequest;
  self.resultJoinGameRequest = nil;
  return returnMe;
}
- (JoinGameRequestBuilder*) mergeFrom:(JoinGameRequest*) other {
  if (other == [JoinGameRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasAutoNew) {
    [self setAutoNew:other.autoNew];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.excludeSessionIdArray.count > 0) {
    if (resultJoinGameRequest.excludeSessionIdArray == nil) {
      resultJoinGameRequest.excludeSessionIdArray = [other.excludeSessionIdArray copy];
    } else {
      [resultJoinGameRequest.excludeSessionIdArray appendArray:other.excludeSessionIdArray];
    }
  }
  if (other.hasSessionToBeChange) {
    [self setSessionToBeChange:other.sessionToBeChange];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasIsRobot) {
    [self setIsRobot:other.isRobot];
  }
  if (other.hasTargetSessionId) {
    [self setTargetSessionId:other.targetSessionId];
  }
  if (other.hasGuessDifficultLevel) {
    [self setGuessDifficultLevel:other.guessDifficultLevel];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  if (other.snsUsersArray.count > 0) {
    if (resultJoinGameRequest.snsUsersArray == nil) {
      resultJoinGameRequest.snsUsersArray = [[NSMutableArray alloc] initWithArray:other.snsUsersArray];
    } else {
      [resultJoinGameRequest.snsUsersArray addObjectsFromArray:other.snsUsersArray];
    }
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        [self setAutoNew:[input readInt32]];
        break;
      }
      case 34: {
        [self setNickName:[input readString]];
        break;
      }
      case 42: {
        [self setAvatar:[input readString]];
        break;
      }
      case 48: {
        [self addExcludeSessionId:[input readInt64]];
        break;
      }
      case 56: {
        [self setSessionToBeChange:[input readInt64]];
        break;
      }
      case 64: {
        [self setGender:[input readBool]];
        break;
      }
      case 72: {
        [self setIsRobot:[input readBool]];
        break;
      }
      case 80: {
        [self setTargetSessionId:[input readInt32]];
        break;
      }
      case 88: {
        [self setGuessDifficultLevel:[input readInt32]];
        break;
      }
      case 98: {
        [self setRoomId:[input readString]];
        break;
      }
      case 106: {
        [self setRoomName:[input readString]];
        break;
      }
      case 114: {
        PBSNSUserBuilder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        [self setLocation:[input readString]];
        break;
      }
      case 128: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 802: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 808: {
        [self setRuleType:[input readInt32]];
        break;
      }
      case 816: {
        [self setVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultJoinGameRequest.hasUserId;
}
- (NSString*) userId {
  return resultJoinGameRequest.userId;
}
- (JoinGameRequestBuilder*) setUserId:(NSString*) value {
  resultJoinGameRequest.hasUserId = YES;
  resultJoinGameRequest.userId = value;
  return self;
}
- (JoinGameRequestBuilder*) clearUserId {
  resultJoinGameRequest.hasUserId = NO;
  resultJoinGameRequest.userId = @"";
  return self;
}
- (BOOL) hasGameId {
  return resultJoinGameRequest.hasGameId;
}
- (NSString*) gameId {
  return resultJoinGameRequest.gameId;
}
- (JoinGameRequestBuilder*) setGameId:(NSString*) value {
  resultJoinGameRequest.hasGameId = YES;
  resultJoinGameRequest.gameId = value;
  return self;
}
- (JoinGameRequestBuilder*) clearGameId {
  resultJoinGameRequest.hasGameId = NO;
  resultJoinGameRequest.gameId = @"";
  return self;
}
- (BOOL) hasAutoNew {
  return resultJoinGameRequest.hasAutoNew;
}
- (SInt32) autoNew {
  return resultJoinGameRequest.autoNew;
}
- (JoinGameRequestBuilder*) setAutoNew:(SInt32) value {
  resultJoinGameRequest.hasAutoNew = YES;
  resultJoinGameRequest.autoNew = value;
  return self;
}
- (JoinGameRequestBuilder*) clearAutoNew {
  resultJoinGameRequest.hasAutoNew = NO;
  resultJoinGameRequest.autoNew = 0;
  return self;
}
- (BOOL) hasNickName {
  return resultJoinGameRequest.hasNickName;
}
- (NSString*) nickName {
  return resultJoinGameRequest.nickName;
}
- (JoinGameRequestBuilder*) setNickName:(NSString*) value {
  resultJoinGameRequest.hasNickName = YES;
  resultJoinGameRequest.nickName = value;
  return self;
}
- (JoinGameRequestBuilder*) clearNickName {
  resultJoinGameRequest.hasNickName = NO;
  resultJoinGameRequest.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultJoinGameRequest.hasAvatar;
}
- (NSString*) avatar {
  return resultJoinGameRequest.avatar;
}
- (JoinGameRequestBuilder*) setAvatar:(NSString*) value {
  resultJoinGameRequest.hasAvatar = YES;
  resultJoinGameRequest.avatar = value;
  return self;
}
- (JoinGameRequestBuilder*) clearAvatar {
  resultJoinGameRequest.hasAvatar = NO;
  resultJoinGameRequest.avatar = @"";
  return self;
}
- (PBAppendableArray *)excludeSessionId {
  return resultJoinGameRequest.excludeSessionIdArray;
}
- (SInt64)excludeSessionIdAtIndex:(NSUInteger)index {
  return [resultJoinGameRequest excludeSessionIdAtIndex:index];
}
- (JoinGameRequestBuilder *)addExcludeSessionId:(SInt64)value {
  if (resultJoinGameRequest.excludeSessionIdArray == nil) {
    resultJoinGameRequest.excludeSessionIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultJoinGameRequest.excludeSessionIdArray addInt64:value];
  return self;
}
- (JoinGameRequestBuilder *)setExcludeSessionIdArray:(NSArray *)array {
  resultJoinGameRequest.excludeSessionIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (JoinGameRequestBuilder *)setExcludeSessionIdValues:(const SInt64 *)values count:(NSUInteger)count {
  resultJoinGameRequest.excludeSessionIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (JoinGameRequestBuilder *)clearExcludeSessionId {
  resultJoinGameRequest.excludeSessionIdArray = nil;
  return self;
}
- (BOOL) hasSessionToBeChange {
  return resultJoinGameRequest.hasSessionToBeChange;
}
- (SInt64) sessionToBeChange {
  return resultJoinGameRequest.sessionToBeChange;
}
- (JoinGameRequestBuilder*) setSessionToBeChange:(SInt64) value {
  resultJoinGameRequest.hasSessionToBeChange = YES;
  resultJoinGameRequest.sessionToBeChange = value;
  return self;
}
- (JoinGameRequestBuilder*) clearSessionToBeChange {
  resultJoinGameRequest.hasSessionToBeChange = NO;
  resultJoinGameRequest.sessionToBeChange = 0L;
  return self;
}
- (BOOL) hasGender {
  return resultJoinGameRequest.hasGender;
}
- (BOOL) gender {
  return resultJoinGameRequest.gender;
}
- (JoinGameRequestBuilder*) setGender:(BOOL) value {
  resultJoinGameRequest.hasGender = YES;
  resultJoinGameRequest.gender = value;
  return self;
}
- (JoinGameRequestBuilder*) clearGender {
  resultJoinGameRequest.hasGender = NO;
  resultJoinGameRequest.gender = NO;
  return self;
}
- (BOOL) hasIsRobot {
  return resultJoinGameRequest.hasIsRobot;
}
- (BOOL) isRobot {
  return resultJoinGameRequest.isRobot;
}
- (JoinGameRequestBuilder*) setIsRobot:(BOOL) value {
  resultJoinGameRequest.hasIsRobot = YES;
  resultJoinGameRequest.isRobot = value;
  return self;
}
- (JoinGameRequestBuilder*) clearIsRobot {
  resultJoinGameRequest.hasIsRobot = NO;
  resultJoinGameRequest.isRobot = NO;
  return self;
}
- (BOOL) hasTargetSessionId {
  return resultJoinGameRequest.hasTargetSessionId;
}
- (SInt32) targetSessionId {
  return resultJoinGameRequest.targetSessionId;
}
- (JoinGameRequestBuilder*) setTargetSessionId:(SInt32) value {
  resultJoinGameRequest.hasTargetSessionId = YES;
  resultJoinGameRequest.targetSessionId = value;
  return self;
}
- (JoinGameRequestBuilder*) clearTargetSessionId {
  resultJoinGameRequest.hasTargetSessionId = NO;
  resultJoinGameRequest.targetSessionId = 0;
  return self;
}
- (BOOL) hasGuessDifficultLevel {
  return resultJoinGameRequest.hasGuessDifficultLevel;
}
- (SInt32) guessDifficultLevel {
  return resultJoinGameRequest.guessDifficultLevel;
}
- (JoinGameRequestBuilder*) setGuessDifficultLevel:(SInt32) value {
  resultJoinGameRequest.hasGuessDifficultLevel = YES;
  resultJoinGameRequest.guessDifficultLevel = value;
  return self;
}
- (JoinGameRequestBuilder*) clearGuessDifficultLevel {
  resultJoinGameRequest.hasGuessDifficultLevel = NO;
  resultJoinGameRequest.guessDifficultLevel = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultJoinGameRequest.hasRoomId;
}
- (NSString*) roomId {
  return resultJoinGameRequest.roomId;
}
- (JoinGameRequestBuilder*) setRoomId:(NSString*) value {
  resultJoinGameRequest.hasRoomId = YES;
  resultJoinGameRequest.roomId = value;
  return self;
}
- (JoinGameRequestBuilder*) clearRoomId {
  resultJoinGameRequest.hasRoomId = NO;
  resultJoinGameRequest.roomId = @"";
  return self;
}
- (BOOL) hasRoomName {
  return resultJoinGameRequest.hasRoomName;
}
- (NSString*) roomName {
  return resultJoinGameRequest.roomName;
}
- (JoinGameRequestBuilder*) setRoomName:(NSString*) value {
  resultJoinGameRequest.hasRoomName = YES;
  resultJoinGameRequest.roomName = value;
  return self;
}
- (JoinGameRequestBuilder*) clearRoomName {
  resultJoinGameRequest.hasRoomName = NO;
  resultJoinGameRequest.roomName = @"";
  return self;
}
- (NSMutableArray *)snsUsers {
  return resultJoinGameRequest.snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [resultJoinGameRequest snsUsersAtIndex:index];
}
- (JoinGameRequestBuilder *)addSnsUsers:(PBSNSUser*)value {
  if (resultJoinGameRequest.snsUsersArray == nil) {
    resultJoinGameRequest.snsUsersArray = [[NSMutableArray alloc]init];
  }
  [resultJoinGameRequest.snsUsersArray addObject:value];
  return self;
}
- (JoinGameRequestBuilder *)setSnsUsersArray:(NSArray *)array {
  resultJoinGameRequest.snsUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (JoinGameRequestBuilder *)clearSnsUsers {
  resultJoinGameRequest.snsUsersArray = nil;
  return self;
}
- (BOOL) hasLocation {
  return resultJoinGameRequest.hasLocation;
}
- (NSString*) location {
  return resultJoinGameRequest.location;
}
- (JoinGameRequestBuilder*) setLocation:(NSString*) value {
  resultJoinGameRequest.hasLocation = YES;
  resultJoinGameRequest.location = value;
  return self;
}
- (JoinGameRequestBuilder*) clearLocation {
  resultJoinGameRequest.hasLocation = NO;
  resultJoinGameRequest.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return resultJoinGameRequest.hasUserLevel;
}
- (SInt32) userLevel {
  return resultJoinGameRequest.userLevel;
}
- (JoinGameRequestBuilder*) setUserLevel:(SInt32) value {
  resultJoinGameRequest.hasUserLevel = YES;
  resultJoinGameRequest.userLevel = value;
  return self;
}
- (JoinGameRequestBuilder*) clearUserLevel {
  resultJoinGameRequest.hasUserLevel = NO;
  resultJoinGameRequest.userLevel = 0;
  return self;
}
- (BOOL) hasUser {
  return resultJoinGameRequest.hasUser;
}
- (PBGameUser*) user {
  return resultJoinGameRequest.user;
}
- (JoinGameRequestBuilder*) setUser:(PBGameUser*) value {
  resultJoinGameRequest.hasUser = YES;
  resultJoinGameRequest.user = value;
  return self;
}
- (JoinGameRequestBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (JoinGameRequestBuilder*) mergeUser:(PBGameUser*) value {
  if (resultJoinGameRequest.hasUser &&
      resultJoinGameRequest.user != [PBGameUser defaultInstance]) {
    resultJoinGameRequest.user =
      [[[PBGameUser builderWithPrototype:resultJoinGameRequest.user] mergeFrom:value] buildPartial];
  } else {
    resultJoinGameRequest.user = value;
  }
  resultJoinGameRequest.hasUser = YES;
  return self;
}
- (JoinGameRequestBuilder*) clearUser {
  resultJoinGameRequest.hasUser = NO;
  resultJoinGameRequest.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasRuleType {
  return resultJoinGameRequest.hasRuleType;
}
- (SInt32) ruleType {
  return resultJoinGameRequest.ruleType;
}
- (JoinGameRequestBuilder*) setRuleType:(SInt32) value {
  resultJoinGameRequest.hasRuleType = YES;
  resultJoinGameRequest.ruleType = value;
  return self;
}
- (JoinGameRequestBuilder*) clearRuleType {
  resultJoinGameRequest.hasRuleType = NO;
  resultJoinGameRequest.ruleType = 0;
  return self;
}
- (BOOL) hasVersion {
  return resultJoinGameRequest.hasVersion;
}
- (SInt32) version {
  return resultJoinGameRequest.version;
}
- (JoinGameRequestBuilder*) setVersion:(SInt32) value {
  resultJoinGameRequest.hasVersion = YES;
  resultJoinGameRequest.version = value;
  return self;
}
- (JoinGameRequestBuilder*) clearVersion {
  resultJoinGameRequest.hasVersion = NO;
  resultJoinGameRequest.version = 0;
  return self;
}
@end

@interface JoinGameResponse ()
@property (strong) PBGameSession* gameSession;
@property (strong) PBZJHGameState* zjhGameState;
@end

@implementation JoinGameResponse

- (BOOL) hasGameSession {
  return !!hasGameSession_;
}
- (void) setHasGameSession:(BOOL) _value_ {
  hasGameSession_ = !!_value_;
}
@synthesize gameSession;
- (BOOL) hasZjhGameState {
  return !!hasZjhGameState_;
}
- (void) setHasZjhGameState:(BOOL) _value_ {
  hasZjhGameState_ = !!_value_;
}
@synthesize zjhGameState;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameSession = [PBGameSession defaultInstance];
    self.zjhGameState = [PBZJHGameState defaultInstance];
  }
  return self;
}
static JoinGameResponse* defaultJoinGameResponseInstance = nil;
+ (void) initialize {
  if (self == [JoinGameResponse class]) {
    defaultJoinGameResponseInstance = [[JoinGameResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameSession) {
    return NO;
  }
  if (!self.gameSession.isInitialized) {
    return NO;
  }
  if (self.hasZjhGameState) {
    if (!self.zjhGameState.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSession) {
    [output writeMessage:1 value:self.gameSession];
  }
  if (self.hasZjhGameState) {
    [output writeMessage:11 value:self.zjhGameState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameSession) {
    size_ += computeMessageSize(1, self.gameSession);
  }
  if (self.hasZjhGameState) {
    size_ += computeMessageSize(11, self.zjhGameState);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (JoinGameResponse*) parseFromData:(NSData*) data {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data] build];
}
+ (JoinGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponseBuilder*) builder {
  return [[JoinGameResponseBuilder alloc] init];
}
+ (JoinGameResponseBuilder*) builderWithPrototype:(JoinGameResponse*) prototype {
  return [[JoinGameResponse builder] mergeFrom:prototype];
}
- (JoinGameResponseBuilder*) builder {
  return [JoinGameResponse builder];
}
- (JoinGameResponseBuilder*) toBuilder {
  return [JoinGameResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameSession"];
    [self.gameSession writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasZjhGameState) {
    [output appendFormat:@"%@%@ {\n", indent, @"zjhGameState"];
    [self.zjhGameState writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[JoinGameResponse class]]) {
    return NO;
  }
  JoinGameResponse *otherMessage = other;
  return
      self.hasGameSession == otherMessage.hasGameSession &&
      (!self.hasGameSession || [self.gameSession isEqual:otherMessage.gameSession]) &&
      self.hasZjhGameState == otherMessage.hasZjhGameState &&
      (!self.hasZjhGameState || [self.zjhGameState isEqual:otherMessage.zjhGameState]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameSession) {
    hashCode = hashCode * 31 + [self.gameSession hash];
  }
  if (self.hasZjhGameState) {
    hashCode = hashCode * 31 + [self.zjhGameState hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface JoinGameResponseBuilder()
@property (strong) JoinGameResponse* resultJoinGameResponse;
@end

@implementation JoinGameResponseBuilder
@synthesize resultJoinGameResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultJoinGameResponse = [[JoinGameResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultJoinGameResponse;
}
- (JoinGameResponseBuilder*) clear {
  self.resultJoinGameResponse = [[JoinGameResponse alloc] init];
  return self;
}
- (JoinGameResponseBuilder*) clone {
  return [JoinGameResponse builderWithPrototype:resultJoinGameResponse];
}
- (JoinGameResponse*) defaultInstance {
  return [JoinGameResponse defaultInstance];
}
- (JoinGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameResponse*) buildPartial {
  JoinGameResponse* returnMe = resultJoinGameResponse;
  self.resultJoinGameResponse = nil;
  return returnMe;
}
- (JoinGameResponseBuilder*) mergeFrom:(JoinGameResponse*) other {
  if (other == [JoinGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasGameSession) {
    [self mergeGameSession:other.gameSession];
  }
  if (other.hasZjhGameState) {
    [self mergeZjhGameState:other.zjhGameState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSessionBuilder* subBuilder = [PBGameSession builder];
        if (self.hasGameSession) {
          [subBuilder mergeFrom:self.gameSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSession:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        PBZJHGameStateBuilder* subBuilder = [PBZJHGameState builder];
        if (self.hasZjhGameState) {
          [subBuilder mergeFrom:self.zjhGameState];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhGameState:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSession {
  return resultJoinGameResponse.hasGameSession;
}
- (PBGameSession*) gameSession {
  return resultJoinGameResponse.gameSession;
}
- (JoinGameResponseBuilder*) setGameSession:(PBGameSession*) value {
  resultJoinGameResponse.hasGameSession = YES;
  resultJoinGameResponse.gameSession = value;
  return self;
}
- (JoinGameResponseBuilder*) setGameSessionBuilder:(PBGameSessionBuilder*) builderForValue {
  return [self setGameSession:[builderForValue build]];
}
- (JoinGameResponseBuilder*) mergeGameSession:(PBGameSession*) value {
  if (resultJoinGameResponse.hasGameSession &&
      resultJoinGameResponse.gameSession != [PBGameSession defaultInstance]) {
    resultJoinGameResponse.gameSession =
      [[[PBGameSession builderWithPrototype:resultJoinGameResponse.gameSession] mergeFrom:value] buildPartial];
  } else {
    resultJoinGameResponse.gameSession = value;
  }
  resultJoinGameResponse.hasGameSession = YES;
  return self;
}
- (JoinGameResponseBuilder*) clearGameSession {
  resultJoinGameResponse.hasGameSession = NO;
  resultJoinGameResponse.gameSession = [PBGameSession defaultInstance];
  return self;
}
- (BOOL) hasZjhGameState {
  return resultJoinGameResponse.hasZjhGameState;
}
- (PBZJHGameState*) zjhGameState {
  return resultJoinGameResponse.zjhGameState;
}
- (JoinGameResponseBuilder*) setZjhGameState:(PBZJHGameState*) value {
  resultJoinGameResponse.hasZjhGameState = YES;
  resultJoinGameResponse.zjhGameState = value;
  return self;
}
- (JoinGameResponseBuilder*) setZjhGameStateBuilder:(PBZJHGameStateBuilder*) builderForValue {
  return [self setZjhGameState:[builderForValue build]];
}
- (JoinGameResponseBuilder*) mergeZjhGameState:(PBZJHGameState*) value {
  if (resultJoinGameResponse.hasZjhGameState &&
      resultJoinGameResponse.zjhGameState != [PBZJHGameState defaultInstance]) {
    resultJoinGameResponse.zjhGameState =
      [[[PBZJHGameState builderWithPrototype:resultJoinGameResponse.zjhGameState] mergeFrom:value] buildPartial];
  } else {
    resultJoinGameResponse.zjhGameState = value;
  }
  resultJoinGameResponse.hasZjhGameState = YES;
  return self;
}
- (JoinGameResponseBuilder*) clearZjhGameState {
  resultJoinGameResponse.hasZjhGameState = NO;
  resultJoinGameResponse.zjhGameState = [PBZJHGameState defaultInstance];
  return self;
}
@end

@interface StartGameRequest ()
@end

@implementation StartGameRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static StartGameRequest* defaultStartGameRequestInstance = nil;
+ (void) initialize {
  if (self == [StartGameRequest class]) {
    defaultStartGameRequestInstance = [[StartGameRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StartGameRequest*) parseFromData:(NSData*) data {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data] build];
}
+ (StartGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequestBuilder*) builder {
  return [[StartGameRequestBuilder alloc] init];
}
+ (StartGameRequestBuilder*) builderWithPrototype:(StartGameRequest*) prototype {
  return [[StartGameRequest builder] mergeFrom:prototype];
}
- (StartGameRequestBuilder*) builder {
  return [StartGameRequest builder];
}
- (StartGameRequestBuilder*) toBuilder {
  return [StartGameRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StartGameRequest class]]) {
    return NO;
  }
  StartGameRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StartGameRequestBuilder()
@property (strong) StartGameRequest* resultStartGameRequest;
@end

@implementation StartGameRequestBuilder
@synthesize resultStartGameRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStartGameRequest = [[StartGameRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStartGameRequest;
}
- (StartGameRequestBuilder*) clear {
  self.resultStartGameRequest = [[StartGameRequest alloc] init];
  return self;
}
- (StartGameRequestBuilder*) clone {
  return [StartGameRequest builderWithPrototype:resultStartGameRequest];
}
- (StartGameRequest*) defaultInstance {
  return [StartGameRequest defaultInstance];
}
- (StartGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameRequest*) buildPartial {
  StartGameRequest* returnMe = resultStartGameRequest;
  self.resultStartGameRequest = nil;
  return returnMe;
}
- (StartGameRequestBuilder*) mergeFrom:(StartGameRequest*) other {
  if (other == [StartGameRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface StartGameResponse ()
@property (strong) NSString* currentPlayUserId;
@property (strong) NSString* nextPlayUserId;
@end

@implementation StartGameResponse

- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) _value_ {
  hasCurrentPlayUserId_ = !!_value_;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) _value_ {
  hasNextPlayUserId_ = !!_value_;
}
@synthesize nextPlayUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
  }
  return self;
}
static StartGameResponse* defaultStartGameResponseInstance = nil;
+ (void) initialize {
  if (self == [StartGameResponse class]) {
    defaultStartGameResponseInstance = [[StartGameResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCurrentPlayUserId) {
    size_ += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size_ += computeStringSize(6, self.nextPlayUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StartGameResponse*) parseFromData:(NSData*) data {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data] build];
}
+ (StartGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponseBuilder*) builder {
  return [[StartGameResponseBuilder alloc] init];
}
+ (StartGameResponseBuilder*) builderWithPrototype:(StartGameResponse*) prototype {
  return [[StartGameResponse builder] mergeFrom:prototype];
}
- (StartGameResponseBuilder*) builder {
  return [StartGameResponse builder];
}
- (StartGameResponseBuilder*) toBuilder {
  return [StartGameResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCurrentPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPlayUserId", self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPlayUserId", self.nextPlayUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StartGameResponse class]]) {
    return NO;
  }
  StartGameResponse *otherMessage = other;
  return
      self.hasCurrentPlayUserId == otherMessage.hasCurrentPlayUserId &&
      (!self.hasCurrentPlayUserId || [self.currentPlayUserId isEqual:otherMessage.currentPlayUserId]) &&
      self.hasNextPlayUserId == otherMessage.hasNextPlayUserId &&
      (!self.hasNextPlayUserId || [self.nextPlayUserId isEqual:otherMessage.nextPlayUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCurrentPlayUserId) {
    hashCode = hashCode * 31 + [self.currentPlayUserId hash];
  }
  if (self.hasNextPlayUserId) {
    hashCode = hashCode * 31 + [self.nextPlayUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StartGameResponseBuilder()
@property (strong) StartGameResponse* resultStartGameResponse;
@end

@implementation StartGameResponseBuilder
@synthesize resultStartGameResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStartGameResponse = [[StartGameResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStartGameResponse;
}
- (StartGameResponseBuilder*) clear {
  self.resultStartGameResponse = [[StartGameResponse alloc] init];
  return self;
}
- (StartGameResponseBuilder*) clone {
  return [StartGameResponse builderWithPrototype:resultStartGameResponse];
}
- (StartGameResponse*) defaultInstance {
  return [StartGameResponse defaultInstance];
}
- (StartGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameResponse*) buildPartial {
  StartGameResponse* returnMe = resultStartGameResponse;
  self.resultStartGameResponse = nil;
  return returnMe;
}
- (StartGameResponseBuilder*) mergeFrom:(StartGameResponse*) other {
  if (other == [StartGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentPlayUserId {
  return resultStartGameResponse.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return resultStartGameResponse.currentPlayUserId;
}
- (StartGameResponseBuilder*) setCurrentPlayUserId:(NSString*) value {
  resultStartGameResponse.hasCurrentPlayUserId = YES;
  resultStartGameResponse.currentPlayUserId = value;
  return self;
}
- (StartGameResponseBuilder*) clearCurrentPlayUserId {
  resultStartGameResponse.hasCurrentPlayUserId = NO;
  resultStartGameResponse.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return resultStartGameResponse.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return resultStartGameResponse.nextPlayUserId;
}
- (StartGameResponseBuilder*) setNextPlayUserId:(NSString*) value {
  resultStartGameResponse.hasNextPlayUserId = YES;
  resultStartGameResponse.nextPlayUserId = value;
  return self;
}
- (StartGameResponseBuilder*) clearNextPlayUserId {
  resultStartGameResponse.hasNextPlayUserId = NO;
  resultStartGameResponse.nextPlayUserId = @"";
  return self;
}
@end

@interface RoomNotificationRequest ()
@property (strong) NSMutableArray * sessionsChangedArray;
@property (strong) NSMutableArray * sessionsAddedArray;
@property (strong) PBAppendableArray * sessionIdsDeletedArray;
@end

@implementation RoomNotificationRequest

@synthesize sessionsChangedArray;
@dynamic sessionsChanged;
@synthesize sessionsAddedArray;
@dynamic sessionsAdded;
@synthesize sessionIdsDeletedArray;
@dynamic sessionIdsDeleted;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RoomNotificationRequest* defaultRoomNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RoomNotificationRequest class]) {
    defaultRoomNotificationRequestInstance = [[RoomNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomNotificationRequestInstance;
}
- (NSArray *)sessionsChanged {
  return sessionsChangedArray;
}
- (PBGameSessionChanged*)sessionsChangedAtIndex:(NSUInteger)index {
  return [sessionsChangedArray objectAtIndex:index];
}
- (NSArray *)sessionsAdded {
  return sessionsAddedArray;
}
- (PBGameSession*)sessionsAddedAtIndex:(NSUInteger)index {
  return [sessionsAddedArray objectAtIndex:index];
}
- (PBArray *)sessionIdsDeleted {
  return sessionIdsDeletedArray;
}
- (SInt32)sessionIdsDeletedAtIndex:(NSUInteger)index {
  return [sessionIdsDeletedArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitsessionsChanged = YES;
   [self.sessionsChanged enumerateObjectsUsingBlock:^(PBGameSessionChanged *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsessionsChanged = NO;
      *stop = YES;
    }
  }];
  if (!isInitsessionsChanged) return isInitsessionsChanged;
  __block BOOL isInitsessionsAdded = YES;
   [self.sessionsAdded enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsessionsAdded = NO;
      *stop = YES;
    }
  }];
  if (!isInitsessionsAdded) return isInitsessionsAdded;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.sessionsChangedArray enumerateObjectsUsingBlock:^(PBGameSessionChanged *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.sessionsAddedArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  const NSUInteger sessionIdsDeletedArrayCount = self.sessionIdsDeletedArray.count;
  if (sessionIdsDeletedArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.sessionIdsDeletedArray.data;
    for (NSUInteger i = 0; i < sessionIdsDeletedArrayCount; ++i) {
      [output writeInt32:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.sessionsChangedArray enumerateObjectsUsingBlock:^(PBGameSessionChanged *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.sessionsAddedArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionIdsDeletedArray.count;
    const SInt32 *values = (const SInt32 *)self.sessionIdsDeletedArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomNotificationRequest*) parseFromData:(NSData*) data {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromData:data] build];
}
+ (RoomNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RoomNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RoomNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationRequestBuilder*) builder {
  return [[RoomNotificationRequestBuilder alloc] init];
}
+ (RoomNotificationRequestBuilder*) builderWithPrototype:(RoomNotificationRequest*) prototype {
  return [[RoomNotificationRequest builder] mergeFrom:prototype];
}
- (RoomNotificationRequestBuilder*) builder {
  return [RoomNotificationRequest builder];
}
- (RoomNotificationRequestBuilder*) toBuilder {
  return [RoomNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionsChangedArray enumerateObjectsUsingBlock:^(PBGameSessionChanged *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionsChanged"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.sessionsAddedArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionsAdded"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.sessionIdsDeletedArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionIdsDeleted", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomNotificationRequest class]]) {
    return NO;
  }
  RoomNotificationRequest *otherMessage = other;
  return
      [self.sessionsChangedArray isEqualToArray:otherMessage.sessionsChangedArray] &&
      [self.sessionsAddedArray isEqualToArray:otherMessage.sessionsAddedArray] &&
      [self.sessionIdsDeletedArray isEqualToArray:otherMessage.sessionIdsDeletedArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionsChangedArray enumerateObjectsUsingBlock:^(PBGameSessionChanged *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.sessionsAddedArray enumerateObjectsUsingBlock:^(PBGameSession *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.sessionIdsDeletedArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomNotificationRequestBuilder()
@property (strong) RoomNotificationRequest* resultRoomNotificationRequest;
@end

@implementation RoomNotificationRequestBuilder
@synthesize resultRoomNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomNotificationRequest = [[RoomNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomNotificationRequest;
}
- (RoomNotificationRequestBuilder*) clear {
  self.resultRoomNotificationRequest = [[RoomNotificationRequest alloc] init];
  return self;
}
- (RoomNotificationRequestBuilder*) clone {
  return [RoomNotificationRequest builderWithPrototype:resultRoomNotificationRequest];
}
- (RoomNotificationRequest*) defaultInstance {
  return [RoomNotificationRequest defaultInstance];
}
- (RoomNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomNotificationRequest*) buildPartial {
  RoomNotificationRequest* returnMe = resultRoomNotificationRequest;
  self.resultRoomNotificationRequest = nil;
  return returnMe;
}
- (RoomNotificationRequestBuilder*) mergeFrom:(RoomNotificationRequest*) other {
  if (other == [RoomNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.sessionsChangedArray.count > 0) {
    if (resultRoomNotificationRequest.sessionsChangedArray == nil) {
      resultRoomNotificationRequest.sessionsChangedArray = [[NSMutableArray alloc] initWithArray:other.sessionsChangedArray];
    } else {
      [resultRoomNotificationRequest.sessionsChangedArray addObjectsFromArray:other.sessionsChangedArray];
    }
  }
  if (other.sessionsAddedArray.count > 0) {
    if (resultRoomNotificationRequest.sessionsAddedArray == nil) {
      resultRoomNotificationRequest.sessionsAddedArray = [[NSMutableArray alloc] initWithArray:other.sessionsAddedArray];
    } else {
      [resultRoomNotificationRequest.sessionsAddedArray addObjectsFromArray:other.sessionsAddedArray];
    }
  }
  if (other.sessionIdsDeletedArray.count > 0) {
    if (resultRoomNotificationRequest.sessionIdsDeletedArray == nil) {
      resultRoomNotificationRequest.sessionIdsDeletedArray = [other.sessionIdsDeletedArray copy];
    } else {
      [resultRoomNotificationRequest.sessionIdsDeletedArray appendArray:other.sessionIdsDeletedArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSessionChangedBuilder* subBuilder = [PBGameSessionChanged builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessionsChanged:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBGameSessionBuilder* subBuilder = [PBGameSession builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessionsAdded:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self addSessionIdsDeleted:[input readInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)sessionsChanged {
  return resultRoomNotificationRequest.sessionsChangedArray;
}
- (PBGameSessionChanged*)sessionsChangedAtIndex:(NSUInteger)index {
  return [resultRoomNotificationRequest sessionsChangedAtIndex:index];
}
- (RoomNotificationRequestBuilder *)addSessionsChanged:(PBGameSessionChanged*)value {
  if (resultRoomNotificationRequest.sessionsChangedArray == nil) {
    resultRoomNotificationRequest.sessionsChangedArray = [[NSMutableArray alloc]init];
  }
  [resultRoomNotificationRequest.sessionsChangedArray addObject:value];
  return self;
}
- (RoomNotificationRequestBuilder *)setSessionsChangedArray:(NSArray *)array {
  resultRoomNotificationRequest.sessionsChangedArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RoomNotificationRequestBuilder *)clearSessionsChanged {
  resultRoomNotificationRequest.sessionsChangedArray = nil;
  return self;
}
- (NSMutableArray *)sessionsAdded {
  return resultRoomNotificationRequest.sessionsAddedArray;
}
- (PBGameSession*)sessionsAddedAtIndex:(NSUInteger)index {
  return [resultRoomNotificationRequest sessionsAddedAtIndex:index];
}
- (RoomNotificationRequestBuilder *)addSessionsAdded:(PBGameSession*)value {
  if (resultRoomNotificationRequest.sessionsAddedArray == nil) {
    resultRoomNotificationRequest.sessionsAddedArray = [[NSMutableArray alloc]init];
  }
  [resultRoomNotificationRequest.sessionsAddedArray addObject:value];
  return self;
}
- (RoomNotificationRequestBuilder *)setSessionsAddedArray:(NSArray *)array {
  resultRoomNotificationRequest.sessionsAddedArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RoomNotificationRequestBuilder *)clearSessionsAdded {
  resultRoomNotificationRequest.sessionsAddedArray = nil;
  return self;
}
- (PBAppendableArray *)sessionIdsDeleted {
  return resultRoomNotificationRequest.sessionIdsDeletedArray;
}
- (SInt32)sessionIdsDeletedAtIndex:(NSUInteger)index {
  return [resultRoomNotificationRequest sessionIdsDeletedAtIndex:index];
}
- (RoomNotificationRequestBuilder *)addSessionIdsDeleted:(SInt32)value {
  if (resultRoomNotificationRequest.sessionIdsDeletedArray == nil) {
    resultRoomNotificationRequest.sessionIdsDeletedArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultRoomNotificationRequest.sessionIdsDeletedArray addInt32:value];
  return self;
}
- (RoomNotificationRequestBuilder *)setSessionIdsDeletedArray:(NSArray *)array {
  resultRoomNotificationRequest.sessionIdsDeletedArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (RoomNotificationRequestBuilder *)setSessionIdsDeletedValues:(const SInt32 *)values count:(NSUInteger)count {
  resultRoomNotificationRequest.sessionIdsDeletedArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (RoomNotificationRequestBuilder *)clearSessionIdsDeleted {
  resultRoomNotificationRequest.sessionIdsDeletedArray = nil;
  return self;
}
@end

@interface RoomNotificationResponse ()
@end

@implementation RoomNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RoomNotificationResponse* defaultRoomNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RoomNotificationResponse class]) {
    defaultRoomNotificationResponseInstance = [[RoomNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomNotificationResponse*) parseFromData:(NSData*) data {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromData:data] build];
}
+ (RoomNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RoomNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RoomNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationResponseBuilder*) builder {
  return [[RoomNotificationResponseBuilder alloc] init];
}
+ (RoomNotificationResponseBuilder*) builderWithPrototype:(RoomNotificationResponse*) prototype {
  return [[RoomNotificationResponse builder] mergeFrom:prototype];
}
- (RoomNotificationResponseBuilder*) builder {
  return [RoomNotificationResponse builder];
}
- (RoomNotificationResponseBuilder*) toBuilder {
  return [RoomNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomNotificationResponse class]]) {
    return NO;
  }
  RoomNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomNotificationResponseBuilder()
@property (strong) RoomNotificationResponse* resultRoomNotificationResponse;
@end

@implementation RoomNotificationResponseBuilder
@synthesize resultRoomNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomNotificationResponse = [[RoomNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomNotificationResponse;
}
- (RoomNotificationResponseBuilder*) clear {
  self.resultRoomNotificationResponse = [[RoomNotificationResponse alloc] init];
  return self;
}
- (RoomNotificationResponseBuilder*) clone {
  return [RoomNotificationResponse builderWithPrototype:resultRoomNotificationResponse];
}
- (RoomNotificationResponse*) defaultInstance {
  return [RoomNotificationResponse defaultInstance];
}
- (RoomNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomNotificationResponse*) buildPartial {
  RoomNotificationResponse* returnMe = resultRoomNotificationResponse;
  self.resultRoomNotificationResponse = nil;
  return returnMe;
}
- (RoomNotificationResponseBuilder*) mergeFrom:(RoomNotificationResponse*) other {
  if (other == [RoomNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface RollDiceBeginNotificationRequest ()
@end

@implementation RollDiceBeginNotificationRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceBeginNotificationRequest* defaultRollDiceBeginNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RollDiceBeginNotificationRequest class]) {
    defaultRollDiceBeginNotificationRequestInstance = [[RollDiceBeginNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRollDiceBeginNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultRollDiceBeginNotificationRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RollDiceBeginNotificationRequest*) parseFromData:(NSData*) data {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromData:data] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationRequestBuilder*) builder {
  return [[RollDiceBeginNotificationRequestBuilder alloc] init];
}
+ (RollDiceBeginNotificationRequestBuilder*) builderWithPrototype:(RollDiceBeginNotificationRequest*) prototype {
  return [[RollDiceBeginNotificationRequest builder] mergeFrom:prototype];
}
- (RollDiceBeginNotificationRequestBuilder*) builder {
  return [RollDiceBeginNotificationRequest builder];
}
- (RollDiceBeginNotificationRequestBuilder*) toBuilder {
  return [RollDiceBeginNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RollDiceBeginNotificationRequest class]]) {
    return NO;
  }
  RollDiceBeginNotificationRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RollDiceBeginNotificationRequestBuilder()
@property (strong) RollDiceBeginNotificationRequest* resultRollDiceBeginNotificationRequest;
@end

@implementation RollDiceBeginNotificationRequestBuilder
@synthesize resultRollDiceBeginNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRollDiceBeginNotificationRequest = [[RollDiceBeginNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRollDiceBeginNotificationRequest;
}
- (RollDiceBeginNotificationRequestBuilder*) clear {
  self.resultRollDiceBeginNotificationRequest = [[RollDiceBeginNotificationRequest alloc] init];
  return self;
}
- (RollDiceBeginNotificationRequestBuilder*) clone {
  return [RollDiceBeginNotificationRequest builderWithPrototype:resultRollDiceBeginNotificationRequest];
}
- (RollDiceBeginNotificationRequest*) defaultInstance {
  return [RollDiceBeginNotificationRequest defaultInstance];
}
- (RollDiceBeginNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceBeginNotificationRequest*) buildPartial {
  RollDiceBeginNotificationRequest* returnMe = resultRollDiceBeginNotificationRequest;
  self.resultRollDiceBeginNotificationRequest = nil;
  return returnMe;
}
- (RollDiceBeginNotificationRequestBuilder*) mergeFrom:(RollDiceBeginNotificationRequest*) other {
  if (other == [RollDiceBeginNotificationRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceBeginNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceBeginNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface RollDiceBeginNotificationResponse ()
@end

@implementation RollDiceBeginNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceBeginNotificationResponse* defaultRollDiceBeginNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RollDiceBeginNotificationResponse class]) {
    defaultRollDiceBeginNotificationResponseInstance = [[RollDiceBeginNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRollDiceBeginNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultRollDiceBeginNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RollDiceBeginNotificationResponse*) parseFromData:(NSData*) data {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromData:data] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationResponseBuilder*) builder {
  return [[RollDiceBeginNotificationResponseBuilder alloc] init];
}
+ (RollDiceBeginNotificationResponseBuilder*) builderWithPrototype:(RollDiceBeginNotificationResponse*) prototype {
  return [[RollDiceBeginNotificationResponse builder] mergeFrom:prototype];
}
- (RollDiceBeginNotificationResponseBuilder*) builder {
  return [RollDiceBeginNotificationResponse builder];
}
- (RollDiceBeginNotificationResponseBuilder*) toBuilder {
  return [RollDiceBeginNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RollDiceBeginNotificationResponse class]]) {
    return NO;
  }
  RollDiceBeginNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RollDiceBeginNotificationResponseBuilder()
@property (strong) RollDiceBeginNotificationResponse* resultRollDiceBeginNotificationResponse;
@end

@implementation RollDiceBeginNotificationResponseBuilder
@synthesize resultRollDiceBeginNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRollDiceBeginNotificationResponse = [[RollDiceBeginNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRollDiceBeginNotificationResponse;
}
- (RollDiceBeginNotificationResponseBuilder*) clear {
  self.resultRollDiceBeginNotificationResponse = [[RollDiceBeginNotificationResponse alloc] init];
  return self;
}
- (RollDiceBeginNotificationResponseBuilder*) clone {
  return [RollDiceBeginNotificationResponse builderWithPrototype:resultRollDiceBeginNotificationResponse];
}
- (RollDiceBeginNotificationResponse*) defaultInstance {
  return [RollDiceBeginNotificationResponse defaultInstance];
}
- (RollDiceBeginNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceBeginNotificationResponse*) buildPartial {
  RollDiceBeginNotificationResponse* returnMe = resultRollDiceBeginNotificationResponse;
  self.resultRollDiceBeginNotificationResponse = nil;
  return returnMe;
}
- (RollDiceBeginNotificationResponseBuilder*) mergeFrom:(RollDiceBeginNotificationResponse*) other {
  if (other == [RollDiceBeginNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceBeginNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceBeginNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface RollDiceEndNotificationRequest ()
@property (strong) NSMutableArray * userDiceArray;
@end

@implementation RollDiceEndNotificationRequest

@synthesize userDiceArray;
@dynamic userDice;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceEndNotificationRequest* defaultRollDiceEndNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RollDiceEndNotificationRequest class]) {
    defaultRollDiceEndNotificationRequestInstance = [[RollDiceEndNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRollDiceEndNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultRollDiceEndNotificationRequestInstance;
}
- (NSArray *)userDice {
  return userDiceArray;
}
- (PBUserDice*)userDiceAtIndex:(NSUInteger)index {
  return [userDiceArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserDice = YES;
   [self.userDice enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserDice = NO;
      *stop = YES;
    }
  }];
  if (!isInituserDice) return isInituserDice;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RollDiceEndNotificationRequest*) parseFromData:(NSData*) data {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromData:data] build];
}
+ (RollDiceEndNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RollDiceEndNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceEndNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationRequestBuilder*) builder {
  return [[RollDiceEndNotificationRequestBuilder alloc] init];
}
+ (RollDiceEndNotificationRequestBuilder*) builderWithPrototype:(RollDiceEndNotificationRequest*) prototype {
  return [[RollDiceEndNotificationRequest builder] mergeFrom:prototype];
}
- (RollDiceEndNotificationRequestBuilder*) builder {
  return [RollDiceEndNotificationRequest builder];
}
- (RollDiceEndNotificationRequestBuilder*) toBuilder {
  return [RollDiceEndNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userDice"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RollDiceEndNotificationRequest class]]) {
    return NO;
  }
  RollDiceEndNotificationRequest *otherMessage = other;
  return
      [self.userDiceArray isEqualToArray:otherMessage.userDiceArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userDiceArray enumerateObjectsUsingBlock:^(PBUserDice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RollDiceEndNotificationRequestBuilder()
@property (strong) RollDiceEndNotificationRequest* resultRollDiceEndNotificationRequest;
@end

@implementation RollDiceEndNotificationRequestBuilder
@synthesize resultRollDiceEndNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRollDiceEndNotificationRequest = [[RollDiceEndNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRollDiceEndNotificationRequest;
}
- (RollDiceEndNotificationRequestBuilder*) clear {
  self.resultRollDiceEndNotificationRequest = [[RollDiceEndNotificationRequest alloc] init];
  return self;
}
- (RollDiceEndNotificationRequestBuilder*) clone {
  return [RollDiceEndNotificationRequest builderWithPrototype:resultRollDiceEndNotificationRequest];
}
- (RollDiceEndNotificationRequest*) defaultInstance {
  return [RollDiceEndNotificationRequest defaultInstance];
}
- (RollDiceEndNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceEndNotificationRequest*) buildPartial {
  RollDiceEndNotificationRequest* returnMe = resultRollDiceEndNotificationRequest;
  self.resultRollDiceEndNotificationRequest = nil;
  return returnMe;
}
- (RollDiceEndNotificationRequestBuilder*) mergeFrom:(RollDiceEndNotificationRequest*) other {
  if (other == [RollDiceEndNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.userDiceArray.count > 0) {
    if (resultRollDiceEndNotificationRequest.userDiceArray == nil) {
      resultRollDiceEndNotificationRequest.userDiceArray = [[NSMutableArray alloc] initWithArray:other.userDiceArray];
    } else {
      [resultRollDiceEndNotificationRequest.userDiceArray addObjectsFromArray:other.userDiceArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceEndNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceEndNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserDiceBuilder* subBuilder = [PBUserDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserDice:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userDice {
  return resultRollDiceEndNotificationRequest.userDiceArray;
}
- (PBUserDice*)userDiceAtIndex:(NSUInteger)index {
  return [resultRollDiceEndNotificationRequest userDiceAtIndex:index];
}
- (RollDiceEndNotificationRequestBuilder *)addUserDice:(PBUserDice*)value {
  if (resultRollDiceEndNotificationRequest.userDiceArray == nil) {
    resultRollDiceEndNotificationRequest.userDiceArray = [[NSMutableArray alloc]init];
  }
  [resultRollDiceEndNotificationRequest.userDiceArray addObject:value];
  return self;
}
- (RollDiceEndNotificationRequestBuilder *)setUserDiceArray:(NSArray *)array {
  resultRollDiceEndNotificationRequest.userDiceArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RollDiceEndNotificationRequestBuilder *)clearUserDice {
  resultRollDiceEndNotificationRequest.userDiceArray = nil;
  return self;
}
@end

@interface RollDiceEndNotificationResponse ()
@end

@implementation RollDiceEndNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceEndNotificationResponse* defaultRollDiceEndNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RollDiceEndNotificationResponse class]) {
    defaultRollDiceEndNotificationResponseInstance = [[RollDiceEndNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRollDiceEndNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultRollDiceEndNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RollDiceEndNotificationResponse*) parseFromData:(NSData*) data {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromData:data] build];
}
+ (RollDiceEndNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RollDiceEndNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceEndNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationResponseBuilder*) builder {
  return [[RollDiceEndNotificationResponseBuilder alloc] init];
}
+ (RollDiceEndNotificationResponseBuilder*) builderWithPrototype:(RollDiceEndNotificationResponse*) prototype {
  return [[RollDiceEndNotificationResponse builder] mergeFrom:prototype];
}
- (RollDiceEndNotificationResponseBuilder*) builder {
  return [RollDiceEndNotificationResponse builder];
}
- (RollDiceEndNotificationResponseBuilder*) toBuilder {
  return [RollDiceEndNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RollDiceEndNotificationResponse class]]) {
    return NO;
  }
  RollDiceEndNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RollDiceEndNotificationResponseBuilder()
@property (strong) RollDiceEndNotificationResponse* resultRollDiceEndNotificationResponse;
@end

@implementation RollDiceEndNotificationResponseBuilder
@synthesize resultRollDiceEndNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRollDiceEndNotificationResponse = [[RollDiceEndNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRollDiceEndNotificationResponse;
}
- (RollDiceEndNotificationResponseBuilder*) clear {
  self.resultRollDiceEndNotificationResponse = [[RollDiceEndNotificationResponse alloc] init];
  return self;
}
- (RollDiceEndNotificationResponseBuilder*) clone {
  return [RollDiceEndNotificationResponse builderWithPrototype:resultRollDiceEndNotificationResponse];
}
- (RollDiceEndNotificationResponse*) defaultInstance {
  return [RollDiceEndNotificationResponse defaultInstance];
}
- (RollDiceEndNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceEndNotificationResponse*) buildPartial {
  RollDiceEndNotificationResponse* returnMe = resultRollDiceEndNotificationResponse;
  self.resultRollDiceEndNotificationResponse = nil;
  return returnMe;
}
- (RollDiceEndNotificationResponseBuilder*) mergeFrom:(RollDiceEndNotificationResponse*) other {
  if (other == [RollDiceEndNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceEndNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceEndNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface NextPlayerStartNotificationRequest ()
@property (strong) NSString* currentPlayUserId;
@property (strong) NSString* nextPlayUserId;
@property SInt32 expiredTime;
@property SInt32 direction;
@end

@implementation NextPlayerStartNotificationRequest

- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) _value_ {
  hasCurrentPlayUserId_ = !!_value_;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) _value_ {
  hasNextPlayUserId_ = !!_value_;
}
@synthesize nextPlayUserId;
- (BOOL) hasExpiredTime {
  return !!hasExpiredTime_;
}
- (void) setHasExpiredTime:(BOOL) _value_ {
  hasExpiredTime_ = !!_value_;
}
@synthesize expiredTime;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (instancetype) init {
  if ((self = [super init])) {
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.expiredTime = 0;
    self.direction = 0;
  }
  return self;
}
static NextPlayerStartNotificationRequest* defaultNextPlayerStartNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [NextPlayerStartNotificationRequest class]) {
    defaultNextPlayerStartNotificationRequestInstance = [[NextPlayerStartNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNextPlayerStartNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultNextPlayerStartNotificationRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCurrentPlayUserId) {
    return NO;
  }
  if (!self.hasNextPlayUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentPlayUserId) {
    [output writeString:1 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:2 value:self.nextPlayUserId];
  }
  if (self.hasExpiredTime) {
    [output writeInt32:3 value:self.expiredTime];
  }
  if (self.hasDirection) {
    [output writeInt32:4 value:self.direction];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCurrentPlayUserId) {
    size_ += computeStringSize(1, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size_ += computeStringSize(2, self.nextPlayUserId);
  }
  if (self.hasExpiredTime) {
    size_ += computeInt32Size(3, self.expiredTime);
  }
  if (self.hasDirection) {
    size_ += computeInt32Size(4, self.direction);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NextPlayerStartNotificationRequest*) parseFromData:(NSData*) data {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromData:data] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationRequestBuilder*) builder {
  return [[NextPlayerStartNotificationRequestBuilder alloc] init];
}
+ (NextPlayerStartNotificationRequestBuilder*) builderWithPrototype:(NextPlayerStartNotificationRequest*) prototype {
  return [[NextPlayerStartNotificationRequest builder] mergeFrom:prototype];
}
- (NextPlayerStartNotificationRequestBuilder*) builder {
  return [NextPlayerStartNotificationRequest builder];
}
- (NextPlayerStartNotificationRequestBuilder*) toBuilder {
  return [NextPlayerStartNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCurrentPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPlayUserId", self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPlayUserId", self.nextPlayUserId];
  }
  if (self.hasExpiredTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiredTime", [NSNumber numberWithInteger:self.expiredTime]];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", [NSNumber numberWithInteger:self.direction]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NextPlayerStartNotificationRequest class]]) {
    return NO;
  }
  NextPlayerStartNotificationRequest *otherMessage = other;
  return
      self.hasCurrentPlayUserId == otherMessage.hasCurrentPlayUserId &&
      (!self.hasCurrentPlayUserId || [self.currentPlayUserId isEqual:otherMessage.currentPlayUserId]) &&
      self.hasNextPlayUserId == otherMessage.hasNextPlayUserId &&
      (!self.hasNextPlayUserId || [self.nextPlayUserId isEqual:otherMessage.nextPlayUserId]) &&
      self.hasExpiredTime == otherMessage.hasExpiredTime &&
      (!self.hasExpiredTime || self.expiredTime == otherMessage.expiredTime) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || self.direction == otherMessage.direction) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCurrentPlayUserId) {
    hashCode = hashCode * 31 + [self.currentPlayUserId hash];
  }
  if (self.hasNextPlayUserId) {
    hashCode = hashCode * 31 + [self.nextPlayUserId hash];
  }
  if (self.hasExpiredTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expiredTime] hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.direction] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NextPlayerStartNotificationRequestBuilder()
@property (strong) NextPlayerStartNotificationRequest* resultNextPlayerStartNotificationRequest;
@end

@implementation NextPlayerStartNotificationRequestBuilder
@synthesize resultNextPlayerStartNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNextPlayerStartNotificationRequest = [[NextPlayerStartNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNextPlayerStartNotificationRequest;
}
- (NextPlayerStartNotificationRequestBuilder*) clear {
  self.resultNextPlayerStartNotificationRequest = [[NextPlayerStartNotificationRequest alloc] init];
  return self;
}
- (NextPlayerStartNotificationRequestBuilder*) clone {
  return [NextPlayerStartNotificationRequest builderWithPrototype:resultNextPlayerStartNotificationRequest];
}
- (NextPlayerStartNotificationRequest*) defaultInstance {
  return [NextPlayerStartNotificationRequest defaultInstance];
}
- (NextPlayerStartNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NextPlayerStartNotificationRequest*) buildPartial {
  NextPlayerStartNotificationRequest* returnMe = resultNextPlayerStartNotificationRequest;
  self.resultNextPlayerStartNotificationRequest = nil;
  return returnMe;
}
- (NextPlayerStartNotificationRequestBuilder*) mergeFrom:(NextPlayerStartNotificationRequest*) other {
  if (other == [NextPlayerStartNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasExpiredTime) {
    [self setExpiredTime:other.expiredTime];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NextPlayerStartNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NextPlayerStartNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 24: {
        [self setExpiredTime:[input readInt32]];
        break;
      }
      case 32: {
        [self setDirection:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentPlayUserId {
  return resultNextPlayerStartNotificationRequest.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return resultNextPlayerStartNotificationRequest.currentPlayUserId;
}
- (NextPlayerStartNotificationRequestBuilder*) setCurrentPlayUserId:(NSString*) value {
  resultNextPlayerStartNotificationRequest.hasCurrentPlayUserId = YES;
  resultNextPlayerStartNotificationRequest.currentPlayUserId = value;
  return self;
}
- (NextPlayerStartNotificationRequestBuilder*) clearCurrentPlayUserId {
  resultNextPlayerStartNotificationRequest.hasCurrentPlayUserId = NO;
  resultNextPlayerStartNotificationRequest.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return resultNextPlayerStartNotificationRequest.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return resultNextPlayerStartNotificationRequest.nextPlayUserId;
}
- (NextPlayerStartNotificationRequestBuilder*) setNextPlayUserId:(NSString*) value {
  resultNextPlayerStartNotificationRequest.hasNextPlayUserId = YES;
  resultNextPlayerStartNotificationRequest.nextPlayUserId = value;
  return self;
}
- (NextPlayerStartNotificationRequestBuilder*) clearNextPlayUserId {
  resultNextPlayerStartNotificationRequest.hasNextPlayUserId = NO;
  resultNextPlayerStartNotificationRequest.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasExpiredTime {
  return resultNextPlayerStartNotificationRequest.hasExpiredTime;
}
- (SInt32) expiredTime {
  return resultNextPlayerStartNotificationRequest.expiredTime;
}
- (NextPlayerStartNotificationRequestBuilder*) setExpiredTime:(SInt32) value {
  resultNextPlayerStartNotificationRequest.hasExpiredTime = YES;
  resultNextPlayerStartNotificationRequest.expiredTime = value;
  return self;
}
- (NextPlayerStartNotificationRequestBuilder*) clearExpiredTime {
  resultNextPlayerStartNotificationRequest.hasExpiredTime = NO;
  resultNextPlayerStartNotificationRequest.expiredTime = 0;
  return self;
}
- (BOOL) hasDirection {
  return resultNextPlayerStartNotificationRequest.hasDirection;
}
- (SInt32) direction {
  return resultNextPlayerStartNotificationRequest.direction;
}
- (NextPlayerStartNotificationRequestBuilder*) setDirection:(SInt32) value {
  resultNextPlayerStartNotificationRequest.hasDirection = YES;
  resultNextPlayerStartNotificationRequest.direction = value;
  return self;
}
- (NextPlayerStartNotificationRequestBuilder*) clearDirection {
  resultNextPlayerStartNotificationRequest.hasDirection = NO;
  resultNextPlayerStartNotificationRequest.direction = 0;
  return self;
}
@end

@interface NextPlayerStartNotificationResponse ()
@end

@implementation NextPlayerStartNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static NextPlayerStartNotificationResponse* defaultNextPlayerStartNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [NextPlayerStartNotificationResponse class]) {
    defaultNextPlayerStartNotificationResponseInstance = [[NextPlayerStartNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNextPlayerStartNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultNextPlayerStartNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NextPlayerStartNotificationResponse*) parseFromData:(NSData*) data {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromData:data] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationResponseBuilder*) builder {
  return [[NextPlayerStartNotificationResponseBuilder alloc] init];
}
+ (NextPlayerStartNotificationResponseBuilder*) builderWithPrototype:(NextPlayerStartNotificationResponse*) prototype {
  return [[NextPlayerStartNotificationResponse builder] mergeFrom:prototype];
}
- (NextPlayerStartNotificationResponseBuilder*) builder {
  return [NextPlayerStartNotificationResponse builder];
}
- (NextPlayerStartNotificationResponseBuilder*) toBuilder {
  return [NextPlayerStartNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NextPlayerStartNotificationResponse class]]) {
    return NO;
  }
  NextPlayerStartNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NextPlayerStartNotificationResponseBuilder()
@property (strong) NextPlayerStartNotificationResponse* resultNextPlayerStartNotificationResponse;
@end

@implementation NextPlayerStartNotificationResponseBuilder
@synthesize resultNextPlayerStartNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNextPlayerStartNotificationResponse = [[NextPlayerStartNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNextPlayerStartNotificationResponse;
}
- (NextPlayerStartNotificationResponseBuilder*) clear {
  self.resultNextPlayerStartNotificationResponse = [[NextPlayerStartNotificationResponse alloc] init];
  return self;
}
- (NextPlayerStartNotificationResponseBuilder*) clone {
  return [NextPlayerStartNotificationResponse builderWithPrototype:resultNextPlayerStartNotificationResponse];
}
- (NextPlayerStartNotificationResponse*) defaultInstance {
  return [NextPlayerStartNotificationResponse defaultInstance];
}
- (NextPlayerStartNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NextPlayerStartNotificationResponse*) buildPartial {
  NextPlayerStartNotificationResponse* returnMe = resultNextPlayerStartNotificationResponse;
  self.resultNextPlayerStartNotificationResponse = nil;
  return returnMe;
}
- (NextPlayerStartNotificationResponseBuilder*) mergeFrom:(NextPlayerStartNotificationResponse*) other {
  if (other == [NextPlayerStartNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NextPlayerStartNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NextPlayerStartNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BetDiceRequest ()
@property SInt32 option;
@property SInt32 ante;
@property Float32 odds;
@end

@implementation BetDiceRequest

- (BOOL) hasOption {
  return !!hasOption_;
}
- (void) setHasOption:(BOOL) _value_ {
  hasOption_ = !!_value_;
}
@synthesize option;
- (BOOL) hasAnte {
  return !!hasAnte_;
}
- (void) setHasAnte:(BOOL) _value_ {
  hasAnte_ = !!_value_;
}
@synthesize ante;
- (BOOL) hasOdds {
  return !!hasOdds_;
}
- (void) setHasOdds:(BOOL) _value_ {
  hasOdds_ = !!_value_;
}
@synthesize odds;
- (instancetype) init {
  if ((self = [super init])) {
    self.option = 0;
    self.ante = 0;
    self.odds = 0;
  }
  return self;
}
static BetDiceRequest* defaultBetDiceRequestInstance = nil;
+ (void) initialize {
  if (self == [BetDiceRequest class]) {
    defaultBetDiceRequestInstance = [[BetDiceRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBetDiceRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBetDiceRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOption) {
    return NO;
  }
  if (!self.hasAnte) {
    return NO;
  }
  if (!self.hasOdds) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOption) {
    [output writeInt32:1 value:self.option];
  }
  if (self.hasAnte) {
    [output writeInt32:2 value:self.ante];
  }
  if (self.hasOdds) {
    [output writeFloat:3 value:self.odds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOption) {
    size_ += computeInt32Size(1, self.option);
  }
  if (self.hasAnte) {
    size_ += computeInt32Size(2, self.ante);
  }
  if (self.hasOdds) {
    size_ += computeFloatSize(3, self.odds);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BetDiceRequest*) parseFromData:(NSData*) data {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromData:data] build];
}
+ (BetDiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetDiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromInputStream:input] build];
}
+ (BetDiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BetDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceRequestBuilder*) builder {
  return [[BetDiceRequestBuilder alloc] init];
}
+ (BetDiceRequestBuilder*) builderWithPrototype:(BetDiceRequest*) prototype {
  return [[BetDiceRequest builder] mergeFrom:prototype];
}
- (BetDiceRequestBuilder*) builder {
  return [BetDiceRequest builder];
}
- (BetDiceRequestBuilder*) toBuilder {
  return [BetDiceRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOption) {
    [output appendFormat:@"%@%@: %@\n", indent, @"option", [NSNumber numberWithInteger:self.option]];
  }
  if (self.hasAnte) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ante", [NSNumber numberWithInteger:self.ante]];
  }
  if (self.hasOdds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"odds", [NSNumber numberWithFloat:self.odds]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BetDiceRequest class]]) {
    return NO;
  }
  BetDiceRequest *otherMessage = other;
  return
      self.hasOption == otherMessage.hasOption &&
      (!self.hasOption || self.option == otherMessage.option) &&
      self.hasAnte == otherMessage.hasAnte &&
      (!self.hasAnte || self.ante == otherMessage.ante) &&
      self.hasOdds == otherMessage.hasOdds &&
      (!self.hasOdds || self.odds == otherMessage.odds) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOption) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.option] hash];
  }
  if (self.hasAnte) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ante] hash];
  }
  if (self.hasOdds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.odds] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BetDiceRequestBuilder()
@property (strong) BetDiceRequest* resultBetDiceRequest;
@end

@implementation BetDiceRequestBuilder
@synthesize resultBetDiceRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBetDiceRequest = [[BetDiceRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBetDiceRequest;
}
- (BetDiceRequestBuilder*) clear {
  self.resultBetDiceRequest = [[BetDiceRequest alloc] init];
  return self;
}
- (BetDiceRequestBuilder*) clone {
  return [BetDiceRequest builderWithPrototype:resultBetDiceRequest];
}
- (BetDiceRequest*) defaultInstance {
  return [BetDiceRequest defaultInstance];
}
- (BetDiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetDiceRequest*) buildPartial {
  BetDiceRequest* returnMe = resultBetDiceRequest;
  self.resultBetDiceRequest = nil;
  return returnMe;
}
- (BetDiceRequestBuilder*) mergeFrom:(BetDiceRequest*) other {
  if (other == [BetDiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasOption) {
    [self setOption:other.option];
  }
  if (other.hasAnte) {
    [self setAnte:other.ante];
  }
  if (other.hasOdds) {
    [self setOdds:other.odds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetDiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetDiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOption:[input readInt32]];
        break;
      }
      case 16: {
        [self setAnte:[input readInt32]];
        break;
      }
      case 29: {
        [self setOdds:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasOption {
  return resultBetDiceRequest.hasOption;
}
- (SInt32) option {
  return resultBetDiceRequest.option;
}
- (BetDiceRequestBuilder*) setOption:(SInt32) value {
  resultBetDiceRequest.hasOption = YES;
  resultBetDiceRequest.option = value;
  return self;
}
- (BetDiceRequestBuilder*) clearOption {
  resultBetDiceRequest.hasOption = NO;
  resultBetDiceRequest.option = 0;
  return self;
}
- (BOOL) hasAnte {
  return resultBetDiceRequest.hasAnte;
}
- (SInt32) ante {
  return resultBetDiceRequest.ante;
}
- (BetDiceRequestBuilder*) setAnte:(SInt32) value {
  resultBetDiceRequest.hasAnte = YES;
  resultBetDiceRequest.ante = value;
  return self;
}
- (BetDiceRequestBuilder*) clearAnte {
  resultBetDiceRequest.hasAnte = NO;
  resultBetDiceRequest.ante = 0;
  return self;
}
- (BOOL) hasOdds {
  return resultBetDiceRequest.hasOdds;
}
- (Float32) odds {
  return resultBetDiceRequest.odds;
}
- (BetDiceRequestBuilder*) setOdds:(Float32) value {
  resultBetDiceRequest.hasOdds = YES;
  resultBetDiceRequest.odds = value;
  return self;
}
- (BetDiceRequestBuilder*) clearOdds {
  resultBetDiceRequest.hasOdds = NO;
  resultBetDiceRequest.odds = 0;
  return self;
}
@end

@interface BetDiceResponse ()
@end

@implementation BetDiceResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BetDiceResponse* defaultBetDiceResponseInstance = nil;
+ (void) initialize {
  if (self == [BetDiceResponse class]) {
    defaultBetDiceResponseInstance = [[BetDiceResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBetDiceResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBetDiceResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BetDiceResponse*) parseFromData:(NSData*) data {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromData:data] build];
}
+ (BetDiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetDiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromInputStream:input] build];
}
+ (BetDiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BetDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceResponseBuilder*) builder {
  return [[BetDiceResponseBuilder alloc] init];
}
+ (BetDiceResponseBuilder*) builderWithPrototype:(BetDiceResponse*) prototype {
  return [[BetDiceResponse builder] mergeFrom:prototype];
}
- (BetDiceResponseBuilder*) builder {
  return [BetDiceResponse builder];
}
- (BetDiceResponseBuilder*) toBuilder {
  return [BetDiceResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BetDiceResponse class]]) {
    return NO;
  }
  BetDiceResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BetDiceResponseBuilder()
@property (strong) BetDiceResponse* resultBetDiceResponse;
@end

@implementation BetDiceResponseBuilder
@synthesize resultBetDiceResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBetDiceResponse = [[BetDiceResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBetDiceResponse;
}
- (BetDiceResponseBuilder*) clear {
  self.resultBetDiceResponse = [[BetDiceResponse alloc] init];
  return self;
}
- (BetDiceResponseBuilder*) clone {
  return [BetDiceResponse builderWithPrototype:resultBetDiceResponse];
}
- (BetDiceResponse*) defaultInstance {
  return [BetDiceResponse defaultInstance];
}
- (BetDiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetDiceResponse*) buildPartial {
  BetDiceResponse* returnMe = resultBetDiceResponse;
  self.resultBetDiceResponse = nil;
  return returnMe;
}
- (BetDiceResponseBuilder*) mergeFrom:(BetDiceResponse*) other {
  if (other == [BetDiceResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetDiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetDiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GameOverNotificationRequest ()
@property (strong) PBDiceGameResult* gameResult;
@property (strong) PBZJHGameResult* zjhGameResult;
@end

@implementation GameOverNotificationRequest

- (BOOL) hasGameResult {
  return !!hasGameResult_;
}
- (void) setHasGameResult:(BOOL) _value_ {
  hasGameResult_ = !!_value_;
}
@synthesize gameResult;
- (BOOL) hasZjhGameResult {
  return !!hasZjhGameResult_;
}
- (void) setHasZjhGameResult:(BOOL) _value_ {
  hasZjhGameResult_ = !!_value_;
}
@synthesize zjhGameResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameResult = [PBDiceGameResult defaultInstance];
    self.zjhGameResult = [PBZJHGameResult defaultInstance];
  }
  return self;
}
static GameOverNotificationRequest* defaultGameOverNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [GameOverNotificationRequest class]) {
    defaultGameOverNotificationRequestInstance = [[GameOverNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameOverNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultGameOverNotificationRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasGameResult) {
    if (!self.gameResult.isInitialized) {
      return NO;
    }
  }
  if (self.hasZjhGameResult) {
    if (!self.zjhGameResult.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameResult) {
    [output writeMessage:1 value:self.gameResult];
  }
  if (self.hasZjhGameResult) {
    [output writeMessage:2 value:self.zjhGameResult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameResult) {
    size_ += computeMessageSize(1, self.gameResult);
  }
  if (self.hasZjhGameResult) {
    size_ += computeMessageSize(2, self.zjhGameResult);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameOverNotificationRequest*) parseFromData:(NSData*) data {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromData:data] build];
}
+ (GameOverNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (GameOverNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameOverNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationRequestBuilder*) builder {
  return [[GameOverNotificationRequestBuilder alloc] init];
}
+ (GameOverNotificationRequestBuilder*) builderWithPrototype:(GameOverNotificationRequest*) prototype {
  return [[GameOverNotificationRequest builder] mergeFrom:prototype];
}
- (GameOverNotificationRequestBuilder*) builder {
  return [GameOverNotificationRequest builder];
}
- (GameOverNotificationRequestBuilder*) toBuilder {
  return [GameOverNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameResult) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameResult"];
    [self.gameResult writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasZjhGameResult) {
    [output appendFormat:@"%@%@ {\n", indent, @"zjhGameResult"];
    [self.zjhGameResult writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameOverNotificationRequest class]]) {
    return NO;
  }
  GameOverNotificationRequest *otherMessage = other;
  return
      self.hasGameResult == otherMessage.hasGameResult &&
      (!self.hasGameResult || [self.gameResult isEqual:otherMessage.gameResult]) &&
      self.hasZjhGameResult == otherMessage.hasZjhGameResult &&
      (!self.hasZjhGameResult || [self.zjhGameResult isEqual:otherMessage.zjhGameResult]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameResult) {
    hashCode = hashCode * 31 + [self.gameResult hash];
  }
  if (self.hasZjhGameResult) {
    hashCode = hashCode * 31 + [self.zjhGameResult hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameOverNotificationRequestBuilder()
@property (strong) GameOverNotificationRequest* resultGameOverNotificationRequest;
@end

@implementation GameOverNotificationRequestBuilder
@synthesize resultGameOverNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameOverNotificationRequest = [[GameOverNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameOverNotificationRequest;
}
- (GameOverNotificationRequestBuilder*) clear {
  self.resultGameOverNotificationRequest = [[GameOverNotificationRequest alloc] init];
  return self;
}
- (GameOverNotificationRequestBuilder*) clone {
  return [GameOverNotificationRequest builderWithPrototype:resultGameOverNotificationRequest];
}
- (GameOverNotificationRequest*) defaultInstance {
  return [GameOverNotificationRequest defaultInstance];
}
- (GameOverNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameOverNotificationRequest*) buildPartial {
  GameOverNotificationRequest* returnMe = resultGameOverNotificationRequest;
  self.resultGameOverNotificationRequest = nil;
  return returnMe;
}
- (GameOverNotificationRequestBuilder*) mergeFrom:(GameOverNotificationRequest*) other {
  if (other == [GameOverNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.hasGameResult) {
    [self mergeGameResult:other.gameResult];
  }
  if (other.hasZjhGameResult) {
    [self mergeZjhGameResult:other.zjhGameResult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameOverNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameOverNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBDiceGameResultBuilder* subBuilder = [PBDiceGameResult builder];
        if (self.hasGameResult) {
          [subBuilder mergeFrom:self.gameResult];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameResult:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBZJHGameResultBuilder* subBuilder = [PBZJHGameResult builder];
        if (self.hasZjhGameResult) {
          [subBuilder mergeFrom:self.zjhGameResult];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhGameResult:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameResult {
  return resultGameOverNotificationRequest.hasGameResult;
}
- (PBDiceGameResult*) gameResult {
  return resultGameOverNotificationRequest.gameResult;
}
- (GameOverNotificationRequestBuilder*) setGameResult:(PBDiceGameResult*) value {
  resultGameOverNotificationRequest.hasGameResult = YES;
  resultGameOverNotificationRequest.gameResult = value;
  return self;
}
- (GameOverNotificationRequestBuilder*) setGameResultBuilder:(PBDiceGameResultBuilder*) builderForValue {
  return [self setGameResult:[builderForValue build]];
}
- (GameOverNotificationRequestBuilder*) mergeGameResult:(PBDiceGameResult*) value {
  if (resultGameOverNotificationRequest.hasGameResult &&
      resultGameOverNotificationRequest.gameResult != [PBDiceGameResult defaultInstance]) {
    resultGameOverNotificationRequest.gameResult =
      [[[PBDiceGameResult builderWithPrototype:resultGameOverNotificationRequest.gameResult] mergeFrom:value] buildPartial];
  } else {
    resultGameOverNotificationRequest.gameResult = value;
  }
  resultGameOverNotificationRequest.hasGameResult = YES;
  return self;
}
- (GameOverNotificationRequestBuilder*) clearGameResult {
  resultGameOverNotificationRequest.hasGameResult = NO;
  resultGameOverNotificationRequest.gameResult = [PBDiceGameResult defaultInstance];
  return self;
}
- (BOOL) hasZjhGameResult {
  return resultGameOverNotificationRequest.hasZjhGameResult;
}
- (PBZJHGameResult*) zjhGameResult {
  return resultGameOverNotificationRequest.zjhGameResult;
}
- (GameOverNotificationRequestBuilder*) setZjhGameResult:(PBZJHGameResult*) value {
  resultGameOverNotificationRequest.hasZjhGameResult = YES;
  resultGameOverNotificationRequest.zjhGameResult = value;
  return self;
}
- (GameOverNotificationRequestBuilder*) setZjhGameResultBuilder:(PBZJHGameResultBuilder*) builderForValue {
  return [self setZjhGameResult:[builderForValue build]];
}
- (GameOverNotificationRequestBuilder*) mergeZjhGameResult:(PBZJHGameResult*) value {
  if (resultGameOverNotificationRequest.hasZjhGameResult &&
      resultGameOverNotificationRequest.zjhGameResult != [PBZJHGameResult defaultInstance]) {
    resultGameOverNotificationRequest.zjhGameResult =
      [[[PBZJHGameResult builderWithPrototype:resultGameOverNotificationRequest.zjhGameResult] mergeFrom:value] buildPartial];
  } else {
    resultGameOverNotificationRequest.zjhGameResult = value;
  }
  resultGameOverNotificationRequest.hasZjhGameResult = YES;
  return self;
}
- (GameOverNotificationRequestBuilder*) clearZjhGameResult {
  resultGameOverNotificationRequest.hasZjhGameResult = NO;
  resultGameOverNotificationRequest.zjhGameResult = [PBZJHGameResult defaultInstance];
  return self;
}
@end

@interface GameOverNotificationResponse ()
@end

@implementation GameOverNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameOverNotificationResponse* defaultGameOverNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [GameOverNotificationResponse class]) {
    defaultGameOverNotificationResponseInstance = [[GameOverNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameOverNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultGameOverNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameOverNotificationResponse*) parseFromData:(NSData*) data {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromData:data] build];
}
+ (GameOverNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (GameOverNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameOverNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationResponseBuilder*) builder {
  return [[GameOverNotificationResponseBuilder alloc] init];
}
+ (GameOverNotificationResponseBuilder*) builderWithPrototype:(GameOverNotificationResponse*) prototype {
  return [[GameOverNotificationResponse builder] mergeFrom:prototype];
}
- (GameOverNotificationResponseBuilder*) builder {
  return [GameOverNotificationResponse builder];
}
- (GameOverNotificationResponseBuilder*) toBuilder {
  return [GameOverNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameOverNotificationResponse class]]) {
    return NO;
  }
  GameOverNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameOverNotificationResponseBuilder()
@property (strong) GameOverNotificationResponse* resultGameOverNotificationResponse;
@end

@implementation GameOverNotificationResponseBuilder
@synthesize resultGameOverNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameOverNotificationResponse = [[GameOverNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameOverNotificationResponse;
}
- (GameOverNotificationResponseBuilder*) clear {
  self.resultGameOverNotificationResponse = [[GameOverNotificationResponse alloc] init];
  return self;
}
- (GameOverNotificationResponseBuilder*) clone {
  return [GameOverNotificationResponse builderWithPrototype:resultGameOverNotificationResponse];
}
- (GameOverNotificationResponse*) defaultInstance {
  return [GameOverNotificationResponse defaultInstance];
}
- (GameOverNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameOverNotificationResponse*) buildPartial {
  GameOverNotificationResponse* returnMe = resultGameOverNotificationResponse;
  self.resultGameOverNotificationResponse = nil;
  return returnMe;
}
- (GameOverNotificationResponseBuilder*) mergeFrom:(GameOverNotificationResponse*) other {
  if (other == [GameOverNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameOverNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameOverNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GameChatRequest ()
@property (strong) NSMutableArray * toUserIdArray;
@property (strong) NSString* content;
@property SInt32 chatType;
@property SInt32 contentType;
@property (strong) NSString* expressionId;
@property (strong) NSString* contentVoiceId;
@end

@implementation GameChatRequest

@synthesize toUserIdArray;
@dynamic toUserId;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasChatType {
  return !!hasChatType_;
}
- (void) setHasChatType:(BOOL) _value_ {
  hasChatType_ = !!_value_;
}
@synthesize chatType;
- (BOOL) hasContentType {
  return !!hasContentType_;
}
- (void) setHasContentType:(BOOL) _value_ {
  hasContentType_ = !!_value_;
}
@synthesize contentType;
- (BOOL) hasExpressionId {
  return !!hasExpressionId_;
}
- (void) setHasExpressionId:(BOOL) _value_ {
  hasExpressionId_ = !!_value_;
}
@synthesize expressionId;
- (BOOL) hasContentVoiceId {
  return !!hasContentVoiceId_;
}
- (void) setHasContentVoiceId:(BOOL) _value_ {
  hasContentVoiceId_ = !!_value_;
}
@synthesize contentVoiceId;
- (instancetype) init {
  if ((self = [super init])) {
    self.content = @"";
    self.chatType = 0;
    self.contentType = 1;
    self.expressionId = @"";
    self.contentVoiceId = @"";
  }
  return self;
}
static GameChatRequest* defaultGameChatRequestInstance = nil;
+ (void) initialize {
  if (self == [GameChatRequest class]) {
    defaultGameChatRequestInstance = [[GameChatRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameChatRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultGameChatRequestInstance;
}
- (NSArray *)toUserId {
  return toUserIdArray;
}
- (NSString*)toUserIdAtIndex:(NSUInteger)index {
  return [toUserIdArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.toUserIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  if (self.hasChatType) {
    [output writeInt32:3 value:self.chatType];
  }
  if (self.hasContentType) {
    [output writeInt32:4 value:self.contentType];
  }
  if (self.hasExpressionId) {
    [output writeString:5 value:self.expressionId];
  }
  if (self.hasContentVoiceId) {
    [output writeString:6 value:self.contentVoiceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.toUserIdArray.count;
    [self.toUserIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasContent) {
    size_ += computeStringSize(2, self.content);
  }
  if (self.hasChatType) {
    size_ += computeInt32Size(3, self.chatType);
  }
  if (self.hasContentType) {
    size_ += computeInt32Size(4, self.contentType);
  }
  if (self.hasExpressionId) {
    size_ += computeStringSize(5, self.expressionId);
  }
  if (self.hasContentVoiceId) {
    size_ += computeStringSize(6, self.contentVoiceId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameChatRequest*) parseFromData:(NSData*) data {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromData:data] build];
}
+ (GameChatRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromInputStream:input] build];
}
+ (GameChatRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequestBuilder*) builder {
  return [[GameChatRequestBuilder alloc] init];
}
+ (GameChatRequestBuilder*) builderWithPrototype:(GameChatRequest*) prototype {
  return [[GameChatRequest builder] mergeFrom:prototype];
}
- (GameChatRequestBuilder*) builder {
  return [GameChatRequest builder];
}
- (GameChatRequestBuilder*) toBuilder {
  return [GameChatRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.toUserIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", obj];
  }];
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasChatType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatType", [NSNumber numberWithInteger:self.chatType]];
  }
  if (self.hasContentType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contentType", [NSNumber numberWithInteger:self.contentType]];
  }
  if (self.hasExpressionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expressionId", self.expressionId];
  }
  if (self.hasContentVoiceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contentVoiceId", self.contentVoiceId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameChatRequest class]]) {
    return NO;
  }
  GameChatRequest *otherMessage = other;
  return
      [self.toUserIdArray isEqualToArray:otherMessage.toUserIdArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasChatType == otherMessage.hasChatType &&
      (!self.hasChatType || self.chatType == otherMessage.chatType) &&
      self.hasContentType == otherMessage.hasContentType &&
      (!self.hasContentType || self.contentType == otherMessage.contentType) &&
      self.hasExpressionId == otherMessage.hasExpressionId &&
      (!self.hasExpressionId || [self.expressionId isEqual:otherMessage.expressionId]) &&
      self.hasContentVoiceId == otherMessage.hasContentVoiceId &&
      (!self.hasContentVoiceId || [self.contentVoiceId isEqual:otherMessage.contentVoiceId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.toUserIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasChatType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.chatType] hash];
  }
  if (self.hasContentType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.contentType] hash];
  }
  if (self.hasExpressionId) {
    hashCode = hashCode * 31 + [self.expressionId hash];
  }
  if (self.hasContentVoiceId) {
    hashCode = hashCode * 31 + [self.contentVoiceId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameChatRequestBuilder()
@property (strong) GameChatRequest* resultGameChatRequest;
@end

@implementation GameChatRequestBuilder
@synthesize resultGameChatRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameChatRequest = [[GameChatRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameChatRequest;
}
- (GameChatRequestBuilder*) clear {
  self.resultGameChatRequest = [[GameChatRequest alloc] init];
  return self;
}
- (GameChatRequestBuilder*) clone {
  return [GameChatRequest builderWithPrototype:resultGameChatRequest];
}
- (GameChatRequest*) defaultInstance {
  return [GameChatRequest defaultInstance];
}
- (GameChatRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameChatRequest*) buildPartial {
  GameChatRequest* returnMe = resultGameChatRequest;
  self.resultGameChatRequest = nil;
  return returnMe;
}
- (GameChatRequestBuilder*) mergeFrom:(GameChatRequest*) other {
  if (other == [GameChatRequest defaultInstance]) {
    return self;
  }
  if (other.toUserIdArray.count > 0) {
    if (resultGameChatRequest.toUserIdArray == nil) {
      resultGameChatRequest.toUserIdArray = [[NSMutableArray alloc] initWithArray:other.toUserIdArray];
    } else {
      [resultGameChatRequest.toUserIdArray addObjectsFromArray:other.toUserIdArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasChatType) {
    [self setChatType:other.chatType];
  }
  if (other.hasContentType) {
    [self setContentType:other.contentType];
  }
  if (other.hasExpressionId) {
    [self setExpressionId:other.expressionId];
  }
  if (other.hasContentVoiceId) {
    [self setContentVoiceId:other.contentVoiceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameChatRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameChatRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addToUserId:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 24: {
        [self setChatType:[input readInt32]];
        break;
      }
      case 32: {
        [self setContentType:[input readInt32]];
        break;
      }
      case 42: {
        [self setExpressionId:[input readString]];
        break;
      }
      case 50: {
        [self setContentVoiceId:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)toUserId {
  return resultGameChatRequest.toUserIdArray;
}
- (NSString*)toUserIdAtIndex:(NSUInteger)index {
  return [resultGameChatRequest toUserIdAtIndex:index];
}
- (GameChatRequestBuilder *)addToUserId:(NSString*)value {
  if (resultGameChatRequest.toUserIdArray == nil) {
    resultGameChatRequest.toUserIdArray = [[NSMutableArray alloc]init];
  }
  [resultGameChatRequest.toUserIdArray addObject:value];
  return self;
}
- (GameChatRequestBuilder *)setToUserIdArray:(NSArray *)array {
  resultGameChatRequest.toUserIdArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (GameChatRequestBuilder *)clearToUserId {
  resultGameChatRequest.toUserIdArray = nil;
  return self;
}
- (BOOL) hasContent {
  return resultGameChatRequest.hasContent;
}
- (NSString*) content {
  return resultGameChatRequest.content;
}
- (GameChatRequestBuilder*) setContent:(NSString*) value {
  resultGameChatRequest.hasContent = YES;
  resultGameChatRequest.content = value;
  return self;
}
- (GameChatRequestBuilder*) clearContent {
  resultGameChatRequest.hasContent = NO;
  resultGameChatRequest.content = @"";
  return self;
}
- (BOOL) hasChatType {
  return resultGameChatRequest.hasChatType;
}
- (SInt32) chatType {
  return resultGameChatRequest.chatType;
}
- (GameChatRequestBuilder*) setChatType:(SInt32) value {
  resultGameChatRequest.hasChatType = YES;
  resultGameChatRequest.chatType = value;
  return self;
}
- (GameChatRequestBuilder*) clearChatType {
  resultGameChatRequest.hasChatType = NO;
  resultGameChatRequest.chatType = 0;
  return self;
}
- (BOOL) hasContentType {
  return resultGameChatRequest.hasContentType;
}
- (SInt32) contentType {
  return resultGameChatRequest.contentType;
}
- (GameChatRequestBuilder*) setContentType:(SInt32) value {
  resultGameChatRequest.hasContentType = YES;
  resultGameChatRequest.contentType = value;
  return self;
}
- (GameChatRequestBuilder*) clearContentType {
  resultGameChatRequest.hasContentType = NO;
  resultGameChatRequest.contentType = 1;
  return self;
}
- (BOOL) hasExpressionId {
  return resultGameChatRequest.hasExpressionId;
}
- (NSString*) expressionId {
  return resultGameChatRequest.expressionId;
}
- (GameChatRequestBuilder*) setExpressionId:(NSString*) value {
  resultGameChatRequest.hasExpressionId = YES;
  resultGameChatRequest.expressionId = value;
  return self;
}
- (GameChatRequestBuilder*) clearExpressionId {
  resultGameChatRequest.hasExpressionId = NO;
  resultGameChatRequest.expressionId = @"";
  return self;
}
- (BOOL) hasContentVoiceId {
  return resultGameChatRequest.hasContentVoiceId;
}
- (NSString*) contentVoiceId {
  return resultGameChatRequest.contentVoiceId;
}
- (GameChatRequestBuilder*) setContentVoiceId:(NSString*) value {
  resultGameChatRequest.hasContentVoiceId = YES;
  resultGameChatRequest.contentVoiceId = value;
  return self;
}
- (GameChatRequestBuilder*) clearContentVoiceId {
  resultGameChatRequest.hasContentVoiceId = NO;
  resultGameChatRequest.contentVoiceId = @"";
  return self;
}
@end

@interface GameChatResponse ()
@end

@implementation GameChatResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameChatResponse* defaultGameChatResponseInstance = nil;
+ (void) initialize {
  if (self == [GameChatResponse class]) {
    defaultGameChatResponseInstance = [[GameChatResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameChatResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultGameChatResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameChatResponse*) parseFromData:(NSData*) data {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromData:data] build];
}
+ (GameChatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromInputStream:input] build];
}
+ (GameChatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponseBuilder*) builder {
  return [[GameChatResponseBuilder alloc] init];
}
+ (GameChatResponseBuilder*) builderWithPrototype:(GameChatResponse*) prototype {
  return [[GameChatResponse builder] mergeFrom:prototype];
}
- (GameChatResponseBuilder*) builder {
  return [GameChatResponse builder];
}
- (GameChatResponseBuilder*) toBuilder {
  return [GameChatResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameChatResponse class]]) {
    return NO;
  }
  GameChatResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameChatResponseBuilder()
@property (strong) GameChatResponse* resultGameChatResponse;
@end

@implementation GameChatResponseBuilder
@synthesize resultGameChatResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameChatResponse = [[GameChatResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameChatResponse;
}
- (GameChatResponseBuilder*) clear {
  self.resultGameChatResponse = [[GameChatResponse alloc] init];
  return self;
}
- (GameChatResponseBuilder*) clone {
  return [GameChatResponse builderWithPrototype:resultGameChatResponse];
}
- (GameChatResponse*) defaultInstance {
  return [GameChatResponse defaultInstance];
}
- (GameChatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameChatResponse*) buildPartial {
  GameChatResponse* returnMe = resultGameChatResponse;
  self.resultGameChatResponse = nil;
  return returnMe;
}
- (GameChatResponseBuilder*) mergeFrom:(GameChatResponse*) other {
  if (other == [GameChatResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameChatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameChatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface SendDrawDataRequest ()
@property (strong) NSString* word;
@property SInt32 level;
@property SInt32 language;
@property (strong) PBAppendableArray * pointsArray;
@property Float32 width;
@property SInt32 color;
@property SInt32 penType;
@property (strong) NSString* guessWord;
@property (strong) NSString* guessUserId;
@property BOOL guessCorrect;
@property (strong) PBDrawAction* drawAction;
@property (strong) PBSize* canvasSize;
@end

@implementation SendDrawDataRequest

- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) _value_ {
  hasWord_ = !!_value_;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
@synthesize pointsArray;
@dynamic points;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) _value_ {
  hasPenType_ = !!_value_;
}
@synthesize penType;
- (BOOL) hasGuessWord {
  return !!hasGuessWord_;
}
- (void) setHasGuessWord:(BOOL) _value_ {
  hasGuessWord_ = !!_value_;
}
@synthesize guessWord;
- (BOOL) hasGuessUserId {
  return !!hasGuessUserId_;
}
- (void) setHasGuessUserId:(BOOL) _value_ {
  hasGuessUserId_ = !!_value_;
}
@synthesize guessUserId;
- (BOOL) hasGuessCorrect {
  return !!hasGuessCorrect_;
}
- (void) setHasGuessCorrect:(BOOL) _value_ {
  hasGuessCorrect_ = !!_value_;
}
- (BOOL) guessCorrect {
  return !!guessCorrect_;
}
- (void) setGuessCorrect:(BOOL) _value_ {
  guessCorrect_ = !!_value_;
}
- (BOOL) hasDrawAction {
  return !!hasDrawAction_;
}
- (void) setHasDrawAction:(BOOL) _value_ {
  hasDrawAction_ = !!_value_;
}
@synthesize drawAction;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
    self.guessWord = @"";
    self.guessUserId = @"";
    self.guessCorrect = NO;
    self.drawAction = [PBDrawAction defaultInstance];
    self.canvasSize = [PBSize defaultInstance];
  }
  return self;
}
static SendDrawDataRequest* defaultSendDrawDataRequestInstance = nil;
+ (void) initialize {
  if (self == [SendDrawDataRequest class]) {
    defaultSendDrawDataRequestInstance = [[SendDrawDataRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSendDrawDataRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultSendDrawDataRequestInstance;
}
- (PBArray *)points {
  return pointsArray;
}
- (SInt32)pointsAtIndex:(NSUInteger)index {
  return [pointsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasDrawAction) {
    if (!self.drawAction.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger pointsArrayCount = self.pointsArray.count;
  if (pointsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.pointsArray.data;
    [output writeRawVarint32:10];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < pointsArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  if (self.hasWord) {
    [output writeString:10 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:11 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:12 value:self.language];
  }
  if (self.hasWidth) {
    [output writeFloat:22 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:23 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:24 value:self.penType];
  }
  if (self.hasGuessWord) {
    [output writeString:41 value:self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output writeString:42 value:self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output writeBool:43 value:self.guessCorrect];
  }
  if (self.hasDrawAction) {
    [output writeMessage:44 value:self.drawAction];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:45 value:self.canvasSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointsArray.count;
    const SInt32 *values = (const SInt32 *)self.pointsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWord) {
    size_ += computeStringSize(10, self.word);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(11, self.level);
  }
  if (self.hasLanguage) {
    size_ += computeInt32Size(12, self.language);
  }
  if (self.hasWidth) {
    size_ += computeFloatSize(22, self.width);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(23, self.color);
  }
  if (self.hasPenType) {
    size_ += computeInt32Size(24, self.penType);
  }
  if (self.hasGuessWord) {
    size_ += computeStringSize(41, self.guessWord);
  }
  if (self.hasGuessUserId) {
    size_ += computeStringSize(42, self.guessUserId);
  }
  if (self.hasGuessCorrect) {
    size_ += computeBoolSize(43, self.guessCorrect);
  }
  if (self.hasDrawAction) {
    size_ += computeMessageSize(44, self.drawAction);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(45, self.canvasSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SendDrawDataRequest*) parseFromData:(NSData*) data {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromData:data] build];
}
+ (SendDrawDataRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromInputStream:input] build];
}
+ (SendDrawDataRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SendDrawDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequestBuilder*) builder {
  return [[SendDrawDataRequestBuilder alloc] init];
}
+ (SendDrawDataRequestBuilder*) builderWithPrototype:(SendDrawDataRequest*) prototype {
  return [[SendDrawDataRequest builder] mergeFrom:prototype];
}
- (SendDrawDataRequestBuilder*) builder {
  return [SendDrawDataRequest builder];
}
- (SendDrawDataRequestBuilder*) toBuilder {
  return [SendDrawDataRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.pointsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"points", obj];
  }];
  if (self.hasWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"word", self.word];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", [NSNumber numberWithInteger:self.language]];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  if (self.hasPenType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penType", [NSNumber numberWithInteger:self.penType]];
  }
  if (self.hasGuessWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessWord", self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessUserId", self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessCorrect", [NSNumber numberWithBool:self.guessCorrect]];
  }
  if (self.hasDrawAction) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawAction"];
    [self.drawAction writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SendDrawDataRequest class]]) {
    return NO;
  }
  SendDrawDataRequest *otherMessage = other;
  return
      [self.pointsArray isEqualToArray:otherMessage.pointsArray] &&
      self.hasWord == otherMessage.hasWord &&
      (!self.hasWord || [self.word isEqual:otherMessage.word]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || self.language == otherMessage.language) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      self.hasPenType == otherMessage.hasPenType &&
      (!self.hasPenType || self.penType == otherMessage.penType) &&
      self.hasGuessWord == otherMessage.hasGuessWord &&
      (!self.hasGuessWord || [self.guessWord isEqual:otherMessage.guessWord]) &&
      self.hasGuessUserId == otherMessage.hasGuessUserId &&
      (!self.hasGuessUserId || [self.guessUserId isEqual:otherMessage.guessUserId]) &&
      self.hasGuessCorrect == otherMessage.hasGuessCorrect &&
      (!self.hasGuessCorrect || self.guessCorrect == otherMessage.guessCorrect) &&
      self.hasDrawAction == otherMessage.hasDrawAction &&
      (!self.hasDrawAction || [self.drawAction isEqual:otherMessage.drawAction]) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.pointsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasWord) {
    hashCode = hashCode * 31 + [self.word hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.language] hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  if (self.hasPenType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.penType] hash];
  }
  if (self.hasGuessWord) {
    hashCode = hashCode * 31 + [self.guessWord hash];
  }
  if (self.hasGuessUserId) {
    hashCode = hashCode * 31 + [self.guessUserId hash];
  }
  if (self.hasGuessCorrect) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.guessCorrect] hash];
  }
  if (self.hasDrawAction) {
    hashCode = hashCode * 31 + [self.drawAction hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SendDrawDataRequestBuilder()
@property (strong) SendDrawDataRequest* resultSendDrawDataRequest;
@end

@implementation SendDrawDataRequestBuilder
@synthesize resultSendDrawDataRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSendDrawDataRequest = [[SendDrawDataRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSendDrawDataRequest;
}
- (SendDrawDataRequestBuilder*) clear {
  self.resultSendDrawDataRequest = [[SendDrawDataRequest alloc] init];
  return self;
}
- (SendDrawDataRequestBuilder*) clone {
  return [SendDrawDataRequest builderWithPrototype:resultSendDrawDataRequest];
}
- (SendDrawDataRequest*) defaultInstance {
  return [SendDrawDataRequest defaultInstance];
}
- (SendDrawDataRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDrawDataRequest*) buildPartial {
  SendDrawDataRequest* returnMe = resultSendDrawDataRequest;
  self.resultSendDrawDataRequest = nil;
  return returnMe;
}
- (SendDrawDataRequestBuilder*) mergeFrom:(SendDrawDataRequest*) other {
  if (other == [SendDrawDataRequest defaultInstance]) {
    return self;
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.pointsArray.count > 0) {
    if (resultSendDrawDataRequest.pointsArray == nil) {
      resultSendDrawDataRequest.pointsArray = [other.pointsArray copy];
    } else {
      [resultSendDrawDataRequest.pointsArray appendArray:other.pointsArray];
    }
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasGuessWord) {
    [self setGuessWord:other.guessWord];
  }
  if (other.hasGuessUserId) {
    [self setGuessUserId:other.guessUserId];
  }
  if (other.hasGuessCorrect) {
    [self setGuessCorrect:other.guessCorrect];
  }
  if (other.hasDrawAction) {
    [self mergeDrawAction:other.drawAction];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDrawDataRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDrawDataRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultSendDrawDataRequest.pointsArray == nil) {
          resultSendDrawDataRequest.pointsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultSendDrawDataRequest.pointsArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 82: {
        [self setWord:[input readString]];
        break;
      }
      case 88: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 96: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 181: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 184: {
        [self setColor:[input readInt32]];
        break;
      }
      case 192: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 330: {
        [self setGuessWord:[input readString]];
        break;
      }
      case 338: {
        [self setGuessUserId:[input readString]];
        break;
      }
      case 344: {
        [self setGuessCorrect:[input readBool]];
        break;
      }
      case 354: {
        PBDrawActionBuilder* subBuilder = [PBDrawAction builder];
        if (self.hasDrawAction) {
          [subBuilder mergeFrom:self.drawAction];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawAction:[subBuilder buildPartial]];
        break;
      }
      case 362: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWord {
  return resultSendDrawDataRequest.hasWord;
}
- (NSString*) word {
  return resultSendDrawDataRequest.word;
}
- (SendDrawDataRequestBuilder*) setWord:(NSString*) value {
  resultSendDrawDataRequest.hasWord = YES;
  resultSendDrawDataRequest.word = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearWord {
  resultSendDrawDataRequest.hasWord = NO;
  resultSendDrawDataRequest.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultSendDrawDataRequest.hasLevel;
}
- (SInt32) level {
  return resultSendDrawDataRequest.level;
}
- (SendDrawDataRequestBuilder*) setLevel:(SInt32) value {
  resultSendDrawDataRequest.hasLevel = YES;
  resultSendDrawDataRequest.level = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearLevel {
  resultSendDrawDataRequest.hasLevel = NO;
  resultSendDrawDataRequest.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return resultSendDrawDataRequest.hasLanguage;
}
- (SInt32) language {
  return resultSendDrawDataRequest.language;
}
- (SendDrawDataRequestBuilder*) setLanguage:(SInt32) value {
  resultSendDrawDataRequest.hasLanguage = YES;
  resultSendDrawDataRequest.language = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearLanguage {
  resultSendDrawDataRequest.hasLanguage = NO;
  resultSendDrawDataRequest.language = 0;
  return self;
}
- (PBAppendableArray *)points {
  return resultSendDrawDataRequest.pointsArray;
}
- (SInt32)pointsAtIndex:(NSUInteger)index {
  return [resultSendDrawDataRequest pointsAtIndex:index];
}
- (SendDrawDataRequestBuilder *)addPoints:(SInt32)value {
  if (resultSendDrawDataRequest.pointsArray == nil) {
    resultSendDrawDataRequest.pointsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultSendDrawDataRequest.pointsArray addInt32:value];
  return self;
}
- (SendDrawDataRequestBuilder *)setPointsArray:(NSArray *)array {
  resultSendDrawDataRequest.pointsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (SendDrawDataRequestBuilder *)setPointsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultSendDrawDataRequest.pointsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (SendDrawDataRequestBuilder *)clearPoints {
  resultSendDrawDataRequest.pointsArray = nil;
  return self;
}
- (BOOL) hasWidth {
  return resultSendDrawDataRequest.hasWidth;
}
- (Float32) width {
  return resultSendDrawDataRequest.width;
}
- (SendDrawDataRequestBuilder*) setWidth:(Float32) value {
  resultSendDrawDataRequest.hasWidth = YES;
  resultSendDrawDataRequest.width = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearWidth {
  resultSendDrawDataRequest.hasWidth = NO;
  resultSendDrawDataRequest.width = 0;
  return self;
}
- (BOOL) hasColor {
  return resultSendDrawDataRequest.hasColor;
}
- (SInt32) color {
  return resultSendDrawDataRequest.color;
}
- (SendDrawDataRequestBuilder*) setColor:(SInt32) value {
  resultSendDrawDataRequest.hasColor = YES;
  resultSendDrawDataRequest.color = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearColor {
  resultSendDrawDataRequest.hasColor = NO;
  resultSendDrawDataRequest.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return resultSendDrawDataRequest.hasPenType;
}
- (SInt32) penType {
  return resultSendDrawDataRequest.penType;
}
- (SendDrawDataRequestBuilder*) setPenType:(SInt32) value {
  resultSendDrawDataRequest.hasPenType = YES;
  resultSendDrawDataRequest.penType = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearPenType {
  resultSendDrawDataRequest.hasPenType = NO;
  resultSendDrawDataRequest.penType = 0;
  return self;
}
- (BOOL) hasGuessWord {
  return resultSendDrawDataRequest.hasGuessWord;
}
- (NSString*) guessWord {
  return resultSendDrawDataRequest.guessWord;
}
- (SendDrawDataRequestBuilder*) setGuessWord:(NSString*) value {
  resultSendDrawDataRequest.hasGuessWord = YES;
  resultSendDrawDataRequest.guessWord = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearGuessWord {
  resultSendDrawDataRequest.hasGuessWord = NO;
  resultSendDrawDataRequest.guessWord = @"";
  return self;
}
- (BOOL) hasGuessUserId {
  return resultSendDrawDataRequest.hasGuessUserId;
}
- (NSString*) guessUserId {
  return resultSendDrawDataRequest.guessUserId;
}
- (SendDrawDataRequestBuilder*) setGuessUserId:(NSString*) value {
  resultSendDrawDataRequest.hasGuessUserId = YES;
  resultSendDrawDataRequest.guessUserId = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearGuessUserId {
  resultSendDrawDataRequest.hasGuessUserId = NO;
  resultSendDrawDataRequest.guessUserId = @"";
  return self;
}
- (BOOL) hasGuessCorrect {
  return resultSendDrawDataRequest.hasGuessCorrect;
}
- (BOOL) guessCorrect {
  return resultSendDrawDataRequest.guessCorrect;
}
- (SendDrawDataRequestBuilder*) setGuessCorrect:(BOOL) value {
  resultSendDrawDataRequest.hasGuessCorrect = YES;
  resultSendDrawDataRequest.guessCorrect = value;
  return self;
}
- (SendDrawDataRequestBuilder*) clearGuessCorrect {
  resultSendDrawDataRequest.hasGuessCorrect = NO;
  resultSendDrawDataRequest.guessCorrect = NO;
  return self;
}
- (BOOL) hasDrawAction {
  return resultSendDrawDataRequest.hasDrawAction;
}
- (PBDrawAction*) drawAction {
  return resultSendDrawDataRequest.drawAction;
}
- (SendDrawDataRequestBuilder*) setDrawAction:(PBDrawAction*) value {
  resultSendDrawDataRequest.hasDrawAction = YES;
  resultSendDrawDataRequest.drawAction = value;
  return self;
}
- (SendDrawDataRequestBuilder*) setDrawActionBuilder:(PBDrawActionBuilder*) builderForValue {
  return [self setDrawAction:[builderForValue build]];
}
- (SendDrawDataRequestBuilder*) mergeDrawAction:(PBDrawAction*) value {
  if (resultSendDrawDataRequest.hasDrawAction &&
      resultSendDrawDataRequest.drawAction != [PBDrawAction defaultInstance]) {
    resultSendDrawDataRequest.drawAction =
      [[[PBDrawAction builderWithPrototype:resultSendDrawDataRequest.drawAction] mergeFrom:value] buildPartial];
  } else {
    resultSendDrawDataRequest.drawAction = value;
  }
  resultSendDrawDataRequest.hasDrawAction = YES;
  return self;
}
- (SendDrawDataRequestBuilder*) clearDrawAction {
  resultSendDrawDataRequest.hasDrawAction = NO;
  resultSendDrawDataRequest.drawAction = [PBDrawAction defaultInstance];
  return self;
}
- (BOOL) hasCanvasSize {
  return resultSendDrawDataRequest.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultSendDrawDataRequest.canvasSize;
}
- (SendDrawDataRequestBuilder*) setCanvasSize:(PBSize*) value {
  resultSendDrawDataRequest.hasCanvasSize = YES;
  resultSendDrawDataRequest.canvasSize = value;
  return self;
}
- (SendDrawDataRequestBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (SendDrawDataRequestBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultSendDrawDataRequest.hasCanvasSize &&
      resultSendDrawDataRequest.canvasSize != [PBSize defaultInstance]) {
    resultSendDrawDataRequest.canvasSize =
      [[[PBSize builderWithPrototype:resultSendDrawDataRequest.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultSendDrawDataRequest.canvasSize = value;
  }
  resultSendDrawDataRequest.hasCanvasSize = YES;
  return self;
}
- (SendDrawDataRequestBuilder*) clearCanvasSize {
  resultSendDrawDataRequest.hasCanvasSize = NO;
  resultSendDrawDataRequest.canvasSize = [PBSize defaultInstance];
  return self;
}
@end

@interface SendDrawDataResponse ()
@end

@implementation SendDrawDataResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static SendDrawDataResponse* defaultSendDrawDataResponseInstance = nil;
+ (void) initialize {
  if (self == [SendDrawDataResponse class]) {
    defaultSendDrawDataResponseInstance = [[SendDrawDataResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSendDrawDataResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultSendDrawDataResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SendDrawDataResponse*) parseFromData:(NSData*) data {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromData:data] build];
}
+ (SendDrawDataResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse*) parseFromInputStream:(NSInputStream*) input {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromInputStream:input] build];
}
+ (SendDrawDataResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SendDrawDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponseBuilder*) builder {
  return [[SendDrawDataResponseBuilder alloc] init];
}
+ (SendDrawDataResponseBuilder*) builderWithPrototype:(SendDrawDataResponse*) prototype {
  return [[SendDrawDataResponse builder] mergeFrom:prototype];
}
- (SendDrawDataResponseBuilder*) builder {
  return [SendDrawDataResponse builder];
}
- (SendDrawDataResponseBuilder*) toBuilder {
  return [SendDrawDataResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SendDrawDataResponse class]]) {
    return NO;
  }
  SendDrawDataResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SendDrawDataResponseBuilder()
@property (strong) SendDrawDataResponse* resultSendDrawDataResponse;
@end

@implementation SendDrawDataResponseBuilder
@synthesize resultSendDrawDataResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSendDrawDataResponse = [[SendDrawDataResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSendDrawDataResponse;
}
- (SendDrawDataResponseBuilder*) clear {
  self.resultSendDrawDataResponse = [[SendDrawDataResponse alloc] init];
  return self;
}
- (SendDrawDataResponseBuilder*) clone {
  return [SendDrawDataResponse builderWithPrototype:resultSendDrawDataResponse];
}
- (SendDrawDataResponse*) defaultInstance {
  return [SendDrawDataResponse defaultInstance];
}
- (SendDrawDataResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDrawDataResponse*) buildPartial {
  SendDrawDataResponse* returnMe = resultSendDrawDataResponse;
  self.resultSendDrawDataResponse = nil;
  return returnMe;
}
- (SendDrawDataResponseBuilder*) mergeFrom:(SendDrawDataResponse*) other {
  if (other == [SendDrawDataResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDrawDataResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDrawDataResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GameStartNotificationRequest ()
@property (strong) PBZJHGameState* zjhGameState;
@end

@implementation GameStartNotificationRequest

- (BOOL) hasZjhGameState {
  return !!hasZjhGameState_;
}
- (void) setHasZjhGameState:(BOOL) _value_ {
  hasZjhGameState_ = !!_value_;
}
@synthesize zjhGameState;
- (instancetype) init {
  if ((self = [super init])) {
    self.zjhGameState = [PBZJHGameState defaultInstance];
  }
  return self;
}
static GameStartNotificationRequest* defaultGameStartNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [GameStartNotificationRequest class]) {
    defaultGameStartNotificationRequestInstance = [[GameStartNotificationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameStartNotificationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultGameStartNotificationRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasZjhGameState) {
    if (!self.zjhGameState.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasZjhGameState) {
    [output writeMessage:11 value:self.zjhGameState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasZjhGameState) {
    size_ += computeMessageSize(11, self.zjhGameState);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameStartNotificationRequest*) parseFromData:(NSData*) data {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromData:data] build];
}
+ (GameStartNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (GameStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationRequestBuilder*) builder {
  return [[GameStartNotificationRequestBuilder alloc] init];
}
+ (GameStartNotificationRequestBuilder*) builderWithPrototype:(GameStartNotificationRequest*) prototype {
  return [[GameStartNotificationRequest builder] mergeFrom:prototype];
}
- (GameStartNotificationRequestBuilder*) builder {
  return [GameStartNotificationRequest builder];
}
- (GameStartNotificationRequestBuilder*) toBuilder {
  return [GameStartNotificationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasZjhGameState) {
    [output appendFormat:@"%@%@ {\n", indent, @"zjhGameState"];
    [self.zjhGameState writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameStartNotificationRequest class]]) {
    return NO;
  }
  GameStartNotificationRequest *otherMessage = other;
  return
      self.hasZjhGameState == otherMessage.hasZjhGameState &&
      (!self.hasZjhGameState || [self.zjhGameState isEqual:otherMessage.zjhGameState]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasZjhGameState) {
    hashCode = hashCode * 31 + [self.zjhGameState hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameStartNotificationRequestBuilder()
@property (strong) GameStartNotificationRequest* resultGameStartNotificationRequest;
@end

@implementation GameStartNotificationRequestBuilder
@synthesize resultGameStartNotificationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameStartNotificationRequest = [[GameStartNotificationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameStartNotificationRequest;
}
- (GameStartNotificationRequestBuilder*) clear {
  self.resultGameStartNotificationRequest = [[GameStartNotificationRequest alloc] init];
  return self;
}
- (GameStartNotificationRequestBuilder*) clone {
  return [GameStartNotificationRequest builderWithPrototype:resultGameStartNotificationRequest];
}
- (GameStartNotificationRequest*) defaultInstance {
  return [GameStartNotificationRequest defaultInstance];
}
- (GameStartNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameStartNotificationRequest*) buildPartial {
  GameStartNotificationRequest* returnMe = resultGameStartNotificationRequest;
  self.resultGameStartNotificationRequest = nil;
  return returnMe;
}
- (GameStartNotificationRequestBuilder*) mergeFrom:(GameStartNotificationRequest*) other {
  if (other == [GameStartNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.hasZjhGameState) {
    [self mergeZjhGameState:other.zjhGameState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameStartNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameStartNotificationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        PBZJHGameStateBuilder* subBuilder = [PBZJHGameState builder];
        if (self.hasZjhGameState) {
          [subBuilder mergeFrom:self.zjhGameState];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhGameState:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasZjhGameState {
  return resultGameStartNotificationRequest.hasZjhGameState;
}
- (PBZJHGameState*) zjhGameState {
  return resultGameStartNotificationRequest.zjhGameState;
}
- (GameStartNotificationRequestBuilder*) setZjhGameState:(PBZJHGameState*) value {
  resultGameStartNotificationRequest.hasZjhGameState = YES;
  resultGameStartNotificationRequest.zjhGameState = value;
  return self;
}
- (GameStartNotificationRequestBuilder*) setZjhGameStateBuilder:(PBZJHGameStateBuilder*) builderForValue {
  return [self setZjhGameState:[builderForValue build]];
}
- (GameStartNotificationRequestBuilder*) mergeZjhGameState:(PBZJHGameState*) value {
  if (resultGameStartNotificationRequest.hasZjhGameState &&
      resultGameStartNotificationRequest.zjhGameState != [PBZJHGameState defaultInstance]) {
    resultGameStartNotificationRequest.zjhGameState =
      [[[PBZJHGameState builderWithPrototype:resultGameStartNotificationRequest.zjhGameState] mergeFrom:value] buildPartial];
  } else {
    resultGameStartNotificationRequest.zjhGameState = value;
  }
  resultGameStartNotificationRequest.hasZjhGameState = YES;
  return self;
}
- (GameStartNotificationRequestBuilder*) clearZjhGameState {
  resultGameStartNotificationRequest.hasZjhGameState = NO;
  resultGameStartNotificationRequest.zjhGameState = [PBZJHGameState defaultInstance];
  return self;
}
@end

@interface GameStartNotificationResponse ()
@end

@implementation GameStartNotificationResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameStartNotificationResponse* defaultGameStartNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [GameStartNotificationResponse class]) {
    defaultGameStartNotificationResponseInstance = [[GameStartNotificationResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameStartNotificationResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultGameStartNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameStartNotificationResponse*) parseFromData:(NSData*) data {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromData:data] build];
}
+ (GameStartNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (GameStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationResponseBuilder*) builder {
  return [[GameStartNotificationResponseBuilder alloc] init];
}
+ (GameStartNotificationResponseBuilder*) builderWithPrototype:(GameStartNotificationResponse*) prototype {
  return [[GameStartNotificationResponse builder] mergeFrom:prototype];
}
- (GameStartNotificationResponseBuilder*) builder {
  return [GameStartNotificationResponse builder];
}
- (GameStartNotificationResponseBuilder*) toBuilder {
  return [GameStartNotificationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameStartNotificationResponse class]]) {
    return NO;
  }
  GameStartNotificationResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameStartNotificationResponseBuilder()
@property (strong) GameStartNotificationResponse* resultGameStartNotificationResponse;
@end

@implementation GameStartNotificationResponseBuilder
@synthesize resultGameStartNotificationResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameStartNotificationResponse = [[GameStartNotificationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameStartNotificationResponse;
}
- (GameStartNotificationResponseBuilder*) clear {
  self.resultGameStartNotificationResponse = [[GameStartNotificationResponse alloc] init];
  return self;
}
- (GameStartNotificationResponseBuilder*) clone {
  return [GameStartNotificationResponse builderWithPrototype:resultGameStartNotificationResponse];
}
- (GameStartNotificationResponse*) defaultInstance {
  return [GameStartNotificationResponse defaultInstance];
}
- (GameStartNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameStartNotificationResponse*) buildPartial {
  GameStartNotificationResponse* returnMe = resultGameStartNotificationResponse;
  self.resultGameStartNotificationResponse = nil;
  return returnMe;
}
- (GameStartNotificationResponseBuilder*) mergeFrom:(GameStartNotificationResponse*) other {
  if (other == [GameStartNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameStartNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameStartNotificationResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GeneralNotification ()
@property (strong) NSString* sessionHost;
@property SInt32 sessionStatus;
@property (strong) NSString* currentPlayUserId;
@property (strong) NSString* nextPlayUserId;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newUserId;
@property (strong) NSString* quitUserId;
@property (strong) NSString* nickName;
@property (strong) NSString* userAvatar;
@property BOOL userGender;
@property (strong) NSMutableArray * snsUsersArray;
@property (strong) NSString* location;
@property SInt32 userLevel;
@property (strong) PBAppendableArray * pointsArray;
@property Float32 width;
@property SInt32 color;
@property SInt32 penType;
@property (strong) NSString* word;
@property SInt32 level;
@property SInt32 round;
@property SInt32 language;
@property (strong) NSString* guessWord;
@property (strong) NSString* guessUserId;
@property BOOL guessCorrect;
@property SInt32 guessGainCoins;
@property (strong) NSMutableArray * chatToUserIdArray;
@property (strong) NSString* chatContent;
@property SInt32 chatType;
@property SInt32 turnGainCoins;
@end

@implementation GeneralNotification

- (BOOL) hasSessionHost {
  return !!hasSessionHost_;
}
- (void) setHasSessionHost:(BOOL) _value_ {
  hasSessionHost_ = !!_value_;
}
@synthesize sessionHost;
- (BOOL) hasSessionStatus {
  return !!hasSessionStatus_;
}
- (void) setHasSessionStatus:(BOOL) _value_ {
  hasSessionStatus_ = !!_value_;
}
@synthesize sessionStatus;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) _value_ {
  hasCurrentPlayUserId_ = !!_value_;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) _value_ {
  hasNextPlayUserId_ = !!_value_;
}
@synthesize nextPlayUserId;
- (BOOL) hasNewUserId {
  return !!hasNewUserId_;
}
- (void) setHasNewUserId:(BOOL) _value_ {
  hasNewUserId_ = !!_value_;
}
@synthesize newUserId;
- (BOOL) hasQuitUserId {
  return !!hasQuitUserId_;
}
- (void) setHasQuitUserId:(BOOL) _value_ {
  hasQuitUserId_ = !!_value_;
}
@synthesize quitUserId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasUserAvatar {
  return !!hasUserAvatar_;
}
- (void) setHasUserAvatar:(BOOL) _value_ {
  hasUserAvatar_ = !!_value_;
}
@synthesize userAvatar;
- (BOOL) hasUserGender {
  return !!hasUserGender_;
}
- (void) setHasUserGender:(BOOL) _value_ {
  hasUserGender_ = !!_value_;
}
- (BOOL) userGender {
  return !!userGender_;
}
- (void) setUserGender:(BOOL) _value_ {
  userGender_ = !!_value_;
}
@synthesize snsUsersArray;
@dynamic snsUsers;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) _value_ {
  hasUserLevel_ = !!_value_;
}
@synthesize userLevel;
@synthesize pointsArray;
@dynamic points;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) _value_ {
  hasPenType_ = !!_value_;
}
@synthesize penType;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) _value_ {
  hasWord_ = !!_value_;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) _value_ {
  hasRound_ = !!_value_;
}
@synthesize round;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
- (BOOL) hasGuessWord {
  return !!hasGuessWord_;
}
- (void) setHasGuessWord:(BOOL) _value_ {
  hasGuessWord_ = !!_value_;
}
@synthesize guessWord;
- (BOOL) hasGuessUserId {
  return !!hasGuessUserId_;
}
- (void) setHasGuessUserId:(BOOL) _value_ {
  hasGuessUserId_ = !!_value_;
}
@synthesize guessUserId;
- (BOOL) hasGuessCorrect {
  return !!hasGuessCorrect_;
}
- (void) setHasGuessCorrect:(BOOL) _value_ {
  hasGuessCorrect_ = !!_value_;
}
- (BOOL) guessCorrect {
  return !!guessCorrect_;
}
- (void) setGuessCorrect:(BOOL) _value_ {
  guessCorrect_ = !!_value_;
}
- (BOOL) hasGuessGainCoins {
  return !!hasGuessGainCoins_;
}
- (void) setHasGuessGainCoins:(BOOL) _value_ {
  hasGuessGainCoins_ = !!_value_;
}
@synthesize guessGainCoins;
@synthesize chatToUserIdArray;
@dynamic chatToUserId;
- (BOOL) hasChatContent {
  return !!hasChatContent_;
}
- (void) setHasChatContent:(BOOL) _value_ {
  hasChatContent_ = !!_value_;
}
@synthesize chatContent;
- (BOOL) hasChatType {
  return !!hasChatType_;
}
- (void) setHasChatType:(BOOL) _value_ {
  hasChatType_ = !!_value_;
}
@synthesize chatType;
- (BOOL) hasTurnGainCoins {
  return !!hasTurnGainCoins_;
}
- (void) setHasTurnGainCoins:(BOOL) _value_ {
  hasTurnGainCoins_ = !!_value_;
}
@synthesize turnGainCoins;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionHost = @"";
    self.sessionStatus = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.newUserId = @"";
    self.quitUserId = @"";
    self.nickName = @"";
    self.userAvatar = @"";
    self.userGender = NO;
    self.location = @"";
    self.userLevel = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
    self.word = @"";
    self.level = 0;
    self.round = 0;
    self.language = 0;
    self.guessWord = @"";
    self.guessUserId = @"";
    self.guessCorrect = NO;
    self.guessGainCoins = 0;
    self.chatContent = @"";
    self.chatType = 0;
    self.turnGainCoins = 0;
  }
  return self;
}
static GeneralNotification* defaultGeneralNotificationInstance = nil;
+ (void) initialize {
  if (self == [GeneralNotification class]) {
    defaultGeneralNotificationInstance = [[GeneralNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (NSArray *)snsUsers {
  return snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [snsUsersArray objectAtIndex:index];
}
- (PBArray *)points {
  return pointsArray;
}
- (SInt32)pointsAtIndex:(NSUInteger)index {
  return [pointsArray int32AtIndex:index];
}
- (NSArray *)chatToUserId {
  return chatToUserIdArray;
}
- (NSString*)chatToUserIdAtIndex:(NSUInteger)index {
  return [chatToUserIdArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitsnsUsers = YES;
   [self.snsUsers enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsnsUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInitsnsUsers) return isInitsnsUsers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionHost) {
    [output writeString:3 value:self.sessionHost];
  }
  if (self.hasSessionStatus) {
    [output writeInt32:4 value:self.sessionStatus];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  if (self.hasNewUserId) {
    [output writeString:7 value:self.newUserId];
  }
  if (self.hasQuitUserId) {
    [output writeString:8 value:self.quitUserId];
  }
  if (self.hasNickName) {
    [output writeString:9 value:self.nickName];
  }
  if (self.hasUserAvatar) {
    [output writeString:10 value:self.userAvatar];
  }
  if (self.hasUserGender) {
    [output writeBool:11 value:self.userGender];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  if (self.hasLocation) {
    [output writeString:13 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:14 value:self.userLevel];
  }
  const NSUInteger pointsArrayCount = self.pointsArray.count;
  if (pointsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.pointsArray.data;
    [output writeRawVarint32:170];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < pointsArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  if (self.hasWidth) {
    [output writeFloat:22 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:23 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:24 value:self.penType];
  }
  if (self.hasWord) {
    [output writeString:31 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:32 value:self.level];
  }
  if (self.hasRound) {
    [output writeInt32:33 value:self.round];
  }
  if (self.hasLanguage) {
    [output writeInt32:34 value:self.language];
  }
  if (self.hasGuessWord) {
    [output writeString:41 value:self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output writeString:42 value:self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output writeBool:43 value:self.guessCorrect];
  }
  if (self.hasGuessGainCoins) {
    [output writeInt32:44 value:self.guessGainCoins];
  }
  [self.chatToUserIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:51 value:element];
  }];
  if (self.hasChatContent) {
    [output writeString:52 value:self.chatContent];
  }
  if (self.hasChatType) {
    [output writeInt32:53 value:self.chatType];
  }
  if (self.hasTurnGainCoins) {
    [output writeInt32:61 value:self.turnGainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionHost) {
    size_ += computeStringSize(3, self.sessionHost);
  }
  if (self.hasSessionStatus) {
    size_ += computeInt32Size(4, self.sessionStatus);
  }
  if (self.hasCurrentPlayUserId) {
    size_ += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size_ += computeStringSize(6, self.nextPlayUserId);
  }
  if (self.hasNewUserId) {
    size_ += computeStringSize(7, self.newUserId);
  }
  if (self.hasQuitUserId) {
    size_ += computeStringSize(8, self.quitUserId);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(9, self.nickName);
  }
  if (self.hasUserAvatar) {
    size_ += computeStringSize(10, self.userAvatar);
  }
  if (self.hasUserGender) {
    size_ += computeBoolSize(11, self.userGender);
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  if (self.hasLocation) {
    size_ += computeStringSize(13, self.location);
  }
  if (self.hasUserLevel) {
    size_ += computeInt32Size(14, self.userLevel);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointsArray.count;
    const SInt32 *values = (const SInt32 *)self.pointsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size_ += computeFloatSize(22, self.width);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(23, self.color);
  }
  if (self.hasPenType) {
    size_ += computeInt32Size(24, self.penType);
  }
  if (self.hasWord) {
    size_ += computeStringSize(31, self.word);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(32, self.level);
  }
  if (self.hasRound) {
    size_ += computeInt32Size(33, self.round);
  }
  if (self.hasLanguage) {
    size_ += computeInt32Size(34, self.language);
  }
  if (self.hasGuessWord) {
    size_ += computeStringSize(41, self.guessWord);
  }
  if (self.hasGuessUserId) {
    size_ += computeStringSize(42, self.guessUserId);
  }
  if (self.hasGuessCorrect) {
    size_ += computeBoolSize(43, self.guessCorrect);
  }
  if (self.hasGuessGainCoins) {
    size_ += computeInt32Size(44, self.guessGainCoins);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.chatToUserIdArray.count;
    [self.chatToUserIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasChatContent) {
    size_ += computeStringSize(52, self.chatContent);
  }
  if (self.hasChatType) {
    size_ += computeInt32Size(53, self.chatType);
  }
  if (self.hasTurnGainCoins) {
    size_ += computeInt32Size(61, self.turnGainCoins);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GeneralNotification*) parseFromData:(NSData*) data {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data] build];
}
+ (GeneralNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotificationBuilder*) builder {
  return [[GeneralNotificationBuilder alloc] init];
}
+ (GeneralNotificationBuilder*) builderWithPrototype:(GeneralNotification*) prototype {
  return [[GeneralNotification builder] mergeFrom:prototype];
}
- (GeneralNotificationBuilder*) builder {
  return [GeneralNotification builder];
}
- (GeneralNotificationBuilder*) toBuilder {
  return [GeneralNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionHost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionHost", self.sessionHost];
  }
  if (self.hasSessionStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionStatus", [NSNumber numberWithInteger:self.sessionStatus]];
  }
  if (self.hasCurrentPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPlayUserId", self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPlayUserId", self.nextPlayUserId];
  }
  if (self.hasNewUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newUserId", self.newUserId];
  }
  if (self.hasQuitUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quitUserId", self.quitUserId];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasUserAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userAvatar", self.userAvatar];
  }
  if (self.hasUserGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userGender", [NSNumber numberWithBool:self.userGender]];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"snsUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasUserLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userLevel", [NSNumber numberWithInteger:self.userLevel]];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"points", obj];
  }];
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  if (self.hasPenType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penType", [NSNumber numberWithInteger:self.penType]];
  }
  if (self.hasWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"word", self.word];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"round", [NSNumber numberWithInteger:self.round]];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", [NSNumber numberWithInteger:self.language]];
  }
  if (self.hasGuessWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessWord", self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessUserId", self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessCorrect", [NSNumber numberWithBool:self.guessCorrect]];
  }
  if (self.hasGuessGainCoins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessGainCoins", [NSNumber numberWithInteger:self.guessGainCoins]];
  }
  [self.chatToUserIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatToUserId", obj];
  }];
  if (self.hasChatContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatContent", self.chatContent];
  }
  if (self.hasChatType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatType", [NSNumber numberWithInteger:self.chatType]];
  }
  if (self.hasTurnGainCoins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"turnGainCoins", [NSNumber numberWithInteger:self.turnGainCoins]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GeneralNotification class]]) {
    return NO;
  }
  GeneralNotification *otherMessage = other;
  return
      self.hasSessionHost == otherMessage.hasSessionHost &&
      (!self.hasSessionHost || [self.sessionHost isEqual:otherMessage.sessionHost]) &&
      self.hasSessionStatus == otherMessage.hasSessionStatus &&
      (!self.hasSessionStatus || self.sessionStatus == otherMessage.sessionStatus) &&
      self.hasCurrentPlayUserId == otherMessage.hasCurrentPlayUserId &&
      (!self.hasCurrentPlayUserId || [self.currentPlayUserId isEqual:otherMessage.currentPlayUserId]) &&
      self.hasNextPlayUserId == otherMessage.hasNextPlayUserId &&
      (!self.hasNextPlayUserId || [self.nextPlayUserId isEqual:otherMessage.nextPlayUserId]) &&
      self.hasNewUserId == otherMessage.hasNewUserId &&
      (!self.hasNewUserId || [self.newUserId isEqual:otherMessage.newUserId]) &&
      self.hasQuitUserId == otherMessage.hasQuitUserId &&
      (!self.hasQuitUserId || [self.quitUserId isEqual:otherMessage.quitUserId]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasUserAvatar == otherMessage.hasUserAvatar &&
      (!self.hasUserAvatar || [self.userAvatar isEqual:otherMessage.userAvatar]) &&
      self.hasUserGender == otherMessage.hasUserGender &&
      (!self.hasUserGender || self.userGender == otherMessage.userGender) &&
      [self.snsUsersArray isEqualToArray:otherMessage.snsUsersArray] &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasUserLevel == otherMessage.hasUserLevel &&
      (!self.hasUserLevel || self.userLevel == otherMessage.userLevel) &&
      [self.pointsArray isEqualToArray:otherMessage.pointsArray] &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      self.hasPenType == otherMessage.hasPenType &&
      (!self.hasPenType || self.penType == otherMessage.penType) &&
      self.hasWord == otherMessage.hasWord &&
      (!self.hasWord || [self.word isEqual:otherMessage.word]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasRound == otherMessage.hasRound &&
      (!self.hasRound || self.round == otherMessage.round) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || self.language == otherMessage.language) &&
      self.hasGuessWord == otherMessage.hasGuessWord &&
      (!self.hasGuessWord || [self.guessWord isEqual:otherMessage.guessWord]) &&
      self.hasGuessUserId == otherMessage.hasGuessUserId &&
      (!self.hasGuessUserId || [self.guessUserId isEqual:otherMessage.guessUserId]) &&
      self.hasGuessCorrect == otherMessage.hasGuessCorrect &&
      (!self.hasGuessCorrect || self.guessCorrect == otherMessage.guessCorrect) &&
      self.hasGuessGainCoins == otherMessage.hasGuessGainCoins &&
      (!self.hasGuessGainCoins || self.guessGainCoins == otherMessage.guessGainCoins) &&
      [self.chatToUserIdArray isEqualToArray:otherMessage.chatToUserIdArray] &&
      self.hasChatContent == otherMessage.hasChatContent &&
      (!self.hasChatContent || [self.chatContent isEqual:otherMessage.chatContent]) &&
      self.hasChatType == otherMessage.hasChatType &&
      (!self.hasChatType || self.chatType == otherMessage.chatType) &&
      self.hasTurnGainCoins == otherMessage.hasTurnGainCoins &&
      (!self.hasTurnGainCoins || self.turnGainCoins == otherMessage.turnGainCoins) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionHost) {
    hashCode = hashCode * 31 + [self.sessionHost hash];
  }
  if (self.hasSessionStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionStatus] hash];
  }
  if (self.hasCurrentPlayUserId) {
    hashCode = hashCode * 31 + [self.currentPlayUserId hash];
  }
  if (self.hasNextPlayUserId) {
    hashCode = hashCode * 31 + [self.nextPlayUserId hash];
  }
  if (self.hasNewUserId) {
    hashCode = hashCode * 31 + [self.newUserId hash];
  }
  if (self.hasQuitUserId) {
    hashCode = hashCode * 31 + [self.quitUserId hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasUserAvatar) {
    hashCode = hashCode * 31 + [self.userAvatar hash];
  }
  if (self.hasUserGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.userGender] hash];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasUserLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userLevel] hash];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  if (self.hasPenType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.penType] hash];
  }
  if (self.hasWord) {
    hashCode = hashCode * 31 + [self.word hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.round] hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.language] hash];
  }
  if (self.hasGuessWord) {
    hashCode = hashCode * 31 + [self.guessWord hash];
  }
  if (self.hasGuessUserId) {
    hashCode = hashCode * 31 + [self.guessUserId hash];
  }
  if (self.hasGuessCorrect) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.guessCorrect] hash];
  }
  if (self.hasGuessGainCoins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guessGainCoins] hash];
  }
  [self.chatToUserIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasChatContent) {
    hashCode = hashCode * 31 + [self.chatContent hash];
  }
  if (self.hasChatType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.chatType] hash];
  }
  if (self.hasTurnGainCoins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.turnGainCoins] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GeneralNotificationBuilder()
@property (strong) GeneralNotification* resultGeneralNotification;
@end

@implementation GeneralNotificationBuilder
@synthesize resultGeneralNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGeneralNotification = [[GeneralNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGeneralNotification;
}
- (GeneralNotificationBuilder*) clear {
  self.resultGeneralNotification = [[GeneralNotification alloc] init];
  return self;
}
- (GeneralNotificationBuilder*) clone {
  return [GeneralNotification builderWithPrototype:resultGeneralNotification];
}
- (GeneralNotification*) defaultInstance {
  return [GeneralNotification defaultInstance];
}
- (GeneralNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GeneralNotification*) buildPartial {
  GeneralNotification* returnMe = resultGeneralNotification;
  self.resultGeneralNotification = nil;
  return returnMe;
}
- (GeneralNotificationBuilder*) mergeFrom:(GeneralNotification*) other {
  if (other == [GeneralNotification defaultInstance]) {
    return self;
  }
  if (other.hasSessionHost) {
    [self setSessionHost:other.sessionHost];
  }
  if (other.hasSessionStatus) {
    [self setSessionStatus:other.sessionStatus];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasNewUserId) {
    [self setNewUserId:other.newUserId];
  }
  if (other.hasQuitUserId) {
    [self setQuitUserId:other.quitUserId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasUserAvatar) {
    [self setUserAvatar:other.userAvatar];
  }
  if (other.hasUserGender) {
    [self setUserGender:other.userGender];
  }
  if (other.snsUsersArray.count > 0) {
    if (resultGeneralNotification.snsUsersArray == nil) {
      resultGeneralNotification.snsUsersArray = [[NSMutableArray alloc] initWithArray:other.snsUsersArray];
    } else {
      [resultGeneralNotification.snsUsersArray addObjectsFromArray:other.snsUsersArray];
    }
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.pointsArray.count > 0) {
    if (resultGeneralNotification.pointsArray == nil) {
      resultGeneralNotification.pointsArray = [other.pointsArray copy];
    } else {
      [resultGeneralNotification.pointsArray appendArray:other.pointsArray];
    }
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasGuessWord) {
    [self setGuessWord:other.guessWord];
  }
  if (other.hasGuessUserId) {
    [self setGuessUserId:other.guessUserId];
  }
  if (other.hasGuessCorrect) {
    [self setGuessCorrect:other.guessCorrect];
  }
  if (other.hasGuessGainCoins) {
    [self setGuessGainCoins:other.guessGainCoins];
  }
  if (other.chatToUserIdArray.count > 0) {
    if (resultGeneralNotification.chatToUserIdArray == nil) {
      resultGeneralNotification.chatToUserIdArray = [[NSMutableArray alloc] initWithArray:other.chatToUserIdArray];
    } else {
      [resultGeneralNotification.chatToUserIdArray addObjectsFromArray:other.chatToUserIdArray];
    }
  }
  if (other.hasChatContent) {
    [self setChatContent:other.chatContent];
  }
  if (other.hasChatType) {
    [self setChatType:other.chatType];
  }
  if (other.hasTurnGainCoins) {
    [self setTurnGainCoins:other.turnGainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GeneralNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GeneralNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 26: {
        [self setSessionHost:[input readString]];
        break;
      }
      case 32: {
        [self setSessionStatus:[input readInt32]];
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 58: {
        [self setNewUserId:[input readString]];
        break;
      }
      case 66: {
        [self setQuitUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNickName:[input readString]];
        break;
      }
      case 82: {
        [self setUserAvatar:[input readString]];
        break;
      }
      case 88: {
        [self setUserGender:[input readBool]];
        break;
      }
      case 98: {
        PBSNSUserBuilder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        [self setLocation:[input readString]];
        break;
      }
      case 112: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 170: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultGeneralNotification.pointsArray == nil) {
          resultGeneralNotification.pointsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultGeneralNotification.pointsArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 181: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 184: {
        [self setColor:[input readInt32]];
        break;
      }
      case 192: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 250: {
        [self setWord:[input readString]];
        break;
      }
      case 256: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 264: {
        [self setRound:[input readInt32]];
        break;
      }
      case 272: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 330: {
        [self setGuessWord:[input readString]];
        break;
      }
      case 338: {
        [self setGuessUserId:[input readString]];
        break;
      }
      case 344: {
        [self setGuessCorrect:[input readBool]];
        break;
      }
      case 352: {
        [self setGuessGainCoins:[input readInt32]];
        break;
      }
      case 410: {
        [self addChatToUserId:[input readString]];
        break;
      }
      case 418: {
        [self setChatContent:[input readString]];
        break;
      }
      case 424: {
        [self setChatType:[input readInt32]];
        break;
      }
      case 488: {
        [self setTurnGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionHost {
  return resultGeneralNotification.hasSessionHost;
}
- (NSString*) sessionHost {
  return resultGeneralNotification.sessionHost;
}
- (GeneralNotificationBuilder*) setSessionHost:(NSString*) value {
  resultGeneralNotification.hasSessionHost = YES;
  resultGeneralNotification.sessionHost = value;
  return self;
}
- (GeneralNotificationBuilder*) clearSessionHost {
  resultGeneralNotification.hasSessionHost = NO;
  resultGeneralNotification.sessionHost = @"";
  return self;
}
- (BOOL) hasSessionStatus {
  return resultGeneralNotification.hasSessionStatus;
}
- (SInt32) sessionStatus {
  return resultGeneralNotification.sessionStatus;
}
- (GeneralNotificationBuilder*) setSessionStatus:(SInt32) value {
  resultGeneralNotification.hasSessionStatus = YES;
  resultGeneralNotification.sessionStatus = value;
  return self;
}
- (GeneralNotificationBuilder*) clearSessionStatus {
  resultGeneralNotification.hasSessionStatus = NO;
  resultGeneralNotification.sessionStatus = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return resultGeneralNotification.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return resultGeneralNotification.currentPlayUserId;
}
- (GeneralNotificationBuilder*) setCurrentPlayUserId:(NSString*) value {
  resultGeneralNotification.hasCurrentPlayUserId = YES;
  resultGeneralNotification.currentPlayUserId = value;
  return self;
}
- (GeneralNotificationBuilder*) clearCurrentPlayUserId {
  resultGeneralNotification.hasCurrentPlayUserId = NO;
  resultGeneralNotification.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return resultGeneralNotification.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return resultGeneralNotification.nextPlayUserId;
}
- (GeneralNotificationBuilder*) setNextPlayUserId:(NSString*) value {
  resultGeneralNotification.hasNextPlayUserId = YES;
  resultGeneralNotification.nextPlayUserId = value;
  return self;
}
- (GeneralNotificationBuilder*) clearNextPlayUserId {
  resultGeneralNotification.hasNextPlayUserId = NO;
  resultGeneralNotification.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasNewUserId {
  return resultGeneralNotification.hasNewUserId;
}
- (NSString*) newUserId {
  return resultGeneralNotification.newUserId;
}
- (GeneralNotificationBuilder*) setNewUserId:(NSString*) value {
  resultGeneralNotification.hasNewUserId = YES;
  resultGeneralNotification.newUserId = value;
  return self;
}
- (GeneralNotificationBuilder*) clearNewUserId {
  resultGeneralNotification.hasNewUserId = NO;
  resultGeneralNotification.newUserId = @"";
  return self;
}
- (BOOL) hasQuitUserId {
  return resultGeneralNotification.hasQuitUserId;
}
- (NSString*) quitUserId {
  return resultGeneralNotification.quitUserId;
}
- (GeneralNotificationBuilder*) setQuitUserId:(NSString*) value {
  resultGeneralNotification.hasQuitUserId = YES;
  resultGeneralNotification.quitUserId = value;
  return self;
}
- (GeneralNotificationBuilder*) clearQuitUserId {
  resultGeneralNotification.hasQuitUserId = NO;
  resultGeneralNotification.quitUserId = @"";
  return self;
}
- (BOOL) hasNickName {
  return resultGeneralNotification.hasNickName;
}
- (NSString*) nickName {
  return resultGeneralNotification.nickName;
}
- (GeneralNotificationBuilder*) setNickName:(NSString*) value {
  resultGeneralNotification.hasNickName = YES;
  resultGeneralNotification.nickName = value;
  return self;
}
- (GeneralNotificationBuilder*) clearNickName {
  resultGeneralNotification.hasNickName = NO;
  resultGeneralNotification.nickName = @"";
  return self;
}
- (BOOL) hasUserAvatar {
  return resultGeneralNotification.hasUserAvatar;
}
- (NSString*) userAvatar {
  return resultGeneralNotification.userAvatar;
}
- (GeneralNotificationBuilder*) setUserAvatar:(NSString*) value {
  resultGeneralNotification.hasUserAvatar = YES;
  resultGeneralNotification.userAvatar = value;
  return self;
}
- (GeneralNotificationBuilder*) clearUserAvatar {
  resultGeneralNotification.hasUserAvatar = NO;
  resultGeneralNotification.userAvatar = @"";
  return self;
}
- (BOOL) hasUserGender {
  return resultGeneralNotification.hasUserGender;
}
- (BOOL) userGender {
  return resultGeneralNotification.userGender;
}
- (GeneralNotificationBuilder*) setUserGender:(BOOL) value {
  resultGeneralNotification.hasUserGender = YES;
  resultGeneralNotification.userGender = value;
  return self;
}
- (GeneralNotificationBuilder*) clearUserGender {
  resultGeneralNotification.hasUserGender = NO;
  resultGeneralNotification.userGender = NO;
  return self;
}
- (NSMutableArray *)snsUsers {
  return resultGeneralNotification.snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [resultGeneralNotification snsUsersAtIndex:index];
}
- (GeneralNotificationBuilder *)addSnsUsers:(PBSNSUser*)value {
  if (resultGeneralNotification.snsUsersArray == nil) {
    resultGeneralNotification.snsUsersArray = [[NSMutableArray alloc]init];
  }
  [resultGeneralNotification.snsUsersArray addObject:value];
  return self;
}
- (GeneralNotificationBuilder *)setSnsUsersArray:(NSArray *)array {
  resultGeneralNotification.snsUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (GeneralNotificationBuilder *)clearSnsUsers {
  resultGeneralNotification.snsUsersArray = nil;
  return self;
}
- (BOOL) hasLocation {
  return resultGeneralNotification.hasLocation;
}
- (NSString*) location {
  return resultGeneralNotification.location;
}
- (GeneralNotificationBuilder*) setLocation:(NSString*) value {
  resultGeneralNotification.hasLocation = YES;
  resultGeneralNotification.location = value;
  return self;
}
- (GeneralNotificationBuilder*) clearLocation {
  resultGeneralNotification.hasLocation = NO;
  resultGeneralNotification.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return resultGeneralNotification.hasUserLevel;
}
- (SInt32) userLevel {
  return resultGeneralNotification.userLevel;
}
- (GeneralNotificationBuilder*) setUserLevel:(SInt32) value {
  resultGeneralNotification.hasUserLevel = YES;
  resultGeneralNotification.userLevel = value;
  return self;
}
- (GeneralNotificationBuilder*) clearUserLevel {
  resultGeneralNotification.hasUserLevel = NO;
  resultGeneralNotification.userLevel = 0;
  return self;
}
- (PBAppendableArray *)points {
  return resultGeneralNotification.pointsArray;
}
- (SInt32)pointsAtIndex:(NSUInteger)index {
  return [resultGeneralNotification pointsAtIndex:index];
}
- (GeneralNotificationBuilder *)addPoints:(SInt32)value {
  if (resultGeneralNotification.pointsArray == nil) {
    resultGeneralNotification.pointsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultGeneralNotification.pointsArray addInt32:value];
  return self;
}
- (GeneralNotificationBuilder *)setPointsArray:(NSArray *)array {
  resultGeneralNotification.pointsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (GeneralNotificationBuilder *)setPointsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultGeneralNotification.pointsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (GeneralNotificationBuilder *)clearPoints {
  resultGeneralNotification.pointsArray = nil;
  return self;
}
- (BOOL) hasWidth {
  return resultGeneralNotification.hasWidth;
}
- (Float32) width {
  return resultGeneralNotification.width;
}
- (GeneralNotificationBuilder*) setWidth:(Float32) value {
  resultGeneralNotification.hasWidth = YES;
  resultGeneralNotification.width = value;
  return self;
}
- (GeneralNotificationBuilder*) clearWidth {
  resultGeneralNotification.hasWidth = NO;
  resultGeneralNotification.width = 0;
  return self;
}
- (BOOL) hasColor {
  return resultGeneralNotification.hasColor;
}
- (SInt32) color {
  return resultGeneralNotification.color;
}
- (GeneralNotificationBuilder*) setColor:(SInt32) value {
  resultGeneralNotification.hasColor = YES;
  resultGeneralNotification.color = value;
  return self;
}
- (GeneralNotificationBuilder*) clearColor {
  resultGeneralNotification.hasColor = NO;
  resultGeneralNotification.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return resultGeneralNotification.hasPenType;
}
- (SInt32) penType {
  return resultGeneralNotification.penType;
}
- (GeneralNotificationBuilder*) setPenType:(SInt32) value {
  resultGeneralNotification.hasPenType = YES;
  resultGeneralNotification.penType = value;
  return self;
}
- (GeneralNotificationBuilder*) clearPenType {
  resultGeneralNotification.hasPenType = NO;
  resultGeneralNotification.penType = 0;
  return self;
}
- (BOOL) hasWord {
  return resultGeneralNotification.hasWord;
}
- (NSString*) word {
  return resultGeneralNotification.word;
}
- (GeneralNotificationBuilder*) setWord:(NSString*) value {
  resultGeneralNotification.hasWord = YES;
  resultGeneralNotification.word = value;
  return self;
}
- (GeneralNotificationBuilder*) clearWord {
  resultGeneralNotification.hasWord = NO;
  resultGeneralNotification.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultGeneralNotification.hasLevel;
}
- (SInt32) level {
  return resultGeneralNotification.level;
}
- (GeneralNotificationBuilder*) setLevel:(SInt32) value {
  resultGeneralNotification.hasLevel = YES;
  resultGeneralNotification.level = value;
  return self;
}
- (GeneralNotificationBuilder*) clearLevel {
  resultGeneralNotification.hasLevel = NO;
  resultGeneralNotification.level = 0;
  return self;
}
- (BOOL) hasRound {
  return resultGeneralNotification.hasRound;
}
- (SInt32) round {
  return resultGeneralNotification.round;
}
- (GeneralNotificationBuilder*) setRound:(SInt32) value {
  resultGeneralNotification.hasRound = YES;
  resultGeneralNotification.round = value;
  return self;
}
- (GeneralNotificationBuilder*) clearRound {
  resultGeneralNotification.hasRound = NO;
  resultGeneralNotification.round = 0;
  return self;
}
- (BOOL) hasLanguage {
  return resultGeneralNotification.hasLanguage;
}
- (SInt32) language {
  return resultGeneralNotification.language;
}
- (GeneralNotificationBuilder*) setLanguage:(SInt32) value {
  resultGeneralNotification.hasLanguage = YES;
  resultGeneralNotification.language = value;
  return self;
}
- (GeneralNotificationBuilder*) clearLanguage {
  resultGeneralNotification.hasLanguage = NO;
  resultGeneralNotification.language = 0;
  return self;
}
- (BOOL) hasGuessWord {
  return resultGeneralNotification.hasGuessWord;
}
- (NSString*) guessWord {
  return resultGeneralNotification.guessWord;
}
- (GeneralNotificationBuilder*) setGuessWord:(NSString*) value {
  resultGeneralNotification.hasGuessWord = YES;
  resultGeneralNotification.guessWord = value;
  return self;
}
- (GeneralNotificationBuilder*) clearGuessWord {
  resultGeneralNotification.hasGuessWord = NO;
  resultGeneralNotification.guessWord = @"";
  return self;
}
- (BOOL) hasGuessUserId {
  return resultGeneralNotification.hasGuessUserId;
}
- (NSString*) guessUserId {
  return resultGeneralNotification.guessUserId;
}
- (GeneralNotificationBuilder*) setGuessUserId:(NSString*) value {
  resultGeneralNotification.hasGuessUserId = YES;
  resultGeneralNotification.guessUserId = value;
  return self;
}
- (GeneralNotificationBuilder*) clearGuessUserId {
  resultGeneralNotification.hasGuessUserId = NO;
  resultGeneralNotification.guessUserId = @"";
  return self;
}
- (BOOL) hasGuessCorrect {
  return resultGeneralNotification.hasGuessCorrect;
}
- (BOOL) guessCorrect {
  return resultGeneralNotification.guessCorrect;
}
- (GeneralNotificationBuilder*) setGuessCorrect:(BOOL) value {
  resultGeneralNotification.hasGuessCorrect = YES;
  resultGeneralNotification.guessCorrect = value;
  return self;
}
- (GeneralNotificationBuilder*) clearGuessCorrect {
  resultGeneralNotification.hasGuessCorrect = NO;
  resultGeneralNotification.guessCorrect = NO;
  return self;
}
- (BOOL) hasGuessGainCoins {
  return resultGeneralNotification.hasGuessGainCoins;
}
- (SInt32) guessGainCoins {
  return resultGeneralNotification.guessGainCoins;
}
- (GeneralNotificationBuilder*) setGuessGainCoins:(SInt32) value {
  resultGeneralNotification.hasGuessGainCoins = YES;
  resultGeneralNotification.guessGainCoins = value;
  return self;
}
- (GeneralNotificationBuilder*) clearGuessGainCoins {
  resultGeneralNotification.hasGuessGainCoins = NO;
  resultGeneralNotification.guessGainCoins = 0;
  return self;
}
- (NSMutableArray *)chatToUserId {
  return resultGeneralNotification.chatToUserIdArray;
}
- (NSString*)chatToUserIdAtIndex:(NSUInteger)index {
  return [resultGeneralNotification chatToUserIdAtIndex:index];
}
- (GeneralNotificationBuilder *)addChatToUserId:(NSString*)value {
  if (resultGeneralNotification.chatToUserIdArray == nil) {
    resultGeneralNotification.chatToUserIdArray = [[NSMutableArray alloc]init];
  }
  [resultGeneralNotification.chatToUserIdArray addObject:value];
  return self;
}
- (GeneralNotificationBuilder *)setChatToUserIdArray:(NSArray *)array {
  resultGeneralNotification.chatToUserIdArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (GeneralNotificationBuilder *)clearChatToUserId {
  resultGeneralNotification.chatToUserIdArray = nil;
  return self;
}
- (BOOL) hasChatContent {
  return resultGeneralNotification.hasChatContent;
}
- (NSString*) chatContent {
  return resultGeneralNotification.chatContent;
}
- (GeneralNotificationBuilder*) setChatContent:(NSString*) value {
  resultGeneralNotification.hasChatContent = YES;
  resultGeneralNotification.chatContent = value;
  return self;
}
- (GeneralNotificationBuilder*) clearChatContent {
  resultGeneralNotification.hasChatContent = NO;
  resultGeneralNotification.chatContent = @"";
  return self;
}
- (BOOL) hasChatType {
  return resultGeneralNotification.hasChatType;
}
- (SInt32) chatType {
  return resultGeneralNotification.chatType;
}
- (GeneralNotificationBuilder*) setChatType:(SInt32) value {
  resultGeneralNotification.hasChatType = YES;
  resultGeneralNotification.chatType = value;
  return self;
}
- (GeneralNotificationBuilder*) clearChatType {
  resultGeneralNotification.hasChatType = NO;
  resultGeneralNotification.chatType = 0;
  return self;
}
- (BOOL) hasTurnGainCoins {
  return resultGeneralNotification.hasTurnGainCoins;
}
- (SInt32) turnGainCoins {
  return resultGeneralNotification.turnGainCoins;
}
- (GeneralNotificationBuilder*) setTurnGainCoins:(SInt32) value {
  resultGeneralNotification.hasTurnGainCoins = YES;
  resultGeneralNotification.turnGainCoins = value;
  return self;
}
- (GeneralNotificationBuilder*) clearTurnGainCoins {
  resultGeneralNotification.hasTurnGainCoins = NO;
  resultGeneralNotification.turnGainCoins = 0;
  return self;
}
@end

@interface FacetimeChatRequest ()
@property (strong) PBGameUser* user;
@property BOOL chatGender;
@end

@implementation FacetimeChatRequest

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasChatGender {
  return !!hasChatGender_;
}
- (void) setHasChatGender:(BOOL) _value_ {
  hasChatGender_ = !!_value_;
}
- (BOOL) chatGender {
  return !!chatGender_;
}
- (void) setChatGender:(BOOL) _value_ {
  chatGender_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [PBGameUser defaultInstance];
    self.chatGender = NO;
  }
  return self;
}
static FacetimeChatRequest* defaultFacetimeChatRequestInstance = nil;
+ (void) initialize {
  if (self == [FacetimeChatRequest class]) {
    defaultFacetimeChatRequestInstance = [[FacetimeChatRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFacetimeChatRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultFacetimeChatRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasChatGender) {
    [output writeBool:2 value:self.chatGender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasChatGender) {
    size_ += computeBoolSize(2, self.chatGender);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FacetimeChatRequest*) parseFromData:(NSData*) data {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromData:data] build];
}
+ (FacetimeChatRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatRequest*) parseFromInputStream:(NSInputStream*) input {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromInputStream:input] build];
}
+ (FacetimeChatRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromCodedInputStream:input] build];
}
+ (FacetimeChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatRequestBuilder*) builder {
  return [[FacetimeChatRequestBuilder alloc] init];
}
+ (FacetimeChatRequestBuilder*) builderWithPrototype:(FacetimeChatRequest*) prototype {
  return [[FacetimeChatRequest builder] mergeFrom:prototype];
}
- (FacetimeChatRequestBuilder*) builder {
  return [FacetimeChatRequest builder];
}
- (FacetimeChatRequestBuilder*) toBuilder {
  return [FacetimeChatRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatGender", [NSNumber numberWithBool:self.chatGender]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FacetimeChatRequest class]]) {
    return NO;
  }
  FacetimeChatRequest *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasChatGender == otherMessage.hasChatGender &&
      (!self.hasChatGender || self.chatGender == otherMessage.chatGender) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasChatGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.chatGender] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FacetimeChatRequestBuilder()
@property (strong) FacetimeChatRequest* resultFacetimeChatRequest;
@end

@implementation FacetimeChatRequestBuilder
@synthesize resultFacetimeChatRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFacetimeChatRequest = [[FacetimeChatRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFacetimeChatRequest;
}
- (FacetimeChatRequestBuilder*) clear {
  self.resultFacetimeChatRequest = [[FacetimeChatRequest alloc] init];
  return self;
}
- (FacetimeChatRequestBuilder*) clone {
  return [FacetimeChatRequest builderWithPrototype:resultFacetimeChatRequest];
}
- (FacetimeChatRequest*) defaultInstance {
  return [FacetimeChatRequest defaultInstance];
}
- (FacetimeChatRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FacetimeChatRequest*) buildPartial {
  FacetimeChatRequest* returnMe = resultFacetimeChatRequest;
  self.resultFacetimeChatRequest = nil;
  return returnMe;
}
- (FacetimeChatRequestBuilder*) mergeFrom:(FacetimeChatRequest*) other {
  if (other == [FacetimeChatRequest defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasChatGender) {
    [self setChatGender:other.chatGender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FacetimeChatRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FacetimeChatRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setChatGender:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultFacetimeChatRequest.hasUser;
}
- (PBGameUser*) user {
  return resultFacetimeChatRequest.user;
}
- (FacetimeChatRequestBuilder*) setUser:(PBGameUser*) value {
  resultFacetimeChatRequest.hasUser = YES;
  resultFacetimeChatRequest.user = value;
  return self;
}
- (FacetimeChatRequestBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (FacetimeChatRequestBuilder*) mergeUser:(PBGameUser*) value {
  if (resultFacetimeChatRequest.hasUser &&
      resultFacetimeChatRequest.user != [PBGameUser defaultInstance]) {
    resultFacetimeChatRequest.user =
      [[[PBGameUser builderWithPrototype:resultFacetimeChatRequest.user] mergeFrom:value] buildPartial];
  } else {
    resultFacetimeChatRequest.user = value;
  }
  resultFacetimeChatRequest.hasUser = YES;
  return self;
}
- (FacetimeChatRequestBuilder*) clearUser {
  resultFacetimeChatRequest.hasUser = NO;
  resultFacetimeChatRequest.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasChatGender {
  return resultFacetimeChatRequest.hasChatGender;
}
- (BOOL) chatGender {
  return resultFacetimeChatRequest.chatGender;
}
- (FacetimeChatRequestBuilder*) setChatGender:(BOOL) value {
  resultFacetimeChatRequest.hasChatGender = YES;
  resultFacetimeChatRequest.chatGender = value;
  return self;
}
- (FacetimeChatRequestBuilder*) clearChatGender {
  resultFacetimeChatRequest.hasChatGender = NO;
  resultFacetimeChatRequest.chatGender = NO;
  return self;
}
@end

@interface FacetimeChatResponse ()
@property (strong) NSMutableArray * userArray;
@property BOOL chosenToInitiate;
@end

@implementation FacetimeChatResponse

@synthesize userArray;
@dynamic user;
- (BOOL) hasChosenToInitiate {
  return !!hasChosenToInitiate_;
}
- (void) setHasChosenToInitiate:(BOOL) _value_ {
  hasChosenToInitiate_ = !!_value_;
}
- (BOOL) chosenToInitiate {
  return !!chosenToInitiate_;
}
- (void) setChosenToInitiate:(BOOL) _value_ {
  chosenToInitiate_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.chosenToInitiate = NO;
  }
  return self;
}
static FacetimeChatResponse* defaultFacetimeChatResponseInstance = nil;
+ (void) initialize {
  if (self == [FacetimeChatResponse class]) {
    defaultFacetimeChatResponseInstance = [[FacetimeChatResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFacetimeChatResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultFacetimeChatResponseInstance;
}
- (NSArray *)user {
  return userArray;
}
- (PBGameUser*)userAtIndex:(NSUInteger)index {
  return [userArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasChosenToInitiate) {
    return NO;
  }
  __block BOOL isInituser = YES;
   [self.user enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituser = NO;
      *stop = YES;
    }
  }];
  if (!isInituser) return isInituser;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasChosenToInitiate) {
    [output writeBool:2 value:self.chosenToInitiate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasChosenToInitiate) {
    size_ += computeBoolSize(2, self.chosenToInitiate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FacetimeChatResponse*) parseFromData:(NSData*) data {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromData:data] build];
}
+ (FacetimeChatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromInputStream:input] build];
}
+ (FacetimeChatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (FacetimeChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatResponseBuilder*) builder {
  return [[FacetimeChatResponseBuilder alloc] init];
}
+ (FacetimeChatResponseBuilder*) builderWithPrototype:(FacetimeChatResponse*) prototype {
  return [[FacetimeChatResponse builder] mergeFrom:prototype];
}
- (FacetimeChatResponseBuilder*) builder {
  return [FacetimeChatResponse builder];
}
- (FacetimeChatResponseBuilder*) toBuilder {
  return [FacetimeChatResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasChosenToInitiate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chosenToInitiate", [NSNumber numberWithBool:self.chosenToInitiate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FacetimeChatResponse class]]) {
    return NO;
  }
  FacetimeChatResponse *otherMessage = other;
  return
      [self.userArray isEqualToArray:otherMessage.userArray] &&
      self.hasChosenToInitiate == otherMessage.hasChosenToInitiate &&
      (!self.hasChosenToInitiate || self.chosenToInitiate == otherMessage.chosenToInitiate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasChosenToInitiate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.chosenToInitiate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FacetimeChatResponseBuilder()
@property (strong) FacetimeChatResponse* resultFacetimeChatResponse;
@end

@implementation FacetimeChatResponseBuilder
@synthesize resultFacetimeChatResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFacetimeChatResponse = [[FacetimeChatResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFacetimeChatResponse;
}
- (FacetimeChatResponseBuilder*) clear {
  self.resultFacetimeChatResponse = [[FacetimeChatResponse alloc] init];
  return self;
}
- (FacetimeChatResponseBuilder*) clone {
  return [FacetimeChatResponse builderWithPrototype:resultFacetimeChatResponse];
}
- (FacetimeChatResponse*) defaultInstance {
  return [FacetimeChatResponse defaultInstance];
}
- (FacetimeChatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FacetimeChatResponse*) buildPartial {
  FacetimeChatResponse* returnMe = resultFacetimeChatResponse;
  self.resultFacetimeChatResponse = nil;
  return returnMe;
}
- (FacetimeChatResponseBuilder*) mergeFrom:(FacetimeChatResponse*) other {
  if (other == [FacetimeChatResponse defaultInstance]) {
    return self;
  }
  if (other.userArray.count > 0) {
    if (resultFacetimeChatResponse.userArray == nil) {
      resultFacetimeChatResponse.userArray = [[NSMutableArray alloc] initWithArray:other.userArray];
    } else {
      [resultFacetimeChatResponse.userArray addObjectsFromArray:other.userArray];
    }
  }
  if (other.hasChosenToInitiate) {
    [self setChosenToInitiate:other.chosenToInitiate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FacetimeChatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FacetimeChatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setChosenToInitiate:[input readBool]];
        break;
      }
    }
  }
}
- (NSMutableArray *)user {
  return resultFacetimeChatResponse.userArray;
}
- (PBGameUser*)userAtIndex:(NSUInteger)index {
  return [resultFacetimeChatResponse userAtIndex:index];
}
- (FacetimeChatResponseBuilder *)addUser:(PBGameUser*)value {
  if (resultFacetimeChatResponse.userArray == nil) {
    resultFacetimeChatResponse.userArray = [[NSMutableArray alloc]init];
  }
  [resultFacetimeChatResponse.userArray addObject:value];
  return self;
}
- (FacetimeChatResponseBuilder *)setUserArray:(NSArray *)array {
  resultFacetimeChatResponse.userArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FacetimeChatResponseBuilder *)clearUser {
  resultFacetimeChatResponse.userArray = nil;
  return self;
}
- (BOOL) hasChosenToInitiate {
  return resultFacetimeChatResponse.hasChosenToInitiate;
}
- (BOOL) chosenToInitiate {
  return resultFacetimeChatResponse.chosenToInitiate;
}
- (FacetimeChatResponseBuilder*) setChosenToInitiate:(BOOL) value {
  resultFacetimeChatResponse.hasChosenToInitiate = YES;
  resultFacetimeChatResponse.chosenToInitiate = value;
  return self;
}
- (FacetimeChatResponseBuilder*) clearChosenToInitiate {
  resultFacetimeChatResponse.hasChosenToInitiate = NO;
  resultFacetimeChatResponse.chosenToInitiate = NO;
  return self;
}
@end

@interface GameMessage ()
@property GameCommandType command;
@property SInt32 messageId;
@property GameResultCode resultCode;
@property (strong) NSString* userId;
@property SInt64 sessionId;
@property SInt32 round;
@property GameCompleteReason completeReason;
@property SInt32 onlineUserCount;
@property (strong) NSString* toUserId;
@property (strong) NSString* currentPlayUserId;
@property (strong) JoinGameRequest* joinGameRequest;
@property (strong) JoinGameResponse* joinGameResponse;
@property (strong) StartGameRequest* startGameRequest;
@property (strong) StartGameResponse* startGameResponse;
@property (strong) GameStartNotificationRequest* gameStartNotificationRequest;
@property (strong) GameStartNotificationResponse* gameStartNotificationResponse;
@property (strong) SendDrawDataRequest* sendDrawDataRequest;
@property (strong) SendDrawDataResponse* sendDrawDataResponse;
@property (strong) GameChatRequest* chatRequest;
@property (strong) GameChatResponse* chatResponse;
@property (strong) FacetimeChatRequest* facetimeChatRequest;
@property (strong) FacetimeChatResponse* facetimeChatResponse;
@property (strong) GeneralNotification* notification;
@property (strong) GetRoomsRequest* getRoomsRequest;
@property (strong) GetRoomsResponse* getRoomsResponse;
@property (strong) CreateRoomRequest* createRoomRequest;
@property (strong) CreateRoomResponse* createRoomResponse;
@property (strong) SearchRoomRequest* searchRoomRequest;
@property (strong) SearchRoomResponse* searchRoomResponse;
@property (strong) RoomNotificationRequest* roomNotificationRequest;
@property (strong) RollDiceEndNotificationRequest* rollDiceEndNotificationRequest;
@property (strong) CallDiceRequest* callDiceRequest;
@property (strong) CallDiceResponse* callDiceResponse;
@property (strong) OpenDiceRequest* openDiceRequest;
@property (strong) OpenDiceResponse* openDiceResponse;
@property (strong) GameOverNotificationRequest* gameOverNotificationRequest;
@property (strong) GameOverNotificationResponse* gameOverNotificationResponse;
@property (strong) RegisterRoomsNotificationRequest* registerRoomsNotificationRequest;
@property (strong) RegisterRoomsNotificationResponse* registerRoomsNotificationResponse;
@property (strong) UnRegisterRoomsNotificationRequest* unRegisterRoomsNotificationRequest;
@property (strong) UnRegisterRoomsNotificationResponse* unRegisterRoomsNotificationResponse;
@property (strong) UserDiceNotification* userDiceNotification;
@property (strong) BetDiceRequest* betDiceRequest;
@property (strong) BetDiceResponse* betDiceResponse;
@property (strong) UseItemRequest* useItemRequest;
@property (strong) UseItemResponse* useItemResponse;
@property (strong) BetRequest* betRequest;
@property (strong) BetResponse* betResponse;
@property (strong) CheckCardRequest* checkCardRequest;
@property (strong) CheckCardResponse* checkCardResponse;
@property (strong) FoldCardRequest* foldCardRequest;
@property (strong) FoldCardResponse* foldCardResponse;
@property (strong) ShowCardRequest* showCardRequest;
@property (strong) ShowCardResponse* showCardResponse;
@property (strong) CompareCardRequest* compareCardRequest;
@property (strong) CompareCardResponse* compareCardResponse;
@property (strong) ChangeCardRequest* changeCardRequest;
@property (strong) ChangeCardResponse* changeCardResponse;
@property (strong) TimeoutSettingRequest* timeoutSettingRequest;
@property (strong) TimeoutSettingResponse* timeoutSettingResponse;
@property SInt32 startOffset;
@property SInt32 maxCount;
@property SInt32 timeStamp;
@property (strong) NSString* mac;
@end

@implementation GameMessage

- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) _value_ {
  hasCommand_ = !!_value_;
}
@synthesize command;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) _value_ {
  hasRound_ = !!_value_;
}
@synthesize round;
- (BOOL) hasCompleteReason {
  return !!hasCompleteReason_;
}
- (void) setHasCompleteReason:(BOOL) _value_ {
  hasCompleteReason_ = !!_value_;
}
@synthesize completeReason;
- (BOOL) hasOnlineUserCount {
  return !!hasOnlineUserCount_;
}
- (void) setHasOnlineUserCount:(BOOL) _value_ {
  hasOnlineUserCount_ = !!_value_;
}
@synthesize onlineUserCount;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) _value_ {
  hasCurrentPlayUserId_ = !!_value_;
}
@synthesize currentPlayUserId;
- (BOOL) hasJoinGameRequest {
  return !!hasJoinGameRequest_;
}
- (void) setHasJoinGameRequest:(BOOL) _value_ {
  hasJoinGameRequest_ = !!_value_;
}
@synthesize joinGameRequest;
- (BOOL) hasJoinGameResponse {
  return !!hasJoinGameResponse_;
}
- (void) setHasJoinGameResponse:(BOOL) _value_ {
  hasJoinGameResponse_ = !!_value_;
}
@synthesize joinGameResponse;
- (BOOL) hasStartGameRequest {
  return !!hasStartGameRequest_;
}
- (void) setHasStartGameRequest:(BOOL) _value_ {
  hasStartGameRequest_ = !!_value_;
}
@synthesize startGameRequest;
- (BOOL) hasStartGameResponse {
  return !!hasStartGameResponse_;
}
- (void) setHasStartGameResponse:(BOOL) _value_ {
  hasStartGameResponse_ = !!_value_;
}
@synthesize startGameResponse;
- (BOOL) hasGameStartNotificationRequest {
  return !!hasGameStartNotificationRequest_;
}
- (void) setHasGameStartNotificationRequest:(BOOL) _value_ {
  hasGameStartNotificationRequest_ = !!_value_;
}
@synthesize gameStartNotificationRequest;
- (BOOL) hasGameStartNotificationResponse {
  return !!hasGameStartNotificationResponse_;
}
- (void) setHasGameStartNotificationResponse:(BOOL) _value_ {
  hasGameStartNotificationResponse_ = !!_value_;
}
@synthesize gameStartNotificationResponse;
- (BOOL) hasSendDrawDataRequest {
  return !!hasSendDrawDataRequest_;
}
- (void) setHasSendDrawDataRequest:(BOOL) _value_ {
  hasSendDrawDataRequest_ = !!_value_;
}
@synthesize sendDrawDataRequest;
- (BOOL) hasSendDrawDataResponse {
  return !!hasSendDrawDataResponse_;
}
- (void) setHasSendDrawDataResponse:(BOOL) _value_ {
  hasSendDrawDataResponse_ = !!_value_;
}
@synthesize sendDrawDataResponse;
- (BOOL) hasChatRequest {
  return !!hasChatRequest_;
}
- (void) setHasChatRequest:(BOOL) _value_ {
  hasChatRequest_ = !!_value_;
}
@synthesize chatRequest;
- (BOOL) hasChatResponse {
  return !!hasChatResponse_;
}
- (void) setHasChatResponse:(BOOL) _value_ {
  hasChatResponse_ = !!_value_;
}
@synthesize chatResponse;
- (BOOL) hasFacetimeChatRequest {
  return !!hasFacetimeChatRequest_;
}
- (void) setHasFacetimeChatRequest:(BOOL) _value_ {
  hasFacetimeChatRequest_ = !!_value_;
}
@synthesize facetimeChatRequest;
- (BOOL) hasFacetimeChatResponse {
  return !!hasFacetimeChatResponse_;
}
- (void) setHasFacetimeChatResponse:(BOOL) _value_ {
  hasFacetimeChatResponse_ = !!_value_;
}
@synthesize facetimeChatResponse;
- (BOOL) hasNotification {
  return !!hasNotification_;
}
- (void) setHasNotification:(BOOL) _value_ {
  hasNotification_ = !!_value_;
}
@synthesize notification;
- (BOOL) hasGetRoomsRequest {
  return !!hasGetRoomsRequest_;
}
- (void) setHasGetRoomsRequest:(BOOL) _value_ {
  hasGetRoomsRequest_ = !!_value_;
}
@synthesize getRoomsRequest;
- (BOOL) hasGetRoomsResponse {
  return !!hasGetRoomsResponse_;
}
- (void) setHasGetRoomsResponse:(BOOL) _value_ {
  hasGetRoomsResponse_ = !!_value_;
}
@synthesize getRoomsResponse;
- (BOOL) hasCreateRoomRequest {
  return !!hasCreateRoomRequest_;
}
- (void) setHasCreateRoomRequest:(BOOL) _value_ {
  hasCreateRoomRequest_ = !!_value_;
}
@synthesize createRoomRequest;
- (BOOL) hasCreateRoomResponse {
  return !!hasCreateRoomResponse_;
}
- (void) setHasCreateRoomResponse:(BOOL) _value_ {
  hasCreateRoomResponse_ = !!_value_;
}
@synthesize createRoomResponse;
- (BOOL) hasSearchRoomRequest {
  return !!hasSearchRoomRequest_;
}
- (void) setHasSearchRoomRequest:(BOOL) _value_ {
  hasSearchRoomRequest_ = !!_value_;
}
@synthesize searchRoomRequest;
- (BOOL) hasSearchRoomResponse {
  return !!hasSearchRoomResponse_;
}
- (void) setHasSearchRoomResponse:(BOOL) _value_ {
  hasSearchRoomResponse_ = !!_value_;
}
@synthesize searchRoomResponse;
- (BOOL) hasRoomNotificationRequest {
  return !!hasRoomNotificationRequest_;
}
- (void) setHasRoomNotificationRequest:(BOOL) _value_ {
  hasRoomNotificationRequest_ = !!_value_;
}
@synthesize roomNotificationRequest;
- (BOOL) hasRollDiceEndNotificationRequest {
  return !!hasRollDiceEndNotificationRequest_;
}
- (void) setHasRollDiceEndNotificationRequest:(BOOL) _value_ {
  hasRollDiceEndNotificationRequest_ = !!_value_;
}
@synthesize rollDiceEndNotificationRequest;
- (BOOL) hasCallDiceRequest {
  return !!hasCallDiceRequest_;
}
- (void) setHasCallDiceRequest:(BOOL) _value_ {
  hasCallDiceRequest_ = !!_value_;
}
@synthesize callDiceRequest;
- (BOOL) hasCallDiceResponse {
  return !!hasCallDiceResponse_;
}
- (void) setHasCallDiceResponse:(BOOL) _value_ {
  hasCallDiceResponse_ = !!_value_;
}
@synthesize callDiceResponse;
- (BOOL) hasOpenDiceRequest {
  return !!hasOpenDiceRequest_;
}
- (void) setHasOpenDiceRequest:(BOOL) _value_ {
  hasOpenDiceRequest_ = !!_value_;
}
@synthesize openDiceRequest;
- (BOOL) hasOpenDiceResponse {
  return !!hasOpenDiceResponse_;
}
- (void) setHasOpenDiceResponse:(BOOL) _value_ {
  hasOpenDiceResponse_ = !!_value_;
}
@synthesize openDiceResponse;
- (BOOL) hasGameOverNotificationRequest {
  return !!hasGameOverNotificationRequest_;
}
- (void) setHasGameOverNotificationRequest:(BOOL) _value_ {
  hasGameOverNotificationRequest_ = !!_value_;
}
@synthesize gameOverNotificationRequest;
- (BOOL) hasGameOverNotificationResponse {
  return !!hasGameOverNotificationResponse_;
}
- (void) setHasGameOverNotificationResponse:(BOOL) _value_ {
  hasGameOverNotificationResponse_ = !!_value_;
}
@synthesize gameOverNotificationResponse;
- (BOOL) hasRegisterRoomsNotificationRequest {
  return !!hasRegisterRoomsNotificationRequest_;
}
- (void) setHasRegisterRoomsNotificationRequest:(BOOL) _value_ {
  hasRegisterRoomsNotificationRequest_ = !!_value_;
}
@synthesize registerRoomsNotificationRequest;
- (BOOL) hasRegisterRoomsNotificationResponse {
  return !!hasRegisterRoomsNotificationResponse_;
}
- (void) setHasRegisterRoomsNotificationResponse:(BOOL) _value_ {
  hasRegisterRoomsNotificationResponse_ = !!_value_;
}
@synthesize registerRoomsNotificationResponse;
- (BOOL) hasUnRegisterRoomsNotificationRequest {
  return !!hasUnRegisterRoomsNotificationRequest_;
}
- (void) setHasUnRegisterRoomsNotificationRequest:(BOOL) _value_ {
  hasUnRegisterRoomsNotificationRequest_ = !!_value_;
}
@synthesize unRegisterRoomsNotificationRequest;
- (BOOL) hasUnRegisterRoomsNotificationResponse {
  return !!hasUnRegisterRoomsNotificationResponse_;
}
- (void) setHasUnRegisterRoomsNotificationResponse:(BOOL) _value_ {
  hasUnRegisterRoomsNotificationResponse_ = !!_value_;
}
@synthesize unRegisterRoomsNotificationResponse;
- (BOOL) hasUserDiceNotification {
  return !!hasUserDiceNotification_;
}
- (void) setHasUserDiceNotification:(BOOL) _value_ {
  hasUserDiceNotification_ = !!_value_;
}
@synthesize userDiceNotification;
- (BOOL) hasBetDiceRequest {
  return !!hasBetDiceRequest_;
}
- (void) setHasBetDiceRequest:(BOOL) _value_ {
  hasBetDiceRequest_ = !!_value_;
}
@synthesize betDiceRequest;
- (BOOL) hasBetDiceResponse {
  return !!hasBetDiceResponse_;
}
- (void) setHasBetDiceResponse:(BOOL) _value_ {
  hasBetDiceResponse_ = !!_value_;
}
@synthesize betDiceResponse;
- (BOOL) hasUseItemRequest {
  return !!hasUseItemRequest_;
}
- (void) setHasUseItemRequest:(BOOL) _value_ {
  hasUseItemRequest_ = !!_value_;
}
@synthesize useItemRequest;
- (BOOL) hasUseItemResponse {
  return !!hasUseItemResponse_;
}
- (void) setHasUseItemResponse:(BOOL) _value_ {
  hasUseItemResponse_ = !!_value_;
}
@synthesize useItemResponse;
- (BOOL) hasBetRequest {
  return !!hasBetRequest_;
}
- (void) setHasBetRequest:(BOOL) _value_ {
  hasBetRequest_ = !!_value_;
}
@synthesize betRequest;
- (BOOL) hasBetResponse {
  return !!hasBetResponse_;
}
- (void) setHasBetResponse:(BOOL) _value_ {
  hasBetResponse_ = !!_value_;
}
@synthesize betResponse;
- (BOOL) hasCheckCardRequest {
  return !!hasCheckCardRequest_;
}
- (void) setHasCheckCardRequest:(BOOL) _value_ {
  hasCheckCardRequest_ = !!_value_;
}
@synthesize checkCardRequest;
- (BOOL) hasCheckCardResponse {
  return !!hasCheckCardResponse_;
}
- (void) setHasCheckCardResponse:(BOOL) _value_ {
  hasCheckCardResponse_ = !!_value_;
}
@synthesize checkCardResponse;
- (BOOL) hasFoldCardRequest {
  return !!hasFoldCardRequest_;
}
- (void) setHasFoldCardRequest:(BOOL) _value_ {
  hasFoldCardRequest_ = !!_value_;
}
@synthesize foldCardRequest;
- (BOOL) hasFoldCardResponse {
  return !!hasFoldCardResponse_;
}
- (void) setHasFoldCardResponse:(BOOL) _value_ {
  hasFoldCardResponse_ = !!_value_;
}
@synthesize foldCardResponse;
- (BOOL) hasShowCardRequest {
  return !!hasShowCardRequest_;
}
- (void) setHasShowCardRequest:(BOOL) _value_ {
  hasShowCardRequest_ = !!_value_;
}
@synthesize showCardRequest;
- (BOOL) hasShowCardResponse {
  return !!hasShowCardResponse_;
}
- (void) setHasShowCardResponse:(BOOL) _value_ {
  hasShowCardResponse_ = !!_value_;
}
@synthesize showCardResponse;
- (BOOL) hasCompareCardRequest {
  return !!hasCompareCardRequest_;
}
- (void) setHasCompareCardRequest:(BOOL) _value_ {
  hasCompareCardRequest_ = !!_value_;
}
@synthesize compareCardRequest;
- (BOOL) hasCompareCardResponse {
  return !!hasCompareCardResponse_;
}
- (void) setHasCompareCardResponse:(BOOL) _value_ {
  hasCompareCardResponse_ = !!_value_;
}
@synthesize compareCardResponse;
- (BOOL) hasChangeCardRequest {
  return !!hasChangeCardRequest_;
}
- (void) setHasChangeCardRequest:(BOOL) _value_ {
  hasChangeCardRequest_ = !!_value_;
}
@synthesize changeCardRequest;
- (BOOL) hasChangeCardResponse {
  return !!hasChangeCardResponse_;
}
- (void) setHasChangeCardResponse:(BOOL) _value_ {
  hasChangeCardResponse_ = !!_value_;
}
@synthesize changeCardResponse;
- (BOOL) hasTimeoutSettingRequest {
  return !!hasTimeoutSettingRequest_;
}
- (void) setHasTimeoutSettingRequest:(BOOL) _value_ {
  hasTimeoutSettingRequest_ = !!_value_;
}
@synthesize timeoutSettingRequest;
- (BOOL) hasTimeoutSettingResponse {
  return !!hasTimeoutSettingResponse_;
}
- (void) setHasTimeoutSettingResponse:(BOOL) _value_ {
  hasTimeoutSettingResponse_ = !!_value_;
}
@synthesize timeoutSettingResponse;
- (BOOL) hasStartOffset {
  return !!hasStartOffset_;
}
- (void) setHasStartOffset:(BOOL) _value_ {
  hasStartOffset_ = !!_value_;
}
@synthesize startOffset;
- (BOOL) hasMaxCount {
  return !!hasMaxCount_;
}
- (void) setHasMaxCount:(BOOL) _value_ {
  hasMaxCount_ = !!_value_;
}
@synthesize maxCount;
- (BOOL) hasTimeStamp {
  return !!hasTimeStamp_;
}
- (void) setHasTimeStamp:(BOOL) _value_ {
  hasTimeStamp_ = !!_value_;
}
@synthesize timeStamp;
- (BOOL) hasMac {
  return !!hasMac_;
}
- (void) setHasMac:(BOOL) _value_ {
  hasMac_ = !!_value_;
}
@synthesize mac;
- (instancetype) init {
  if ((self = [super init])) {
    self.command = GameCommandTypeJoinGameRequest;
    self.messageId = 0;
    self.resultCode = GameResultCodeSuccess;
    self.userId = @"";
    self.sessionId = 0L;
    self.round = 0;
    self.completeReason = GameCompleteReasonReasonNotComplete;
    self.onlineUserCount = 0;
    self.toUserId = @"";
    self.currentPlayUserId = @"";
    self.joinGameRequest = [JoinGameRequest defaultInstance];
    self.joinGameResponse = [JoinGameResponse defaultInstance];
    self.startGameRequest = [StartGameRequest defaultInstance];
    self.startGameResponse = [StartGameResponse defaultInstance];
    self.gameStartNotificationRequest = [GameStartNotificationRequest defaultInstance];
    self.gameStartNotificationResponse = [GameStartNotificationResponse defaultInstance];
    self.sendDrawDataRequest = [SendDrawDataRequest defaultInstance];
    self.sendDrawDataResponse = [SendDrawDataResponse defaultInstance];
    self.chatRequest = [GameChatRequest defaultInstance];
    self.chatResponse = [GameChatResponse defaultInstance];
    self.facetimeChatRequest = [FacetimeChatRequest defaultInstance];
    self.facetimeChatResponse = [FacetimeChatResponse defaultInstance];
    self.notification = [GeneralNotification defaultInstance];
    self.getRoomsRequest = [GetRoomsRequest defaultInstance];
    self.getRoomsResponse = [GetRoomsResponse defaultInstance];
    self.createRoomRequest = [CreateRoomRequest defaultInstance];
    self.createRoomResponse = [CreateRoomResponse defaultInstance];
    self.searchRoomRequest = [SearchRoomRequest defaultInstance];
    self.searchRoomResponse = [SearchRoomResponse defaultInstance];
    self.roomNotificationRequest = [RoomNotificationRequest defaultInstance];
    self.rollDiceEndNotificationRequest = [RollDiceEndNotificationRequest defaultInstance];
    self.callDiceRequest = [CallDiceRequest defaultInstance];
    self.callDiceResponse = [CallDiceResponse defaultInstance];
    self.openDiceRequest = [OpenDiceRequest defaultInstance];
    self.openDiceResponse = [OpenDiceResponse defaultInstance];
    self.gameOverNotificationRequest = [GameOverNotificationRequest defaultInstance];
    self.gameOverNotificationResponse = [GameOverNotificationResponse defaultInstance];
    self.registerRoomsNotificationRequest = [RegisterRoomsNotificationRequest defaultInstance];
    self.registerRoomsNotificationResponse = [RegisterRoomsNotificationResponse defaultInstance];
    self.unRegisterRoomsNotificationRequest = [UnRegisterRoomsNotificationRequest defaultInstance];
    self.unRegisterRoomsNotificationResponse = [UnRegisterRoomsNotificationResponse defaultInstance];
    self.userDiceNotification = [UserDiceNotification defaultInstance];
    self.betDiceRequest = [BetDiceRequest defaultInstance];
    self.betDiceResponse = [BetDiceResponse defaultInstance];
    self.useItemRequest = [UseItemRequest defaultInstance];
    self.useItemResponse = [UseItemResponse defaultInstance];
    self.betRequest = [BetRequest defaultInstance];
    self.betResponse = [BetResponse defaultInstance];
    self.checkCardRequest = [CheckCardRequest defaultInstance];
    self.checkCardResponse = [CheckCardResponse defaultInstance];
    self.foldCardRequest = [FoldCardRequest defaultInstance];
    self.foldCardResponse = [FoldCardResponse defaultInstance];
    self.showCardRequest = [ShowCardRequest defaultInstance];
    self.showCardResponse = [ShowCardResponse defaultInstance];
    self.compareCardRequest = [CompareCardRequest defaultInstance];
    self.compareCardResponse = [CompareCardResponse defaultInstance];
    self.changeCardRequest = [ChangeCardRequest defaultInstance];
    self.changeCardResponse = [ChangeCardResponse defaultInstance];
    self.timeoutSettingRequest = [TimeoutSettingRequest defaultInstance];
    self.timeoutSettingResponse = [TimeoutSettingResponse defaultInstance];
    self.startOffset = 0;
    self.maxCount = 0;
    self.timeStamp = 0;
    self.mac = @"";
  }
  return self;
}
static GameMessage* defaultGameMessageInstance = nil;
+ (void) initialize {
  if (self == [GameMessage class]) {
    defaultGameMessageInstance = [[GameMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGameMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultGameMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCommand) {
    return NO;
  }
  if (!self.hasMessageId) {
    return NO;
  }
  if (self.hasJoinGameRequest) {
    if (!self.joinGameRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasJoinGameResponse) {
    if (!self.joinGameResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasGameStartNotificationRequest) {
    if (!self.gameStartNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasSendDrawDataRequest) {
    if (!self.sendDrawDataRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFacetimeChatRequest) {
    if (!self.facetimeChatRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFacetimeChatResponse) {
    if (!self.facetimeChatResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotification) {
    if (!self.notification.isInitialized) {
      return NO;
    }
  }
  if (self.hasGetRoomsRequest) {
    if (!self.getRoomsRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasGetRoomsResponse) {
    if (!self.getRoomsResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreateRoomRequest) {
    if (!self.createRoomRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreateRoomResponse) {
    if (!self.createRoomResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasSearchRoomResponse) {
    if (!self.searchRoomResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasRoomNotificationRequest) {
    if (!self.roomNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasRollDiceEndNotificationRequest) {
    if (!self.rollDiceEndNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasGameOverNotificationRequest) {
    if (!self.gameOverNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserDiceNotification) {
    if (!self.userDiceNotification.isInitialized) {
      return NO;
    }
  }
  if (self.hasBetDiceRequest) {
    if (!self.betDiceRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUseItemRequest) {
    if (!self.useItemRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUseItemResponse) {
    if (!self.useItemResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasBetRequest) {
    if (!self.betRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompareCardRequest) {
    if (!self.compareCardRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompareCardResponse) {
    if (!self.compareCardResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasChangeCardRequest) {
    if (!self.changeCardRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasChangeCardResponse) {
    if (!self.changeCardResponse.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommand) {
    [output writeEnum:1 value:self.command];
  }
  if (self.hasMessageId) {
    [output writeInt32:2 value:self.messageId];
  }
  if (self.hasResultCode) {
    [output writeEnum:3 value:self.resultCode];
  }
  if (self.hasUserId) {
    [output writeString:4 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeInt64:5 value:self.sessionId];
  }
  if (self.hasRound) {
    [output writeInt32:6 value:self.round];
  }
  if (self.hasCompleteReason) {
    [output writeEnum:7 value:self.completeReason];
  }
  if (self.hasOnlineUserCount) {
    [output writeInt32:8 value:self.onlineUserCount];
  }
  if (self.hasToUserId) {
    [output writeString:9 value:self.toUserId];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:10 value:self.currentPlayUserId];
  }
  if (self.hasJoinGameRequest) {
    [output writeMessage:11 value:self.joinGameRequest];
  }
  if (self.hasJoinGameResponse) {
    [output writeMessage:12 value:self.joinGameResponse];
  }
  if (self.hasStartGameRequest) {
    [output writeMessage:13 value:self.startGameRequest];
  }
  if (self.hasStartGameResponse) {
    [output writeMessage:14 value:self.startGameResponse];
  }
  if (self.hasGameStartNotificationRequest) {
    [output writeMessage:15 value:self.gameStartNotificationRequest];
  }
  if (self.hasGameStartNotificationResponse) {
    [output writeMessage:16 value:self.gameStartNotificationResponse];
  }
  if (self.hasSendDrawDataRequest) {
    [output writeMessage:21 value:self.sendDrawDataRequest];
  }
  if (self.hasSendDrawDataResponse) {
    [output writeMessage:22 value:self.sendDrawDataResponse];
  }
  if (self.hasChatRequest) {
    [output writeMessage:23 value:self.chatRequest];
  }
  if (self.hasChatResponse) {
    [output writeMessage:24 value:self.chatResponse];
  }
  if (self.hasFacetimeChatRequest) {
    [output writeMessage:31 value:self.facetimeChatRequest];
  }
  if (self.hasFacetimeChatResponse) {
    [output writeMessage:32 value:self.facetimeChatResponse];
  }
  if (self.hasNotification) {
    [output writeMessage:51 value:self.notification];
  }
  if (self.hasGetRoomsRequest) {
    [output writeMessage:101 value:self.getRoomsRequest];
  }
  if (self.hasGetRoomsResponse) {
    [output writeMessage:102 value:self.getRoomsResponse];
  }
  if (self.hasCreateRoomRequest) {
    [output writeMessage:103 value:self.createRoomRequest];
  }
  if (self.hasCreateRoomResponse) {
    [output writeMessage:104 value:self.createRoomResponse];
  }
  if (self.hasSearchRoomRequest) {
    [output writeMessage:105 value:self.searchRoomRequest];
  }
  if (self.hasSearchRoomResponse) {
    [output writeMessage:106 value:self.searchRoomResponse];
  }
  if (self.hasRoomNotificationRequest) {
    [output writeMessage:107 value:self.roomNotificationRequest];
  }
  if (self.hasRollDiceEndNotificationRequest) {
    [output writeMessage:109 value:self.rollDiceEndNotificationRequest];
  }
  if (self.hasCallDiceRequest) {
    [output writeMessage:111 value:self.callDiceRequest];
  }
  if (self.hasCallDiceResponse) {
    [output writeMessage:112 value:self.callDiceResponse];
  }
  if (self.hasOpenDiceRequest) {
    [output writeMessage:113 value:self.openDiceRequest];
  }
  if (self.hasOpenDiceResponse) {
    [output writeMessage:114 value:self.openDiceResponse];
  }
  if (self.hasGameOverNotificationRequest) {
    [output writeMessage:115 value:self.gameOverNotificationRequest];
  }
  if (self.hasGameOverNotificationResponse) {
    [output writeMessage:116 value:self.gameOverNotificationResponse];
  }
  if (self.hasRegisterRoomsNotificationRequest) {
    [output writeMessage:117 value:self.registerRoomsNotificationRequest];
  }
  if (self.hasRegisterRoomsNotificationResponse) {
    [output writeMessage:118 value:self.registerRoomsNotificationResponse];
  }
  if (self.hasUnRegisterRoomsNotificationRequest) {
    [output writeMessage:119 value:self.unRegisterRoomsNotificationRequest];
  }
  if (self.hasUnRegisterRoomsNotificationResponse) {
    [output writeMessage:120 value:self.unRegisterRoomsNotificationResponse];
  }
  if (self.hasUserDiceNotification) {
    [output writeMessage:121 value:self.userDiceNotification];
  }
  if (self.hasBetDiceRequest) {
    [output writeMessage:123 value:self.betDiceRequest];
  }
  if (self.hasBetDiceResponse) {
    [output writeMessage:124 value:self.betDiceResponse];
  }
  if (self.hasUseItemRequest) {
    [output writeMessage:131 value:self.useItemRequest];
  }
  if (self.hasUseItemResponse) {
    [output writeMessage:132 value:self.useItemResponse];
  }
  if (self.hasBetRequest) {
    [output writeMessage:151 value:self.betRequest];
  }
  if (self.hasBetResponse) {
    [output writeMessage:152 value:self.betResponse];
  }
  if (self.hasCheckCardRequest) {
    [output writeMessage:153 value:self.checkCardRequest];
  }
  if (self.hasCheckCardResponse) {
    [output writeMessage:154 value:self.checkCardResponse];
  }
  if (self.hasFoldCardRequest) {
    [output writeMessage:155 value:self.foldCardRequest];
  }
  if (self.hasFoldCardResponse) {
    [output writeMessage:156 value:self.foldCardResponse];
  }
  if (self.hasShowCardRequest) {
    [output writeMessage:157 value:self.showCardRequest];
  }
  if (self.hasShowCardResponse) {
    [output writeMessage:158 value:self.showCardResponse];
  }
  if (self.hasCompareCardRequest) {
    [output writeMessage:159 value:self.compareCardRequest];
  }
  if (self.hasCompareCardResponse) {
    [output writeMessage:160 value:self.compareCardResponse];
  }
  if (self.hasChangeCardRequest) {
    [output writeMessage:161 value:self.changeCardRequest];
  }
  if (self.hasChangeCardResponse) {
    [output writeMessage:162 value:self.changeCardResponse];
  }
  if (self.hasTimeoutSettingRequest) {
    [output writeMessage:163 value:self.timeoutSettingRequest];
  }
  if (self.hasTimeoutSettingResponse) {
    [output writeMessage:164 value:self.timeoutSettingResponse];
  }
  if (self.hasStartOffset) {
    [output writeInt32:1000 value:self.startOffset];
  }
  if (self.hasMaxCount) {
    [output writeInt32:1001 value:self.maxCount];
  }
  if (self.hasTimeStamp) {
    [output writeInt32:1010 value:self.timeStamp];
  }
  if (self.hasMac) {
    [output writeString:1011 value:self.mac];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCommand) {
    size_ += computeEnumSize(1, self.command);
  }
  if (self.hasMessageId) {
    size_ += computeInt32Size(2, self.messageId);
  }
  if (self.hasResultCode) {
    size_ += computeEnumSize(3, self.resultCode);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(4, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(5, self.sessionId);
  }
  if (self.hasRound) {
    size_ += computeInt32Size(6, self.round);
  }
  if (self.hasCompleteReason) {
    size_ += computeEnumSize(7, self.completeReason);
  }
  if (self.hasOnlineUserCount) {
    size_ += computeInt32Size(8, self.onlineUserCount);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(9, self.toUserId);
  }
  if (self.hasCurrentPlayUserId) {
    size_ += computeStringSize(10, self.currentPlayUserId);
  }
  if (self.hasJoinGameRequest) {
    size_ += computeMessageSize(11, self.joinGameRequest);
  }
  if (self.hasJoinGameResponse) {
    size_ += computeMessageSize(12, self.joinGameResponse);
  }
  if (self.hasStartGameRequest) {
    size_ += computeMessageSize(13, self.startGameRequest);
  }
  if (self.hasStartGameResponse) {
    size_ += computeMessageSize(14, self.startGameResponse);
  }
  if (self.hasGameStartNotificationRequest) {
    size_ += computeMessageSize(15, self.gameStartNotificationRequest);
  }
  if (self.hasGameStartNotificationResponse) {
    size_ += computeMessageSize(16, self.gameStartNotificationResponse);
  }
  if (self.hasSendDrawDataRequest) {
    size_ += computeMessageSize(21, self.sendDrawDataRequest);
  }
  if (self.hasSendDrawDataResponse) {
    size_ += computeMessageSize(22, self.sendDrawDataResponse);
  }
  if (self.hasChatRequest) {
    size_ += computeMessageSize(23, self.chatRequest);
  }
  if (self.hasChatResponse) {
    size_ += computeMessageSize(24, self.chatResponse);
  }
  if (self.hasFacetimeChatRequest) {
    size_ += computeMessageSize(31, self.facetimeChatRequest);
  }
  if (self.hasFacetimeChatResponse) {
    size_ += computeMessageSize(32, self.facetimeChatResponse);
  }
  if (self.hasNotification) {
    size_ += computeMessageSize(51, self.notification);
  }
  if (self.hasGetRoomsRequest) {
    size_ += computeMessageSize(101, self.getRoomsRequest);
  }
  if (self.hasGetRoomsResponse) {
    size_ += computeMessageSize(102, self.getRoomsResponse);
  }
  if (self.hasCreateRoomRequest) {
    size_ += computeMessageSize(103, self.createRoomRequest);
  }
  if (self.hasCreateRoomResponse) {
    size_ += computeMessageSize(104, self.createRoomResponse);
  }
  if (self.hasSearchRoomRequest) {
    size_ += computeMessageSize(105, self.searchRoomRequest);
  }
  if (self.hasSearchRoomResponse) {
    size_ += computeMessageSize(106, self.searchRoomResponse);
  }
  if (self.hasRoomNotificationRequest) {
    size_ += computeMessageSize(107, self.roomNotificationRequest);
  }
  if (self.hasRollDiceEndNotificationRequest) {
    size_ += computeMessageSize(109, self.rollDiceEndNotificationRequest);
  }
  if (self.hasCallDiceRequest) {
    size_ += computeMessageSize(111, self.callDiceRequest);
  }
  if (self.hasCallDiceResponse) {
    size_ += computeMessageSize(112, self.callDiceResponse);
  }
  if (self.hasOpenDiceRequest) {
    size_ += computeMessageSize(113, self.openDiceRequest);
  }
  if (self.hasOpenDiceResponse) {
    size_ += computeMessageSize(114, self.openDiceResponse);
  }
  if (self.hasGameOverNotificationRequest) {
    size_ += computeMessageSize(115, self.gameOverNotificationRequest);
  }
  if (self.hasGameOverNotificationResponse) {
    size_ += computeMessageSize(116, self.gameOverNotificationResponse);
  }
  if (self.hasRegisterRoomsNotificationRequest) {
    size_ += computeMessageSize(117, self.registerRoomsNotificationRequest);
  }
  if (self.hasRegisterRoomsNotificationResponse) {
    size_ += computeMessageSize(118, self.registerRoomsNotificationResponse);
  }
  if (self.hasUnRegisterRoomsNotificationRequest) {
    size_ += computeMessageSize(119, self.unRegisterRoomsNotificationRequest);
  }
  if (self.hasUnRegisterRoomsNotificationResponse) {
    size_ += computeMessageSize(120, self.unRegisterRoomsNotificationResponse);
  }
  if (self.hasUserDiceNotification) {
    size_ += computeMessageSize(121, self.userDiceNotification);
  }
  if (self.hasBetDiceRequest) {
    size_ += computeMessageSize(123, self.betDiceRequest);
  }
  if (self.hasBetDiceResponse) {
    size_ += computeMessageSize(124, self.betDiceResponse);
  }
  if (self.hasUseItemRequest) {
    size_ += computeMessageSize(131, self.useItemRequest);
  }
  if (self.hasUseItemResponse) {
    size_ += computeMessageSize(132, self.useItemResponse);
  }
  if (self.hasBetRequest) {
    size_ += computeMessageSize(151, self.betRequest);
  }
  if (self.hasBetResponse) {
    size_ += computeMessageSize(152, self.betResponse);
  }
  if (self.hasCheckCardRequest) {
    size_ += computeMessageSize(153, self.checkCardRequest);
  }
  if (self.hasCheckCardResponse) {
    size_ += computeMessageSize(154, self.checkCardResponse);
  }
  if (self.hasFoldCardRequest) {
    size_ += computeMessageSize(155, self.foldCardRequest);
  }
  if (self.hasFoldCardResponse) {
    size_ += computeMessageSize(156, self.foldCardResponse);
  }
  if (self.hasShowCardRequest) {
    size_ += computeMessageSize(157, self.showCardRequest);
  }
  if (self.hasShowCardResponse) {
    size_ += computeMessageSize(158, self.showCardResponse);
  }
  if (self.hasCompareCardRequest) {
    size_ += computeMessageSize(159, self.compareCardRequest);
  }
  if (self.hasCompareCardResponse) {
    size_ += computeMessageSize(160, self.compareCardResponse);
  }
  if (self.hasChangeCardRequest) {
    size_ += computeMessageSize(161, self.changeCardRequest);
  }
  if (self.hasChangeCardResponse) {
    size_ += computeMessageSize(162, self.changeCardResponse);
  }
  if (self.hasTimeoutSettingRequest) {
    size_ += computeMessageSize(163, self.timeoutSettingRequest);
  }
  if (self.hasTimeoutSettingResponse) {
    size_ += computeMessageSize(164, self.timeoutSettingResponse);
  }
  if (self.hasStartOffset) {
    size_ += computeInt32Size(1000, self.startOffset);
  }
  if (self.hasMaxCount) {
    size_ += computeInt32Size(1001, self.maxCount);
  }
  if (self.hasTimeStamp) {
    size_ += computeInt32Size(1010, self.timeStamp);
  }
  if (self.hasMac) {
    size_ += computeStringSize(1011, self.mac);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GameMessage*) parseFromData:(NSData*) data {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data] build];
}
+ (GameMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessageBuilder*) builder {
  return [[GameMessageBuilder alloc] init];
}
+ (GameMessageBuilder*) builderWithPrototype:(GameMessage*) prototype {
  return [[GameMessage builder] mergeFrom:prototype];
}
- (GameMessageBuilder*) builder {
  return [GameMessage builder];
}
- (GameMessageBuilder*) toBuilder {
  return [GameMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCommand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"command", NSStringFromGameCommandType(self.command)];
  }
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", [NSNumber numberWithInteger:self.messageId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", NSStringFromGameResultCode(self.resultCode)];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"round", [NSNumber numberWithInteger:self.round]];
  }
  if (self.hasCompleteReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completeReason", NSStringFromGameCompleteReason(self.completeReason)];
  }
  if (self.hasOnlineUserCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineUserCount", [NSNumber numberWithInteger:self.onlineUserCount]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasCurrentPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPlayUserId", self.currentPlayUserId];
  }
  if (self.hasJoinGameRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"joinGameRequest"];
    [self.joinGameRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasJoinGameResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"joinGameResponse"];
    [self.joinGameResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartGameRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"startGameRequest"];
    [self.startGameRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartGameResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"startGameResponse"];
    [self.startGameResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGameStartNotificationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameStartNotificationRequest"];
    [self.gameStartNotificationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGameStartNotificationResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameStartNotificationResponse"];
    [self.gameStartNotificationResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSendDrawDataRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"sendDrawDataRequest"];
    [self.sendDrawDataRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSendDrawDataResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"sendDrawDataResponse"];
    [self.sendDrawDataResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatRequest"];
    [self.chatRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatResponse"];
    [self.chatResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFacetimeChatRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"facetimeChatRequest"];
    [self.facetimeChatRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFacetimeChatResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"facetimeChatResponse"];
    [self.facetimeChatResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNotification) {
    [output appendFormat:@"%@%@ {\n", indent, @"notification"];
    [self.notification writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGetRoomsRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"getRoomsRequest"];
    [self.getRoomsRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGetRoomsResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"getRoomsResponse"];
    [self.getRoomsResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateRoomRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"createRoomRequest"];
    [self.createRoomRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateRoomResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"createRoomResponse"];
    [self.createRoomResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSearchRoomRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"searchRoomRequest"];
    [self.searchRoomRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSearchRoomResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"searchRoomResponse"];
    [self.searchRoomResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomNotificationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomNotificationRequest"];
    [self.roomNotificationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRollDiceEndNotificationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"rollDiceEndNotificationRequest"];
    [self.rollDiceEndNotificationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCallDiceRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"callDiceRequest"];
    [self.callDiceRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCallDiceResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"callDiceResponse"];
    [self.callDiceResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOpenDiceRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"openDiceRequest"];
    [self.openDiceRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOpenDiceResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"openDiceResponse"];
    [self.openDiceResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGameOverNotificationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameOverNotificationRequest"];
    [self.gameOverNotificationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGameOverNotificationResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameOverNotificationResponse"];
    [self.gameOverNotificationResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRegisterRoomsNotificationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"registerRoomsNotificationRequest"];
    [self.registerRoomsNotificationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRegisterRoomsNotificationResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"registerRoomsNotificationResponse"];
    [self.registerRoomsNotificationResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUnRegisterRoomsNotificationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"unRegisterRoomsNotificationRequest"];
    [self.unRegisterRoomsNotificationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUnRegisterRoomsNotificationResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"unRegisterRoomsNotificationResponse"];
    [self.unRegisterRoomsNotificationResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserDiceNotification) {
    [output appendFormat:@"%@%@ {\n", indent, @"userDiceNotification"];
    [self.userDiceNotification writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBetDiceRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"betDiceRequest"];
    [self.betDiceRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBetDiceResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"betDiceResponse"];
    [self.betDiceResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUseItemRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"useItemRequest"];
    [self.useItemRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUseItemResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"useItemResponse"];
    [self.useItemResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBetRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"betRequest"];
    [self.betRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBetResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"betResponse"];
    [self.betResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCheckCardRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"checkCardRequest"];
    [self.checkCardRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCheckCardResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"checkCardResponse"];
    [self.checkCardResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFoldCardRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"foldCardRequest"];
    [self.foldCardRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFoldCardResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"foldCardResponse"];
    [self.foldCardResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasShowCardRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"showCardRequest"];
    [self.showCardRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasShowCardResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"showCardResponse"];
    [self.showCardResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCompareCardRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"compareCardRequest"];
    [self.compareCardRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCompareCardResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"compareCardResponse"];
    [self.compareCardResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChangeCardRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"changeCardRequest"];
    [self.changeCardRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChangeCardResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"changeCardResponse"];
    [self.changeCardResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTimeoutSettingRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"timeoutSettingRequest"];
    [self.timeoutSettingRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTimeoutSettingResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"timeoutSettingResponse"];
    [self.timeoutSettingResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartOffset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startOffset", [NSNumber numberWithInteger:self.startOffset]];
  }
  if (self.hasMaxCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxCount", [NSNumber numberWithInteger:self.maxCount]];
  }
  if (self.hasTimeStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeStamp", [NSNumber numberWithInteger:self.timeStamp]];
  }
  if (self.hasMac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mac", self.mac];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GameMessage class]]) {
    return NO;
  }
  GameMessage *otherMessage = other;
  return
      self.hasCommand == otherMessage.hasCommand &&
      (!self.hasCommand || self.command == otherMessage.command) &&
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || self.messageId == otherMessage.messageId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasRound == otherMessage.hasRound &&
      (!self.hasRound || self.round == otherMessage.round) &&
      self.hasCompleteReason == otherMessage.hasCompleteReason &&
      (!self.hasCompleteReason || self.completeReason == otherMessage.completeReason) &&
      self.hasOnlineUserCount == otherMessage.hasOnlineUserCount &&
      (!self.hasOnlineUserCount || self.onlineUserCount == otherMessage.onlineUserCount) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasCurrentPlayUserId == otherMessage.hasCurrentPlayUserId &&
      (!self.hasCurrentPlayUserId || [self.currentPlayUserId isEqual:otherMessage.currentPlayUserId]) &&
      self.hasJoinGameRequest == otherMessage.hasJoinGameRequest &&
      (!self.hasJoinGameRequest || [self.joinGameRequest isEqual:otherMessage.joinGameRequest]) &&
      self.hasJoinGameResponse == otherMessage.hasJoinGameResponse &&
      (!self.hasJoinGameResponse || [self.joinGameResponse isEqual:otherMessage.joinGameResponse]) &&
      self.hasStartGameRequest == otherMessage.hasStartGameRequest &&
      (!self.hasStartGameRequest || [self.startGameRequest isEqual:otherMessage.startGameRequest]) &&
      self.hasStartGameResponse == otherMessage.hasStartGameResponse &&
      (!self.hasStartGameResponse || [self.startGameResponse isEqual:otherMessage.startGameResponse]) &&
      self.hasGameStartNotificationRequest == otherMessage.hasGameStartNotificationRequest &&
      (!self.hasGameStartNotificationRequest || [self.gameStartNotificationRequest isEqual:otherMessage.gameStartNotificationRequest]) &&
      self.hasGameStartNotificationResponse == otherMessage.hasGameStartNotificationResponse &&
      (!self.hasGameStartNotificationResponse || [self.gameStartNotificationResponse isEqual:otherMessage.gameStartNotificationResponse]) &&
      self.hasSendDrawDataRequest == otherMessage.hasSendDrawDataRequest &&
      (!self.hasSendDrawDataRequest || [self.sendDrawDataRequest isEqual:otherMessage.sendDrawDataRequest]) &&
      self.hasSendDrawDataResponse == otherMessage.hasSendDrawDataResponse &&
      (!self.hasSendDrawDataResponse || [self.sendDrawDataResponse isEqual:otherMessage.sendDrawDataResponse]) &&
      self.hasChatRequest == otherMessage.hasChatRequest &&
      (!self.hasChatRequest || [self.chatRequest isEqual:otherMessage.chatRequest]) &&
      self.hasChatResponse == otherMessage.hasChatResponse &&
      (!self.hasChatResponse || [self.chatResponse isEqual:otherMessage.chatResponse]) &&
      self.hasFacetimeChatRequest == otherMessage.hasFacetimeChatRequest &&
      (!self.hasFacetimeChatRequest || [self.facetimeChatRequest isEqual:otherMessage.facetimeChatRequest]) &&
      self.hasFacetimeChatResponse == otherMessage.hasFacetimeChatResponse &&
      (!self.hasFacetimeChatResponse || [self.facetimeChatResponse isEqual:otherMessage.facetimeChatResponse]) &&
      self.hasNotification == otherMessage.hasNotification &&
      (!self.hasNotification || [self.notification isEqual:otherMessage.notification]) &&
      self.hasGetRoomsRequest == otherMessage.hasGetRoomsRequest &&
      (!self.hasGetRoomsRequest || [self.getRoomsRequest isEqual:otherMessage.getRoomsRequest]) &&
      self.hasGetRoomsResponse == otherMessage.hasGetRoomsResponse &&
      (!self.hasGetRoomsResponse || [self.getRoomsResponse isEqual:otherMessage.getRoomsResponse]) &&
      self.hasCreateRoomRequest == otherMessage.hasCreateRoomRequest &&
      (!self.hasCreateRoomRequest || [self.createRoomRequest isEqual:otherMessage.createRoomRequest]) &&
      self.hasCreateRoomResponse == otherMessage.hasCreateRoomResponse &&
      (!self.hasCreateRoomResponse || [self.createRoomResponse isEqual:otherMessage.createRoomResponse]) &&
      self.hasSearchRoomRequest == otherMessage.hasSearchRoomRequest &&
      (!self.hasSearchRoomRequest || [self.searchRoomRequest isEqual:otherMessage.searchRoomRequest]) &&
      self.hasSearchRoomResponse == otherMessage.hasSearchRoomResponse &&
      (!self.hasSearchRoomResponse || [self.searchRoomResponse isEqual:otherMessage.searchRoomResponse]) &&
      self.hasRoomNotificationRequest == otherMessage.hasRoomNotificationRequest &&
      (!self.hasRoomNotificationRequest || [self.roomNotificationRequest isEqual:otherMessage.roomNotificationRequest]) &&
      self.hasRollDiceEndNotificationRequest == otherMessage.hasRollDiceEndNotificationRequest &&
      (!self.hasRollDiceEndNotificationRequest || [self.rollDiceEndNotificationRequest isEqual:otherMessage.rollDiceEndNotificationRequest]) &&
      self.hasCallDiceRequest == otherMessage.hasCallDiceRequest &&
      (!self.hasCallDiceRequest || [self.callDiceRequest isEqual:otherMessage.callDiceRequest]) &&
      self.hasCallDiceResponse == otherMessage.hasCallDiceResponse &&
      (!self.hasCallDiceResponse || [self.callDiceResponse isEqual:otherMessage.callDiceResponse]) &&
      self.hasOpenDiceRequest == otherMessage.hasOpenDiceRequest &&
      (!self.hasOpenDiceRequest || [self.openDiceRequest isEqual:otherMessage.openDiceRequest]) &&
      self.hasOpenDiceResponse == otherMessage.hasOpenDiceResponse &&
      (!self.hasOpenDiceResponse || [self.openDiceResponse isEqual:otherMessage.openDiceResponse]) &&
      self.hasGameOverNotificationRequest == otherMessage.hasGameOverNotificationRequest &&
      (!self.hasGameOverNotificationRequest || [self.gameOverNotificationRequest isEqual:otherMessage.gameOverNotificationRequest]) &&
      self.hasGameOverNotificationResponse == otherMessage.hasGameOverNotificationResponse &&
      (!self.hasGameOverNotificationResponse || [self.gameOverNotificationResponse isEqual:otherMessage.gameOverNotificationResponse]) &&
      self.hasRegisterRoomsNotificationRequest == otherMessage.hasRegisterRoomsNotificationRequest &&
      (!self.hasRegisterRoomsNotificationRequest || [self.registerRoomsNotificationRequest isEqual:otherMessage.registerRoomsNotificationRequest]) &&
      self.hasRegisterRoomsNotificationResponse == otherMessage.hasRegisterRoomsNotificationResponse &&
      (!self.hasRegisterRoomsNotificationResponse || [self.registerRoomsNotificationResponse isEqual:otherMessage.registerRoomsNotificationResponse]) &&
      self.hasUnRegisterRoomsNotificationRequest == otherMessage.hasUnRegisterRoomsNotificationRequest &&
      (!self.hasUnRegisterRoomsNotificationRequest || [self.unRegisterRoomsNotificationRequest isEqual:otherMessage.unRegisterRoomsNotificationRequest]) &&
      self.hasUnRegisterRoomsNotificationResponse == otherMessage.hasUnRegisterRoomsNotificationResponse &&
      (!self.hasUnRegisterRoomsNotificationResponse || [self.unRegisterRoomsNotificationResponse isEqual:otherMessage.unRegisterRoomsNotificationResponse]) &&
      self.hasUserDiceNotification == otherMessage.hasUserDiceNotification &&
      (!self.hasUserDiceNotification || [self.userDiceNotification isEqual:otherMessage.userDiceNotification]) &&
      self.hasBetDiceRequest == otherMessage.hasBetDiceRequest &&
      (!self.hasBetDiceRequest || [self.betDiceRequest isEqual:otherMessage.betDiceRequest]) &&
      self.hasBetDiceResponse == otherMessage.hasBetDiceResponse &&
      (!self.hasBetDiceResponse || [self.betDiceResponse isEqual:otherMessage.betDiceResponse]) &&
      self.hasUseItemRequest == otherMessage.hasUseItemRequest &&
      (!self.hasUseItemRequest || [self.useItemRequest isEqual:otherMessage.useItemRequest]) &&
      self.hasUseItemResponse == otherMessage.hasUseItemResponse &&
      (!self.hasUseItemResponse || [self.useItemResponse isEqual:otherMessage.useItemResponse]) &&
      self.hasBetRequest == otherMessage.hasBetRequest &&
      (!self.hasBetRequest || [self.betRequest isEqual:otherMessage.betRequest]) &&
      self.hasBetResponse == otherMessage.hasBetResponse &&
      (!self.hasBetResponse || [self.betResponse isEqual:otherMessage.betResponse]) &&
      self.hasCheckCardRequest == otherMessage.hasCheckCardRequest &&
      (!self.hasCheckCardRequest || [self.checkCardRequest isEqual:otherMessage.checkCardRequest]) &&
      self.hasCheckCardResponse == otherMessage.hasCheckCardResponse &&
      (!self.hasCheckCardResponse || [self.checkCardResponse isEqual:otherMessage.checkCardResponse]) &&
      self.hasFoldCardRequest == otherMessage.hasFoldCardRequest &&
      (!self.hasFoldCardRequest || [self.foldCardRequest isEqual:otherMessage.foldCardRequest]) &&
      self.hasFoldCardResponse == otherMessage.hasFoldCardResponse &&
      (!self.hasFoldCardResponse || [self.foldCardResponse isEqual:otherMessage.foldCardResponse]) &&
      self.hasShowCardRequest == otherMessage.hasShowCardRequest &&
      (!self.hasShowCardRequest || [self.showCardRequest isEqual:otherMessage.showCardRequest]) &&
      self.hasShowCardResponse == otherMessage.hasShowCardResponse &&
      (!self.hasShowCardResponse || [self.showCardResponse isEqual:otherMessage.showCardResponse]) &&
      self.hasCompareCardRequest == otherMessage.hasCompareCardRequest &&
      (!self.hasCompareCardRequest || [self.compareCardRequest isEqual:otherMessage.compareCardRequest]) &&
      self.hasCompareCardResponse == otherMessage.hasCompareCardResponse &&
      (!self.hasCompareCardResponse || [self.compareCardResponse isEqual:otherMessage.compareCardResponse]) &&
      self.hasChangeCardRequest == otherMessage.hasChangeCardRequest &&
      (!self.hasChangeCardRequest || [self.changeCardRequest isEqual:otherMessage.changeCardRequest]) &&
      self.hasChangeCardResponse == otherMessage.hasChangeCardResponse &&
      (!self.hasChangeCardResponse || [self.changeCardResponse isEqual:otherMessage.changeCardResponse]) &&
      self.hasTimeoutSettingRequest == otherMessage.hasTimeoutSettingRequest &&
      (!self.hasTimeoutSettingRequest || [self.timeoutSettingRequest isEqual:otherMessage.timeoutSettingRequest]) &&
      self.hasTimeoutSettingResponse == otherMessage.hasTimeoutSettingResponse &&
      (!self.hasTimeoutSettingResponse || [self.timeoutSettingResponse isEqual:otherMessage.timeoutSettingResponse]) &&
      self.hasStartOffset == otherMessage.hasStartOffset &&
      (!self.hasStartOffset || self.startOffset == otherMessage.startOffset) &&
      self.hasMaxCount == otherMessage.hasMaxCount &&
      (!self.hasMaxCount || self.maxCount == otherMessage.maxCount) &&
      self.hasTimeStamp == otherMessage.hasTimeStamp &&
      (!self.hasTimeStamp || self.timeStamp == otherMessage.timeStamp) &&
      self.hasMac == otherMessage.hasMac &&
      (!self.hasMac || [self.mac isEqual:otherMessage.mac]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCommand) {
    hashCode = hashCode * 31 + self.command;
  }
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.messageId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + self.resultCode;
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.round] hash];
  }
  if (self.hasCompleteReason) {
    hashCode = hashCode * 31 + self.completeReason;
  }
  if (self.hasOnlineUserCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.onlineUserCount] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasCurrentPlayUserId) {
    hashCode = hashCode * 31 + [self.currentPlayUserId hash];
  }
  if (self.hasJoinGameRequest) {
    hashCode = hashCode * 31 + [self.joinGameRequest hash];
  }
  if (self.hasJoinGameResponse) {
    hashCode = hashCode * 31 + [self.joinGameResponse hash];
  }
  if (self.hasStartGameRequest) {
    hashCode = hashCode * 31 + [self.startGameRequest hash];
  }
  if (self.hasStartGameResponse) {
    hashCode = hashCode * 31 + [self.startGameResponse hash];
  }
  if (self.hasGameStartNotificationRequest) {
    hashCode = hashCode * 31 + [self.gameStartNotificationRequest hash];
  }
  if (self.hasGameStartNotificationResponse) {
    hashCode = hashCode * 31 + [self.gameStartNotificationResponse hash];
  }
  if (self.hasSendDrawDataRequest) {
    hashCode = hashCode * 31 + [self.sendDrawDataRequest hash];
  }
  if (self.hasSendDrawDataResponse) {
    hashCode = hashCode * 31 + [self.sendDrawDataResponse hash];
  }
  if (self.hasChatRequest) {
    hashCode = hashCode * 31 + [self.chatRequest hash];
  }
  if (self.hasChatResponse) {
    hashCode = hashCode * 31 + [self.chatResponse hash];
  }
  if (self.hasFacetimeChatRequest) {
    hashCode = hashCode * 31 + [self.facetimeChatRequest hash];
  }
  if (self.hasFacetimeChatResponse) {
    hashCode = hashCode * 31 + [self.facetimeChatResponse hash];
  }
  if (self.hasNotification) {
    hashCode = hashCode * 31 + [self.notification hash];
  }
  if (self.hasGetRoomsRequest) {
    hashCode = hashCode * 31 + [self.getRoomsRequest hash];
  }
  if (self.hasGetRoomsResponse) {
    hashCode = hashCode * 31 + [self.getRoomsResponse hash];
  }
  if (self.hasCreateRoomRequest) {
    hashCode = hashCode * 31 + [self.createRoomRequest hash];
  }
  if (self.hasCreateRoomResponse) {
    hashCode = hashCode * 31 + [self.createRoomResponse hash];
  }
  if (self.hasSearchRoomRequest) {
    hashCode = hashCode * 31 + [self.searchRoomRequest hash];
  }
  if (self.hasSearchRoomResponse) {
    hashCode = hashCode * 31 + [self.searchRoomResponse hash];
  }
  if (self.hasRoomNotificationRequest) {
    hashCode = hashCode * 31 + [self.roomNotificationRequest hash];
  }
  if (self.hasRollDiceEndNotificationRequest) {
    hashCode = hashCode * 31 + [self.rollDiceEndNotificationRequest hash];
  }
  if (self.hasCallDiceRequest) {
    hashCode = hashCode * 31 + [self.callDiceRequest hash];
  }
  if (self.hasCallDiceResponse) {
    hashCode = hashCode * 31 + [self.callDiceResponse hash];
  }
  if (self.hasOpenDiceRequest) {
    hashCode = hashCode * 31 + [self.openDiceRequest hash];
  }
  if (self.hasOpenDiceResponse) {
    hashCode = hashCode * 31 + [self.openDiceResponse hash];
  }
  if (self.hasGameOverNotificationRequest) {
    hashCode = hashCode * 31 + [self.gameOverNotificationRequest hash];
  }
  if (self.hasGameOverNotificationResponse) {
    hashCode = hashCode * 31 + [self.gameOverNotificationResponse hash];
  }
  if (self.hasRegisterRoomsNotificationRequest) {
    hashCode = hashCode * 31 + [self.registerRoomsNotificationRequest hash];
  }
  if (self.hasRegisterRoomsNotificationResponse) {
    hashCode = hashCode * 31 + [self.registerRoomsNotificationResponse hash];
  }
  if (self.hasUnRegisterRoomsNotificationRequest) {
    hashCode = hashCode * 31 + [self.unRegisterRoomsNotificationRequest hash];
  }
  if (self.hasUnRegisterRoomsNotificationResponse) {
    hashCode = hashCode * 31 + [self.unRegisterRoomsNotificationResponse hash];
  }
  if (self.hasUserDiceNotification) {
    hashCode = hashCode * 31 + [self.userDiceNotification hash];
  }
  if (self.hasBetDiceRequest) {
    hashCode = hashCode * 31 + [self.betDiceRequest hash];
  }
  if (self.hasBetDiceResponse) {
    hashCode = hashCode * 31 + [self.betDiceResponse hash];
  }
  if (self.hasUseItemRequest) {
    hashCode = hashCode * 31 + [self.useItemRequest hash];
  }
  if (self.hasUseItemResponse) {
    hashCode = hashCode * 31 + [self.useItemResponse hash];
  }
  if (self.hasBetRequest) {
    hashCode = hashCode * 31 + [self.betRequest hash];
  }
  if (self.hasBetResponse) {
    hashCode = hashCode * 31 + [self.betResponse hash];
  }
  if (self.hasCheckCardRequest) {
    hashCode = hashCode * 31 + [self.checkCardRequest hash];
  }
  if (self.hasCheckCardResponse) {
    hashCode = hashCode * 31 + [self.checkCardResponse hash];
  }
  if (self.hasFoldCardRequest) {
    hashCode = hashCode * 31 + [self.foldCardRequest hash];
  }
  if (self.hasFoldCardResponse) {
    hashCode = hashCode * 31 + [self.foldCardResponse hash];
  }
  if (self.hasShowCardRequest) {
    hashCode = hashCode * 31 + [self.showCardRequest hash];
  }
  if (self.hasShowCardResponse) {
    hashCode = hashCode * 31 + [self.showCardResponse hash];
  }
  if (self.hasCompareCardRequest) {
    hashCode = hashCode * 31 + [self.compareCardRequest hash];
  }
  if (self.hasCompareCardResponse) {
    hashCode = hashCode * 31 + [self.compareCardResponse hash];
  }
  if (self.hasChangeCardRequest) {
    hashCode = hashCode * 31 + [self.changeCardRequest hash];
  }
  if (self.hasChangeCardResponse) {
    hashCode = hashCode * 31 + [self.changeCardResponse hash];
  }
  if (self.hasTimeoutSettingRequest) {
    hashCode = hashCode * 31 + [self.timeoutSettingRequest hash];
  }
  if (self.hasTimeoutSettingResponse) {
    hashCode = hashCode * 31 + [self.timeoutSettingResponse hash];
  }
  if (self.hasStartOffset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startOffset] hash];
  }
  if (self.hasMaxCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxCount] hash];
  }
  if (self.hasTimeStamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.timeStamp] hash];
  }
  if (self.hasMac) {
    hashCode = hashCode * 31 + [self.mac hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GameMessageBuilder()
@property (strong) GameMessage* resultGameMessage;
@end

@implementation GameMessageBuilder
@synthesize resultGameMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameMessage = [[GameMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameMessage;
}
- (GameMessageBuilder*) clear {
  self.resultGameMessage = [[GameMessage alloc] init];
  return self;
}
- (GameMessageBuilder*) clone {
  return [GameMessage builderWithPrototype:resultGameMessage];
}
- (GameMessage*) defaultInstance {
  return [GameMessage defaultInstance];
}
- (GameMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameMessage*) buildPartial {
  GameMessage* returnMe = resultGameMessage;
  self.resultGameMessage = nil;
  return returnMe;
}
- (GameMessageBuilder*) mergeFrom:(GameMessage*) other {
  if (other == [GameMessage defaultInstance]) {
    return self;
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  if (other.hasCompleteReason) {
    [self setCompleteReason:other.completeReason];
  }
  if (other.hasOnlineUserCount) {
    [self setOnlineUserCount:other.onlineUserCount];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasJoinGameRequest) {
    [self mergeJoinGameRequest:other.joinGameRequest];
  }
  if (other.hasJoinGameResponse) {
    [self mergeJoinGameResponse:other.joinGameResponse];
  }
  if (other.hasStartGameRequest) {
    [self mergeStartGameRequest:other.startGameRequest];
  }
  if (other.hasStartGameResponse) {
    [self mergeStartGameResponse:other.startGameResponse];
  }
  if (other.hasGameStartNotificationRequest) {
    [self mergeGameStartNotificationRequest:other.gameStartNotificationRequest];
  }
  if (other.hasGameStartNotificationResponse) {
    [self mergeGameStartNotificationResponse:other.gameStartNotificationResponse];
  }
  if (other.hasSendDrawDataRequest) {
    [self mergeSendDrawDataRequest:other.sendDrawDataRequest];
  }
  if (other.hasSendDrawDataResponse) {
    [self mergeSendDrawDataResponse:other.sendDrawDataResponse];
  }
  if (other.hasChatRequest) {
    [self mergeChatRequest:other.chatRequest];
  }
  if (other.hasChatResponse) {
    [self mergeChatResponse:other.chatResponse];
  }
  if (other.hasFacetimeChatRequest) {
    [self mergeFacetimeChatRequest:other.facetimeChatRequest];
  }
  if (other.hasFacetimeChatResponse) {
    [self mergeFacetimeChatResponse:other.facetimeChatResponse];
  }
  if (other.hasNotification) {
    [self mergeNotification:other.notification];
  }
  if (other.hasGetRoomsRequest) {
    [self mergeGetRoomsRequest:other.getRoomsRequest];
  }
  if (other.hasGetRoomsResponse) {
    [self mergeGetRoomsResponse:other.getRoomsResponse];
  }
  if (other.hasCreateRoomRequest) {
    [self mergeCreateRoomRequest:other.createRoomRequest];
  }
  if (other.hasCreateRoomResponse) {
    [self mergeCreateRoomResponse:other.createRoomResponse];
  }
  if (other.hasSearchRoomRequest) {
    [self mergeSearchRoomRequest:other.searchRoomRequest];
  }
  if (other.hasSearchRoomResponse) {
    [self mergeSearchRoomResponse:other.searchRoomResponse];
  }
  if (other.hasRoomNotificationRequest) {
    [self mergeRoomNotificationRequest:other.roomNotificationRequest];
  }
  if (other.hasRollDiceEndNotificationRequest) {
    [self mergeRollDiceEndNotificationRequest:other.rollDiceEndNotificationRequest];
  }
  if (other.hasCallDiceRequest) {
    [self mergeCallDiceRequest:other.callDiceRequest];
  }
  if (other.hasCallDiceResponse) {
    [self mergeCallDiceResponse:other.callDiceResponse];
  }
  if (other.hasOpenDiceRequest) {
    [self mergeOpenDiceRequest:other.openDiceRequest];
  }
  if (other.hasOpenDiceResponse) {
    [self mergeOpenDiceResponse:other.openDiceResponse];
  }
  if (other.hasGameOverNotificationRequest) {
    [self mergeGameOverNotificationRequest:other.gameOverNotificationRequest];
  }
  if (other.hasGameOverNotificationResponse) {
    [self mergeGameOverNotificationResponse:other.gameOverNotificationResponse];
  }
  if (other.hasRegisterRoomsNotificationRequest) {
    [self mergeRegisterRoomsNotificationRequest:other.registerRoomsNotificationRequest];
  }
  if (other.hasRegisterRoomsNotificationResponse) {
    [self mergeRegisterRoomsNotificationResponse:other.registerRoomsNotificationResponse];
  }
  if (other.hasUnRegisterRoomsNotificationRequest) {
    [self mergeUnRegisterRoomsNotificationRequest:other.unRegisterRoomsNotificationRequest];
  }
  if (other.hasUnRegisterRoomsNotificationResponse) {
    [self mergeUnRegisterRoomsNotificationResponse:other.unRegisterRoomsNotificationResponse];
  }
  if (other.hasUserDiceNotification) {
    [self mergeUserDiceNotification:other.userDiceNotification];
  }
  if (other.hasBetDiceRequest) {
    [self mergeBetDiceRequest:other.betDiceRequest];
  }
  if (other.hasBetDiceResponse) {
    [self mergeBetDiceResponse:other.betDiceResponse];
  }
  if (other.hasUseItemRequest) {
    [self mergeUseItemRequest:other.useItemRequest];
  }
  if (other.hasUseItemResponse) {
    [self mergeUseItemResponse:other.useItemResponse];
  }
  if (other.hasBetRequest) {
    [self mergeBetRequest:other.betRequest];
  }
  if (other.hasBetResponse) {
    [self mergeBetResponse:other.betResponse];
  }
  if (other.hasCheckCardRequest) {
    [self mergeCheckCardRequest:other.checkCardRequest];
  }
  if (other.hasCheckCardResponse) {
    [self mergeCheckCardResponse:other.checkCardResponse];
  }
  if (other.hasFoldCardRequest) {
    [self mergeFoldCardRequest:other.foldCardRequest];
  }
  if (other.hasFoldCardResponse) {
    [self mergeFoldCardResponse:other.foldCardResponse];
  }
  if (other.hasShowCardRequest) {
    [self mergeShowCardRequest:other.showCardRequest];
  }
  if (other.hasShowCardResponse) {
    [self mergeShowCardResponse:other.showCardResponse];
  }
  if (other.hasCompareCardRequest) {
    [self mergeCompareCardRequest:other.compareCardRequest];
  }
  if (other.hasCompareCardResponse) {
    [self mergeCompareCardResponse:other.compareCardResponse];
  }
  if (other.hasChangeCardRequest) {
    [self mergeChangeCardRequest:other.changeCardRequest];
  }
  if (other.hasChangeCardResponse) {
    [self mergeChangeCardResponse:other.changeCardResponse];
  }
  if (other.hasTimeoutSettingRequest) {
    [self mergeTimeoutSettingRequest:other.timeoutSettingRequest];
  }
  if (other.hasTimeoutSettingResponse) {
    [self mergeTimeoutSettingResponse:other.timeoutSettingResponse];
  }
  if (other.hasStartOffset) {
    [self setStartOffset:other.startOffset];
  }
  if (other.hasMaxCount) {
    [self setMaxCount:other.maxCount];
  }
  if (other.hasTimeStamp) {
    [self setTimeStamp:other.timeStamp];
  }
  if (other.hasMac) {
    [self setMac:other.mac];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        GameCommandType value = (GameCommandType)[input readEnum];
        if (GameCommandTypeIsValidValue(value)) {
          [self setCommand:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setMessageId:[input readInt32]];
        break;
      }
      case 24: {
        GameResultCode value = (GameResultCode)[input readEnum];
        if (GameResultCodeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setUserId:[input readString]];
        break;
      }
      case 40: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 48: {
        [self setRound:[input readInt32]];
        break;
      }
      case 56: {
        GameCompleteReason value = (GameCompleteReason)[input readEnum];
        if (GameCompleteReasonIsValidValue(value)) {
          [self setCompleteReason:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setOnlineUserCount:[input readInt32]];
        break;
      }
      case 74: {
        [self setToUserId:[input readString]];
        break;
      }
      case 82: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 90: {
        JoinGameRequestBuilder* subBuilder = [JoinGameRequest builder];
        if (self.hasJoinGameRequest) {
          [subBuilder mergeFrom:self.joinGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        JoinGameResponseBuilder* subBuilder = [JoinGameResponse builder];
        if (self.hasJoinGameResponse) {
          [subBuilder mergeFrom:self.joinGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        StartGameRequestBuilder* subBuilder = [StartGameRequest builder];
        if (self.hasStartGameRequest) {
          [subBuilder mergeFrom:self.startGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        StartGameResponseBuilder* subBuilder = [StartGameResponse builder];
        if (self.hasStartGameResponse) {
          [subBuilder mergeFrom:self.startGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        GameStartNotificationRequestBuilder* subBuilder = [GameStartNotificationRequest builder];
        if (self.hasGameStartNotificationRequest) {
          [subBuilder mergeFrom:self.gameStartNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameStartNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        GameStartNotificationResponseBuilder* subBuilder = [GameStartNotificationResponse builder];
        if (self.hasGameStartNotificationResponse) {
          [subBuilder mergeFrom:self.gameStartNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameStartNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        SendDrawDataRequestBuilder* subBuilder = [SendDrawDataRequest builder];
        if (self.hasSendDrawDataRequest) {
          [subBuilder mergeFrom:self.sendDrawDataRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendDrawDataRequest:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        SendDrawDataResponseBuilder* subBuilder = [SendDrawDataResponse builder];
        if (self.hasSendDrawDataResponse) {
          [subBuilder mergeFrom:self.sendDrawDataResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendDrawDataResponse:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        GameChatRequestBuilder* subBuilder = [GameChatRequest builder];
        if (self.hasChatRequest) {
          [subBuilder mergeFrom:self.chatRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatRequest:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        GameChatResponseBuilder* subBuilder = [GameChatResponse builder];
        if (self.hasChatResponse) {
          [subBuilder mergeFrom:self.chatResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatResponse:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        FacetimeChatRequestBuilder* subBuilder = [FacetimeChatRequest builder];
        if (self.hasFacetimeChatRequest) {
          [subBuilder mergeFrom:self.facetimeChatRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFacetimeChatRequest:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        FacetimeChatResponseBuilder* subBuilder = [FacetimeChatResponse builder];
        if (self.hasFacetimeChatResponse) {
          [subBuilder mergeFrom:self.facetimeChatResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFacetimeChatResponse:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        GeneralNotificationBuilder* subBuilder = [GeneralNotification builder];
        if (self.hasNotification) {
          [subBuilder mergeFrom:self.notification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotification:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        GetRoomsRequestBuilder* subBuilder = [GetRoomsRequest builder];
        if (self.hasGetRoomsRequest) {
          [subBuilder mergeFrom:self.getRoomsRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGetRoomsRequest:[subBuilder buildPartial]];
        break;
      }
      case 818: {
        GetRoomsResponseBuilder* subBuilder = [GetRoomsResponse builder];
        if (self.hasGetRoomsResponse) {
          [subBuilder mergeFrom:self.getRoomsResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGetRoomsResponse:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        CreateRoomRequestBuilder* subBuilder = [CreateRoomRequest builder];
        if (self.hasCreateRoomRequest) {
          [subBuilder mergeFrom:self.createRoomRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateRoomRequest:[subBuilder buildPartial]];
        break;
      }
      case 834: {
        CreateRoomResponseBuilder* subBuilder = [CreateRoomResponse builder];
        if (self.hasCreateRoomResponse) {
          [subBuilder mergeFrom:self.createRoomResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateRoomResponse:[subBuilder buildPartial]];
        break;
      }
      case 842: {
        SearchRoomRequestBuilder* subBuilder = [SearchRoomRequest builder];
        if (self.hasSearchRoomRequest) {
          [subBuilder mergeFrom:self.searchRoomRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSearchRoomRequest:[subBuilder buildPartial]];
        break;
      }
      case 850: {
        SearchRoomResponseBuilder* subBuilder = [SearchRoomResponse builder];
        if (self.hasSearchRoomResponse) {
          [subBuilder mergeFrom:self.searchRoomResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSearchRoomResponse:[subBuilder buildPartial]];
        break;
      }
      case 858: {
        RoomNotificationRequestBuilder* subBuilder = [RoomNotificationRequest builder];
        if (self.hasRoomNotificationRequest) {
          [subBuilder mergeFrom:self.roomNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 874: {
        RollDiceEndNotificationRequestBuilder* subBuilder = [RollDiceEndNotificationRequest builder];
        if (self.hasRollDiceEndNotificationRequest) {
          [subBuilder mergeFrom:self.rollDiceEndNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRollDiceEndNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 890: {
        CallDiceRequestBuilder* subBuilder = [CallDiceRequest builder];
        if (self.hasCallDiceRequest) {
          [subBuilder mergeFrom:self.callDiceRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCallDiceRequest:[subBuilder buildPartial]];
        break;
      }
      case 898: {
        CallDiceResponseBuilder* subBuilder = [CallDiceResponse builder];
        if (self.hasCallDiceResponse) {
          [subBuilder mergeFrom:self.callDiceResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCallDiceResponse:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        OpenDiceRequestBuilder* subBuilder = [OpenDiceRequest builder];
        if (self.hasOpenDiceRequest) {
          [subBuilder mergeFrom:self.openDiceRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpenDiceRequest:[subBuilder buildPartial]];
        break;
      }
      case 914: {
        OpenDiceResponseBuilder* subBuilder = [OpenDiceResponse builder];
        if (self.hasOpenDiceResponse) {
          [subBuilder mergeFrom:self.openDiceResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpenDiceResponse:[subBuilder buildPartial]];
        break;
      }
      case 922: {
        GameOverNotificationRequestBuilder* subBuilder = [GameOverNotificationRequest builder];
        if (self.hasGameOverNotificationRequest) {
          [subBuilder mergeFrom:self.gameOverNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameOverNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 930: {
        GameOverNotificationResponseBuilder* subBuilder = [GameOverNotificationResponse builder];
        if (self.hasGameOverNotificationResponse) {
          [subBuilder mergeFrom:self.gameOverNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameOverNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 938: {
        RegisterRoomsNotificationRequestBuilder* subBuilder = [RegisterRoomsNotificationRequest builder];
        if (self.hasRegisterRoomsNotificationRequest) {
          [subBuilder mergeFrom:self.registerRoomsNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRegisterRoomsNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 946: {
        RegisterRoomsNotificationResponseBuilder* subBuilder = [RegisterRoomsNotificationResponse builder];
        if (self.hasRegisterRoomsNotificationResponse) {
          [subBuilder mergeFrom:self.registerRoomsNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRegisterRoomsNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 954: {
        UnRegisterRoomsNotificationRequestBuilder* subBuilder = [UnRegisterRoomsNotificationRequest builder];
        if (self.hasUnRegisterRoomsNotificationRequest) {
          [subBuilder mergeFrom:self.unRegisterRoomsNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnRegisterRoomsNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 962: {
        UnRegisterRoomsNotificationResponseBuilder* subBuilder = [UnRegisterRoomsNotificationResponse builder];
        if (self.hasUnRegisterRoomsNotificationResponse) {
          [subBuilder mergeFrom:self.unRegisterRoomsNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnRegisterRoomsNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 970: {
        UserDiceNotificationBuilder* subBuilder = [UserDiceNotification builder];
        if (self.hasUserDiceNotification) {
          [subBuilder mergeFrom:self.userDiceNotification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserDiceNotification:[subBuilder buildPartial]];
        break;
      }
      case 986: {
        BetDiceRequestBuilder* subBuilder = [BetDiceRequest builder];
        if (self.hasBetDiceRequest) {
          [subBuilder mergeFrom:self.betDiceRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetDiceRequest:[subBuilder buildPartial]];
        break;
      }
      case 994: {
        BetDiceResponseBuilder* subBuilder = [BetDiceResponse builder];
        if (self.hasBetDiceResponse) {
          [subBuilder mergeFrom:self.betDiceResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetDiceResponse:[subBuilder buildPartial]];
        break;
      }
      case 1050: {
        UseItemRequestBuilder* subBuilder = [UseItemRequest builder];
        if (self.hasUseItemRequest) {
          [subBuilder mergeFrom:self.useItemRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUseItemRequest:[subBuilder buildPartial]];
        break;
      }
      case 1058: {
        UseItemResponseBuilder* subBuilder = [UseItemResponse builder];
        if (self.hasUseItemResponse) {
          [subBuilder mergeFrom:self.useItemResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUseItemResponse:[subBuilder buildPartial]];
        break;
      }
      case 1210: {
        BetRequestBuilder* subBuilder = [BetRequest builder];
        if (self.hasBetRequest) {
          [subBuilder mergeFrom:self.betRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetRequest:[subBuilder buildPartial]];
        break;
      }
      case 1218: {
        BetResponseBuilder* subBuilder = [BetResponse builder];
        if (self.hasBetResponse) {
          [subBuilder mergeFrom:self.betResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetResponse:[subBuilder buildPartial]];
        break;
      }
      case 1226: {
        CheckCardRequestBuilder* subBuilder = [CheckCardRequest builder];
        if (self.hasCheckCardRequest) {
          [subBuilder mergeFrom:self.checkCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCheckCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1234: {
        CheckCardResponseBuilder* subBuilder = [CheckCardResponse builder];
        if (self.hasCheckCardResponse) {
          [subBuilder mergeFrom:self.checkCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCheckCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1242: {
        FoldCardRequestBuilder* subBuilder = [FoldCardRequest builder];
        if (self.hasFoldCardRequest) {
          [subBuilder mergeFrom:self.foldCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFoldCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1250: {
        FoldCardResponseBuilder* subBuilder = [FoldCardResponse builder];
        if (self.hasFoldCardResponse) {
          [subBuilder mergeFrom:self.foldCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFoldCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1258: {
        ShowCardRequestBuilder* subBuilder = [ShowCardRequest builder];
        if (self.hasShowCardRequest) {
          [subBuilder mergeFrom:self.showCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setShowCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1266: {
        ShowCardResponseBuilder* subBuilder = [ShowCardResponse builder];
        if (self.hasShowCardResponse) {
          [subBuilder mergeFrom:self.showCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setShowCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1274: {
        CompareCardRequestBuilder* subBuilder = [CompareCardRequest builder];
        if (self.hasCompareCardRequest) {
          [subBuilder mergeFrom:self.compareCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompareCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1282: {
        CompareCardResponseBuilder* subBuilder = [CompareCardResponse builder];
        if (self.hasCompareCardResponse) {
          [subBuilder mergeFrom:self.compareCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompareCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1290: {
        ChangeCardRequestBuilder* subBuilder = [ChangeCardRequest builder];
        if (self.hasChangeCardRequest) {
          [subBuilder mergeFrom:self.changeCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChangeCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1298: {
        ChangeCardResponseBuilder* subBuilder = [ChangeCardResponse builder];
        if (self.hasChangeCardResponse) {
          [subBuilder mergeFrom:self.changeCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChangeCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1306: {
        TimeoutSettingRequestBuilder* subBuilder = [TimeoutSettingRequest builder];
        if (self.hasTimeoutSettingRequest) {
          [subBuilder mergeFrom:self.timeoutSettingRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimeoutSettingRequest:[subBuilder buildPartial]];
        break;
      }
      case 1314: {
        TimeoutSettingResponseBuilder* subBuilder = [TimeoutSettingResponse builder];
        if (self.hasTimeoutSettingResponse) {
          [subBuilder mergeFrom:self.timeoutSettingResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimeoutSettingResponse:[subBuilder buildPartial]];
        break;
      }
      case 8000: {
        [self setStartOffset:[input readInt32]];
        break;
      }
      case 8008: {
        [self setMaxCount:[input readInt32]];
        break;
      }
      case 8080: {
        [self setTimeStamp:[input readInt32]];
        break;
      }
      case 8090: {
        [self setMac:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCommand {
  return resultGameMessage.hasCommand;
}
- (GameCommandType) command {
  return resultGameMessage.command;
}
- (GameMessageBuilder*) setCommand:(GameCommandType) value {
  resultGameMessage.hasCommand = YES;
  resultGameMessage.command = value;
  return self;
}
- (GameMessageBuilder*) clearCommand {
  resultGameMessage.hasCommand = NO;
  resultGameMessage.command = GameCommandTypeJoinGameRequest;
  return self;
}
- (BOOL) hasMessageId {
  return resultGameMessage.hasMessageId;
}
- (SInt32) messageId {
  return resultGameMessage.messageId;
}
- (GameMessageBuilder*) setMessageId:(SInt32) value {
  resultGameMessage.hasMessageId = YES;
  resultGameMessage.messageId = value;
  return self;
}
- (GameMessageBuilder*) clearMessageId {
  resultGameMessage.hasMessageId = NO;
  resultGameMessage.messageId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return resultGameMessage.hasResultCode;
}
- (GameResultCode) resultCode {
  return resultGameMessage.resultCode;
}
- (GameMessageBuilder*) setResultCode:(GameResultCode) value {
  resultGameMessage.hasResultCode = YES;
  resultGameMessage.resultCode = value;
  return self;
}
- (GameMessageBuilder*) clearResultCode {
  resultGameMessage.hasResultCode = NO;
  resultGameMessage.resultCode = GameResultCodeSuccess;
  return self;
}
- (BOOL) hasUserId {
  return resultGameMessage.hasUserId;
}
- (NSString*) userId {
  return resultGameMessage.userId;
}
- (GameMessageBuilder*) setUserId:(NSString*) value {
  resultGameMessage.hasUserId = YES;
  resultGameMessage.userId = value;
  return self;
}
- (GameMessageBuilder*) clearUserId {
  resultGameMessage.hasUserId = NO;
  resultGameMessage.userId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultGameMessage.hasSessionId;
}
- (SInt64) sessionId {
  return resultGameMessage.sessionId;
}
- (GameMessageBuilder*) setSessionId:(SInt64) value {
  resultGameMessage.hasSessionId = YES;
  resultGameMessage.sessionId = value;
  return self;
}
- (GameMessageBuilder*) clearSessionId {
  resultGameMessage.hasSessionId = NO;
  resultGameMessage.sessionId = 0L;
  return self;
}
- (BOOL) hasRound {
  return resultGameMessage.hasRound;
}
- (SInt32) round {
  return resultGameMessage.round;
}
- (GameMessageBuilder*) setRound:(SInt32) value {
  resultGameMessage.hasRound = YES;
  resultGameMessage.round = value;
  return self;
}
- (GameMessageBuilder*) clearRound {
  resultGameMessage.hasRound = NO;
  resultGameMessage.round = 0;
  return self;
}
- (BOOL) hasCompleteReason {
  return resultGameMessage.hasCompleteReason;
}
- (GameCompleteReason) completeReason {
  return resultGameMessage.completeReason;
}
- (GameMessageBuilder*) setCompleteReason:(GameCompleteReason) value {
  resultGameMessage.hasCompleteReason = YES;
  resultGameMessage.completeReason = value;
  return self;
}
- (GameMessageBuilder*) clearCompleteReason {
  resultGameMessage.hasCompleteReason = NO;
  resultGameMessage.completeReason = GameCompleteReasonReasonNotComplete;
  return self;
}
- (BOOL) hasOnlineUserCount {
  return resultGameMessage.hasOnlineUserCount;
}
- (SInt32) onlineUserCount {
  return resultGameMessage.onlineUserCount;
}
- (GameMessageBuilder*) setOnlineUserCount:(SInt32) value {
  resultGameMessage.hasOnlineUserCount = YES;
  resultGameMessage.onlineUserCount = value;
  return self;
}
- (GameMessageBuilder*) clearOnlineUserCount {
  resultGameMessage.hasOnlineUserCount = NO;
  resultGameMessage.onlineUserCount = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultGameMessage.hasToUserId;
}
- (NSString*) toUserId {
  return resultGameMessage.toUserId;
}
- (GameMessageBuilder*) setToUserId:(NSString*) value {
  resultGameMessage.hasToUserId = YES;
  resultGameMessage.toUserId = value;
  return self;
}
- (GameMessageBuilder*) clearToUserId {
  resultGameMessage.hasToUserId = NO;
  resultGameMessage.toUserId = @"";
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return resultGameMessage.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return resultGameMessage.currentPlayUserId;
}
- (GameMessageBuilder*) setCurrentPlayUserId:(NSString*) value {
  resultGameMessage.hasCurrentPlayUserId = YES;
  resultGameMessage.currentPlayUserId = value;
  return self;
}
- (GameMessageBuilder*) clearCurrentPlayUserId {
  resultGameMessage.hasCurrentPlayUserId = NO;
  resultGameMessage.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasJoinGameRequest {
  return resultGameMessage.hasJoinGameRequest;
}
- (JoinGameRequest*) joinGameRequest {
  return resultGameMessage.joinGameRequest;
}
- (GameMessageBuilder*) setJoinGameRequest:(JoinGameRequest*) value {
  resultGameMessage.hasJoinGameRequest = YES;
  resultGameMessage.joinGameRequest = value;
  return self;
}
- (GameMessageBuilder*) setJoinGameRequestBuilder:(JoinGameRequestBuilder*) builderForValue {
  return [self setJoinGameRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeJoinGameRequest:(JoinGameRequest*) value {
  if (resultGameMessage.hasJoinGameRequest &&
      resultGameMessage.joinGameRequest != [JoinGameRequest defaultInstance]) {
    resultGameMessage.joinGameRequest =
      [[[JoinGameRequest builderWithPrototype:resultGameMessage.joinGameRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.joinGameRequest = value;
  }
  resultGameMessage.hasJoinGameRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearJoinGameRequest {
  resultGameMessage.hasJoinGameRequest = NO;
  resultGameMessage.joinGameRequest = [JoinGameRequest defaultInstance];
  return self;
}
- (BOOL) hasJoinGameResponse {
  return resultGameMessage.hasJoinGameResponse;
}
- (JoinGameResponse*) joinGameResponse {
  return resultGameMessage.joinGameResponse;
}
- (GameMessageBuilder*) setJoinGameResponse:(JoinGameResponse*) value {
  resultGameMessage.hasJoinGameResponse = YES;
  resultGameMessage.joinGameResponse = value;
  return self;
}
- (GameMessageBuilder*) setJoinGameResponseBuilder:(JoinGameResponseBuilder*) builderForValue {
  return [self setJoinGameResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeJoinGameResponse:(JoinGameResponse*) value {
  if (resultGameMessage.hasJoinGameResponse &&
      resultGameMessage.joinGameResponse != [JoinGameResponse defaultInstance]) {
    resultGameMessage.joinGameResponse =
      [[[JoinGameResponse builderWithPrototype:resultGameMessage.joinGameResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.joinGameResponse = value;
  }
  resultGameMessage.hasJoinGameResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearJoinGameResponse {
  resultGameMessage.hasJoinGameResponse = NO;
  resultGameMessage.joinGameResponse = [JoinGameResponse defaultInstance];
  return self;
}
- (BOOL) hasStartGameRequest {
  return resultGameMessage.hasStartGameRequest;
}
- (StartGameRequest*) startGameRequest {
  return resultGameMessage.startGameRequest;
}
- (GameMessageBuilder*) setStartGameRequest:(StartGameRequest*) value {
  resultGameMessage.hasStartGameRequest = YES;
  resultGameMessage.startGameRequest = value;
  return self;
}
- (GameMessageBuilder*) setStartGameRequestBuilder:(StartGameRequestBuilder*) builderForValue {
  return [self setStartGameRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeStartGameRequest:(StartGameRequest*) value {
  if (resultGameMessage.hasStartGameRequest &&
      resultGameMessage.startGameRequest != [StartGameRequest defaultInstance]) {
    resultGameMessage.startGameRequest =
      [[[StartGameRequest builderWithPrototype:resultGameMessage.startGameRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.startGameRequest = value;
  }
  resultGameMessage.hasStartGameRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearStartGameRequest {
  resultGameMessage.hasStartGameRequest = NO;
  resultGameMessage.startGameRequest = [StartGameRequest defaultInstance];
  return self;
}
- (BOOL) hasStartGameResponse {
  return resultGameMessage.hasStartGameResponse;
}
- (StartGameResponse*) startGameResponse {
  return resultGameMessage.startGameResponse;
}
- (GameMessageBuilder*) setStartGameResponse:(StartGameResponse*) value {
  resultGameMessage.hasStartGameResponse = YES;
  resultGameMessage.startGameResponse = value;
  return self;
}
- (GameMessageBuilder*) setStartGameResponseBuilder:(StartGameResponseBuilder*) builderForValue {
  return [self setStartGameResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeStartGameResponse:(StartGameResponse*) value {
  if (resultGameMessage.hasStartGameResponse &&
      resultGameMessage.startGameResponse != [StartGameResponse defaultInstance]) {
    resultGameMessage.startGameResponse =
      [[[StartGameResponse builderWithPrototype:resultGameMessage.startGameResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.startGameResponse = value;
  }
  resultGameMessage.hasStartGameResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearStartGameResponse {
  resultGameMessage.hasStartGameResponse = NO;
  resultGameMessage.startGameResponse = [StartGameResponse defaultInstance];
  return self;
}
- (BOOL) hasGameStartNotificationRequest {
  return resultGameMessage.hasGameStartNotificationRequest;
}
- (GameStartNotificationRequest*) gameStartNotificationRequest {
  return resultGameMessage.gameStartNotificationRequest;
}
- (GameMessageBuilder*) setGameStartNotificationRequest:(GameStartNotificationRequest*) value {
  resultGameMessage.hasGameStartNotificationRequest = YES;
  resultGameMessage.gameStartNotificationRequest = value;
  return self;
}
- (GameMessageBuilder*) setGameStartNotificationRequestBuilder:(GameStartNotificationRequestBuilder*) builderForValue {
  return [self setGameStartNotificationRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeGameStartNotificationRequest:(GameStartNotificationRequest*) value {
  if (resultGameMessage.hasGameStartNotificationRequest &&
      resultGameMessage.gameStartNotificationRequest != [GameStartNotificationRequest defaultInstance]) {
    resultGameMessage.gameStartNotificationRequest =
      [[[GameStartNotificationRequest builderWithPrototype:resultGameMessage.gameStartNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.gameStartNotificationRequest = value;
  }
  resultGameMessage.hasGameStartNotificationRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearGameStartNotificationRequest {
  resultGameMessage.hasGameStartNotificationRequest = NO;
  resultGameMessage.gameStartNotificationRequest = [GameStartNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasGameStartNotificationResponse {
  return resultGameMessage.hasGameStartNotificationResponse;
}
- (GameStartNotificationResponse*) gameStartNotificationResponse {
  return resultGameMessage.gameStartNotificationResponse;
}
- (GameMessageBuilder*) setGameStartNotificationResponse:(GameStartNotificationResponse*) value {
  resultGameMessage.hasGameStartNotificationResponse = YES;
  resultGameMessage.gameStartNotificationResponse = value;
  return self;
}
- (GameMessageBuilder*) setGameStartNotificationResponseBuilder:(GameStartNotificationResponseBuilder*) builderForValue {
  return [self setGameStartNotificationResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeGameStartNotificationResponse:(GameStartNotificationResponse*) value {
  if (resultGameMessage.hasGameStartNotificationResponse &&
      resultGameMessage.gameStartNotificationResponse != [GameStartNotificationResponse defaultInstance]) {
    resultGameMessage.gameStartNotificationResponse =
      [[[GameStartNotificationResponse builderWithPrototype:resultGameMessage.gameStartNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.gameStartNotificationResponse = value;
  }
  resultGameMessage.hasGameStartNotificationResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearGameStartNotificationResponse {
  resultGameMessage.hasGameStartNotificationResponse = NO;
  resultGameMessage.gameStartNotificationResponse = [GameStartNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasSendDrawDataRequest {
  return resultGameMessage.hasSendDrawDataRequest;
}
- (SendDrawDataRequest*) sendDrawDataRequest {
  return resultGameMessage.sendDrawDataRequest;
}
- (GameMessageBuilder*) setSendDrawDataRequest:(SendDrawDataRequest*) value {
  resultGameMessage.hasSendDrawDataRequest = YES;
  resultGameMessage.sendDrawDataRequest = value;
  return self;
}
- (GameMessageBuilder*) setSendDrawDataRequestBuilder:(SendDrawDataRequestBuilder*) builderForValue {
  return [self setSendDrawDataRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeSendDrawDataRequest:(SendDrawDataRequest*) value {
  if (resultGameMessage.hasSendDrawDataRequest &&
      resultGameMessage.sendDrawDataRequest != [SendDrawDataRequest defaultInstance]) {
    resultGameMessage.sendDrawDataRequest =
      [[[SendDrawDataRequest builderWithPrototype:resultGameMessage.sendDrawDataRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.sendDrawDataRequest = value;
  }
  resultGameMessage.hasSendDrawDataRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearSendDrawDataRequest {
  resultGameMessage.hasSendDrawDataRequest = NO;
  resultGameMessage.sendDrawDataRequest = [SendDrawDataRequest defaultInstance];
  return self;
}
- (BOOL) hasSendDrawDataResponse {
  return resultGameMessage.hasSendDrawDataResponse;
}
- (SendDrawDataResponse*) sendDrawDataResponse {
  return resultGameMessage.sendDrawDataResponse;
}
- (GameMessageBuilder*) setSendDrawDataResponse:(SendDrawDataResponse*) value {
  resultGameMessage.hasSendDrawDataResponse = YES;
  resultGameMessage.sendDrawDataResponse = value;
  return self;
}
- (GameMessageBuilder*) setSendDrawDataResponseBuilder:(SendDrawDataResponseBuilder*) builderForValue {
  return [self setSendDrawDataResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeSendDrawDataResponse:(SendDrawDataResponse*) value {
  if (resultGameMessage.hasSendDrawDataResponse &&
      resultGameMessage.sendDrawDataResponse != [SendDrawDataResponse defaultInstance]) {
    resultGameMessage.sendDrawDataResponse =
      [[[SendDrawDataResponse builderWithPrototype:resultGameMessage.sendDrawDataResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.sendDrawDataResponse = value;
  }
  resultGameMessage.hasSendDrawDataResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearSendDrawDataResponse {
  resultGameMessage.hasSendDrawDataResponse = NO;
  resultGameMessage.sendDrawDataResponse = [SendDrawDataResponse defaultInstance];
  return self;
}
- (BOOL) hasChatRequest {
  return resultGameMessage.hasChatRequest;
}
- (GameChatRequest*) chatRequest {
  return resultGameMessage.chatRequest;
}
- (GameMessageBuilder*) setChatRequest:(GameChatRequest*) value {
  resultGameMessage.hasChatRequest = YES;
  resultGameMessage.chatRequest = value;
  return self;
}
- (GameMessageBuilder*) setChatRequestBuilder:(GameChatRequestBuilder*) builderForValue {
  return [self setChatRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeChatRequest:(GameChatRequest*) value {
  if (resultGameMessage.hasChatRequest &&
      resultGameMessage.chatRequest != [GameChatRequest defaultInstance]) {
    resultGameMessage.chatRequest =
      [[[GameChatRequest builderWithPrototype:resultGameMessage.chatRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.chatRequest = value;
  }
  resultGameMessage.hasChatRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearChatRequest {
  resultGameMessage.hasChatRequest = NO;
  resultGameMessage.chatRequest = [GameChatRequest defaultInstance];
  return self;
}
- (BOOL) hasChatResponse {
  return resultGameMessage.hasChatResponse;
}
- (GameChatResponse*) chatResponse {
  return resultGameMessage.chatResponse;
}
- (GameMessageBuilder*) setChatResponse:(GameChatResponse*) value {
  resultGameMessage.hasChatResponse = YES;
  resultGameMessage.chatResponse = value;
  return self;
}
- (GameMessageBuilder*) setChatResponseBuilder:(GameChatResponseBuilder*) builderForValue {
  return [self setChatResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeChatResponse:(GameChatResponse*) value {
  if (resultGameMessage.hasChatResponse &&
      resultGameMessage.chatResponse != [GameChatResponse defaultInstance]) {
    resultGameMessage.chatResponse =
      [[[GameChatResponse builderWithPrototype:resultGameMessage.chatResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.chatResponse = value;
  }
  resultGameMessage.hasChatResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearChatResponse {
  resultGameMessage.hasChatResponse = NO;
  resultGameMessage.chatResponse = [GameChatResponse defaultInstance];
  return self;
}
- (BOOL) hasFacetimeChatRequest {
  return resultGameMessage.hasFacetimeChatRequest;
}
- (FacetimeChatRequest*) facetimeChatRequest {
  return resultGameMessage.facetimeChatRequest;
}
- (GameMessageBuilder*) setFacetimeChatRequest:(FacetimeChatRequest*) value {
  resultGameMessage.hasFacetimeChatRequest = YES;
  resultGameMessage.facetimeChatRequest = value;
  return self;
}
- (GameMessageBuilder*) setFacetimeChatRequestBuilder:(FacetimeChatRequestBuilder*) builderForValue {
  return [self setFacetimeChatRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeFacetimeChatRequest:(FacetimeChatRequest*) value {
  if (resultGameMessage.hasFacetimeChatRequest &&
      resultGameMessage.facetimeChatRequest != [FacetimeChatRequest defaultInstance]) {
    resultGameMessage.facetimeChatRequest =
      [[[FacetimeChatRequest builderWithPrototype:resultGameMessage.facetimeChatRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.facetimeChatRequest = value;
  }
  resultGameMessage.hasFacetimeChatRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearFacetimeChatRequest {
  resultGameMessage.hasFacetimeChatRequest = NO;
  resultGameMessage.facetimeChatRequest = [FacetimeChatRequest defaultInstance];
  return self;
}
- (BOOL) hasFacetimeChatResponse {
  return resultGameMessage.hasFacetimeChatResponse;
}
- (FacetimeChatResponse*) facetimeChatResponse {
  return resultGameMessage.facetimeChatResponse;
}
- (GameMessageBuilder*) setFacetimeChatResponse:(FacetimeChatResponse*) value {
  resultGameMessage.hasFacetimeChatResponse = YES;
  resultGameMessage.facetimeChatResponse = value;
  return self;
}
- (GameMessageBuilder*) setFacetimeChatResponseBuilder:(FacetimeChatResponseBuilder*) builderForValue {
  return [self setFacetimeChatResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeFacetimeChatResponse:(FacetimeChatResponse*) value {
  if (resultGameMessage.hasFacetimeChatResponse &&
      resultGameMessage.facetimeChatResponse != [FacetimeChatResponse defaultInstance]) {
    resultGameMessage.facetimeChatResponse =
      [[[FacetimeChatResponse builderWithPrototype:resultGameMessage.facetimeChatResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.facetimeChatResponse = value;
  }
  resultGameMessage.hasFacetimeChatResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearFacetimeChatResponse {
  resultGameMessage.hasFacetimeChatResponse = NO;
  resultGameMessage.facetimeChatResponse = [FacetimeChatResponse defaultInstance];
  return self;
}
- (BOOL) hasNotification {
  return resultGameMessage.hasNotification;
}
- (GeneralNotification*) notification {
  return resultGameMessage.notification;
}
- (GameMessageBuilder*) setNotification:(GeneralNotification*) value {
  resultGameMessage.hasNotification = YES;
  resultGameMessage.notification = value;
  return self;
}
- (GameMessageBuilder*) setNotificationBuilder:(GeneralNotificationBuilder*) builderForValue {
  return [self setNotification:[builderForValue build]];
}
- (GameMessageBuilder*) mergeNotification:(GeneralNotification*) value {
  if (resultGameMessage.hasNotification &&
      resultGameMessage.notification != [GeneralNotification defaultInstance]) {
    resultGameMessage.notification =
      [[[GeneralNotification builderWithPrototype:resultGameMessage.notification] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.notification = value;
  }
  resultGameMessage.hasNotification = YES;
  return self;
}
- (GameMessageBuilder*) clearNotification {
  resultGameMessage.hasNotification = NO;
  resultGameMessage.notification = [GeneralNotification defaultInstance];
  return self;
}
- (BOOL) hasGetRoomsRequest {
  return resultGameMessage.hasGetRoomsRequest;
}
- (GetRoomsRequest*) getRoomsRequest {
  return resultGameMessage.getRoomsRequest;
}
- (GameMessageBuilder*) setGetRoomsRequest:(GetRoomsRequest*) value {
  resultGameMessage.hasGetRoomsRequest = YES;
  resultGameMessage.getRoomsRequest = value;
  return self;
}
- (GameMessageBuilder*) setGetRoomsRequestBuilder:(GetRoomsRequestBuilder*) builderForValue {
  return [self setGetRoomsRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeGetRoomsRequest:(GetRoomsRequest*) value {
  if (resultGameMessage.hasGetRoomsRequest &&
      resultGameMessage.getRoomsRequest != [GetRoomsRequest defaultInstance]) {
    resultGameMessage.getRoomsRequest =
      [[[GetRoomsRequest builderWithPrototype:resultGameMessage.getRoomsRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.getRoomsRequest = value;
  }
  resultGameMessage.hasGetRoomsRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearGetRoomsRequest {
  resultGameMessage.hasGetRoomsRequest = NO;
  resultGameMessage.getRoomsRequest = [GetRoomsRequest defaultInstance];
  return self;
}
- (BOOL) hasGetRoomsResponse {
  return resultGameMessage.hasGetRoomsResponse;
}
- (GetRoomsResponse*) getRoomsResponse {
  return resultGameMessage.getRoomsResponse;
}
- (GameMessageBuilder*) setGetRoomsResponse:(GetRoomsResponse*) value {
  resultGameMessage.hasGetRoomsResponse = YES;
  resultGameMessage.getRoomsResponse = value;
  return self;
}
- (GameMessageBuilder*) setGetRoomsResponseBuilder:(GetRoomsResponseBuilder*) builderForValue {
  return [self setGetRoomsResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeGetRoomsResponse:(GetRoomsResponse*) value {
  if (resultGameMessage.hasGetRoomsResponse &&
      resultGameMessage.getRoomsResponse != [GetRoomsResponse defaultInstance]) {
    resultGameMessage.getRoomsResponse =
      [[[GetRoomsResponse builderWithPrototype:resultGameMessage.getRoomsResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.getRoomsResponse = value;
  }
  resultGameMessage.hasGetRoomsResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearGetRoomsResponse {
  resultGameMessage.hasGetRoomsResponse = NO;
  resultGameMessage.getRoomsResponse = [GetRoomsResponse defaultInstance];
  return self;
}
- (BOOL) hasCreateRoomRequest {
  return resultGameMessage.hasCreateRoomRequest;
}
- (CreateRoomRequest*) createRoomRequest {
  return resultGameMessage.createRoomRequest;
}
- (GameMessageBuilder*) setCreateRoomRequest:(CreateRoomRequest*) value {
  resultGameMessage.hasCreateRoomRequest = YES;
  resultGameMessage.createRoomRequest = value;
  return self;
}
- (GameMessageBuilder*) setCreateRoomRequestBuilder:(CreateRoomRequestBuilder*) builderForValue {
  return [self setCreateRoomRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCreateRoomRequest:(CreateRoomRequest*) value {
  if (resultGameMessage.hasCreateRoomRequest &&
      resultGameMessage.createRoomRequest != [CreateRoomRequest defaultInstance]) {
    resultGameMessage.createRoomRequest =
      [[[CreateRoomRequest builderWithPrototype:resultGameMessage.createRoomRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.createRoomRequest = value;
  }
  resultGameMessage.hasCreateRoomRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearCreateRoomRequest {
  resultGameMessage.hasCreateRoomRequest = NO;
  resultGameMessage.createRoomRequest = [CreateRoomRequest defaultInstance];
  return self;
}
- (BOOL) hasCreateRoomResponse {
  return resultGameMessage.hasCreateRoomResponse;
}
- (CreateRoomResponse*) createRoomResponse {
  return resultGameMessage.createRoomResponse;
}
- (GameMessageBuilder*) setCreateRoomResponse:(CreateRoomResponse*) value {
  resultGameMessage.hasCreateRoomResponse = YES;
  resultGameMessage.createRoomResponse = value;
  return self;
}
- (GameMessageBuilder*) setCreateRoomResponseBuilder:(CreateRoomResponseBuilder*) builderForValue {
  return [self setCreateRoomResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCreateRoomResponse:(CreateRoomResponse*) value {
  if (resultGameMessage.hasCreateRoomResponse &&
      resultGameMessage.createRoomResponse != [CreateRoomResponse defaultInstance]) {
    resultGameMessage.createRoomResponse =
      [[[CreateRoomResponse builderWithPrototype:resultGameMessage.createRoomResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.createRoomResponse = value;
  }
  resultGameMessage.hasCreateRoomResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearCreateRoomResponse {
  resultGameMessage.hasCreateRoomResponse = NO;
  resultGameMessage.createRoomResponse = [CreateRoomResponse defaultInstance];
  return self;
}
- (BOOL) hasSearchRoomRequest {
  return resultGameMessage.hasSearchRoomRequest;
}
- (SearchRoomRequest*) searchRoomRequest {
  return resultGameMessage.searchRoomRequest;
}
- (GameMessageBuilder*) setSearchRoomRequest:(SearchRoomRequest*) value {
  resultGameMessage.hasSearchRoomRequest = YES;
  resultGameMessage.searchRoomRequest = value;
  return self;
}
- (GameMessageBuilder*) setSearchRoomRequestBuilder:(SearchRoomRequestBuilder*) builderForValue {
  return [self setSearchRoomRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeSearchRoomRequest:(SearchRoomRequest*) value {
  if (resultGameMessage.hasSearchRoomRequest &&
      resultGameMessage.searchRoomRequest != [SearchRoomRequest defaultInstance]) {
    resultGameMessage.searchRoomRequest =
      [[[SearchRoomRequest builderWithPrototype:resultGameMessage.searchRoomRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.searchRoomRequest = value;
  }
  resultGameMessage.hasSearchRoomRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearSearchRoomRequest {
  resultGameMessage.hasSearchRoomRequest = NO;
  resultGameMessage.searchRoomRequest = [SearchRoomRequest defaultInstance];
  return self;
}
- (BOOL) hasSearchRoomResponse {
  return resultGameMessage.hasSearchRoomResponse;
}
- (SearchRoomResponse*) searchRoomResponse {
  return resultGameMessage.searchRoomResponse;
}
- (GameMessageBuilder*) setSearchRoomResponse:(SearchRoomResponse*) value {
  resultGameMessage.hasSearchRoomResponse = YES;
  resultGameMessage.searchRoomResponse = value;
  return self;
}
- (GameMessageBuilder*) setSearchRoomResponseBuilder:(SearchRoomResponseBuilder*) builderForValue {
  return [self setSearchRoomResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeSearchRoomResponse:(SearchRoomResponse*) value {
  if (resultGameMessage.hasSearchRoomResponse &&
      resultGameMessage.searchRoomResponse != [SearchRoomResponse defaultInstance]) {
    resultGameMessage.searchRoomResponse =
      [[[SearchRoomResponse builderWithPrototype:resultGameMessage.searchRoomResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.searchRoomResponse = value;
  }
  resultGameMessage.hasSearchRoomResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearSearchRoomResponse {
  resultGameMessage.hasSearchRoomResponse = NO;
  resultGameMessage.searchRoomResponse = [SearchRoomResponse defaultInstance];
  return self;
}
- (BOOL) hasRoomNotificationRequest {
  return resultGameMessage.hasRoomNotificationRequest;
}
- (RoomNotificationRequest*) roomNotificationRequest {
  return resultGameMessage.roomNotificationRequest;
}
- (GameMessageBuilder*) setRoomNotificationRequest:(RoomNotificationRequest*) value {
  resultGameMessage.hasRoomNotificationRequest = YES;
  resultGameMessage.roomNotificationRequest = value;
  return self;
}
- (GameMessageBuilder*) setRoomNotificationRequestBuilder:(RoomNotificationRequestBuilder*) builderForValue {
  return [self setRoomNotificationRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeRoomNotificationRequest:(RoomNotificationRequest*) value {
  if (resultGameMessage.hasRoomNotificationRequest &&
      resultGameMessage.roomNotificationRequest != [RoomNotificationRequest defaultInstance]) {
    resultGameMessage.roomNotificationRequest =
      [[[RoomNotificationRequest builderWithPrototype:resultGameMessage.roomNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.roomNotificationRequest = value;
  }
  resultGameMessage.hasRoomNotificationRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearRoomNotificationRequest {
  resultGameMessage.hasRoomNotificationRequest = NO;
  resultGameMessage.roomNotificationRequest = [RoomNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasRollDiceEndNotificationRequest {
  return resultGameMessage.hasRollDiceEndNotificationRequest;
}
- (RollDiceEndNotificationRequest*) rollDiceEndNotificationRequest {
  return resultGameMessage.rollDiceEndNotificationRequest;
}
- (GameMessageBuilder*) setRollDiceEndNotificationRequest:(RollDiceEndNotificationRequest*) value {
  resultGameMessage.hasRollDiceEndNotificationRequest = YES;
  resultGameMessage.rollDiceEndNotificationRequest = value;
  return self;
}
- (GameMessageBuilder*) setRollDiceEndNotificationRequestBuilder:(RollDiceEndNotificationRequestBuilder*) builderForValue {
  return [self setRollDiceEndNotificationRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeRollDiceEndNotificationRequest:(RollDiceEndNotificationRequest*) value {
  if (resultGameMessage.hasRollDiceEndNotificationRequest &&
      resultGameMessage.rollDiceEndNotificationRequest != [RollDiceEndNotificationRequest defaultInstance]) {
    resultGameMessage.rollDiceEndNotificationRequest =
      [[[RollDiceEndNotificationRequest builderWithPrototype:resultGameMessage.rollDiceEndNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.rollDiceEndNotificationRequest = value;
  }
  resultGameMessage.hasRollDiceEndNotificationRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearRollDiceEndNotificationRequest {
  resultGameMessage.hasRollDiceEndNotificationRequest = NO;
  resultGameMessage.rollDiceEndNotificationRequest = [RollDiceEndNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasCallDiceRequest {
  return resultGameMessage.hasCallDiceRequest;
}
- (CallDiceRequest*) callDiceRequest {
  return resultGameMessage.callDiceRequest;
}
- (GameMessageBuilder*) setCallDiceRequest:(CallDiceRequest*) value {
  resultGameMessage.hasCallDiceRequest = YES;
  resultGameMessage.callDiceRequest = value;
  return self;
}
- (GameMessageBuilder*) setCallDiceRequestBuilder:(CallDiceRequestBuilder*) builderForValue {
  return [self setCallDiceRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCallDiceRequest:(CallDiceRequest*) value {
  if (resultGameMessage.hasCallDiceRequest &&
      resultGameMessage.callDiceRequest != [CallDiceRequest defaultInstance]) {
    resultGameMessage.callDiceRequest =
      [[[CallDiceRequest builderWithPrototype:resultGameMessage.callDiceRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.callDiceRequest = value;
  }
  resultGameMessage.hasCallDiceRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearCallDiceRequest {
  resultGameMessage.hasCallDiceRequest = NO;
  resultGameMessage.callDiceRequest = [CallDiceRequest defaultInstance];
  return self;
}
- (BOOL) hasCallDiceResponse {
  return resultGameMessage.hasCallDiceResponse;
}
- (CallDiceResponse*) callDiceResponse {
  return resultGameMessage.callDiceResponse;
}
- (GameMessageBuilder*) setCallDiceResponse:(CallDiceResponse*) value {
  resultGameMessage.hasCallDiceResponse = YES;
  resultGameMessage.callDiceResponse = value;
  return self;
}
- (GameMessageBuilder*) setCallDiceResponseBuilder:(CallDiceResponseBuilder*) builderForValue {
  return [self setCallDiceResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCallDiceResponse:(CallDiceResponse*) value {
  if (resultGameMessage.hasCallDiceResponse &&
      resultGameMessage.callDiceResponse != [CallDiceResponse defaultInstance]) {
    resultGameMessage.callDiceResponse =
      [[[CallDiceResponse builderWithPrototype:resultGameMessage.callDiceResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.callDiceResponse = value;
  }
  resultGameMessage.hasCallDiceResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearCallDiceResponse {
  resultGameMessage.hasCallDiceResponse = NO;
  resultGameMessage.callDiceResponse = [CallDiceResponse defaultInstance];
  return self;
}
- (BOOL) hasOpenDiceRequest {
  return resultGameMessage.hasOpenDiceRequest;
}
- (OpenDiceRequest*) openDiceRequest {
  return resultGameMessage.openDiceRequest;
}
- (GameMessageBuilder*) setOpenDiceRequest:(OpenDiceRequest*) value {
  resultGameMessage.hasOpenDiceRequest = YES;
  resultGameMessage.openDiceRequest = value;
  return self;
}
- (GameMessageBuilder*) setOpenDiceRequestBuilder:(OpenDiceRequestBuilder*) builderForValue {
  return [self setOpenDiceRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeOpenDiceRequest:(OpenDiceRequest*) value {
  if (resultGameMessage.hasOpenDiceRequest &&
      resultGameMessage.openDiceRequest != [OpenDiceRequest defaultInstance]) {
    resultGameMessage.openDiceRequest =
      [[[OpenDiceRequest builderWithPrototype:resultGameMessage.openDiceRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.openDiceRequest = value;
  }
  resultGameMessage.hasOpenDiceRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearOpenDiceRequest {
  resultGameMessage.hasOpenDiceRequest = NO;
  resultGameMessage.openDiceRequest = [OpenDiceRequest defaultInstance];
  return self;
}
- (BOOL) hasOpenDiceResponse {
  return resultGameMessage.hasOpenDiceResponse;
}
- (OpenDiceResponse*) openDiceResponse {
  return resultGameMessage.openDiceResponse;
}
- (GameMessageBuilder*) setOpenDiceResponse:(OpenDiceResponse*) value {
  resultGameMessage.hasOpenDiceResponse = YES;
  resultGameMessage.openDiceResponse = value;
  return self;
}
- (GameMessageBuilder*) setOpenDiceResponseBuilder:(OpenDiceResponseBuilder*) builderForValue {
  return [self setOpenDiceResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeOpenDiceResponse:(OpenDiceResponse*) value {
  if (resultGameMessage.hasOpenDiceResponse &&
      resultGameMessage.openDiceResponse != [OpenDiceResponse defaultInstance]) {
    resultGameMessage.openDiceResponse =
      [[[OpenDiceResponse builderWithPrototype:resultGameMessage.openDiceResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.openDiceResponse = value;
  }
  resultGameMessage.hasOpenDiceResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearOpenDiceResponse {
  resultGameMessage.hasOpenDiceResponse = NO;
  resultGameMessage.openDiceResponse = [OpenDiceResponse defaultInstance];
  return self;
}
- (BOOL) hasGameOverNotificationRequest {
  return resultGameMessage.hasGameOverNotificationRequest;
}
- (GameOverNotificationRequest*) gameOverNotificationRequest {
  return resultGameMessage.gameOverNotificationRequest;
}
- (GameMessageBuilder*) setGameOverNotificationRequest:(GameOverNotificationRequest*) value {
  resultGameMessage.hasGameOverNotificationRequest = YES;
  resultGameMessage.gameOverNotificationRequest = value;
  return self;
}
- (GameMessageBuilder*) setGameOverNotificationRequestBuilder:(GameOverNotificationRequestBuilder*) builderForValue {
  return [self setGameOverNotificationRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeGameOverNotificationRequest:(GameOverNotificationRequest*) value {
  if (resultGameMessage.hasGameOverNotificationRequest &&
      resultGameMessage.gameOverNotificationRequest != [GameOverNotificationRequest defaultInstance]) {
    resultGameMessage.gameOverNotificationRequest =
      [[[GameOverNotificationRequest builderWithPrototype:resultGameMessage.gameOverNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.gameOverNotificationRequest = value;
  }
  resultGameMessage.hasGameOverNotificationRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearGameOverNotificationRequest {
  resultGameMessage.hasGameOverNotificationRequest = NO;
  resultGameMessage.gameOverNotificationRequest = [GameOverNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasGameOverNotificationResponse {
  return resultGameMessage.hasGameOverNotificationResponse;
}
- (GameOverNotificationResponse*) gameOverNotificationResponse {
  return resultGameMessage.gameOverNotificationResponse;
}
- (GameMessageBuilder*) setGameOverNotificationResponse:(GameOverNotificationResponse*) value {
  resultGameMessage.hasGameOverNotificationResponse = YES;
  resultGameMessage.gameOverNotificationResponse = value;
  return self;
}
- (GameMessageBuilder*) setGameOverNotificationResponseBuilder:(GameOverNotificationResponseBuilder*) builderForValue {
  return [self setGameOverNotificationResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeGameOverNotificationResponse:(GameOverNotificationResponse*) value {
  if (resultGameMessage.hasGameOverNotificationResponse &&
      resultGameMessage.gameOverNotificationResponse != [GameOverNotificationResponse defaultInstance]) {
    resultGameMessage.gameOverNotificationResponse =
      [[[GameOverNotificationResponse builderWithPrototype:resultGameMessage.gameOverNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.gameOverNotificationResponse = value;
  }
  resultGameMessage.hasGameOverNotificationResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearGameOverNotificationResponse {
  resultGameMessage.hasGameOverNotificationResponse = NO;
  resultGameMessage.gameOverNotificationResponse = [GameOverNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasRegisterRoomsNotificationRequest {
  return resultGameMessage.hasRegisterRoomsNotificationRequest;
}
- (RegisterRoomsNotificationRequest*) registerRoomsNotificationRequest {
  return resultGameMessage.registerRoomsNotificationRequest;
}
- (GameMessageBuilder*) setRegisterRoomsNotificationRequest:(RegisterRoomsNotificationRequest*) value {
  resultGameMessage.hasRegisterRoomsNotificationRequest = YES;
  resultGameMessage.registerRoomsNotificationRequest = value;
  return self;
}
- (GameMessageBuilder*) setRegisterRoomsNotificationRequestBuilder:(RegisterRoomsNotificationRequestBuilder*) builderForValue {
  return [self setRegisterRoomsNotificationRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeRegisterRoomsNotificationRequest:(RegisterRoomsNotificationRequest*) value {
  if (resultGameMessage.hasRegisterRoomsNotificationRequest &&
      resultGameMessage.registerRoomsNotificationRequest != [RegisterRoomsNotificationRequest defaultInstance]) {
    resultGameMessage.registerRoomsNotificationRequest =
      [[[RegisterRoomsNotificationRequest builderWithPrototype:resultGameMessage.registerRoomsNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.registerRoomsNotificationRequest = value;
  }
  resultGameMessage.hasRegisterRoomsNotificationRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearRegisterRoomsNotificationRequest {
  resultGameMessage.hasRegisterRoomsNotificationRequest = NO;
  resultGameMessage.registerRoomsNotificationRequest = [RegisterRoomsNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasRegisterRoomsNotificationResponse {
  return resultGameMessage.hasRegisterRoomsNotificationResponse;
}
- (RegisterRoomsNotificationResponse*) registerRoomsNotificationResponse {
  return resultGameMessage.registerRoomsNotificationResponse;
}
- (GameMessageBuilder*) setRegisterRoomsNotificationResponse:(RegisterRoomsNotificationResponse*) value {
  resultGameMessage.hasRegisterRoomsNotificationResponse = YES;
  resultGameMessage.registerRoomsNotificationResponse = value;
  return self;
}
- (GameMessageBuilder*) setRegisterRoomsNotificationResponseBuilder:(RegisterRoomsNotificationResponseBuilder*) builderForValue {
  return [self setRegisterRoomsNotificationResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeRegisterRoomsNotificationResponse:(RegisterRoomsNotificationResponse*) value {
  if (resultGameMessage.hasRegisterRoomsNotificationResponse &&
      resultGameMessage.registerRoomsNotificationResponse != [RegisterRoomsNotificationResponse defaultInstance]) {
    resultGameMessage.registerRoomsNotificationResponse =
      [[[RegisterRoomsNotificationResponse builderWithPrototype:resultGameMessage.registerRoomsNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.registerRoomsNotificationResponse = value;
  }
  resultGameMessage.hasRegisterRoomsNotificationResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearRegisterRoomsNotificationResponse {
  resultGameMessage.hasRegisterRoomsNotificationResponse = NO;
  resultGameMessage.registerRoomsNotificationResponse = [RegisterRoomsNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasUnRegisterRoomsNotificationRequest {
  return resultGameMessage.hasUnRegisterRoomsNotificationRequest;
}
- (UnRegisterRoomsNotificationRequest*) unRegisterRoomsNotificationRequest {
  return resultGameMessage.unRegisterRoomsNotificationRequest;
}
- (GameMessageBuilder*) setUnRegisterRoomsNotificationRequest:(UnRegisterRoomsNotificationRequest*) value {
  resultGameMessage.hasUnRegisterRoomsNotificationRequest = YES;
  resultGameMessage.unRegisterRoomsNotificationRequest = value;
  return self;
}
- (GameMessageBuilder*) setUnRegisterRoomsNotificationRequestBuilder:(UnRegisterRoomsNotificationRequestBuilder*) builderForValue {
  return [self setUnRegisterRoomsNotificationRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeUnRegisterRoomsNotificationRequest:(UnRegisterRoomsNotificationRequest*) value {
  if (resultGameMessage.hasUnRegisterRoomsNotificationRequest &&
      resultGameMessage.unRegisterRoomsNotificationRequest != [UnRegisterRoomsNotificationRequest defaultInstance]) {
    resultGameMessage.unRegisterRoomsNotificationRequest =
      [[[UnRegisterRoomsNotificationRequest builderWithPrototype:resultGameMessage.unRegisterRoomsNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.unRegisterRoomsNotificationRequest = value;
  }
  resultGameMessage.hasUnRegisterRoomsNotificationRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearUnRegisterRoomsNotificationRequest {
  resultGameMessage.hasUnRegisterRoomsNotificationRequest = NO;
  resultGameMessage.unRegisterRoomsNotificationRequest = [UnRegisterRoomsNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasUnRegisterRoomsNotificationResponse {
  return resultGameMessage.hasUnRegisterRoomsNotificationResponse;
}
- (UnRegisterRoomsNotificationResponse*) unRegisterRoomsNotificationResponse {
  return resultGameMessage.unRegisterRoomsNotificationResponse;
}
- (GameMessageBuilder*) setUnRegisterRoomsNotificationResponse:(UnRegisterRoomsNotificationResponse*) value {
  resultGameMessage.hasUnRegisterRoomsNotificationResponse = YES;
  resultGameMessage.unRegisterRoomsNotificationResponse = value;
  return self;
}
- (GameMessageBuilder*) setUnRegisterRoomsNotificationResponseBuilder:(UnRegisterRoomsNotificationResponseBuilder*) builderForValue {
  return [self setUnRegisterRoomsNotificationResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeUnRegisterRoomsNotificationResponse:(UnRegisterRoomsNotificationResponse*) value {
  if (resultGameMessage.hasUnRegisterRoomsNotificationResponse &&
      resultGameMessage.unRegisterRoomsNotificationResponse != [UnRegisterRoomsNotificationResponse defaultInstance]) {
    resultGameMessage.unRegisterRoomsNotificationResponse =
      [[[UnRegisterRoomsNotificationResponse builderWithPrototype:resultGameMessage.unRegisterRoomsNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.unRegisterRoomsNotificationResponse = value;
  }
  resultGameMessage.hasUnRegisterRoomsNotificationResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearUnRegisterRoomsNotificationResponse {
  resultGameMessage.hasUnRegisterRoomsNotificationResponse = NO;
  resultGameMessage.unRegisterRoomsNotificationResponse = [UnRegisterRoomsNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasUserDiceNotification {
  return resultGameMessage.hasUserDiceNotification;
}
- (UserDiceNotification*) userDiceNotification {
  return resultGameMessage.userDiceNotification;
}
- (GameMessageBuilder*) setUserDiceNotification:(UserDiceNotification*) value {
  resultGameMessage.hasUserDiceNotification = YES;
  resultGameMessage.userDiceNotification = value;
  return self;
}
- (GameMessageBuilder*) setUserDiceNotificationBuilder:(UserDiceNotificationBuilder*) builderForValue {
  return [self setUserDiceNotification:[builderForValue build]];
}
- (GameMessageBuilder*) mergeUserDiceNotification:(UserDiceNotification*) value {
  if (resultGameMessage.hasUserDiceNotification &&
      resultGameMessage.userDiceNotification != [UserDiceNotification defaultInstance]) {
    resultGameMessage.userDiceNotification =
      [[[UserDiceNotification builderWithPrototype:resultGameMessage.userDiceNotification] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.userDiceNotification = value;
  }
  resultGameMessage.hasUserDiceNotification = YES;
  return self;
}
- (GameMessageBuilder*) clearUserDiceNotification {
  resultGameMessage.hasUserDiceNotification = NO;
  resultGameMessage.userDiceNotification = [UserDiceNotification defaultInstance];
  return self;
}
- (BOOL) hasBetDiceRequest {
  return resultGameMessage.hasBetDiceRequest;
}
- (BetDiceRequest*) betDiceRequest {
  return resultGameMessage.betDiceRequest;
}
- (GameMessageBuilder*) setBetDiceRequest:(BetDiceRequest*) value {
  resultGameMessage.hasBetDiceRequest = YES;
  resultGameMessage.betDiceRequest = value;
  return self;
}
- (GameMessageBuilder*) setBetDiceRequestBuilder:(BetDiceRequestBuilder*) builderForValue {
  return [self setBetDiceRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeBetDiceRequest:(BetDiceRequest*) value {
  if (resultGameMessage.hasBetDiceRequest &&
      resultGameMessage.betDiceRequest != [BetDiceRequest defaultInstance]) {
    resultGameMessage.betDiceRequest =
      [[[BetDiceRequest builderWithPrototype:resultGameMessage.betDiceRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.betDiceRequest = value;
  }
  resultGameMessage.hasBetDiceRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearBetDiceRequest {
  resultGameMessage.hasBetDiceRequest = NO;
  resultGameMessage.betDiceRequest = [BetDiceRequest defaultInstance];
  return self;
}
- (BOOL) hasBetDiceResponse {
  return resultGameMessage.hasBetDiceResponse;
}
- (BetDiceResponse*) betDiceResponse {
  return resultGameMessage.betDiceResponse;
}
- (GameMessageBuilder*) setBetDiceResponse:(BetDiceResponse*) value {
  resultGameMessage.hasBetDiceResponse = YES;
  resultGameMessage.betDiceResponse = value;
  return self;
}
- (GameMessageBuilder*) setBetDiceResponseBuilder:(BetDiceResponseBuilder*) builderForValue {
  return [self setBetDiceResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeBetDiceResponse:(BetDiceResponse*) value {
  if (resultGameMessage.hasBetDiceResponse &&
      resultGameMessage.betDiceResponse != [BetDiceResponse defaultInstance]) {
    resultGameMessage.betDiceResponse =
      [[[BetDiceResponse builderWithPrototype:resultGameMessage.betDiceResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.betDiceResponse = value;
  }
  resultGameMessage.hasBetDiceResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearBetDiceResponse {
  resultGameMessage.hasBetDiceResponse = NO;
  resultGameMessage.betDiceResponse = [BetDiceResponse defaultInstance];
  return self;
}
- (BOOL) hasUseItemRequest {
  return resultGameMessage.hasUseItemRequest;
}
- (UseItemRequest*) useItemRequest {
  return resultGameMessage.useItemRequest;
}
- (GameMessageBuilder*) setUseItemRequest:(UseItemRequest*) value {
  resultGameMessage.hasUseItemRequest = YES;
  resultGameMessage.useItemRequest = value;
  return self;
}
- (GameMessageBuilder*) setUseItemRequestBuilder:(UseItemRequestBuilder*) builderForValue {
  return [self setUseItemRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeUseItemRequest:(UseItemRequest*) value {
  if (resultGameMessage.hasUseItemRequest &&
      resultGameMessage.useItemRequest != [UseItemRequest defaultInstance]) {
    resultGameMessage.useItemRequest =
      [[[UseItemRequest builderWithPrototype:resultGameMessage.useItemRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.useItemRequest = value;
  }
  resultGameMessage.hasUseItemRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearUseItemRequest {
  resultGameMessage.hasUseItemRequest = NO;
  resultGameMessage.useItemRequest = [UseItemRequest defaultInstance];
  return self;
}
- (BOOL) hasUseItemResponse {
  return resultGameMessage.hasUseItemResponse;
}
- (UseItemResponse*) useItemResponse {
  return resultGameMessage.useItemResponse;
}
- (GameMessageBuilder*) setUseItemResponse:(UseItemResponse*) value {
  resultGameMessage.hasUseItemResponse = YES;
  resultGameMessage.useItemResponse = value;
  return self;
}
- (GameMessageBuilder*) setUseItemResponseBuilder:(UseItemResponseBuilder*) builderForValue {
  return [self setUseItemResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeUseItemResponse:(UseItemResponse*) value {
  if (resultGameMessage.hasUseItemResponse &&
      resultGameMessage.useItemResponse != [UseItemResponse defaultInstance]) {
    resultGameMessage.useItemResponse =
      [[[UseItemResponse builderWithPrototype:resultGameMessage.useItemResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.useItemResponse = value;
  }
  resultGameMessage.hasUseItemResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearUseItemResponse {
  resultGameMessage.hasUseItemResponse = NO;
  resultGameMessage.useItemResponse = [UseItemResponse defaultInstance];
  return self;
}
- (BOOL) hasBetRequest {
  return resultGameMessage.hasBetRequest;
}
- (BetRequest*) betRequest {
  return resultGameMessage.betRequest;
}
- (GameMessageBuilder*) setBetRequest:(BetRequest*) value {
  resultGameMessage.hasBetRequest = YES;
  resultGameMessage.betRequest = value;
  return self;
}
- (GameMessageBuilder*) setBetRequestBuilder:(BetRequestBuilder*) builderForValue {
  return [self setBetRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeBetRequest:(BetRequest*) value {
  if (resultGameMessage.hasBetRequest &&
      resultGameMessage.betRequest != [BetRequest defaultInstance]) {
    resultGameMessage.betRequest =
      [[[BetRequest builderWithPrototype:resultGameMessage.betRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.betRequest = value;
  }
  resultGameMessage.hasBetRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearBetRequest {
  resultGameMessage.hasBetRequest = NO;
  resultGameMessage.betRequest = [BetRequest defaultInstance];
  return self;
}
- (BOOL) hasBetResponse {
  return resultGameMessage.hasBetResponse;
}
- (BetResponse*) betResponse {
  return resultGameMessage.betResponse;
}
- (GameMessageBuilder*) setBetResponse:(BetResponse*) value {
  resultGameMessage.hasBetResponse = YES;
  resultGameMessage.betResponse = value;
  return self;
}
- (GameMessageBuilder*) setBetResponseBuilder:(BetResponseBuilder*) builderForValue {
  return [self setBetResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeBetResponse:(BetResponse*) value {
  if (resultGameMessage.hasBetResponse &&
      resultGameMessage.betResponse != [BetResponse defaultInstance]) {
    resultGameMessage.betResponse =
      [[[BetResponse builderWithPrototype:resultGameMessage.betResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.betResponse = value;
  }
  resultGameMessage.hasBetResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearBetResponse {
  resultGameMessage.hasBetResponse = NO;
  resultGameMessage.betResponse = [BetResponse defaultInstance];
  return self;
}
- (BOOL) hasCheckCardRequest {
  return resultGameMessage.hasCheckCardRequest;
}
- (CheckCardRequest*) checkCardRequest {
  return resultGameMessage.checkCardRequest;
}
- (GameMessageBuilder*) setCheckCardRequest:(CheckCardRequest*) value {
  resultGameMessage.hasCheckCardRequest = YES;
  resultGameMessage.checkCardRequest = value;
  return self;
}
- (GameMessageBuilder*) setCheckCardRequestBuilder:(CheckCardRequestBuilder*) builderForValue {
  return [self setCheckCardRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCheckCardRequest:(CheckCardRequest*) value {
  if (resultGameMessage.hasCheckCardRequest &&
      resultGameMessage.checkCardRequest != [CheckCardRequest defaultInstance]) {
    resultGameMessage.checkCardRequest =
      [[[CheckCardRequest builderWithPrototype:resultGameMessage.checkCardRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.checkCardRequest = value;
  }
  resultGameMessage.hasCheckCardRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearCheckCardRequest {
  resultGameMessage.hasCheckCardRequest = NO;
  resultGameMessage.checkCardRequest = [CheckCardRequest defaultInstance];
  return self;
}
- (BOOL) hasCheckCardResponse {
  return resultGameMessage.hasCheckCardResponse;
}
- (CheckCardResponse*) checkCardResponse {
  return resultGameMessage.checkCardResponse;
}
- (GameMessageBuilder*) setCheckCardResponse:(CheckCardResponse*) value {
  resultGameMessage.hasCheckCardResponse = YES;
  resultGameMessage.checkCardResponse = value;
  return self;
}
- (GameMessageBuilder*) setCheckCardResponseBuilder:(CheckCardResponseBuilder*) builderForValue {
  return [self setCheckCardResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCheckCardResponse:(CheckCardResponse*) value {
  if (resultGameMessage.hasCheckCardResponse &&
      resultGameMessage.checkCardResponse != [CheckCardResponse defaultInstance]) {
    resultGameMessage.checkCardResponse =
      [[[CheckCardResponse builderWithPrototype:resultGameMessage.checkCardResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.checkCardResponse = value;
  }
  resultGameMessage.hasCheckCardResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearCheckCardResponse {
  resultGameMessage.hasCheckCardResponse = NO;
  resultGameMessage.checkCardResponse = [CheckCardResponse defaultInstance];
  return self;
}
- (BOOL) hasFoldCardRequest {
  return resultGameMessage.hasFoldCardRequest;
}
- (FoldCardRequest*) foldCardRequest {
  return resultGameMessage.foldCardRequest;
}
- (GameMessageBuilder*) setFoldCardRequest:(FoldCardRequest*) value {
  resultGameMessage.hasFoldCardRequest = YES;
  resultGameMessage.foldCardRequest = value;
  return self;
}
- (GameMessageBuilder*) setFoldCardRequestBuilder:(FoldCardRequestBuilder*) builderForValue {
  return [self setFoldCardRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeFoldCardRequest:(FoldCardRequest*) value {
  if (resultGameMessage.hasFoldCardRequest &&
      resultGameMessage.foldCardRequest != [FoldCardRequest defaultInstance]) {
    resultGameMessage.foldCardRequest =
      [[[FoldCardRequest builderWithPrototype:resultGameMessage.foldCardRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.foldCardRequest = value;
  }
  resultGameMessage.hasFoldCardRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearFoldCardRequest {
  resultGameMessage.hasFoldCardRequest = NO;
  resultGameMessage.foldCardRequest = [FoldCardRequest defaultInstance];
  return self;
}
- (BOOL) hasFoldCardResponse {
  return resultGameMessage.hasFoldCardResponse;
}
- (FoldCardResponse*) foldCardResponse {
  return resultGameMessage.foldCardResponse;
}
- (GameMessageBuilder*) setFoldCardResponse:(FoldCardResponse*) value {
  resultGameMessage.hasFoldCardResponse = YES;
  resultGameMessage.foldCardResponse = value;
  return self;
}
- (GameMessageBuilder*) setFoldCardResponseBuilder:(FoldCardResponseBuilder*) builderForValue {
  return [self setFoldCardResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeFoldCardResponse:(FoldCardResponse*) value {
  if (resultGameMessage.hasFoldCardResponse &&
      resultGameMessage.foldCardResponse != [FoldCardResponse defaultInstance]) {
    resultGameMessage.foldCardResponse =
      [[[FoldCardResponse builderWithPrototype:resultGameMessage.foldCardResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.foldCardResponse = value;
  }
  resultGameMessage.hasFoldCardResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearFoldCardResponse {
  resultGameMessage.hasFoldCardResponse = NO;
  resultGameMessage.foldCardResponse = [FoldCardResponse defaultInstance];
  return self;
}
- (BOOL) hasShowCardRequest {
  return resultGameMessage.hasShowCardRequest;
}
- (ShowCardRequest*) showCardRequest {
  return resultGameMessage.showCardRequest;
}
- (GameMessageBuilder*) setShowCardRequest:(ShowCardRequest*) value {
  resultGameMessage.hasShowCardRequest = YES;
  resultGameMessage.showCardRequest = value;
  return self;
}
- (GameMessageBuilder*) setShowCardRequestBuilder:(ShowCardRequestBuilder*) builderForValue {
  return [self setShowCardRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeShowCardRequest:(ShowCardRequest*) value {
  if (resultGameMessage.hasShowCardRequest &&
      resultGameMessage.showCardRequest != [ShowCardRequest defaultInstance]) {
    resultGameMessage.showCardRequest =
      [[[ShowCardRequest builderWithPrototype:resultGameMessage.showCardRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.showCardRequest = value;
  }
  resultGameMessage.hasShowCardRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearShowCardRequest {
  resultGameMessage.hasShowCardRequest = NO;
  resultGameMessage.showCardRequest = [ShowCardRequest defaultInstance];
  return self;
}
- (BOOL) hasShowCardResponse {
  return resultGameMessage.hasShowCardResponse;
}
- (ShowCardResponse*) showCardResponse {
  return resultGameMessage.showCardResponse;
}
- (GameMessageBuilder*) setShowCardResponse:(ShowCardResponse*) value {
  resultGameMessage.hasShowCardResponse = YES;
  resultGameMessage.showCardResponse = value;
  return self;
}
- (GameMessageBuilder*) setShowCardResponseBuilder:(ShowCardResponseBuilder*) builderForValue {
  return [self setShowCardResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeShowCardResponse:(ShowCardResponse*) value {
  if (resultGameMessage.hasShowCardResponse &&
      resultGameMessage.showCardResponse != [ShowCardResponse defaultInstance]) {
    resultGameMessage.showCardResponse =
      [[[ShowCardResponse builderWithPrototype:resultGameMessage.showCardResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.showCardResponse = value;
  }
  resultGameMessage.hasShowCardResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearShowCardResponse {
  resultGameMessage.hasShowCardResponse = NO;
  resultGameMessage.showCardResponse = [ShowCardResponse defaultInstance];
  return self;
}
- (BOOL) hasCompareCardRequest {
  return resultGameMessage.hasCompareCardRequest;
}
- (CompareCardRequest*) compareCardRequest {
  return resultGameMessage.compareCardRequest;
}
- (GameMessageBuilder*) setCompareCardRequest:(CompareCardRequest*) value {
  resultGameMessage.hasCompareCardRequest = YES;
  resultGameMessage.compareCardRequest = value;
  return self;
}
- (GameMessageBuilder*) setCompareCardRequestBuilder:(CompareCardRequestBuilder*) builderForValue {
  return [self setCompareCardRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCompareCardRequest:(CompareCardRequest*) value {
  if (resultGameMessage.hasCompareCardRequest &&
      resultGameMessage.compareCardRequest != [CompareCardRequest defaultInstance]) {
    resultGameMessage.compareCardRequest =
      [[[CompareCardRequest builderWithPrototype:resultGameMessage.compareCardRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.compareCardRequest = value;
  }
  resultGameMessage.hasCompareCardRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearCompareCardRequest {
  resultGameMessage.hasCompareCardRequest = NO;
  resultGameMessage.compareCardRequest = [CompareCardRequest defaultInstance];
  return self;
}
- (BOOL) hasCompareCardResponse {
  return resultGameMessage.hasCompareCardResponse;
}
- (CompareCardResponse*) compareCardResponse {
  return resultGameMessage.compareCardResponse;
}
- (GameMessageBuilder*) setCompareCardResponse:(CompareCardResponse*) value {
  resultGameMessage.hasCompareCardResponse = YES;
  resultGameMessage.compareCardResponse = value;
  return self;
}
- (GameMessageBuilder*) setCompareCardResponseBuilder:(CompareCardResponseBuilder*) builderForValue {
  return [self setCompareCardResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeCompareCardResponse:(CompareCardResponse*) value {
  if (resultGameMessage.hasCompareCardResponse &&
      resultGameMessage.compareCardResponse != [CompareCardResponse defaultInstance]) {
    resultGameMessage.compareCardResponse =
      [[[CompareCardResponse builderWithPrototype:resultGameMessage.compareCardResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.compareCardResponse = value;
  }
  resultGameMessage.hasCompareCardResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearCompareCardResponse {
  resultGameMessage.hasCompareCardResponse = NO;
  resultGameMessage.compareCardResponse = [CompareCardResponse defaultInstance];
  return self;
}
- (BOOL) hasChangeCardRequest {
  return resultGameMessage.hasChangeCardRequest;
}
- (ChangeCardRequest*) changeCardRequest {
  return resultGameMessage.changeCardRequest;
}
- (GameMessageBuilder*) setChangeCardRequest:(ChangeCardRequest*) value {
  resultGameMessage.hasChangeCardRequest = YES;
  resultGameMessage.changeCardRequest = value;
  return self;
}
- (GameMessageBuilder*) setChangeCardRequestBuilder:(ChangeCardRequestBuilder*) builderForValue {
  return [self setChangeCardRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeChangeCardRequest:(ChangeCardRequest*) value {
  if (resultGameMessage.hasChangeCardRequest &&
      resultGameMessage.changeCardRequest != [ChangeCardRequest defaultInstance]) {
    resultGameMessage.changeCardRequest =
      [[[ChangeCardRequest builderWithPrototype:resultGameMessage.changeCardRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.changeCardRequest = value;
  }
  resultGameMessage.hasChangeCardRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearChangeCardRequest {
  resultGameMessage.hasChangeCardRequest = NO;
  resultGameMessage.changeCardRequest = [ChangeCardRequest defaultInstance];
  return self;
}
- (BOOL) hasChangeCardResponse {
  return resultGameMessage.hasChangeCardResponse;
}
- (ChangeCardResponse*) changeCardResponse {
  return resultGameMessage.changeCardResponse;
}
- (GameMessageBuilder*) setChangeCardResponse:(ChangeCardResponse*) value {
  resultGameMessage.hasChangeCardResponse = YES;
  resultGameMessage.changeCardResponse = value;
  return self;
}
- (GameMessageBuilder*) setChangeCardResponseBuilder:(ChangeCardResponseBuilder*) builderForValue {
  return [self setChangeCardResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeChangeCardResponse:(ChangeCardResponse*) value {
  if (resultGameMessage.hasChangeCardResponse &&
      resultGameMessage.changeCardResponse != [ChangeCardResponse defaultInstance]) {
    resultGameMessage.changeCardResponse =
      [[[ChangeCardResponse builderWithPrototype:resultGameMessage.changeCardResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.changeCardResponse = value;
  }
  resultGameMessage.hasChangeCardResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearChangeCardResponse {
  resultGameMessage.hasChangeCardResponse = NO;
  resultGameMessage.changeCardResponse = [ChangeCardResponse defaultInstance];
  return self;
}
- (BOOL) hasTimeoutSettingRequest {
  return resultGameMessage.hasTimeoutSettingRequest;
}
- (TimeoutSettingRequest*) timeoutSettingRequest {
  return resultGameMessage.timeoutSettingRequest;
}
- (GameMessageBuilder*) setTimeoutSettingRequest:(TimeoutSettingRequest*) value {
  resultGameMessage.hasTimeoutSettingRequest = YES;
  resultGameMessage.timeoutSettingRequest = value;
  return self;
}
- (GameMessageBuilder*) setTimeoutSettingRequestBuilder:(TimeoutSettingRequestBuilder*) builderForValue {
  return [self setTimeoutSettingRequest:[builderForValue build]];
}
- (GameMessageBuilder*) mergeTimeoutSettingRequest:(TimeoutSettingRequest*) value {
  if (resultGameMessage.hasTimeoutSettingRequest &&
      resultGameMessage.timeoutSettingRequest != [TimeoutSettingRequest defaultInstance]) {
    resultGameMessage.timeoutSettingRequest =
      [[[TimeoutSettingRequest builderWithPrototype:resultGameMessage.timeoutSettingRequest] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.timeoutSettingRequest = value;
  }
  resultGameMessage.hasTimeoutSettingRequest = YES;
  return self;
}
- (GameMessageBuilder*) clearTimeoutSettingRequest {
  resultGameMessage.hasTimeoutSettingRequest = NO;
  resultGameMessage.timeoutSettingRequest = [TimeoutSettingRequest defaultInstance];
  return self;
}
- (BOOL) hasTimeoutSettingResponse {
  return resultGameMessage.hasTimeoutSettingResponse;
}
- (TimeoutSettingResponse*) timeoutSettingResponse {
  return resultGameMessage.timeoutSettingResponse;
}
- (GameMessageBuilder*) setTimeoutSettingResponse:(TimeoutSettingResponse*) value {
  resultGameMessage.hasTimeoutSettingResponse = YES;
  resultGameMessage.timeoutSettingResponse = value;
  return self;
}
- (GameMessageBuilder*) setTimeoutSettingResponseBuilder:(TimeoutSettingResponseBuilder*) builderForValue {
  return [self setTimeoutSettingResponse:[builderForValue build]];
}
- (GameMessageBuilder*) mergeTimeoutSettingResponse:(TimeoutSettingResponse*) value {
  if (resultGameMessage.hasTimeoutSettingResponse &&
      resultGameMessage.timeoutSettingResponse != [TimeoutSettingResponse defaultInstance]) {
    resultGameMessage.timeoutSettingResponse =
      [[[TimeoutSettingResponse builderWithPrototype:resultGameMessage.timeoutSettingResponse] mergeFrom:value] buildPartial];
  } else {
    resultGameMessage.timeoutSettingResponse = value;
  }
  resultGameMessage.hasTimeoutSettingResponse = YES;
  return self;
}
- (GameMessageBuilder*) clearTimeoutSettingResponse {
  resultGameMessage.hasTimeoutSettingResponse = NO;
  resultGameMessage.timeoutSettingResponse = [TimeoutSettingResponse defaultInstance];
  return self;
}
- (BOOL) hasStartOffset {
  return resultGameMessage.hasStartOffset;
}
- (SInt32) startOffset {
  return resultGameMessage.startOffset;
}
- (GameMessageBuilder*) setStartOffset:(SInt32) value {
  resultGameMessage.hasStartOffset = YES;
  resultGameMessage.startOffset = value;
  return self;
}
- (GameMessageBuilder*) clearStartOffset {
  resultGameMessage.hasStartOffset = NO;
  resultGameMessage.startOffset = 0;
  return self;
}
- (BOOL) hasMaxCount {
  return resultGameMessage.hasMaxCount;
}
- (SInt32) maxCount {
  return resultGameMessage.maxCount;
}
- (GameMessageBuilder*) setMaxCount:(SInt32) value {
  resultGameMessage.hasMaxCount = YES;
  resultGameMessage.maxCount = value;
  return self;
}
- (GameMessageBuilder*) clearMaxCount {
  resultGameMessage.hasMaxCount = NO;
  resultGameMessage.maxCount = 0;
  return self;
}
- (BOOL) hasTimeStamp {
  return resultGameMessage.hasTimeStamp;
}
- (SInt32) timeStamp {
  return resultGameMessage.timeStamp;
}
- (GameMessageBuilder*) setTimeStamp:(SInt32) value {
  resultGameMessage.hasTimeStamp = YES;
  resultGameMessage.timeStamp = value;
  return self;
}
- (GameMessageBuilder*) clearTimeStamp {
  resultGameMessage.hasTimeStamp = NO;
  resultGameMessage.timeStamp = 0;
  return self;
}
- (BOOL) hasMac {
  return resultGameMessage.hasMac;
}
- (NSString*) mac {
  return resultGameMessage.mac;
}
- (GameMessageBuilder*) setMac:(NSString*) value {
  resultGameMessage.hasMac = YES;
  resultGameMessage.mac = value;
  return self;
}
- (GameMessageBuilder*) clearMac {
  resultGameMessage.hasMac = NO;
  resultGameMessage.mac = @"";
  return self;
}
@end

@interface DataQueryResponse ()
@property SInt32 resultCode;
@property SInt32 totalCount;
@property SInt32 version;
@property (strong) NSMutableArray * drawDataArray;
@property (strong) NSMutableArray * messageArray;
@property (strong) NSMutableArray * messageStatArray;
@property (strong) NSMutableArray * feedArray;
@property (strong) NSMutableArray * contestListArray;
@property (strong) PBContest* contest;
@property (strong) NSMutableArray * bbsBoardArray;
@property (strong) NSMutableArray * bbsPostArray;
@property (strong) NSMutableArray * bbsActionArray;
@property (strong) PBBBSDraw* bbsDrawData;
@property (strong) NSMutableArray * bbsPrivilegeListArray;
@property (strong) NSMutableArray * bbsUserListArray;
@property (strong) NSMutableArray * wallListArray;
@property (strong) PBWall* wall;
@property (strong) PBUserPhoto* userPhoto;
@property (strong) NSMutableArray * userPhotoListArray;
@property (strong) NSMutableArray * userListArray;
@property (strong) PBGameUser* user;
@property SInt32 userRelation;
@property (strong) PBOpus* opus;
@property (strong) NSMutableArray * opusListArray;
@property (strong) NSMutableArray * idListArray;
@property (strong) PBSongList* songs;
@property (strong) PBGuessRank* guessRank;
@property (strong) NSMutableArray * guessRankListArray;
@property (strong) PBGuessContest* guessContest;
@property (strong) NSMutableArray * guessContestListArray;
@property (strong) PBGroup* group;
@property (strong) NSMutableArray * groupListArray;
@property (strong) NSMutableArray * groupMemberListArray;
@property (strong) NSMutableArray * noticeListArray;
@property (strong) NSMutableArray * badgesArray;
@property (strong) NSString* url;
@property (strong) NSMutableArray * groupRoleArray;
@property (strong) PBUserTutorial* userTutorial;
@property (strong) NSMutableArray * userTutorialsArray;
@end

@implementation DataQueryResponse

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) _value_ {
  hasTotalCount_ = !!_value_;
}
@synthesize totalCount;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
@synthesize drawDataArray;
@dynamic drawData;
@synthesize messageArray;
@dynamic message;
@synthesize messageStatArray;
@dynamic messageStat;
@synthesize feedArray;
@dynamic feed;
@synthesize contestListArray;
@dynamic contestList;
- (BOOL) hasContest {
  return !!hasContest_;
}
- (void) setHasContest:(BOOL) _value_ {
  hasContest_ = !!_value_;
}
@synthesize contest;
@synthesize bbsBoardArray;
@dynamic bbsBoard;
@synthesize bbsPostArray;
@dynamic bbsPost;
@synthesize bbsActionArray;
@dynamic bbsAction;
- (BOOL) hasBbsDrawData {
  return !!hasBbsDrawData_;
}
- (void) setHasBbsDrawData:(BOOL) _value_ {
  hasBbsDrawData_ = !!_value_;
}
@synthesize bbsDrawData;
@synthesize bbsPrivilegeListArray;
@dynamic bbsPrivilegeList;
@synthesize bbsUserListArray;
@dynamic bbsUserList;
@synthesize wallListArray;
@dynamic wallList;
- (BOOL) hasWall {
  return !!hasWall_;
}
- (void) setHasWall:(BOOL) _value_ {
  hasWall_ = !!_value_;
}
@synthesize wall;
- (BOOL) hasUserPhoto {
  return !!hasUserPhoto_;
}
- (void) setHasUserPhoto:(BOOL) _value_ {
  hasUserPhoto_ = !!_value_;
}
@synthesize userPhoto;
@synthesize userPhotoListArray;
@dynamic userPhotoList;
@synthesize userListArray;
@dynamic userList;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasUserRelation {
  return !!hasUserRelation_;
}
- (void) setHasUserRelation:(BOOL) _value_ {
  hasUserRelation_ = !!_value_;
}
@synthesize userRelation;
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) _value_ {
  hasOpus_ = !!_value_;
}
@synthesize opus;
@synthesize opusListArray;
@dynamic opusList;
@synthesize idListArray;
@dynamic idList;
- (BOOL) hasSongs {
  return !!hasSongs_;
}
- (void) setHasSongs:(BOOL) _value_ {
  hasSongs_ = !!_value_;
}
@synthesize songs;
- (BOOL) hasGuessRank {
  return !!hasGuessRank_;
}
- (void) setHasGuessRank:(BOOL) _value_ {
  hasGuessRank_ = !!_value_;
}
@synthesize guessRank;
@synthesize guessRankListArray;
@dynamic guessRankList;
- (BOOL) hasGuessContest {
  return !!hasGuessContest_;
}
- (void) setHasGuessContest:(BOOL) _value_ {
  hasGuessContest_ = !!_value_;
}
@synthesize guessContest;
@synthesize guessContestListArray;
@dynamic guessContestList;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) _value_ {
  hasGroup_ = !!_value_;
}
@synthesize group;
@synthesize groupListArray;
@dynamic groupList;
@synthesize groupMemberListArray;
@dynamic groupMemberList;
@synthesize noticeListArray;
@dynamic noticeList;
@synthesize badgesArray;
@dynamic badges;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
@synthesize groupRoleArray;
@dynamic groupRole;
- (BOOL) hasUserTutorial {
  return !!hasUserTutorial_;
}
- (void) setHasUserTutorial:(BOOL) _value_ {
  hasUserTutorial_ = !!_value_;
}
@synthesize userTutorial;
@synthesize userTutorialsArray;
@dynamic userTutorials;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.totalCount = 0;
    self.version = 0;
    self.contest = [PBContest defaultInstance];
    self.bbsDrawData = [PBBBSDraw defaultInstance];
    self.wall = [PBWall defaultInstance];
    self.userPhoto = [PBUserPhoto defaultInstance];
    self.user = [PBGameUser defaultInstance];
    self.userRelation = 0;
    self.opus = [PBOpus defaultInstance];
    self.songs = [PBSongList defaultInstance];
    self.guessRank = [PBGuessRank defaultInstance];
    self.guessContest = [PBGuessContest defaultInstance];
    self.group = [PBGroup defaultInstance];
    self.url = @"";
    self.userTutorial = [PBUserTutorial defaultInstance];
  }
  return self;
}
static DataQueryResponse* defaultDataQueryResponseInstance = nil;
+ (void) initialize {
  if (self == [DataQueryResponse class]) {
    defaultDataQueryResponseInstance = [[DataQueryResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDataQueryResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultDataQueryResponseInstance;
}
- (NSArray *)drawData {
  return drawDataArray;
}
- (PBDraw*)drawDataAtIndex:(NSUInteger)index {
  return [drawDataArray objectAtIndex:index];
}
- (NSArray *)message {
  return messageArray;
}
- (PBMessage*)messageAtIndex:(NSUInteger)index {
  return [messageArray objectAtIndex:index];
}
- (NSArray *)messageStat {
  return messageStatArray;
}
- (PBMessageStat*)messageStatAtIndex:(NSUInteger)index {
  return [messageStatArray objectAtIndex:index];
}
- (NSArray *)feed {
  return feedArray;
}
- (PBFeed*)feedAtIndex:(NSUInteger)index {
  return [feedArray objectAtIndex:index];
}
- (NSArray *)contestList {
  return contestListArray;
}
- (PBContest*)contestListAtIndex:(NSUInteger)index {
  return [contestListArray objectAtIndex:index];
}
- (NSArray *)bbsBoard {
  return bbsBoardArray;
}
- (PBBBSBoard*)bbsBoardAtIndex:(NSUInteger)index {
  return [bbsBoardArray objectAtIndex:index];
}
- (NSArray *)bbsPost {
  return bbsPostArray;
}
- (PBBBSPost*)bbsPostAtIndex:(NSUInteger)index {
  return [bbsPostArray objectAtIndex:index];
}
- (NSArray *)bbsAction {
  return bbsActionArray;
}
- (PBBBSAction*)bbsActionAtIndex:(NSUInteger)index {
  return [bbsActionArray objectAtIndex:index];
}
- (NSArray *)bbsPrivilegeList {
  return bbsPrivilegeListArray;
}
- (PBBBSPrivilege*)bbsPrivilegeListAtIndex:(NSUInteger)index {
  return [bbsPrivilegeListArray objectAtIndex:index];
}
- (NSArray *)bbsUserList {
  return bbsUserListArray;
}
- (PBBBSUser*)bbsUserListAtIndex:(NSUInteger)index {
  return [bbsUserListArray objectAtIndex:index];
}
- (NSArray *)wallList {
  return wallListArray;
}
- (PBWall*)wallListAtIndex:(NSUInteger)index {
  return [wallListArray objectAtIndex:index];
}
- (NSArray *)userPhotoList {
  return userPhotoListArray;
}
- (PBUserPhoto*)userPhotoListAtIndex:(NSUInteger)index {
  return [userPhotoListArray objectAtIndex:index];
}
- (NSArray *)userList {
  return userListArray;
}
- (PBGameUser*)userListAtIndex:(NSUInteger)index {
  return [userListArray objectAtIndex:index];
}
- (NSArray *)opusList {
  return opusListArray;
}
- (PBOpus*)opusListAtIndex:(NSUInteger)index {
  return [opusListArray objectAtIndex:index];
}
- (NSArray *)idList {
  return idListArray;
}
- (NSString*)idListAtIndex:(NSUInteger)index {
  return [idListArray objectAtIndex:index];
}
- (NSArray *)guessRankList {
  return guessRankListArray;
}
- (PBGuessRank*)guessRankListAtIndex:(NSUInteger)index {
  return [guessRankListArray objectAtIndex:index];
}
- (NSArray *)guessContestList {
  return guessContestListArray;
}
- (PBGuessContest*)guessContestListAtIndex:(NSUInteger)index {
  return [guessContestListArray objectAtIndex:index];
}
- (NSArray *)groupList {
  return groupListArray;
}
- (PBGroup*)groupListAtIndex:(NSUInteger)index {
  return [groupListArray objectAtIndex:index];
}
- (NSArray *)groupMemberList {
  return groupMemberListArray;
}
- (PBGroupUsersByTitle*)groupMemberListAtIndex:(NSUInteger)index {
  return [groupMemberListArray objectAtIndex:index];
}
- (NSArray *)noticeList {
  return noticeListArray;
}
- (PBGroupNotice*)noticeListAtIndex:(NSUInteger)index {
  return [noticeListArray objectAtIndex:index];
}
- (NSArray *)badges {
  return badgesArray;
}
- (PBIntKeyIntValue*)badgesAtIndex:(NSUInteger)index {
  return [badgesArray objectAtIndex:index];
}
- (NSArray *)groupRole {
  return groupRoleArray;
}
- (PBGroupUserRole*)groupRoleAtIndex:(NSUInteger)index {
  return [groupRoleArray objectAtIndex:index];
}
- (NSArray *)userTutorials {
  return userTutorialsArray;
}
- (PBUserTutorial*)userTutorialsAtIndex:(NSUInteger)index {
  return [userTutorialsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  __block BOOL isInitdrawData = YES;
   [self.drawData enumerateObjectsUsingBlock:^(PBDraw *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawData = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawData) return isInitdrawData;
  __block BOOL isInitmessage = YES;
   [self.message enumerateObjectsUsingBlock:^(PBMessage *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmessage = NO;
      *stop = YES;
    }
  }];
  if (!isInitmessage) return isInitmessage;
  __block BOOL isInitmessageStat = YES;
   [self.messageStat enumerateObjectsUsingBlock:^(PBMessageStat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmessageStat = NO;
      *stop = YES;
    }
  }];
  if (!isInitmessageStat) return isInitmessageStat;
  __block BOOL isInitfeed = YES;
   [self.feed enumerateObjectsUsingBlock:^(PBFeed *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfeed = NO;
      *stop = YES;
    }
  }];
  if (!isInitfeed) return isInitfeed;
  __block BOOL isInitcontestList = YES;
   [self.contestList enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontestList = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontestList) return isInitcontestList;
  if (self.hasContest) {
    if (!self.contest.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitbbsBoard = YES;
   [self.bbsBoard enumerateObjectsUsingBlock:^(PBBBSBoard *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbbsBoard = NO;
      *stop = YES;
    }
  }];
  if (!isInitbbsBoard) return isInitbbsBoard;
  __block BOOL isInitbbsPost = YES;
   [self.bbsPost enumerateObjectsUsingBlock:^(PBBBSPost *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbbsPost = NO;
      *stop = YES;
    }
  }];
  if (!isInitbbsPost) return isInitbbsPost;
  __block BOOL isInitbbsAction = YES;
   [self.bbsAction enumerateObjectsUsingBlock:^(PBBBSAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbbsAction = NO;
      *stop = YES;
    }
  }];
  if (!isInitbbsAction) return isInitbbsAction;
  if (self.hasBbsDrawData) {
    if (!self.bbsDrawData.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitbbsPrivilegeList = YES;
   [self.bbsPrivilegeList enumerateObjectsUsingBlock:^(PBBBSPrivilege *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbbsPrivilegeList = NO;
      *stop = YES;
    }
  }];
  if (!isInitbbsPrivilegeList) return isInitbbsPrivilegeList;
  __block BOOL isInitbbsUserList = YES;
   [self.bbsUserList enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbbsUserList = NO;
      *stop = YES;
    }
  }];
  if (!isInitbbsUserList) return isInitbbsUserList;
  __block BOOL isInitwallList = YES;
   [self.wallList enumerateObjectsUsingBlock:^(PBWall *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitwallList = NO;
      *stop = YES;
    }
  }];
  if (!isInitwallList) return isInitwallList;
  if (self.hasWall) {
    if (!self.wall.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserPhoto) {
    if (!self.userPhoto.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInituserPhotoList = YES;
   [self.userPhotoList enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserPhotoList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserPhotoList) return isInituserPhotoList;
  __block BOOL isInituserList = YES;
   [self.userList enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserList) return isInituserList;
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasOpus) {
    if (!self.opus.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitopusList = YES;
   [self.opusList enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitopusList = NO;
      *stop = YES;
    }
  }];
  if (!isInitopusList) return isInitopusList;
  if (self.hasSongs) {
    if (!self.songs.isInitialized) {
      return NO;
    }
  }
  if (self.hasGuessRank) {
    if (!self.guessRank.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitguessRankList = YES;
   [self.guessRankList enumerateObjectsUsingBlock:^(PBGuessRank *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitguessRankList = NO;
      *stop = YES;
    }
  }];
  if (!isInitguessRankList) return isInitguessRankList;
  if (self.hasGuessContest) {
    if (!self.guessContest.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitguessContestList = YES;
   [self.guessContestList enumerateObjectsUsingBlock:^(PBGuessContest *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitguessContestList = NO;
      *stop = YES;
    }
  }];
  if (!isInitguessContestList) return isInitguessContestList;
  if (self.hasGroup) {
    if (!self.group.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitgroupList = YES;
   [self.groupList enumerateObjectsUsingBlock:^(PBGroup *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupList) return isInitgroupList;
  __block BOOL isInitgroupMemberList = YES;
   [self.groupMemberList enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupMemberList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupMemberList) return isInitgroupMemberList;
  __block BOOL isInitnoticeList = YES;
   [self.noticeList enumerateObjectsUsingBlock:^(PBGroupNotice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitnoticeList = NO;
      *stop = YES;
    }
  }];
  if (!isInitnoticeList) return isInitnoticeList;
  __block BOOL isInitbadges = YES;
   [self.badges enumerateObjectsUsingBlock:^(PBIntKeyIntValue *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbadges = NO;
      *stop = YES;
    }
  }];
  if (!isInitbadges) return isInitbadges;
  __block BOOL isInitgroupRole = YES;
   [self.groupRole enumerateObjectsUsingBlock:^(PBGroupUserRole *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupRole = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupRole) return isInitgroupRole;
  if (self.hasUserTutorial) {
    if (!self.userTutorial.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInituserTutorials = YES;
   [self.userTutorials enumerateObjectsUsingBlock:^(PBUserTutorial *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserTutorials = NO;
      *stop = YES;
    }
  }];
  if (!isInituserTutorials) return isInituserTutorials;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeInt32:1 value:self.resultCode];
  }
  if (self.hasTotalCount) {
    [output writeInt32:2 value:self.totalCount];
  }
  if (self.hasVersion) {
    [output writeInt32:3 value:self.version];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDraw *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:21 value:element];
  }];
  [self.messageArray enumerateObjectsUsingBlock:^(PBMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:32 value:element];
  }];
  [self.messageStatArray enumerateObjectsUsingBlock:^(PBMessageStat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:33 value:element];
  }];
  [self.feedArray enumerateObjectsUsingBlock:^(PBFeed *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:41 value:element];
  }];
  [self.contestListArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:42 value:element];
  }];
  if (self.hasContest) {
    [output writeMessage:43 value:self.contest];
  }
  [self.bbsBoardArray enumerateObjectsUsingBlock:^(PBBBSBoard *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:51 value:element];
  }];
  [self.bbsPostArray enumerateObjectsUsingBlock:^(PBBBSPost *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:52 value:element];
  }];
  [self.bbsActionArray enumerateObjectsUsingBlock:^(PBBBSAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:53 value:element];
  }];
  if (self.hasBbsDrawData) {
    [output writeMessage:54 value:self.bbsDrawData];
  }
  [self.bbsPrivilegeListArray enumerateObjectsUsingBlock:^(PBBBSPrivilege *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:55 value:element];
  }];
  [self.bbsUserListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:56 value:element];
  }];
  [self.wallListArray enumerateObjectsUsingBlock:^(PBWall *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:80 value:element];
  }];
  if (self.hasWall) {
    [output writeMessage:81 value:self.wall];
  }
  if (self.hasUserPhoto) {
    [output writeMessage:82 value:self.userPhoto];
  }
  [self.userPhotoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:83 value:element];
  }];
  [self.userListArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:84 value:element];
  }];
  if (self.hasUser) {
    [output writeMessage:85 value:self.user];
  }
  if (self.hasUserRelation) {
    [output writeInt32:86 value:self.userRelation];
  }
  if (self.hasOpus) {
    [output writeMessage:87 value:self.opus];
  }
  [self.opusListArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:88 value:element];
  }];
  [self.idListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:90 value:element];
  }];
  if (self.hasSongs) {
    [output writeMessage:101 value:self.songs];
  }
  if (self.hasGuessRank) {
    [output writeMessage:120 value:self.guessRank];
  }
  [self.guessRankListArray enumerateObjectsUsingBlock:^(PBGuessRank *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:121 value:element];
  }];
  if (self.hasGuessContest) {
    [output writeMessage:122 value:self.guessContest];
  }
  [self.guessContestListArray enumerateObjectsUsingBlock:^(PBGuessContest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:123 value:element];
  }];
  if (self.hasGroup) {
    [output writeMessage:150 value:self.group];
  }
  [self.groupListArray enumerateObjectsUsingBlock:^(PBGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:151 value:element];
  }];
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:152 value:element];
  }];
  [self.noticeListArray enumerateObjectsUsingBlock:^(PBGroupNotice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:153 value:element];
  }];
  [self.badgesArray enumerateObjectsUsingBlock:^(PBIntKeyIntValue *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:155 value:element];
  }];
  if (self.hasUrl) {
    [output writeString:156 value:self.url];
  }
  [self.groupRoleArray enumerateObjectsUsingBlock:^(PBGroupUserRole *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:157 value:element];
  }];
  if (self.hasUserTutorial) {
    [output writeMessage:160 value:self.userTutorial];
  }
  [self.userTutorialsArray enumerateObjectsUsingBlock:^(PBUserTutorial *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:161 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeInt32Size(1, self.resultCode);
  }
  if (self.hasTotalCount) {
    size_ += computeInt32Size(2, self.totalCount);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(3, self.version);
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDraw *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(21, element);
  }];
  [self.messageArray enumerateObjectsUsingBlock:^(PBMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(32, element);
  }];
  [self.messageStatArray enumerateObjectsUsingBlock:^(PBMessageStat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(33, element);
  }];
  [self.feedArray enumerateObjectsUsingBlock:^(PBFeed *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(41, element);
  }];
  [self.contestListArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(42, element);
  }];
  if (self.hasContest) {
    size_ += computeMessageSize(43, self.contest);
  }
  [self.bbsBoardArray enumerateObjectsUsingBlock:^(PBBBSBoard *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(51, element);
  }];
  [self.bbsPostArray enumerateObjectsUsingBlock:^(PBBBSPost *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(52, element);
  }];
  [self.bbsActionArray enumerateObjectsUsingBlock:^(PBBBSAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(53, element);
  }];
  if (self.hasBbsDrawData) {
    size_ += computeMessageSize(54, self.bbsDrawData);
  }
  [self.bbsPrivilegeListArray enumerateObjectsUsingBlock:^(PBBBSPrivilege *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(55, element);
  }];
  [self.bbsUserListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(56, element);
  }];
  [self.wallListArray enumerateObjectsUsingBlock:^(PBWall *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(80, element);
  }];
  if (self.hasWall) {
    size_ += computeMessageSize(81, self.wall);
  }
  if (self.hasUserPhoto) {
    size_ += computeMessageSize(82, self.userPhoto);
  }
  [self.userPhotoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(83, element);
  }];
  [self.userListArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(84, element);
  }];
  if (self.hasUser) {
    size_ += computeMessageSize(85, self.user);
  }
  if (self.hasUserRelation) {
    size_ += computeInt32Size(86, self.userRelation);
  }
  if (self.hasOpus) {
    size_ += computeMessageSize(87, self.opus);
  }
  [self.opusListArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(88, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idListArray.count;
    [self.idListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasSongs) {
    size_ += computeMessageSize(101, self.songs);
  }
  if (self.hasGuessRank) {
    size_ += computeMessageSize(120, self.guessRank);
  }
  [self.guessRankListArray enumerateObjectsUsingBlock:^(PBGuessRank *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(121, element);
  }];
  if (self.hasGuessContest) {
    size_ += computeMessageSize(122, self.guessContest);
  }
  [self.guessContestListArray enumerateObjectsUsingBlock:^(PBGuessContest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(123, element);
  }];
  if (self.hasGroup) {
    size_ += computeMessageSize(150, self.group);
  }
  [self.groupListArray enumerateObjectsUsingBlock:^(PBGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(151, element);
  }];
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(152, element);
  }];
  [self.noticeListArray enumerateObjectsUsingBlock:^(PBGroupNotice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(153, element);
  }];
  [self.badgesArray enumerateObjectsUsingBlock:^(PBIntKeyIntValue *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(155, element);
  }];
  if (self.hasUrl) {
    size_ += computeStringSize(156, self.url);
  }
  [self.groupRoleArray enumerateObjectsUsingBlock:^(PBGroupUserRole *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(157, element);
  }];
  if (self.hasUserTutorial) {
    size_ += computeMessageSize(160, self.userTutorial);
  }
  [self.userTutorialsArray enumerateObjectsUsingBlock:^(PBUserTutorial *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(161, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DataQueryResponse*) parseFromData:(NSData*) data {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromData:data] build];
}
+ (DataQueryResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DataQueryResponse*) parseFromInputStream:(NSInputStream*) input {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromInputStream:input] build];
}
+ (DataQueryResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataQueryResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromCodedInputStream:input] build];
}
+ (DataQueryResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataQueryResponseBuilder*) builder {
  return [[DataQueryResponseBuilder alloc] init];
}
+ (DataQueryResponseBuilder*) builderWithPrototype:(DataQueryResponse*) prototype {
  return [[DataQueryResponse builder] mergeFrom:prototype];
}
- (DataQueryResponseBuilder*) builder {
  return [DataQueryResponse builder];
}
- (DataQueryResponseBuilder*) toBuilder {
  return [DataQueryResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithInteger:self.totalCount]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDraw *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.messageArray enumerateObjectsUsingBlock:^(PBMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"message"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.messageStatArray enumerateObjectsUsingBlock:^(PBMessageStat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageStat"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.feedArray enumerateObjectsUsingBlock:^(PBFeed *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"feed"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.contestListArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contestList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasContest) {
    [output appendFormat:@"%@%@ {\n", indent, @"contest"];
    [self.contest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.bbsBoardArray enumerateObjectsUsingBlock:^(PBBBSBoard *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bbsBoard"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.bbsPostArray enumerateObjectsUsingBlock:^(PBBBSPost *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bbsPost"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.bbsActionArray enumerateObjectsUsingBlock:^(PBBBSAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bbsAction"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBbsDrawData) {
    [output appendFormat:@"%@%@ {\n", indent, @"bbsDrawData"];
    [self.bbsDrawData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.bbsPrivilegeListArray enumerateObjectsUsingBlock:^(PBBBSPrivilege *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bbsPrivilegeList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.bbsUserListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bbsUserList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.wallListArray enumerateObjectsUsingBlock:^(PBWall *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"wallList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasWall) {
    [output appendFormat:@"%@%@ {\n", indent, @"wall"];
    [self.wall writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserPhoto) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPhoto"];
    [self.userPhoto writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.userPhotoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPhotoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userListArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserRelation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userRelation", [NSNumber numberWithInteger:self.userRelation]];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@ {\n", indent, @"opus"];
    [self.opus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.opusListArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"opusList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.idListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idList", obj];
  }];
  if (self.hasSongs) {
    [output appendFormat:@"%@%@ {\n", indent, @"songs"];
    [self.songs writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGuessRank) {
    [output appendFormat:@"%@%@ {\n", indent, @"guessRank"];
    [self.guessRank writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.guessRankListArray enumerateObjectsUsingBlock:^(PBGuessRank *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"guessRankList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGuessContest) {
    [output appendFormat:@"%@%@ {\n", indent, @"guessContest"];
    [self.guessContest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.guessContestListArray enumerateObjectsUsingBlock:^(PBGuessContest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"guessContestList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"group"];
    [self.group writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.groupListArray enumerateObjectsUsingBlock:^(PBGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupMemberList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.noticeListArray enumerateObjectsUsingBlock:^(PBGroupNotice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"noticeList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.badgesArray enumerateObjectsUsingBlock:^(PBIntKeyIntValue *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"badges"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.groupRoleArray enumerateObjectsUsingBlock:^(PBGroupUserRole *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupRole"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserTutorial) {
    [output appendFormat:@"%@%@ {\n", indent, @"userTutorial"];
    [self.userTutorial writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.userTutorialsArray enumerateObjectsUsingBlock:^(PBUserTutorial *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userTutorials"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DataQueryResponse class]]) {
    return NO;
  }
  DataQueryResponse *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || self.totalCount == otherMessage.totalCount) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      [self.drawDataArray isEqualToArray:otherMessage.drawDataArray] &&
      [self.messageArray isEqualToArray:otherMessage.messageArray] &&
      [self.messageStatArray isEqualToArray:otherMessage.messageStatArray] &&
      [self.feedArray isEqualToArray:otherMessage.feedArray] &&
      [self.contestListArray isEqualToArray:otherMessage.contestListArray] &&
      self.hasContest == otherMessage.hasContest &&
      (!self.hasContest || [self.contest isEqual:otherMessage.contest]) &&
      [self.bbsBoardArray isEqualToArray:otherMessage.bbsBoardArray] &&
      [self.bbsPostArray isEqualToArray:otherMessage.bbsPostArray] &&
      [self.bbsActionArray isEqualToArray:otherMessage.bbsActionArray] &&
      self.hasBbsDrawData == otherMessage.hasBbsDrawData &&
      (!self.hasBbsDrawData || [self.bbsDrawData isEqual:otherMessage.bbsDrawData]) &&
      [self.bbsPrivilegeListArray isEqualToArray:otherMessage.bbsPrivilegeListArray] &&
      [self.bbsUserListArray isEqualToArray:otherMessage.bbsUserListArray] &&
      [self.wallListArray isEqualToArray:otherMessage.wallListArray] &&
      self.hasWall == otherMessage.hasWall &&
      (!self.hasWall || [self.wall isEqual:otherMessage.wall]) &&
      self.hasUserPhoto == otherMessage.hasUserPhoto &&
      (!self.hasUserPhoto || [self.userPhoto isEqual:otherMessage.userPhoto]) &&
      [self.userPhotoListArray isEqualToArray:otherMessage.userPhotoListArray] &&
      [self.userListArray isEqualToArray:otherMessage.userListArray] &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasUserRelation == otherMessage.hasUserRelation &&
      (!self.hasUserRelation || self.userRelation == otherMessage.userRelation) &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || [self.opus isEqual:otherMessage.opus]) &&
      [self.opusListArray isEqualToArray:otherMessage.opusListArray] &&
      [self.idListArray isEqualToArray:otherMessage.idListArray] &&
      self.hasSongs == otherMessage.hasSongs &&
      (!self.hasSongs || [self.songs isEqual:otherMessage.songs]) &&
      self.hasGuessRank == otherMessage.hasGuessRank &&
      (!self.hasGuessRank || [self.guessRank isEqual:otherMessage.guessRank]) &&
      [self.guessRankListArray isEqualToArray:otherMessage.guessRankListArray] &&
      self.hasGuessContest == otherMessage.hasGuessContest &&
      (!self.hasGuessContest || [self.guessContest isEqual:otherMessage.guessContest]) &&
      [self.guessContestListArray isEqualToArray:otherMessage.guessContestListArray] &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      [self.groupListArray isEqualToArray:otherMessage.groupListArray] &&
      [self.groupMemberListArray isEqualToArray:otherMessage.groupMemberListArray] &&
      [self.noticeListArray isEqualToArray:otherMessage.noticeListArray] &&
      [self.badgesArray isEqualToArray:otherMessage.badgesArray] &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      [self.groupRoleArray isEqualToArray:otherMessage.groupRoleArray] &&
      self.hasUserTutorial == otherMessage.hasUserTutorial &&
      (!self.hasUserTutorial || [self.userTutorial isEqual:otherMessage.userTutorial]) &&
      [self.userTutorialsArray isEqualToArray:otherMessage.userTutorialsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalCount] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDraw *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.messageArray enumerateObjectsUsingBlock:^(PBMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.messageStatArray enumerateObjectsUsingBlock:^(PBMessageStat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.feedArray enumerateObjectsUsingBlock:^(PBFeed *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.contestListArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasContest) {
    hashCode = hashCode * 31 + [self.contest hash];
  }
  [self.bbsBoardArray enumerateObjectsUsingBlock:^(PBBBSBoard *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.bbsPostArray enumerateObjectsUsingBlock:^(PBBBSPost *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.bbsActionArray enumerateObjectsUsingBlock:^(PBBBSAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBbsDrawData) {
    hashCode = hashCode * 31 + [self.bbsDrawData hash];
  }
  [self.bbsPrivilegeListArray enumerateObjectsUsingBlock:^(PBBBSPrivilege *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.bbsUserListArray enumerateObjectsUsingBlock:^(PBBBSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.wallListArray enumerateObjectsUsingBlock:^(PBWall *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasWall) {
    hashCode = hashCode * 31 + [self.wall hash];
  }
  if (self.hasUserPhoto) {
    hashCode = hashCode * 31 + [self.userPhoto hash];
  }
  [self.userPhotoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userListArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasUserRelation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userRelation] hash];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [self.opus hash];
  }
  [self.opusListArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.idListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSongs) {
    hashCode = hashCode * 31 + [self.songs hash];
  }
  if (self.hasGuessRank) {
    hashCode = hashCode * 31 + [self.guessRank hash];
  }
  [self.guessRankListArray enumerateObjectsUsingBlock:^(PBGuessRank *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGuessContest) {
    hashCode = hashCode * 31 + [self.guessContest hash];
  }
  [self.guessContestListArray enumerateObjectsUsingBlock:^(PBGuessContest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  [self.groupListArray enumerateObjectsUsingBlock:^(PBGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.noticeListArray enumerateObjectsUsingBlock:^(PBGroupNotice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.badgesArray enumerateObjectsUsingBlock:^(PBIntKeyIntValue *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  [self.groupRoleArray enumerateObjectsUsingBlock:^(PBGroupUserRole *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserTutorial) {
    hashCode = hashCode * 31 + [self.userTutorial hash];
  }
  [self.userTutorialsArray enumerateObjectsUsingBlock:^(PBUserTutorial *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DataQueryResponseBuilder()
@property (strong) DataQueryResponse* resultDataQueryResponse;
@end

@implementation DataQueryResponseBuilder
@synthesize resultDataQueryResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDataQueryResponse = [[DataQueryResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDataQueryResponse;
}
- (DataQueryResponseBuilder*) clear {
  self.resultDataQueryResponse = [[DataQueryResponse alloc] init];
  return self;
}
- (DataQueryResponseBuilder*) clone {
  return [DataQueryResponse builderWithPrototype:resultDataQueryResponse];
}
- (DataQueryResponse*) defaultInstance {
  return [DataQueryResponse defaultInstance];
}
- (DataQueryResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DataQueryResponse*) buildPartial {
  DataQueryResponse* returnMe = resultDataQueryResponse;
  self.resultDataQueryResponse = nil;
  return returnMe;
}
- (DataQueryResponseBuilder*) mergeFrom:(DataQueryResponse*) other {
  if (other == [DataQueryResponse defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.drawDataArray.count > 0) {
    if (resultDataQueryResponse.drawDataArray == nil) {
      resultDataQueryResponse.drawDataArray = [[NSMutableArray alloc] initWithArray:other.drawDataArray];
    } else {
      [resultDataQueryResponse.drawDataArray addObjectsFromArray:other.drawDataArray];
    }
  }
  if (other.messageArray.count > 0) {
    if (resultDataQueryResponse.messageArray == nil) {
      resultDataQueryResponse.messageArray = [[NSMutableArray alloc] initWithArray:other.messageArray];
    } else {
      [resultDataQueryResponse.messageArray addObjectsFromArray:other.messageArray];
    }
  }
  if (other.messageStatArray.count > 0) {
    if (resultDataQueryResponse.messageStatArray == nil) {
      resultDataQueryResponse.messageStatArray = [[NSMutableArray alloc] initWithArray:other.messageStatArray];
    } else {
      [resultDataQueryResponse.messageStatArray addObjectsFromArray:other.messageStatArray];
    }
  }
  if (other.feedArray.count > 0) {
    if (resultDataQueryResponse.feedArray == nil) {
      resultDataQueryResponse.feedArray = [[NSMutableArray alloc] initWithArray:other.feedArray];
    } else {
      [resultDataQueryResponse.feedArray addObjectsFromArray:other.feedArray];
    }
  }
  if (other.contestListArray.count > 0) {
    if (resultDataQueryResponse.contestListArray == nil) {
      resultDataQueryResponse.contestListArray = [[NSMutableArray alloc] initWithArray:other.contestListArray];
    } else {
      [resultDataQueryResponse.contestListArray addObjectsFromArray:other.contestListArray];
    }
  }
  if (other.hasContest) {
    [self mergeContest:other.contest];
  }
  if (other.bbsBoardArray.count > 0) {
    if (resultDataQueryResponse.bbsBoardArray == nil) {
      resultDataQueryResponse.bbsBoardArray = [[NSMutableArray alloc] initWithArray:other.bbsBoardArray];
    } else {
      [resultDataQueryResponse.bbsBoardArray addObjectsFromArray:other.bbsBoardArray];
    }
  }
  if (other.bbsPostArray.count > 0) {
    if (resultDataQueryResponse.bbsPostArray == nil) {
      resultDataQueryResponse.bbsPostArray = [[NSMutableArray alloc] initWithArray:other.bbsPostArray];
    } else {
      [resultDataQueryResponse.bbsPostArray addObjectsFromArray:other.bbsPostArray];
    }
  }
  if (other.bbsActionArray.count > 0) {
    if (resultDataQueryResponse.bbsActionArray == nil) {
      resultDataQueryResponse.bbsActionArray = [[NSMutableArray alloc] initWithArray:other.bbsActionArray];
    } else {
      [resultDataQueryResponse.bbsActionArray addObjectsFromArray:other.bbsActionArray];
    }
  }
  if (other.hasBbsDrawData) {
    [self mergeBbsDrawData:other.bbsDrawData];
  }
  if (other.bbsPrivilegeListArray.count > 0) {
    if (resultDataQueryResponse.bbsPrivilegeListArray == nil) {
      resultDataQueryResponse.bbsPrivilegeListArray = [[NSMutableArray alloc] initWithArray:other.bbsPrivilegeListArray];
    } else {
      [resultDataQueryResponse.bbsPrivilegeListArray addObjectsFromArray:other.bbsPrivilegeListArray];
    }
  }
  if (other.bbsUserListArray.count > 0) {
    if (resultDataQueryResponse.bbsUserListArray == nil) {
      resultDataQueryResponse.bbsUserListArray = [[NSMutableArray alloc] initWithArray:other.bbsUserListArray];
    } else {
      [resultDataQueryResponse.bbsUserListArray addObjectsFromArray:other.bbsUserListArray];
    }
  }
  if (other.wallListArray.count > 0) {
    if (resultDataQueryResponse.wallListArray == nil) {
      resultDataQueryResponse.wallListArray = [[NSMutableArray alloc] initWithArray:other.wallListArray];
    } else {
      [resultDataQueryResponse.wallListArray addObjectsFromArray:other.wallListArray];
    }
  }
  if (other.hasWall) {
    [self mergeWall:other.wall];
  }
  if (other.hasUserPhoto) {
    [self mergeUserPhoto:other.userPhoto];
  }
  if (other.userPhotoListArray.count > 0) {
    if (resultDataQueryResponse.userPhotoListArray == nil) {
      resultDataQueryResponse.userPhotoListArray = [[NSMutableArray alloc] initWithArray:other.userPhotoListArray];
    } else {
      [resultDataQueryResponse.userPhotoListArray addObjectsFromArray:other.userPhotoListArray];
    }
  }
  if (other.userListArray.count > 0) {
    if (resultDataQueryResponse.userListArray == nil) {
      resultDataQueryResponse.userListArray = [[NSMutableArray alloc] initWithArray:other.userListArray];
    } else {
      [resultDataQueryResponse.userListArray addObjectsFromArray:other.userListArray];
    }
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasUserRelation) {
    [self setUserRelation:other.userRelation];
  }
  if (other.hasOpus) {
    [self mergeOpus:other.opus];
  }
  if (other.opusListArray.count > 0) {
    if (resultDataQueryResponse.opusListArray == nil) {
      resultDataQueryResponse.opusListArray = [[NSMutableArray alloc] initWithArray:other.opusListArray];
    } else {
      [resultDataQueryResponse.opusListArray addObjectsFromArray:other.opusListArray];
    }
  }
  if (other.idListArray.count > 0) {
    if (resultDataQueryResponse.idListArray == nil) {
      resultDataQueryResponse.idListArray = [[NSMutableArray alloc] initWithArray:other.idListArray];
    } else {
      [resultDataQueryResponse.idListArray addObjectsFromArray:other.idListArray];
    }
  }
  if (other.hasSongs) {
    [self mergeSongs:other.songs];
  }
  if (other.hasGuessRank) {
    [self mergeGuessRank:other.guessRank];
  }
  if (other.guessRankListArray.count > 0) {
    if (resultDataQueryResponse.guessRankListArray == nil) {
      resultDataQueryResponse.guessRankListArray = [[NSMutableArray alloc] initWithArray:other.guessRankListArray];
    } else {
      [resultDataQueryResponse.guessRankListArray addObjectsFromArray:other.guessRankListArray];
    }
  }
  if (other.hasGuessContest) {
    [self mergeGuessContest:other.guessContest];
  }
  if (other.guessContestListArray.count > 0) {
    if (resultDataQueryResponse.guessContestListArray == nil) {
      resultDataQueryResponse.guessContestListArray = [[NSMutableArray alloc] initWithArray:other.guessContestListArray];
    } else {
      [resultDataQueryResponse.guessContestListArray addObjectsFromArray:other.guessContestListArray];
    }
  }
  if (other.hasGroup) {
    [self mergeGroup:other.group];
  }
  if (other.groupListArray.count > 0) {
    if (resultDataQueryResponse.groupListArray == nil) {
      resultDataQueryResponse.groupListArray = [[NSMutableArray alloc] initWithArray:other.groupListArray];
    } else {
      [resultDataQueryResponse.groupListArray addObjectsFromArray:other.groupListArray];
    }
  }
  if (other.groupMemberListArray.count > 0) {
    if (resultDataQueryResponse.groupMemberListArray == nil) {
      resultDataQueryResponse.groupMemberListArray = [[NSMutableArray alloc] initWithArray:other.groupMemberListArray];
    } else {
      [resultDataQueryResponse.groupMemberListArray addObjectsFromArray:other.groupMemberListArray];
    }
  }
  if (other.noticeListArray.count > 0) {
    if (resultDataQueryResponse.noticeListArray == nil) {
      resultDataQueryResponse.noticeListArray = [[NSMutableArray alloc] initWithArray:other.noticeListArray];
    } else {
      [resultDataQueryResponse.noticeListArray addObjectsFromArray:other.noticeListArray];
    }
  }
  if (other.badgesArray.count > 0) {
    if (resultDataQueryResponse.badgesArray == nil) {
      resultDataQueryResponse.badgesArray = [[NSMutableArray alloc] initWithArray:other.badgesArray];
    } else {
      [resultDataQueryResponse.badgesArray addObjectsFromArray:other.badgesArray];
    }
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.groupRoleArray.count > 0) {
    if (resultDataQueryResponse.groupRoleArray == nil) {
      resultDataQueryResponse.groupRoleArray = [[NSMutableArray alloc] initWithArray:other.groupRoleArray];
    } else {
      [resultDataQueryResponse.groupRoleArray addObjectsFromArray:other.groupRoleArray];
    }
  }
  if (other.hasUserTutorial) {
    [self mergeUserTutorial:other.userTutorial];
  }
  if (other.userTutorialsArray.count > 0) {
    if (resultDataQueryResponse.userTutorialsArray == nil) {
      resultDataQueryResponse.userTutorialsArray = [[NSMutableArray alloc] initWithArray:other.userTutorialsArray];
    } else {
      [resultDataQueryResponse.userTutorialsArray addObjectsFromArray:other.userTutorialsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DataQueryResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DataQueryResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readInt32]];
        break;
      }
      case 16: {
        [self setTotalCount:[input readInt32]];
        break;
      }
      case 24: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 170: {
        PBDrawBuilder* subBuilder = [PBDraw builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        PBMessageBuilder* subBuilder = [PBMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMessage:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        PBMessageStatBuilder* subBuilder = [PBMessageStat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMessageStat:[subBuilder buildPartial]];
        break;
      }
      case 330: {
        PBFeedBuilder* subBuilder = [PBFeed builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeed:[subBuilder buildPartial]];
        break;
      }
      case 338: {
        PBContestBuilder* subBuilder = [PBContest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContestList:[subBuilder buildPartial]];
        break;
      }
      case 346: {
        PBContestBuilder* subBuilder = [PBContest builder];
        if (self.hasContest) {
          [subBuilder mergeFrom:self.contest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContest:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        PBBBSBoardBuilder* subBuilder = [PBBBSBoard builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsBoard:[subBuilder buildPartial]];
        break;
      }
      case 418: {
        PBBBSPostBuilder* subBuilder = [PBBBSPost builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsPost:[subBuilder buildPartial]];
        break;
      }
      case 426: {
        PBBBSActionBuilder* subBuilder = [PBBBSAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsAction:[subBuilder buildPartial]];
        break;
      }
      case 434: {
        PBBBSDrawBuilder* subBuilder = [PBBBSDraw builder];
        if (self.hasBbsDrawData) {
          [subBuilder mergeFrom:self.bbsDrawData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBbsDrawData:[subBuilder buildPartial]];
        break;
      }
      case 442: {
        PBBBSPrivilegeBuilder* subBuilder = [PBBBSPrivilege builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsPrivilegeList:[subBuilder buildPartial]];
        break;
      }
      case 450: {
        PBBBSUserBuilder* subBuilder = [PBBBSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsUserList:[subBuilder buildPartial]];
        break;
      }
      case 642: {
        PBWallBuilder* subBuilder = [PBWall builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWallList:[subBuilder buildPartial]];
        break;
      }
      case 650: {
        PBWallBuilder* subBuilder = [PBWall builder];
        if (self.hasWall) {
          [subBuilder mergeFrom:self.wall];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWall:[subBuilder buildPartial]];
        break;
      }
      case 658: {
        PBUserPhotoBuilder* subBuilder = [PBUserPhoto builder];
        if (self.hasUserPhoto) {
          [subBuilder mergeFrom:self.userPhoto];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserPhoto:[subBuilder buildPartial]];
        break;
      }
      case 666: {
        PBUserPhotoBuilder* subBuilder = [PBUserPhoto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserPhotoList:[subBuilder buildPartial]];
        break;
      }
      case 674: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserList:[subBuilder buildPartial]];
        break;
      }
      case 682: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 688: {
        [self setUserRelation:[input readInt32]];
        break;
      }
      case 698: {
        PBOpusBuilder* subBuilder = [PBOpus builder];
        if (self.hasOpus) {
          [subBuilder mergeFrom:self.opus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpus:[subBuilder buildPartial]];
        break;
      }
      case 706: {
        PBOpusBuilder* subBuilder = [PBOpus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpusList:[subBuilder buildPartial]];
        break;
      }
      case 722: {
        [self addIdList:[input readString]];
        break;
      }
      case 810: {
        PBSongListBuilder* subBuilder = [PBSongList builder];
        if (self.hasSongs) {
          [subBuilder mergeFrom:self.songs];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSongs:[subBuilder buildPartial]];
        break;
      }
      case 962: {
        PBGuessRankBuilder* subBuilder = [PBGuessRank builder];
        if (self.hasGuessRank) {
          [subBuilder mergeFrom:self.guessRank];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGuessRank:[subBuilder buildPartial]];
        break;
      }
      case 970: {
        PBGuessRankBuilder* subBuilder = [PBGuessRank builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGuessRankList:[subBuilder buildPartial]];
        break;
      }
      case 978: {
        PBGuessContestBuilder* subBuilder = [PBGuessContest builder];
        if (self.hasGuessContest) {
          [subBuilder mergeFrom:self.guessContest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGuessContest:[subBuilder buildPartial]];
        break;
      }
      case 986: {
        PBGuessContestBuilder* subBuilder = [PBGuessContest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGuessContestList:[subBuilder buildPartial]];
        break;
      }
      case 1202: {
        PBGroupBuilder* subBuilder = [PBGroup builder];
        if (self.hasGroup) {
          [subBuilder mergeFrom:self.group];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGroup:[subBuilder buildPartial]];
        break;
      }
      case 1210: {
        PBGroupBuilder* subBuilder = [PBGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupList:[subBuilder buildPartial]];
        break;
      }
      case 1218: {
        PBGroupUsersByTitleBuilder* subBuilder = [PBGroupUsersByTitle builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupMemberList:[subBuilder buildPartial]];
        break;
      }
      case 1226: {
        PBGroupNoticeBuilder* subBuilder = [PBGroupNotice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNoticeList:[subBuilder buildPartial]];
        break;
      }
      case 1242: {
        PBIntKeyIntValueBuilder* subBuilder = [PBIntKeyIntValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBadges:[subBuilder buildPartial]];
        break;
      }
      case 1250: {
        [self setUrl:[input readString]];
        break;
      }
      case 1258: {
        PBGroupUserRoleBuilder* subBuilder = [PBGroupUserRole builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupRole:[subBuilder buildPartial]];
        break;
      }
      case 1282: {
        PBUserTutorialBuilder* subBuilder = [PBUserTutorial builder];
        if (self.hasUserTutorial) {
          [subBuilder mergeFrom:self.userTutorial];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserTutorial:[subBuilder buildPartial]];
        break;
      }
      case 1290: {
        PBUserTutorialBuilder* subBuilder = [PBUserTutorial builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserTutorials:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultDataQueryResponse.hasResultCode;
}
- (SInt32) resultCode {
  return resultDataQueryResponse.resultCode;
}
- (DataQueryResponseBuilder*) setResultCode:(SInt32) value {
  resultDataQueryResponse.hasResultCode = YES;
  resultDataQueryResponse.resultCode = value;
  return self;
}
- (DataQueryResponseBuilder*) clearResultCode {
  resultDataQueryResponse.hasResultCode = NO;
  resultDataQueryResponse.resultCode = 0;
  return self;
}
- (BOOL) hasTotalCount {
  return resultDataQueryResponse.hasTotalCount;
}
- (SInt32) totalCount {
  return resultDataQueryResponse.totalCount;
}
- (DataQueryResponseBuilder*) setTotalCount:(SInt32) value {
  resultDataQueryResponse.hasTotalCount = YES;
  resultDataQueryResponse.totalCount = value;
  return self;
}
- (DataQueryResponseBuilder*) clearTotalCount {
  resultDataQueryResponse.hasTotalCount = NO;
  resultDataQueryResponse.totalCount = 0;
  return self;
}
- (BOOL) hasVersion {
  return resultDataQueryResponse.hasVersion;
}
- (SInt32) version {
  return resultDataQueryResponse.version;
}
- (DataQueryResponseBuilder*) setVersion:(SInt32) value {
  resultDataQueryResponse.hasVersion = YES;
  resultDataQueryResponse.version = value;
  return self;
}
- (DataQueryResponseBuilder*) clearVersion {
  resultDataQueryResponse.hasVersion = NO;
  resultDataQueryResponse.version = 0;
  return self;
}
- (NSMutableArray *)drawData {
  return resultDataQueryResponse.drawDataArray;
}
- (PBDraw*)drawDataAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse drawDataAtIndex:index];
}
- (DataQueryResponseBuilder *)addDrawData:(PBDraw*)value {
  if (resultDataQueryResponse.drawDataArray == nil) {
    resultDataQueryResponse.drawDataArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.drawDataArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setDrawDataArray:(NSArray *)array {
  resultDataQueryResponse.drawDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearDrawData {
  resultDataQueryResponse.drawDataArray = nil;
  return self;
}
- (NSMutableArray *)message {
  return resultDataQueryResponse.messageArray;
}
- (PBMessage*)messageAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse messageAtIndex:index];
}
- (DataQueryResponseBuilder *)addMessage:(PBMessage*)value {
  if (resultDataQueryResponse.messageArray == nil) {
    resultDataQueryResponse.messageArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.messageArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setMessageArray:(NSArray *)array {
  resultDataQueryResponse.messageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearMessage {
  resultDataQueryResponse.messageArray = nil;
  return self;
}
- (NSMutableArray *)messageStat {
  return resultDataQueryResponse.messageStatArray;
}
- (PBMessageStat*)messageStatAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse messageStatAtIndex:index];
}
- (DataQueryResponseBuilder *)addMessageStat:(PBMessageStat*)value {
  if (resultDataQueryResponse.messageStatArray == nil) {
    resultDataQueryResponse.messageStatArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.messageStatArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setMessageStatArray:(NSArray *)array {
  resultDataQueryResponse.messageStatArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearMessageStat {
  resultDataQueryResponse.messageStatArray = nil;
  return self;
}
- (NSMutableArray *)feed {
  return resultDataQueryResponse.feedArray;
}
- (PBFeed*)feedAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse feedAtIndex:index];
}
- (DataQueryResponseBuilder *)addFeed:(PBFeed*)value {
  if (resultDataQueryResponse.feedArray == nil) {
    resultDataQueryResponse.feedArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.feedArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setFeedArray:(NSArray *)array {
  resultDataQueryResponse.feedArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearFeed {
  resultDataQueryResponse.feedArray = nil;
  return self;
}
- (NSMutableArray *)contestList {
  return resultDataQueryResponse.contestListArray;
}
- (PBContest*)contestListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse contestListAtIndex:index];
}
- (DataQueryResponseBuilder *)addContestList:(PBContest*)value {
  if (resultDataQueryResponse.contestListArray == nil) {
    resultDataQueryResponse.contestListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.contestListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setContestListArray:(NSArray *)array {
  resultDataQueryResponse.contestListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearContestList {
  resultDataQueryResponse.contestListArray = nil;
  return self;
}
- (BOOL) hasContest {
  return resultDataQueryResponse.hasContest;
}
- (PBContest*) contest {
  return resultDataQueryResponse.contest;
}
- (DataQueryResponseBuilder*) setContest:(PBContest*) value {
  resultDataQueryResponse.hasContest = YES;
  resultDataQueryResponse.contest = value;
  return self;
}
- (DataQueryResponseBuilder*) setContestBuilder:(PBContestBuilder*) builderForValue {
  return [self setContest:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeContest:(PBContest*) value {
  if (resultDataQueryResponse.hasContest &&
      resultDataQueryResponse.contest != [PBContest defaultInstance]) {
    resultDataQueryResponse.contest =
      [[[PBContest builderWithPrototype:resultDataQueryResponse.contest] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.contest = value;
  }
  resultDataQueryResponse.hasContest = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearContest {
  resultDataQueryResponse.hasContest = NO;
  resultDataQueryResponse.contest = [PBContest defaultInstance];
  return self;
}
- (NSMutableArray *)bbsBoard {
  return resultDataQueryResponse.bbsBoardArray;
}
- (PBBBSBoard*)bbsBoardAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse bbsBoardAtIndex:index];
}
- (DataQueryResponseBuilder *)addBbsBoard:(PBBBSBoard*)value {
  if (resultDataQueryResponse.bbsBoardArray == nil) {
    resultDataQueryResponse.bbsBoardArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.bbsBoardArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setBbsBoardArray:(NSArray *)array {
  resultDataQueryResponse.bbsBoardArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearBbsBoard {
  resultDataQueryResponse.bbsBoardArray = nil;
  return self;
}
- (NSMutableArray *)bbsPost {
  return resultDataQueryResponse.bbsPostArray;
}
- (PBBBSPost*)bbsPostAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse bbsPostAtIndex:index];
}
- (DataQueryResponseBuilder *)addBbsPost:(PBBBSPost*)value {
  if (resultDataQueryResponse.bbsPostArray == nil) {
    resultDataQueryResponse.bbsPostArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.bbsPostArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setBbsPostArray:(NSArray *)array {
  resultDataQueryResponse.bbsPostArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearBbsPost {
  resultDataQueryResponse.bbsPostArray = nil;
  return self;
}
- (NSMutableArray *)bbsAction {
  return resultDataQueryResponse.bbsActionArray;
}
- (PBBBSAction*)bbsActionAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse bbsActionAtIndex:index];
}
- (DataQueryResponseBuilder *)addBbsAction:(PBBBSAction*)value {
  if (resultDataQueryResponse.bbsActionArray == nil) {
    resultDataQueryResponse.bbsActionArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.bbsActionArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setBbsActionArray:(NSArray *)array {
  resultDataQueryResponse.bbsActionArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearBbsAction {
  resultDataQueryResponse.bbsActionArray = nil;
  return self;
}
- (BOOL) hasBbsDrawData {
  return resultDataQueryResponse.hasBbsDrawData;
}
- (PBBBSDraw*) bbsDrawData {
  return resultDataQueryResponse.bbsDrawData;
}
- (DataQueryResponseBuilder*) setBbsDrawData:(PBBBSDraw*) value {
  resultDataQueryResponse.hasBbsDrawData = YES;
  resultDataQueryResponse.bbsDrawData = value;
  return self;
}
- (DataQueryResponseBuilder*) setBbsDrawDataBuilder:(PBBBSDrawBuilder*) builderForValue {
  return [self setBbsDrawData:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeBbsDrawData:(PBBBSDraw*) value {
  if (resultDataQueryResponse.hasBbsDrawData &&
      resultDataQueryResponse.bbsDrawData != [PBBBSDraw defaultInstance]) {
    resultDataQueryResponse.bbsDrawData =
      [[[PBBBSDraw builderWithPrototype:resultDataQueryResponse.bbsDrawData] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.bbsDrawData = value;
  }
  resultDataQueryResponse.hasBbsDrawData = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearBbsDrawData {
  resultDataQueryResponse.hasBbsDrawData = NO;
  resultDataQueryResponse.bbsDrawData = [PBBBSDraw defaultInstance];
  return self;
}
- (NSMutableArray *)bbsPrivilegeList {
  return resultDataQueryResponse.bbsPrivilegeListArray;
}
- (PBBBSPrivilege*)bbsPrivilegeListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse bbsPrivilegeListAtIndex:index];
}
- (DataQueryResponseBuilder *)addBbsPrivilegeList:(PBBBSPrivilege*)value {
  if (resultDataQueryResponse.bbsPrivilegeListArray == nil) {
    resultDataQueryResponse.bbsPrivilegeListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.bbsPrivilegeListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setBbsPrivilegeListArray:(NSArray *)array {
  resultDataQueryResponse.bbsPrivilegeListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearBbsPrivilegeList {
  resultDataQueryResponse.bbsPrivilegeListArray = nil;
  return self;
}
- (NSMutableArray *)bbsUserList {
  return resultDataQueryResponse.bbsUserListArray;
}
- (PBBBSUser*)bbsUserListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse bbsUserListAtIndex:index];
}
- (DataQueryResponseBuilder *)addBbsUserList:(PBBBSUser*)value {
  if (resultDataQueryResponse.bbsUserListArray == nil) {
    resultDataQueryResponse.bbsUserListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.bbsUserListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setBbsUserListArray:(NSArray *)array {
  resultDataQueryResponse.bbsUserListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearBbsUserList {
  resultDataQueryResponse.bbsUserListArray = nil;
  return self;
}
- (NSMutableArray *)wallList {
  return resultDataQueryResponse.wallListArray;
}
- (PBWall*)wallListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse wallListAtIndex:index];
}
- (DataQueryResponseBuilder *)addWallList:(PBWall*)value {
  if (resultDataQueryResponse.wallListArray == nil) {
    resultDataQueryResponse.wallListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.wallListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setWallListArray:(NSArray *)array {
  resultDataQueryResponse.wallListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearWallList {
  resultDataQueryResponse.wallListArray = nil;
  return self;
}
- (BOOL) hasWall {
  return resultDataQueryResponse.hasWall;
}
- (PBWall*) wall {
  return resultDataQueryResponse.wall;
}
- (DataQueryResponseBuilder*) setWall:(PBWall*) value {
  resultDataQueryResponse.hasWall = YES;
  resultDataQueryResponse.wall = value;
  return self;
}
- (DataQueryResponseBuilder*) setWallBuilder:(PBWallBuilder*) builderForValue {
  return [self setWall:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeWall:(PBWall*) value {
  if (resultDataQueryResponse.hasWall &&
      resultDataQueryResponse.wall != [PBWall defaultInstance]) {
    resultDataQueryResponse.wall =
      [[[PBWall builderWithPrototype:resultDataQueryResponse.wall] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.wall = value;
  }
  resultDataQueryResponse.hasWall = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearWall {
  resultDataQueryResponse.hasWall = NO;
  resultDataQueryResponse.wall = [PBWall defaultInstance];
  return self;
}
- (BOOL) hasUserPhoto {
  return resultDataQueryResponse.hasUserPhoto;
}
- (PBUserPhoto*) userPhoto {
  return resultDataQueryResponse.userPhoto;
}
- (DataQueryResponseBuilder*) setUserPhoto:(PBUserPhoto*) value {
  resultDataQueryResponse.hasUserPhoto = YES;
  resultDataQueryResponse.userPhoto = value;
  return self;
}
- (DataQueryResponseBuilder*) setUserPhotoBuilder:(PBUserPhotoBuilder*) builderForValue {
  return [self setUserPhoto:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeUserPhoto:(PBUserPhoto*) value {
  if (resultDataQueryResponse.hasUserPhoto &&
      resultDataQueryResponse.userPhoto != [PBUserPhoto defaultInstance]) {
    resultDataQueryResponse.userPhoto =
      [[[PBUserPhoto builderWithPrototype:resultDataQueryResponse.userPhoto] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.userPhoto = value;
  }
  resultDataQueryResponse.hasUserPhoto = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearUserPhoto {
  resultDataQueryResponse.hasUserPhoto = NO;
  resultDataQueryResponse.userPhoto = [PBUserPhoto defaultInstance];
  return self;
}
- (NSMutableArray *)userPhotoList {
  return resultDataQueryResponse.userPhotoListArray;
}
- (PBUserPhoto*)userPhotoListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse userPhotoListAtIndex:index];
}
- (DataQueryResponseBuilder *)addUserPhotoList:(PBUserPhoto*)value {
  if (resultDataQueryResponse.userPhotoListArray == nil) {
    resultDataQueryResponse.userPhotoListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.userPhotoListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setUserPhotoListArray:(NSArray *)array {
  resultDataQueryResponse.userPhotoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearUserPhotoList {
  resultDataQueryResponse.userPhotoListArray = nil;
  return self;
}
- (NSMutableArray *)userList {
  return resultDataQueryResponse.userListArray;
}
- (PBGameUser*)userListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse userListAtIndex:index];
}
- (DataQueryResponseBuilder *)addUserList:(PBGameUser*)value {
  if (resultDataQueryResponse.userListArray == nil) {
    resultDataQueryResponse.userListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.userListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setUserListArray:(NSArray *)array {
  resultDataQueryResponse.userListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearUserList {
  resultDataQueryResponse.userListArray = nil;
  return self;
}
- (BOOL) hasUser {
  return resultDataQueryResponse.hasUser;
}
- (PBGameUser*) user {
  return resultDataQueryResponse.user;
}
- (DataQueryResponseBuilder*) setUser:(PBGameUser*) value {
  resultDataQueryResponse.hasUser = YES;
  resultDataQueryResponse.user = value;
  return self;
}
- (DataQueryResponseBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeUser:(PBGameUser*) value {
  if (resultDataQueryResponse.hasUser &&
      resultDataQueryResponse.user != [PBGameUser defaultInstance]) {
    resultDataQueryResponse.user =
      [[[PBGameUser builderWithPrototype:resultDataQueryResponse.user] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.user = value;
  }
  resultDataQueryResponse.hasUser = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearUser {
  resultDataQueryResponse.hasUser = NO;
  resultDataQueryResponse.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasUserRelation {
  return resultDataQueryResponse.hasUserRelation;
}
- (SInt32) userRelation {
  return resultDataQueryResponse.userRelation;
}
- (DataQueryResponseBuilder*) setUserRelation:(SInt32) value {
  resultDataQueryResponse.hasUserRelation = YES;
  resultDataQueryResponse.userRelation = value;
  return self;
}
- (DataQueryResponseBuilder*) clearUserRelation {
  resultDataQueryResponse.hasUserRelation = NO;
  resultDataQueryResponse.userRelation = 0;
  return self;
}
- (BOOL) hasOpus {
  return resultDataQueryResponse.hasOpus;
}
- (PBOpus*) opus {
  return resultDataQueryResponse.opus;
}
- (DataQueryResponseBuilder*) setOpus:(PBOpus*) value {
  resultDataQueryResponse.hasOpus = YES;
  resultDataQueryResponse.opus = value;
  return self;
}
- (DataQueryResponseBuilder*) setOpusBuilder:(PBOpusBuilder*) builderForValue {
  return [self setOpus:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeOpus:(PBOpus*) value {
  if (resultDataQueryResponse.hasOpus &&
      resultDataQueryResponse.opus != [PBOpus defaultInstance]) {
    resultDataQueryResponse.opus =
      [[[PBOpus builderWithPrototype:resultDataQueryResponse.opus] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.opus = value;
  }
  resultDataQueryResponse.hasOpus = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearOpus {
  resultDataQueryResponse.hasOpus = NO;
  resultDataQueryResponse.opus = [PBOpus defaultInstance];
  return self;
}
- (NSMutableArray *)opusList {
  return resultDataQueryResponse.opusListArray;
}
- (PBOpus*)opusListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse opusListAtIndex:index];
}
- (DataQueryResponseBuilder *)addOpusList:(PBOpus*)value {
  if (resultDataQueryResponse.opusListArray == nil) {
    resultDataQueryResponse.opusListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.opusListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setOpusListArray:(NSArray *)array {
  resultDataQueryResponse.opusListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearOpusList {
  resultDataQueryResponse.opusListArray = nil;
  return self;
}
- (NSMutableArray *)idList {
  return resultDataQueryResponse.idListArray;
}
- (NSString*)idListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse idListAtIndex:index];
}
- (DataQueryResponseBuilder *)addIdList:(NSString*)value {
  if (resultDataQueryResponse.idListArray == nil) {
    resultDataQueryResponse.idListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.idListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setIdListArray:(NSArray *)array {
  resultDataQueryResponse.idListArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearIdList {
  resultDataQueryResponse.idListArray = nil;
  return self;
}
- (BOOL) hasSongs {
  return resultDataQueryResponse.hasSongs;
}
- (PBSongList*) songs {
  return resultDataQueryResponse.songs;
}
- (DataQueryResponseBuilder*) setSongs:(PBSongList*) value {
  resultDataQueryResponse.hasSongs = YES;
  resultDataQueryResponse.songs = value;
  return self;
}
- (DataQueryResponseBuilder*) setSongsBuilder:(PBSongListBuilder*) builderForValue {
  return [self setSongs:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeSongs:(PBSongList*) value {
  if (resultDataQueryResponse.hasSongs &&
      resultDataQueryResponse.songs != [PBSongList defaultInstance]) {
    resultDataQueryResponse.songs =
      [[[PBSongList builderWithPrototype:resultDataQueryResponse.songs] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.songs = value;
  }
  resultDataQueryResponse.hasSongs = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearSongs {
  resultDataQueryResponse.hasSongs = NO;
  resultDataQueryResponse.songs = [PBSongList defaultInstance];
  return self;
}
- (BOOL) hasGuessRank {
  return resultDataQueryResponse.hasGuessRank;
}
- (PBGuessRank*) guessRank {
  return resultDataQueryResponse.guessRank;
}
- (DataQueryResponseBuilder*) setGuessRank:(PBGuessRank*) value {
  resultDataQueryResponse.hasGuessRank = YES;
  resultDataQueryResponse.guessRank = value;
  return self;
}
- (DataQueryResponseBuilder*) setGuessRankBuilder:(PBGuessRankBuilder*) builderForValue {
  return [self setGuessRank:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeGuessRank:(PBGuessRank*) value {
  if (resultDataQueryResponse.hasGuessRank &&
      resultDataQueryResponse.guessRank != [PBGuessRank defaultInstance]) {
    resultDataQueryResponse.guessRank =
      [[[PBGuessRank builderWithPrototype:resultDataQueryResponse.guessRank] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.guessRank = value;
  }
  resultDataQueryResponse.hasGuessRank = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearGuessRank {
  resultDataQueryResponse.hasGuessRank = NO;
  resultDataQueryResponse.guessRank = [PBGuessRank defaultInstance];
  return self;
}
- (NSMutableArray *)guessRankList {
  return resultDataQueryResponse.guessRankListArray;
}
- (PBGuessRank*)guessRankListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse guessRankListAtIndex:index];
}
- (DataQueryResponseBuilder *)addGuessRankList:(PBGuessRank*)value {
  if (resultDataQueryResponse.guessRankListArray == nil) {
    resultDataQueryResponse.guessRankListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.guessRankListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setGuessRankListArray:(NSArray *)array {
  resultDataQueryResponse.guessRankListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearGuessRankList {
  resultDataQueryResponse.guessRankListArray = nil;
  return self;
}
- (BOOL) hasGuessContest {
  return resultDataQueryResponse.hasGuessContest;
}
- (PBGuessContest*) guessContest {
  return resultDataQueryResponse.guessContest;
}
- (DataQueryResponseBuilder*) setGuessContest:(PBGuessContest*) value {
  resultDataQueryResponse.hasGuessContest = YES;
  resultDataQueryResponse.guessContest = value;
  return self;
}
- (DataQueryResponseBuilder*) setGuessContestBuilder:(PBGuessContestBuilder*) builderForValue {
  return [self setGuessContest:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeGuessContest:(PBGuessContest*) value {
  if (resultDataQueryResponse.hasGuessContest &&
      resultDataQueryResponse.guessContest != [PBGuessContest defaultInstance]) {
    resultDataQueryResponse.guessContest =
      [[[PBGuessContest builderWithPrototype:resultDataQueryResponse.guessContest] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.guessContest = value;
  }
  resultDataQueryResponse.hasGuessContest = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearGuessContest {
  resultDataQueryResponse.hasGuessContest = NO;
  resultDataQueryResponse.guessContest = [PBGuessContest defaultInstance];
  return self;
}
- (NSMutableArray *)guessContestList {
  return resultDataQueryResponse.guessContestListArray;
}
- (PBGuessContest*)guessContestListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse guessContestListAtIndex:index];
}
- (DataQueryResponseBuilder *)addGuessContestList:(PBGuessContest*)value {
  if (resultDataQueryResponse.guessContestListArray == nil) {
    resultDataQueryResponse.guessContestListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.guessContestListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setGuessContestListArray:(NSArray *)array {
  resultDataQueryResponse.guessContestListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearGuessContestList {
  resultDataQueryResponse.guessContestListArray = nil;
  return self;
}
- (BOOL) hasGroup {
  return resultDataQueryResponse.hasGroup;
}
- (PBGroup*) group {
  return resultDataQueryResponse.group;
}
- (DataQueryResponseBuilder*) setGroup:(PBGroup*) value {
  resultDataQueryResponse.hasGroup = YES;
  resultDataQueryResponse.group = value;
  return self;
}
- (DataQueryResponseBuilder*) setGroupBuilder:(PBGroupBuilder*) builderForValue {
  return [self setGroup:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeGroup:(PBGroup*) value {
  if (resultDataQueryResponse.hasGroup &&
      resultDataQueryResponse.group != [PBGroup defaultInstance]) {
    resultDataQueryResponse.group =
      [[[PBGroup builderWithPrototype:resultDataQueryResponse.group] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.group = value;
  }
  resultDataQueryResponse.hasGroup = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearGroup {
  resultDataQueryResponse.hasGroup = NO;
  resultDataQueryResponse.group = [PBGroup defaultInstance];
  return self;
}
- (NSMutableArray *)groupList {
  return resultDataQueryResponse.groupListArray;
}
- (PBGroup*)groupListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse groupListAtIndex:index];
}
- (DataQueryResponseBuilder *)addGroupList:(PBGroup*)value {
  if (resultDataQueryResponse.groupListArray == nil) {
    resultDataQueryResponse.groupListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.groupListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setGroupListArray:(NSArray *)array {
  resultDataQueryResponse.groupListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearGroupList {
  resultDataQueryResponse.groupListArray = nil;
  return self;
}
- (NSMutableArray *)groupMemberList {
  return resultDataQueryResponse.groupMemberListArray;
}
- (PBGroupUsersByTitle*)groupMemberListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse groupMemberListAtIndex:index];
}
- (DataQueryResponseBuilder *)addGroupMemberList:(PBGroupUsersByTitle*)value {
  if (resultDataQueryResponse.groupMemberListArray == nil) {
    resultDataQueryResponse.groupMemberListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.groupMemberListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setGroupMemberListArray:(NSArray *)array {
  resultDataQueryResponse.groupMemberListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearGroupMemberList {
  resultDataQueryResponse.groupMemberListArray = nil;
  return self;
}
- (NSMutableArray *)noticeList {
  return resultDataQueryResponse.noticeListArray;
}
- (PBGroupNotice*)noticeListAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse noticeListAtIndex:index];
}
- (DataQueryResponseBuilder *)addNoticeList:(PBGroupNotice*)value {
  if (resultDataQueryResponse.noticeListArray == nil) {
    resultDataQueryResponse.noticeListArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.noticeListArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setNoticeListArray:(NSArray *)array {
  resultDataQueryResponse.noticeListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearNoticeList {
  resultDataQueryResponse.noticeListArray = nil;
  return self;
}
- (NSMutableArray *)badges {
  return resultDataQueryResponse.badgesArray;
}
- (PBIntKeyIntValue*)badgesAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse badgesAtIndex:index];
}
- (DataQueryResponseBuilder *)addBadges:(PBIntKeyIntValue*)value {
  if (resultDataQueryResponse.badgesArray == nil) {
    resultDataQueryResponse.badgesArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.badgesArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setBadgesArray:(NSArray *)array {
  resultDataQueryResponse.badgesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearBadges {
  resultDataQueryResponse.badgesArray = nil;
  return self;
}
- (BOOL) hasUrl {
  return resultDataQueryResponse.hasUrl;
}
- (NSString*) url {
  return resultDataQueryResponse.url;
}
- (DataQueryResponseBuilder*) setUrl:(NSString*) value {
  resultDataQueryResponse.hasUrl = YES;
  resultDataQueryResponse.url = value;
  return self;
}
- (DataQueryResponseBuilder*) clearUrl {
  resultDataQueryResponse.hasUrl = NO;
  resultDataQueryResponse.url = @"";
  return self;
}
- (NSMutableArray *)groupRole {
  return resultDataQueryResponse.groupRoleArray;
}
- (PBGroupUserRole*)groupRoleAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse groupRoleAtIndex:index];
}
- (DataQueryResponseBuilder *)addGroupRole:(PBGroupUserRole*)value {
  if (resultDataQueryResponse.groupRoleArray == nil) {
    resultDataQueryResponse.groupRoleArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.groupRoleArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setGroupRoleArray:(NSArray *)array {
  resultDataQueryResponse.groupRoleArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearGroupRole {
  resultDataQueryResponse.groupRoleArray = nil;
  return self;
}
- (BOOL) hasUserTutorial {
  return resultDataQueryResponse.hasUserTutorial;
}
- (PBUserTutorial*) userTutorial {
  return resultDataQueryResponse.userTutorial;
}
- (DataQueryResponseBuilder*) setUserTutorial:(PBUserTutorial*) value {
  resultDataQueryResponse.hasUserTutorial = YES;
  resultDataQueryResponse.userTutorial = value;
  return self;
}
- (DataQueryResponseBuilder*) setUserTutorialBuilder:(PBUserTutorialBuilder*) builderForValue {
  return [self setUserTutorial:[builderForValue build]];
}
- (DataQueryResponseBuilder*) mergeUserTutorial:(PBUserTutorial*) value {
  if (resultDataQueryResponse.hasUserTutorial &&
      resultDataQueryResponse.userTutorial != [PBUserTutorial defaultInstance]) {
    resultDataQueryResponse.userTutorial =
      [[[PBUserTutorial builderWithPrototype:resultDataQueryResponse.userTutorial] mergeFrom:value] buildPartial];
  } else {
    resultDataQueryResponse.userTutorial = value;
  }
  resultDataQueryResponse.hasUserTutorial = YES;
  return self;
}
- (DataQueryResponseBuilder*) clearUserTutorial {
  resultDataQueryResponse.hasUserTutorial = NO;
  resultDataQueryResponse.userTutorial = [PBUserTutorial defaultInstance];
  return self;
}
- (NSMutableArray *)userTutorials {
  return resultDataQueryResponse.userTutorialsArray;
}
- (PBUserTutorial*)userTutorialsAtIndex:(NSUInteger)index {
  return [resultDataQueryResponse userTutorialsAtIndex:index];
}
- (DataQueryResponseBuilder *)addUserTutorials:(PBUserTutorial*)value {
  if (resultDataQueryResponse.userTutorialsArray == nil) {
    resultDataQueryResponse.userTutorialsArray = [[NSMutableArray alloc]init];
  }
  [resultDataQueryResponse.userTutorialsArray addObject:value];
  return self;
}
- (DataQueryResponseBuilder *)setUserTutorialsArray:(NSArray *)array {
  resultDataQueryResponse.userTutorialsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (DataQueryResponseBuilder *)clearUserTutorials {
  resultDataQueryResponse.userTutorialsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
