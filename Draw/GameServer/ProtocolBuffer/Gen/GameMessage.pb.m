// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameMessage.pb.h"

@implementation GameMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface JoinGameRequest ()
@property (retain) NSString* userId;
@property (retain) NSString* gameId;
@property int32_t autoNew;
@property (retain) NSString* nickName;
@end

@implementation JoinGameRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasAutoNew {
  return !!hasAutoNew_;
}
- (void) setHasAutoNew:(BOOL) value {
  hasAutoNew_ = !!value;
}
@synthesize autoNew;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (void) dealloc {
  self.userId = nil;
  self.gameId = nil;
  self.nickName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.gameId = @"";
    self.autoNew = 0;
    self.nickName = @"";
  }
  return self;
}
static JoinGameRequest* defaultJoinGameRequestInstance = nil;
+ (void) initialize {
  if (self == [JoinGameRequest class]) {
    defaultJoinGameRequestInstance = [[JoinGameRequest alloc] init];
  }
}
+ (JoinGameRequest*) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (JoinGameRequest*) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasAutoNew) {
    [output writeInt32:3 value:self.autoNew];
  }
  if (self.hasNickName) {
    [output writeString:4 value:self.nickName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasGameId) {
    size += computeStringSize(2, self.gameId);
  }
  if (self.hasAutoNew) {
    size += computeInt32Size(3, self.autoNew);
  }
  if (self.hasNickName) {
    size += computeStringSize(4, self.nickName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (JoinGameRequest*) parseFromData:(NSData*) data {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data] build];
}
+ (JoinGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest_Builder*) builder {
  return [[[JoinGameRequest_Builder alloc] init] autorelease];
}
+ (JoinGameRequest_Builder*) builderWithPrototype:(JoinGameRequest*) prototype {
  return [[JoinGameRequest builder] mergeFrom:prototype];
}
- (JoinGameRequest_Builder*) builder {
  return [JoinGameRequest builder];
}
@end

@interface JoinGameRequest_Builder()
@property (retain) JoinGameRequest* result;
@end

@implementation JoinGameRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[JoinGameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (JoinGameRequest_Builder*) clear {
  self.result = [[[JoinGameRequest alloc] init] autorelease];
  return self;
}
- (JoinGameRequest_Builder*) clone {
  return [JoinGameRequest builderWithPrototype:result];
}
- (JoinGameRequest*) defaultInstance {
  return [JoinGameRequest defaultInstance];
}
- (JoinGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameRequest*) buildPartial {
  JoinGameRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (JoinGameRequest_Builder*) mergeFrom:(JoinGameRequest*) other {
  if (other == [JoinGameRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasAutoNew) {
    [self setAutoNew:other.autoNew];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        [self setAutoNew:[input readInt32]];
        break;
      }
      case 34: {
        [self setNickName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (JoinGameRequest_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (JoinGameRequest_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasAutoNew {
  return result.hasAutoNew;
}
- (int32_t) autoNew {
  return result.autoNew;
}
- (JoinGameRequest_Builder*) setAutoNew:(int32_t) value {
  result.hasAutoNew = YES;
  result.autoNew = value;
  return self;
}
- (JoinGameRequest_Builder*) clearAutoNew {
  result.hasAutoNew = NO;
  result.autoNew = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (JoinGameRequest_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (JoinGameRequest_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
@end

@interface JoinGameResponse ()
@property (retain) PBGameSession* gameSession;
@end

@implementation JoinGameResponse

- (BOOL) hasGameSession {
  return !!hasGameSession_;
}
- (void) setHasGameSession:(BOOL) value {
  hasGameSession_ = !!value;
}
@synthesize gameSession;
- (void) dealloc {
  self.gameSession = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameSession = [PBGameSession defaultInstance];
  }
  return self;
}
static JoinGameResponse* defaultJoinGameResponseInstance = nil;
+ (void) initialize {
  if (self == [JoinGameResponse class]) {
    defaultJoinGameResponseInstance = [[JoinGameResponse alloc] init];
  }
}
+ (JoinGameResponse*) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (JoinGameResponse*) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameSession) {
    return NO;
  }
  if (!self.gameSession.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSession) {
    [output writeMessage:1 value:self.gameSession];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameSession) {
    size += computeMessageSize(1, self.gameSession);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (JoinGameResponse*) parseFromData:(NSData*) data {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data] build];
}
+ (JoinGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse_Builder*) builder {
  return [[[JoinGameResponse_Builder alloc] init] autorelease];
}
+ (JoinGameResponse_Builder*) builderWithPrototype:(JoinGameResponse*) prototype {
  return [[JoinGameResponse builder] mergeFrom:prototype];
}
- (JoinGameResponse_Builder*) builder {
  return [JoinGameResponse builder];
}
@end

@interface JoinGameResponse_Builder()
@property (retain) JoinGameResponse* result;
@end

@implementation JoinGameResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[JoinGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (JoinGameResponse_Builder*) clear {
  self.result = [[[JoinGameResponse alloc] init] autorelease];
  return self;
}
- (JoinGameResponse_Builder*) clone {
  return [JoinGameResponse builderWithPrototype:result];
}
- (JoinGameResponse*) defaultInstance {
  return [JoinGameResponse defaultInstance];
}
- (JoinGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameResponse*) buildPartial {
  JoinGameResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (JoinGameResponse_Builder*) mergeFrom:(JoinGameResponse*) other {
  if (other == [JoinGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasGameSession) {
    [self mergeGameSession:other.gameSession];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        if (self.hasGameSession) {
          [subBuilder mergeFrom:self.gameSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSession:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSession {
  return result.hasGameSession;
}
- (PBGameSession*) gameSession {
  return result.gameSession;
}
- (JoinGameResponse_Builder*) setGameSession:(PBGameSession*) value {
  result.hasGameSession = YES;
  result.gameSession = value;
  return self;
}
- (JoinGameResponse_Builder*) setGameSessionBuilder:(PBGameSession_Builder*) builderForValue {
  return [self setGameSession:[builderForValue build]];
}
- (JoinGameResponse_Builder*) mergeGameSession:(PBGameSession*) value {
  if (result.hasGameSession &&
      result.gameSession != [PBGameSession defaultInstance]) {
    result.gameSession =
      [[[PBGameSession builderWithPrototype:result.gameSession] mergeFrom:value] buildPartial];
  } else {
    result.gameSession = value;
  }
  result.hasGameSession = YES;
  return self;
}
- (JoinGameResponse_Builder*) clearGameSession {
  result.hasGameSession = NO;
  result.gameSession = [PBGameSession defaultInstance];
  return self;
}
@end

@interface StartGameRequest ()
@end

@implementation StartGameRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static StartGameRequest* defaultStartGameRequestInstance = nil;
+ (void) initialize {
  if (self == [StartGameRequest class]) {
    defaultStartGameRequestInstance = [[StartGameRequest alloc] init];
  }
}
+ (StartGameRequest*) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (StartGameRequest*) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartGameRequest*) parseFromData:(NSData*) data {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data] build];
}
+ (StartGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest_Builder*) builder {
  return [[[StartGameRequest_Builder alloc] init] autorelease];
}
+ (StartGameRequest_Builder*) builderWithPrototype:(StartGameRequest*) prototype {
  return [[StartGameRequest builder] mergeFrom:prototype];
}
- (StartGameRequest_Builder*) builder {
  return [StartGameRequest builder];
}
@end

@interface StartGameRequest_Builder()
@property (retain) StartGameRequest* result;
@end

@implementation StartGameRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartGameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartGameRequest_Builder*) clear {
  self.result = [[[StartGameRequest alloc] init] autorelease];
  return self;
}
- (StartGameRequest_Builder*) clone {
  return [StartGameRequest builderWithPrototype:result];
}
- (StartGameRequest*) defaultInstance {
  return [StartGameRequest defaultInstance];
}
- (StartGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameRequest*) buildPartial {
  StartGameRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartGameRequest_Builder*) mergeFrom:(StartGameRequest*) other {
  if (other == [StartGameRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface StartGameResponse ()
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@end

@implementation StartGameResponse

- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (void) dealloc {
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
  }
  return self;
}
static StartGameResponse* defaultStartGameResponseInstance = nil;
+ (void) initialize {
  if (self == [StartGameResponse class]) {
    defaultStartGameResponseInstance = [[StartGameResponse alloc] init];
  }
}
+ (StartGameResponse*) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (StartGameResponse*) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(6, self.nextPlayUserId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartGameResponse*) parseFromData:(NSData*) data {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data] build];
}
+ (StartGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse_Builder*) builder {
  return [[[StartGameResponse_Builder alloc] init] autorelease];
}
+ (StartGameResponse_Builder*) builderWithPrototype:(StartGameResponse*) prototype {
  return [[StartGameResponse builder] mergeFrom:prototype];
}
- (StartGameResponse_Builder*) builder {
  return [StartGameResponse builder];
}
@end

@interface StartGameResponse_Builder()
@property (retain) StartGameResponse* result;
@end

@implementation StartGameResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartGameResponse_Builder*) clear {
  self.result = [[[StartGameResponse alloc] init] autorelease];
  return self;
}
- (StartGameResponse_Builder*) clone {
  return [StartGameResponse builderWithPrototype:result];
}
- (StartGameResponse*) defaultInstance {
  return [StartGameResponse defaultInstance];
}
- (StartGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameResponse*) buildPartial {
  StartGameResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartGameResponse_Builder*) mergeFrom:(StartGameResponse*) other {
  if (other == [StartGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (StartGameResponse_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (StartGameResponse_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (StartGameResponse_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (StartGameResponse_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
@end

@interface GeneralNotification ()
@property (retain) NSString* host;
@property int32_t sessionStatus;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@end

@implementation GeneralNotification

- (BOOL) hasHost {
  return !!hasHost_;
}
- (void) setHasHost:(BOOL) value {
  hasHost_ = !!value;
}
@synthesize host;
- (BOOL) hasSessionStatus {
  return !!hasSessionStatus_;
}
- (void) setHasSessionStatus:(BOOL) value {
  hasSessionStatus_ = !!value;
}
@synthesize sessionStatus;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (void) dealloc {
  self.host = nil;
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.host = @"";
    self.sessionStatus = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
  }
  return self;
}
static GeneralNotification* defaultGeneralNotificationInstance = nil;
+ (void) initialize {
  if (self == [GeneralNotification class]) {
    defaultGeneralNotificationInstance = [[GeneralNotification alloc] init];
  }
}
+ (GeneralNotification*) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (GeneralNotification*) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHost) {
    [output writeString:3 value:self.host];
  }
  if (self.hasSessionStatus) {
    [output writeInt32:4 value:self.sessionStatus];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHost) {
    size += computeStringSize(3, self.host);
  }
  if (self.hasSessionStatus) {
    size += computeInt32Size(4, self.sessionStatus);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(6, self.nextPlayUserId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GeneralNotification*) parseFromData:(NSData*) data {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data] build];
}
+ (GeneralNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification_Builder*) builder {
  return [[[GeneralNotification_Builder alloc] init] autorelease];
}
+ (GeneralNotification_Builder*) builderWithPrototype:(GeneralNotification*) prototype {
  return [[GeneralNotification builder] mergeFrom:prototype];
}
- (GeneralNotification_Builder*) builder {
  return [GeneralNotification builder];
}
@end

@interface GeneralNotification_Builder()
@property (retain) GeneralNotification* result;
@end

@implementation GeneralNotification_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GeneralNotification alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GeneralNotification_Builder*) clear {
  self.result = [[[GeneralNotification alloc] init] autorelease];
  return self;
}
- (GeneralNotification_Builder*) clone {
  return [GeneralNotification builderWithPrototype:result];
}
- (GeneralNotification*) defaultInstance {
  return [GeneralNotification defaultInstance];
}
- (GeneralNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GeneralNotification*) buildPartial {
  GeneralNotification* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GeneralNotification_Builder*) mergeFrom:(GeneralNotification*) other {
  if (other == [GeneralNotification defaultInstance]) {
    return self;
  }
  if (other.hasHost) {
    [self setHost:other.host];
  }
  if (other.hasSessionStatus) {
    [self setSessionStatus:other.sessionStatus];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GeneralNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GeneralNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 26: {
        [self setHost:[input readString]];
        break;
      }
      case 32: {
        [self setSessionStatus:[input readInt32]];
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasHost {
  return result.hasHost;
}
- (NSString*) host {
  return result.host;
}
- (GeneralNotification_Builder*) setHost:(NSString*) value {
  result.hasHost = YES;
  result.host = value;
  return self;
}
- (GeneralNotification_Builder*) clearHost {
  result.hasHost = NO;
  result.host = @"";
  return self;
}
- (BOOL) hasSessionStatus {
  return result.hasSessionStatus;
}
- (int32_t) sessionStatus {
  return result.sessionStatus;
}
- (GeneralNotification_Builder*) setSessionStatus:(int32_t) value {
  result.hasSessionStatus = YES;
  result.sessionStatus = value;
  return self;
}
- (GeneralNotification_Builder*) clearSessionStatus {
  result.hasSessionStatus = NO;
  result.sessionStatus = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (GeneralNotification_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (GeneralNotification_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
@end

@interface GameMessage ()
@property GameCommandType command;
@property int32_t messageId;
@property GameResultCode resultCode;
@property (retain) NSString* userId;
@property int64_t sessionId;
@property (retain) JoinGameRequest* joinGameRequest;
@property (retain) JoinGameResponse* joinGameResponse;
@property (retain) StartGameRequest* startGameRequest;
@property (retain) StartGameResponse* startGameResponse;
@property (retain) GeneralNotification* notification;
@end

@implementation GameMessage

- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) value {
  hasCommand_ = !!value;
}
@synthesize command;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value {
  hasResultCode_ = !!value;
}
@synthesize resultCode;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasJoinGameRequest {
  return !!hasJoinGameRequest_;
}
- (void) setHasJoinGameRequest:(BOOL) value {
  hasJoinGameRequest_ = !!value;
}
@synthesize joinGameRequest;
- (BOOL) hasJoinGameResponse {
  return !!hasJoinGameResponse_;
}
- (void) setHasJoinGameResponse:(BOOL) value {
  hasJoinGameResponse_ = !!value;
}
@synthesize joinGameResponse;
- (BOOL) hasStartGameRequest {
  return !!hasStartGameRequest_;
}
- (void) setHasStartGameRequest:(BOOL) value {
  hasStartGameRequest_ = !!value;
}
@synthesize startGameRequest;
- (BOOL) hasStartGameResponse {
  return !!hasStartGameResponse_;
}
- (void) setHasStartGameResponse:(BOOL) value {
  hasStartGameResponse_ = !!value;
}
@synthesize startGameResponse;
- (BOOL) hasNotification {
  return !!hasNotification_;
}
- (void) setHasNotification:(BOOL) value {
  hasNotification_ = !!value;
}
@synthesize notification;
- (void) dealloc {
  self.userId = nil;
  self.joinGameRequest = nil;
  self.joinGameResponse = nil;
  self.startGameRequest = nil;
  self.startGameResponse = nil;
  self.notification = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.command = GameCommandTypeJoinGameRequest;
    self.messageId = 0;
    self.resultCode = GameResultCodeSuccess;
    self.userId = @"";
    self.sessionId = 0L;
    self.joinGameRequest = [JoinGameRequest defaultInstance];
    self.joinGameResponse = [JoinGameResponse defaultInstance];
    self.startGameRequest = [StartGameRequest defaultInstance];
    self.startGameResponse = [StartGameResponse defaultInstance];
    self.notification = [GeneralNotification defaultInstance];
  }
  return self;
}
static GameMessage* defaultGameMessageInstance = nil;
+ (void) initialize {
  if (self == [GameMessage class]) {
    defaultGameMessageInstance = [[GameMessage alloc] init];
  }
}
+ (GameMessage*) defaultInstance {
  return defaultGameMessageInstance;
}
- (GameMessage*) defaultInstance {
  return defaultGameMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCommand) {
    return NO;
  }
  if (!self.hasMessageId) {
    return NO;
  }
  if (self.hasJoinGameRequest) {
    if (!self.joinGameRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasJoinGameResponse) {
    if (!self.joinGameResponse.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommand) {
    [output writeEnum:1 value:self.command];
  }
  if (self.hasMessageId) {
    [output writeInt32:2 value:self.messageId];
  }
  if (self.hasResultCode) {
    [output writeEnum:3 value:self.resultCode];
  }
  if (self.hasUserId) {
    [output writeString:4 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeInt64:5 value:self.sessionId];
  }
  if (self.hasJoinGameRequest) {
    [output writeMessage:11 value:self.joinGameRequest];
  }
  if (self.hasJoinGameResponse) {
    [output writeMessage:12 value:self.joinGameResponse];
  }
  if (self.hasStartGameRequest) {
    [output writeMessage:13 value:self.startGameRequest];
  }
  if (self.hasStartGameResponse) {
    [output writeMessage:14 value:self.startGameResponse];
  }
  if (self.hasNotification) {
    [output writeMessage:51 value:self.notification];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommand) {
    size += computeEnumSize(1, self.command);
  }
  if (self.hasMessageId) {
    size += computeInt32Size(2, self.messageId);
  }
  if (self.hasResultCode) {
    size += computeEnumSize(3, self.resultCode);
  }
  if (self.hasUserId) {
    size += computeStringSize(4, self.userId);
  }
  if (self.hasSessionId) {
    size += computeInt64Size(5, self.sessionId);
  }
  if (self.hasJoinGameRequest) {
    size += computeMessageSize(11, self.joinGameRequest);
  }
  if (self.hasJoinGameResponse) {
    size += computeMessageSize(12, self.joinGameResponse);
  }
  if (self.hasStartGameRequest) {
    size += computeMessageSize(13, self.startGameRequest);
  }
  if (self.hasStartGameResponse) {
    size += computeMessageSize(14, self.startGameResponse);
  }
  if (self.hasNotification) {
    size += computeMessageSize(51, self.notification);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameMessage*) parseFromData:(NSData*) data {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data] build];
}
+ (GameMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage_Builder*) builder {
  return [[[GameMessage_Builder alloc] init] autorelease];
}
+ (GameMessage_Builder*) builderWithPrototype:(GameMessage*) prototype {
  return [[GameMessage builder] mergeFrom:prototype];
}
- (GameMessage_Builder*) builder {
  return [GameMessage builder];
}
@end

@interface GameMessage_Builder()
@property (retain) GameMessage* result;
@end

@implementation GameMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameMessage_Builder*) clear {
  self.result = [[[GameMessage alloc] init] autorelease];
  return self;
}
- (GameMessage_Builder*) clone {
  return [GameMessage builderWithPrototype:result];
}
- (GameMessage*) defaultInstance {
  return [GameMessage defaultInstance];
}
- (GameMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameMessage*) buildPartial {
  GameMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameMessage_Builder*) mergeFrom:(GameMessage*) other {
  if (other == [GameMessage defaultInstance]) {
    return self;
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasJoinGameRequest) {
    [self mergeJoinGameRequest:other.joinGameRequest];
  }
  if (other.hasJoinGameResponse) {
    [self mergeJoinGameResponse:other.joinGameResponse];
  }
  if (other.hasStartGameRequest) {
    [self mergeStartGameRequest:other.startGameRequest];
  }
  if (other.hasStartGameResponse) {
    [self mergeStartGameResponse:other.startGameResponse];
  }
  if (other.hasNotification) {
    [self mergeNotification:other.notification];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (GameCommandTypeIsValidValue(value)) {
          [self setCommand:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setMessageId:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (GameResultCodeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setUserId:[input readString]];
        break;
      }
      case 40: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 90: {
        JoinGameRequest_Builder* subBuilder = [JoinGameRequest builder];
        if (self.hasJoinGameRequest) {
          [subBuilder mergeFrom:self.joinGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        JoinGameResponse_Builder* subBuilder = [JoinGameResponse builder];
        if (self.hasJoinGameResponse) {
          [subBuilder mergeFrom:self.joinGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        StartGameRequest_Builder* subBuilder = [StartGameRequest builder];
        if (self.hasStartGameRequest) {
          [subBuilder mergeFrom:self.startGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        StartGameResponse_Builder* subBuilder = [StartGameResponse builder];
        if (self.hasStartGameResponse) {
          [subBuilder mergeFrom:self.startGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        GeneralNotification_Builder* subBuilder = [GeneralNotification builder];
        if (self.hasNotification) {
          [subBuilder mergeFrom:self.notification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotification:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCommand {
  return result.hasCommand;
}
- (GameCommandType) command {
  return result.command;
}
- (GameMessage_Builder*) setCommand:(GameCommandType) value {
  result.hasCommand = YES;
  result.command = value;
  return self;
}
- (GameMessage_Builder*) clearCommand {
  result.hasCommand = NO;
  result.command = GameCommandTypeJoinGameRequest;
  return self;
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (int32_t) messageId {
  return result.messageId;
}
- (GameMessage_Builder*) setMessageId:(int32_t) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (GameMessage_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (GameResultCode) resultCode {
  return result.resultCode;
}
- (GameMessage_Builder*) setResultCode:(GameResultCode) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (GameMessage_Builder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = GameResultCodeSuccess;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (GameMessage_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (GameMessage_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (GameMessage_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (GameMessage_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasJoinGameRequest {
  return result.hasJoinGameRequest;
}
- (JoinGameRequest*) joinGameRequest {
  return result.joinGameRequest;
}
- (GameMessage_Builder*) setJoinGameRequest:(JoinGameRequest*) value {
  result.hasJoinGameRequest = YES;
  result.joinGameRequest = value;
  return self;
}
- (GameMessage_Builder*) setJoinGameRequestBuilder:(JoinGameRequest_Builder*) builderForValue {
  return [self setJoinGameRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeJoinGameRequest:(JoinGameRequest*) value {
  if (result.hasJoinGameRequest &&
      result.joinGameRequest != [JoinGameRequest defaultInstance]) {
    result.joinGameRequest =
      [[[JoinGameRequest builderWithPrototype:result.joinGameRequest] mergeFrom:value] buildPartial];
  } else {
    result.joinGameRequest = value;
  }
  result.hasJoinGameRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearJoinGameRequest {
  result.hasJoinGameRequest = NO;
  result.joinGameRequest = [JoinGameRequest defaultInstance];
  return self;
}
- (BOOL) hasJoinGameResponse {
  return result.hasJoinGameResponse;
}
- (JoinGameResponse*) joinGameResponse {
  return result.joinGameResponse;
}
- (GameMessage_Builder*) setJoinGameResponse:(JoinGameResponse*) value {
  result.hasJoinGameResponse = YES;
  result.joinGameResponse = value;
  return self;
}
- (GameMessage_Builder*) setJoinGameResponseBuilder:(JoinGameResponse_Builder*) builderForValue {
  return [self setJoinGameResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeJoinGameResponse:(JoinGameResponse*) value {
  if (result.hasJoinGameResponse &&
      result.joinGameResponse != [JoinGameResponse defaultInstance]) {
    result.joinGameResponse =
      [[[JoinGameResponse builderWithPrototype:result.joinGameResponse] mergeFrom:value] buildPartial];
  } else {
    result.joinGameResponse = value;
  }
  result.hasJoinGameResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearJoinGameResponse {
  result.hasJoinGameResponse = NO;
  result.joinGameResponse = [JoinGameResponse defaultInstance];
  return self;
}
- (BOOL) hasStartGameRequest {
  return result.hasStartGameRequest;
}
- (StartGameRequest*) startGameRequest {
  return result.startGameRequest;
}
- (GameMessage_Builder*) setStartGameRequest:(StartGameRequest*) value {
  result.hasStartGameRequest = YES;
  result.startGameRequest = value;
  return self;
}
- (GameMessage_Builder*) setStartGameRequestBuilder:(StartGameRequest_Builder*) builderForValue {
  return [self setStartGameRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeStartGameRequest:(StartGameRequest*) value {
  if (result.hasStartGameRequest &&
      result.startGameRequest != [StartGameRequest defaultInstance]) {
    result.startGameRequest =
      [[[StartGameRequest builderWithPrototype:result.startGameRequest] mergeFrom:value] buildPartial];
  } else {
    result.startGameRequest = value;
  }
  result.hasStartGameRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearStartGameRequest {
  result.hasStartGameRequest = NO;
  result.startGameRequest = [StartGameRequest defaultInstance];
  return self;
}
- (BOOL) hasStartGameResponse {
  return result.hasStartGameResponse;
}
- (StartGameResponse*) startGameResponse {
  return result.startGameResponse;
}
- (GameMessage_Builder*) setStartGameResponse:(StartGameResponse*) value {
  result.hasStartGameResponse = YES;
  result.startGameResponse = value;
  return self;
}
- (GameMessage_Builder*) setStartGameResponseBuilder:(StartGameResponse_Builder*) builderForValue {
  return [self setStartGameResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeStartGameResponse:(StartGameResponse*) value {
  if (result.hasStartGameResponse &&
      result.startGameResponse != [StartGameResponse defaultInstance]) {
    result.startGameResponse =
      [[[StartGameResponse builderWithPrototype:result.startGameResponse] mergeFrom:value] buildPartial];
  } else {
    result.startGameResponse = value;
  }
  result.hasStartGameResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearStartGameResponse {
  result.hasStartGameResponse = NO;
  result.startGameResponse = [StartGameResponse defaultInstance];
  return self;
}
- (BOOL) hasNotification {
  return result.hasNotification;
}
- (GeneralNotification*) notification {
  return result.notification;
}
- (GameMessage_Builder*) setNotification:(GeneralNotification*) value {
  result.hasNotification = YES;
  result.notification = value;
  return self;
}
- (GameMessage_Builder*) setNotificationBuilder:(GeneralNotification_Builder*) builderForValue {
  return [self setNotification:[builderForValue build]];
}
- (GameMessage_Builder*) mergeNotification:(GeneralNotification*) value {
  if (result.hasNotification &&
      result.notification != [GeneralNotification defaultInstance]) {
    result.notification =
      [[[GeneralNotification builderWithPrototype:result.notification] mergeFrom:value] buildPartial];
  } else {
    result.notification = value;
  }
  result.hasNotification = YES;
  return self;
}
- (GameMessage_Builder*) clearNotification {
  result.hasNotification = NO;
  result.notification = [GeneralNotification defaultInstance];
  return self;
}
@end

