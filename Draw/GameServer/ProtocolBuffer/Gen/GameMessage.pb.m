// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameMessage.pb.h"

@implementation GameMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [DrawRoot registerAllExtensions:registry];
    [DiceRoot registerAllExtensions:registry];
    [ZhaJinHuaRoot registerAllExtensions:registry];
    [BbsRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BetTypeIsValidValue(BetType value) {
  switch (value) {
    case BetTypeBetTypeCall:
    case BetTypeBetTypeRaise:
      return YES;
    default:
      return NO;
  }
}
@interface GetRoomsRequest ()
@property (retain) NSString* gameId;
@property int32_t roomType;
@property (retain) NSString* keyword;
@end

@implementation GetRoomsRequest

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasRoomType {
  return !!hasRoomType_;
}
- (void) setHasRoomType:(BOOL) value {
  hasRoomType_ = !!value;
}
@synthesize roomType;
- (BOOL) hasKeyword {
  return !!hasKeyword_;
}
- (void) setHasKeyword:(BOOL) value {
  hasKeyword_ = !!value;
}
@synthesize keyword;
- (void) dealloc {
  self.gameId = nil;
  self.keyword = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.roomType = 0;
    self.keyword = @"";
  }
  return self;
}
static GetRoomsRequest* defaultGetRoomsRequestInstance = nil;
+ (void) initialize {
  if (self == [GetRoomsRequest class]) {
    defaultGetRoomsRequestInstance = [[GetRoomsRequest alloc] init];
  }
}
+ (GetRoomsRequest*) defaultInstance {
  return defaultGetRoomsRequestInstance;
}
- (GetRoomsRequest*) defaultInstance {
  return defaultGetRoomsRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasRoomType) {
    [output writeInt32:3 value:self.roomType];
  }
  if (self.hasKeyword) {
    [output writeString:4 value:self.keyword];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameId) {
    size += computeStringSize(2, self.gameId);
  }
  if (self.hasRoomType) {
    size += computeInt32Size(3, self.roomType);
  }
  if (self.hasKeyword) {
    size += computeStringSize(4, self.keyword);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetRoomsRequest*) parseFromData:(NSData*) data {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromData:data] build];
}
+ (GetRoomsRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromInputStream:input] build];
}
+ (GetRoomsRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GetRoomsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsRequest*)[[[GetRoomsRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsRequest_Builder*) builder {
  return [[[GetRoomsRequest_Builder alloc] init] autorelease];
}
+ (GetRoomsRequest_Builder*) builderWithPrototype:(GetRoomsRequest*) prototype {
  return [[GetRoomsRequest builder] mergeFrom:prototype];
}
- (GetRoomsRequest_Builder*) builder {
  return [GetRoomsRequest builder];
}
@end

@interface GetRoomsRequest_Builder()
@property (retain) GetRoomsRequest* result;
@end

@implementation GetRoomsRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetRoomsRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetRoomsRequest_Builder*) clear {
  self.result = [[[GetRoomsRequest alloc] init] autorelease];
  return self;
}
- (GetRoomsRequest_Builder*) clone {
  return [GetRoomsRequest builderWithPrototype:result];
}
- (GetRoomsRequest*) defaultInstance {
  return [GetRoomsRequest defaultInstance];
}
- (GetRoomsRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetRoomsRequest*) buildPartial {
  GetRoomsRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetRoomsRequest_Builder*) mergeFrom:(GetRoomsRequest*) other {
  if (other == [GetRoomsRequest defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasRoomType) {
    [self setRoomType:other.roomType];
  }
  if (other.hasKeyword) {
    [self setKeyword:other.keyword];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetRoomsRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetRoomsRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        [self setRoomType:[input readInt32]];
        break;
      }
      case 34: {
        [self setKeyword:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (GetRoomsRequest_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (GetRoomsRequest_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasRoomType {
  return result.hasRoomType;
}
- (int32_t) roomType {
  return result.roomType;
}
- (GetRoomsRequest_Builder*) setRoomType:(int32_t) value {
  result.hasRoomType = YES;
  result.roomType = value;
  return self;
}
- (GetRoomsRequest_Builder*) clearRoomType {
  result.hasRoomType = NO;
  result.roomType = 0;
  return self;
}
- (BOOL) hasKeyword {
  return result.hasKeyword;
}
- (NSString*) keyword {
  return result.keyword;
}
- (GetRoomsRequest_Builder*) setKeyword:(NSString*) value {
  result.hasKeyword = YES;
  result.keyword = value;
  return self;
}
- (GetRoomsRequest_Builder*) clearKeyword {
  result.hasKeyword = NO;
  result.keyword = @"";
  return self;
}
@end

@interface GetRoomsResponse ()
@property (retain) NSMutableArray* mutableSessionsList;
@property int32_t ruleType;
@end

@implementation GetRoomsResponse

@synthesize mutableSessionsList;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) value {
  hasRuleType_ = !!value;
}
@synthesize ruleType;
- (void) dealloc {
  self.mutableSessionsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.ruleType = 0;
  }
  return self;
}
static GetRoomsResponse* defaultGetRoomsResponseInstance = nil;
+ (void) initialize {
  if (self == [GetRoomsResponse class]) {
    defaultGetRoomsResponseInstance = [[GetRoomsResponse alloc] init];
  }
}
+ (GetRoomsResponse*) defaultInstance {
  return defaultGetRoomsResponseInstance;
}
- (GetRoomsResponse*) defaultInstance {
  return defaultGetRoomsResponseInstance;
}
- (NSArray*) sessionsList {
  return mutableSessionsList;
}
- (PBGameSession*) sessionsAtIndex:(int32_t) index {
  id value = [mutableSessionsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBGameSession* element in self.sessionsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBGameSession* element in self.sessionsList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasRuleType) {
    [output writeInt32:2 value:self.ruleType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBGameSession* element in self.sessionsList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasRuleType) {
    size += computeInt32Size(2, self.ruleType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetRoomsResponse*) parseFromData:(NSData*) data {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromData:data] build];
}
+ (GetRoomsResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromInputStream:input] build];
}
+ (GetRoomsResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GetRoomsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomsResponse*)[[[GetRoomsResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomsResponse_Builder*) builder {
  return [[[GetRoomsResponse_Builder alloc] init] autorelease];
}
+ (GetRoomsResponse_Builder*) builderWithPrototype:(GetRoomsResponse*) prototype {
  return [[GetRoomsResponse builder] mergeFrom:prototype];
}
- (GetRoomsResponse_Builder*) builder {
  return [GetRoomsResponse builder];
}
@end

@interface GetRoomsResponse_Builder()
@property (retain) GetRoomsResponse* result;
@end

@implementation GetRoomsResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetRoomsResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetRoomsResponse_Builder*) clear {
  self.result = [[[GetRoomsResponse alloc] init] autorelease];
  return self;
}
- (GetRoomsResponse_Builder*) clone {
  return [GetRoomsResponse builderWithPrototype:result];
}
- (GetRoomsResponse*) defaultInstance {
  return [GetRoomsResponse defaultInstance];
}
- (GetRoomsResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetRoomsResponse*) buildPartial {
  GetRoomsResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetRoomsResponse_Builder*) mergeFrom:(GetRoomsResponse*) other {
  if (other == [GetRoomsResponse defaultInstance]) {
    return self;
  }
  if (other.mutableSessionsList.count > 0) {
    if (result.mutableSessionsList == nil) {
      result.mutableSessionsList = [NSMutableArray array];
    }
    [result.mutableSessionsList addObjectsFromArray:other.mutableSessionsList];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetRoomsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetRoomsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessions:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setRuleType:[input readInt32]];
        break;
      }
    }
  }
}
- (NSArray*) sessionsList {
  if (result.mutableSessionsList == nil) { return [NSArray array]; }
  return result.mutableSessionsList;
}
- (PBGameSession*) sessionsAtIndex:(int32_t) index {
  return [result sessionsAtIndex:index];
}
- (GetRoomsResponse_Builder*) replaceSessionsAtIndex:(int32_t) index with:(PBGameSession*) value {
  [result.mutableSessionsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GetRoomsResponse_Builder*) addAllSessions:(NSArray*) values {
  if (result.mutableSessionsList == nil) {
    result.mutableSessionsList = [NSMutableArray array];
  }
  [result.mutableSessionsList addObjectsFromArray:values];
  return self;
}
- (GetRoomsResponse_Builder*) clearSessionsList {
  result.mutableSessionsList = nil;
  return self;
}
- (GetRoomsResponse_Builder*) addSessions:(PBGameSession*) value {
  if (result.mutableSessionsList == nil) {
    result.mutableSessionsList = [NSMutableArray array];
  }
  [result.mutableSessionsList addObject:value];
  return self;
}
- (BOOL) hasRuleType {
  return result.hasRuleType;
}
- (int32_t) ruleType {
  return result.ruleType;
}
- (GetRoomsResponse_Builder*) setRuleType:(int32_t) value {
  result.hasRuleType = YES;
  result.ruleType = value;
  return self;
}
- (GetRoomsResponse_Builder*) clearRuleType {
  result.hasRuleType = NO;
  result.ruleType = 0;
  return self;
}
@end

@interface CreateRoomRequest ()
@property (retain) NSString* gameId;
@property (retain) PBGameUser* user;
@property (retain) NSString* roomName;
@property (retain) NSString* password;
@property int32_t ruleType;
@end

@implementation CreateRoomRequest

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value {
  hasUser_ = !!value;
}
@synthesize user;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) value {
  hasRoomName_ = !!value;
}
@synthesize roomName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) value {
  hasRuleType_ = !!value;
}
@synthesize ruleType;
- (void) dealloc {
  self.gameId = nil;
  self.user = nil;
  self.roomName = nil;
  self.password = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.user = [PBGameUser defaultInstance];
    self.roomName = @"";
    self.password = @"";
    self.ruleType = 0;
  }
  return self;
}
static CreateRoomRequest* defaultCreateRoomRequestInstance = nil;
+ (void) initialize {
  if (self == [CreateRoomRequest class]) {
    defaultCreateRoomRequestInstance = [[CreateRoomRequest alloc] init];
  }
}
+ (CreateRoomRequest*) defaultInstance {
  return defaultCreateRoomRequestInstance;
}
- (CreateRoomRequest*) defaultInstance {
  return defaultCreateRoomRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasRoomName) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasRoomName) {
    [output writeString:3 value:self.roomName];
  }
  if (self.hasPassword) {
    [output writeString:4 value:self.password];
  }
  if (self.hasRuleType) {
    [output writeInt32:5 value:self.ruleType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameId) {
    size += computeStringSize(1, self.gameId);
  }
  if (self.hasUser) {
    size += computeMessageSize(2, self.user);
  }
  if (self.hasRoomName) {
    size += computeStringSize(3, self.roomName);
  }
  if (self.hasPassword) {
    size += computeStringSize(4, self.password);
  }
  if (self.hasRuleType) {
    size += computeInt32Size(5, self.ruleType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CreateRoomRequest*) parseFromData:(NSData*) data {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromData:data] build];
}
+ (CreateRoomRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromInputStream:input] build];
}
+ (CreateRoomRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CreateRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomRequest*)[[[CreateRoomRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomRequest_Builder*) builder {
  return [[[CreateRoomRequest_Builder alloc] init] autorelease];
}
+ (CreateRoomRequest_Builder*) builderWithPrototype:(CreateRoomRequest*) prototype {
  return [[CreateRoomRequest builder] mergeFrom:prototype];
}
- (CreateRoomRequest_Builder*) builder {
  return [CreateRoomRequest builder];
}
@end

@interface CreateRoomRequest_Builder()
@property (retain) CreateRoomRequest* result;
@end

@implementation CreateRoomRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CreateRoomRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CreateRoomRequest_Builder*) clear {
  self.result = [[[CreateRoomRequest alloc] init] autorelease];
  return self;
}
- (CreateRoomRequest_Builder*) clone {
  return [CreateRoomRequest builderWithPrototype:result];
}
- (CreateRoomRequest*) defaultInstance {
  return [CreateRoomRequest defaultInstance];
}
- (CreateRoomRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreateRoomRequest*) buildPartial {
  CreateRoomRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CreateRoomRequest_Builder*) mergeFrom:(CreateRoomRequest*) other {
  if (other == [CreateRoomRequest defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreateRoomRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreateRoomRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 18: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setRoomName:[input readString]];
        break;
      }
      case 34: {
        [self setPassword:[input readString]];
        break;
      }
      case 40: {
        [self setRuleType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (CreateRoomRequest_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (CreateRoomRequest_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (PBGameUser*) user {
  return result.user;
}
- (CreateRoomRequest_Builder*) setUser:(PBGameUser*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (CreateRoomRequest_Builder*) setUserBuilder:(PBGameUser_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CreateRoomRequest_Builder*) mergeUser:(PBGameUser*) value {
  if (result.hasUser &&
      result.user != [PBGameUser defaultInstance]) {
    result.user =
      [[[PBGameUser builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (CreateRoomRequest_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasRoomName {
  return result.hasRoomName;
}
- (NSString*) roomName {
  return result.roomName;
}
- (CreateRoomRequest_Builder*) setRoomName:(NSString*) value {
  result.hasRoomName = YES;
  result.roomName = value;
  return self;
}
- (CreateRoomRequest_Builder*) clearRoomName {
  result.hasRoomName = NO;
  result.roomName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (CreateRoomRequest_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (CreateRoomRequest_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasRuleType {
  return result.hasRuleType;
}
- (int32_t) ruleType {
  return result.ruleType;
}
- (CreateRoomRequest_Builder*) setRuleType:(int32_t) value {
  result.hasRuleType = YES;
  result.ruleType = value;
  return self;
}
- (CreateRoomRequest_Builder*) clearRuleType {
  result.hasRuleType = NO;
  result.ruleType = 0;
  return self;
}
@end

@interface CreateRoomResponse ()
@property (retain) PBGameSession* gameSession;
@end

@implementation CreateRoomResponse

- (BOOL) hasGameSession {
  return !!hasGameSession_;
}
- (void) setHasGameSession:(BOOL) value {
  hasGameSession_ = !!value;
}
@synthesize gameSession;
- (void) dealloc {
  self.gameSession = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameSession = [PBGameSession defaultInstance];
  }
  return self;
}
static CreateRoomResponse* defaultCreateRoomResponseInstance = nil;
+ (void) initialize {
  if (self == [CreateRoomResponse class]) {
    defaultCreateRoomResponseInstance = [[CreateRoomResponse alloc] init];
  }
}
+ (CreateRoomResponse*) defaultInstance {
  return defaultCreateRoomResponseInstance;
}
- (CreateRoomResponse*) defaultInstance {
  return defaultCreateRoomResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameSession) {
    return NO;
  }
  if (!self.gameSession.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSession) {
    [output writeMessage:1 value:self.gameSession];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameSession) {
    size += computeMessageSize(1, self.gameSession);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CreateRoomResponse*) parseFromData:(NSData*) data {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromData:data] build];
}
+ (CreateRoomResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromInputStream:input] build];
}
+ (CreateRoomResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CreateRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateRoomResponse*)[[[CreateRoomResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateRoomResponse_Builder*) builder {
  return [[[CreateRoomResponse_Builder alloc] init] autorelease];
}
+ (CreateRoomResponse_Builder*) builderWithPrototype:(CreateRoomResponse*) prototype {
  return [[CreateRoomResponse builder] mergeFrom:prototype];
}
- (CreateRoomResponse_Builder*) builder {
  return [CreateRoomResponse builder];
}
@end

@interface CreateRoomResponse_Builder()
@property (retain) CreateRoomResponse* result;
@end

@implementation CreateRoomResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CreateRoomResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CreateRoomResponse_Builder*) clear {
  self.result = [[[CreateRoomResponse alloc] init] autorelease];
  return self;
}
- (CreateRoomResponse_Builder*) clone {
  return [CreateRoomResponse builderWithPrototype:result];
}
- (CreateRoomResponse*) defaultInstance {
  return [CreateRoomResponse defaultInstance];
}
- (CreateRoomResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreateRoomResponse*) buildPartial {
  CreateRoomResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CreateRoomResponse_Builder*) mergeFrom:(CreateRoomResponse*) other {
  if (other == [CreateRoomResponse defaultInstance]) {
    return self;
  }
  if (other.hasGameSession) {
    [self mergeGameSession:other.gameSession];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreateRoomResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreateRoomResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        if (self.hasGameSession) {
          [subBuilder mergeFrom:self.gameSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSession:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSession {
  return result.hasGameSession;
}
- (PBGameSession*) gameSession {
  return result.gameSession;
}
- (CreateRoomResponse_Builder*) setGameSession:(PBGameSession*) value {
  result.hasGameSession = YES;
  result.gameSession = value;
  return self;
}
- (CreateRoomResponse_Builder*) setGameSessionBuilder:(PBGameSession_Builder*) builderForValue {
  return [self setGameSession:[builderForValue build]];
}
- (CreateRoomResponse_Builder*) mergeGameSession:(PBGameSession*) value {
  if (result.hasGameSession &&
      result.gameSession != [PBGameSession defaultInstance]) {
    result.gameSession =
      [[[PBGameSession builderWithPrototype:result.gameSession] mergeFrom:value] buildPartial];
  } else {
    result.gameSession = value;
  }
  result.hasGameSession = YES;
  return self;
}
- (CreateRoomResponse_Builder*) clearGameSession {
  result.hasGameSession = NO;
  result.gameSession = [PBGameSession defaultInstance];
  return self;
}
@end

@interface SearchRoomRequest ()
@property (retain) NSString* keyword;
@property int32_t rangeType;
@end

@implementation SearchRoomRequest

- (BOOL) hasKeyword {
  return !!hasKeyword_;
}
- (void) setHasKeyword:(BOOL) value {
  hasKeyword_ = !!value;
}
@synthesize keyword;
- (BOOL) hasRangeType {
  return !!hasRangeType_;
}
- (void) setHasRangeType:(BOOL) value {
  hasRangeType_ = !!value;
}
@synthesize rangeType;
- (void) dealloc {
  self.keyword = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.keyword = @"";
    self.rangeType = 0;
  }
  return self;
}
static SearchRoomRequest* defaultSearchRoomRequestInstance = nil;
+ (void) initialize {
  if (self == [SearchRoomRequest class]) {
    defaultSearchRoomRequestInstance = [[SearchRoomRequest alloc] init];
  }
}
+ (SearchRoomRequest*) defaultInstance {
  return defaultSearchRoomRequestInstance;
}
- (SearchRoomRequest*) defaultInstance {
  return defaultSearchRoomRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKeyword) {
    [output writeString:1 value:self.keyword];
  }
  if (self.hasRangeType) {
    [output writeInt32:2 value:self.rangeType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasKeyword) {
    size += computeStringSize(1, self.keyword);
  }
  if (self.hasRangeType) {
    size += computeInt32Size(2, self.rangeType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SearchRoomRequest*) parseFromData:(NSData*) data {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromData:data] build];
}
+ (SearchRoomRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromInputStream:input] build];
}
+ (SearchRoomRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SearchRoomRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomRequest*)[[[SearchRoomRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomRequest_Builder*) builder {
  return [[[SearchRoomRequest_Builder alloc] init] autorelease];
}
+ (SearchRoomRequest_Builder*) builderWithPrototype:(SearchRoomRequest*) prototype {
  return [[SearchRoomRequest builder] mergeFrom:prototype];
}
- (SearchRoomRequest_Builder*) builder {
  return [SearchRoomRequest builder];
}
@end

@interface SearchRoomRequest_Builder()
@property (retain) SearchRoomRequest* result;
@end

@implementation SearchRoomRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SearchRoomRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SearchRoomRequest_Builder*) clear {
  self.result = [[[SearchRoomRequest alloc] init] autorelease];
  return self;
}
- (SearchRoomRequest_Builder*) clone {
  return [SearchRoomRequest builderWithPrototype:result];
}
- (SearchRoomRequest*) defaultInstance {
  return [SearchRoomRequest defaultInstance];
}
- (SearchRoomRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SearchRoomRequest*) buildPartial {
  SearchRoomRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SearchRoomRequest_Builder*) mergeFrom:(SearchRoomRequest*) other {
  if (other == [SearchRoomRequest defaultInstance]) {
    return self;
  }
  if (other.hasKeyword) {
    [self setKeyword:other.keyword];
  }
  if (other.hasRangeType) {
    [self setRangeType:other.rangeType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SearchRoomRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SearchRoomRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKeyword:[input readString]];
        break;
      }
      case 16: {
        [self setRangeType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasKeyword {
  return result.hasKeyword;
}
- (NSString*) keyword {
  return result.keyword;
}
- (SearchRoomRequest_Builder*) setKeyword:(NSString*) value {
  result.hasKeyword = YES;
  result.keyword = value;
  return self;
}
- (SearchRoomRequest_Builder*) clearKeyword {
  result.hasKeyword = NO;
  result.keyword = @"";
  return self;
}
- (BOOL) hasRangeType {
  return result.hasRangeType;
}
- (int32_t) rangeType {
  return result.rangeType;
}
- (SearchRoomRequest_Builder*) setRangeType:(int32_t) value {
  result.hasRangeType = YES;
  result.rangeType = value;
  return self;
}
- (SearchRoomRequest_Builder*) clearRangeType {
  result.hasRangeType = NO;
  result.rangeType = 0;
  return self;
}
@end

@interface SearchRoomResponse ()
@property (retain) NSMutableArray* mutableSessionsList;
@end

@implementation SearchRoomResponse

@synthesize mutableSessionsList;
- (void) dealloc {
  self.mutableSessionsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static SearchRoomResponse* defaultSearchRoomResponseInstance = nil;
+ (void) initialize {
  if (self == [SearchRoomResponse class]) {
    defaultSearchRoomResponseInstance = [[SearchRoomResponse alloc] init];
  }
}
+ (SearchRoomResponse*) defaultInstance {
  return defaultSearchRoomResponseInstance;
}
- (SearchRoomResponse*) defaultInstance {
  return defaultSearchRoomResponseInstance;
}
- (NSArray*) sessionsList {
  return mutableSessionsList;
}
- (PBGameSession*) sessionsAtIndex:(int32_t) index {
  id value = [mutableSessionsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBGameSession* element in self.sessionsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBGameSession* element in self.sessionsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBGameSession* element in self.sessionsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SearchRoomResponse*) parseFromData:(NSData*) data {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromData:data] build];
}
+ (SearchRoomResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomResponse*) parseFromInputStream:(NSInputStream*) input {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromInputStream:input] build];
}
+ (SearchRoomResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SearchRoomResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SearchRoomResponse*)[[[SearchRoomResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SearchRoomResponse_Builder*) builder {
  return [[[SearchRoomResponse_Builder alloc] init] autorelease];
}
+ (SearchRoomResponse_Builder*) builderWithPrototype:(SearchRoomResponse*) prototype {
  return [[SearchRoomResponse builder] mergeFrom:prototype];
}
- (SearchRoomResponse_Builder*) builder {
  return [SearchRoomResponse builder];
}
@end

@interface SearchRoomResponse_Builder()
@property (retain) SearchRoomResponse* result;
@end

@implementation SearchRoomResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SearchRoomResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SearchRoomResponse_Builder*) clear {
  self.result = [[[SearchRoomResponse alloc] init] autorelease];
  return self;
}
- (SearchRoomResponse_Builder*) clone {
  return [SearchRoomResponse builderWithPrototype:result];
}
- (SearchRoomResponse*) defaultInstance {
  return [SearchRoomResponse defaultInstance];
}
- (SearchRoomResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SearchRoomResponse*) buildPartial {
  SearchRoomResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SearchRoomResponse_Builder*) mergeFrom:(SearchRoomResponse*) other {
  if (other == [SearchRoomResponse defaultInstance]) {
    return self;
  }
  if (other.mutableSessionsList.count > 0) {
    if (result.mutableSessionsList == nil) {
      result.mutableSessionsList = [NSMutableArray array];
    }
    [result.mutableSessionsList addObjectsFromArray:other.mutableSessionsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SearchRoomResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SearchRoomResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) sessionsList {
  if (result.mutableSessionsList == nil) { return [NSArray array]; }
  return result.mutableSessionsList;
}
- (PBGameSession*) sessionsAtIndex:(int32_t) index {
  return [result sessionsAtIndex:index];
}
- (SearchRoomResponse_Builder*) replaceSessionsAtIndex:(int32_t) index with:(PBGameSession*) value {
  [result.mutableSessionsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (SearchRoomResponse_Builder*) addAllSessions:(NSArray*) values {
  if (result.mutableSessionsList == nil) {
    result.mutableSessionsList = [NSMutableArray array];
  }
  [result.mutableSessionsList addObjectsFromArray:values];
  return self;
}
- (SearchRoomResponse_Builder*) clearSessionsList {
  result.mutableSessionsList = nil;
  return self;
}
- (SearchRoomResponse_Builder*) addSessions:(PBGameSession*) value {
  if (result.mutableSessionsList == nil) {
    result.mutableSessionsList = [NSMutableArray array];
  }
  [result.mutableSessionsList addObject:value];
  return self;
}
@end

@interface RegisterRoomsNotificationRequest ()
@property (retain) NSMutableArray* mutableSessionIdsList;
@end

@implementation RegisterRoomsNotificationRequest

@synthesize mutableSessionIdsList;
- (void) dealloc {
  self.mutableSessionIdsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RegisterRoomsNotificationRequest* defaultRegisterRoomsNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RegisterRoomsNotificationRequest class]) {
    defaultRegisterRoomsNotificationRequestInstance = [[RegisterRoomsNotificationRequest alloc] init];
  }
}
+ (RegisterRoomsNotificationRequest*) defaultInstance {
  return defaultRegisterRoomsNotificationRequestInstance;
}
- (RegisterRoomsNotificationRequest*) defaultInstance {
  return defaultRegisterRoomsNotificationRequestInstance;
}
- (NSArray*) sessionIdsList {
  return mutableSessionIdsList;
}
- (int32_t) sessionIdsAtIndex:(int32_t) index {
  id value = [mutableSessionIdsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutableSessionIdsList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:sessionIdsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableSessionIdsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableSessionIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableSessionIdsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    sessionIdsMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RegisterRoomsNotificationRequest*) parseFromData:(NSData*) data {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromData:data] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationRequest*)[[[RegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationRequest_Builder*) builder {
  return [[[RegisterRoomsNotificationRequest_Builder alloc] init] autorelease];
}
+ (RegisterRoomsNotificationRequest_Builder*) builderWithPrototype:(RegisterRoomsNotificationRequest*) prototype {
  return [[RegisterRoomsNotificationRequest builder] mergeFrom:prototype];
}
- (RegisterRoomsNotificationRequest_Builder*) builder {
  return [RegisterRoomsNotificationRequest builder];
}
@end

@interface RegisterRoomsNotificationRequest_Builder()
@property (retain) RegisterRoomsNotificationRequest* result;
@end

@implementation RegisterRoomsNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RegisterRoomsNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RegisterRoomsNotificationRequest_Builder*) clear {
  self.result = [[[RegisterRoomsNotificationRequest alloc] init] autorelease];
  return self;
}
- (RegisterRoomsNotificationRequest_Builder*) clone {
  return [RegisterRoomsNotificationRequest builderWithPrototype:result];
}
- (RegisterRoomsNotificationRequest*) defaultInstance {
  return [RegisterRoomsNotificationRequest defaultInstance];
}
- (RegisterRoomsNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterRoomsNotificationRequest*) buildPartial {
  RegisterRoomsNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RegisterRoomsNotificationRequest_Builder*) mergeFrom:(RegisterRoomsNotificationRequest*) other {
  if (other == [RegisterRoomsNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.mutableSessionIdsList.count > 0) {
    if (result.mutableSessionIdsList == nil) {
      result.mutableSessionIdsList = [NSMutableArray array];
    }
    [result.mutableSessionIdsList addObjectsFromArray:other.mutableSessionIdsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterRoomsNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterRoomsNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addSessionIds:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (NSArray*) sessionIdsList {
  if (result.mutableSessionIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableSessionIdsList;
}
- (int32_t) sessionIdsAtIndex:(int32_t) index {
  return [result sessionIdsAtIndex:index];
}
- (RegisterRoomsNotificationRequest_Builder*) replaceSessionIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableSessionIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (RegisterRoomsNotificationRequest_Builder*) addSessionIds:(int32_t) value {
  if (result.mutableSessionIdsList == nil) {
    result.mutableSessionIdsList = [NSMutableArray array];
  }
  [result.mutableSessionIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (RegisterRoomsNotificationRequest_Builder*) addAllSessionIds:(NSArray*) values {
  if (result.mutableSessionIdsList == nil) {
    result.mutableSessionIdsList = [NSMutableArray array];
  }
  [result.mutableSessionIdsList addObjectsFromArray:values];
  return self;
}
- (RegisterRoomsNotificationRequest_Builder*) clearSessionIdsList {
  result.mutableSessionIdsList = nil;
  return self;
}
@end

@interface RegisterRoomsNotificationResponse ()
@end

@implementation RegisterRoomsNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RegisterRoomsNotificationResponse* defaultRegisterRoomsNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RegisterRoomsNotificationResponse class]) {
    defaultRegisterRoomsNotificationResponseInstance = [[RegisterRoomsNotificationResponse alloc] init];
  }
}
+ (RegisterRoomsNotificationResponse*) defaultInstance {
  return defaultRegisterRoomsNotificationResponseInstance;
}
- (RegisterRoomsNotificationResponse*) defaultInstance {
  return defaultRegisterRoomsNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RegisterRoomsNotificationResponse*) parseFromData:(NSData*) data {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromData:data] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterRoomsNotificationResponse*)[[[RegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterRoomsNotificationResponse_Builder*) builder {
  return [[[RegisterRoomsNotificationResponse_Builder alloc] init] autorelease];
}
+ (RegisterRoomsNotificationResponse_Builder*) builderWithPrototype:(RegisterRoomsNotificationResponse*) prototype {
  return [[RegisterRoomsNotificationResponse builder] mergeFrom:prototype];
}
- (RegisterRoomsNotificationResponse_Builder*) builder {
  return [RegisterRoomsNotificationResponse builder];
}
@end

@interface RegisterRoomsNotificationResponse_Builder()
@property (retain) RegisterRoomsNotificationResponse* result;
@end

@implementation RegisterRoomsNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RegisterRoomsNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RegisterRoomsNotificationResponse_Builder*) clear {
  self.result = [[[RegisterRoomsNotificationResponse alloc] init] autorelease];
  return self;
}
- (RegisterRoomsNotificationResponse_Builder*) clone {
  return [RegisterRoomsNotificationResponse builderWithPrototype:result];
}
- (RegisterRoomsNotificationResponse*) defaultInstance {
  return [RegisterRoomsNotificationResponse defaultInstance];
}
- (RegisterRoomsNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterRoomsNotificationResponse*) buildPartial {
  RegisterRoomsNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RegisterRoomsNotificationResponse_Builder*) mergeFrom:(RegisterRoomsNotificationResponse*) other {
  if (other == [RegisterRoomsNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterRoomsNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterRoomsNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface UnRegisterRoomsNotificationRequest ()
@property (retain) NSMutableArray* mutableSessionIdsList;
@end

@implementation UnRegisterRoomsNotificationRequest

@synthesize mutableSessionIdsList;
- (void) dealloc {
  self.mutableSessionIdsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static UnRegisterRoomsNotificationRequest* defaultUnRegisterRoomsNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [UnRegisterRoomsNotificationRequest class]) {
    defaultUnRegisterRoomsNotificationRequestInstance = [[UnRegisterRoomsNotificationRequest alloc] init];
  }
}
+ (UnRegisterRoomsNotificationRequest*) defaultInstance {
  return defaultUnRegisterRoomsNotificationRequestInstance;
}
- (UnRegisterRoomsNotificationRequest*) defaultInstance {
  return defaultUnRegisterRoomsNotificationRequestInstance;
}
- (NSArray*) sessionIdsList {
  return mutableSessionIdsList;
}
- (int32_t) sessionIdsAtIndex:(int32_t) index {
  id value = [mutableSessionIdsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutableSessionIdsList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:sessionIdsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableSessionIdsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableSessionIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableSessionIdsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    sessionIdsMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UnRegisterRoomsNotificationRequest*) parseFromData:(NSData*) data {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromData:data] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (UnRegisterRoomsNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationRequest*)[[[UnRegisterRoomsNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationRequest_Builder*) builder {
  return [[[UnRegisterRoomsNotificationRequest_Builder alloc] init] autorelease];
}
+ (UnRegisterRoomsNotificationRequest_Builder*) builderWithPrototype:(UnRegisterRoomsNotificationRequest*) prototype {
  return [[UnRegisterRoomsNotificationRequest builder] mergeFrom:prototype];
}
- (UnRegisterRoomsNotificationRequest_Builder*) builder {
  return [UnRegisterRoomsNotificationRequest builder];
}
@end

@interface UnRegisterRoomsNotificationRequest_Builder()
@property (retain) UnRegisterRoomsNotificationRequest* result;
@end

@implementation UnRegisterRoomsNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UnRegisterRoomsNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UnRegisterRoomsNotificationRequest_Builder*) clear {
  self.result = [[[UnRegisterRoomsNotificationRequest alloc] init] autorelease];
  return self;
}
- (UnRegisterRoomsNotificationRequest_Builder*) clone {
  return [UnRegisterRoomsNotificationRequest builderWithPrototype:result];
}
- (UnRegisterRoomsNotificationRequest*) defaultInstance {
  return [UnRegisterRoomsNotificationRequest defaultInstance];
}
- (UnRegisterRoomsNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnRegisterRoomsNotificationRequest*) buildPartial {
  UnRegisterRoomsNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UnRegisterRoomsNotificationRequest_Builder*) mergeFrom:(UnRegisterRoomsNotificationRequest*) other {
  if (other == [UnRegisterRoomsNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.mutableSessionIdsList.count > 0) {
    if (result.mutableSessionIdsList == nil) {
      result.mutableSessionIdsList = [NSMutableArray array];
    }
    [result.mutableSessionIdsList addObjectsFromArray:other.mutableSessionIdsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnRegisterRoomsNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnRegisterRoomsNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addSessionIds:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (NSArray*) sessionIdsList {
  if (result.mutableSessionIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableSessionIdsList;
}
- (int32_t) sessionIdsAtIndex:(int32_t) index {
  return [result sessionIdsAtIndex:index];
}
- (UnRegisterRoomsNotificationRequest_Builder*) replaceSessionIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableSessionIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (UnRegisterRoomsNotificationRequest_Builder*) addSessionIds:(int32_t) value {
  if (result.mutableSessionIdsList == nil) {
    result.mutableSessionIdsList = [NSMutableArray array];
  }
  [result.mutableSessionIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (UnRegisterRoomsNotificationRequest_Builder*) addAllSessionIds:(NSArray*) values {
  if (result.mutableSessionIdsList == nil) {
    result.mutableSessionIdsList = [NSMutableArray array];
  }
  [result.mutableSessionIdsList addObjectsFromArray:values];
  return self;
}
- (UnRegisterRoomsNotificationRequest_Builder*) clearSessionIdsList {
  result.mutableSessionIdsList = nil;
  return self;
}
@end

@interface UnRegisterRoomsNotificationResponse ()
@end

@implementation UnRegisterRoomsNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static UnRegisterRoomsNotificationResponse* defaultUnRegisterRoomsNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [UnRegisterRoomsNotificationResponse class]) {
    defaultUnRegisterRoomsNotificationResponseInstance = [[UnRegisterRoomsNotificationResponse alloc] init];
  }
}
+ (UnRegisterRoomsNotificationResponse*) defaultInstance {
  return defaultUnRegisterRoomsNotificationResponseInstance;
}
- (UnRegisterRoomsNotificationResponse*) defaultInstance {
  return defaultUnRegisterRoomsNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UnRegisterRoomsNotificationResponse*) parseFromData:(NSData*) data {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromData:data] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (UnRegisterRoomsNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnRegisterRoomsNotificationResponse*)[[[UnRegisterRoomsNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnRegisterRoomsNotificationResponse_Builder*) builder {
  return [[[UnRegisterRoomsNotificationResponse_Builder alloc] init] autorelease];
}
+ (UnRegisterRoomsNotificationResponse_Builder*) builderWithPrototype:(UnRegisterRoomsNotificationResponse*) prototype {
  return [[UnRegisterRoomsNotificationResponse builder] mergeFrom:prototype];
}
- (UnRegisterRoomsNotificationResponse_Builder*) builder {
  return [UnRegisterRoomsNotificationResponse builder];
}
@end

@interface UnRegisterRoomsNotificationResponse_Builder()
@property (retain) UnRegisterRoomsNotificationResponse* result;
@end

@implementation UnRegisterRoomsNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UnRegisterRoomsNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UnRegisterRoomsNotificationResponse_Builder*) clear {
  self.result = [[[UnRegisterRoomsNotificationResponse alloc] init] autorelease];
  return self;
}
- (UnRegisterRoomsNotificationResponse_Builder*) clone {
  return [UnRegisterRoomsNotificationResponse builderWithPrototype:result];
}
- (UnRegisterRoomsNotificationResponse*) defaultInstance {
  return [UnRegisterRoomsNotificationResponse defaultInstance];
}
- (UnRegisterRoomsNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnRegisterRoomsNotificationResponse*) buildPartial {
  UnRegisterRoomsNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UnRegisterRoomsNotificationResponse_Builder*) mergeFrom:(UnRegisterRoomsNotificationResponse*) other {
  if (other == [UnRegisterRoomsNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnRegisterRoomsNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnRegisterRoomsNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CallDiceRequest ()
@property int32_t num;
@property int32_t dice;
@property BOOL wilds;
@end

@implementation CallDiceRequest

- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) value {
  hasNum_ = !!value;
}
@synthesize num;
- (BOOL) hasDice {
  return !!hasDice_;
}
- (void) setHasDice:(BOOL) value {
  hasDice_ = !!value;
}
@synthesize dice;
- (BOOL) hasWilds {
  return !!hasWilds_;
}
- (void) setHasWilds:(BOOL) value {
  hasWilds_ = !!value;
}
- (BOOL) wilds {
  return !!wilds_;
}
- (void) setWilds:(BOOL) value {
  wilds_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.num = 0;
    self.dice = 0;
    self.wilds = NO;
  }
  return self;
}
static CallDiceRequest* defaultCallDiceRequestInstance = nil;
+ (void) initialize {
  if (self == [CallDiceRequest class]) {
    defaultCallDiceRequestInstance = [[CallDiceRequest alloc] init];
  }
}
+ (CallDiceRequest*) defaultInstance {
  return defaultCallDiceRequestInstance;
}
- (CallDiceRequest*) defaultInstance {
  return defaultCallDiceRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNum) {
    [output writeInt32:10 value:self.num];
  }
  if (self.hasDice) {
    [output writeInt32:11 value:self.dice];
  }
  if (self.hasWilds) {
    [output writeBool:20 value:self.wilds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNum) {
    size += computeInt32Size(10, self.num);
  }
  if (self.hasDice) {
    size += computeInt32Size(11, self.dice);
  }
  if (self.hasWilds) {
    size += computeBoolSize(20, self.wilds);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CallDiceRequest*) parseFromData:(NSData*) data {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromData:data] build];
}
+ (CallDiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CallDiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromInputStream:input] build];
}
+ (CallDiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CallDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceRequest*)[[[CallDiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceRequest_Builder*) builder {
  return [[[CallDiceRequest_Builder alloc] init] autorelease];
}
+ (CallDiceRequest_Builder*) builderWithPrototype:(CallDiceRequest*) prototype {
  return [[CallDiceRequest builder] mergeFrom:prototype];
}
- (CallDiceRequest_Builder*) builder {
  return [CallDiceRequest builder];
}
@end

@interface CallDiceRequest_Builder()
@property (retain) CallDiceRequest* result;
@end

@implementation CallDiceRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CallDiceRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CallDiceRequest_Builder*) clear {
  self.result = [[[CallDiceRequest alloc] init] autorelease];
  return self;
}
- (CallDiceRequest_Builder*) clone {
  return [CallDiceRequest builderWithPrototype:result];
}
- (CallDiceRequest*) defaultInstance {
  return [CallDiceRequest defaultInstance];
}
- (CallDiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CallDiceRequest*) buildPartial {
  CallDiceRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CallDiceRequest_Builder*) mergeFrom:(CallDiceRequest*) other {
  if (other == [CallDiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasDice) {
    [self setDice:other.dice];
  }
  if (other.hasWilds) {
    [self setWilds:other.wilds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CallDiceRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CallDiceRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 80: {
        [self setNum:[input readInt32]];
        break;
      }
      case 88: {
        [self setDice:[input readInt32]];
        break;
      }
      case 160: {
        [self setWilds:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasNum {
  return result.hasNum;
}
- (int32_t) num {
  return result.num;
}
- (CallDiceRequest_Builder*) setNum:(int32_t) value {
  result.hasNum = YES;
  result.num = value;
  return self;
}
- (CallDiceRequest_Builder*) clearNum {
  result.hasNum = NO;
  result.num = 0;
  return self;
}
- (BOOL) hasDice {
  return result.hasDice;
}
- (int32_t) dice {
  return result.dice;
}
- (CallDiceRequest_Builder*) setDice:(int32_t) value {
  result.hasDice = YES;
  result.dice = value;
  return self;
}
- (CallDiceRequest_Builder*) clearDice {
  result.hasDice = NO;
  result.dice = 0;
  return self;
}
- (BOOL) hasWilds {
  return result.hasWilds;
}
- (BOOL) wilds {
  return result.wilds;
}
- (CallDiceRequest_Builder*) setWilds:(BOOL) value {
  result.hasWilds = YES;
  result.wilds = value;
  return self;
}
- (CallDiceRequest_Builder*) clearWilds {
  result.hasWilds = NO;
  result.wilds = NO;
  return self;
}
@end

@interface CallDiceResponse ()
@end

@implementation CallDiceResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CallDiceResponse* defaultCallDiceResponseInstance = nil;
+ (void) initialize {
  if (self == [CallDiceResponse class]) {
    defaultCallDiceResponseInstance = [[CallDiceResponse alloc] init];
  }
}
+ (CallDiceResponse*) defaultInstance {
  return defaultCallDiceResponseInstance;
}
- (CallDiceResponse*) defaultInstance {
  return defaultCallDiceResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CallDiceResponse*) parseFromData:(NSData*) data {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromData:data] build];
}
+ (CallDiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CallDiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromInputStream:input] build];
}
+ (CallDiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CallDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CallDiceResponse*)[[[CallDiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CallDiceResponse_Builder*) builder {
  return [[[CallDiceResponse_Builder alloc] init] autorelease];
}
+ (CallDiceResponse_Builder*) builderWithPrototype:(CallDiceResponse*) prototype {
  return [[CallDiceResponse builder] mergeFrom:prototype];
}
- (CallDiceResponse_Builder*) builder {
  return [CallDiceResponse builder];
}
@end

@interface CallDiceResponse_Builder()
@property (retain) CallDiceResponse* result;
@end

@implementation CallDiceResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CallDiceResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CallDiceResponse_Builder*) clear {
  self.result = [[[CallDiceResponse alloc] init] autorelease];
  return self;
}
- (CallDiceResponse_Builder*) clone {
  return [CallDiceResponse builderWithPrototype:result];
}
- (CallDiceResponse*) defaultInstance {
  return [CallDiceResponse defaultInstance];
}
- (CallDiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CallDiceResponse*) buildPartial {
  CallDiceResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CallDiceResponse_Builder*) mergeFrom:(CallDiceResponse*) other {
  if (other == [CallDiceResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CallDiceResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CallDiceResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface OpenDiceRequest ()
@property int32_t openType;
@property int32_t multiple;
@end

@implementation OpenDiceRequest

- (BOOL) hasOpenType {
  return !!hasOpenType_;
}
- (void) setHasOpenType:(BOOL) value {
  hasOpenType_ = !!value;
}
@synthesize openType;
- (BOOL) hasMultiple {
  return !!hasMultiple_;
}
- (void) setHasMultiple:(BOOL) value {
  hasMultiple_ = !!value;
}
@synthesize multiple;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.openType = 0;
    self.multiple = 1;
  }
  return self;
}
static OpenDiceRequest* defaultOpenDiceRequestInstance = nil;
+ (void) initialize {
  if (self == [OpenDiceRequest class]) {
    defaultOpenDiceRequestInstance = [[OpenDiceRequest alloc] init];
  }
}
+ (OpenDiceRequest*) defaultInstance {
  return defaultOpenDiceRequestInstance;
}
- (OpenDiceRequest*) defaultInstance {
  return defaultOpenDiceRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOpenType) {
    [output writeInt32:1 value:self.openType];
  }
  if (self.hasMultiple) {
    [output writeInt32:2 value:self.multiple];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOpenType) {
    size += computeInt32Size(1, self.openType);
  }
  if (self.hasMultiple) {
    size += computeInt32Size(2, self.multiple);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OpenDiceRequest*) parseFromData:(NSData*) data {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromData:data] build];
}
+ (OpenDiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromInputStream:input] build];
}
+ (OpenDiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (OpenDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceRequest*)[[[OpenDiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceRequest_Builder*) builder {
  return [[[OpenDiceRequest_Builder alloc] init] autorelease];
}
+ (OpenDiceRequest_Builder*) builderWithPrototype:(OpenDiceRequest*) prototype {
  return [[OpenDiceRequest builder] mergeFrom:prototype];
}
- (OpenDiceRequest_Builder*) builder {
  return [OpenDiceRequest builder];
}
@end

@interface OpenDiceRequest_Builder()
@property (retain) OpenDiceRequest* result;
@end

@implementation OpenDiceRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[OpenDiceRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OpenDiceRequest_Builder*) clear {
  self.result = [[[OpenDiceRequest alloc] init] autorelease];
  return self;
}
- (OpenDiceRequest_Builder*) clone {
  return [OpenDiceRequest builderWithPrototype:result];
}
- (OpenDiceRequest*) defaultInstance {
  return [OpenDiceRequest defaultInstance];
}
- (OpenDiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OpenDiceRequest*) buildPartial {
  OpenDiceRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (OpenDiceRequest_Builder*) mergeFrom:(OpenDiceRequest*) other {
  if (other == [OpenDiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasOpenType) {
    [self setOpenType:other.openType];
  }
  if (other.hasMultiple) {
    [self setMultiple:other.multiple];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OpenDiceRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OpenDiceRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOpenType:[input readInt32]];
        break;
      }
      case 16: {
        [self setMultiple:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOpenType {
  return result.hasOpenType;
}
- (int32_t) openType {
  return result.openType;
}
- (OpenDiceRequest_Builder*) setOpenType:(int32_t) value {
  result.hasOpenType = YES;
  result.openType = value;
  return self;
}
- (OpenDiceRequest_Builder*) clearOpenType {
  result.hasOpenType = NO;
  result.openType = 0;
  return self;
}
- (BOOL) hasMultiple {
  return result.hasMultiple;
}
- (int32_t) multiple {
  return result.multiple;
}
- (OpenDiceRequest_Builder*) setMultiple:(int32_t) value {
  result.hasMultiple = YES;
  result.multiple = value;
  return self;
}
- (OpenDiceRequest_Builder*) clearMultiple {
  result.hasMultiple = NO;
  result.multiple = 1;
  return self;
}
@end

@interface OpenDiceResponse ()
@end

@implementation OpenDiceResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static OpenDiceResponse* defaultOpenDiceResponseInstance = nil;
+ (void) initialize {
  if (self == [OpenDiceResponse class]) {
    defaultOpenDiceResponseInstance = [[OpenDiceResponse alloc] init];
  }
}
+ (OpenDiceResponse*) defaultInstance {
  return defaultOpenDiceResponseInstance;
}
- (OpenDiceResponse*) defaultInstance {
  return defaultOpenDiceResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OpenDiceResponse*) parseFromData:(NSData*) data {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromData:data] build];
}
+ (OpenDiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromInputStream:input] build];
}
+ (OpenDiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (OpenDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OpenDiceResponse*)[[[OpenDiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OpenDiceResponse_Builder*) builder {
  return [[[OpenDiceResponse_Builder alloc] init] autorelease];
}
+ (OpenDiceResponse_Builder*) builderWithPrototype:(OpenDiceResponse*) prototype {
  return [[OpenDiceResponse builder] mergeFrom:prototype];
}
- (OpenDiceResponse_Builder*) builder {
  return [OpenDiceResponse builder];
}
@end

@interface OpenDiceResponse_Builder()
@property (retain) OpenDiceResponse* result;
@end

@implementation OpenDiceResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[OpenDiceResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OpenDiceResponse_Builder*) clear {
  self.result = [[[OpenDiceResponse alloc] init] autorelease];
  return self;
}
- (OpenDiceResponse_Builder*) clone {
  return [OpenDiceResponse builderWithPrototype:result];
}
- (OpenDiceResponse*) defaultInstance {
  return [OpenDiceResponse defaultInstance];
}
- (OpenDiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OpenDiceResponse*) buildPartial {
  OpenDiceResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (OpenDiceResponse_Builder*) mergeFrom:(OpenDiceResponse*) other {
  if (other == [OpenDiceResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OpenDiceResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OpenDiceResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface UseItemRequest ()
@property int32_t itemId;
@property int32_t extendTime;
@property int32_t direction;
@property (retain) NSString* nextPlayUserId;
@property BOOL decreaseTimeForNextPlayUser;
@end

@implementation UseItemRequest

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value {
  hasItemId_ = !!value;
}
@synthesize itemId;
- (BOOL) hasExtendTime {
  return !!hasExtendTime_;
}
- (void) setHasExtendTime:(BOOL) value {
  hasExtendTime_ = !!value;
}
@synthesize extendTime;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) value {
  hasDirection_ = !!value;
}
@synthesize direction;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return !!hasDecreaseTimeForNextPlayUser_;
}
- (void) setHasDecreaseTimeForNextPlayUser:(BOOL) value {
  hasDecreaseTimeForNextPlayUser_ = !!value;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return !!decreaseTimeForNextPlayUser_;
}
- (void) setDecreaseTimeForNextPlayUser:(BOOL) value {
  decreaseTimeForNextPlayUser_ = !!value;
}
- (void) dealloc {
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.extendTime = 0;
    self.direction = 0;
    self.nextPlayUserId = @"";
    self.decreaseTimeForNextPlayUser = NO;
  }
  return self;
}
static UseItemRequest* defaultUseItemRequestInstance = nil;
+ (void) initialize {
  if (self == [UseItemRequest class]) {
    defaultUseItemRequestInstance = [[UseItemRequest alloc] init];
  }
}
+ (UseItemRequest*) defaultInstance {
  return defaultUseItemRequestInstance;
}
- (UseItemRequest*) defaultInstance {
  return defaultUseItemRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasDirection) {
    [output writeInt32:22 value:self.direction];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:23 value:self.nextPlayUserId];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    [output writeBool:24 value:self.decreaseTimeForNextPlayUser];
  }
  if (self.hasExtendTime) {
    [output writeInt32:100 value:self.extendTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasItemId) {
    size += computeInt32Size(1, self.itemId);
  }
  if (self.hasDirection) {
    size += computeInt32Size(22, self.direction);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(23, self.nextPlayUserId);
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    size += computeBoolSize(24, self.decreaseTimeForNextPlayUser);
  }
  if (self.hasExtendTime) {
    size += computeInt32Size(100, self.extendTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UseItemRequest*) parseFromData:(NSData*) data {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromData:data] build];
}
+ (UseItemRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UseItemRequest*) parseFromInputStream:(NSInputStream*) input {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromInputStream:input] build];
}
+ (UseItemRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromCodedInputStream:input] build];
}
+ (UseItemRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemRequest*)[[[UseItemRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemRequest_Builder*) builder {
  return [[[UseItemRequest_Builder alloc] init] autorelease];
}
+ (UseItemRequest_Builder*) builderWithPrototype:(UseItemRequest*) prototype {
  return [[UseItemRequest builder] mergeFrom:prototype];
}
- (UseItemRequest_Builder*) builder {
  return [UseItemRequest builder];
}
@end

@interface UseItemRequest_Builder()
@property (retain) UseItemRequest* result;
@end

@implementation UseItemRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UseItemRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UseItemRequest_Builder*) clear {
  self.result = [[[UseItemRequest alloc] init] autorelease];
  return self;
}
- (UseItemRequest_Builder*) clone {
  return [UseItemRequest builderWithPrototype:result];
}
- (UseItemRequest*) defaultInstance {
  return [UseItemRequest defaultInstance];
}
- (UseItemRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UseItemRequest*) buildPartial {
  UseItemRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UseItemRequest_Builder*) mergeFrom:(UseItemRequest*) other {
  if (other == [UseItemRequest defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasExtendTime) {
    [self setExtendTime:other.extendTime];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasDecreaseTimeForNextPlayUser) {
    [self setDecreaseTimeForNextPlayUser:other.decreaseTimeForNextPlayUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UseItemRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UseItemRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 176: {
        [self setDirection:[input readInt32]];
        break;
      }
      case 186: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 192: {
        [self setDecreaseTimeForNextPlayUser:[input readBool]];
        break;
      }
      case 800: {
        [self setExtendTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (UseItemRequest_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (UseItemRequest_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasExtendTime {
  return result.hasExtendTime;
}
- (int32_t) extendTime {
  return result.extendTime;
}
- (UseItemRequest_Builder*) setExtendTime:(int32_t) value {
  result.hasExtendTime = YES;
  result.extendTime = value;
  return self;
}
- (UseItemRequest_Builder*) clearExtendTime {
  result.hasExtendTime = NO;
  result.extendTime = 0;
  return self;
}
- (BOOL) hasDirection {
  return result.hasDirection;
}
- (int32_t) direction {
  return result.direction;
}
- (UseItemRequest_Builder*) setDirection:(int32_t) value {
  result.hasDirection = YES;
  result.direction = value;
  return self;
}
- (UseItemRequest_Builder*) clearDirection {
  result.hasDirection = NO;
  result.direction = 0;
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (UseItemRequest_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (UseItemRequest_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return result.hasDecreaseTimeForNextPlayUser;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return result.decreaseTimeForNextPlayUser;
}
- (UseItemRequest_Builder*) setDecreaseTimeForNextPlayUser:(BOOL) value {
  result.hasDecreaseTimeForNextPlayUser = YES;
  result.decreaseTimeForNextPlayUser = value;
  return self;
}
- (UseItemRequest_Builder*) clearDecreaseTimeForNextPlayUser {
  result.hasDecreaseTimeForNextPlayUser = NO;
  result.decreaseTimeForNextPlayUser = NO;
  return self;
}
@end

@interface UseItemResponse ()
@property int32_t itemId;
@property (retain) NSMutableArray* mutableDicesList;
@property (retain) PBDiceAction* action;
@property int32_t direction;
@property (retain) NSString* nextPlayUserId;
@property BOOL decreaseTimeForNextPlayUser;
@end

@implementation UseItemResponse

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value {
  hasItemId_ = !!value;
}
@synthesize itemId;
@synthesize mutableDicesList;
- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) value {
  hasAction_ = !!value;
}
@synthesize action;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) value {
  hasDirection_ = !!value;
}
@synthesize direction;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return !!hasDecreaseTimeForNextPlayUser_;
}
- (void) setHasDecreaseTimeForNextPlayUser:(BOOL) value {
  hasDecreaseTimeForNextPlayUser_ = !!value;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return !!decreaseTimeForNextPlayUser_;
}
- (void) setDecreaseTimeForNextPlayUser:(BOOL) value {
  decreaseTimeForNextPlayUser_ = !!value;
}
- (void) dealloc {
  self.mutableDicesList = nil;
  self.action = nil;
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.action = [PBDiceAction defaultInstance];
    self.direction = 0;
    self.nextPlayUserId = @"";
    self.decreaseTimeForNextPlayUser = NO;
  }
  return self;
}
static UseItemResponse* defaultUseItemResponseInstance = nil;
+ (void) initialize {
  if (self == [UseItemResponse class]) {
    defaultUseItemResponseInstance = [[UseItemResponse alloc] init];
  }
}
+ (UseItemResponse*) defaultInstance {
  return defaultUseItemResponseInstance;
}
- (UseItemResponse*) defaultInstance {
  return defaultUseItemResponseInstance;
}
- (NSArray*) dicesList {
  return mutableDicesList;
}
- (PBDice*) dicesAtIndex:(int32_t) index {
  id value = [mutableDicesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  for (PBDice* element in self.dicesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasAction) {
    if (!self.action.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  for (PBDice* element in self.dicesList) {
    [output writeMessage:20 value:element];
  }
  if (self.hasAction) {
    [output writeMessage:21 value:self.action];
  }
  if (self.hasDirection) {
    [output writeInt32:22 value:self.direction];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:23 value:self.nextPlayUserId];
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    [output writeBool:24 value:self.decreaseTimeForNextPlayUser];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasItemId) {
    size += computeInt32Size(1, self.itemId);
  }
  for (PBDice* element in self.dicesList) {
    size += computeMessageSize(20, element);
  }
  if (self.hasAction) {
    size += computeMessageSize(21, self.action);
  }
  if (self.hasDirection) {
    size += computeInt32Size(22, self.direction);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(23, self.nextPlayUserId);
  }
  if (self.hasDecreaseTimeForNextPlayUser) {
    size += computeBoolSize(24, self.decreaseTimeForNextPlayUser);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UseItemResponse*) parseFromData:(NSData*) data {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromData:data] build];
}
+ (UseItemResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UseItemResponse*) parseFromInputStream:(NSInputStream*) input {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromInputStream:input] build];
}
+ (UseItemResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromCodedInputStream:input] build];
}
+ (UseItemResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UseItemResponse*)[[[UseItemResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UseItemResponse_Builder*) builder {
  return [[[UseItemResponse_Builder alloc] init] autorelease];
}
+ (UseItemResponse_Builder*) builderWithPrototype:(UseItemResponse*) prototype {
  return [[UseItemResponse builder] mergeFrom:prototype];
}
- (UseItemResponse_Builder*) builder {
  return [UseItemResponse builder];
}
@end

@interface UseItemResponse_Builder()
@property (retain) UseItemResponse* result;
@end

@implementation UseItemResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UseItemResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UseItemResponse_Builder*) clear {
  self.result = [[[UseItemResponse alloc] init] autorelease];
  return self;
}
- (UseItemResponse_Builder*) clone {
  return [UseItemResponse builderWithPrototype:result];
}
- (UseItemResponse*) defaultInstance {
  return [UseItemResponse defaultInstance];
}
- (UseItemResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UseItemResponse*) buildPartial {
  UseItemResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UseItemResponse_Builder*) mergeFrom:(UseItemResponse*) other {
  if (other == [UseItemResponse defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.mutableDicesList.count > 0) {
    if (result.mutableDicesList == nil) {
      result.mutableDicesList = [NSMutableArray array];
    }
    [result.mutableDicesList addObjectsFromArray:other.mutableDicesList];
  }
  if (other.hasAction) {
    [self mergeAction:other.action];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasDecreaseTimeForNextPlayUser) {
    [self setDecreaseTimeForNextPlayUser:other.decreaseTimeForNextPlayUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UseItemResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UseItemResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 162: {
        PBDice_Builder* subBuilder = [PBDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDices:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        PBDiceAction_Builder* subBuilder = [PBDiceAction builder];
        if (self.hasAction) {
          [subBuilder mergeFrom:self.action];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAction:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setDirection:[input readInt32]];
        break;
      }
      case 186: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 192: {
        [self setDecreaseTimeForNextPlayUser:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (UseItemResponse_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (UseItemResponse_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (NSArray*) dicesList {
  if (result.mutableDicesList == nil) { return [NSArray array]; }
  return result.mutableDicesList;
}
- (PBDice*) dicesAtIndex:(int32_t) index {
  return [result dicesAtIndex:index];
}
- (UseItemResponse_Builder*) replaceDicesAtIndex:(int32_t) index with:(PBDice*) value {
  [result.mutableDicesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UseItemResponse_Builder*) addAllDices:(NSArray*) values {
  if (result.mutableDicesList == nil) {
    result.mutableDicesList = [NSMutableArray array];
  }
  [result.mutableDicesList addObjectsFromArray:values];
  return self;
}
- (UseItemResponse_Builder*) clearDicesList {
  result.mutableDicesList = nil;
  return self;
}
- (UseItemResponse_Builder*) addDices:(PBDice*) value {
  if (result.mutableDicesList == nil) {
    result.mutableDicesList = [NSMutableArray array];
  }
  [result.mutableDicesList addObject:value];
  return self;
}
- (BOOL) hasAction {
  return result.hasAction;
}
- (PBDiceAction*) action {
  return result.action;
}
- (UseItemResponse_Builder*) setAction:(PBDiceAction*) value {
  result.hasAction = YES;
  result.action = value;
  return self;
}
- (UseItemResponse_Builder*) setActionBuilder:(PBDiceAction_Builder*) builderForValue {
  return [self setAction:[builderForValue build]];
}
- (UseItemResponse_Builder*) mergeAction:(PBDiceAction*) value {
  if (result.hasAction &&
      result.action != [PBDiceAction defaultInstance]) {
    result.action =
      [[[PBDiceAction builderWithPrototype:result.action] mergeFrom:value] buildPartial];
  } else {
    result.action = value;
  }
  result.hasAction = YES;
  return self;
}
- (UseItemResponse_Builder*) clearAction {
  result.hasAction = NO;
  result.action = [PBDiceAction defaultInstance];
  return self;
}
- (BOOL) hasDirection {
  return result.hasDirection;
}
- (int32_t) direction {
  return result.direction;
}
- (UseItemResponse_Builder*) setDirection:(int32_t) value {
  result.hasDirection = YES;
  result.direction = value;
  return self;
}
- (UseItemResponse_Builder*) clearDirection {
  result.hasDirection = NO;
  result.direction = 0;
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (UseItemResponse_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (UseItemResponse_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasDecreaseTimeForNextPlayUser {
  return result.hasDecreaseTimeForNextPlayUser;
}
- (BOOL) decreaseTimeForNextPlayUser {
  return result.decreaseTimeForNextPlayUser;
}
- (UseItemResponse_Builder*) setDecreaseTimeForNextPlayUser:(BOOL) value {
  result.hasDecreaseTimeForNextPlayUser = YES;
  result.decreaseTimeForNextPlayUser = value;
  return self;
}
- (UseItemResponse_Builder*) clearDecreaseTimeForNextPlayUser {
  result.hasDecreaseTimeForNextPlayUser = NO;
  result.decreaseTimeForNextPlayUser = NO;
  return self;
}
@end

@interface UserDiceNotification ()
@property (retain) NSMutableArray* mutableUserDiceList;
@property BOOL cleanAll;
@property BOOL isWild;
@end

@implementation UserDiceNotification

@synthesize mutableUserDiceList;
- (BOOL) hasCleanAll {
  return !!hasCleanAll_;
}
- (void) setHasCleanAll:(BOOL) value {
  hasCleanAll_ = !!value;
}
- (BOOL) cleanAll {
  return !!cleanAll_;
}
- (void) setCleanAll:(BOOL) value {
  cleanAll_ = !!value;
}
- (BOOL) hasIsWild {
  return !!hasIsWild_;
}
- (void) setHasIsWild:(BOOL) value {
  hasIsWild_ = !!value;
}
- (BOOL) isWild {
  return !!isWild_;
}
- (void) setIsWild:(BOOL) value {
  isWild_ = !!value;
}
- (void) dealloc {
  self.mutableUserDiceList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cleanAll = NO;
    self.isWild = NO;
  }
  return self;
}
static UserDiceNotification* defaultUserDiceNotificationInstance = nil;
+ (void) initialize {
  if (self == [UserDiceNotification class]) {
    defaultUserDiceNotificationInstance = [[UserDiceNotification alloc] init];
  }
}
+ (UserDiceNotification*) defaultInstance {
  return defaultUserDiceNotificationInstance;
}
- (UserDiceNotification*) defaultInstance {
  return defaultUserDiceNotificationInstance;
}
- (NSArray*) userDiceList {
  return mutableUserDiceList;
}
- (PBUserDice*) userDiceAtIndex:(int32_t) index {
  id value = [mutableUserDiceList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBUserDice* element in self.userDiceList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBUserDice* element in self.userDiceList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasCleanAll) {
    [output writeBool:2 value:self.cleanAll];
  }
  if (self.hasIsWild) {
    [output writeBool:3 value:self.isWild];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBUserDice* element in self.userDiceList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasCleanAll) {
    size += computeBoolSize(2, self.cleanAll);
  }
  if (self.hasIsWild) {
    size += computeBoolSize(3, self.isWild);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserDiceNotification*) parseFromData:(NSData*) data {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromData:data] build];
}
+ (UserDiceNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserDiceNotification*) parseFromInputStream:(NSInputStream*) input {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromInputStream:input] build];
}
+ (UserDiceNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserDiceNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromCodedInputStream:input] build];
}
+ (UserDiceNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserDiceNotification*)[[[UserDiceNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserDiceNotification_Builder*) builder {
  return [[[UserDiceNotification_Builder alloc] init] autorelease];
}
+ (UserDiceNotification_Builder*) builderWithPrototype:(UserDiceNotification*) prototype {
  return [[UserDiceNotification builder] mergeFrom:prototype];
}
- (UserDiceNotification_Builder*) builder {
  return [UserDiceNotification builder];
}
@end

@interface UserDiceNotification_Builder()
@property (retain) UserDiceNotification* result;
@end

@implementation UserDiceNotification_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserDiceNotification alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserDiceNotification_Builder*) clear {
  self.result = [[[UserDiceNotification alloc] init] autorelease];
  return self;
}
- (UserDiceNotification_Builder*) clone {
  return [UserDiceNotification builderWithPrototype:result];
}
- (UserDiceNotification*) defaultInstance {
  return [UserDiceNotification defaultInstance];
}
- (UserDiceNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserDiceNotification*) buildPartial {
  UserDiceNotification* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserDiceNotification_Builder*) mergeFrom:(UserDiceNotification*) other {
  if (other == [UserDiceNotification defaultInstance]) {
    return self;
  }
  if (other.mutableUserDiceList.count > 0) {
    if (result.mutableUserDiceList == nil) {
      result.mutableUserDiceList = [NSMutableArray array];
    }
    [result.mutableUserDiceList addObjectsFromArray:other.mutableUserDiceList];
  }
  if (other.hasCleanAll) {
    [self setCleanAll:other.cleanAll];
  }
  if (other.hasIsWild) {
    [self setIsWild:other.isWild];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserDiceNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserDiceNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserDice_Builder* subBuilder = [PBUserDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserDice:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setCleanAll:[input readBool]];
        break;
      }
      case 24: {
        [self setIsWild:[input readBool]];
        break;
      }
    }
  }
}
- (NSArray*) userDiceList {
  if (result.mutableUserDiceList == nil) { return [NSArray array]; }
  return result.mutableUserDiceList;
}
- (PBUserDice*) userDiceAtIndex:(int32_t) index {
  return [result userDiceAtIndex:index];
}
- (UserDiceNotification_Builder*) replaceUserDiceAtIndex:(int32_t) index with:(PBUserDice*) value {
  [result.mutableUserDiceList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UserDiceNotification_Builder*) addAllUserDice:(NSArray*) values {
  if (result.mutableUserDiceList == nil) {
    result.mutableUserDiceList = [NSMutableArray array];
  }
  [result.mutableUserDiceList addObjectsFromArray:values];
  return self;
}
- (UserDiceNotification_Builder*) clearUserDiceList {
  result.mutableUserDiceList = nil;
  return self;
}
- (UserDiceNotification_Builder*) addUserDice:(PBUserDice*) value {
  if (result.mutableUserDiceList == nil) {
    result.mutableUserDiceList = [NSMutableArray array];
  }
  [result.mutableUserDiceList addObject:value];
  return self;
}
- (BOOL) hasCleanAll {
  return result.hasCleanAll;
}
- (BOOL) cleanAll {
  return result.cleanAll;
}
- (UserDiceNotification_Builder*) setCleanAll:(BOOL) value {
  result.hasCleanAll = YES;
  result.cleanAll = value;
  return self;
}
- (UserDiceNotification_Builder*) clearCleanAll {
  result.hasCleanAll = NO;
  result.cleanAll = NO;
  return self;
}
- (BOOL) hasIsWild {
  return result.hasIsWild;
}
- (BOOL) isWild {
  return result.isWild;
}
- (UserDiceNotification_Builder*) setIsWild:(BOOL) value {
  result.hasIsWild = YES;
  result.isWild = value;
  return self;
}
- (UserDiceNotification_Builder*) clearIsWild {
  result.hasIsWild = NO;
  result.isWild = NO;
  return self;
}
@end

@interface TimeoutSettingRequest ()
@property PBZJHUserAction action;
@end

@implementation TimeoutSettingRequest

- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) value {
  hasAction_ = !!value;
}
@synthesize action;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.action = PBZJHUserActionFoldCard;
  }
  return self;
}
static TimeoutSettingRequest* defaultTimeoutSettingRequestInstance = nil;
+ (void) initialize {
  if (self == [TimeoutSettingRequest class]) {
    defaultTimeoutSettingRequestInstance = [[TimeoutSettingRequest alloc] init];
  }
}
+ (TimeoutSettingRequest*) defaultInstance {
  return defaultTimeoutSettingRequestInstance;
}
- (TimeoutSettingRequest*) defaultInstance {
  return defaultTimeoutSettingRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAction) {
    [output writeEnum:1 value:self.action];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAction) {
    size += computeEnumSize(1, self.action);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TimeoutSettingRequest*) parseFromData:(NSData*) data {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromData:data] build];
}
+ (TimeoutSettingRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingRequest*) parseFromInputStream:(NSInputStream*) input {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromInputStream:input] build];
}
+ (TimeoutSettingRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromCodedInputStream:input] build];
}
+ (TimeoutSettingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingRequest*)[[[TimeoutSettingRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingRequest_Builder*) builder {
  return [[[TimeoutSettingRequest_Builder alloc] init] autorelease];
}
+ (TimeoutSettingRequest_Builder*) builderWithPrototype:(TimeoutSettingRequest*) prototype {
  return [[TimeoutSettingRequest builder] mergeFrom:prototype];
}
- (TimeoutSettingRequest_Builder*) builder {
  return [TimeoutSettingRequest builder];
}
@end

@interface TimeoutSettingRequest_Builder()
@property (retain) TimeoutSettingRequest* result;
@end

@implementation TimeoutSettingRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TimeoutSettingRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TimeoutSettingRequest_Builder*) clear {
  self.result = [[[TimeoutSettingRequest alloc] init] autorelease];
  return self;
}
- (TimeoutSettingRequest_Builder*) clone {
  return [TimeoutSettingRequest builderWithPrototype:result];
}
- (TimeoutSettingRequest*) defaultInstance {
  return [TimeoutSettingRequest defaultInstance];
}
- (TimeoutSettingRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TimeoutSettingRequest*) buildPartial {
  TimeoutSettingRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TimeoutSettingRequest_Builder*) mergeFrom:(TimeoutSettingRequest*) other {
  if (other == [TimeoutSettingRequest defaultInstance]) {
    return self;
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TimeoutSettingRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TimeoutSettingRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (PBZJHUserActionIsValidValue(value)) {
          [self setAction:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasAction {
  return result.hasAction;
}
- (PBZJHUserAction) action {
  return result.action;
}
- (TimeoutSettingRequest_Builder*) setAction:(PBZJHUserAction) value {
  result.hasAction = YES;
  result.action = value;
  return self;
}
- (TimeoutSettingRequest_Builder*) clearAction {
  result.hasAction = NO;
  result.action = PBZJHUserActionFoldCard;
  return self;
}
@end

@interface TimeoutSettingResponse ()
@end

@implementation TimeoutSettingResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static TimeoutSettingResponse* defaultTimeoutSettingResponseInstance = nil;
+ (void) initialize {
  if (self == [TimeoutSettingResponse class]) {
    defaultTimeoutSettingResponseInstance = [[TimeoutSettingResponse alloc] init];
  }
}
+ (TimeoutSettingResponse*) defaultInstance {
  return defaultTimeoutSettingResponseInstance;
}
- (TimeoutSettingResponse*) defaultInstance {
  return defaultTimeoutSettingResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TimeoutSettingResponse*) parseFromData:(NSData*) data {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromData:data] build];
}
+ (TimeoutSettingResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingResponse*) parseFromInputStream:(NSInputStream*) input {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromInputStream:input] build];
}
+ (TimeoutSettingResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromCodedInputStream:input] build];
}
+ (TimeoutSettingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TimeoutSettingResponse*)[[[TimeoutSettingResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimeoutSettingResponse_Builder*) builder {
  return [[[TimeoutSettingResponse_Builder alloc] init] autorelease];
}
+ (TimeoutSettingResponse_Builder*) builderWithPrototype:(TimeoutSettingResponse*) prototype {
  return [[TimeoutSettingResponse builder] mergeFrom:prototype];
}
- (TimeoutSettingResponse_Builder*) builder {
  return [TimeoutSettingResponse builder];
}
@end

@interface TimeoutSettingResponse_Builder()
@property (retain) TimeoutSettingResponse* result;
@end

@implementation TimeoutSettingResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TimeoutSettingResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TimeoutSettingResponse_Builder*) clear {
  self.result = [[[TimeoutSettingResponse alloc] init] autorelease];
  return self;
}
- (TimeoutSettingResponse_Builder*) clone {
  return [TimeoutSettingResponse builderWithPrototype:result];
}
- (TimeoutSettingResponse*) defaultInstance {
  return [TimeoutSettingResponse defaultInstance];
}
- (TimeoutSettingResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TimeoutSettingResponse*) buildPartial {
  TimeoutSettingResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TimeoutSettingResponse_Builder*) mergeFrom:(TimeoutSettingResponse*) other {
  if (other == [TimeoutSettingResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TimeoutSettingResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TimeoutSettingResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BetRequest ()
@property int32_t singleBet;
@property int32_t count;
@property BOOL isAutoBet;
@end

@implementation BetRequest

- (BOOL) hasSingleBet {
  return !!hasSingleBet_;
}
- (void) setHasSingleBet:(BOOL) value {
  hasSingleBet_ = !!value;
}
@synthesize singleBet;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (BOOL) hasIsAutoBet {
  return !!hasIsAutoBet_;
}
- (void) setHasIsAutoBet:(BOOL) value {
  hasIsAutoBet_ = !!value;
}
- (BOOL) isAutoBet {
  return !!isAutoBet_;
}
- (void) setIsAutoBet:(BOOL) value {
  isAutoBet_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.singleBet = 0;
    self.count = 1;
    self.isAutoBet = NO;
  }
  return self;
}
static BetRequest* defaultBetRequestInstance = nil;
+ (void) initialize {
  if (self == [BetRequest class]) {
    defaultBetRequestInstance = [[BetRequest alloc] init];
  }
}
+ (BetRequest*) defaultInstance {
  return defaultBetRequestInstance;
}
- (BetRequest*) defaultInstance {
  return defaultBetRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSingleBet) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSingleBet) {
    [output writeInt32:1 value:self.singleBet];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  if (self.hasIsAutoBet) {
    [output writeBool:4 value:self.isAutoBet];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSingleBet) {
    size += computeInt32Size(1, self.singleBet);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  if (self.hasIsAutoBet) {
    size += computeBoolSize(4, self.isAutoBet);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BetRequest*) parseFromData:(NSData*) data {
  return (BetRequest*)[[[BetRequest builder] mergeFromData:data] build];
}
+ (BetRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetRequest*)[[[BetRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BetRequest*)[[[BetRequest builder] mergeFromInputStream:input] build];
}
+ (BetRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetRequest*)[[[BetRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetRequest*)[[[BetRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BetRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetRequest*)[[[BetRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetRequest_Builder*) builder {
  return [[[BetRequest_Builder alloc] init] autorelease];
}
+ (BetRequest_Builder*) builderWithPrototype:(BetRequest*) prototype {
  return [[BetRequest builder] mergeFrom:prototype];
}
- (BetRequest_Builder*) builder {
  return [BetRequest builder];
}
@end

@interface BetRequest_Builder()
@property (retain) BetRequest* result;
@end

@implementation BetRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BetRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BetRequest_Builder*) clear {
  self.result = [[[BetRequest alloc] init] autorelease];
  return self;
}
- (BetRequest_Builder*) clone {
  return [BetRequest builderWithPrototype:result];
}
- (BetRequest*) defaultInstance {
  return [BetRequest defaultInstance];
}
- (BetRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetRequest*) buildPartial {
  BetRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BetRequest_Builder*) mergeFrom:(BetRequest*) other {
  if (other == [BetRequest defaultInstance]) {
    return self;
  }
  if (other.hasSingleBet) {
    [self setSingleBet:other.singleBet];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasIsAutoBet) {
    [self setIsAutoBet:other.isAutoBet];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSingleBet:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
      case 32: {
        [self setIsAutoBet:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSingleBet {
  return result.hasSingleBet;
}
- (int32_t) singleBet {
  return result.singleBet;
}
- (BetRequest_Builder*) setSingleBet:(int32_t) value {
  result.hasSingleBet = YES;
  result.singleBet = value;
  return self;
}
- (BetRequest_Builder*) clearSingleBet {
  result.hasSingleBet = NO;
  result.singleBet = 0;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (BetRequest_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (BetRequest_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 1;
  return self;
}
- (BOOL) hasIsAutoBet {
  return result.hasIsAutoBet;
}
- (BOOL) isAutoBet {
  return result.isAutoBet;
}
- (BetRequest_Builder*) setIsAutoBet:(BOOL) value {
  result.hasIsAutoBet = YES;
  result.isAutoBet = value;
  return self;
}
- (BetRequest_Builder*) clearIsAutoBet {
  result.hasIsAutoBet = NO;
  result.isAutoBet = NO;
  return self;
}
@end

@interface BetResponse ()
@end

@implementation BetResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static BetResponse* defaultBetResponseInstance = nil;
+ (void) initialize {
  if (self == [BetResponse class]) {
    defaultBetResponseInstance = [[BetResponse alloc] init];
  }
}
+ (BetResponse*) defaultInstance {
  return defaultBetResponseInstance;
}
- (BetResponse*) defaultInstance {
  return defaultBetResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BetResponse*) parseFromData:(NSData*) data {
  return (BetResponse*)[[[BetResponse builder] mergeFromData:data] build];
}
+ (BetResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetResponse*)[[[BetResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BetResponse*)[[[BetResponse builder] mergeFromInputStream:input] build];
}
+ (BetResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetResponse*)[[[BetResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetResponse*)[[[BetResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BetResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetResponse*)[[[BetResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetResponse_Builder*) builder {
  return [[[BetResponse_Builder alloc] init] autorelease];
}
+ (BetResponse_Builder*) builderWithPrototype:(BetResponse*) prototype {
  return [[BetResponse builder] mergeFrom:prototype];
}
- (BetResponse_Builder*) builder {
  return [BetResponse builder];
}
@end

@interface BetResponse_Builder()
@property (retain) BetResponse* result;
@end

@implementation BetResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BetResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BetResponse_Builder*) clear {
  self.result = [[[BetResponse alloc] init] autorelease];
  return self;
}
- (BetResponse_Builder*) clone {
  return [BetResponse builderWithPrototype:result];
}
- (BetResponse*) defaultInstance {
  return [BetResponse defaultInstance];
}
- (BetResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetResponse*) buildPartial {
  BetResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BetResponse_Builder*) mergeFrom:(BetResponse*) other {
  if (other == [BetResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CheckCardRequest ()
@end

@implementation CheckCardRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CheckCardRequest* defaultCheckCardRequestInstance = nil;
+ (void) initialize {
  if (self == [CheckCardRequest class]) {
    defaultCheckCardRequestInstance = [[CheckCardRequest alloc] init];
  }
}
+ (CheckCardRequest*) defaultInstance {
  return defaultCheckCardRequestInstance;
}
- (CheckCardRequest*) defaultInstance {
  return defaultCheckCardRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CheckCardRequest*) parseFromData:(NSData*) data {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromData:data] build];
}
+ (CheckCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromInputStream:input] build];
}
+ (CheckCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CheckCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardRequest*)[[[CheckCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardRequest_Builder*) builder {
  return [[[CheckCardRequest_Builder alloc] init] autorelease];
}
+ (CheckCardRequest_Builder*) builderWithPrototype:(CheckCardRequest*) prototype {
  return [[CheckCardRequest builder] mergeFrom:prototype];
}
- (CheckCardRequest_Builder*) builder {
  return [CheckCardRequest builder];
}
@end

@interface CheckCardRequest_Builder()
@property (retain) CheckCardRequest* result;
@end

@implementation CheckCardRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CheckCardRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CheckCardRequest_Builder*) clear {
  self.result = [[[CheckCardRequest alloc] init] autorelease];
  return self;
}
- (CheckCardRequest_Builder*) clone {
  return [CheckCardRequest builderWithPrototype:result];
}
- (CheckCardRequest*) defaultInstance {
  return [CheckCardRequest defaultInstance];
}
- (CheckCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CheckCardRequest*) buildPartial {
  CheckCardRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CheckCardRequest_Builder*) mergeFrom:(CheckCardRequest*) other {
  if (other == [CheckCardRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CheckCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CheckCardResponse ()
@end

@implementation CheckCardResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CheckCardResponse* defaultCheckCardResponseInstance = nil;
+ (void) initialize {
  if (self == [CheckCardResponse class]) {
    defaultCheckCardResponseInstance = [[CheckCardResponse alloc] init];
  }
}
+ (CheckCardResponse*) defaultInstance {
  return defaultCheckCardResponseInstance;
}
- (CheckCardResponse*) defaultInstance {
  return defaultCheckCardResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CheckCardResponse*) parseFromData:(NSData*) data {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromData:data] build];
}
+ (CheckCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromInputStream:input] build];
}
+ (CheckCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CheckCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckCardResponse*)[[[CheckCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckCardResponse_Builder*) builder {
  return [[[CheckCardResponse_Builder alloc] init] autorelease];
}
+ (CheckCardResponse_Builder*) builderWithPrototype:(CheckCardResponse*) prototype {
  return [[CheckCardResponse builder] mergeFrom:prototype];
}
- (CheckCardResponse_Builder*) builder {
  return [CheckCardResponse builder];
}
@end

@interface CheckCardResponse_Builder()
@property (retain) CheckCardResponse* result;
@end

@implementation CheckCardResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CheckCardResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CheckCardResponse_Builder*) clear {
  self.result = [[[CheckCardResponse alloc] init] autorelease];
  return self;
}
- (CheckCardResponse_Builder*) clone {
  return [CheckCardResponse builderWithPrototype:result];
}
- (CheckCardResponse*) defaultInstance {
  return [CheckCardResponse defaultInstance];
}
- (CheckCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CheckCardResponse*) buildPartial {
  CheckCardResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CheckCardResponse_Builder*) mergeFrom:(CheckCardResponse*) other {
  if (other == [CheckCardResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CheckCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FoldCardRequest ()
@end

@implementation FoldCardRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static FoldCardRequest* defaultFoldCardRequestInstance = nil;
+ (void) initialize {
  if (self == [FoldCardRequest class]) {
    defaultFoldCardRequestInstance = [[FoldCardRequest alloc] init];
  }
}
+ (FoldCardRequest*) defaultInstance {
  return defaultFoldCardRequestInstance;
}
- (FoldCardRequest*) defaultInstance {
  return defaultFoldCardRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FoldCardRequest*) parseFromData:(NSData*) data {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromData:data] build];
}
+ (FoldCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FoldCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromInputStream:input] build];
}
+ (FoldCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (FoldCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardRequest*)[[[FoldCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardRequest_Builder*) builder {
  return [[[FoldCardRequest_Builder alloc] init] autorelease];
}
+ (FoldCardRequest_Builder*) builderWithPrototype:(FoldCardRequest*) prototype {
  return [[FoldCardRequest builder] mergeFrom:prototype];
}
- (FoldCardRequest_Builder*) builder {
  return [FoldCardRequest builder];
}
@end

@interface FoldCardRequest_Builder()
@property (retain) FoldCardRequest* result;
@end

@implementation FoldCardRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FoldCardRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FoldCardRequest_Builder*) clear {
  self.result = [[[FoldCardRequest alloc] init] autorelease];
  return self;
}
- (FoldCardRequest_Builder*) clone {
  return [FoldCardRequest builderWithPrototype:result];
}
- (FoldCardRequest*) defaultInstance {
  return [FoldCardRequest defaultInstance];
}
- (FoldCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FoldCardRequest*) buildPartial {
  FoldCardRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FoldCardRequest_Builder*) mergeFrom:(FoldCardRequest*) other {
  if (other == [FoldCardRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FoldCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FoldCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FoldCardResponse ()
@end

@implementation FoldCardResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static FoldCardResponse* defaultFoldCardResponseInstance = nil;
+ (void) initialize {
  if (self == [FoldCardResponse class]) {
    defaultFoldCardResponseInstance = [[FoldCardResponse alloc] init];
  }
}
+ (FoldCardResponse*) defaultInstance {
  return defaultFoldCardResponseInstance;
}
- (FoldCardResponse*) defaultInstance {
  return defaultFoldCardResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FoldCardResponse*) parseFromData:(NSData*) data {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromData:data] build];
}
+ (FoldCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FoldCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromInputStream:input] build];
}
+ (FoldCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (FoldCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FoldCardResponse*)[[[FoldCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FoldCardResponse_Builder*) builder {
  return [[[FoldCardResponse_Builder alloc] init] autorelease];
}
+ (FoldCardResponse_Builder*) builderWithPrototype:(FoldCardResponse*) prototype {
  return [[FoldCardResponse builder] mergeFrom:prototype];
}
- (FoldCardResponse_Builder*) builder {
  return [FoldCardResponse builder];
}
@end

@interface FoldCardResponse_Builder()
@property (retain) FoldCardResponse* result;
@end

@implementation FoldCardResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FoldCardResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FoldCardResponse_Builder*) clear {
  self.result = [[[FoldCardResponse alloc] init] autorelease];
  return self;
}
- (FoldCardResponse_Builder*) clone {
  return [FoldCardResponse builderWithPrototype:result];
}
- (FoldCardResponse*) defaultInstance {
  return [FoldCardResponse defaultInstance];
}
- (FoldCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FoldCardResponse*) buildPartial {
  FoldCardResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FoldCardResponse_Builder*) mergeFrom:(FoldCardResponse*) other {
  if (other == [FoldCardResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FoldCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FoldCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface ShowCardRequest ()
@property (retain) NSMutableArray* mutableCardIdsList;
@end

@implementation ShowCardRequest

@synthesize mutableCardIdsList;
- (void) dealloc {
  self.mutableCardIdsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ShowCardRequest* defaultShowCardRequestInstance = nil;
+ (void) initialize {
  if (self == [ShowCardRequest class]) {
    defaultShowCardRequestInstance = [[ShowCardRequest alloc] init];
  }
}
+ (ShowCardRequest*) defaultInstance {
  return defaultShowCardRequestInstance;
}
- (ShowCardRequest*) defaultInstance {
  return defaultShowCardRequestInstance;
}
- (NSArray*) cardIdsList {
  return mutableCardIdsList;
}
- (int32_t) cardIdsAtIndex:(int32_t) index {
  id value = [mutableCardIdsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutableCardIdsList.count > 0) {
    [output writeRawVarint32:10];
    [output writeRawVarint32:cardIdsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutableCardIdsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableCardIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutableCardIdsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    cardIdsMemoizedSerializedSize = dataSize;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ShowCardRequest*) parseFromData:(NSData*) data {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromData:data] build];
}
+ (ShowCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ShowCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromInputStream:input] build];
}
+ (ShowCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ShowCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardRequest*)[[[ShowCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardRequest_Builder*) builder {
  return [[[ShowCardRequest_Builder alloc] init] autorelease];
}
+ (ShowCardRequest_Builder*) builderWithPrototype:(ShowCardRequest*) prototype {
  return [[ShowCardRequest builder] mergeFrom:prototype];
}
- (ShowCardRequest_Builder*) builder {
  return [ShowCardRequest builder];
}
@end

@interface ShowCardRequest_Builder()
@property (retain) ShowCardRequest* result;
@end

@implementation ShowCardRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ShowCardRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ShowCardRequest_Builder*) clear {
  self.result = [[[ShowCardRequest alloc] init] autorelease];
  return self;
}
- (ShowCardRequest_Builder*) clone {
  return [ShowCardRequest builderWithPrototype:result];
}
- (ShowCardRequest*) defaultInstance {
  return [ShowCardRequest defaultInstance];
}
- (ShowCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ShowCardRequest*) buildPartial {
  ShowCardRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ShowCardRequest_Builder*) mergeFrom:(ShowCardRequest*) other {
  if (other == [ShowCardRequest defaultInstance]) {
    return self;
  }
  if (other.mutableCardIdsList.count > 0) {
    if (result.mutableCardIdsList == nil) {
      result.mutableCardIdsList = [NSMutableArray array];
    }
    [result.mutableCardIdsList addObjectsFromArray:other.mutableCardIdsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ShowCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ShowCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addCardIds:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (NSArray*) cardIdsList {
  if (result.mutableCardIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableCardIdsList;
}
- (int32_t) cardIdsAtIndex:(int32_t) index {
  return [result cardIdsAtIndex:index];
}
- (ShowCardRequest_Builder*) replaceCardIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableCardIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ShowCardRequest_Builder*) addCardIds:(int32_t) value {
  if (result.mutableCardIdsList == nil) {
    result.mutableCardIdsList = [NSMutableArray array];
  }
  [result.mutableCardIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (ShowCardRequest_Builder*) addAllCardIds:(NSArray*) values {
  if (result.mutableCardIdsList == nil) {
    result.mutableCardIdsList = [NSMutableArray array];
  }
  [result.mutableCardIdsList addObjectsFromArray:values];
  return self;
}
- (ShowCardRequest_Builder*) clearCardIdsList {
  result.mutableCardIdsList = nil;
  return self;
}
@end

@interface ShowCardResponse ()
@end

@implementation ShowCardResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ShowCardResponse* defaultShowCardResponseInstance = nil;
+ (void) initialize {
  if (self == [ShowCardResponse class]) {
    defaultShowCardResponseInstance = [[ShowCardResponse alloc] init];
  }
}
+ (ShowCardResponse*) defaultInstance {
  return defaultShowCardResponseInstance;
}
- (ShowCardResponse*) defaultInstance {
  return defaultShowCardResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ShowCardResponse*) parseFromData:(NSData*) data {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromData:data] build];
}
+ (ShowCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ShowCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromInputStream:input] build];
}
+ (ShowCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ShowCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ShowCardResponse*)[[[ShowCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShowCardResponse_Builder*) builder {
  return [[[ShowCardResponse_Builder alloc] init] autorelease];
}
+ (ShowCardResponse_Builder*) builderWithPrototype:(ShowCardResponse*) prototype {
  return [[ShowCardResponse builder] mergeFrom:prototype];
}
- (ShowCardResponse_Builder*) builder {
  return [ShowCardResponse builder];
}
@end

@interface ShowCardResponse_Builder()
@property (retain) ShowCardResponse* result;
@end

@implementation ShowCardResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ShowCardResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ShowCardResponse_Builder*) clear {
  self.result = [[[ShowCardResponse alloc] init] autorelease];
  return self;
}
- (ShowCardResponse_Builder*) clone {
  return [ShowCardResponse builderWithPrototype:result];
}
- (ShowCardResponse*) defaultInstance {
  return [ShowCardResponse defaultInstance];
}
- (ShowCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ShowCardResponse*) buildPartial {
  ShowCardResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ShowCardResponse_Builder*) mergeFrom:(ShowCardResponse*) other {
  if (other == [ShowCardResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ShowCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ShowCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CompareCardRequest ()
@property (retain) NSString* toUserId;
@end

@implementation CompareCardRequest

- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value {
  hasToUserId_ = !!value;
}
@synthesize toUserId;
- (void) dealloc {
  self.toUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.toUserId = @"";
  }
  return self;
}
static CompareCardRequest* defaultCompareCardRequestInstance = nil;
+ (void) initialize {
  if (self == [CompareCardRequest class]) {
    defaultCompareCardRequestInstance = [[CompareCardRequest alloc] init];
  }
}
+ (CompareCardRequest*) defaultInstance {
  return defaultCompareCardRequestInstance;
}
- (CompareCardRequest*) defaultInstance {
  return defaultCompareCardRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasToUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasToUserId) {
    [output writeString:1 value:self.toUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasToUserId) {
    size += computeStringSize(1, self.toUserId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CompareCardRequest*) parseFromData:(NSData*) data {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromData:data] build];
}
+ (CompareCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompareCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromInputStream:input] build];
}
+ (CompareCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CompareCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardRequest*)[[[CompareCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardRequest_Builder*) builder {
  return [[[CompareCardRequest_Builder alloc] init] autorelease];
}
+ (CompareCardRequest_Builder*) builderWithPrototype:(CompareCardRequest*) prototype {
  return [[CompareCardRequest builder] mergeFrom:prototype];
}
- (CompareCardRequest_Builder*) builder {
  return [CompareCardRequest builder];
}
@end

@interface CompareCardRequest_Builder()
@property (retain) CompareCardRequest* result;
@end

@implementation CompareCardRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompareCardRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompareCardRequest_Builder*) clear {
  self.result = [[[CompareCardRequest alloc] init] autorelease];
  return self;
}
- (CompareCardRequest_Builder*) clone {
  return [CompareCardRequest builderWithPrototype:result];
}
- (CompareCardRequest*) defaultInstance {
  return [CompareCardRequest defaultInstance];
}
- (CompareCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompareCardRequest*) buildPartial {
  CompareCardRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompareCardRequest_Builder*) mergeFrom:(CompareCardRequest*) other {
  if (other == [CompareCardRequest defaultInstance]) {
    return self;
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompareCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompareCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setToUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (CompareCardRequest_Builder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (CompareCardRequest_Builder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
@end

@interface CompareCardResponse ()
@property (retain) NSMutableArray* mutableUserResultList;
@end

@implementation CompareCardResponse

@synthesize mutableUserResultList;
- (void) dealloc {
  self.mutableUserResultList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CompareCardResponse* defaultCompareCardResponseInstance = nil;
+ (void) initialize {
  if (self == [CompareCardResponse class]) {
    defaultCompareCardResponseInstance = [[CompareCardResponse alloc] init];
  }
}
+ (CompareCardResponse*) defaultInstance {
  return defaultCompareCardResponseInstance;
}
- (CompareCardResponse*) defaultInstance {
  return defaultCompareCardResponseInstance;
}
- (NSArray*) userResultList {
  return mutableUserResultList;
}
- (PBUserResult*) userResultAtIndex:(int32_t) index {
  id value = [mutableUserResultList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBUserResult* element in self.userResultList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBUserResult* element in self.userResultList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBUserResult* element in self.userResultList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CompareCardResponse*) parseFromData:(NSData*) data {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromData:data] build];
}
+ (CompareCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompareCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromInputStream:input] build];
}
+ (CompareCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CompareCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompareCardResponse*)[[[CompareCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompareCardResponse_Builder*) builder {
  return [[[CompareCardResponse_Builder alloc] init] autorelease];
}
+ (CompareCardResponse_Builder*) builderWithPrototype:(CompareCardResponse*) prototype {
  return [[CompareCardResponse builder] mergeFrom:prototype];
}
- (CompareCardResponse_Builder*) builder {
  return [CompareCardResponse builder];
}
@end

@interface CompareCardResponse_Builder()
@property (retain) CompareCardResponse* result;
@end

@implementation CompareCardResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompareCardResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompareCardResponse_Builder*) clear {
  self.result = [[[CompareCardResponse alloc] init] autorelease];
  return self;
}
- (CompareCardResponse_Builder*) clone {
  return [CompareCardResponse builderWithPrototype:result];
}
- (CompareCardResponse*) defaultInstance {
  return [CompareCardResponse defaultInstance];
}
- (CompareCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompareCardResponse*) buildPartial {
  CompareCardResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompareCardResponse_Builder*) mergeFrom:(CompareCardResponse*) other {
  if (other == [CompareCardResponse defaultInstance]) {
    return self;
  }
  if (other.mutableUserResultList.count > 0) {
    if (result.mutableUserResultList == nil) {
      result.mutableUserResultList = [NSMutableArray array];
    }
    [result.mutableUserResultList addObjectsFromArray:other.mutableUserResultList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompareCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompareCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PBUserResult_Builder* subBuilder = [PBUserResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResult:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) userResultList {
  if (result.mutableUserResultList == nil) { return [NSArray array]; }
  return result.mutableUserResultList;
}
- (PBUserResult*) userResultAtIndex:(int32_t) index {
  return [result userResultAtIndex:index];
}
- (CompareCardResponse_Builder*) replaceUserResultAtIndex:(int32_t) index with:(PBUserResult*) value {
  [result.mutableUserResultList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CompareCardResponse_Builder*) addAllUserResult:(NSArray*) values {
  if (result.mutableUserResultList == nil) {
    result.mutableUserResultList = [NSMutableArray array];
  }
  [result.mutableUserResultList addObjectsFromArray:values];
  return self;
}
- (CompareCardResponse_Builder*) clearUserResultList {
  result.mutableUserResultList = nil;
  return self;
}
- (CompareCardResponse_Builder*) addUserResult:(PBUserResult*) value {
  if (result.mutableUserResultList == nil) {
    result.mutableUserResultList = [NSMutableArray array];
  }
  [result.mutableUserResultList addObject:value];
  return self;
}
@end

@interface ChangeCardRequest ()
@property int32_t cardId;
@end

@implementation ChangeCardRequest

- (BOOL) hasCardId {
  return !!hasCardId_;
}
- (void) setHasCardId:(BOOL) value {
  hasCardId_ = !!value;
}
@synthesize cardId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cardId = 0;
  }
  return self;
}
static ChangeCardRequest* defaultChangeCardRequestInstance = nil;
+ (void) initialize {
  if (self == [ChangeCardRequest class]) {
    defaultChangeCardRequestInstance = [[ChangeCardRequest alloc] init];
  }
}
+ (ChangeCardRequest*) defaultInstance {
  return defaultChangeCardRequestInstance;
}
- (ChangeCardRequest*) defaultInstance {
  return defaultChangeCardRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCardId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCardId) {
    [output writeInt32:1 value:self.cardId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCardId) {
    size += computeInt32Size(1, self.cardId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ChangeCardRequest*) parseFromData:(NSData*) data {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromData:data] build];
}
+ (ChangeCardRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromInputStream:input] build];
}
+ (ChangeCardRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ChangeCardRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardRequest*)[[[ChangeCardRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardRequest_Builder*) builder {
  return [[[ChangeCardRequest_Builder alloc] init] autorelease];
}
+ (ChangeCardRequest_Builder*) builderWithPrototype:(ChangeCardRequest*) prototype {
  return [[ChangeCardRequest builder] mergeFrom:prototype];
}
- (ChangeCardRequest_Builder*) builder {
  return [ChangeCardRequest builder];
}
@end

@interface ChangeCardRequest_Builder()
@property (retain) ChangeCardRequest* result;
@end

@implementation ChangeCardRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ChangeCardRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ChangeCardRequest_Builder*) clear {
  self.result = [[[ChangeCardRequest alloc] init] autorelease];
  return self;
}
- (ChangeCardRequest_Builder*) clone {
  return [ChangeCardRequest builderWithPrototype:result];
}
- (ChangeCardRequest*) defaultInstance {
  return [ChangeCardRequest defaultInstance];
}
- (ChangeCardRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChangeCardRequest*) buildPartial {
  ChangeCardRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ChangeCardRequest_Builder*) mergeFrom:(ChangeCardRequest*) other {
  if (other == [ChangeCardRequest defaultInstance]) {
    return self;
  }
  if (other.hasCardId) {
    [self setCardId:other.cardId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChangeCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChangeCardRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCardId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCardId {
  return result.hasCardId;
}
- (int32_t) cardId {
  return result.cardId;
}
- (ChangeCardRequest_Builder*) setCardId:(int32_t) value {
  result.hasCardId = YES;
  result.cardId = value;
  return self;
}
- (ChangeCardRequest_Builder*) clearCardId {
  result.hasCardId = NO;
  result.cardId = 0;
  return self;
}
@end

@interface ChangeCardResponse ()
@property int32_t oldCardId;
@property (retain) PBPoker* newPoker;
@property PBZJHCardType cardType;
@end

@implementation ChangeCardResponse

- (BOOL) hasOldCardId {
  return !!hasOldCardId_;
}
- (void) setHasOldCardId:(BOOL) value {
  hasOldCardId_ = !!value;
}
@synthesize oldCardId;
- (BOOL) hasNewPoker {
  return !!hasNewPoker_;
}
- (void) setHasNewPoker:(BOOL) value {
  hasNewPoker_ = !!value;
}
@synthesize newPoker;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) value {
  hasCardType_ = !!value;
}
@synthesize cardType;
- (void) dealloc {
  self.newPoker = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.oldCardId = 0;
    self.newPoker = [PBPoker defaultInstance];
    self.cardType = PBZJHCardTypeUnknow;
  }
  return self;
}
static ChangeCardResponse* defaultChangeCardResponseInstance = nil;
+ (void) initialize {
  if (self == [ChangeCardResponse class]) {
    defaultChangeCardResponseInstance = [[ChangeCardResponse alloc] init];
  }
}
+ (ChangeCardResponse*) defaultInstance {
  return defaultChangeCardResponseInstance;
}
- (ChangeCardResponse*) defaultInstance {
  return defaultChangeCardResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOldCardId) {
    return NO;
  }
  if (!self.hasNewPoker) {
    return NO;
  }
  if (!self.newPoker.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOldCardId) {
    [output writeInt32:1 value:self.oldCardId];
  }
  if (self.hasNewPoker) {
    [output writeMessage:2 value:self.newPoker];
  }
  if (self.hasCardType) {
    [output writeEnum:3 value:self.cardType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOldCardId) {
    size += computeInt32Size(1, self.oldCardId);
  }
  if (self.hasNewPoker) {
    size += computeMessageSize(2, self.newPoker);
  }
  if (self.hasCardType) {
    size += computeEnumSize(3, self.cardType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ChangeCardResponse*) parseFromData:(NSData*) data {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromData:data] build];
}
+ (ChangeCardResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromInputStream:input] build];
}
+ (ChangeCardResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ChangeCardResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeCardResponse*)[[[ChangeCardResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeCardResponse_Builder*) builder {
  return [[[ChangeCardResponse_Builder alloc] init] autorelease];
}
+ (ChangeCardResponse_Builder*) builderWithPrototype:(ChangeCardResponse*) prototype {
  return [[ChangeCardResponse builder] mergeFrom:prototype];
}
- (ChangeCardResponse_Builder*) builder {
  return [ChangeCardResponse builder];
}
@end

@interface ChangeCardResponse_Builder()
@property (retain) ChangeCardResponse* result;
@end

@implementation ChangeCardResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ChangeCardResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ChangeCardResponse_Builder*) clear {
  self.result = [[[ChangeCardResponse alloc] init] autorelease];
  return self;
}
- (ChangeCardResponse_Builder*) clone {
  return [ChangeCardResponse builderWithPrototype:result];
}
- (ChangeCardResponse*) defaultInstance {
  return [ChangeCardResponse defaultInstance];
}
- (ChangeCardResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChangeCardResponse*) buildPartial {
  ChangeCardResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ChangeCardResponse_Builder*) mergeFrom:(ChangeCardResponse*) other {
  if (other == [ChangeCardResponse defaultInstance]) {
    return self;
  }
  if (other.hasOldCardId) {
    [self setOldCardId:other.oldCardId];
  }
  if (other.hasNewPoker) {
    [self mergeNewPoker:other.newPoker];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChangeCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChangeCardResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOldCardId:[input readInt32]];
        break;
      }
      case 18: {
        PBPoker_Builder* subBuilder = [PBPoker builder];
        if (self.hasNewPoker) {
          [subBuilder mergeFrom:self.newPoker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNewPoker:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (PBZJHCardTypeIsValidValue(value)) {
          [self setCardType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasOldCardId {
  return result.hasOldCardId;
}
- (int32_t) oldCardId {
  return result.oldCardId;
}
- (ChangeCardResponse_Builder*) setOldCardId:(int32_t) value {
  result.hasOldCardId = YES;
  result.oldCardId = value;
  return self;
}
- (ChangeCardResponse_Builder*) clearOldCardId {
  result.hasOldCardId = NO;
  result.oldCardId = 0;
  return self;
}
- (BOOL) hasNewPoker {
  return result.hasNewPoker;
}
- (PBPoker*) newPoker {
  return result.newPoker;
}
- (ChangeCardResponse_Builder*) setNewPoker:(PBPoker*) value {
  result.hasNewPoker = YES;
  result.newPoker = value;
  return self;
}
- (ChangeCardResponse_Builder*) setNewPokerBuilder:(PBPoker_Builder*) builderForValue {
  return [self setNewPoker:[builderForValue build]];
}
- (ChangeCardResponse_Builder*) mergeNewPoker:(PBPoker*) value {
  if (result.hasNewPoker &&
      result.newPoker != [PBPoker defaultInstance]) {
    result.newPoker =
      [[[PBPoker builderWithPrototype:result.newPoker] mergeFrom:value] buildPartial];
  } else {
    result.newPoker = value;
  }
  result.hasNewPoker = YES;
  return self;
}
- (ChangeCardResponse_Builder*) clearNewPoker {
  result.hasNewPoker = NO;
  result.newPoker = [PBPoker defaultInstance];
  return self;
}
- (BOOL) hasCardType {
  return result.hasCardType;
}
- (PBZJHCardType) cardType {
  return result.cardType;
}
- (ChangeCardResponse_Builder*) setCardType:(PBZJHCardType) value {
  result.hasCardType = YES;
  result.cardType = value;
  return self;
}
- (ChangeCardResponse_Builder*) clearCardType {
  result.hasCardType = NO;
  result.cardType = PBZJHCardTypeUnknow;
  return self;
}
@end

@interface JoinGameRequest ()
@property (retain) NSString* userId;
@property (retain) NSString* gameId;
@property int32_t autoNew;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property (retain) NSMutableArray* mutableExcludeSessionIdList;
@property int64_t sessionToBeChange;
@property BOOL gender;
@property BOOL isRobot;
@property int32_t targetSessionId;
@property int32_t guessDifficultLevel;
@property (retain) NSString* roomId;
@property (retain) NSString* roomName;
@property (retain) NSMutableArray* mutableSnsUsersList;
@property (retain) NSString* location;
@property int32_t userLevel;
@property (retain) PBGameUser* user;
@property int32_t ruleType;
@property int32_t version;
@end

@implementation JoinGameRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasAutoNew {
  return !!hasAutoNew_;
}
- (void) setHasAutoNew:(BOOL) value {
  hasAutoNew_ = !!value;
}
@synthesize autoNew;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
@synthesize mutableExcludeSessionIdList;
- (BOOL) hasSessionToBeChange {
  return !!hasSessionToBeChange_;
}
- (void) setHasSessionToBeChange:(BOOL) value {
  hasSessionToBeChange_ = !!value;
}
@synthesize sessionToBeChange;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
- (BOOL) hasIsRobot {
  return !!hasIsRobot_;
}
- (void) setHasIsRobot:(BOOL) value {
  hasIsRobot_ = !!value;
}
- (BOOL) isRobot {
  return !!isRobot_;
}
- (void) setIsRobot:(BOOL) value {
  isRobot_ = !!value;
}
- (BOOL) hasTargetSessionId {
  return !!hasTargetSessionId_;
}
- (void) setHasTargetSessionId:(BOOL) value {
  hasTargetSessionId_ = !!value;
}
@synthesize targetSessionId;
- (BOOL) hasGuessDifficultLevel {
  return !!hasGuessDifficultLevel_;
}
- (void) setHasGuessDifficultLevel:(BOOL) value {
  hasGuessDifficultLevel_ = !!value;
}
@synthesize guessDifficultLevel;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) value {
  hasRoomName_ = !!value;
}
@synthesize roomName;
@synthesize mutableSnsUsersList;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value {
  hasLocation_ = !!value;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) value {
  hasUserLevel_ = !!value;
}
@synthesize userLevel;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value {
  hasUser_ = !!value;
}
@synthesize user;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) value {
  hasRuleType_ = !!value;
}
@synthesize ruleType;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (void) dealloc {
  self.userId = nil;
  self.gameId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.mutableExcludeSessionIdList = nil;
  self.roomId = nil;
  self.roomName = nil;
  self.mutableSnsUsersList = nil;
  self.location = nil;
  self.user = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.gameId = @"";
    self.autoNew = 0;
    self.nickName = @"";
    self.avatar = @"";
    self.sessionToBeChange = 0L;
    self.gender = NO;
    self.isRobot = NO;
    self.targetSessionId = 0;
    self.guessDifficultLevel = 0;
    self.roomId = @"";
    self.roomName = @"";
    self.location = @"";
    self.userLevel = 0;
    self.user = [PBGameUser defaultInstance];
    self.ruleType = 0;
    self.version = 1;
  }
  return self;
}
static JoinGameRequest* defaultJoinGameRequestInstance = nil;
+ (void) initialize {
  if (self == [JoinGameRequest class]) {
    defaultJoinGameRequestInstance = [[JoinGameRequest alloc] init];
  }
}
+ (JoinGameRequest*) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (JoinGameRequest*) defaultInstance {
  return defaultJoinGameRequestInstance;
}
- (NSArray*) excludeSessionIdList {
  return mutableExcludeSessionIdList;
}
- (int64_t) excludeSessionIdAtIndex:(int32_t) index {
  id value = [mutableExcludeSessionIdList objectAtIndex:index];
  return [value longLongValue];
}
- (NSArray*) snsUsersList {
  return mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  id value = [mutableSnsUsersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  for (PBSNSUser* element in self.snsUsersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasAutoNew) {
    [output writeInt32:3 value:self.autoNew];
  }
  if (self.hasNickName) {
    [output writeString:4 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:5 value:self.avatar];
  }
  for (NSNumber* value in self.mutableExcludeSessionIdList) {
    [output writeInt64:6 value:[value longLongValue]];
  }
  if (self.hasSessionToBeChange) {
    [output writeInt64:7 value:self.sessionToBeChange];
  }
  if (self.hasGender) {
    [output writeBool:8 value:self.gender];
  }
  if (self.hasIsRobot) {
    [output writeBool:9 value:self.isRobot];
  }
  if (self.hasTargetSessionId) {
    [output writeInt32:10 value:self.targetSessionId];
  }
  if (self.hasGuessDifficultLevel) {
    [output writeInt32:11 value:self.guessDifficultLevel];
  }
  if (self.hasRoomId) {
    [output writeString:12 value:self.roomId];
  }
  if (self.hasRoomName) {
    [output writeString:13 value:self.roomName];
  }
  for (PBSNSUser* element in self.snsUsersList) {
    [output writeMessage:14 value:element];
  }
  if (self.hasLocation) {
    [output writeString:15 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:16 value:self.userLevel];
  }
  if (self.hasUser) {
    [output writeMessage:100 value:self.user];
  }
  if (self.hasRuleType) {
    [output writeInt32:101 value:self.ruleType];
  }
  if (self.hasVersion) {
    [output writeInt32:102 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasGameId) {
    size += computeStringSize(2, self.gameId);
  }
  if (self.hasAutoNew) {
    size += computeInt32Size(3, self.autoNew);
  }
  if (self.hasNickName) {
    size += computeStringSize(4, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(5, self.avatar);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableExcludeSessionIdList) {
      dataSize += computeInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    size += 1 * self.mutableExcludeSessionIdList.count;
  }
  if (self.hasSessionToBeChange) {
    size += computeInt64Size(7, self.sessionToBeChange);
  }
  if (self.hasGender) {
    size += computeBoolSize(8, self.gender);
  }
  if (self.hasIsRobot) {
    size += computeBoolSize(9, self.isRobot);
  }
  if (self.hasTargetSessionId) {
    size += computeInt32Size(10, self.targetSessionId);
  }
  if (self.hasGuessDifficultLevel) {
    size += computeInt32Size(11, self.guessDifficultLevel);
  }
  if (self.hasRoomId) {
    size += computeStringSize(12, self.roomId);
  }
  if (self.hasRoomName) {
    size += computeStringSize(13, self.roomName);
  }
  for (PBSNSUser* element in self.snsUsersList) {
    size += computeMessageSize(14, element);
  }
  if (self.hasLocation) {
    size += computeStringSize(15, self.location);
  }
  if (self.hasUserLevel) {
    size += computeInt32Size(16, self.userLevel);
  }
  if (self.hasUser) {
    size += computeMessageSize(100, self.user);
  }
  if (self.hasRuleType) {
    size += computeInt32Size(101, self.ruleType);
  }
  if (self.hasVersion) {
    size += computeInt32Size(102, self.version);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (JoinGameRequest*) parseFromData:(NSData*) data {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data] build];
}
+ (JoinGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input] build];
}
+ (JoinGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameRequest*)[[[JoinGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameRequest_Builder*) builder {
  return [[[JoinGameRequest_Builder alloc] init] autorelease];
}
+ (JoinGameRequest_Builder*) builderWithPrototype:(JoinGameRequest*) prototype {
  return [[JoinGameRequest builder] mergeFrom:prototype];
}
- (JoinGameRequest_Builder*) builder {
  return [JoinGameRequest builder];
}
@end

@interface JoinGameRequest_Builder()
@property (retain) JoinGameRequest* result;
@end

@implementation JoinGameRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[JoinGameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (JoinGameRequest_Builder*) clear {
  self.result = [[[JoinGameRequest alloc] init] autorelease];
  return self;
}
- (JoinGameRequest_Builder*) clone {
  return [JoinGameRequest builderWithPrototype:result];
}
- (JoinGameRequest*) defaultInstance {
  return [JoinGameRequest defaultInstance];
}
- (JoinGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameRequest*) buildPartial {
  JoinGameRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (JoinGameRequest_Builder*) mergeFrom:(JoinGameRequest*) other {
  if (other == [JoinGameRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasAutoNew) {
    [self setAutoNew:other.autoNew];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.mutableExcludeSessionIdList.count > 0) {
    if (result.mutableExcludeSessionIdList == nil) {
      result.mutableExcludeSessionIdList = [NSMutableArray array];
    }
    [result.mutableExcludeSessionIdList addObjectsFromArray:other.mutableExcludeSessionIdList];
  }
  if (other.hasSessionToBeChange) {
    [self setSessionToBeChange:other.sessionToBeChange];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasIsRobot) {
    [self setIsRobot:other.isRobot];
  }
  if (other.hasTargetSessionId) {
    [self setTargetSessionId:other.targetSessionId];
  }
  if (other.hasGuessDifficultLevel) {
    [self setGuessDifficultLevel:other.guessDifficultLevel];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  if (other.mutableSnsUsersList.count > 0) {
    if (result.mutableSnsUsersList == nil) {
      result.mutableSnsUsersList = [NSMutableArray array];
    }
    [result.mutableSnsUsersList addObjectsFromArray:other.mutableSnsUsersList];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        [self setAutoNew:[input readInt32]];
        break;
      }
      case 34: {
        [self setNickName:[input readString]];
        break;
      }
      case 42: {
        [self setAvatar:[input readString]];
        break;
      }
      case 48: {
        [self addExcludeSessionId:[input readInt64]];
        break;
      }
      case 56: {
        [self setSessionToBeChange:[input readInt64]];
        break;
      }
      case 64: {
        [self setGender:[input readBool]];
        break;
      }
      case 72: {
        [self setIsRobot:[input readBool]];
        break;
      }
      case 80: {
        [self setTargetSessionId:[input readInt32]];
        break;
      }
      case 88: {
        [self setGuessDifficultLevel:[input readInt32]];
        break;
      }
      case 98: {
        [self setRoomId:[input readString]];
        break;
      }
      case 106: {
        [self setRoomName:[input readString]];
        break;
      }
      case 114: {
        PBSNSUser_Builder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        [self setLocation:[input readString]];
        break;
      }
      case 128: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 802: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 808: {
        [self setRuleType:[input readInt32]];
        break;
      }
      case 816: {
        [self setVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (JoinGameRequest_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (JoinGameRequest_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasAutoNew {
  return result.hasAutoNew;
}
- (int32_t) autoNew {
  return result.autoNew;
}
- (JoinGameRequest_Builder*) setAutoNew:(int32_t) value {
  result.hasAutoNew = YES;
  result.autoNew = value;
  return self;
}
- (JoinGameRequest_Builder*) clearAutoNew {
  result.hasAutoNew = NO;
  result.autoNew = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (JoinGameRequest_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (JoinGameRequest_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (JoinGameRequest_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (JoinGameRequest_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (NSArray*) excludeSessionIdList {
  if (result.mutableExcludeSessionIdList == nil) {
    return [NSArray array];
  }
  return result.mutableExcludeSessionIdList;
}
- (int64_t) excludeSessionIdAtIndex:(int32_t) index {
  return [result excludeSessionIdAtIndex:index];
}
- (JoinGameRequest_Builder*) replaceExcludeSessionIdAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableExcludeSessionIdList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (JoinGameRequest_Builder*) addExcludeSessionId:(int64_t) value {
  if (result.mutableExcludeSessionIdList == nil) {
    result.mutableExcludeSessionIdList = [NSMutableArray array];
  }
  [result.mutableExcludeSessionIdList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (JoinGameRequest_Builder*) addAllExcludeSessionId:(NSArray*) values {
  if (result.mutableExcludeSessionIdList == nil) {
    result.mutableExcludeSessionIdList = [NSMutableArray array];
  }
  [result.mutableExcludeSessionIdList addObjectsFromArray:values];
  return self;
}
- (JoinGameRequest_Builder*) clearExcludeSessionIdList {
  result.mutableExcludeSessionIdList = nil;
  return self;
}
- (BOOL) hasSessionToBeChange {
  return result.hasSessionToBeChange;
}
- (int64_t) sessionToBeChange {
  return result.sessionToBeChange;
}
- (JoinGameRequest_Builder*) setSessionToBeChange:(int64_t) value {
  result.hasSessionToBeChange = YES;
  result.sessionToBeChange = value;
  return self;
}
- (JoinGameRequest_Builder*) clearSessionToBeChange {
  result.hasSessionToBeChange = NO;
  result.sessionToBeChange = 0L;
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (JoinGameRequest_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (BOOL) hasIsRobot {
  return result.hasIsRobot;
}
- (BOOL) isRobot {
  return result.isRobot;
}
- (JoinGameRequest_Builder*) setIsRobot:(BOOL) value {
  result.hasIsRobot = YES;
  result.isRobot = value;
  return self;
}
- (JoinGameRequest_Builder*) clearIsRobot {
  result.hasIsRobot = NO;
  result.isRobot = NO;
  return self;
}
- (BOOL) hasTargetSessionId {
  return result.hasTargetSessionId;
}
- (int32_t) targetSessionId {
  return result.targetSessionId;
}
- (JoinGameRequest_Builder*) setTargetSessionId:(int32_t) value {
  result.hasTargetSessionId = YES;
  result.targetSessionId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearTargetSessionId {
  result.hasTargetSessionId = NO;
  result.targetSessionId = 0;
  return self;
}
- (BOOL) hasGuessDifficultLevel {
  return result.hasGuessDifficultLevel;
}
- (int32_t) guessDifficultLevel {
  return result.guessDifficultLevel;
}
- (JoinGameRequest_Builder*) setGuessDifficultLevel:(int32_t) value {
  result.hasGuessDifficultLevel = YES;
  result.guessDifficultLevel = value;
  return self;
}
- (JoinGameRequest_Builder*) clearGuessDifficultLevel {
  result.hasGuessDifficultLevel = NO;
  result.guessDifficultLevel = 0;
  return self;
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (NSString*) roomId {
  return result.roomId;
}
- (JoinGameRequest_Builder*) setRoomId:(NSString*) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (JoinGameRequest_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = @"";
  return self;
}
- (BOOL) hasRoomName {
  return result.hasRoomName;
}
- (NSString*) roomName {
  return result.roomName;
}
- (JoinGameRequest_Builder*) setRoomName:(NSString*) value {
  result.hasRoomName = YES;
  result.roomName = value;
  return self;
}
- (JoinGameRequest_Builder*) clearRoomName {
  result.hasRoomName = NO;
  result.roomName = @"";
  return self;
}
- (NSArray*) snsUsersList {
  if (result.mutableSnsUsersList == nil) { return [NSArray array]; }
  return result.mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  return [result snsUsersAtIndex:index];
}
- (JoinGameRequest_Builder*) replaceSnsUsersAtIndex:(int32_t) index with:(PBSNSUser*) value {
  [result.mutableSnsUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (JoinGameRequest_Builder*) addAllSnsUsers:(NSArray*) values {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObjectsFromArray:values];
  return self;
}
- (JoinGameRequest_Builder*) clearSnsUsersList {
  result.mutableSnsUsersList = nil;
  return self;
}
- (JoinGameRequest_Builder*) addSnsUsers:(PBSNSUser*) value {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObject:value];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (NSString*) location {
  return result.location;
}
- (JoinGameRequest_Builder*) setLocation:(NSString*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (JoinGameRequest_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return result.hasUserLevel;
}
- (int32_t) userLevel {
  return result.userLevel;
}
- (JoinGameRequest_Builder*) setUserLevel:(int32_t) value {
  result.hasUserLevel = YES;
  result.userLevel = value;
  return self;
}
- (JoinGameRequest_Builder*) clearUserLevel {
  result.hasUserLevel = NO;
  result.userLevel = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (PBGameUser*) user {
  return result.user;
}
- (JoinGameRequest_Builder*) setUser:(PBGameUser*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (JoinGameRequest_Builder*) setUserBuilder:(PBGameUser_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (JoinGameRequest_Builder*) mergeUser:(PBGameUser*) value {
  if (result.hasUser &&
      result.user != [PBGameUser defaultInstance]) {
    result.user =
      [[[PBGameUser builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (JoinGameRequest_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasRuleType {
  return result.hasRuleType;
}
- (int32_t) ruleType {
  return result.ruleType;
}
- (JoinGameRequest_Builder*) setRuleType:(int32_t) value {
  result.hasRuleType = YES;
  result.ruleType = value;
  return self;
}
- (JoinGameRequest_Builder*) clearRuleType {
  result.hasRuleType = NO;
  result.ruleType = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (JoinGameRequest_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (JoinGameRequest_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 1;
  return self;
}
@end

@interface JoinGameResponse ()
@property (retain) PBGameSession* gameSession;
@property (retain) PBZJHGameState* zjhGameState;
@end

@implementation JoinGameResponse

- (BOOL) hasGameSession {
  return !!hasGameSession_;
}
- (void) setHasGameSession:(BOOL) value {
  hasGameSession_ = !!value;
}
@synthesize gameSession;
- (BOOL) hasZjhGameState {
  return !!hasZjhGameState_;
}
- (void) setHasZjhGameState:(BOOL) value {
  hasZjhGameState_ = !!value;
}
@synthesize zjhGameState;
- (void) dealloc {
  self.gameSession = nil;
  self.zjhGameState = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameSession = [PBGameSession defaultInstance];
    self.zjhGameState = [PBZJHGameState defaultInstance];
  }
  return self;
}
static JoinGameResponse* defaultJoinGameResponseInstance = nil;
+ (void) initialize {
  if (self == [JoinGameResponse class]) {
    defaultJoinGameResponseInstance = [[JoinGameResponse alloc] init];
  }
}
+ (JoinGameResponse*) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (JoinGameResponse*) defaultInstance {
  return defaultJoinGameResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameSession) {
    return NO;
  }
  if (!self.gameSession.isInitialized) {
    return NO;
  }
  if (self.hasZjhGameState) {
    if (!self.zjhGameState.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSession) {
    [output writeMessage:1 value:self.gameSession];
  }
  if (self.hasZjhGameState) {
    [output writeMessage:11 value:self.zjhGameState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameSession) {
    size += computeMessageSize(1, self.gameSession);
  }
  if (self.hasZjhGameState) {
    size += computeMessageSize(11, self.zjhGameState);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (JoinGameResponse*) parseFromData:(NSData*) data {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data] build];
}
+ (JoinGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input] build];
}
+ (JoinGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (JoinGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JoinGameResponse*)[[[JoinGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JoinGameResponse_Builder*) builder {
  return [[[JoinGameResponse_Builder alloc] init] autorelease];
}
+ (JoinGameResponse_Builder*) builderWithPrototype:(JoinGameResponse*) prototype {
  return [[JoinGameResponse builder] mergeFrom:prototype];
}
- (JoinGameResponse_Builder*) builder {
  return [JoinGameResponse builder];
}
@end

@interface JoinGameResponse_Builder()
@property (retain) JoinGameResponse* result;
@end

@implementation JoinGameResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[JoinGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (JoinGameResponse_Builder*) clear {
  self.result = [[[JoinGameResponse alloc] init] autorelease];
  return self;
}
- (JoinGameResponse_Builder*) clone {
  return [JoinGameResponse builderWithPrototype:result];
}
- (JoinGameResponse*) defaultInstance {
  return [JoinGameResponse defaultInstance];
}
- (JoinGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JoinGameResponse*) buildPartial {
  JoinGameResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (JoinGameResponse_Builder*) mergeFrom:(JoinGameResponse*) other {
  if (other == [JoinGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasGameSession) {
    [self mergeGameSession:other.gameSession];
  }
  if (other.hasZjhGameState) {
    [self mergeZjhGameState:other.zjhGameState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JoinGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JoinGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        if (self.hasGameSession) {
          [subBuilder mergeFrom:self.gameSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSession:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        PBZJHGameState_Builder* subBuilder = [PBZJHGameState builder];
        if (self.hasZjhGameState) {
          [subBuilder mergeFrom:self.zjhGameState];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhGameState:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSession {
  return result.hasGameSession;
}
- (PBGameSession*) gameSession {
  return result.gameSession;
}
- (JoinGameResponse_Builder*) setGameSession:(PBGameSession*) value {
  result.hasGameSession = YES;
  result.gameSession = value;
  return self;
}
- (JoinGameResponse_Builder*) setGameSessionBuilder:(PBGameSession_Builder*) builderForValue {
  return [self setGameSession:[builderForValue build]];
}
- (JoinGameResponse_Builder*) mergeGameSession:(PBGameSession*) value {
  if (result.hasGameSession &&
      result.gameSession != [PBGameSession defaultInstance]) {
    result.gameSession =
      [[[PBGameSession builderWithPrototype:result.gameSession] mergeFrom:value] buildPartial];
  } else {
    result.gameSession = value;
  }
  result.hasGameSession = YES;
  return self;
}
- (JoinGameResponse_Builder*) clearGameSession {
  result.hasGameSession = NO;
  result.gameSession = [PBGameSession defaultInstance];
  return self;
}
- (BOOL) hasZjhGameState {
  return result.hasZjhGameState;
}
- (PBZJHGameState*) zjhGameState {
  return result.zjhGameState;
}
- (JoinGameResponse_Builder*) setZjhGameState:(PBZJHGameState*) value {
  result.hasZjhGameState = YES;
  result.zjhGameState = value;
  return self;
}
- (JoinGameResponse_Builder*) setZjhGameStateBuilder:(PBZJHGameState_Builder*) builderForValue {
  return [self setZjhGameState:[builderForValue build]];
}
- (JoinGameResponse_Builder*) mergeZjhGameState:(PBZJHGameState*) value {
  if (result.hasZjhGameState &&
      result.zjhGameState != [PBZJHGameState defaultInstance]) {
    result.zjhGameState =
      [[[PBZJHGameState builderWithPrototype:result.zjhGameState] mergeFrom:value] buildPartial];
  } else {
    result.zjhGameState = value;
  }
  result.hasZjhGameState = YES;
  return self;
}
- (JoinGameResponse_Builder*) clearZjhGameState {
  result.hasZjhGameState = NO;
  result.zjhGameState = [PBZJHGameState defaultInstance];
  return self;
}
@end

@interface StartGameRequest ()
@end

@implementation StartGameRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static StartGameRequest* defaultStartGameRequestInstance = nil;
+ (void) initialize {
  if (self == [StartGameRequest class]) {
    defaultStartGameRequestInstance = [[StartGameRequest alloc] init];
  }
}
+ (StartGameRequest*) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (StartGameRequest*) defaultInstance {
  return defaultStartGameRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartGameRequest*) parseFromData:(NSData*) data {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data] build];
}
+ (StartGameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input] build];
}
+ (StartGameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameRequest*)[[[StartGameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameRequest_Builder*) builder {
  return [[[StartGameRequest_Builder alloc] init] autorelease];
}
+ (StartGameRequest_Builder*) builderWithPrototype:(StartGameRequest*) prototype {
  return [[StartGameRequest builder] mergeFrom:prototype];
}
- (StartGameRequest_Builder*) builder {
  return [StartGameRequest builder];
}
@end

@interface StartGameRequest_Builder()
@property (retain) StartGameRequest* result;
@end

@implementation StartGameRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartGameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartGameRequest_Builder*) clear {
  self.result = [[[StartGameRequest alloc] init] autorelease];
  return self;
}
- (StartGameRequest_Builder*) clone {
  return [StartGameRequest builderWithPrototype:result];
}
- (StartGameRequest*) defaultInstance {
  return [StartGameRequest defaultInstance];
}
- (StartGameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameRequest*) buildPartial {
  StartGameRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartGameRequest_Builder*) mergeFrom:(StartGameRequest*) other {
  if (other == [StartGameRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface StartGameResponse ()
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@end

@implementation StartGameResponse

- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (void) dealloc {
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
  }
  return self;
}
static StartGameResponse* defaultStartGameResponseInstance = nil;
+ (void) initialize {
  if (self == [StartGameResponse class]) {
    defaultStartGameResponseInstance = [[StartGameResponse alloc] init];
  }
}
+ (StartGameResponse*) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (StartGameResponse*) defaultInstance {
  return defaultStartGameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(6, self.nextPlayUserId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartGameResponse*) parseFromData:(NSData*) data {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data] build];
}
+ (StartGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input] build];
}
+ (StartGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (StartGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartGameResponse*)[[[StartGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartGameResponse_Builder*) builder {
  return [[[StartGameResponse_Builder alloc] init] autorelease];
}
+ (StartGameResponse_Builder*) builderWithPrototype:(StartGameResponse*) prototype {
  return [[StartGameResponse builder] mergeFrom:prototype];
}
- (StartGameResponse_Builder*) builder {
  return [StartGameResponse builder];
}
@end

@interface StartGameResponse_Builder()
@property (retain) StartGameResponse* result;
@end

@implementation StartGameResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartGameResponse_Builder*) clear {
  self.result = [[[StartGameResponse alloc] init] autorelease];
  return self;
}
- (StartGameResponse_Builder*) clone {
  return [StartGameResponse builderWithPrototype:result];
}
- (StartGameResponse*) defaultInstance {
  return [StartGameResponse defaultInstance];
}
- (StartGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartGameResponse*) buildPartial {
  StartGameResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartGameResponse_Builder*) mergeFrom:(StartGameResponse*) other {
  if (other == [StartGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (StartGameResponse_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (StartGameResponse_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (StartGameResponse_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (StartGameResponse_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
@end

@interface RoomNotificationRequest ()
@property (retain) NSMutableArray* mutableSessionsChangedList;
@property (retain) NSMutableArray* mutableSessionsAddedList;
@property (retain) NSMutableArray* mutableSessionIdsDeletedList;
@end

@implementation RoomNotificationRequest

@synthesize mutableSessionsChangedList;
@synthesize mutableSessionsAddedList;
@synthesize mutableSessionIdsDeletedList;
- (void) dealloc {
  self.mutableSessionsChangedList = nil;
  self.mutableSessionsAddedList = nil;
  self.mutableSessionIdsDeletedList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RoomNotificationRequest* defaultRoomNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RoomNotificationRequest class]) {
    defaultRoomNotificationRequestInstance = [[RoomNotificationRequest alloc] init];
  }
}
+ (RoomNotificationRequest*) defaultInstance {
  return defaultRoomNotificationRequestInstance;
}
- (RoomNotificationRequest*) defaultInstance {
  return defaultRoomNotificationRequestInstance;
}
- (NSArray*) sessionsChangedList {
  return mutableSessionsChangedList;
}
- (PBGameSessionChanged*) sessionsChangedAtIndex:(int32_t) index {
  id value = [mutableSessionsChangedList objectAtIndex:index];
  return value;
}
- (NSArray*) sessionsAddedList {
  return mutableSessionsAddedList;
}
- (PBGameSession*) sessionsAddedAtIndex:(int32_t) index {
  id value = [mutableSessionsAddedList objectAtIndex:index];
  return value;
}
- (NSArray*) sessionIdsDeletedList {
  return mutableSessionIdsDeletedList;
}
- (int32_t) sessionIdsDeletedAtIndex:(int32_t) index {
  id value = [mutableSessionIdsDeletedList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  for (PBGameSessionChanged* element in self.sessionsChangedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBGameSession* element in self.sessionsAddedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBGameSessionChanged* element in self.sessionsChangedList) {
    [output writeMessage:1 value:element];
  }
  for (PBGameSession* element in self.sessionsAddedList) {
    [output writeMessage:2 value:element];
  }
  for (NSNumber* value in self.mutableSessionIdsDeletedList) {
    [output writeInt32:3 value:[value intValue]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBGameSessionChanged* element in self.sessionsChangedList) {
    size += computeMessageSize(1, element);
  }
  for (PBGameSession* element in self.sessionsAddedList) {
    size += computeMessageSize(2, element);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableSessionIdsDeletedList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableSessionIdsDeletedList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomNotificationRequest*) parseFromData:(NSData*) data {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromData:data] build];
}
+ (RoomNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RoomNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RoomNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationRequest*)[[[RoomNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationRequest_Builder*) builder {
  return [[[RoomNotificationRequest_Builder alloc] init] autorelease];
}
+ (RoomNotificationRequest_Builder*) builderWithPrototype:(RoomNotificationRequest*) prototype {
  return [[RoomNotificationRequest builder] mergeFrom:prototype];
}
- (RoomNotificationRequest_Builder*) builder {
  return [RoomNotificationRequest builder];
}
@end

@interface RoomNotificationRequest_Builder()
@property (retain) RoomNotificationRequest* result;
@end

@implementation RoomNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomNotificationRequest_Builder*) clear {
  self.result = [[[RoomNotificationRequest alloc] init] autorelease];
  return self;
}
- (RoomNotificationRequest_Builder*) clone {
  return [RoomNotificationRequest builderWithPrototype:result];
}
- (RoomNotificationRequest*) defaultInstance {
  return [RoomNotificationRequest defaultInstance];
}
- (RoomNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomNotificationRequest*) buildPartial {
  RoomNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomNotificationRequest_Builder*) mergeFrom:(RoomNotificationRequest*) other {
  if (other == [RoomNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.mutableSessionsChangedList.count > 0) {
    if (result.mutableSessionsChangedList == nil) {
      result.mutableSessionsChangedList = [NSMutableArray array];
    }
    [result.mutableSessionsChangedList addObjectsFromArray:other.mutableSessionsChangedList];
  }
  if (other.mutableSessionsAddedList.count > 0) {
    if (result.mutableSessionsAddedList == nil) {
      result.mutableSessionsAddedList = [NSMutableArray array];
    }
    [result.mutableSessionsAddedList addObjectsFromArray:other.mutableSessionsAddedList];
  }
  if (other.mutableSessionIdsDeletedList.count > 0) {
    if (result.mutableSessionIdsDeletedList == nil) {
      result.mutableSessionIdsDeletedList = [NSMutableArray array];
    }
    [result.mutableSessionIdsDeletedList addObjectsFromArray:other.mutableSessionIdsDeletedList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameSessionChanged_Builder* subBuilder = [PBGameSessionChanged builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessionsChanged:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBGameSession_Builder* subBuilder = [PBGameSession builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSessionsAdded:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self addSessionIdsDeleted:[input readInt32]];
        break;
      }
    }
  }
}
- (NSArray*) sessionsChangedList {
  if (result.mutableSessionsChangedList == nil) { return [NSArray array]; }
  return result.mutableSessionsChangedList;
}
- (PBGameSessionChanged*) sessionsChangedAtIndex:(int32_t) index {
  return [result sessionsChangedAtIndex:index];
}
- (RoomNotificationRequest_Builder*) replaceSessionsChangedAtIndex:(int32_t) index with:(PBGameSessionChanged*) value {
  [result.mutableSessionsChangedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RoomNotificationRequest_Builder*) addAllSessionsChanged:(NSArray*) values {
  if (result.mutableSessionsChangedList == nil) {
    result.mutableSessionsChangedList = [NSMutableArray array];
  }
  [result.mutableSessionsChangedList addObjectsFromArray:values];
  return self;
}
- (RoomNotificationRequest_Builder*) clearSessionsChangedList {
  result.mutableSessionsChangedList = nil;
  return self;
}
- (RoomNotificationRequest_Builder*) addSessionsChanged:(PBGameSessionChanged*) value {
  if (result.mutableSessionsChangedList == nil) {
    result.mutableSessionsChangedList = [NSMutableArray array];
  }
  [result.mutableSessionsChangedList addObject:value];
  return self;
}
- (NSArray*) sessionsAddedList {
  if (result.mutableSessionsAddedList == nil) { return [NSArray array]; }
  return result.mutableSessionsAddedList;
}
- (PBGameSession*) sessionsAddedAtIndex:(int32_t) index {
  return [result sessionsAddedAtIndex:index];
}
- (RoomNotificationRequest_Builder*) replaceSessionsAddedAtIndex:(int32_t) index with:(PBGameSession*) value {
  [result.mutableSessionsAddedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RoomNotificationRequest_Builder*) addAllSessionsAdded:(NSArray*) values {
  if (result.mutableSessionsAddedList == nil) {
    result.mutableSessionsAddedList = [NSMutableArray array];
  }
  [result.mutableSessionsAddedList addObjectsFromArray:values];
  return self;
}
- (RoomNotificationRequest_Builder*) clearSessionsAddedList {
  result.mutableSessionsAddedList = nil;
  return self;
}
- (RoomNotificationRequest_Builder*) addSessionsAdded:(PBGameSession*) value {
  if (result.mutableSessionsAddedList == nil) {
    result.mutableSessionsAddedList = [NSMutableArray array];
  }
  [result.mutableSessionsAddedList addObject:value];
  return self;
}
- (NSArray*) sessionIdsDeletedList {
  if (result.mutableSessionIdsDeletedList == nil) {
    return [NSArray array];
  }
  return result.mutableSessionIdsDeletedList;
}
- (int32_t) sessionIdsDeletedAtIndex:(int32_t) index {
  return [result sessionIdsDeletedAtIndex:index];
}
- (RoomNotificationRequest_Builder*) replaceSessionIdsDeletedAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableSessionIdsDeletedList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (RoomNotificationRequest_Builder*) addSessionIdsDeleted:(int32_t) value {
  if (result.mutableSessionIdsDeletedList == nil) {
    result.mutableSessionIdsDeletedList = [NSMutableArray array];
  }
  [result.mutableSessionIdsDeletedList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (RoomNotificationRequest_Builder*) addAllSessionIdsDeleted:(NSArray*) values {
  if (result.mutableSessionIdsDeletedList == nil) {
    result.mutableSessionIdsDeletedList = [NSMutableArray array];
  }
  [result.mutableSessionIdsDeletedList addObjectsFromArray:values];
  return self;
}
- (RoomNotificationRequest_Builder*) clearSessionIdsDeletedList {
  result.mutableSessionIdsDeletedList = nil;
  return self;
}
@end

@interface RoomNotificationResponse ()
@end

@implementation RoomNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RoomNotificationResponse* defaultRoomNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RoomNotificationResponse class]) {
    defaultRoomNotificationResponseInstance = [[RoomNotificationResponse alloc] init];
  }
}
+ (RoomNotificationResponse*) defaultInstance {
  return defaultRoomNotificationResponseInstance;
}
- (RoomNotificationResponse*) defaultInstance {
  return defaultRoomNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomNotificationResponse*) parseFromData:(NSData*) data {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromData:data] build];
}
+ (RoomNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RoomNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RoomNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomNotificationResponse*)[[[RoomNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomNotificationResponse_Builder*) builder {
  return [[[RoomNotificationResponse_Builder alloc] init] autorelease];
}
+ (RoomNotificationResponse_Builder*) builderWithPrototype:(RoomNotificationResponse*) prototype {
  return [[RoomNotificationResponse builder] mergeFrom:prototype];
}
- (RoomNotificationResponse_Builder*) builder {
  return [RoomNotificationResponse builder];
}
@end

@interface RoomNotificationResponse_Builder()
@property (retain) RoomNotificationResponse* result;
@end

@implementation RoomNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomNotificationResponse_Builder*) clear {
  self.result = [[[RoomNotificationResponse alloc] init] autorelease];
  return self;
}
- (RoomNotificationResponse_Builder*) clone {
  return [RoomNotificationResponse builderWithPrototype:result];
}
- (RoomNotificationResponse*) defaultInstance {
  return [RoomNotificationResponse defaultInstance];
}
- (RoomNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomNotificationResponse*) buildPartial {
  RoomNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomNotificationResponse_Builder*) mergeFrom:(RoomNotificationResponse*) other {
  if (other == [RoomNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface RollDiceBeginNotificationRequest ()
@end

@implementation RollDiceBeginNotificationRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceBeginNotificationRequest* defaultRollDiceBeginNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RollDiceBeginNotificationRequest class]) {
    defaultRollDiceBeginNotificationRequestInstance = [[RollDiceBeginNotificationRequest alloc] init];
  }
}
+ (RollDiceBeginNotificationRequest*) defaultInstance {
  return defaultRollDiceBeginNotificationRequestInstance;
}
- (RollDiceBeginNotificationRequest*) defaultInstance {
  return defaultRollDiceBeginNotificationRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RollDiceBeginNotificationRequest*) parseFromData:(NSData*) data {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromData:data] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceBeginNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationRequest*)[[[RollDiceBeginNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationRequest_Builder*) builder {
  return [[[RollDiceBeginNotificationRequest_Builder alloc] init] autorelease];
}
+ (RollDiceBeginNotificationRequest_Builder*) builderWithPrototype:(RollDiceBeginNotificationRequest*) prototype {
  return [[RollDiceBeginNotificationRequest builder] mergeFrom:prototype];
}
- (RollDiceBeginNotificationRequest_Builder*) builder {
  return [RollDiceBeginNotificationRequest builder];
}
@end

@interface RollDiceBeginNotificationRequest_Builder()
@property (retain) RollDiceBeginNotificationRequest* result;
@end

@implementation RollDiceBeginNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RollDiceBeginNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RollDiceBeginNotificationRequest_Builder*) clear {
  self.result = [[[RollDiceBeginNotificationRequest alloc] init] autorelease];
  return self;
}
- (RollDiceBeginNotificationRequest_Builder*) clone {
  return [RollDiceBeginNotificationRequest builderWithPrototype:result];
}
- (RollDiceBeginNotificationRequest*) defaultInstance {
  return [RollDiceBeginNotificationRequest defaultInstance];
}
- (RollDiceBeginNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceBeginNotificationRequest*) buildPartial {
  RollDiceBeginNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RollDiceBeginNotificationRequest_Builder*) mergeFrom:(RollDiceBeginNotificationRequest*) other {
  if (other == [RollDiceBeginNotificationRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceBeginNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceBeginNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface RollDiceBeginNotificationResponse ()
@end

@implementation RollDiceBeginNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceBeginNotificationResponse* defaultRollDiceBeginNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RollDiceBeginNotificationResponse class]) {
    defaultRollDiceBeginNotificationResponseInstance = [[RollDiceBeginNotificationResponse alloc] init];
  }
}
+ (RollDiceBeginNotificationResponse*) defaultInstance {
  return defaultRollDiceBeginNotificationResponseInstance;
}
- (RollDiceBeginNotificationResponse*) defaultInstance {
  return defaultRollDiceBeginNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RollDiceBeginNotificationResponse*) parseFromData:(NSData*) data {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromData:data] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceBeginNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceBeginNotificationResponse*)[[[RollDiceBeginNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceBeginNotificationResponse_Builder*) builder {
  return [[[RollDiceBeginNotificationResponse_Builder alloc] init] autorelease];
}
+ (RollDiceBeginNotificationResponse_Builder*) builderWithPrototype:(RollDiceBeginNotificationResponse*) prototype {
  return [[RollDiceBeginNotificationResponse builder] mergeFrom:prototype];
}
- (RollDiceBeginNotificationResponse_Builder*) builder {
  return [RollDiceBeginNotificationResponse builder];
}
@end

@interface RollDiceBeginNotificationResponse_Builder()
@property (retain) RollDiceBeginNotificationResponse* result;
@end

@implementation RollDiceBeginNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RollDiceBeginNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RollDiceBeginNotificationResponse_Builder*) clear {
  self.result = [[[RollDiceBeginNotificationResponse alloc] init] autorelease];
  return self;
}
- (RollDiceBeginNotificationResponse_Builder*) clone {
  return [RollDiceBeginNotificationResponse builderWithPrototype:result];
}
- (RollDiceBeginNotificationResponse*) defaultInstance {
  return [RollDiceBeginNotificationResponse defaultInstance];
}
- (RollDiceBeginNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceBeginNotificationResponse*) buildPartial {
  RollDiceBeginNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RollDiceBeginNotificationResponse_Builder*) mergeFrom:(RollDiceBeginNotificationResponse*) other {
  if (other == [RollDiceBeginNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceBeginNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceBeginNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface RollDiceEndNotificationRequest ()
@property (retain) NSMutableArray* mutableUserDiceList;
@end

@implementation RollDiceEndNotificationRequest

@synthesize mutableUserDiceList;
- (void) dealloc {
  self.mutableUserDiceList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceEndNotificationRequest* defaultRollDiceEndNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [RollDiceEndNotificationRequest class]) {
    defaultRollDiceEndNotificationRequestInstance = [[RollDiceEndNotificationRequest alloc] init];
  }
}
+ (RollDiceEndNotificationRequest*) defaultInstance {
  return defaultRollDiceEndNotificationRequestInstance;
}
- (RollDiceEndNotificationRequest*) defaultInstance {
  return defaultRollDiceEndNotificationRequestInstance;
}
- (NSArray*) userDiceList {
  return mutableUserDiceList;
}
- (PBUserDice*) userDiceAtIndex:(int32_t) index {
  id value = [mutableUserDiceList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBUserDice* element in self.userDiceList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBUserDice* element in self.userDiceList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBUserDice* element in self.userDiceList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RollDiceEndNotificationRequest*) parseFromData:(NSData*) data {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromData:data] build];
}
+ (RollDiceEndNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (RollDiceEndNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceEndNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationRequest*)[[[RollDiceEndNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationRequest_Builder*) builder {
  return [[[RollDiceEndNotificationRequest_Builder alloc] init] autorelease];
}
+ (RollDiceEndNotificationRequest_Builder*) builderWithPrototype:(RollDiceEndNotificationRequest*) prototype {
  return [[RollDiceEndNotificationRequest builder] mergeFrom:prototype];
}
- (RollDiceEndNotificationRequest_Builder*) builder {
  return [RollDiceEndNotificationRequest builder];
}
@end

@interface RollDiceEndNotificationRequest_Builder()
@property (retain) RollDiceEndNotificationRequest* result;
@end

@implementation RollDiceEndNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RollDiceEndNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RollDiceEndNotificationRequest_Builder*) clear {
  self.result = [[[RollDiceEndNotificationRequest alloc] init] autorelease];
  return self;
}
- (RollDiceEndNotificationRequest_Builder*) clone {
  return [RollDiceEndNotificationRequest builderWithPrototype:result];
}
- (RollDiceEndNotificationRequest*) defaultInstance {
  return [RollDiceEndNotificationRequest defaultInstance];
}
- (RollDiceEndNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceEndNotificationRequest*) buildPartial {
  RollDiceEndNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RollDiceEndNotificationRequest_Builder*) mergeFrom:(RollDiceEndNotificationRequest*) other {
  if (other == [RollDiceEndNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.mutableUserDiceList.count > 0) {
    if (result.mutableUserDiceList == nil) {
      result.mutableUserDiceList = [NSMutableArray array];
    }
    [result.mutableUserDiceList addObjectsFromArray:other.mutableUserDiceList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceEndNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceEndNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserDice_Builder* subBuilder = [PBUserDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserDice:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) userDiceList {
  if (result.mutableUserDiceList == nil) { return [NSArray array]; }
  return result.mutableUserDiceList;
}
- (PBUserDice*) userDiceAtIndex:(int32_t) index {
  return [result userDiceAtIndex:index];
}
- (RollDiceEndNotificationRequest_Builder*) replaceUserDiceAtIndex:(int32_t) index with:(PBUserDice*) value {
  [result.mutableUserDiceList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RollDiceEndNotificationRequest_Builder*) addAllUserDice:(NSArray*) values {
  if (result.mutableUserDiceList == nil) {
    result.mutableUserDiceList = [NSMutableArray array];
  }
  [result.mutableUserDiceList addObjectsFromArray:values];
  return self;
}
- (RollDiceEndNotificationRequest_Builder*) clearUserDiceList {
  result.mutableUserDiceList = nil;
  return self;
}
- (RollDiceEndNotificationRequest_Builder*) addUserDice:(PBUserDice*) value {
  if (result.mutableUserDiceList == nil) {
    result.mutableUserDiceList = [NSMutableArray array];
  }
  [result.mutableUserDiceList addObject:value];
  return self;
}
@end

@interface RollDiceEndNotificationResponse ()
@end

@implementation RollDiceEndNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RollDiceEndNotificationResponse* defaultRollDiceEndNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [RollDiceEndNotificationResponse class]) {
    defaultRollDiceEndNotificationResponseInstance = [[RollDiceEndNotificationResponse alloc] init];
  }
}
+ (RollDiceEndNotificationResponse*) defaultInstance {
  return defaultRollDiceEndNotificationResponseInstance;
}
- (RollDiceEndNotificationResponse*) defaultInstance {
  return defaultRollDiceEndNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RollDiceEndNotificationResponse*) parseFromData:(NSData*) data {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromData:data] build];
}
+ (RollDiceEndNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (RollDiceEndNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (RollDiceEndNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RollDiceEndNotificationResponse*)[[[RollDiceEndNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RollDiceEndNotificationResponse_Builder*) builder {
  return [[[RollDiceEndNotificationResponse_Builder alloc] init] autorelease];
}
+ (RollDiceEndNotificationResponse_Builder*) builderWithPrototype:(RollDiceEndNotificationResponse*) prototype {
  return [[RollDiceEndNotificationResponse builder] mergeFrom:prototype];
}
- (RollDiceEndNotificationResponse_Builder*) builder {
  return [RollDiceEndNotificationResponse builder];
}
@end

@interface RollDiceEndNotificationResponse_Builder()
@property (retain) RollDiceEndNotificationResponse* result;
@end

@implementation RollDiceEndNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RollDiceEndNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RollDiceEndNotificationResponse_Builder*) clear {
  self.result = [[[RollDiceEndNotificationResponse alloc] init] autorelease];
  return self;
}
- (RollDiceEndNotificationResponse_Builder*) clone {
  return [RollDiceEndNotificationResponse builderWithPrototype:result];
}
- (RollDiceEndNotificationResponse*) defaultInstance {
  return [RollDiceEndNotificationResponse defaultInstance];
}
- (RollDiceEndNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RollDiceEndNotificationResponse*) buildPartial {
  RollDiceEndNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RollDiceEndNotificationResponse_Builder*) mergeFrom:(RollDiceEndNotificationResponse*) other {
  if (other == [RollDiceEndNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RollDiceEndNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RollDiceEndNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface NextPlayerStartNotificationRequest ()
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@property int32_t expiredTime;
@property int32_t direction;
@end

@implementation NextPlayerStartNotificationRequest

- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasExpiredTime {
  return !!hasExpiredTime_;
}
- (void) setHasExpiredTime:(BOOL) value {
  hasExpiredTime_ = !!value;
}
@synthesize expiredTime;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) value {
  hasDirection_ = !!value;
}
@synthesize direction;
- (void) dealloc {
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.expiredTime = 0;
    self.direction = 0;
  }
  return self;
}
static NextPlayerStartNotificationRequest* defaultNextPlayerStartNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [NextPlayerStartNotificationRequest class]) {
    defaultNextPlayerStartNotificationRequestInstance = [[NextPlayerStartNotificationRequest alloc] init];
  }
}
+ (NextPlayerStartNotificationRequest*) defaultInstance {
  return defaultNextPlayerStartNotificationRequestInstance;
}
- (NextPlayerStartNotificationRequest*) defaultInstance {
  return defaultNextPlayerStartNotificationRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCurrentPlayUserId) {
    return NO;
  }
  if (!self.hasNextPlayUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCurrentPlayUserId) {
    [output writeString:1 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:2 value:self.nextPlayUserId];
  }
  if (self.hasExpiredTime) {
    [output writeInt32:3 value:self.expiredTime];
  }
  if (self.hasDirection) {
    [output writeInt32:4 value:self.direction];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(1, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(2, self.nextPlayUserId);
  }
  if (self.hasExpiredTime) {
    size += computeInt32Size(3, self.expiredTime);
  }
  if (self.hasDirection) {
    size += computeInt32Size(4, self.direction);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NextPlayerStartNotificationRequest*) parseFromData:(NSData*) data {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromData:data] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (NextPlayerStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationRequest*)[[[NextPlayerStartNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationRequest_Builder*) builder {
  return [[[NextPlayerStartNotificationRequest_Builder alloc] init] autorelease];
}
+ (NextPlayerStartNotificationRequest_Builder*) builderWithPrototype:(NextPlayerStartNotificationRequest*) prototype {
  return [[NextPlayerStartNotificationRequest builder] mergeFrom:prototype];
}
- (NextPlayerStartNotificationRequest_Builder*) builder {
  return [NextPlayerStartNotificationRequest builder];
}
@end

@interface NextPlayerStartNotificationRequest_Builder()
@property (retain) NextPlayerStartNotificationRequest* result;
@end

@implementation NextPlayerStartNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NextPlayerStartNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NextPlayerStartNotificationRequest_Builder*) clear {
  self.result = [[[NextPlayerStartNotificationRequest alloc] init] autorelease];
  return self;
}
- (NextPlayerStartNotificationRequest_Builder*) clone {
  return [NextPlayerStartNotificationRequest builderWithPrototype:result];
}
- (NextPlayerStartNotificationRequest*) defaultInstance {
  return [NextPlayerStartNotificationRequest defaultInstance];
}
- (NextPlayerStartNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NextPlayerStartNotificationRequest*) buildPartial {
  NextPlayerStartNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NextPlayerStartNotificationRequest_Builder*) mergeFrom:(NextPlayerStartNotificationRequest*) other {
  if (other == [NextPlayerStartNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasExpiredTime) {
    [self setExpiredTime:other.expiredTime];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NextPlayerStartNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NextPlayerStartNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 24: {
        [self setExpiredTime:[input readInt32]];
        break;
      }
      case 32: {
        [self setDirection:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (NextPlayerStartNotificationRequest_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (NextPlayerStartNotificationRequest_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (NextPlayerStartNotificationRequest_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (NextPlayerStartNotificationRequest_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasExpiredTime {
  return result.hasExpiredTime;
}
- (int32_t) expiredTime {
  return result.expiredTime;
}
- (NextPlayerStartNotificationRequest_Builder*) setExpiredTime:(int32_t) value {
  result.hasExpiredTime = YES;
  result.expiredTime = value;
  return self;
}
- (NextPlayerStartNotificationRequest_Builder*) clearExpiredTime {
  result.hasExpiredTime = NO;
  result.expiredTime = 0;
  return self;
}
- (BOOL) hasDirection {
  return result.hasDirection;
}
- (int32_t) direction {
  return result.direction;
}
- (NextPlayerStartNotificationRequest_Builder*) setDirection:(int32_t) value {
  result.hasDirection = YES;
  result.direction = value;
  return self;
}
- (NextPlayerStartNotificationRequest_Builder*) clearDirection {
  result.hasDirection = NO;
  result.direction = 0;
  return self;
}
@end

@interface NextPlayerStartNotificationResponse ()
@end

@implementation NextPlayerStartNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static NextPlayerStartNotificationResponse* defaultNextPlayerStartNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [NextPlayerStartNotificationResponse class]) {
    defaultNextPlayerStartNotificationResponseInstance = [[NextPlayerStartNotificationResponse alloc] init];
  }
}
+ (NextPlayerStartNotificationResponse*) defaultInstance {
  return defaultNextPlayerStartNotificationResponseInstance;
}
- (NextPlayerStartNotificationResponse*) defaultInstance {
  return defaultNextPlayerStartNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (NextPlayerStartNotificationResponse*) parseFromData:(NSData*) data {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromData:data] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (NextPlayerStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NextPlayerStartNotificationResponse*)[[[NextPlayerStartNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NextPlayerStartNotificationResponse_Builder*) builder {
  return [[[NextPlayerStartNotificationResponse_Builder alloc] init] autorelease];
}
+ (NextPlayerStartNotificationResponse_Builder*) builderWithPrototype:(NextPlayerStartNotificationResponse*) prototype {
  return [[NextPlayerStartNotificationResponse builder] mergeFrom:prototype];
}
- (NextPlayerStartNotificationResponse_Builder*) builder {
  return [NextPlayerStartNotificationResponse builder];
}
@end

@interface NextPlayerStartNotificationResponse_Builder()
@property (retain) NextPlayerStartNotificationResponse* result;
@end

@implementation NextPlayerStartNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[NextPlayerStartNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (NextPlayerStartNotificationResponse_Builder*) clear {
  self.result = [[[NextPlayerStartNotificationResponse alloc] init] autorelease];
  return self;
}
- (NextPlayerStartNotificationResponse_Builder*) clone {
  return [NextPlayerStartNotificationResponse builderWithPrototype:result];
}
- (NextPlayerStartNotificationResponse*) defaultInstance {
  return [NextPlayerStartNotificationResponse defaultInstance];
}
- (NextPlayerStartNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NextPlayerStartNotificationResponse*) buildPartial {
  NextPlayerStartNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (NextPlayerStartNotificationResponse_Builder*) mergeFrom:(NextPlayerStartNotificationResponse*) other {
  if (other == [NextPlayerStartNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NextPlayerStartNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NextPlayerStartNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BetDiceRequest ()
@property int32_t option;
@property int32_t ante;
@property Float32 odds;
@end

@implementation BetDiceRequest

- (BOOL) hasOption {
  return !!hasOption_;
}
- (void) setHasOption:(BOOL) value {
  hasOption_ = !!value;
}
@synthesize option;
- (BOOL) hasAnte {
  return !!hasAnte_;
}
- (void) setHasAnte:(BOOL) value {
  hasAnte_ = !!value;
}
@synthesize ante;
- (BOOL) hasOdds {
  return !!hasOdds_;
}
- (void) setHasOdds:(BOOL) value {
  hasOdds_ = !!value;
}
@synthesize odds;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.option = 0;
    self.ante = 0;
    self.odds = 0;
  }
  return self;
}
static BetDiceRequest* defaultBetDiceRequestInstance = nil;
+ (void) initialize {
  if (self == [BetDiceRequest class]) {
    defaultBetDiceRequestInstance = [[BetDiceRequest alloc] init];
  }
}
+ (BetDiceRequest*) defaultInstance {
  return defaultBetDiceRequestInstance;
}
- (BetDiceRequest*) defaultInstance {
  return defaultBetDiceRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOption) {
    return NO;
  }
  if (!self.hasAnte) {
    return NO;
  }
  if (!self.hasOdds) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOption) {
    [output writeInt32:1 value:self.option];
  }
  if (self.hasAnte) {
    [output writeInt32:2 value:self.ante];
  }
  if (self.hasOdds) {
    [output writeFloat:3 value:self.odds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasOption) {
    size += computeInt32Size(1, self.option);
  }
  if (self.hasAnte) {
    size += computeInt32Size(2, self.ante);
  }
  if (self.hasOdds) {
    size += computeFloatSize(3, self.odds);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BetDiceRequest*) parseFromData:(NSData*) data {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromData:data] build];
}
+ (BetDiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetDiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromInputStream:input] build];
}
+ (BetDiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BetDiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceRequest*)[[[BetDiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceRequest_Builder*) builder {
  return [[[BetDiceRequest_Builder alloc] init] autorelease];
}
+ (BetDiceRequest_Builder*) builderWithPrototype:(BetDiceRequest*) prototype {
  return [[BetDiceRequest builder] mergeFrom:prototype];
}
- (BetDiceRequest_Builder*) builder {
  return [BetDiceRequest builder];
}
@end

@interface BetDiceRequest_Builder()
@property (retain) BetDiceRequest* result;
@end

@implementation BetDiceRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BetDiceRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BetDiceRequest_Builder*) clear {
  self.result = [[[BetDiceRequest alloc] init] autorelease];
  return self;
}
- (BetDiceRequest_Builder*) clone {
  return [BetDiceRequest builderWithPrototype:result];
}
- (BetDiceRequest*) defaultInstance {
  return [BetDiceRequest defaultInstance];
}
- (BetDiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetDiceRequest*) buildPartial {
  BetDiceRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BetDiceRequest_Builder*) mergeFrom:(BetDiceRequest*) other {
  if (other == [BetDiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasOption) {
    [self setOption:other.option];
  }
  if (other.hasAnte) {
    [self setAnte:other.ante];
  }
  if (other.hasOdds) {
    [self setOdds:other.odds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetDiceRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetDiceRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOption:[input readInt32]];
        break;
      }
      case 16: {
        [self setAnte:[input readInt32]];
        break;
      }
      case 29: {
        [self setOdds:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasOption {
  return result.hasOption;
}
- (int32_t) option {
  return result.option;
}
- (BetDiceRequest_Builder*) setOption:(int32_t) value {
  result.hasOption = YES;
  result.option = value;
  return self;
}
- (BetDiceRequest_Builder*) clearOption {
  result.hasOption = NO;
  result.option = 0;
  return self;
}
- (BOOL) hasAnte {
  return result.hasAnte;
}
- (int32_t) ante {
  return result.ante;
}
- (BetDiceRequest_Builder*) setAnte:(int32_t) value {
  result.hasAnte = YES;
  result.ante = value;
  return self;
}
- (BetDiceRequest_Builder*) clearAnte {
  result.hasAnte = NO;
  result.ante = 0;
  return self;
}
- (BOOL) hasOdds {
  return result.hasOdds;
}
- (Float32) odds {
  return result.odds;
}
- (BetDiceRequest_Builder*) setOdds:(Float32) value {
  result.hasOdds = YES;
  result.odds = value;
  return self;
}
- (BetDiceRequest_Builder*) clearOdds {
  result.hasOdds = NO;
  result.odds = 0;
  return self;
}
@end

@interface BetDiceResponse ()
@end

@implementation BetDiceResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static BetDiceResponse* defaultBetDiceResponseInstance = nil;
+ (void) initialize {
  if (self == [BetDiceResponse class]) {
    defaultBetDiceResponseInstance = [[BetDiceResponse alloc] init];
  }
}
+ (BetDiceResponse*) defaultInstance {
  return defaultBetDiceResponseInstance;
}
- (BetDiceResponse*) defaultInstance {
  return defaultBetDiceResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BetDiceResponse*) parseFromData:(NSData*) data {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromData:data] build];
}
+ (BetDiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BetDiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromInputStream:input] build];
}
+ (BetDiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BetDiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BetDiceResponse*)[[[BetDiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BetDiceResponse_Builder*) builder {
  return [[[BetDiceResponse_Builder alloc] init] autorelease];
}
+ (BetDiceResponse_Builder*) builderWithPrototype:(BetDiceResponse*) prototype {
  return [[BetDiceResponse builder] mergeFrom:prototype];
}
- (BetDiceResponse_Builder*) builder {
  return [BetDiceResponse builder];
}
@end

@interface BetDiceResponse_Builder()
@property (retain) BetDiceResponse* result;
@end

@implementation BetDiceResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BetDiceResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BetDiceResponse_Builder*) clear {
  self.result = [[[BetDiceResponse alloc] init] autorelease];
  return self;
}
- (BetDiceResponse_Builder*) clone {
  return [BetDiceResponse builderWithPrototype:result];
}
- (BetDiceResponse*) defaultInstance {
  return [BetDiceResponse defaultInstance];
}
- (BetDiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BetDiceResponse*) buildPartial {
  BetDiceResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BetDiceResponse_Builder*) mergeFrom:(BetDiceResponse*) other {
  if (other == [BetDiceResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BetDiceResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BetDiceResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GameOverNotificationRequest ()
@property (retain) PBDiceGameResult* gameResult;
@property (retain) PBZJHGameResult* zjhGameResult;
@end

@implementation GameOverNotificationRequest

- (BOOL) hasGameResult {
  return !!hasGameResult_;
}
- (void) setHasGameResult:(BOOL) value {
  hasGameResult_ = !!value;
}
@synthesize gameResult;
- (BOOL) hasZjhGameResult {
  return !!hasZjhGameResult_;
}
- (void) setHasZjhGameResult:(BOOL) value {
  hasZjhGameResult_ = !!value;
}
@synthesize zjhGameResult;
- (void) dealloc {
  self.gameResult = nil;
  self.zjhGameResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameResult = [PBDiceGameResult defaultInstance];
    self.zjhGameResult = [PBZJHGameResult defaultInstance];
  }
  return self;
}
static GameOverNotificationRequest* defaultGameOverNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [GameOverNotificationRequest class]) {
    defaultGameOverNotificationRequestInstance = [[GameOverNotificationRequest alloc] init];
  }
}
+ (GameOverNotificationRequest*) defaultInstance {
  return defaultGameOverNotificationRequestInstance;
}
- (GameOverNotificationRequest*) defaultInstance {
  return defaultGameOverNotificationRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasGameResult) {
    if (!self.gameResult.isInitialized) {
      return NO;
    }
  }
  if (self.hasZjhGameResult) {
    if (!self.zjhGameResult.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameResult) {
    [output writeMessage:1 value:self.gameResult];
  }
  if (self.hasZjhGameResult) {
    [output writeMessage:2 value:self.zjhGameResult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameResult) {
    size += computeMessageSize(1, self.gameResult);
  }
  if (self.hasZjhGameResult) {
    size += computeMessageSize(2, self.zjhGameResult);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameOverNotificationRequest*) parseFromData:(NSData*) data {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromData:data] build];
}
+ (GameOverNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (GameOverNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameOverNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationRequest*)[[[GameOverNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationRequest_Builder*) builder {
  return [[[GameOverNotificationRequest_Builder alloc] init] autorelease];
}
+ (GameOverNotificationRequest_Builder*) builderWithPrototype:(GameOverNotificationRequest*) prototype {
  return [[GameOverNotificationRequest builder] mergeFrom:prototype];
}
- (GameOverNotificationRequest_Builder*) builder {
  return [GameOverNotificationRequest builder];
}
@end

@interface GameOverNotificationRequest_Builder()
@property (retain) GameOverNotificationRequest* result;
@end

@implementation GameOverNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameOverNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameOverNotificationRequest_Builder*) clear {
  self.result = [[[GameOverNotificationRequest alloc] init] autorelease];
  return self;
}
- (GameOverNotificationRequest_Builder*) clone {
  return [GameOverNotificationRequest builderWithPrototype:result];
}
- (GameOverNotificationRequest*) defaultInstance {
  return [GameOverNotificationRequest defaultInstance];
}
- (GameOverNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameOverNotificationRequest*) buildPartial {
  GameOverNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameOverNotificationRequest_Builder*) mergeFrom:(GameOverNotificationRequest*) other {
  if (other == [GameOverNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.hasGameResult) {
    [self mergeGameResult:other.gameResult];
  }
  if (other.hasZjhGameResult) {
    [self mergeZjhGameResult:other.zjhGameResult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameOverNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameOverNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBDiceGameResult_Builder* subBuilder = [PBDiceGameResult builder];
        if (self.hasGameResult) {
          [subBuilder mergeFrom:self.gameResult];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameResult:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBZJHGameResult_Builder* subBuilder = [PBZJHGameResult builder];
        if (self.hasZjhGameResult) {
          [subBuilder mergeFrom:self.zjhGameResult];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhGameResult:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameResult {
  return result.hasGameResult;
}
- (PBDiceGameResult*) gameResult {
  return result.gameResult;
}
- (GameOverNotificationRequest_Builder*) setGameResult:(PBDiceGameResult*) value {
  result.hasGameResult = YES;
  result.gameResult = value;
  return self;
}
- (GameOverNotificationRequest_Builder*) setGameResultBuilder:(PBDiceGameResult_Builder*) builderForValue {
  return [self setGameResult:[builderForValue build]];
}
- (GameOverNotificationRequest_Builder*) mergeGameResult:(PBDiceGameResult*) value {
  if (result.hasGameResult &&
      result.gameResult != [PBDiceGameResult defaultInstance]) {
    result.gameResult =
      [[[PBDiceGameResult builderWithPrototype:result.gameResult] mergeFrom:value] buildPartial];
  } else {
    result.gameResult = value;
  }
  result.hasGameResult = YES;
  return self;
}
- (GameOverNotificationRequest_Builder*) clearGameResult {
  result.hasGameResult = NO;
  result.gameResult = [PBDiceGameResult defaultInstance];
  return self;
}
- (BOOL) hasZjhGameResult {
  return result.hasZjhGameResult;
}
- (PBZJHGameResult*) zjhGameResult {
  return result.zjhGameResult;
}
- (GameOverNotificationRequest_Builder*) setZjhGameResult:(PBZJHGameResult*) value {
  result.hasZjhGameResult = YES;
  result.zjhGameResult = value;
  return self;
}
- (GameOverNotificationRequest_Builder*) setZjhGameResultBuilder:(PBZJHGameResult_Builder*) builderForValue {
  return [self setZjhGameResult:[builderForValue build]];
}
- (GameOverNotificationRequest_Builder*) mergeZjhGameResult:(PBZJHGameResult*) value {
  if (result.hasZjhGameResult &&
      result.zjhGameResult != [PBZJHGameResult defaultInstance]) {
    result.zjhGameResult =
      [[[PBZJHGameResult builderWithPrototype:result.zjhGameResult] mergeFrom:value] buildPartial];
  } else {
    result.zjhGameResult = value;
  }
  result.hasZjhGameResult = YES;
  return self;
}
- (GameOverNotificationRequest_Builder*) clearZjhGameResult {
  result.hasZjhGameResult = NO;
  result.zjhGameResult = [PBZJHGameResult defaultInstance];
  return self;
}
@end

@interface GameOverNotificationResponse ()
@end

@implementation GameOverNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameOverNotificationResponse* defaultGameOverNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [GameOverNotificationResponse class]) {
    defaultGameOverNotificationResponseInstance = [[GameOverNotificationResponse alloc] init];
  }
}
+ (GameOverNotificationResponse*) defaultInstance {
  return defaultGameOverNotificationResponseInstance;
}
- (GameOverNotificationResponse*) defaultInstance {
  return defaultGameOverNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameOverNotificationResponse*) parseFromData:(NSData*) data {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromData:data] build];
}
+ (GameOverNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (GameOverNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameOverNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameOverNotificationResponse*)[[[GameOverNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameOverNotificationResponse_Builder*) builder {
  return [[[GameOverNotificationResponse_Builder alloc] init] autorelease];
}
+ (GameOverNotificationResponse_Builder*) builderWithPrototype:(GameOverNotificationResponse*) prototype {
  return [[GameOverNotificationResponse builder] mergeFrom:prototype];
}
- (GameOverNotificationResponse_Builder*) builder {
  return [GameOverNotificationResponse builder];
}
@end

@interface GameOverNotificationResponse_Builder()
@property (retain) GameOverNotificationResponse* result;
@end

@implementation GameOverNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameOverNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameOverNotificationResponse_Builder*) clear {
  self.result = [[[GameOverNotificationResponse alloc] init] autorelease];
  return self;
}
- (GameOverNotificationResponse_Builder*) clone {
  return [GameOverNotificationResponse builderWithPrototype:result];
}
- (GameOverNotificationResponse*) defaultInstance {
  return [GameOverNotificationResponse defaultInstance];
}
- (GameOverNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameOverNotificationResponse*) buildPartial {
  GameOverNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameOverNotificationResponse_Builder*) mergeFrom:(GameOverNotificationResponse*) other {
  if (other == [GameOverNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameOverNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameOverNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GameChatRequest ()
@property (retain) NSMutableArray* mutableToUserIdList;
@property (retain) NSString* content;
@property int32_t chatType;
@property int32_t contentType;
@property (retain) NSString* expressionId;
@property (retain) NSString* contentVoiceId;
@end

@implementation GameChatRequest

@synthesize mutableToUserIdList;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasChatType {
  return !!hasChatType_;
}
- (void) setHasChatType:(BOOL) value {
  hasChatType_ = !!value;
}
@synthesize chatType;
- (BOOL) hasContentType {
  return !!hasContentType_;
}
- (void) setHasContentType:(BOOL) value {
  hasContentType_ = !!value;
}
@synthesize contentType;
- (BOOL) hasExpressionId {
  return !!hasExpressionId_;
}
- (void) setHasExpressionId:(BOOL) value {
  hasExpressionId_ = !!value;
}
@synthesize expressionId;
- (BOOL) hasContentVoiceId {
  return !!hasContentVoiceId_;
}
- (void) setHasContentVoiceId:(BOOL) value {
  hasContentVoiceId_ = !!value;
}
@synthesize contentVoiceId;
- (void) dealloc {
  self.mutableToUserIdList = nil;
  self.content = nil;
  self.expressionId = nil;
  self.contentVoiceId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.content = @"";
    self.chatType = 0;
    self.contentType = 1;
    self.expressionId = @"";
    self.contentVoiceId = @"";
  }
  return self;
}
static GameChatRequest* defaultGameChatRequestInstance = nil;
+ (void) initialize {
  if (self == [GameChatRequest class]) {
    defaultGameChatRequestInstance = [[GameChatRequest alloc] init];
  }
}
+ (GameChatRequest*) defaultInstance {
  return defaultGameChatRequestInstance;
}
- (GameChatRequest*) defaultInstance {
  return defaultGameChatRequestInstance;
}
- (NSArray*) toUserIdList {
  return mutableToUserIdList;
}
- (NSString*) toUserIdAtIndex:(int32_t) index {
  id value = [mutableToUserIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutableToUserIdList) {
    [output writeString:1 value:element];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  if (self.hasChatType) {
    [output writeInt32:3 value:self.chatType];
  }
  if (self.hasContentType) {
    [output writeInt32:4 value:self.contentType];
  }
  if (self.hasExpressionId) {
    [output writeString:5 value:self.expressionId];
  }
  if (self.hasContentVoiceId) {
    [output writeString:6 value:self.contentVoiceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableToUserIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableToUserIdList.count;
  }
  if (self.hasContent) {
    size += computeStringSize(2, self.content);
  }
  if (self.hasChatType) {
    size += computeInt32Size(3, self.chatType);
  }
  if (self.hasContentType) {
    size += computeInt32Size(4, self.contentType);
  }
  if (self.hasExpressionId) {
    size += computeStringSize(5, self.expressionId);
  }
  if (self.hasContentVoiceId) {
    size += computeStringSize(6, self.contentVoiceId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameChatRequest*) parseFromData:(NSData*) data {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromData:data] build];
}
+ (GameChatRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromInputStream:input] build];
}
+ (GameChatRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatRequest*)[[[GameChatRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatRequest_Builder*) builder {
  return [[[GameChatRequest_Builder alloc] init] autorelease];
}
+ (GameChatRequest_Builder*) builderWithPrototype:(GameChatRequest*) prototype {
  return [[GameChatRequest builder] mergeFrom:prototype];
}
- (GameChatRequest_Builder*) builder {
  return [GameChatRequest builder];
}
@end

@interface GameChatRequest_Builder()
@property (retain) GameChatRequest* result;
@end

@implementation GameChatRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameChatRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameChatRequest_Builder*) clear {
  self.result = [[[GameChatRequest alloc] init] autorelease];
  return self;
}
- (GameChatRequest_Builder*) clone {
  return [GameChatRequest builderWithPrototype:result];
}
- (GameChatRequest*) defaultInstance {
  return [GameChatRequest defaultInstance];
}
- (GameChatRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameChatRequest*) buildPartial {
  GameChatRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameChatRequest_Builder*) mergeFrom:(GameChatRequest*) other {
  if (other == [GameChatRequest defaultInstance]) {
    return self;
  }
  if (other.mutableToUserIdList.count > 0) {
    if (result.mutableToUserIdList == nil) {
      result.mutableToUserIdList = [NSMutableArray array];
    }
    [result.mutableToUserIdList addObjectsFromArray:other.mutableToUserIdList];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasChatType) {
    [self setChatType:other.chatType];
  }
  if (other.hasContentType) {
    [self setContentType:other.contentType];
  }
  if (other.hasExpressionId) {
    [self setExpressionId:other.expressionId];
  }
  if (other.hasContentVoiceId) {
    [self setContentVoiceId:other.contentVoiceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameChatRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameChatRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addToUserId:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 24: {
        [self setChatType:[input readInt32]];
        break;
      }
      case 32: {
        [self setContentType:[input readInt32]];
        break;
      }
      case 42: {
        [self setExpressionId:[input readString]];
        break;
      }
      case 50: {
        [self setContentVoiceId:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) toUserIdList {
  if (result.mutableToUserIdList == nil) {
    return [NSArray array];
  }
  return result.mutableToUserIdList;
}
- (NSString*) toUserIdAtIndex:(int32_t) index {
  return [result toUserIdAtIndex:index];
}
- (GameChatRequest_Builder*) replaceToUserIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableToUserIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GameChatRequest_Builder*) addToUserId:(NSString*) value {
  if (result.mutableToUserIdList == nil) {
    result.mutableToUserIdList = [NSMutableArray array];
  }
  [result.mutableToUserIdList addObject:value];
  return self;
}
- (GameChatRequest_Builder*) addAllToUserId:(NSArray*) values {
  if (result.mutableToUserIdList == nil) {
    result.mutableToUserIdList = [NSMutableArray array];
  }
  [result.mutableToUserIdList addObjectsFromArray:values];
  return self;
}
- (GameChatRequest_Builder*) clearToUserIdList {
  result.mutableToUserIdList = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (GameChatRequest_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (GameChatRequest_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasChatType {
  return result.hasChatType;
}
- (int32_t) chatType {
  return result.chatType;
}
- (GameChatRequest_Builder*) setChatType:(int32_t) value {
  result.hasChatType = YES;
  result.chatType = value;
  return self;
}
- (GameChatRequest_Builder*) clearChatType {
  result.hasChatType = NO;
  result.chatType = 0;
  return self;
}
- (BOOL) hasContentType {
  return result.hasContentType;
}
- (int32_t) contentType {
  return result.contentType;
}
- (GameChatRequest_Builder*) setContentType:(int32_t) value {
  result.hasContentType = YES;
  result.contentType = value;
  return self;
}
- (GameChatRequest_Builder*) clearContentType {
  result.hasContentType = NO;
  result.contentType = 1;
  return self;
}
- (BOOL) hasExpressionId {
  return result.hasExpressionId;
}
- (NSString*) expressionId {
  return result.expressionId;
}
- (GameChatRequest_Builder*) setExpressionId:(NSString*) value {
  result.hasExpressionId = YES;
  result.expressionId = value;
  return self;
}
- (GameChatRequest_Builder*) clearExpressionId {
  result.hasExpressionId = NO;
  result.expressionId = @"";
  return self;
}
- (BOOL) hasContentVoiceId {
  return result.hasContentVoiceId;
}
- (NSString*) contentVoiceId {
  return result.contentVoiceId;
}
- (GameChatRequest_Builder*) setContentVoiceId:(NSString*) value {
  result.hasContentVoiceId = YES;
  result.contentVoiceId = value;
  return self;
}
- (GameChatRequest_Builder*) clearContentVoiceId {
  result.hasContentVoiceId = NO;
  result.contentVoiceId = @"";
  return self;
}
@end

@interface GameChatResponse ()
@end

@implementation GameChatResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameChatResponse* defaultGameChatResponseInstance = nil;
+ (void) initialize {
  if (self == [GameChatResponse class]) {
    defaultGameChatResponseInstance = [[GameChatResponse alloc] init];
  }
}
+ (GameChatResponse*) defaultInstance {
  return defaultGameChatResponseInstance;
}
- (GameChatResponse*) defaultInstance {
  return defaultGameChatResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameChatResponse*) parseFromData:(NSData*) data {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromData:data] build];
}
+ (GameChatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromInputStream:input] build];
}
+ (GameChatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameChatResponse*)[[[GameChatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameChatResponse_Builder*) builder {
  return [[[GameChatResponse_Builder alloc] init] autorelease];
}
+ (GameChatResponse_Builder*) builderWithPrototype:(GameChatResponse*) prototype {
  return [[GameChatResponse builder] mergeFrom:prototype];
}
- (GameChatResponse_Builder*) builder {
  return [GameChatResponse builder];
}
@end

@interface GameChatResponse_Builder()
@property (retain) GameChatResponse* result;
@end

@implementation GameChatResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameChatResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameChatResponse_Builder*) clear {
  self.result = [[[GameChatResponse alloc] init] autorelease];
  return self;
}
- (GameChatResponse_Builder*) clone {
  return [GameChatResponse builderWithPrototype:result];
}
- (GameChatResponse*) defaultInstance {
  return [GameChatResponse defaultInstance];
}
- (GameChatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameChatResponse*) buildPartial {
  GameChatResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameChatResponse_Builder*) mergeFrom:(GameChatResponse*) other {
  if (other == [GameChatResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameChatResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameChatResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface SendDrawDataRequest ()
@property (retain) NSString* word;
@property int32_t level;
@property int32_t language;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@property int32_t penType;
@property (retain) NSString* guessWord;
@property (retain) NSString* guessUserId;
@property BOOL guessCorrect;
@property (retain) PBDrawAction* drawAction;
@property (retain) PBSize* canvasSize;
@end

@implementation SendDrawDataRequest

- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) value {
  hasPenType_ = !!value;
}
@synthesize penType;
- (BOOL) hasGuessWord {
  return !!hasGuessWord_;
}
- (void) setHasGuessWord:(BOOL) value {
  hasGuessWord_ = !!value;
}
@synthesize guessWord;
- (BOOL) hasGuessUserId {
  return !!hasGuessUserId_;
}
- (void) setHasGuessUserId:(BOOL) value {
  hasGuessUserId_ = !!value;
}
@synthesize guessUserId;
- (BOOL) hasGuessCorrect {
  return !!hasGuessCorrect_;
}
- (void) setHasGuessCorrect:(BOOL) value {
  hasGuessCorrect_ = !!value;
}
- (BOOL) guessCorrect {
  return !!guessCorrect_;
}
- (void) setGuessCorrect:(BOOL) value {
  guessCorrect_ = !!value;
}
- (BOOL) hasDrawAction {
  return !!hasDrawAction_;
}
- (void) setHasDrawAction:(BOOL) value {
  hasDrawAction_ = !!value;
}
@synthesize drawAction;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) value {
  hasCanvasSize_ = !!value;
}
@synthesize canvasSize;
- (void) dealloc {
  self.word = nil;
  self.mutablePointsList = nil;
  self.guessWord = nil;
  self.guessUserId = nil;
  self.drawAction = nil;
  self.canvasSize = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
    self.guessWord = @"";
    self.guessUserId = @"";
    self.guessCorrect = NO;
    self.drawAction = [PBDrawAction defaultInstance];
    self.canvasSize = [PBSize defaultInstance];
  }
  return self;
}
static SendDrawDataRequest* defaultSendDrawDataRequestInstance = nil;
+ (void) initialize {
  if (self == [SendDrawDataRequest class]) {
    defaultSendDrawDataRequestInstance = [[SendDrawDataRequest alloc] init];
  }
}
+ (SendDrawDataRequest*) defaultInstance {
  return defaultSendDrawDataRequestInstance;
}
- (SendDrawDataRequest*) defaultInstance {
  return defaultSendDrawDataRequestInstance;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (self.hasDrawAction) {
    if (!self.drawAction.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:10];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWord) {
    [output writeString:10 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:11 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:12 value:self.language];
  }
  if (self.hasWidth) {
    [output writeFloat:22 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:23 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:24 value:self.penType];
  }
  if (self.hasGuessWord) {
    [output writeString:41 value:self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output writeString:42 value:self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output writeBool:43 value:self.guessCorrect];
  }
  if (self.hasDrawAction) {
    [output writeMessage:44 value:self.drawAction];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:45 value:self.canvasSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWord) {
    size += computeStringSize(10, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(11, self.level);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(12, self.language);
  }
  if (self.hasWidth) {
    size += computeFloatSize(22, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(23, self.color);
  }
  if (self.hasPenType) {
    size += computeInt32Size(24, self.penType);
  }
  if (self.hasGuessWord) {
    size += computeStringSize(41, self.guessWord);
  }
  if (self.hasGuessUserId) {
    size += computeStringSize(42, self.guessUserId);
  }
  if (self.hasGuessCorrect) {
    size += computeBoolSize(43, self.guessCorrect);
  }
  if (self.hasDrawAction) {
    size += computeMessageSize(44, self.drawAction);
  }
  if (self.hasCanvasSize) {
    size += computeMessageSize(45, self.canvasSize);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SendDrawDataRequest*) parseFromData:(NSData*) data {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromData:data] build];
}
+ (SendDrawDataRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromInputStream:input] build];
}
+ (SendDrawDataRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SendDrawDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataRequest*)[[[SendDrawDataRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataRequest_Builder*) builder {
  return [[[SendDrawDataRequest_Builder alloc] init] autorelease];
}
+ (SendDrawDataRequest_Builder*) builderWithPrototype:(SendDrawDataRequest*) prototype {
  return [[SendDrawDataRequest builder] mergeFrom:prototype];
}
- (SendDrawDataRequest_Builder*) builder {
  return [SendDrawDataRequest builder];
}
@end

@interface SendDrawDataRequest_Builder()
@property (retain) SendDrawDataRequest* result;
@end

@implementation SendDrawDataRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SendDrawDataRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SendDrawDataRequest_Builder*) clear {
  self.result = [[[SendDrawDataRequest alloc] init] autorelease];
  return self;
}
- (SendDrawDataRequest_Builder*) clone {
  return [SendDrawDataRequest builderWithPrototype:result];
}
- (SendDrawDataRequest*) defaultInstance {
  return [SendDrawDataRequest defaultInstance];
}
- (SendDrawDataRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDrawDataRequest*) buildPartial {
  SendDrawDataRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SendDrawDataRequest_Builder*) mergeFrom:(SendDrawDataRequest*) other {
  if (other == [SendDrawDataRequest defaultInstance]) {
    return self;
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasGuessWord) {
    [self setGuessWord:other.guessWord];
  }
  if (other.hasGuessUserId) {
    [self setGuessUserId:other.guessUserId];
  }
  if (other.hasGuessCorrect) {
    [self setGuessCorrect:other.guessCorrect];
  }
  if (other.hasDrawAction) {
    [self mergeDrawAction:other.drawAction];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDrawDataRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDrawDataRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 82: {
        [self setWord:[input readString]];
        break;
      }
      case 88: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 96: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 181: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 184: {
        [self setColor:[input readInt32]];
        break;
      }
      case 192: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 330: {
        [self setGuessWord:[input readString]];
        break;
      }
      case 338: {
        [self setGuessUserId:[input readString]];
        break;
      }
      case 344: {
        [self setGuessCorrect:[input readBool]];
        break;
      }
      case 354: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        if (self.hasDrawAction) {
          [subBuilder mergeFrom:self.drawAction];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawAction:[subBuilder buildPartial]];
        break;
      }
      case 362: {
        PBSize_Builder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (SendDrawDataRequest_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (SendDrawDataRequest_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (SendDrawDataRequest_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (SendDrawDataRequest_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (SendDrawDataRequest_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (SendDrawDataRequest_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (SendDrawDataRequest_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (SendDrawDataRequest_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (SendDrawDataRequest_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return result.hasPenType;
}
- (int32_t) penType {
  return result.penType;
}
- (SendDrawDataRequest_Builder*) setPenType:(int32_t) value {
  result.hasPenType = YES;
  result.penType = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearPenType {
  result.hasPenType = NO;
  result.penType = 0;
  return self;
}
- (BOOL) hasGuessWord {
  return result.hasGuessWord;
}
- (NSString*) guessWord {
  return result.guessWord;
}
- (SendDrawDataRequest_Builder*) setGuessWord:(NSString*) value {
  result.hasGuessWord = YES;
  result.guessWord = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearGuessWord {
  result.hasGuessWord = NO;
  result.guessWord = @"";
  return self;
}
- (BOOL) hasGuessUserId {
  return result.hasGuessUserId;
}
- (NSString*) guessUserId {
  return result.guessUserId;
}
- (SendDrawDataRequest_Builder*) setGuessUserId:(NSString*) value {
  result.hasGuessUserId = YES;
  result.guessUserId = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearGuessUserId {
  result.hasGuessUserId = NO;
  result.guessUserId = @"";
  return self;
}
- (BOOL) hasGuessCorrect {
  return result.hasGuessCorrect;
}
- (BOOL) guessCorrect {
  return result.guessCorrect;
}
- (SendDrawDataRequest_Builder*) setGuessCorrect:(BOOL) value {
  result.hasGuessCorrect = YES;
  result.guessCorrect = value;
  return self;
}
- (SendDrawDataRequest_Builder*) clearGuessCorrect {
  result.hasGuessCorrect = NO;
  result.guessCorrect = NO;
  return self;
}
- (BOOL) hasDrawAction {
  return result.hasDrawAction;
}
- (PBDrawAction*) drawAction {
  return result.drawAction;
}
- (SendDrawDataRequest_Builder*) setDrawAction:(PBDrawAction*) value {
  result.hasDrawAction = YES;
  result.drawAction = value;
  return self;
}
- (SendDrawDataRequest_Builder*) setDrawActionBuilder:(PBDrawAction_Builder*) builderForValue {
  return [self setDrawAction:[builderForValue build]];
}
- (SendDrawDataRequest_Builder*) mergeDrawAction:(PBDrawAction*) value {
  if (result.hasDrawAction &&
      result.drawAction != [PBDrawAction defaultInstance]) {
    result.drawAction =
      [[[PBDrawAction builderWithPrototype:result.drawAction] mergeFrom:value] buildPartial];
  } else {
    result.drawAction = value;
  }
  result.hasDrawAction = YES;
  return self;
}
- (SendDrawDataRequest_Builder*) clearDrawAction {
  result.hasDrawAction = NO;
  result.drawAction = [PBDrawAction defaultInstance];
  return self;
}
- (BOOL) hasCanvasSize {
  return result.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return result.canvasSize;
}
- (SendDrawDataRequest_Builder*) setCanvasSize:(PBSize*) value {
  result.hasCanvasSize = YES;
  result.canvasSize = value;
  return self;
}
- (SendDrawDataRequest_Builder*) setCanvasSizeBuilder:(PBSize_Builder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (SendDrawDataRequest_Builder*) mergeCanvasSize:(PBSize*) value {
  if (result.hasCanvasSize &&
      result.canvasSize != [PBSize defaultInstance]) {
    result.canvasSize =
      [[[PBSize builderWithPrototype:result.canvasSize] mergeFrom:value] buildPartial];
  } else {
    result.canvasSize = value;
  }
  result.hasCanvasSize = YES;
  return self;
}
- (SendDrawDataRequest_Builder*) clearCanvasSize {
  result.hasCanvasSize = NO;
  result.canvasSize = [PBSize defaultInstance];
  return self;
}
@end

@interface SendDrawDataResponse ()
@end

@implementation SendDrawDataResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static SendDrawDataResponse* defaultSendDrawDataResponseInstance = nil;
+ (void) initialize {
  if (self == [SendDrawDataResponse class]) {
    defaultSendDrawDataResponseInstance = [[SendDrawDataResponse alloc] init];
  }
}
+ (SendDrawDataResponse*) defaultInstance {
  return defaultSendDrawDataResponseInstance;
}
- (SendDrawDataResponse*) defaultInstance {
  return defaultSendDrawDataResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SendDrawDataResponse*) parseFromData:(NSData*) data {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromData:data] build];
}
+ (SendDrawDataResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse*) parseFromInputStream:(NSInputStream*) input {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromInputStream:input] build];
}
+ (SendDrawDataResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SendDrawDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDrawDataResponse*)[[[SendDrawDataResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDrawDataResponse_Builder*) builder {
  return [[[SendDrawDataResponse_Builder alloc] init] autorelease];
}
+ (SendDrawDataResponse_Builder*) builderWithPrototype:(SendDrawDataResponse*) prototype {
  return [[SendDrawDataResponse builder] mergeFrom:prototype];
}
- (SendDrawDataResponse_Builder*) builder {
  return [SendDrawDataResponse builder];
}
@end

@interface SendDrawDataResponse_Builder()
@property (retain) SendDrawDataResponse* result;
@end

@implementation SendDrawDataResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SendDrawDataResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SendDrawDataResponse_Builder*) clear {
  self.result = [[[SendDrawDataResponse alloc] init] autorelease];
  return self;
}
- (SendDrawDataResponse_Builder*) clone {
  return [SendDrawDataResponse builderWithPrototype:result];
}
- (SendDrawDataResponse*) defaultInstance {
  return [SendDrawDataResponse defaultInstance];
}
- (SendDrawDataResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDrawDataResponse*) buildPartial {
  SendDrawDataResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SendDrawDataResponse_Builder*) mergeFrom:(SendDrawDataResponse*) other {
  if (other == [SendDrawDataResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDrawDataResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDrawDataResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GameStartNotificationRequest ()
@property (retain) PBZJHGameState* zjhGameState;
@end

@implementation GameStartNotificationRequest

- (BOOL) hasZjhGameState {
  return !!hasZjhGameState_;
}
- (void) setHasZjhGameState:(BOOL) value {
  hasZjhGameState_ = !!value;
}
@synthesize zjhGameState;
- (void) dealloc {
  self.zjhGameState = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.zjhGameState = [PBZJHGameState defaultInstance];
  }
  return self;
}
static GameStartNotificationRequest* defaultGameStartNotificationRequestInstance = nil;
+ (void) initialize {
  if (self == [GameStartNotificationRequest class]) {
    defaultGameStartNotificationRequestInstance = [[GameStartNotificationRequest alloc] init];
  }
}
+ (GameStartNotificationRequest*) defaultInstance {
  return defaultGameStartNotificationRequestInstance;
}
- (GameStartNotificationRequest*) defaultInstance {
  return defaultGameStartNotificationRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasZjhGameState) {
    if (!self.zjhGameState.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasZjhGameState) {
    [output writeMessage:11 value:self.zjhGameState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasZjhGameState) {
    size += computeMessageSize(11, self.zjhGameState);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameStartNotificationRequest*) parseFromData:(NSData*) data {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromData:data] build];
}
+ (GameStartNotificationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromInputStream:input] build];
}
+ (GameStartNotificationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (GameStartNotificationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationRequest*)[[[GameStartNotificationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationRequest_Builder*) builder {
  return [[[GameStartNotificationRequest_Builder alloc] init] autorelease];
}
+ (GameStartNotificationRequest_Builder*) builderWithPrototype:(GameStartNotificationRequest*) prototype {
  return [[GameStartNotificationRequest builder] mergeFrom:prototype];
}
- (GameStartNotificationRequest_Builder*) builder {
  return [GameStartNotificationRequest builder];
}
@end

@interface GameStartNotificationRequest_Builder()
@property (retain) GameStartNotificationRequest* result;
@end

@implementation GameStartNotificationRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameStartNotificationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameStartNotificationRequest_Builder*) clear {
  self.result = [[[GameStartNotificationRequest alloc] init] autorelease];
  return self;
}
- (GameStartNotificationRequest_Builder*) clone {
  return [GameStartNotificationRequest builderWithPrototype:result];
}
- (GameStartNotificationRequest*) defaultInstance {
  return [GameStartNotificationRequest defaultInstance];
}
- (GameStartNotificationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameStartNotificationRequest*) buildPartial {
  GameStartNotificationRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameStartNotificationRequest_Builder*) mergeFrom:(GameStartNotificationRequest*) other {
  if (other == [GameStartNotificationRequest defaultInstance]) {
    return self;
  }
  if (other.hasZjhGameState) {
    [self mergeZjhGameState:other.zjhGameState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameStartNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameStartNotificationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        PBZJHGameState_Builder* subBuilder = [PBZJHGameState builder];
        if (self.hasZjhGameState) {
          [subBuilder mergeFrom:self.zjhGameState];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhGameState:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasZjhGameState {
  return result.hasZjhGameState;
}
- (PBZJHGameState*) zjhGameState {
  return result.zjhGameState;
}
- (GameStartNotificationRequest_Builder*) setZjhGameState:(PBZJHGameState*) value {
  result.hasZjhGameState = YES;
  result.zjhGameState = value;
  return self;
}
- (GameStartNotificationRequest_Builder*) setZjhGameStateBuilder:(PBZJHGameState_Builder*) builderForValue {
  return [self setZjhGameState:[builderForValue build]];
}
- (GameStartNotificationRequest_Builder*) mergeZjhGameState:(PBZJHGameState*) value {
  if (result.hasZjhGameState &&
      result.zjhGameState != [PBZJHGameState defaultInstance]) {
    result.zjhGameState =
      [[[PBZJHGameState builderWithPrototype:result.zjhGameState] mergeFrom:value] buildPartial];
  } else {
    result.zjhGameState = value;
  }
  result.hasZjhGameState = YES;
  return self;
}
- (GameStartNotificationRequest_Builder*) clearZjhGameState {
  result.hasZjhGameState = NO;
  result.zjhGameState = [PBZJHGameState defaultInstance];
  return self;
}
@end

@interface GameStartNotificationResponse ()
@end

@implementation GameStartNotificationResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static GameStartNotificationResponse* defaultGameStartNotificationResponseInstance = nil;
+ (void) initialize {
  if (self == [GameStartNotificationResponse class]) {
    defaultGameStartNotificationResponseInstance = [[GameStartNotificationResponse alloc] init];
  }
}
+ (GameStartNotificationResponse*) defaultInstance {
  return defaultGameStartNotificationResponseInstance;
}
- (GameStartNotificationResponse*) defaultInstance {
  return defaultGameStartNotificationResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameStartNotificationResponse*) parseFromData:(NSData*) data {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromData:data] build];
}
+ (GameStartNotificationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromInputStream:input] build];
}
+ (GameStartNotificationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GameStartNotificationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameStartNotificationResponse*)[[[GameStartNotificationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameStartNotificationResponse_Builder*) builder {
  return [[[GameStartNotificationResponse_Builder alloc] init] autorelease];
}
+ (GameStartNotificationResponse_Builder*) builderWithPrototype:(GameStartNotificationResponse*) prototype {
  return [[GameStartNotificationResponse builder] mergeFrom:prototype];
}
- (GameStartNotificationResponse_Builder*) builder {
  return [GameStartNotificationResponse builder];
}
@end

@interface GameStartNotificationResponse_Builder()
@property (retain) GameStartNotificationResponse* result;
@end

@implementation GameStartNotificationResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameStartNotificationResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameStartNotificationResponse_Builder*) clear {
  self.result = [[[GameStartNotificationResponse alloc] init] autorelease];
  return self;
}
- (GameStartNotificationResponse_Builder*) clone {
  return [GameStartNotificationResponse builderWithPrototype:result];
}
- (GameStartNotificationResponse*) defaultInstance {
  return [GameStartNotificationResponse defaultInstance];
}
- (GameStartNotificationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameStartNotificationResponse*) buildPartial {
  GameStartNotificationResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameStartNotificationResponse_Builder*) mergeFrom:(GameStartNotificationResponse*) other {
  if (other == [GameStartNotificationResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameStartNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameStartNotificationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface GeneralNotification ()
@property (retain) NSString* sessionHost;
@property int32_t sessionStatus;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@property (retain) NSString* newUserId;
@property (retain) NSString* quitUserId;
@property (retain) NSString* nickName;
@property (retain) NSString* userAvatar;
@property BOOL userGender;
@property (retain) NSMutableArray* mutableSnsUsersList;
@property (retain) NSString* location;
@property int32_t userLevel;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@property int32_t penType;
@property (retain) NSString* word;
@property int32_t level;
@property int32_t round;
@property int32_t language;
@property (retain) NSString* guessWord;
@property (retain) NSString* guessUserId;
@property BOOL guessCorrect;
@property int32_t guessGainCoins;
@property (retain) NSMutableArray* mutableChatToUserIdList;
@property (retain) NSString* chatContent;
@property int32_t chatType;
@property int32_t turnGainCoins;
@end

@implementation GeneralNotification

- (BOOL) hasSessionHost {
  return !!hasSessionHost_;
}
- (void) setHasSessionHost:(BOOL) value {
  hasSessionHost_ = !!value;
}
@synthesize sessionHost;
- (BOOL) hasSessionStatus {
  return !!hasSessionStatus_;
}
- (void) setHasSessionStatus:(BOOL) value {
  hasSessionStatus_ = !!value;
}
@synthesize sessionStatus;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasNewUserId {
  return !!hasNewUserId_;
}
- (void) setHasNewUserId:(BOOL) value {
  hasNewUserId_ = !!value;
}
@synthesize newUserId;
- (BOOL) hasQuitUserId {
  return !!hasQuitUserId_;
}
- (void) setHasQuitUserId:(BOOL) value {
  hasQuitUserId_ = !!value;
}
@synthesize quitUserId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasUserAvatar {
  return !!hasUserAvatar_;
}
- (void) setHasUserAvatar:(BOOL) value {
  hasUserAvatar_ = !!value;
}
@synthesize userAvatar;
- (BOOL) hasUserGender {
  return !!hasUserGender_;
}
- (void) setHasUserGender:(BOOL) value {
  hasUserGender_ = !!value;
}
- (BOOL) userGender {
  return !!userGender_;
}
- (void) setUserGender:(BOOL) value {
  userGender_ = !!value;
}
@synthesize mutableSnsUsersList;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value {
  hasLocation_ = !!value;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) value {
  hasUserLevel_ = !!value;
}
@synthesize userLevel;
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) value {
  hasPenType_ = !!value;
}
@synthesize penType;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) value {
  hasRound_ = !!value;
}
@synthesize round;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasGuessWord {
  return !!hasGuessWord_;
}
- (void) setHasGuessWord:(BOOL) value {
  hasGuessWord_ = !!value;
}
@synthesize guessWord;
- (BOOL) hasGuessUserId {
  return !!hasGuessUserId_;
}
- (void) setHasGuessUserId:(BOOL) value {
  hasGuessUserId_ = !!value;
}
@synthesize guessUserId;
- (BOOL) hasGuessCorrect {
  return !!hasGuessCorrect_;
}
- (void) setHasGuessCorrect:(BOOL) value {
  hasGuessCorrect_ = !!value;
}
- (BOOL) guessCorrect {
  return !!guessCorrect_;
}
- (void) setGuessCorrect:(BOOL) value {
  guessCorrect_ = !!value;
}
- (BOOL) hasGuessGainCoins {
  return !!hasGuessGainCoins_;
}
- (void) setHasGuessGainCoins:(BOOL) value {
  hasGuessGainCoins_ = !!value;
}
@synthesize guessGainCoins;
@synthesize mutableChatToUserIdList;
- (BOOL) hasChatContent {
  return !!hasChatContent_;
}
- (void) setHasChatContent:(BOOL) value {
  hasChatContent_ = !!value;
}
@synthesize chatContent;
- (BOOL) hasChatType {
  return !!hasChatType_;
}
- (void) setHasChatType:(BOOL) value {
  hasChatType_ = !!value;
}
@synthesize chatType;
- (BOOL) hasTurnGainCoins {
  return !!hasTurnGainCoins_;
}
- (void) setHasTurnGainCoins:(BOOL) value {
  hasTurnGainCoins_ = !!value;
}
@synthesize turnGainCoins;
- (void) dealloc {
  self.sessionHost = nil;
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  self.newUserId = nil;
  self.quitUserId = nil;
  self.nickName = nil;
  self.userAvatar = nil;
  self.mutableSnsUsersList = nil;
  self.location = nil;
  self.mutablePointsList = nil;
  self.word = nil;
  self.guessWord = nil;
  self.guessUserId = nil;
  self.mutableChatToUserIdList = nil;
  self.chatContent = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionHost = @"";
    self.sessionStatus = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.newUserId = @"";
    self.quitUserId = @"";
    self.nickName = @"";
    self.userAvatar = @"";
    self.userGender = NO;
    self.location = @"";
    self.userLevel = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
    self.word = @"";
    self.level = 0;
    self.round = 0;
    self.language = 0;
    self.guessWord = @"";
    self.guessUserId = @"";
    self.guessCorrect = NO;
    self.guessGainCoins = 0;
    self.chatContent = @"";
    self.chatType = 0;
    self.turnGainCoins = 0;
  }
  return self;
}
static GeneralNotification* defaultGeneralNotificationInstance = nil;
+ (void) initialize {
  if (self == [GeneralNotification class]) {
    defaultGeneralNotificationInstance = [[GeneralNotification alloc] init];
  }
}
+ (GeneralNotification*) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (GeneralNotification*) defaultInstance {
  return defaultGeneralNotificationInstance;
}
- (NSArray*) snsUsersList {
  return mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  id value = [mutableSnsUsersList objectAtIndex:index];
  return value;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) chatToUserIdList {
  return mutableChatToUserIdList;
}
- (NSString*) chatToUserIdAtIndex:(int32_t) index {
  id value = [mutableChatToUserIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBSNSUser* element in self.snsUsersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionHost) {
    [output writeString:3 value:self.sessionHost];
  }
  if (self.hasSessionStatus) {
    [output writeInt32:4 value:self.sessionStatus];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:5 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:6 value:self.nextPlayUserId];
  }
  if (self.hasNewUserId) {
    [output writeString:7 value:self.newUserId];
  }
  if (self.hasQuitUserId) {
    [output writeString:8 value:self.quitUserId];
  }
  if (self.hasNickName) {
    [output writeString:9 value:self.nickName];
  }
  if (self.hasUserAvatar) {
    [output writeString:10 value:self.userAvatar];
  }
  if (self.hasUserGender) {
    [output writeBool:11 value:self.userGender];
  }
  for (PBSNSUser* element in self.snsUsersList) {
    [output writeMessage:12 value:element];
  }
  if (self.hasLocation) {
    [output writeString:13 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:14 value:self.userLevel];
  }
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:170];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWidth) {
    [output writeFloat:22 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:23 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:24 value:self.penType];
  }
  if (self.hasWord) {
    [output writeString:31 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:32 value:self.level];
  }
  if (self.hasRound) {
    [output writeInt32:33 value:self.round];
  }
  if (self.hasLanguage) {
    [output writeInt32:34 value:self.language];
  }
  if (self.hasGuessWord) {
    [output writeString:41 value:self.guessWord];
  }
  if (self.hasGuessUserId) {
    [output writeString:42 value:self.guessUserId];
  }
  if (self.hasGuessCorrect) {
    [output writeBool:43 value:self.guessCorrect];
  }
  if (self.hasGuessGainCoins) {
    [output writeInt32:44 value:self.guessGainCoins];
  }
  for (NSString* element in self.mutableChatToUserIdList) {
    [output writeString:51 value:element];
  }
  if (self.hasChatContent) {
    [output writeString:52 value:self.chatContent];
  }
  if (self.hasChatType) {
    [output writeInt32:53 value:self.chatType];
  }
  if (self.hasTurnGainCoins) {
    [output writeInt32:61 value:self.turnGainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionHost) {
    size += computeStringSize(3, self.sessionHost);
  }
  if (self.hasSessionStatus) {
    size += computeInt32Size(4, self.sessionStatus);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(5, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(6, self.nextPlayUserId);
  }
  if (self.hasNewUserId) {
    size += computeStringSize(7, self.newUserId);
  }
  if (self.hasQuitUserId) {
    size += computeStringSize(8, self.quitUserId);
  }
  if (self.hasNickName) {
    size += computeStringSize(9, self.nickName);
  }
  if (self.hasUserAvatar) {
    size += computeStringSize(10, self.userAvatar);
  }
  if (self.hasUserGender) {
    size += computeBoolSize(11, self.userGender);
  }
  for (PBSNSUser* element in self.snsUsersList) {
    size += computeMessageSize(12, element);
  }
  if (self.hasLocation) {
    size += computeStringSize(13, self.location);
  }
  if (self.hasUserLevel) {
    size += computeInt32Size(14, self.userLevel);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 2;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size += computeFloatSize(22, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(23, self.color);
  }
  if (self.hasPenType) {
    size += computeInt32Size(24, self.penType);
  }
  if (self.hasWord) {
    size += computeStringSize(31, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(32, self.level);
  }
  if (self.hasRound) {
    size += computeInt32Size(33, self.round);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(34, self.language);
  }
  if (self.hasGuessWord) {
    size += computeStringSize(41, self.guessWord);
  }
  if (self.hasGuessUserId) {
    size += computeStringSize(42, self.guessUserId);
  }
  if (self.hasGuessCorrect) {
    size += computeBoolSize(43, self.guessCorrect);
  }
  if (self.hasGuessGainCoins) {
    size += computeInt32Size(44, self.guessGainCoins);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableChatToUserIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 2 * self.mutableChatToUserIdList.count;
  }
  if (self.hasChatContent) {
    size += computeStringSize(52, self.chatContent);
  }
  if (self.hasChatType) {
    size += computeInt32Size(53, self.chatType);
  }
  if (self.hasTurnGainCoins) {
    size += computeInt32Size(61, self.turnGainCoins);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GeneralNotification*) parseFromData:(NSData*) data {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data] build];
}
+ (GeneralNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input] build];
}
+ (GeneralNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input] build];
}
+ (GeneralNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GeneralNotification*)[[[GeneralNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GeneralNotification_Builder*) builder {
  return [[[GeneralNotification_Builder alloc] init] autorelease];
}
+ (GeneralNotification_Builder*) builderWithPrototype:(GeneralNotification*) prototype {
  return [[GeneralNotification builder] mergeFrom:prototype];
}
- (GeneralNotification_Builder*) builder {
  return [GeneralNotification builder];
}
@end

@interface GeneralNotification_Builder()
@property (retain) GeneralNotification* result;
@end

@implementation GeneralNotification_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GeneralNotification alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GeneralNotification_Builder*) clear {
  self.result = [[[GeneralNotification alloc] init] autorelease];
  return self;
}
- (GeneralNotification_Builder*) clone {
  return [GeneralNotification builderWithPrototype:result];
}
- (GeneralNotification*) defaultInstance {
  return [GeneralNotification defaultInstance];
}
- (GeneralNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GeneralNotification*) buildPartial {
  GeneralNotification* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GeneralNotification_Builder*) mergeFrom:(GeneralNotification*) other {
  if (other == [GeneralNotification defaultInstance]) {
    return self;
  }
  if (other.hasSessionHost) {
    [self setSessionHost:other.sessionHost];
  }
  if (other.hasSessionStatus) {
    [self setSessionStatus:other.sessionStatus];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasNewUserId) {
    [self setNewUserId:other.newUserId];
  }
  if (other.hasQuitUserId) {
    [self setQuitUserId:other.quitUserId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasUserAvatar) {
    [self setUserAvatar:other.userAvatar];
  }
  if (other.hasUserGender) {
    [self setUserGender:other.userGender];
  }
  if (other.mutableSnsUsersList.count > 0) {
    if (result.mutableSnsUsersList == nil) {
      result.mutableSnsUsersList = [NSMutableArray array];
    }
    [result.mutableSnsUsersList addObjectsFromArray:other.mutableSnsUsersList];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasGuessWord) {
    [self setGuessWord:other.guessWord];
  }
  if (other.hasGuessUserId) {
    [self setGuessUserId:other.guessUserId];
  }
  if (other.hasGuessCorrect) {
    [self setGuessCorrect:other.guessCorrect];
  }
  if (other.hasGuessGainCoins) {
    [self setGuessGainCoins:other.guessGainCoins];
  }
  if (other.mutableChatToUserIdList.count > 0) {
    if (result.mutableChatToUserIdList == nil) {
      result.mutableChatToUserIdList = [NSMutableArray array];
    }
    [result.mutableChatToUserIdList addObjectsFromArray:other.mutableChatToUserIdList];
  }
  if (other.hasChatContent) {
    [self setChatContent:other.chatContent];
  }
  if (other.hasChatType) {
    [self setChatType:other.chatType];
  }
  if (other.hasTurnGainCoins) {
    [self setTurnGainCoins:other.turnGainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GeneralNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GeneralNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 26: {
        [self setSessionHost:[input readString]];
        break;
      }
      case 32: {
        [self setSessionStatus:[input readInt32]];
        break;
      }
      case 42: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 50: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 58: {
        [self setNewUserId:[input readString]];
        break;
      }
      case 66: {
        [self setQuitUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNickName:[input readString]];
        break;
      }
      case 82: {
        [self setUserAvatar:[input readString]];
        break;
      }
      case 88: {
        [self setUserGender:[input readBool]];
        break;
      }
      case 98: {
        PBSNSUser_Builder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        [self setLocation:[input readString]];
        break;
      }
      case 112: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 170: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 181: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 184: {
        [self setColor:[input readInt32]];
        break;
      }
      case 192: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 250: {
        [self setWord:[input readString]];
        break;
      }
      case 256: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 264: {
        [self setRound:[input readInt32]];
        break;
      }
      case 272: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 330: {
        [self setGuessWord:[input readString]];
        break;
      }
      case 338: {
        [self setGuessUserId:[input readString]];
        break;
      }
      case 344: {
        [self setGuessCorrect:[input readBool]];
        break;
      }
      case 352: {
        [self setGuessGainCoins:[input readInt32]];
        break;
      }
      case 410: {
        [self addChatToUserId:[input readString]];
        break;
      }
      case 418: {
        [self setChatContent:[input readString]];
        break;
      }
      case 424: {
        [self setChatType:[input readInt32]];
        break;
      }
      case 488: {
        [self setTurnGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionHost {
  return result.hasSessionHost;
}
- (NSString*) sessionHost {
  return result.sessionHost;
}
- (GeneralNotification_Builder*) setSessionHost:(NSString*) value {
  result.hasSessionHost = YES;
  result.sessionHost = value;
  return self;
}
- (GeneralNotification_Builder*) clearSessionHost {
  result.hasSessionHost = NO;
  result.sessionHost = @"";
  return self;
}
- (BOOL) hasSessionStatus {
  return result.hasSessionStatus;
}
- (int32_t) sessionStatus {
  return result.sessionStatus;
}
- (GeneralNotification_Builder*) setSessionStatus:(int32_t) value {
  result.hasSessionStatus = YES;
  result.sessionStatus = value;
  return self;
}
- (GeneralNotification_Builder*) clearSessionStatus {
  result.hasSessionStatus = NO;
  result.sessionStatus = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (GeneralNotification_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (GeneralNotification_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasNewUserId {
  return result.hasNewUserId;
}
- (NSString*) newUserId {
  return result.newUserId;
}
- (GeneralNotification_Builder*) setNewUserId:(NSString*) value {
  result.hasNewUserId = YES;
  result.newUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearNewUserId {
  result.hasNewUserId = NO;
  result.newUserId = @"";
  return self;
}
- (BOOL) hasQuitUserId {
  return result.hasQuitUserId;
}
- (NSString*) quitUserId {
  return result.quitUserId;
}
- (GeneralNotification_Builder*) setQuitUserId:(NSString*) value {
  result.hasQuitUserId = YES;
  result.quitUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearQuitUserId {
  result.hasQuitUserId = NO;
  result.quitUserId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (GeneralNotification_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (GeneralNotification_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasUserAvatar {
  return result.hasUserAvatar;
}
- (NSString*) userAvatar {
  return result.userAvatar;
}
- (GeneralNotification_Builder*) setUserAvatar:(NSString*) value {
  result.hasUserAvatar = YES;
  result.userAvatar = value;
  return self;
}
- (GeneralNotification_Builder*) clearUserAvatar {
  result.hasUserAvatar = NO;
  result.userAvatar = @"";
  return self;
}
- (BOOL) hasUserGender {
  return result.hasUserGender;
}
- (BOOL) userGender {
  return result.userGender;
}
- (GeneralNotification_Builder*) setUserGender:(BOOL) value {
  result.hasUserGender = YES;
  result.userGender = value;
  return self;
}
- (GeneralNotification_Builder*) clearUserGender {
  result.hasUserGender = NO;
  result.userGender = NO;
  return self;
}
- (NSArray*) snsUsersList {
  if (result.mutableSnsUsersList == nil) { return [NSArray array]; }
  return result.mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  return [result snsUsersAtIndex:index];
}
- (GeneralNotification_Builder*) replaceSnsUsersAtIndex:(int32_t) index with:(PBSNSUser*) value {
  [result.mutableSnsUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GeneralNotification_Builder*) addAllSnsUsers:(NSArray*) values {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObjectsFromArray:values];
  return self;
}
- (GeneralNotification_Builder*) clearSnsUsersList {
  result.mutableSnsUsersList = nil;
  return self;
}
- (GeneralNotification_Builder*) addSnsUsers:(PBSNSUser*) value {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObject:value];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (NSString*) location {
  return result.location;
}
- (GeneralNotification_Builder*) setLocation:(NSString*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (GeneralNotification_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return result.hasUserLevel;
}
- (int32_t) userLevel {
  return result.userLevel;
}
- (GeneralNotification_Builder*) setUserLevel:(int32_t) value {
  result.hasUserLevel = YES;
  result.userLevel = value;
  return self;
}
- (GeneralNotification_Builder*) clearUserLevel {
  result.hasUserLevel = NO;
  result.userLevel = 0;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (GeneralNotification_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (GeneralNotification_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (GeneralNotification_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (GeneralNotification_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (GeneralNotification_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (GeneralNotification_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (GeneralNotification_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (GeneralNotification_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return result.hasPenType;
}
- (int32_t) penType {
  return result.penType;
}
- (GeneralNotification_Builder*) setPenType:(int32_t) value {
  result.hasPenType = YES;
  result.penType = value;
  return self;
}
- (GeneralNotification_Builder*) clearPenType {
  result.hasPenType = NO;
  result.penType = 0;
  return self;
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (GeneralNotification_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (GeneralNotification_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (GeneralNotification_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (GeneralNotification_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasRound {
  return result.hasRound;
}
- (int32_t) round {
  return result.round;
}
- (GeneralNotification_Builder*) setRound:(int32_t) value {
  result.hasRound = YES;
  result.round = value;
  return self;
}
- (GeneralNotification_Builder*) clearRound {
  result.hasRound = NO;
  result.round = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (GeneralNotification_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (GeneralNotification_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (BOOL) hasGuessWord {
  return result.hasGuessWord;
}
- (NSString*) guessWord {
  return result.guessWord;
}
- (GeneralNotification_Builder*) setGuessWord:(NSString*) value {
  result.hasGuessWord = YES;
  result.guessWord = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessWord {
  result.hasGuessWord = NO;
  result.guessWord = @"";
  return self;
}
- (BOOL) hasGuessUserId {
  return result.hasGuessUserId;
}
- (NSString*) guessUserId {
  return result.guessUserId;
}
- (GeneralNotification_Builder*) setGuessUserId:(NSString*) value {
  result.hasGuessUserId = YES;
  result.guessUserId = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessUserId {
  result.hasGuessUserId = NO;
  result.guessUserId = @"";
  return self;
}
- (BOOL) hasGuessCorrect {
  return result.hasGuessCorrect;
}
- (BOOL) guessCorrect {
  return result.guessCorrect;
}
- (GeneralNotification_Builder*) setGuessCorrect:(BOOL) value {
  result.hasGuessCorrect = YES;
  result.guessCorrect = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessCorrect {
  result.hasGuessCorrect = NO;
  result.guessCorrect = NO;
  return self;
}
- (BOOL) hasGuessGainCoins {
  return result.hasGuessGainCoins;
}
- (int32_t) guessGainCoins {
  return result.guessGainCoins;
}
- (GeneralNotification_Builder*) setGuessGainCoins:(int32_t) value {
  result.hasGuessGainCoins = YES;
  result.guessGainCoins = value;
  return self;
}
- (GeneralNotification_Builder*) clearGuessGainCoins {
  result.hasGuessGainCoins = NO;
  result.guessGainCoins = 0;
  return self;
}
- (NSArray*) chatToUserIdList {
  if (result.mutableChatToUserIdList == nil) {
    return [NSArray array];
  }
  return result.mutableChatToUserIdList;
}
- (NSString*) chatToUserIdAtIndex:(int32_t) index {
  return [result chatToUserIdAtIndex:index];
}
- (GeneralNotification_Builder*) replaceChatToUserIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableChatToUserIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GeneralNotification_Builder*) addChatToUserId:(NSString*) value {
  if (result.mutableChatToUserIdList == nil) {
    result.mutableChatToUserIdList = [NSMutableArray array];
  }
  [result.mutableChatToUserIdList addObject:value];
  return self;
}
- (GeneralNotification_Builder*) addAllChatToUserId:(NSArray*) values {
  if (result.mutableChatToUserIdList == nil) {
    result.mutableChatToUserIdList = [NSMutableArray array];
  }
  [result.mutableChatToUserIdList addObjectsFromArray:values];
  return self;
}
- (GeneralNotification_Builder*) clearChatToUserIdList {
  result.mutableChatToUserIdList = nil;
  return self;
}
- (BOOL) hasChatContent {
  return result.hasChatContent;
}
- (NSString*) chatContent {
  return result.chatContent;
}
- (GeneralNotification_Builder*) setChatContent:(NSString*) value {
  result.hasChatContent = YES;
  result.chatContent = value;
  return self;
}
- (GeneralNotification_Builder*) clearChatContent {
  result.hasChatContent = NO;
  result.chatContent = @"";
  return self;
}
- (BOOL) hasChatType {
  return result.hasChatType;
}
- (int32_t) chatType {
  return result.chatType;
}
- (GeneralNotification_Builder*) setChatType:(int32_t) value {
  result.hasChatType = YES;
  result.chatType = value;
  return self;
}
- (GeneralNotification_Builder*) clearChatType {
  result.hasChatType = NO;
  result.chatType = 0;
  return self;
}
- (BOOL) hasTurnGainCoins {
  return result.hasTurnGainCoins;
}
- (int32_t) turnGainCoins {
  return result.turnGainCoins;
}
- (GeneralNotification_Builder*) setTurnGainCoins:(int32_t) value {
  result.hasTurnGainCoins = YES;
  result.turnGainCoins = value;
  return self;
}
- (GeneralNotification_Builder*) clearTurnGainCoins {
  result.hasTurnGainCoins = NO;
  result.turnGainCoins = 0;
  return self;
}
@end

@interface FacetimeChatRequest ()
@property (retain) PBGameUser* user;
@property BOOL chatGender;
@end

@implementation FacetimeChatRequest

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value {
  hasUser_ = !!value;
}
@synthesize user;
- (BOOL) hasChatGender {
  return !!hasChatGender_;
}
- (void) setHasChatGender:(BOOL) value {
  hasChatGender_ = !!value;
}
- (BOOL) chatGender {
  return !!chatGender_;
}
- (void) setChatGender:(BOOL) value {
  chatGender_ = !!value;
}
- (void) dealloc {
  self.user = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.user = [PBGameUser defaultInstance];
    self.chatGender = NO;
  }
  return self;
}
static FacetimeChatRequest* defaultFacetimeChatRequestInstance = nil;
+ (void) initialize {
  if (self == [FacetimeChatRequest class]) {
    defaultFacetimeChatRequestInstance = [[FacetimeChatRequest alloc] init];
  }
}
+ (FacetimeChatRequest*) defaultInstance {
  return defaultFacetimeChatRequestInstance;
}
- (FacetimeChatRequest*) defaultInstance {
  return defaultFacetimeChatRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasChatGender) {
    [output writeBool:2 value:self.chatGender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUser) {
    size += computeMessageSize(1, self.user);
  }
  if (self.hasChatGender) {
    size += computeBoolSize(2, self.chatGender);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FacetimeChatRequest*) parseFromData:(NSData*) data {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromData:data] build];
}
+ (FacetimeChatRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatRequest*) parseFromInputStream:(NSInputStream*) input {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromInputStream:input] build];
}
+ (FacetimeChatRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromCodedInputStream:input] build];
}
+ (FacetimeChatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatRequest*)[[[FacetimeChatRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatRequest_Builder*) builder {
  return [[[FacetimeChatRequest_Builder alloc] init] autorelease];
}
+ (FacetimeChatRequest_Builder*) builderWithPrototype:(FacetimeChatRequest*) prototype {
  return [[FacetimeChatRequest builder] mergeFrom:prototype];
}
- (FacetimeChatRequest_Builder*) builder {
  return [FacetimeChatRequest builder];
}
@end

@interface FacetimeChatRequest_Builder()
@property (retain) FacetimeChatRequest* result;
@end

@implementation FacetimeChatRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FacetimeChatRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FacetimeChatRequest_Builder*) clear {
  self.result = [[[FacetimeChatRequest alloc] init] autorelease];
  return self;
}
- (FacetimeChatRequest_Builder*) clone {
  return [FacetimeChatRequest builderWithPrototype:result];
}
- (FacetimeChatRequest*) defaultInstance {
  return [FacetimeChatRequest defaultInstance];
}
- (FacetimeChatRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FacetimeChatRequest*) buildPartial {
  FacetimeChatRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FacetimeChatRequest_Builder*) mergeFrom:(FacetimeChatRequest*) other {
  if (other == [FacetimeChatRequest defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasChatGender) {
    [self setChatGender:other.chatGender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FacetimeChatRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FacetimeChatRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setChatGender:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (PBGameUser*) user {
  return result.user;
}
- (FacetimeChatRequest_Builder*) setUser:(PBGameUser*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (FacetimeChatRequest_Builder*) setUserBuilder:(PBGameUser_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (FacetimeChatRequest_Builder*) mergeUser:(PBGameUser*) value {
  if (result.hasUser &&
      result.user != [PBGameUser defaultInstance]) {
    result.user =
      [[[PBGameUser builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (FacetimeChatRequest_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasChatGender {
  return result.hasChatGender;
}
- (BOOL) chatGender {
  return result.chatGender;
}
- (FacetimeChatRequest_Builder*) setChatGender:(BOOL) value {
  result.hasChatGender = YES;
  result.chatGender = value;
  return self;
}
- (FacetimeChatRequest_Builder*) clearChatGender {
  result.hasChatGender = NO;
  result.chatGender = NO;
  return self;
}
@end

@interface FacetimeChatResponse ()
@property (retain) NSMutableArray* mutableUserList;
@property BOOL chosenToInitiate;
@end

@implementation FacetimeChatResponse

@synthesize mutableUserList;
- (BOOL) hasChosenToInitiate {
  return !!hasChosenToInitiate_;
}
- (void) setHasChosenToInitiate:(BOOL) value {
  hasChosenToInitiate_ = !!value;
}
- (BOOL) chosenToInitiate {
  return !!chosenToInitiate_;
}
- (void) setChosenToInitiate:(BOOL) value {
  chosenToInitiate_ = !!value;
}
- (void) dealloc {
  self.mutableUserList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.chosenToInitiate = NO;
  }
  return self;
}
static FacetimeChatResponse* defaultFacetimeChatResponseInstance = nil;
+ (void) initialize {
  if (self == [FacetimeChatResponse class]) {
    defaultFacetimeChatResponseInstance = [[FacetimeChatResponse alloc] init];
  }
}
+ (FacetimeChatResponse*) defaultInstance {
  return defaultFacetimeChatResponseInstance;
}
- (FacetimeChatResponse*) defaultInstance {
  return defaultFacetimeChatResponseInstance;
}
- (NSArray*) userList {
  return mutableUserList;
}
- (PBGameUser*) userAtIndex:(int32_t) index {
  id value = [mutableUserList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasChosenToInitiate) {
    return NO;
  }
  for (PBGameUser* element in self.userList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBGameUser* element in self.userList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasChosenToInitiate) {
    [output writeBool:2 value:self.chosenToInitiate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBGameUser* element in self.userList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasChosenToInitiate) {
    size += computeBoolSize(2, self.chosenToInitiate);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FacetimeChatResponse*) parseFromData:(NSData*) data {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromData:data] build];
}
+ (FacetimeChatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromInputStream:input] build];
}
+ (FacetimeChatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (FacetimeChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FacetimeChatResponse*)[[[FacetimeChatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FacetimeChatResponse_Builder*) builder {
  return [[[FacetimeChatResponse_Builder alloc] init] autorelease];
}
+ (FacetimeChatResponse_Builder*) builderWithPrototype:(FacetimeChatResponse*) prototype {
  return [[FacetimeChatResponse builder] mergeFrom:prototype];
}
- (FacetimeChatResponse_Builder*) builder {
  return [FacetimeChatResponse builder];
}
@end

@interface FacetimeChatResponse_Builder()
@property (retain) FacetimeChatResponse* result;
@end

@implementation FacetimeChatResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FacetimeChatResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FacetimeChatResponse_Builder*) clear {
  self.result = [[[FacetimeChatResponse alloc] init] autorelease];
  return self;
}
- (FacetimeChatResponse_Builder*) clone {
  return [FacetimeChatResponse builderWithPrototype:result];
}
- (FacetimeChatResponse*) defaultInstance {
  return [FacetimeChatResponse defaultInstance];
}
- (FacetimeChatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FacetimeChatResponse*) buildPartial {
  FacetimeChatResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FacetimeChatResponse_Builder*) mergeFrom:(FacetimeChatResponse*) other {
  if (other == [FacetimeChatResponse defaultInstance]) {
    return self;
  }
  if (other.mutableUserList.count > 0) {
    if (result.mutableUserList == nil) {
      result.mutableUserList = [NSMutableArray array];
    }
    [result.mutableUserList addObjectsFromArray:other.mutableUserList];
  }
  if (other.hasChosenToInitiate) {
    [self setChosenToInitiate:other.chosenToInitiate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FacetimeChatResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FacetimeChatResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setChosenToInitiate:[input readBool]];
        break;
      }
    }
  }
}
- (NSArray*) userList {
  if (result.mutableUserList == nil) { return [NSArray array]; }
  return result.mutableUserList;
}
- (PBGameUser*) userAtIndex:(int32_t) index {
  return [result userAtIndex:index];
}
- (FacetimeChatResponse_Builder*) replaceUserAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUserList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FacetimeChatResponse_Builder*) addAllUser:(NSArray*) values {
  if (result.mutableUserList == nil) {
    result.mutableUserList = [NSMutableArray array];
  }
  [result.mutableUserList addObjectsFromArray:values];
  return self;
}
- (FacetimeChatResponse_Builder*) clearUserList {
  result.mutableUserList = nil;
  return self;
}
- (FacetimeChatResponse_Builder*) addUser:(PBGameUser*) value {
  if (result.mutableUserList == nil) {
    result.mutableUserList = [NSMutableArray array];
  }
  [result.mutableUserList addObject:value];
  return self;
}
- (BOOL) hasChosenToInitiate {
  return result.hasChosenToInitiate;
}
- (BOOL) chosenToInitiate {
  return result.chosenToInitiate;
}
- (FacetimeChatResponse_Builder*) setChosenToInitiate:(BOOL) value {
  result.hasChosenToInitiate = YES;
  result.chosenToInitiate = value;
  return self;
}
- (FacetimeChatResponse_Builder*) clearChosenToInitiate {
  result.hasChosenToInitiate = NO;
  result.chosenToInitiate = NO;
  return self;
}
@end

@interface GameMessage ()
@property GameCommandType command;
@property int32_t messageId;
@property GameResultCode resultCode;
@property (retain) NSString* userId;
@property int64_t sessionId;
@property int32_t round;
@property GameCompleteReason completeReason;
@property int32_t onlineUserCount;
@property (retain) NSString* toUserId;
@property (retain) NSString* currentPlayUserId;
@property (retain) JoinGameRequest* joinGameRequest;
@property (retain) JoinGameResponse* joinGameResponse;
@property (retain) StartGameRequest* startGameRequest;
@property (retain) StartGameResponse* startGameResponse;
@property (retain) GameStartNotificationRequest* gameStartNotificationRequest;
@property (retain) GameStartNotificationResponse* gameStartNotificationResponse;
@property (retain) SendDrawDataRequest* sendDrawDataRequest;
@property (retain) SendDrawDataResponse* sendDrawDataResponse;
@property (retain) GameChatRequest* chatRequest;
@property (retain) GameChatResponse* chatResponse;
@property (retain) FacetimeChatRequest* facetimeChatRequest;
@property (retain) FacetimeChatResponse* facetimeChatResponse;
@property (retain) GeneralNotification* notification;
@property (retain) GetRoomsRequest* getRoomsRequest;
@property (retain) GetRoomsResponse* getRoomsResponse;
@property (retain) CreateRoomRequest* createRoomRequest;
@property (retain) CreateRoomResponse* createRoomResponse;
@property (retain) SearchRoomRequest* searchRoomRequest;
@property (retain) SearchRoomResponse* searchRoomResponse;
@property (retain) RoomNotificationRequest* roomNotificationRequest;
@property (retain) RollDiceEndNotificationRequest* rollDiceEndNotificationRequest;
@property (retain) CallDiceRequest* callDiceRequest;
@property (retain) CallDiceResponse* callDiceResponse;
@property (retain) OpenDiceRequest* openDiceRequest;
@property (retain) OpenDiceResponse* openDiceResponse;
@property (retain) GameOverNotificationRequest* gameOverNotificationRequest;
@property (retain) GameOverNotificationResponse* gameOverNotificationResponse;
@property (retain) RegisterRoomsNotificationRequest* registerRoomsNotificationRequest;
@property (retain) RegisterRoomsNotificationResponse* registerRoomsNotificationResponse;
@property (retain) UnRegisterRoomsNotificationRequest* unRegisterRoomsNotificationRequest;
@property (retain) UnRegisterRoomsNotificationResponse* unRegisterRoomsNotificationResponse;
@property (retain) UserDiceNotification* userDiceNotification;
@property (retain) BetDiceRequest* betDiceRequest;
@property (retain) BetDiceResponse* betDiceResponse;
@property (retain) UseItemRequest* useItemRequest;
@property (retain) UseItemResponse* useItemResponse;
@property (retain) BetRequest* betRequest;
@property (retain) BetResponse* betResponse;
@property (retain) CheckCardRequest* checkCardRequest;
@property (retain) CheckCardResponse* checkCardResponse;
@property (retain) FoldCardRequest* foldCardRequest;
@property (retain) FoldCardResponse* foldCardResponse;
@property (retain) ShowCardRequest* showCardRequest;
@property (retain) ShowCardResponse* showCardResponse;
@property (retain) CompareCardRequest* compareCardRequest;
@property (retain) CompareCardResponse* compareCardResponse;
@property (retain) ChangeCardRequest* changeCardRequest;
@property (retain) ChangeCardResponse* changeCardResponse;
@property (retain) TimeoutSettingRequest* timeoutSettingRequest;
@property (retain) TimeoutSettingResponse* timeoutSettingResponse;
@property int32_t startOffset;
@property int32_t maxCount;
@property int32_t timeStamp;
@property (retain) NSString* mac;
@end

@implementation GameMessage

- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) value {
  hasCommand_ = !!value;
}
@synthesize command;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value {
  hasResultCode_ = !!value;
}
@synthesize resultCode;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) value {
  hasRound_ = !!value;
}
@synthesize round;
- (BOOL) hasCompleteReason {
  return !!hasCompleteReason_;
}
- (void) setHasCompleteReason:(BOOL) value {
  hasCompleteReason_ = !!value;
}
@synthesize completeReason;
- (BOOL) hasOnlineUserCount {
  return !!hasOnlineUserCount_;
}
- (void) setHasOnlineUserCount:(BOOL) value {
  hasOnlineUserCount_ = !!value;
}
@synthesize onlineUserCount;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value {
  hasToUserId_ = !!value;
}
@synthesize toUserId;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasJoinGameRequest {
  return !!hasJoinGameRequest_;
}
- (void) setHasJoinGameRequest:(BOOL) value {
  hasJoinGameRequest_ = !!value;
}
@synthesize joinGameRequest;
- (BOOL) hasJoinGameResponse {
  return !!hasJoinGameResponse_;
}
- (void) setHasJoinGameResponse:(BOOL) value {
  hasJoinGameResponse_ = !!value;
}
@synthesize joinGameResponse;
- (BOOL) hasStartGameRequest {
  return !!hasStartGameRequest_;
}
- (void) setHasStartGameRequest:(BOOL) value {
  hasStartGameRequest_ = !!value;
}
@synthesize startGameRequest;
- (BOOL) hasStartGameResponse {
  return !!hasStartGameResponse_;
}
- (void) setHasStartGameResponse:(BOOL) value {
  hasStartGameResponse_ = !!value;
}
@synthesize startGameResponse;
- (BOOL) hasGameStartNotificationRequest {
  return !!hasGameStartNotificationRequest_;
}
- (void) setHasGameStartNotificationRequest:(BOOL) value {
  hasGameStartNotificationRequest_ = !!value;
}
@synthesize gameStartNotificationRequest;
- (BOOL) hasGameStartNotificationResponse {
  return !!hasGameStartNotificationResponse_;
}
- (void) setHasGameStartNotificationResponse:(BOOL) value {
  hasGameStartNotificationResponse_ = !!value;
}
@synthesize gameStartNotificationResponse;
- (BOOL) hasSendDrawDataRequest {
  return !!hasSendDrawDataRequest_;
}
- (void) setHasSendDrawDataRequest:(BOOL) value {
  hasSendDrawDataRequest_ = !!value;
}
@synthesize sendDrawDataRequest;
- (BOOL) hasSendDrawDataResponse {
  return !!hasSendDrawDataResponse_;
}
- (void) setHasSendDrawDataResponse:(BOOL) value {
  hasSendDrawDataResponse_ = !!value;
}
@synthesize sendDrawDataResponse;
- (BOOL) hasChatRequest {
  return !!hasChatRequest_;
}
- (void) setHasChatRequest:(BOOL) value {
  hasChatRequest_ = !!value;
}
@synthesize chatRequest;
- (BOOL) hasChatResponse {
  return !!hasChatResponse_;
}
- (void) setHasChatResponse:(BOOL) value {
  hasChatResponse_ = !!value;
}
@synthesize chatResponse;
- (BOOL) hasFacetimeChatRequest {
  return !!hasFacetimeChatRequest_;
}
- (void) setHasFacetimeChatRequest:(BOOL) value {
  hasFacetimeChatRequest_ = !!value;
}
@synthesize facetimeChatRequest;
- (BOOL) hasFacetimeChatResponse {
  return !!hasFacetimeChatResponse_;
}
- (void) setHasFacetimeChatResponse:(BOOL) value {
  hasFacetimeChatResponse_ = !!value;
}
@synthesize facetimeChatResponse;
- (BOOL) hasNotification {
  return !!hasNotification_;
}
- (void) setHasNotification:(BOOL) value {
  hasNotification_ = !!value;
}
@synthesize notification;
- (BOOL) hasGetRoomsRequest {
  return !!hasGetRoomsRequest_;
}
- (void) setHasGetRoomsRequest:(BOOL) value {
  hasGetRoomsRequest_ = !!value;
}
@synthesize getRoomsRequest;
- (BOOL) hasGetRoomsResponse {
  return !!hasGetRoomsResponse_;
}
- (void) setHasGetRoomsResponse:(BOOL) value {
  hasGetRoomsResponse_ = !!value;
}
@synthesize getRoomsResponse;
- (BOOL) hasCreateRoomRequest {
  return !!hasCreateRoomRequest_;
}
- (void) setHasCreateRoomRequest:(BOOL) value {
  hasCreateRoomRequest_ = !!value;
}
@synthesize createRoomRequest;
- (BOOL) hasCreateRoomResponse {
  return !!hasCreateRoomResponse_;
}
- (void) setHasCreateRoomResponse:(BOOL) value {
  hasCreateRoomResponse_ = !!value;
}
@synthesize createRoomResponse;
- (BOOL) hasSearchRoomRequest {
  return !!hasSearchRoomRequest_;
}
- (void) setHasSearchRoomRequest:(BOOL) value {
  hasSearchRoomRequest_ = !!value;
}
@synthesize searchRoomRequest;
- (BOOL) hasSearchRoomResponse {
  return !!hasSearchRoomResponse_;
}
- (void) setHasSearchRoomResponse:(BOOL) value {
  hasSearchRoomResponse_ = !!value;
}
@synthesize searchRoomResponse;
- (BOOL) hasRoomNotificationRequest {
  return !!hasRoomNotificationRequest_;
}
- (void) setHasRoomNotificationRequest:(BOOL) value {
  hasRoomNotificationRequest_ = !!value;
}
@synthesize roomNotificationRequest;
- (BOOL) hasRollDiceEndNotificationRequest {
  return !!hasRollDiceEndNotificationRequest_;
}
- (void) setHasRollDiceEndNotificationRequest:(BOOL) value {
  hasRollDiceEndNotificationRequest_ = !!value;
}
@synthesize rollDiceEndNotificationRequest;
- (BOOL) hasCallDiceRequest {
  return !!hasCallDiceRequest_;
}
- (void) setHasCallDiceRequest:(BOOL) value {
  hasCallDiceRequest_ = !!value;
}
@synthesize callDiceRequest;
- (BOOL) hasCallDiceResponse {
  return !!hasCallDiceResponse_;
}
- (void) setHasCallDiceResponse:(BOOL) value {
  hasCallDiceResponse_ = !!value;
}
@synthesize callDiceResponse;
- (BOOL) hasOpenDiceRequest {
  return !!hasOpenDiceRequest_;
}
- (void) setHasOpenDiceRequest:(BOOL) value {
  hasOpenDiceRequest_ = !!value;
}
@synthesize openDiceRequest;
- (BOOL) hasOpenDiceResponse {
  return !!hasOpenDiceResponse_;
}
- (void) setHasOpenDiceResponse:(BOOL) value {
  hasOpenDiceResponse_ = !!value;
}
@synthesize openDiceResponse;
- (BOOL) hasGameOverNotificationRequest {
  return !!hasGameOverNotificationRequest_;
}
- (void) setHasGameOverNotificationRequest:(BOOL) value {
  hasGameOverNotificationRequest_ = !!value;
}
@synthesize gameOverNotificationRequest;
- (BOOL) hasGameOverNotificationResponse {
  return !!hasGameOverNotificationResponse_;
}
- (void) setHasGameOverNotificationResponse:(BOOL) value {
  hasGameOverNotificationResponse_ = !!value;
}
@synthesize gameOverNotificationResponse;
- (BOOL) hasRegisterRoomsNotificationRequest {
  return !!hasRegisterRoomsNotificationRequest_;
}
- (void) setHasRegisterRoomsNotificationRequest:(BOOL) value {
  hasRegisterRoomsNotificationRequest_ = !!value;
}
@synthesize registerRoomsNotificationRequest;
- (BOOL) hasRegisterRoomsNotificationResponse {
  return !!hasRegisterRoomsNotificationResponse_;
}
- (void) setHasRegisterRoomsNotificationResponse:(BOOL) value {
  hasRegisterRoomsNotificationResponse_ = !!value;
}
@synthesize registerRoomsNotificationResponse;
- (BOOL) hasUnRegisterRoomsNotificationRequest {
  return !!hasUnRegisterRoomsNotificationRequest_;
}
- (void) setHasUnRegisterRoomsNotificationRequest:(BOOL) value {
  hasUnRegisterRoomsNotificationRequest_ = !!value;
}
@synthesize unRegisterRoomsNotificationRequest;
- (BOOL) hasUnRegisterRoomsNotificationResponse {
  return !!hasUnRegisterRoomsNotificationResponse_;
}
- (void) setHasUnRegisterRoomsNotificationResponse:(BOOL) value {
  hasUnRegisterRoomsNotificationResponse_ = !!value;
}
@synthesize unRegisterRoomsNotificationResponse;
- (BOOL) hasUserDiceNotification {
  return !!hasUserDiceNotification_;
}
- (void) setHasUserDiceNotification:(BOOL) value {
  hasUserDiceNotification_ = !!value;
}
@synthesize userDiceNotification;
- (BOOL) hasBetDiceRequest {
  return !!hasBetDiceRequest_;
}
- (void) setHasBetDiceRequest:(BOOL) value {
  hasBetDiceRequest_ = !!value;
}
@synthesize betDiceRequest;
- (BOOL) hasBetDiceResponse {
  return !!hasBetDiceResponse_;
}
- (void) setHasBetDiceResponse:(BOOL) value {
  hasBetDiceResponse_ = !!value;
}
@synthesize betDiceResponse;
- (BOOL) hasUseItemRequest {
  return !!hasUseItemRequest_;
}
- (void) setHasUseItemRequest:(BOOL) value {
  hasUseItemRequest_ = !!value;
}
@synthesize useItemRequest;
- (BOOL) hasUseItemResponse {
  return !!hasUseItemResponse_;
}
- (void) setHasUseItemResponse:(BOOL) value {
  hasUseItemResponse_ = !!value;
}
@synthesize useItemResponse;
- (BOOL) hasBetRequest {
  return !!hasBetRequest_;
}
- (void) setHasBetRequest:(BOOL) value {
  hasBetRequest_ = !!value;
}
@synthesize betRequest;
- (BOOL) hasBetResponse {
  return !!hasBetResponse_;
}
- (void) setHasBetResponse:(BOOL) value {
  hasBetResponse_ = !!value;
}
@synthesize betResponse;
- (BOOL) hasCheckCardRequest {
  return !!hasCheckCardRequest_;
}
- (void) setHasCheckCardRequest:(BOOL) value {
  hasCheckCardRequest_ = !!value;
}
@synthesize checkCardRequest;
- (BOOL) hasCheckCardResponse {
  return !!hasCheckCardResponse_;
}
- (void) setHasCheckCardResponse:(BOOL) value {
  hasCheckCardResponse_ = !!value;
}
@synthesize checkCardResponse;
- (BOOL) hasFoldCardRequest {
  return !!hasFoldCardRequest_;
}
- (void) setHasFoldCardRequest:(BOOL) value {
  hasFoldCardRequest_ = !!value;
}
@synthesize foldCardRequest;
- (BOOL) hasFoldCardResponse {
  return !!hasFoldCardResponse_;
}
- (void) setHasFoldCardResponse:(BOOL) value {
  hasFoldCardResponse_ = !!value;
}
@synthesize foldCardResponse;
- (BOOL) hasShowCardRequest {
  return !!hasShowCardRequest_;
}
- (void) setHasShowCardRequest:(BOOL) value {
  hasShowCardRequest_ = !!value;
}
@synthesize showCardRequest;
- (BOOL) hasShowCardResponse {
  return !!hasShowCardResponse_;
}
- (void) setHasShowCardResponse:(BOOL) value {
  hasShowCardResponse_ = !!value;
}
@synthesize showCardResponse;
- (BOOL) hasCompareCardRequest {
  return !!hasCompareCardRequest_;
}
- (void) setHasCompareCardRequest:(BOOL) value {
  hasCompareCardRequest_ = !!value;
}
@synthesize compareCardRequest;
- (BOOL) hasCompareCardResponse {
  return !!hasCompareCardResponse_;
}
- (void) setHasCompareCardResponse:(BOOL) value {
  hasCompareCardResponse_ = !!value;
}
@synthesize compareCardResponse;
- (BOOL) hasChangeCardRequest {
  return !!hasChangeCardRequest_;
}
- (void) setHasChangeCardRequest:(BOOL) value {
  hasChangeCardRequest_ = !!value;
}
@synthesize changeCardRequest;
- (BOOL) hasChangeCardResponse {
  return !!hasChangeCardResponse_;
}
- (void) setHasChangeCardResponse:(BOOL) value {
  hasChangeCardResponse_ = !!value;
}
@synthesize changeCardResponse;
- (BOOL) hasTimeoutSettingRequest {
  return !!hasTimeoutSettingRequest_;
}
- (void) setHasTimeoutSettingRequest:(BOOL) value {
  hasTimeoutSettingRequest_ = !!value;
}
@synthesize timeoutSettingRequest;
- (BOOL) hasTimeoutSettingResponse {
  return !!hasTimeoutSettingResponse_;
}
- (void) setHasTimeoutSettingResponse:(BOOL) value {
  hasTimeoutSettingResponse_ = !!value;
}
@synthesize timeoutSettingResponse;
- (BOOL) hasStartOffset {
  return !!hasStartOffset_;
}
- (void) setHasStartOffset:(BOOL) value {
  hasStartOffset_ = !!value;
}
@synthesize startOffset;
- (BOOL) hasMaxCount {
  return !!hasMaxCount_;
}
- (void) setHasMaxCount:(BOOL) value {
  hasMaxCount_ = !!value;
}
@synthesize maxCount;
- (BOOL) hasTimeStamp {
  return !!hasTimeStamp_;
}
- (void) setHasTimeStamp:(BOOL) value {
  hasTimeStamp_ = !!value;
}
@synthesize timeStamp;
- (BOOL) hasMac {
  return !!hasMac_;
}
- (void) setHasMac:(BOOL) value {
  hasMac_ = !!value;
}
@synthesize mac;
- (void) dealloc {
  self.userId = nil;
  self.toUserId = nil;
  self.currentPlayUserId = nil;
  self.joinGameRequest = nil;
  self.joinGameResponse = nil;
  self.startGameRequest = nil;
  self.startGameResponse = nil;
  self.gameStartNotificationRequest = nil;
  self.gameStartNotificationResponse = nil;
  self.sendDrawDataRequest = nil;
  self.sendDrawDataResponse = nil;
  self.chatRequest = nil;
  self.chatResponse = nil;
  self.facetimeChatRequest = nil;
  self.facetimeChatResponse = nil;
  self.notification = nil;
  self.getRoomsRequest = nil;
  self.getRoomsResponse = nil;
  self.createRoomRequest = nil;
  self.createRoomResponse = nil;
  self.searchRoomRequest = nil;
  self.searchRoomResponse = nil;
  self.roomNotificationRequest = nil;
  self.rollDiceEndNotificationRequest = nil;
  self.callDiceRequest = nil;
  self.callDiceResponse = nil;
  self.openDiceRequest = nil;
  self.openDiceResponse = nil;
  self.gameOverNotificationRequest = nil;
  self.gameOverNotificationResponse = nil;
  self.registerRoomsNotificationRequest = nil;
  self.registerRoomsNotificationResponse = nil;
  self.unRegisterRoomsNotificationRequest = nil;
  self.unRegisterRoomsNotificationResponse = nil;
  self.userDiceNotification = nil;
  self.betDiceRequest = nil;
  self.betDiceResponse = nil;
  self.useItemRequest = nil;
  self.useItemResponse = nil;
  self.betRequest = nil;
  self.betResponse = nil;
  self.checkCardRequest = nil;
  self.checkCardResponse = nil;
  self.foldCardRequest = nil;
  self.foldCardResponse = nil;
  self.showCardRequest = nil;
  self.showCardResponse = nil;
  self.compareCardRequest = nil;
  self.compareCardResponse = nil;
  self.changeCardRequest = nil;
  self.changeCardResponse = nil;
  self.timeoutSettingRequest = nil;
  self.timeoutSettingResponse = nil;
  self.mac = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.command = GameCommandTypeJoinGameRequest;
    self.messageId = 0;
    self.resultCode = GameResultCodeSuccess;
    self.userId = @"";
    self.sessionId = 0L;
    self.round = 0;
    self.completeReason = GameCompleteReasonReasonNotComplete;
    self.onlineUserCount = 0;
    self.toUserId = @"";
    self.currentPlayUserId = @"";
    self.joinGameRequest = [JoinGameRequest defaultInstance];
    self.joinGameResponse = [JoinGameResponse defaultInstance];
    self.startGameRequest = [StartGameRequest defaultInstance];
    self.startGameResponse = [StartGameResponse defaultInstance];
    self.gameStartNotificationRequest = [GameStartNotificationRequest defaultInstance];
    self.gameStartNotificationResponse = [GameStartNotificationResponse defaultInstance];
    self.sendDrawDataRequest = [SendDrawDataRequest defaultInstance];
    self.sendDrawDataResponse = [SendDrawDataResponse defaultInstance];
    self.chatRequest = [GameChatRequest defaultInstance];
    self.chatResponse = [GameChatResponse defaultInstance];
    self.facetimeChatRequest = [FacetimeChatRequest defaultInstance];
    self.facetimeChatResponse = [FacetimeChatResponse defaultInstance];
    self.notification = [GeneralNotification defaultInstance];
    self.getRoomsRequest = [GetRoomsRequest defaultInstance];
    self.getRoomsResponse = [GetRoomsResponse defaultInstance];
    self.createRoomRequest = [CreateRoomRequest defaultInstance];
    self.createRoomResponse = [CreateRoomResponse defaultInstance];
    self.searchRoomRequest = [SearchRoomRequest defaultInstance];
    self.searchRoomResponse = [SearchRoomResponse defaultInstance];
    self.roomNotificationRequest = [RoomNotificationRequest defaultInstance];
    self.rollDiceEndNotificationRequest = [RollDiceEndNotificationRequest defaultInstance];
    self.callDiceRequest = [CallDiceRequest defaultInstance];
    self.callDiceResponse = [CallDiceResponse defaultInstance];
    self.openDiceRequest = [OpenDiceRequest defaultInstance];
    self.openDiceResponse = [OpenDiceResponse defaultInstance];
    self.gameOverNotificationRequest = [GameOverNotificationRequest defaultInstance];
    self.gameOverNotificationResponse = [GameOverNotificationResponse defaultInstance];
    self.registerRoomsNotificationRequest = [RegisterRoomsNotificationRequest defaultInstance];
    self.registerRoomsNotificationResponse = [RegisterRoomsNotificationResponse defaultInstance];
    self.unRegisterRoomsNotificationRequest = [UnRegisterRoomsNotificationRequest defaultInstance];
    self.unRegisterRoomsNotificationResponse = [UnRegisterRoomsNotificationResponse defaultInstance];
    self.userDiceNotification = [UserDiceNotification defaultInstance];
    self.betDiceRequest = [BetDiceRequest defaultInstance];
    self.betDiceResponse = [BetDiceResponse defaultInstance];
    self.useItemRequest = [UseItemRequest defaultInstance];
    self.useItemResponse = [UseItemResponse defaultInstance];
    self.betRequest = [BetRequest defaultInstance];
    self.betResponse = [BetResponse defaultInstance];
    self.checkCardRequest = [CheckCardRequest defaultInstance];
    self.checkCardResponse = [CheckCardResponse defaultInstance];
    self.foldCardRequest = [FoldCardRequest defaultInstance];
    self.foldCardResponse = [FoldCardResponse defaultInstance];
    self.showCardRequest = [ShowCardRequest defaultInstance];
    self.showCardResponse = [ShowCardResponse defaultInstance];
    self.compareCardRequest = [CompareCardRequest defaultInstance];
    self.compareCardResponse = [CompareCardResponse defaultInstance];
    self.changeCardRequest = [ChangeCardRequest defaultInstance];
    self.changeCardResponse = [ChangeCardResponse defaultInstance];
    self.timeoutSettingRequest = [TimeoutSettingRequest defaultInstance];
    self.timeoutSettingResponse = [TimeoutSettingResponse defaultInstance];
    self.startOffset = 0;
    self.maxCount = 0;
    self.timeStamp = 0;
    self.mac = @"";
  }
  return self;
}
static GameMessage* defaultGameMessageInstance = nil;
+ (void) initialize {
  if (self == [GameMessage class]) {
    defaultGameMessageInstance = [[GameMessage alloc] init];
  }
}
+ (GameMessage*) defaultInstance {
  return defaultGameMessageInstance;
}
- (GameMessage*) defaultInstance {
  return defaultGameMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCommand) {
    return NO;
  }
  if (!self.hasMessageId) {
    return NO;
  }
  if (self.hasJoinGameRequest) {
    if (!self.joinGameRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasJoinGameResponse) {
    if (!self.joinGameResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasGameStartNotificationRequest) {
    if (!self.gameStartNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasSendDrawDataRequest) {
    if (!self.sendDrawDataRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFacetimeChatRequest) {
    if (!self.facetimeChatRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFacetimeChatResponse) {
    if (!self.facetimeChatResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotification) {
    if (!self.notification.isInitialized) {
      return NO;
    }
  }
  if (self.hasGetRoomsRequest) {
    if (!self.getRoomsRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasGetRoomsResponse) {
    if (!self.getRoomsResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreateRoomRequest) {
    if (!self.createRoomRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreateRoomResponse) {
    if (!self.createRoomResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasSearchRoomResponse) {
    if (!self.searchRoomResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasRoomNotificationRequest) {
    if (!self.roomNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasRollDiceEndNotificationRequest) {
    if (!self.rollDiceEndNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasGameOverNotificationRequest) {
    if (!self.gameOverNotificationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserDiceNotification) {
    if (!self.userDiceNotification.isInitialized) {
      return NO;
    }
  }
  if (self.hasBetDiceRequest) {
    if (!self.betDiceRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUseItemRequest) {
    if (!self.useItemRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUseItemResponse) {
    if (!self.useItemResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasBetRequest) {
    if (!self.betRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompareCardRequest) {
    if (!self.compareCardRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompareCardResponse) {
    if (!self.compareCardResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasChangeCardRequest) {
    if (!self.changeCardRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasChangeCardResponse) {
    if (!self.changeCardResponse.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommand) {
    [output writeEnum:1 value:self.command];
  }
  if (self.hasMessageId) {
    [output writeInt32:2 value:self.messageId];
  }
  if (self.hasResultCode) {
    [output writeEnum:3 value:self.resultCode];
  }
  if (self.hasUserId) {
    [output writeString:4 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeInt64:5 value:self.sessionId];
  }
  if (self.hasRound) {
    [output writeInt32:6 value:self.round];
  }
  if (self.hasCompleteReason) {
    [output writeEnum:7 value:self.completeReason];
  }
  if (self.hasOnlineUserCount) {
    [output writeInt32:8 value:self.onlineUserCount];
  }
  if (self.hasToUserId) {
    [output writeString:9 value:self.toUserId];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:10 value:self.currentPlayUserId];
  }
  if (self.hasJoinGameRequest) {
    [output writeMessage:11 value:self.joinGameRequest];
  }
  if (self.hasJoinGameResponse) {
    [output writeMessage:12 value:self.joinGameResponse];
  }
  if (self.hasStartGameRequest) {
    [output writeMessage:13 value:self.startGameRequest];
  }
  if (self.hasStartGameResponse) {
    [output writeMessage:14 value:self.startGameResponse];
  }
  if (self.hasGameStartNotificationRequest) {
    [output writeMessage:15 value:self.gameStartNotificationRequest];
  }
  if (self.hasGameStartNotificationResponse) {
    [output writeMessage:16 value:self.gameStartNotificationResponse];
  }
  if (self.hasSendDrawDataRequest) {
    [output writeMessage:21 value:self.sendDrawDataRequest];
  }
  if (self.hasSendDrawDataResponse) {
    [output writeMessage:22 value:self.sendDrawDataResponse];
  }
  if (self.hasChatRequest) {
    [output writeMessage:23 value:self.chatRequest];
  }
  if (self.hasChatResponse) {
    [output writeMessage:24 value:self.chatResponse];
  }
  if (self.hasFacetimeChatRequest) {
    [output writeMessage:31 value:self.facetimeChatRequest];
  }
  if (self.hasFacetimeChatResponse) {
    [output writeMessage:32 value:self.facetimeChatResponse];
  }
  if (self.hasNotification) {
    [output writeMessage:51 value:self.notification];
  }
  if (self.hasGetRoomsRequest) {
    [output writeMessage:101 value:self.getRoomsRequest];
  }
  if (self.hasGetRoomsResponse) {
    [output writeMessage:102 value:self.getRoomsResponse];
  }
  if (self.hasCreateRoomRequest) {
    [output writeMessage:103 value:self.createRoomRequest];
  }
  if (self.hasCreateRoomResponse) {
    [output writeMessage:104 value:self.createRoomResponse];
  }
  if (self.hasSearchRoomRequest) {
    [output writeMessage:105 value:self.searchRoomRequest];
  }
  if (self.hasSearchRoomResponse) {
    [output writeMessage:106 value:self.searchRoomResponse];
  }
  if (self.hasRoomNotificationRequest) {
    [output writeMessage:107 value:self.roomNotificationRequest];
  }
  if (self.hasRollDiceEndNotificationRequest) {
    [output writeMessage:109 value:self.rollDiceEndNotificationRequest];
  }
  if (self.hasCallDiceRequest) {
    [output writeMessage:111 value:self.callDiceRequest];
  }
  if (self.hasCallDiceResponse) {
    [output writeMessage:112 value:self.callDiceResponse];
  }
  if (self.hasOpenDiceRequest) {
    [output writeMessage:113 value:self.openDiceRequest];
  }
  if (self.hasOpenDiceResponse) {
    [output writeMessage:114 value:self.openDiceResponse];
  }
  if (self.hasGameOverNotificationRequest) {
    [output writeMessage:115 value:self.gameOverNotificationRequest];
  }
  if (self.hasGameOverNotificationResponse) {
    [output writeMessage:116 value:self.gameOverNotificationResponse];
  }
  if (self.hasRegisterRoomsNotificationRequest) {
    [output writeMessage:117 value:self.registerRoomsNotificationRequest];
  }
  if (self.hasRegisterRoomsNotificationResponse) {
    [output writeMessage:118 value:self.registerRoomsNotificationResponse];
  }
  if (self.hasUnRegisterRoomsNotificationRequest) {
    [output writeMessage:119 value:self.unRegisterRoomsNotificationRequest];
  }
  if (self.hasUnRegisterRoomsNotificationResponse) {
    [output writeMessage:120 value:self.unRegisterRoomsNotificationResponse];
  }
  if (self.hasUserDiceNotification) {
    [output writeMessage:121 value:self.userDiceNotification];
  }
  if (self.hasBetDiceRequest) {
    [output writeMessage:123 value:self.betDiceRequest];
  }
  if (self.hasBetDiceResponse) {
    [output writeMessage:124 value:self.betDiceResponse];
  }
  if (self.hasUseItemRequest) {
    [output writeMessage:131 value:self.useItemRequest];
  }
  if (self.hasUseItemResponse) {
    [output writeMessage:132 value:self.useItemResponse];
  }
  if (self.hasBetRequest) {
    [output writeMessage:151 value:self.betRequest];
  }
  if (self.hasBetResponse) {
    [output writeMessage:152 value:self.betResponse];
  }
  if (self.hasCheckCardRequest) {
    [output writeMessage:153 value:self.checkCardRequest];
  }
  if (self.hasCheckCardResponse) {
    [output writeMessage:154 value:self.checkCardResponse];
  }
  if (self.hasFoldCardRequest) {
    [output writeMessage:155 value:self.foldCardRequest];
  }
  if (self.hasFoldCardResponse) {
    [output writeMessage:156 value:self.foldCardResponse];
  }
  if (self.hasShowCardRequest) {
    [output writeMessage:157 value:self.showCardRequest];
  }
  if (self.hasShowCardResponse) {
    [output writeMessage:158 value:self.showCardResponse];
  }
  if (self.hasCompareCardRequest) {
    [output writeMessage:159 value:self.compareCardRequest];
  }
  if (self.hasCompareCardResponse) {
    [output writeMessage:160 value:self.compareCardResponse];
  }
  if (self.hasChangeCardRequest) {
    [output writeMessage:161 value:self.changeCardRequest];
  }
  if (self.hasChangeCardResponse) {
    [output writeMessage:162 value:self.changeCardResponse];
  }
  if (self.hasTimeoutSettingRequest) {
    [output writeMessage:163 value:self.timeoutSettingRequest];
  }
  if (self.hasTimeoutSettingResponse) {
    [output writeMessage:164 value:self.timeoutSettingResponse];
  }
  if (self.hasStartOffset) {
    [output writeInt32:1000 value:self.startOffset];
  }
  if (self.hasMaxCount) {
    [output writeInt32:1001 value:self.maxCount];
  }
  if (self.hasTimeStamp) {
    [output writeInt32:1010 value:self.timeStamp];
  }
  if (self.hasMac) {
    [output writeString:1011 value:self.mac];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCommand) {
    size += computeEnumSize(1, self.command);
  }
  if (self.hasMessageId) {
    size += computeInt32Size(2, self.messageId);
  }
  if (self.hasResultCode) {
    size += computeEnumSize(3, self.resultCode);
  }
  if (self.hasUserId) {
    size += computeStringSize(4, self.userId);
  }
  if (self.hasSessionId) {
    size += computeInt64Size(5, self.sessionId);
  }
  if (self.hasRound) {
    size += computeInt32Size(6, self.round);
  }
  if (self.hasCompleteReason) {
    size += computeEnumSize(7, self.completeReason);
  }
  if (self.hasOnlineUserCount) {
    size += computeInt32Size(8, self.onlineUserCount);
  }
  if (self.hasToUserId) {
    size += computeStringSize(9, self.toUserId);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(10, self.currentPlayUserId);
  }
  if (self.hasJoinGameRequest) {
    size += computeMessageSize(11, self.joinGameRequest);
  }
  if (self.hasJoinGameResponse) {
    size += computeMessageSize(12, self.joinGameResponse);
  }
  if (self.hasStartGameRequest) {
    size += computeMessageSize(13, self.startGameRequest);
  }
  if (self.hasStartGameResponse) {
    size += computeMessageSize(14, self.startGameResponse);
  }
  if (self.hasGameStartNotificationRequest) {
    size += computeMessageSize(15, self.gameStartNotificationRequest);
  }
  if (self.hasGameStartNotificationResponse) {
    size += computeMessageSize(16, self.gameStartNotificationResponse);
  }
  if (self.hasSendDrawDataRequest) {
    size += computeMessageSize(21, self.sendDrawDataRequest);
  }
  if (self.hasSendDrawDataResponse) {
    size += computeMessageSize(22, self.sendDrawDataResponse);
  }
  if (self.hasChatRequest) {
    size += computeMessageSize(23, self.chatRequest);
  }
  if (self.hasChatResponse) {
    size += computeMessageSize(24, self.chatResponse);
  }
  if (self.hasFacetimeChatRequest) {
    size += computeMessageSize(31, self.facetimeChatRequest);
  }
  if (self.hasFacetimeChatResponse) {
    size += computeMessageSize(32, self.facetimeChatResponse);
  }
  if (self.hasNotification) {
    size += computeMessageSize(51, self.notification);
  }
  if (self.hasGetRoomsRequest) {
    size += computeMessageSize(101, self.getRoomsRequest);
  }
  if (self.hasGetRoomsResponse) {
    size += computeMessageSize(102, self.getRoomsResponse);
  }
  if (self.hasCreateRoomRequest) {
    size += computeMessageSize(103, self.createRoomRequest);
  }
  if (self.hasCreateRoomResponse) {
    size += computeMessageSize(104, self.createRoomResponse);
  }
  if (self.hasSearchRoomRequest) {
    size += computeMessageSize(105, self.searchRoomRequest);
  }
  if (self.hasSearchRoomResponse) {
    size += computeMessageSize(106, self.searchRoomResponse);
  }
  if (self.hasRoomNotificationRequest) {
    size += computeMessageSize(107, self.roomNotificationRequest);
  }
  if (self.hasRollDiceEndNotificationRequest) {
    size += computeMessageSize(109, self.rollDiceEndNotificationRequest);
  }
  if (self.hasCallDiceRequest) {
    size += computeMessageSize(111, self.callDiceRequest);
  }
  if (self.hasCallDiceResponse) {
    size += computeMessageSize(112, self.callDiceResponse);
  }
  if (self.hasOpenDiceRequest) {
    size += computeMessageSize(113, self.openDiceRequest);
  }
  if (self.hasOpenDiceResponse) {
    size += computeMessageSize(114, self.openDiceResponse);
  }
  if (self.hasGameOverNotificationRequest) {
    size += computeMessageSize(115, self.gameOverNotificationRequest);
  }
  if (self.hasGameOverNotificationResponse) {
    size += computeMessageSize(116, self.gameOverNotificationResponse);
  }
  if (self.hasRegisterRoomsNotificationRequest) {
    size += computeMessageSize(117, self.registerRoomsNotificationRequest);
  }
  if (self.hasRegisterRoomsNotificationResponse) {
    size += computeMessageSize(118, self.registerRoomsNotificationResponse);
  }
  if (self.hasUnRegisterRoomsNotificationRequest) {
    size += computeMessageSize(119, self.unRegisterRoomsNotificationRequest);
  }
  if (self.hasUnRegisterRoomsNotificationResponse) {
    size += computeMessageSize(120, self.unRegisterRoomsNotificationResponse);
  }
  if (self.hasUserDiceNotification) {
    size += computeMessageSize(121, self.userDiceNotification);
  }
  if (self.hasBetDiceRequest) {
    size += computeMessageSize(123, self.betDiceRequest);
  }
  if (self.hasBetDiceResponse) {
    size += computeMessageSize(124, self.betDiceResponse);
  }
  if (self.hasUseItemRequest) {
    size += computeMessageSize(131, self.useItemRequest);
  }
  if (self.hasUseItemResponse) {
    size += computeMessageSize(132, self.useItemResponse);
  }
  if (self.hasBetRequest) {
    size += computeMessageSize(151, self.betRequest);
  }
  if (self.hasBetResponse) {
    size += computeMessageSize(152, self.betResponse);
  }
  if (self.hasCheckCardRequest) {
    size += computeMessageSize(153, self.checkCardRequest);
  }
  if (self.hasCheckCardResponse) {
    size += computeMessageSize(154, self.checkCardResponse);
  }
  if (self.hasFoldCardRequest) {
    size += computeMessageSize(155, self.foldCardRequest);
  }
  if (self.hasFoldCardResponse) {
    size += computeMessageSize(156, self.foldCardResponse);
  }
  if (self.hasShowCardRequest) {
    size += computeMessageSize(157, self.showCardRequest);
  }
  if (self.hasShowCardResponse) {
    size += computeMessageSize(158, self.showCardResponse);
  }
  if (self.hasCompareCardRequest) {
    size += computeMessageSize(159, self.compareCardRequest);
  }
  if (self.hasCompareCardResponse) {
    size += computeMessageSize(160, self.compareCardResponse);
  }
  if (self.hasChangeCardRequest) {
    size += computeMessageSize(161, self.changeCardRequest);
  }
  if (self.hasChangeCardResponse) {
    size += computeMessageSize(162, self.changeCardResponse);
  }
  if (self.hasTimeoutSettingRequest) {
    size += computeMessageSize(163, self.timeoutSettingRequest);
  }
  if (self.hasTimeoutSettingResponse) {
    size += computeMessageSize(164, self.timeoutSettingResponse);
  }
  if (self.hasStartOffset) {
    size += computeInt32Size(1000, self.startOffset);
  }
  if (self.hasMaxCount) {
    size += computeInt32Size(1001, self.maxCount);
  }
  if (self.hasTimeStamp) {
    size += computeInt32Size(1010, self.timeStamp);
  }
  if (self.hasMac) {
    size += computeStringSize(1011, self.mac);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameMessage*) parseFromData:(NSData*) data {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data] build];
}
+ (GameMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input] build];
}
+ (GameMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input] build];
}
+ (GameMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameMessage*)[[[GameMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameMessage_Builder*) builder {
  return [[[GameMessage_Builder alloc] init] autorelease];
}
+ (GameMessage_Builder*) builderWithPrototype:(GameMessage*) prototype {
  return [[GameMessage builder] mergeFrom:prototype];
}
- (GameMessage_Builder*) builder {
  return [GameMessage builder];
}
@end

@interface GameMessage_Builder()
@property (retain) GameMessage* result;
@end

@implementation GameMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameMessage_Builder*) clear {
  self.result = [[[GameMessage alloc] init] autorelease];
  return self;
}
- (GameMessage_Builder*) clone {
  return [GameMessage builderWithPrototype:result];
}
- (GameMessage*) defaultInstance {
  return [GameMessage defaultInstance];
}
- (GameMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameMessage*) buildPartial {
  GameMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameMessage_Builder*) mergeFrom:(GameMessage*) other {
  if (other == [GameMessage defaultInstance]) {
    return self;
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  if (other.hasCompleteReason) {
    [self setCompleteReason:other.completeReason];
  }
  if (other.hasOnlineUserCount) {
    [self setOnlineUserCount:other.onlineUserCount];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasJoinGameRequest) {
    [self mergeJoinGameRequest:other.joinGameRequest];
  }
  if (other.hasJoinGameResponse) {
    [self mergeJoinGameResponse:other.joinGameResponse];
  }
  if (other.hasStartGameRequest) {
    [self mergeStartGameRequest:other.startGameRequest];
  }
  if (other.hasStartGameResponse) {
    [self mergeStartGameResponse:other.startGameResponse];
  }
  if (other.hasGameStartNotificationRequest) {
    [self mergeGameStartNotificationRequest:other.gameStartNotificationRequest];
  }
  if (other.hasGameStartNotificationResponse) {
    [self mergeGameStartNotificationResponse:other.gameStartNotificationResponse];
  }
  if (other.hasSendDrawDataRequest) {
    [self mergeSendDrawDataRequest:other.sendDrawDataRequest];
  }
  if (other.hasSendDrawDataResponse) {
    [self mergeSendDrawDataResponse:other.sendDrawDataResponse];
  }
  if (other.hasChatRequest) {
    [self mergeChatRequest:other.chatRequest];
  }
  if (other.hasChatResponse) {
    [self mergeChatResponse:other.chatResponse];
  }
  if (other.hasFacetimeChatRequest) {
    [self mergeFacetimeChatRequest:other.facetimeChatRequest];
  }
  if (other.hasFacetimeChatResponse) {
    [self mergeFacetimeChatResponse:other.facetimeChatResponse];
  }
  if (other.hasNotification) {
    [self mergeNotification:other.notification];
  }
  if (other.hasGetRoomsRequest) {
    [self mergeGetRoomsRequest:other.getRoomsRequest];
  }
  if (other.hasGetRoomsResponse) {
    [self mergeGetRoomsResponse:other.getRoomsResponse];
  }
  if (other.hasCreateRoomRequest) {
    [self mergeCreateRoomRequest:other.createRoomRequest];
  }
  if (other.hasCreateRoomResponse) {
    [self mergeCreateRoomResponse:other.createRoomResponse];
  }
  if (other.hasSearchRoomRequest) {
    [self mergeSearchRoomRequest:other.searchRoomRequest];
  }
  if (other.hasSearchRoomResponse) {
    [self mergeSearchRoomResponse:other.searchRoomResponse];
  }
  if (other.hasRoomNotificationRequest) {
    [self mergeRoomNotificationRequest:other.roomNotificationRequest];
  }
  if (other.hasRollDiceEndNotificationRequest) {
    [self mergeRollDiceEndNotificationRequest:other.rollDiceEndNotificationRequest];
  }
  if (other.hasCallDiceRequest) {
    [self mergeCallDiceRequest:other.callDiceRequest];
  }
  if (other.hasCallDiceResponse) {
    [self mergeCallDiceResponse:other.callDiceResponse];
  }
  if (other.hasOpenDiceRequest) {
    [self mergeOpenDiceRequest:other.openDiceRequest];
  }
  if (other.hasOpenDiceResponse) {
    [self mergeOpenDiceResponse:other.openDiceResponse];
  }
  if (other.hasGameOverNotificationRequest) {
    [self mergeGameOverNotificationRequest:other.gameOverNotificationRequest];
  }
  if (other.hasGameOverNotificationResponse) {
    [self mergeGameOverNotificationResponse:other.gameOverNotificationResponse];
  }
  if (other.hasRegisterRoomsNotificationRequest) {
    [self mergeRegisterRoomsNotificationRequest:other.registerRoomsNotificationRequest];
  }
  if (other.hasRegisterRoomsNotificationResponse) {
    [self mergeRegisterRoomsNotificationResponse:other.registerRoomsNotificationResponse];
  }
  if (other.hasUnRegisterRoomsNotificationRequest) {
    [self mergeUnRegisterRoomsNotificationRequest:other.unRegisterRoomsNotificationRequest];
  }
  if (other.hasUnRegisterRoomsNotificationResponse) {
    [self mergeUnRegisterRoomsNotificationResponse:other.unRegisterRoomsNotificationResponse];
  }
  if (other.hasUserDiceNotification) {
    [self mergeUserDiceNotification:other.userDiceNotification];
  }
  if (other.hasBetDiceRequest) {
    [self mergeBetDiceRequest:other.betDiceRequest];
  }
  if (other.hasBetDiceResponse) {
    [self mergeBetDiceResponse:other.betDiceResponse];
  }
  if (other.hasUseItemRequest) {
    [self mergeUseItemRequest:other.useItemRequest];
  }
  if (other.hasUseItemResponse) {
    [self mergeUseItemResponse:other.useItemResponse];
  }
  if (other.hasBetRequest) {
    [self mergeBetRequest:other.betRequest];
  }
  if (other.hasBetResponse) {
    [self mergeBetResponse:other.betResponse];
  }
  if (other.hasCheckCardRequest) {
    [self mergeCheckCardRequest:other.checkCardRequest];
  }
  if (other.hasCheckCardResponse) {
    [self mergeCheckCardResponse:other.checkCardResponse];
  }
  if (other.hasFoldCardRequest) {
    [self mergeFoldCardRequest:other.foldCardRequest];
  }
  if (other.hasFoldCardResponse) {
    [self mergeFoldCardResponse:other.foldCardResponse];
  }
  if (other.hasShowCardRequest) {
    [self mergeShowCardRequest:other.showCardRequest];
  }
  if (other.hasShowCardResponse) {
    [self mergeShowCardResponse:other.showCardResponse];
  }
  if (other.hasCompareCardRequest) {
    [self mergeCompareCardRequest:other.compareCardRequest];
  }
  if (other.hasCompareCardResponse) {
    [self mergeCompareCardResponse:other.compareCardResponse];
  }
  if (other.hasChangeCardRequest) {
    [self mergeChangeCardRequest:other.changeCardRequest];
  }
  if (other.hasChangeCardResponse) {
    [self mergeChangeCardResponse:other.changeCardResponse];
  }
  if (other.hasTimeoutSettingRequest) {
    [self mergeTimeoutSettingRequest:other.timeoutSettingRequest];
  }
  if (other.hasTimeoutSettingResponse) {
    [self mergeTimeoutSettingResponse:other.timeoutSettingResponse];
  }
  if (other.hasStartOffset) {
    [self setStartOffset:other.startOffset];
  }
  if (other.hasMaxCount) {
    [self setMaxCount:other.maxCount];
  }
  if (other.hasTimeStamp) {
    [self setTimeStamp:other.timeStamp];
  }
  if (other.hasMac) {
    [self setMac:other.mac];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (GameCommandTypeIsValidValue(value)) {
          [self setCommand:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setMessageId:[input readInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (GameResultCodeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setUserId:[input readString]];
        break;
      }
      case 40: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 48: {
        [self setRound:[input readInt32]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (GameCompleteReasonIsValidValue(value)) {
          [self setCompleteReason:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setOnlineUserCount:[input readInt32]];
        break;
      }
      case 74: {
        [self setToUserId:[input readString]];
        break;
      }
      case 82: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 90: {
        JoinGameRequest_Builder* subBuilder = [JoinGameRequest builder];
        if (self.hasJoinGameRequest) {
          [subBuilder mergeFrom:self.joinGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        JoinGameResponse_Builder* subBuilder = [JoinGameResponse builder];
        if (self.hasJoinGameResponse) {
          [subBuilder mergeFrom:self.joinGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        StartGameRequest_Builder* subBuilder = [StartGameRequest builder];
        if (self.hasStartGameRequest) {
          [subBuilder mergeFrom:self.startGameRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameRequest:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        StartGameResponse_Builder* subBuilder = [StartGameResponse builder];
        if (self.hasStartGameResponse) {
          [subBuilder mergeFrom:self.startGameResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStartGameResponse:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        GameStartNotificationRequest_Builder* subBuilder = [GameStartNotificationRequest builder];
        if (self.hasGameStartNotificationRequest) {
          [subBuilder mergeFrom:self.gameStartNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameStartNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        GameStartNotificationResponse_Builder* subBuilder = [GameStartNotificationResponse builder];
        if (self.hasGameStartNotificationResponse) {
          [subBuilder mergeFrom:self.gameStartNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameStartNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        SendDrawDataRequest_Builder* subBuilder = [SendDrawDataRequest builder];
        if (self.hasSendDrawDataRequest) {
          [subBuilder mergeFrom:self.sendDrawDataRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendDrawDataRequest:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        SendDrawDataResponse_Builder* subBuilder = [SendDrawDataResponse builder];
        if (self.hasSendDrawDataResponse) {
          [subBuilder mergeFrom:self.sendDrawDataResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendDrawDataResponse:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        GameChatRequest_Builder* subBuilder = [GameChatRequest builder];
        if (self.hasChatRequest) {
          [subBuilder mergeFrom:self.chatRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatRequest:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        GameChatResponse_Builder* subBuilder = [GameChatResponse builder];
        if (self.hasChatResponse) {
          [subBuilder mergeFrom:self.chatResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatResponse:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        FacetimeChatRequest_Builder* subBuilder = [FacetimeChatRequest builder];
        if (self.hasFacetimeChatRequest) {
          [subBuilder mergeFrom:self.facetimeChatRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFacetimeChatRequest:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        FacetimeChatResponse_Builder* subBuilder = [FacetimeChatResponse builder];
        if (self.hasFacetimeChatResponse) {
          [subBuilder mergeFrom:self.facetimeChatResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFacetimeChatResponse:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        GeneralNotification_Builder* subBuilder = [GeneralNotification builder];
        if (self.hasNotification) {
          [subBuilder mergeFrom:self.notification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotification:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        GetRoomsRequest_Builder* subBuilder = [GetRoomsRequest builder];
        if (self.hasGetRoomsRequest) {
          [subBuilder mergeFrom:self.getRoomsRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGetRoomsRequest:[subBuilder buildPartial]];
        break;
      }
      case 818: {
        GetRoomsResponse_Builder* subBuilder = [GetRoomsResponse builder];
        if (self.hasGetRoomsResponse) {
          [subBuilder mergeFrom:self.getRoomsResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGetRoomsResponse:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        CreateRoomRequest_Builder* subBuilder = [CreateRoomRequest builder];
        if (self.hasCreateRoomRequest) {
          [subBuilder mergeFrom:self.createRoomRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateRoomRequest:[subBuilder buildPartial]];
        break;
      }
      case 834: {
        CreateRoomResponse_Builder* subBuilder = [CreateRoomResponse builder];
        if (self.hasCreateRoomResponse) {
          [subBuilder mergeFrom:self.createRoomResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateRoomResponse:[subBuilder buildPartial]];
        break;
      }
      case 842: {
        SearchRoomRequest_Builder* subBuilder = [SearchRoomRequest builder];
        if (self.hasSearchRoomRequest) {
          [subBuilder mergeFrom:self.searchRoomRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSearchRoomRequest:[subBuilder buildPartial]];
        break;
      }
      case 850: {
        SearchRoomResponse_Builder* subBuilder = [SearchRoomResponse builder];
        if (self.hasSearchRoomResponse) {
          [subBuilder mergeFrom:self.searchRoomResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSearchRoomResponse:[subBuilder buildPartial]];
        break;
      }
      case 858: {
        RoomNotificationRequest_Builder* subBuilder = [RoomNotificationRequest builder];
        if (self.hasRoomNotificationRequest) {
          [subBuilder mergeFrom:self.roomNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 874: {
        RollDiceEndNotificationRequest_Builder* subBuilder = [RollDiceEndNotificationRequest builder];
        if (self.hasRollDiceEndNotificationRequest) {
          [subBuilder mergeFrom:self.rollDiceEndNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRollDiceEndNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 890: {
        CallDiceRequest_Builder* subBuilder = [CallDiceRequest builder];
        if (self.hasCallDiceRequest) {
          [subBuilder mergeFrom:self.callDiceRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCallDiceRequest:[subBuilder buildPartial]];
        break;
      }
      case 898: {
        CallDiceResponse_Builder* subBuilder = [CallDiceResponse builder];
        if (self.hasCallDiceResponse) {
          [subBuilder mergeFrom:self.callDiceResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCallDiceResponse:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        OpenDiceRequest_Builder* subBuilder = [OpenDiceRequest builder];
        if (self.hasOpenDiceRequest) {
          [subBuilder mergeFrom:self.openDiceRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpenDiceRequest:[subBuilder buildPartial]];
        break;
      }
      case 914: {
        OpenDiceResponse_Builder* subBuilder = [OpenDiceResponse builder];
        if (self.hasOpenDiceResponse) {
          [subBuilder mergeFrom:self.openDiceResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpenDiceResponse:[subBuilder buildPartial]];
        break;
      }
      case 922: {
        GameOverNotificationRequest_Builder* subBuilder = [GameOverNotificationRequest builder];
        if (self.hasGameOverNotificationRequest) {
          [subBuilder mergeFrom:self.gameOverNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameOverNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 930: {
        GameOverNotificationResponse_Builder* subBuilder = [GameOverNotificationResponse builder];
        if (self.hasGameOverNotificationResponse) {
          [subBuilder mergeFrom:self.gameOverNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameOverNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 938: {
        RegisterRoomsNotificationRequest_Builder* subBuilder = [RegisterRoomsNotificationRequest builder];
        if (self.hasRegisterRoomsNotificationRequest) {
          [subBuilder mergeFrom:self.registerRoomsNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRegisterRoomsNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 946: {
        RegisterRoomsNotificationResponse_Builder* subBuilder = [RegisterRoomsNotificationResponse builder];
        if (self.hasRegisterRoomsNotificationResponse) {
          [subBuilder mergeFrom:self.registerRoomsNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRegisterRoomsNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 954: {
        UnRegisterRoomsNotificationRequest_Builder* subBuilder = [UnRegisterRoomsNotificationRequest builder];
        if (self.hasUnRegisterRoomsNotificationRequest) {
          [subBuilder mergeFrom:self.unRegisterRoomsNotificationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnRegisterRoomsNotificationRequest:[subBuilder buildPartial]];
        break;
      }
      case 962: {
        UnRegisterRoomsNotificationResponse_Builder* subBuilder = [UnRegisterRoomsNotificationResponse builder];
        if (self.hasUnRegisterRoomsNotificationResponse) {
          [subBuilder mergeFrom:self.unRegisterRoomsNotificationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnRegisterRoomsNotificationResponse:[subBuilder buildPartial]];
        break;
      }
      case 970: {
        UserDiceNotification_Builder* subBuilder = [UserDiceNotification builder];
        if (self.hasUserDiceNotification) {
          [subBuilder mergeFrom:self.userDiceNotification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserDiceNotification:[subBuilder buildPartial]];
        break;
      }
      case 986: {
        BetDiceRequest_Builder* subBuilder = [BetDiceRequest builder];
        if (self.hasBetDiceRequest) {
          [subBuilder mergeFrom:self.betDiceRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetDiceRequest:[subBuilder buildPartial]];
        break;
      }
      case 994: {
        BetDiceResponse_Builder* subBuilder = [BetDiceResponse builder];
        if (self.hasBetDiceResponse) {
          [subBuilder mergeFrom:self.betDiceResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetDiceResponse:[subBuilder buildPartial]];
        break;
      }
      case 1050: {
        UseItemRequest_Builder* subBuilder = [UseItemRequest builder];
        if (self.hasUseItemRequest) {
          [subBuilder mergeFrom:self.useItemRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUseItemRequest:[subBuilder buildPartial]];
        break;
      }
      case 1058: {
        UseItemResponse_Builder* subBuilder = [UseItemResponse builder];
        if (self.hasUseItemResponse) {
          [subBuilder mergeFrom:self.useItemResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUseItemResponse:[subBuilder buildPartial]];
        break;
      }
      case 1210: {
        BetRequest_Builder* subBuilder = [BetRequest builder];
        if (self.hasBetRequest) {
          [subBuilder mergeFrom:self.betRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetRequest:[subBuilder buildPartial]];
        break;
      }
      case 1218: {
        BetResponse_Builder* subBuilder = [BetResponse builder];
        if (self.hasBetResponse) {
          [subBuilder mergeFrom:self.betResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBetResponse:[subBuilder buildPartial]];
        break;
      }
      case 1226: {
        CheckCardRequest_Builder* subBuilder = [CheckCardRequest builder];
        if (self.hasCheckCardRequest) {
          [subBuilder mergeFrom:self.checkCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCheckCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1234: {
        CheckCardResponse_Builder* subBuilder = [CheckCardResponse builder];
        if (self.hasCheckCardResponse) {
          [subBuilder mergeFrom:self.checkCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCheckCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1242: {
        FoldCardRequest_Builder* subBuilder = [FoldCardRequest builder];
        if (self.hasFoldCardRequest) {
          [subBuilder mergeFrom:self.foldCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFoldCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1250: {
        FoldCardResponse_Builder* subBuilder = [FoldCardResponse builder];
        if (self.hasFoldCardResponse) {
          [subBuilder mergeFrom:self.foldCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFoldCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1258: {
        ShowCardRequest_Builder* subBuilder = [ShowCardRequest builder];
        if (self.hasShowCardRequest) {
          [subBuilder mergeFrom:self.showCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setShowCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1266: {
        ShowCardResponse_Builder* subBuilder = [ShowCardResponse builder];
        if (self.hasShowCardResponse) {
          [subBuilder mergeFrom:self.showCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setShowCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1274: {
        CompareCardRequest_Builder* subBuilder = [CompareCardRequest builder];
        if (self.hasCompareCardRequest) {
          [subBuilder mergeFrom:self.compareCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompareCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1282: {
        CompareCardResponse_Builder* subBuilder = [CompareCardResponse builder];
        if (self.hasCompareCardResponse) {
          [subBuilder mergeFrom:self.compareCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompareCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1290: {
        ChangeCardRequest_Builder* subBuilder = [ChangeCardRequest builder];
        if (self.hasChangeCardRequest) {
          [subBuilder mergeFrom:self.changeCardRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChangeCardRequest:[subBuilder buildPartial]];
        break;
      }
      case 1298: {
        ChangeCardResponse_Builder* subBuilder = [ChangeCardResponse builder];
        if (self.hasChangeCardResponse) {
          [subBuilder mergeFrom:self.changeCardResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChangeCardResponse:[subBuilder buildPartial]];
        break;
      }
      case 1306: {
        TimeoutSettingRequest_Builder* subBuilder = [TimeoutSettingRequest builder];
        if (self.hasTimeoutSettingRequest) {
          [subBuilder mergeFrom:self.timeoutSettingRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimeoutSettingRequest:[subBuilder buildPartial]];
        break;
      }
      case 1314: {
        TimeoutSettingResponse_Builder* subBuilder = [TimeoutSettingResponse builder];
        if (self.hasTimeoutSettingResponse) {
          [subBuilder mergeFrom:self.timeoutSettingResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimeoutSettingResponse:[subBuilder buildPartial]];
        break;
      }
      case 8000: {
        [self setStartOffset:[input readInt32]];
        break;
      }
      case 8008: {
        [self setMaxCount:[input readInt32]];
        break;
      }
      case 8080: {
        [self setTimeStamp:[input readInt32]];
        break;
      }
      case 8090: {
        [self setMac:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCommand {
  return result.hasCommand;
}
- (GameCommandType) command {
  return result.command;
}
- (GameMessage_Builder*) setCommand:(GameCommandType) value {
  result.hasCommand = YES;
  result.command = value;
  return self;
}
- (GameMessage_Builder*) clearCommand {
  result.hasCommand = NO;
  result.command = GameCommandTypeJoinGameRequest;
  return self;
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (int32_t) messageId {
  return result.messageId;
}
- (GameMessage_Builder*) setMessageId:(int32_t) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (GameMessage_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (GameResultCode) resultCode {
  return result.resultCode;
}
- (GameMessage_Builder*) setResultCode:(GameResultCode) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (GameMessage_Builder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = GameResultCodeSuccess;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (GameMessage_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (GameMessage_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (GameMessage_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (GameMessage_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasRound {
  return result.hasRound;
}
- (int32_t) round {
  return result.round;
}
- (GameMessage_Builder*) setRound:(int32_t) value {
  result.hasRound = YES;
  result.round = value;
  return self;
}
- (GameMessage_Builder*) clearRound {
  result.hasRound = NO;
  result.round = 0;
  return self;
}
- (BOOL) hasCompleteReason {
  return result.hasCompleteReason;
}
- (GameCompleteReason) completeReason {
  return result.completeReason;
}
- (GameMessage_Builder*) setCompleteReason:(GameCompleteReason) value {
  result.hasCompleteReason = YES;
  result.completeReason = value;
  return self;
}
- (GameMessage_Builder*) clearCompleteReason {
  result.hasCompleteReason = NO;
  result.completeReason = GameCompleteReasonReasonNotComplete;
  return self;
}
- (BOOL) hasOnlineUserCount {
  return result.hasOnlineUserCount;
}
- (int32_t) onlineUserCount {
  return result.onlineUserCount;
}
- (GameMessage_Builder*) setOnlineUserCount:(int32_t) value {
  result.hasOnlineUserCount = YES;
  result.onlineUserCount = value;
  return self;
}
- (GameMessage_Builder*) clearOnlineUserCount {
  result.hasOnlineUserCount = NO;
  result.onlineUserCount = 0;
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (GameMessage_Builder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (GameMessage_Builder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (GameMessage_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (GameMessage_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasJoinGameRequest {
  return result.hasJoinGameRequest;
}
- (JoinGameRequest*) joinGameRequest {
  return result.joinGameRequest;
}
- (GameMessage_Builder*) setJoinGameRequest:(JoinGameRequest*) value {
  result.hasJoinGameRequest = YES;
  result.joinGameRequest = value;
  return self;
}
- (GameMessage_Builder*) setJoinGameRequestBuilder:(JoinGameRequest_Builder*) builderForValue {
  return [self setJoinGameRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeJoinGameRequest:(JoinGameRequest*) value {
  if (result.hasJoinGameRequest &&
      result.joinGameRequest != [JoinGameRequest defaultInstance]) {
    result.joinGameRequest =
      [[[JoinGameRequest builderWithPrototype:result.joinGameRequest] mergeFrom:value] buildPartial];
  } else {
    result.joinGameRequest = value;
  }
  result.hasJoinGameRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearJoinGameRequest {
  result.hasJoinGameRequest = NO;
  result.joinGameRequest = [JoinGameRequest defaultInstance];
  return self;
}
- (BOOL) hasJoinGameResponse {
  return result.hasJoinGameResponse;
}
- (JoinGameResponse*) joinGameResponse {
  return result.joinGameResponse;
}
- (GameMessage_Builder*) setJoinGameResponse:(JoinGameResponse*) value {
  result.hasJoinGameResponse = YES;
  result.joinGameResponse = value;
  return self;
}
- (GameMessage_Builder*) setJoinGameResponseBuilder:(JoinGameResponse_Builder*) builderForValue {
  return [self setJoinGameResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeJoinGameResponse:(JoinGameResponse*) value {
  if (result.hasJoinGameResponse &&
      result.joinGameResponse != [JoinGameResponse defaultInstance]) {
    result.joinGameResponse =
      [[[JoinGameResponse builderWithPrototype:result.joinGameResponse] mergeFrom:value] buildPartial];
  } else {
    result.joinGameResponse = value;
  }
  result.hasJoinGameResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearJoinGameResponse {
  result.hasJoinGameResponse = NO;
  result.joinGameResponse = [JoinGameResponse defaultInstance];
  return self;
}
- (BOOL) hasStartGameRequest {
  return result.hasStartGameRequest;
}
- (StartGameRequest*) startGameRequest {
  return result.startGameRequest;
}
- (GameMessage_Builder*) setStartGameRequest:(StartGameRequest*) value {
  result.hasStartGameRequest = YES;
  result.startGameRequest = value;
  return self;
}
- (GameMessage_Builder*) setStartGameRequestBuilder:(StartGameRequest_Builder*) builderForValue {
  return [self setStartGameRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeStartGameRequest:(StartGameRequest*) value {
  if (result.hasStartGameRequest &&
      result.startGameRequest != [StartGameRequest defaultInstance]) {
    result.startGameRequest =
      [[[StartGameRequest builderWithPrototype:result.startGameRequest] mergeFrom:value] buildPartial];
  } else {
    result.startGameRequest = value;
  }
  result.hasStartGameRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearStartGameRequest {
  result.hasStartGameRequest = NO;
  result.startGameRequest = [StartGameRequest defaultInstance];
  return self;
}
- (BOOL) hasStartGameResponse {
  return result.hasStartGameResponse;
}
- (StartGameResponse*) startGameResponse {
  return result.startGameResponse;
}
- (GameMessage_Builder*) setStartGameResponse:(StartGameResponse*) value {
  result.hasStartGameResponse = YES;
  result.startGameResponse = value;
  return self;
}
- (GameMessage_Builder*) setStartGameResponseBuilder:(StartGameResponse_Builder*) builderForValue {
  return [self setStartGameResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeStartGameResponse:(StartGameResponse*) value {
  if (result.hasStartGameResponse &&
      result.startGameResponse != [StartGameResponse defaultInstance]) {
    result.startGameResponse =
      [[[StartGameResponse builderWithPrototype:result.startGameResponse] mergeFrom:value] buildPartial];
  } else {
    result.startGameResponse = value;
  }
  result.hasStartGameResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearStartGameResponse {
  result.hasStartGameResponse = NO;
  result.startGameResponse = [StartGameResponse defaultInstance];
  return self;
}
- (BOOL) hasGameStartNotificationRequest {
  return result.hasGameStartNotificationRequest;
}
- (GameStartNotificationRequest*) gameStartNotificationRequest {
  return result.gameStartNotificationRequest;
}
- (GameMessage_Builder*) setGameStartNotificationRequest:(GameStartNotificationRequest*) value {
  result.hasGameStartNotificationRequest = YES;
  result.gameStartNotificationRequest = value;
  return self;
}
- (GameMessage_Builder*) setGameStartNotificationRequestBuilder:(GameStartNotificationRequest_Builder*) builderForValue {
  return [self setGameStartNotificationRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeGameStartNotificationRequest:(GameStartNotificationRequest*) value {
  if (result.hasGameStartNotificationRequest &&
      result.gameStartNotificationRequest != [GameStartNotificationRequest defaultInstance]) {
    result.gameStartNotificationRequest =
      [[[GameStartNotificationRequest builderWithPrototype:result.gameStartNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    result.gameStartNotificationRequest = value;
  }
  result.hasGameStartNotificationRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearGameStartNotificationRequest {
  result.hasGameStartNotificationRequest = NO;
  result.gameStartNotificationRequest = [GameStartNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasGameStartNotificationResponse {
  return result.hasGameStartNotificationResponse;
}
- (GameStartNotificationResponse*) gameStartNotificationResponse {
  return result.gameStartNotificationResponse;
}
- (GameMessage_Builder*) setGameStartNotificationResponse:(GameStartNotificationResponse*) value {
  result.hasGameStartNotificationResponse = YES;
  result.gameStartNotificationResponse = value;
  return self;
}
- (GameMessage_Builder*) setGameStartNotificationResponseBuilder:(GameStartNotificationResponse_Builder*) builderForValue {
  return [self setGameStartNotificationResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeGameStartNotificationResponse:(GameStartNotificationResponse*) value {
  if (result.hasGameStartNotificationResponse &&
      result.gameStartNotificationResponse != [GameStartNotificationResponse defaultInstance]) {
    result.gameStartNotificationResponse =
      [[[GameStartNotificationResponse builderWithPrototype:result.gameStartNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    result.gameStartNotificationResponse = value;
  }
  result.hasGameStartNotificationResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearGameStartNotificationResponse {
  result.hasGameStartNotificationResponse = NO;
  result.gameStartNotificationResponse = [GameStartNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasSendDrawDataRequest {
  return result.hasSendDrawDataRequest;
}
- (SendDrawDataRequest*) sendDrawDataRequest {
  return result.sendDrawDataRequest;
}
- (GameMessage_Builder*) setSendDrawDataRequest:(SendDrawDataRequest*) value {
  result.hasSendDrawDataRequest = YES;
  result.sendDrawDataRequest = value;
  return self;
}
- (GameMessage_Builder*) setSendDrawDataRequestBuilder:(SendDrawDataRequest_Builder*) builderForValue {
  return [self setSendDrawDataRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeSendDrawDataRequest:(SendDrawDataRequest*) value {
  if (result.hasSendDrawDataRequest &&
      result.sendDrawDataRequest != [SendDrawDataRequest defaultInstance]) {
    result.sendDrawDataRequest =
      [[[SendDrawDataRequest builderWithPrototype:result.sendDrawDataRequest] mergeFrom:value] buildPartial];
  } else {
    result.sendDrawDataRequest = value;
  }
  result.hasSendDrawDataRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearSendDrawDataRequest {
  result.hasSendDrawDataRequest = NO;
  result.sendDrawDataRequest = [SendDrawDataRequest defaultInstance];
  return self;
}
- (BOOL) hasSendDrawDataResponse {
  return result.hasSendDrawDataResponse;
}
- (SendDrawDataResponse*) sendDrawDataResponse {
  return result.sendDrawDataResponse;
}
- (GameMessage_Builder*) setSendDrawDataResponse:(SendDrawDataResponse*) value {
  result.hasSendDrawDataResponse = YES;
  result.sendDrawDataResponse = value;
  return self;
}
- (GameMessage_Builder*) setSendDrawDataResponseBuilder:(SendDrawDataResponse_Builder*) builderForValue {
  return [self setSendDrawDataResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeSendDrawDataResponse:(SendDrawDataResponse*) value {
  if (result.hasSendDrawDataResponse &&
      result.sendDrawDataResponse != [SendDrawDataResponse defaultInstance]) {
    result.sendDrawDataResponse =
      [[[SendDrawDataResponse builderWithPrototype:result.sendDrawDataResponse] mergeFrom:value] buildPartial];
  } else {
    result.sendDrawDataResponse = value;
  }
  result.hasSendDrawDataResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearSendDrawDataResponse {
  result.hasSendDrawDataResponse = NO;
  result.sendDrawDataResponse = [SendDrawDataResponse defaultInstance];
  return self;
}
- (BOOL) hasChatRequest {
  return result.hasChatRequest;
}
- (GameChatRequest*) chatRequest {
  return result.chatRequest;
}
- (GameMessage_Builder*) setChatRequest:(GameChatRequest*) value {
  result.hasChatRequest = YES;
  result.chatRequest = value;
  return self;
}
- (GameMessage_Builder*) setChatRequestBuilder:(GameChatRequest_Builder*) builderForValue {
  return [self setChatRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeChatRequest:(GameChatRequest*) value {
  if (result.hasChatRequest &&
      result.chatRequest != [GameChatRequest defaultInstance]) {
    result.chatRequest =
      [[[GameChatRequest builderWithPrototype:result.chatRequest] mergeFrom:value] buildPartial];
  } else {
    result.chatRequest = value;
  }
  result.hasChatRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearChatRequest {
  result.hasChatRequest = NO;
  result.chatRequest = [GameChatRequest defaultInstance];
  return self;
}
- (BOOL) hasChatResponse {
  return result.hasChatResponse;
}
- (GameChatResponse*) chatResponse {
  return result.chatResponse;
}
- (GameMessage_Builder*) setChatResponse:(GameChatResponse*) value {
  result.hasChatResponse = YES;
  result.chatResponse = value;
  return self;
}
- (GameMessage_Builder*) setChatResponseBuilder:(GameChatResponse_Builder*) builderForValue {
  return [self setChatResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeChatResponse:(GameChatResponse*) value {
  if (result.hasChatResponse &&
      result.chatResponse != [GameChatResponse defaultInstance]) {
    result.chatResponse =
      [[[GameChatResponse builderWithPrototype:result.chatResponse] mergeFrom:value] buildPartial];
  } else {
    result.chatResponse = value;
  }
  result.hasChatResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearChatResponse {
  result.hasChatResponse = NO;
  result.chatResponse = [GameChatResponse defaultInstance];
  return self;
}
- (BOOL) hasFacetimeChatRequest {
  return result.hasFacetimeChatRequest;
}
- (FacetimeChatRequest*) facetimeChatRequest {
  return result.facetimeChatRequest;
}
- (GameMessage_Builder*) setFacetimeChatRequest:(FacetimeChatRequest*) value {
  result.hasFacetimeChatRequest = YES;
  result.facetimeChatRequest = value;
  return self;
}
- (GameMessage_Builder*) setFacetimeChatRequestBuilder:(FacetimeChatRequest_Builder*) builderForValue {
  return [self setFacetimeChatRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeFacetimeChatRequest:(FacetimeChatRequest*) value {
  if (result.hasFacetimeChatRequest &&
      result.facetimeChatRequest != [FacetimeChatRequest defaultInstance]) {
    result.facetimeChatRequest =
      [[[FacetimeChatRequest builderWithPrototype:result.facetimeChatRequest] mergeFrom:value] buildPartial];
  } else {
    result.facetimeChatRequest = value;
  }
  result.hasFacetimeChatRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearFacetimeChatRequest {
  result.hasFacetimeChatRequest = NO;
  result.facetimeChatRequest = [FacetimeChatRequest defaultInstance];
  return self;
}
- (BOOL) hasFacetimeChatResponse {
  return result.hasFacetimeChatResponse;
}
- (FacetimeChatResponse*) facetimeChatResponse {
  return result.facetimeChatResponse;
}
- (GameMessage_Builder*) setFacetimeChatResponse:(FacetimeChatResponse*) value {
  result.hasFacetimeChatResponse = YES;
  result.facetimeChatResponse = value;
  return self;
}
- (GameMessage_Builder*) setFacetimeChatResponseBuilder:(FacetimeChatResponse_Builder*) builderForValue {
  return [self setFacetimeChatResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeFacetimeChatResponse:(FacetimeChatResponse*) value {
  if (result.hasFacetimeChatResponse &&
      result.facetimeChatResponse != [FacetimeChatResponse defaultInstance]) {
    result.facetimeChatResponse =
      [[[FacetimeChatResponse builderWithPrototype:result.facetimeChatResponse] mergeFrom:value] buildPartial];
  } else {
    result.facetimeChatResponse = value;
  }
  result.hasFacetimeChatResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearFacetimeChatResponse {
  result.hasFacetimeChatResponse = NO;
  result.facetimeChatResponse = [FacetimeChatResponse defaultInstance];
  return self;
}
- (BOOL) hasNotification {
  return result.hasNotification;
}
- (GeneralNotification*) notification {
  return result.notification;
}
- (GameMessage_Builder*) setNotification:(GeneralNotification*) value {
  result.hasNotification = YES;
  result.notification = value;
  return self;
}
- (GameMessage_Builder*) setNotificationBuilder:(GeneralNotification_Builder*) builderForValue {
  return [self setNotification:[builderForValue build]];
}
- (GameMessage_Builder*) mergeNotification:(GeneralNotification*) value {
  if (result.hasNotification &&
      result.notification != [GeneralNotification defaultInstance]) {
    result.notification =
      [[[GeneralNotification builderWithPrototype:result.notification] mergeFrom:value] buildPartial];
  } else {
    result.notification = value;
  }
  result.hasNotification = YES;
  return self;
}
- (GameMessage_Builder*) clearNotification {
  result.hasNotification = NO;
  result.notification = [GeneralNotification defaultInstance];
  return self;
}
- (BOOL) hasGetRoomsRequest {
  return result.hasGetRoomsRequest;
}
- (GetRoomsRequest*) getRoomsRequest {
  return result.getRoomsRequest;
}
- (GameMessage_Builder*) setGetRoomsRequest:(GetRoomsRequest*) value {
  result.hasGetRoomsRequest = YES;
  result.getRoomsRequest = value;
  return self;
}
- (GameMessage_Builder*) setGetRoomsRequestBuilder:(GetRoomsRequest_Builder*) builderForValue {
  return [self setGetRoomsRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeGetRoomsRequest:(GetRoomsRequest*) value {
  if (result.hasGetRoomsRequest &&
      result.getRoomsRequest != [GetRoomsRequest defaultInstance]) {
    result.getRoomsRequest =
      [[[GetRoomsRequest builderWithPrototype:result.getRoomsRequest] mergeFrom:value] buildPartial];
  } else {
    result.getRoomsRequest = value;
  }
  result.hasGetRoomsRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearGetRoomsRequest {
  result.hasGetRoomsRequest = NO;
  result.getRoomsRequest = [GetRoomsRequest defaultInstance];
  return self;
}
- (BOOL) hasGetRoomsResponse {
  return result.hasGetRoomsResponse;
}
- (GetRoomsResponse*) getRoomsResponse {
  return result.getRoomsResponse;
}
- (GameMessage_Builder*) setGetRoomsResponse:(GetRoomsResponse*) value {
  result.hasGetRoomsResponse = YES;
  result.getRoomsResponse = value;
  return self;
}
- (GameMessage_Builder*) setGetRoomsResponseBuilder:(GetRoomsResponse_Builder*) builderForValue {
  return [self setGetRoomsResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeGetRoomsResponse:(GetRoomsResponse*) value {
  if (result.hasGetRoomsResponse &&
      result.getRoomsResponse != [GetRoomsResponse defaultInstance]) {
    result.getRoomsResponse =
      [[[GetRoomsResponse builderWithPrototype:result.getRoomsResponse] mergeFrom:value] buildPartial];
  } else {
    result.getRoomsResponse = value;
  }
  result.hasGetRoomsResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearGetRoomsResponse {
  result.hasGetRoomsResponse = NO;
  result.getRoomsResponse = [GetRoomsResponse defaultInstance];
  return self;
}
- (BOOL) hasCreateRoomRequest {
  return result.hasCreateRoomRequest;
}
- (CreateRoomRequest*) createRoomRequest {
  return result.createRoomRequest;
}
- (GameMessage_Builder*) setCreateRoomRequest:(CreateRoomRequest*) value {
  result.hasCreateRoomRequest = YES;
  result.createRoomRequest = value;
  return self;
}
- (GameMessage_Builder*) setCreateRoomRequestBuilder:(CreateRoomRequest_Builder*) builderForValue {
  return [self setCreateRoomRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCreateRoomRequest:(CreateRoomRequest*) value {
  if (result.hasCreateRoomRequest &&
      result.createRoomRequest != [CreateRoomRequest defaultInstance]) {
    result.createRoomRequest =
      [[[CreateRoomRequest builderWithPrototype:result.createRoomRequest] mergeFrom:value] buildPartial];
  } else {
    result.createRoomRequest = value;
  }
  result.hasCreateRoomRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearCreateRoomRequest {
  result.hasCreateRoomRequest = NO;
  result.createRoomRequest = [CreateRoomRequest defaultInstance];
  return self;
}
- (BOOL) hasCreateRoomResponse {
  return result.hasCreateRoomResponse;
}
- (CreateRoomResponse*) createRoomResponse {
  return result.createRoomResponse;
}
- (GameMessage_Builder*) setCreateRoomResponse:(CreateRoomResponse*) value {
  result.hasCreateRoomResponse = YES;
  result.createRoomResponse = value;
  return self;
}
- (GameMessage_Builder*) setCreateRoomResponseBuilder:(CreateRoomResponse_Builder*) builderForValue {
  return [self setCreateRoomResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCreateRoomResponse:(CreateRoomResponse*) value {
  if (result.hasCreateRoomResponse &&
      result.createRoomResponse != [CreateRoomResponse defaultInstance]) {
    result.createRoomResponse =
      [[[CreateRoomResponse builderWithPrototype:result.createRoomResponse] mergeFrom:value] buildPartial];
  } else {
    result.createRoomResponse = value;
  }
  result.hasCreateRoomResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearCreateRoomResponse {
  result.hasCreateRoomResponse = NO;
  result.createRoomResponse = [CreateRoomResponse defaultInstance];
  return self;
}
- (BOOL) hasSearchRoomRequest {
  return result.hasSearchRoomRequest;
}
- (SearchRoomRequest*) searchRoomRequest {
  return result.searchRoomRequest;
}
- (GameMessage_Builder*) setSearchRoomRequest:(SearchRoomRequest*) value {
  result.hasSearchRoomRequest = YES;
  result.searchRoomRequest = value;
  return self;
}
- (GameMessage_Builder*) setSearchRoomRequestBuilder:(SearchRoomRequest_Builder*) builderForValue {
  return [self setSearchRoomRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeSearchRoomRequest:(SearchRoomRequest*) value {
  if (result.hasSearchRoomRequest &&
      result.searchRoomRequest != [SearchRoomRequest defaultInstance]) {
    result.searchRoomRequest =
      [[[SearchRoomRequest builderWithPrototype:result.searchRoomRequest] mergeFrom:value] buildPartial];
  } else {
    result.searchRoomRequest = value;
  }
  result.hasSearchRoomRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearSearchRoomRequest {
  result.hasSearchRoomRequest = NO;
  result.searchRoomRequest = [SearchRoomRequest defaultInstance];
  return self;
}
- (BOOL) hasSearchRoomResponse {
  return result.hasSearchRoomResponse;
}
- (SearchRoomResponse*) searchRoomResponse {
  return result.searchRoomResponse;
}
- (GameMessage_Builder*) setSearchRoomResponse:(SearchRoomResponse*) value {
  result.hasSearchRoomResponse = YES;
  result.searchRoomResponse = value;
  return self;
}
- (GameMessage_Builder*) setSearchRoomResponseBuilder:(SearchRoomResponse_Builder*) builderForValue {
  return [self setSearchRoomResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeSearchRoomResponse:(SearchRoomResponse*) value {
  if (result.hasSearchRoomResponse &&
      result.searchRoomResponse != [SearchRoomResponse defaultInstance]) {
    result.searchRoomResponse =
      [[[SearchRoomResponse builderWithPrototype:result.searchRoomResponse] mergeFrom:value] buildPartial];
  } else {
    result.searchRoomResponse = value;
  }
  result.hasSearchRoomResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearSearchRoomResponse {
  result.hasSearchRoomResponse = NO;
  result.searchRoomResponse = [SearchRoomResponse defaultInstance];
  return self;
}
- (BOOL) hasRoomNotificationRequest {
  return result.hasRoomNotificationRequest;
}
- (RoomNotificationRequest*) roomNotificationRequest {
  return result.roomNotificationRequest;
}
- (GameMessage_Builder*) setRoomNotificationRequest:(RoomNotificationRequest*) value {
  result.hasRoomNotificationRequest = YES;
  result.roomNotificationRequest = value;
  return self;
}
- (GameMessage_Builder*) setRoomNotificationRequestBuilder:(RoomNotificationRequest_Builder*) builderForValue {
  return [self setRoomNotificationRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeRoomNotificationRequest:(RoomNotificationRequest*) value {
  if (result.hasRoomNotificationRequest &&
      result.roomNotificationRequest != [RoomNotificationRequest defaultInstance]) {
    result.roomNotificationRequest =
      [[[RoomNotificationRequest builderWithPrototype:result.roomNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    result.roomNotificationRequest = value;
  }
  result.hasRoomNotificationRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearRoomNotificationRequest {
  result.hasRoomNotificationRequest = NO;
  result.roomNotificationRequest = [RoomNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasRollDiceEndNotificationRequest {
  return result.hasRollDiceEndNotificationRequest;
}
- (RollDiceEndNotificationRequest*) rollDiceEndNotificationRequest {
  return result.rollDiceEndNotificationRequest;
}
- (GameMessage_Builder*) setRollDiceEndNotificationRequest:(RollDiceEndNotificationRequest*) value {
  result.hasRollDiceEndNotificationRequest = YES;
  result.rollDiceEndNotificationRequest = value;
  return self;
}
- (GameMessage_Builder*) setRollDiceEndNotificationRequestBuilder:(RollDiceEndNotificationRequest_Builder*) builderForValue {
  return [self setRollDiceEndNotificationRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeRollDiceEndNotificationRequest:(RollDiceEndNotificationRequest*) value {
  if (result.hasRollDiceEndNotificationRequest &&
      result.rollDiceEndNotificationRequest != [RollDiceEndNotificationRequest defaultInstance]) {
    result.rollDiceEndNotificationRequest =
      [[[RollDiceEndNotificationRequest builderWithPrototype:result.rollDiceEndNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    result.rollDiceEndNotificationRequest = value;
  }
  result.hasRollDiceEndNotificationRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearRollDiceEndNotificationRequest {
  result.hasRollDiceEndNotificationRequest = NO;
  result.rollDiceEndNotificationRequest = [RollDiceEndNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasCallDiceRequest {
  return result.hasCallDiceRequest;
}
- (CallDiceRequest*) callDiceRequest {
  return result.callDiceRequest;
}
- (GameMessage_Builder*) setCallDiceRequest:(CallDiceRequest*) value {
  result.hasCallDiceRequest = YES;
  result.callDiceRequest = value;
  return self;
}
- (GameMessage_Builder*) setCallDiceRequestBuilder:(CallDiceRequest_Builder*) builderForValue {
  return [self setCallDiceRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCallDiceRequest:(CallDiceRequest*) value {
  if (result.hasCallDiceRequest &&
      result.callDiceRequest != [CallDiceRequest defaultInstance]) {
    result.callDiceRequest =
      [[[CallDiceRequest builderWithPrototype:result.callDiceRequest] mergeFrom:value] buildPartial];
  } else {
    result.callDiceRequest = value;
  }
  result.hasCallDiceRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearCallDiceRequest {
  result.hasCallDiceRequest = NO;
  result.callDiceRequest = [CallDiceRequest defaultInstance];
  return self;
}
- (BOOL) hasCallDiceResponse {
  return result.hasCallDiceResponse;
}
- (CallDiceResponse*) callDiceResponse {
  return result.callDiceResponse;
}
- (GameMessage_Builder*) setCallDiceResponse:(CallDiceResponse*) value {
  result.hasCallDiceResponse = YES;
  result.callDiceResponse = value;
  return self;
}
- (GameMessage_Builder*) setCallDiceResponseBuilder:(CallDiceResponse_Builder*) builderForValue {
  return [self setCallDiceResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCallDiceResponse:(CallDiceResponse*) value {
  if (result.hasCallDiceResponse &&
      result.callDiceResponse != [CallDiceResponse defaultInstance]) {
    result.callDiceResponse =
      [[[CallDiceResponse builderWithPrototype:result.callDiceResponse] mergeFrom:value] buildPartial];
  } else {
    result.callDiceResponse = value;
  }
  result.hasCallDiceResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearCallDiceResponse {
  result.hasCallDiceResponse = NO;
  result.callDiceResponse = [CallDiceResponse defaultInstance];
  return self;
}
- (BOOL) hasOpenDiceRequest {
  return result.hasOpenDiceRequest;
}
- (OpenDiceRequest*) openDiceRequest {
  return result.openDiceRequest;
}
- (GameMessage_Builder*) setOpenDiceRequest:(OpenDiceRequest*) value {
  result.hasOpenDiceRequest = YES;
  result.openDiceRequest = value;
  return self;
}
- (GameMessage_Builder*) setOpenDiceRequestBuilder:(OpenDiceRequest_Builder*) builderForValue {
  return [self setOpenDiceRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeOpenDiceRequest:(OpenDiceRequest*) value {
  if (result.hasOpenDiceRequest &&
      result.openDiceRequest != [OpenDiceRequest defaultInstance]) {
    result.openDiceRequest =
      [[[OpenDiceRequest builderWithPrototype:result.openDiceRequest] mergeFrom:value] buildPartial];
  } else {
    result.openDiceRequest = value;
  }
  result.hasOpenDiceRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearOpenDiceRequest {
  result.hasOpenDiceRequest = NO;
  result.openDiceRequest = [OpenDiceRequest defaultInstance];
  return self;
}
- (BOOL) hasOpenDiceResponse {
  return result.hasOpenDiceResponse;
}
- (OpenDiceResponse*) openDiceResponse {
  return result.openDiceResponse;
}
- (GameMessage_Builder*) setOpenDiceResponse:(OpenDiceResponse*) value {
  result.hasOpenDiceResponse = YES;
  result.openDiceResponse = value;
  return self;
}
- (GameMessage_Builder*) setOpenDiceResponseBuilder:(OpenDiceResponse_Builder*) builderForValue {
  return [self setOpenDiceResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeOpenDiceResponse:(OpenDiceResponse*) value {
  if (result.hasOpenDiceResponse &&
      result.openDiceResponse != [OpenDiceResponse defaultInstance]) {
    result.openDiceResponse =
      [[[OpenDiceResponse builderWithPrototype:result.openDiceResponse] mergeFrom:value] buildPartial];
  } else {
    result.openDiceResponse = value;
  }
  result.hasOpenDiceResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearOpenDiceResponse {
  result.hasOpenDiceResponse = NO;
  result.openDiceResponse = [OpenDiceResponse defaultInstance];
  return self;
}
- (BOOL) hasGameOverNotificationRequest {
  return result.hasGameOverNotificationRequest;
}
- (GameOverNotificationRequest*) gameOverNotificationRequest {
  return result.gameOverNotificationRequest;
}
- (GameMessage_Builder*) setGameOverNotificationRequest:(GameOverNotificationRequest*) value {
  result.hasGameOverNotificationRequest = YES;
  result.gameOverNotificationRequest = value;
  return self;
}
- (GameMessage_Builder*) setGameOverNotificationRequestBuilder:(GameOverNotificationRequest_Builder*) builderForValue {
  return [self setGameOverNotificationRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeGameOverNotificationRequest:(GameOverNotificationRequest*) value {
  if (result.hasGameOverNotificationRequest &&
      result.gameOverNotificationRequest != [GameOverNotificationRequest defaultInstance]) {
    result.gameOverNotificationRequest =
      [[[GameOverNotificationRequest builderWithPrototype:result.gameOverNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    result.gameOverNotificationRequest = value;
  }
  result.hasGameOverNotificationRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearGameOverNotificationRequest {
  result.hasGameOverNotificationRequest = NO;
  result.gameOverNotificationRequest = [GameOverNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasGameOverNotificationResponse {
  return result.hasGameOverNotificationResponse;
}
- (GameOverNotificationResponse*) gameOverNotificationResponse {
  return result.gameOverNotificationResponse;
}
- (GameMessage_Builder*) setGameOverNotificationResponse:(GameOverNotificationResponse*) value {
  result.hasGameOverNotificationResponse = YES;
  result.gameOverNotificationResponse = value;
  return self;
}
- (GameMessage_Builder*) setGameOverNotificationResponseBuilder:(GameOverNotificationResponse_Builder*) builderForValue {
  return [self setGameOverNotificationResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeGameOverNotificationResponse:(GameOverNotificationResponse*) value {
  if (result.hasGameOverNotificationResponse &&
      result.gameOverNotificationResponse != [GameOverNotificationResponse defaultInstance]) {
    result.gameOverNotificationResponse =
      [[[GameOverNotificationResponse builderWithPrototype:result.gameOverNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    result.gameOverNotificationResponse = value;
  }
  result.hasGameOverNotificationResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearGameOverNotificationResponse {
  result.hasGameOverNotificationResponse = NO;
  result.gameOverNotificationResponse = [GameOverNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasRegisterRoomsNotificationRequest {
  return result.hasRegisterRoomsNotificationRequest;
}
- (RegisterRoomsNotificationRequest*) registerRoomsNotificationRequest {
  return result.registerRoomsNotificationRequest;
}
- (GameMessage_Builder*) setRegisterRoomsNotificationRequest:(RegisterRoomsNotificationRequest*) value {
  result.hasRegisterRoomsNotificationRequest = YES;
  result.registerRoomsNotificationRequest = value;
  return self;
}
- (GameMessage_Builder*) setRegisterRoomsNotificationRequestBuilder:(RegisterRoomsNotificationRequest_Builder*) builderForValue {
  return [self setRegisterRoomsNotificationRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeRegisterRoomsNotificationRequest:(RegisterRoomsNotificationRequest*) value {
  if (result.hasRegisterRoomsNotificationRequest &&
      result.registerRoomsNotificationRequest != [RegisterRoomsNotificationRequest defaultInstance]) {
    result.registerRoomsNotificationRequest =
      [[[RegisterRoomsNotificationRequest builderWithPrototype:result.registerRoomsNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    result.registerRoomsNotificationRequest = value;
  }
  result.hasRegisterRoomsNotificationRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearRegisterRoomsNotificationRequest {
  result.hasRegisterRoomsNotificationRequest = NO;
  result.registerRoomsNotificationRequest = [RegisterRoomsNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasRegisterRoomsNotificationResponse {
  return result.hasRegisterRoomsNotificationResponse;
}
- (RegisterRoomsNotificationResponse*) registerRoomsNotificationResponse {
  return result.registerRoomsNotificationResponse;
}
- (GameMessage_Builder*) setRegisterRoomsNotificationResponse:(RegisterRoomsNotificationResponse*) value {
  result.hasRegisterRoomsNotificationResponse = YES;
  result.registerRoomsNotificationResponse = value;
  return self;
}
- (GameMessage_Builder*) setRegisterRoomsNotificationResponseBuilder:(RegisterRoomsNotificationResponse_Builder*) builderForValue {
  return [self setRegisterRoomsNotificationResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeRegisterRoomsNotificationResponse:(RegisterRoomsNotificationResponse*) value {
  if (result.hasRegisterRoomsNotificationResponse &&
      result.registerRoomsNotificationResponse != [RegisterRoomsNotificationResponse defaultInstance]) {
    result.registerRoomsNotificationResponse =
      [[[RegisterRoomsNotificationResponse builderWithPrototype:result.registerRoomsNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    result.registerRoomsNotificationResponse = value;
  }
  result.hasRegisterRoomsNotificationResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearRegisterRoomsNotificationResponse {
  result.hasRegisterRoomsNotificationResponse = NO;
  result.registerRoomsNotificationResponse = [RegisterRoomsNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasUnRegisterRoomsNotificationRequest {
  return result.hasUnRegisterRoomsNotificationRequest;
}
- (UnRegisterRoomsNotificationRequest*) unRegisterRoomsNotificationRequest {
  return result.unRegisterRoomsNotificationRequest;
}
- (GameMessage_Builder*) setUnRegisterRoomsNotificationRequest:(UnRegisterRoomsNotificationRequest*) value {
  result.hasUnRegisterRoomsNotificationRequest = YES;
  result.unRegisterRoomsNotificationRequest = value;
  return self;
}
- (GameMessage_Builder*) setUnRegisterRoomsNotificationRequestBuilder:(UnRegisterRoomsNotificationRequest_Builder*) builderForValue {
  return [self setUnRegisterRoomsNotificationRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeUnRegisterRoomsNotificationRequest:(UnRegisterRoomsNotificationRequest*) value {
  if (result.hasUnRegisterRoomsNotificationRequest &&
      result.unRegisterRoomsNotificationRequest != [UnRegisterRoomsNotificationRequest defaultInstance]) {
    result.unRegisterRoomsNotificationRequest =
      [[[UnRegisterRoomsNotificationRequest builderWithPrototype:result.unRegisterRoomsNotificationRequest] mergeFrom:value] buildPartial];
  } else {
    result.unRegisterRoomsNotificationRequest = value;
  }
  result.hasUnRegisterRoomsNotificationRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearUnRegisterRoomsNotificationRequest {
  result.hasUnRegisterRoomsNotificationRequest = NO;
  result.unRegisterRoomsNotificationRequest = [UnRegisterRoomsNotificationRequest defaultInstance];
  return self;
}
- (BOOL) hasUnRegisterRoomsNotificationResponse {
  return result.hasUnRegisterRoomsNotificationResponse;
}
- (UnRegisterRoomsNotificationResponse*) unRegisterRoomsNotificationResponse {
  return result.unRegisterRoomsNotificationResponse;
}
- (GameMessage_Builder*) setUnRegisterRoomsNotificationResponse:(UnRegisterRoomsNotificationResponse*) value {
  result.hasUnRegisterRoomsNotificationResponse = YES;
  result.unRegisterRoomsNotificationResponse = value;
  return self;
}
- (GameMessage_Builder*) setUnRegisterRoomsNotificationResponseBuilder:(UnRegisterRoomsNotificationResponse_Builder*) builderForValue {
  return [self setUnRegisterRoomsNotificationResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeUnRegisterRoomsNotificationResponse:(UnRegisterRoomsNotificationResponse*) value {
  if (result.hasUnRegisterRoomsNotificationResponse &&
      result.unRegisterRoomsNotificationResponse != [UnRegisterRoomsNotificationResponse defaultInstance]) {
    result.unRegisterRoomsNotificationResponse =
      [[[UnRegisterRoomsNotificationResponse builderWithPrototype:result.unRegisterRoomsNotificationResponse] mergeFrom:value] buildPartial];
  } else {
    result.unRegisterRoomsNotificationResponse = value;
  }
  result.hasUnRegisterRoomsNotificationResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearUnRegisterRoomsNotificationResponse {
  result.hasUnRegisterRoomsNotificationResponse = NO;
  result.unRegisterRoomsNotificationResponse = [UnRegisterRoomsNotificationResponse defaultInstance];
  return self;
}
- (BOOL) hasUserDiceNotification {
  return result.hasUserDiceNotification;
}
- (UserDiceNotification*) userDiceNotification {
  return result.userDiceNotification;
}
- (GameMessage_Builder*) setUserDiceNotification:(UserDiceNotification*) value {
  result.hasUserDiceNotification = YES;
  result.userDiceNotification = value;
  return self;
}
- (GameMessage_Builder*) setUserDiceNotificationBuilder:(UserDiceNotification_Builder*) builderForValue {
  return [self setUserDiceNotification:[builderForValue build]];
}
- (GameMessage_Builder*) mergeUserDiceNotification:(UserDiceNotification*) value {
  if (result.hasUserDiceNotification &&
      result.userDiceNotification != [UserDiceNotification defaultInstance]) {
    result.userDiceNotification =
      [[[UserDiceNotification builderWithPrototype:result.userDiceNotification] mergeFrom:value] buildPartial];
  } else {
    result.userDiceNotification = value;
  }
  result.hasUserDiceNotification = YES;
  return self;
}
- (GameMessage_Builder*) clearUserDiceNotification {
  result.hasUserDiceNotification = NO;
  result.userDiceNotification = [UserDiceNotification defaultInstance];
  return self;
}
- (BOOL) hasBetDiceRequest {
  return result.hasBetDiceRequest;
}
- (BetDiceRequest*) betDiceRequest {
  return result.betDiceRequest;
}
- (GameMessage_Builder*) setBetDiceRequest:(BetDiceRequest*) value {
  result.hasBetDiceRequest = YES;
  result.betDiceRequest = value;
  return self;
}
- (GameMessage_Builder*) setBetDiceRequestBuilder:(BetDiceRequest_Builder*) builderForValue {
  return [self setBetDiceRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeBetDiceRequest:(BetDiceRequest*) value {
  if (result.hasBetDiceRequest &&
      result.betDiceRequest != [BetDiceRequest defaultInstance]) {
    result.betDiceRequest =
      [[[BetDiceRequest builderWithPrototype:result.betDiceRequest] mergeFrom:value] buildPartial];
  } else {
    result.betDiceRequest = value;
  }
  result.hasBetDiceRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearBetDiceRequest {
  result.hasBetDiceRequest = NO;
  result.betDiceRequest = [BetDiceRequest defaultInstance];
  return self;
}
- (BOOL) hasBetDiceResponse {
  return result.hasBetDiceResponse;
}
- (BetDiceResponse*) betDiceResponse {
  return result.betDiceResponse;
}
- (GameMessage_Builder*) setBetDiceResponse:(BetDiceResponse*) value {
  result.hasBetDiceResponse = YES;
  result.betDiceResponse = value;
  return self;
}
- (GameMessage_Builder*) setBetDiceResponseBuilder:(BetDiceResponse_Builder*) builderForValue {
  return [self setBetDiceResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeBetDiceResponse:(BetDiceResponse*) value {
  if (result.hasBetDiceResponse &&
      result.betDiceResponse != [BetDiceResponse defaultInstance]) {
    result.betDiceResponse =
      [[[BetDiceResponse builderWithPrototype:result.betDiceResponse] mergeFrom:value] buildPartial];
  } else {
    result.betDiceResponse = value;
  }
  result.hasBetDiceResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearBetDiceResponse {
  result.hasBetDiceResponse = NO;
  result.betDiceResponse = [BetDiceResponse defaultInstance];
  return self;
}
- (BOOL) hasUseItemRequest {
  return result.hasUseItemRequest;
}
- (UseItemRequest*) useItemRequest {
  return result.useItemRequest;
}
- (GameMessage_Builder*) setUseItemRequest:(UseItemRequest*) value {
  result.hasUseItemRequest = YES;
  result.useItemRequest = value;
  return self;
}
- (GameMessage_Builder*) setUseItemRequestBuilder:(UseItemRequest_Builder*) builderForValue {
  return [self setUseItemRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeUseItemRequest:(UseItemRequest*) value {
  if (result.hasUseItemRequest &&
      result.useItemRequest != [UseItemRequest defaultInstance]) {
    result.useItemRequest =
      [[[UseItemRequest builderWithPrototype:result.useItemRequest] mergeFrom:value] buildPartial];
  } else {
    result.useItemRequest = value;
  }
  result.hasUseItemRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearUseItemRequest {
  result.hasUseItemRequest = NO;
  result.useItemRequest = [UseItemRequest defaultInstance];
  return self;
}
- (BOOL) hasUseItemResponse {
  return result.hasUseItemResponse;
}
- (UseItemResponse*) useItemResponse {
  return result.useItemResponse;
}
- (GameMessage_Builder*) setUseItemResponse:(UseItemResponse*) value {
  result.hasUseItemResponse = YES;
  result.useItemResponse = value;
  return self;
}
- (GameMessage_Builder*) setUseItemResponseBuilder:(UseItemResponse_Builder*) builderForValue {
  return [self setUseItemResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeUseItemResponse:(UseItemResponse*) value {
  if (result.hasUseItemResponse &&
      result.useItemResponse != [UseItemResponse defaultInstance]) {
    result.useItemResponse =
      [[[UseItemResponse builderWithPrototype:result.useItemResponse] mergeFrom:value] buildPartial];
  } else {
    result.useItemResponse = value;
  }
  result.hasUseItemResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearUseItemResponse {
  result.hasUseItemResponse = NO;
  result.useItemResponse = [UseItemResponse defaultInstance];
  return self;
}
- (BOOL) hasBetRequest {
  return result.hasBetRequest;
}
- (BetRequest*) betRequest {
  return result.betRequest;
}
- (GameMessage_Builder*) setBetRequest:(BetRequest*) value {
  result.hasBetRequest = YES;
  result.betRequest = value;
  return self;
}
- (GameMessage_Builder*) setBetRequestBuilder:(BetRequest_Builder*) builderForValue {
  return [self setBetRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeBetRequest:(BetRequest*) value {
  if (result.hasBetRequest &&
      result.betRequest != [BetRequest defaultInstance]) {
    result.betRequest =
      [[[BetRequest builderWithPrototype:result.betRequest] mergeFrom:value] buildPartial];
  } else {
    result.betRequest = value;
  }
  result.hasBetRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearBetRequest {
  result.hasBetRequest = NO;
  result.betRequest = [BetRequest defaultInstance];
  return self;
}
- (BOOL) hasBetResponse {
  return result.hasBetResponse;
}
- (BetResponse*) betResponse {
  return result.betResponse;
}
- (GameMessage_Builder*) setBetResponse:(BetResponse*) value {
  result.hasBetResponse = YES;
  result.betResponse = value;
  return self;
}
- (GameMessage_Builder*) setBetResponseBuilder:(BetResponse_Builder*) builderForValue {
  return [self setBetResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeBetResponse:(BetResponse*) value {
  if (result.hasBetResponse &&
      result.betResponse != [BetResponse defaultInstance]) {
    result.betResponse =
      [[[BetResponse builderWithPrototype:result.betResponse] mergeFrom:value] buildPartial];
  } else {
    result.betResponse = value;
  }
  result.hasBetResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearBetResponse {
  result.hasBetResponse = NO;
  result.betResponse = [BetResponse defaultInstance];
  return self;
}
- (BOOL) hasCheckCardRequest {
  return result.hasCheckCardRequest;
}
- (CheckCardRequest*) checkCardRequest {
  return result.checkCardRequest;
}
- (GameMessage_Builder*) setCheckCardRequest:(CheckCardRequest*) value {
  result.hasCheckCardRequest = YES;
  result.checkCardRequest = value;
  return self;
}
- (GameMessage_Builder*) setCheckCardRequestBuilder:(CheckCardRequest_Builder*) builderForValue {
  return [self setCheckCardRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCheckCardRequest:(CheckCardRequest*) value {
  if (result.hasCheckCardRequest &&
      result.checkCardRequest != [CheckCardRequest defaultInstance]) {
    result.checkCardRequest =
      [[[CheckCardRequest builderWithPrototype:result.checkCardRequest] mergeFrom:value] buildPartial];
  } else {
    result.checkCardRequest = value;
  }
  result.hasCheckCardRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearCheckCardRequest {
  result.hasCheckCardRequest = NO;
  result.checkCardRequest = [CheckCardRequest defaultInstance];
  return self;
}
- (BOOL) hasCheckCardResponse {
  return result.hasCheckCardResponse;
}
- (CheckCardResponse*) checkCardResponse {
  return result.checkCardResponse;
}
- (GameMessage_Builder*) setCheckCardResponse:(CheckCardResponse*) value {
  result.hasCheckCardResponse = YES;
  result.checkCardResponse = value;
  return self;
}
- (GameMessage_Builder*) setCheckCardResponseBuilder:(CheckCardResponse_Builder*) builderForValue {
  return [self setCheckCardResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCheckCardResponse:(CheckCardResponse*) value {
  if (result.hasCheckCardResponse &&
      result.checkCardResponse != [CheckCardResponse defaultInstance]) {
    result.checkCardResponse =
      [[[CheckCardResponse builderWithPrototype:result.checkCardResponse] mergeFrom:value] buildPartial];
  } else {
    result.checkCardResponse = value;
  }
  result.hasCheckCardResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearCheckCardResponse {
  result.hasCheckCardResponse = NO;
  result.checkCardResponse = [CheckCardResponse defaultInstance];
  return self;
}
- (BOOL) hasFoldCardRequest {
  return result.hasFoldCardRequest;
}
- (FoldCardRequest*) foldCardRequest {
  return result.foldCardRequest;
}
- (GameMessage_Builder*) setFoldCardRequest:(FoldCardRequest*) value {
  result.hasFoldCardRequest = YES;
  result.foldCardRequest = value;
  return self;
}
- (GameMessage_Builder*) setFoldCardRequestBuilder:(FoldCardRequest_Builder*) builderForValue {
  return [self setFoldCardRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeFoldCardRequest:(FoldCardRequest*) value {
  if (result.hasFoldCardRequest &&
      result.foldCardRequest != [FoldCardRequest defaultInstance]) {
    result.foldCardRequest =
      [[[FoldCardRequest builderWithPrototype:result.foldCardRequest] mergeFrom:value] buildPartial];
  } else {
    result.foldCardRequest = value;
  }
  result.hasFoldCardRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearFoldCardRequest {
  result.hasFoldCardRequest = NO;
  result.foldCardRequest = [FoldCardRequest defaultInstance];
  return self;
}
- (BOOL) hasFoldCardResponse {
  return result.hasFoldCardResponse;
}
- (FoldCardResponse*) foldCardResponse {
  return result.foldCardResponse;
}
- (GameMessage_Builder*) setFoldCardResponse:(FoldCardResponse*) value {
  result.hasFoldCardResponse = YES;
  result.foldCardResponse = value;
  return self;
}
- (GameMessage_Builder*) setFoldCardResponseBuilder:(FoldCardResponse_Builder*) builderForValue {
  return [self setFoldCardResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeFoldCardResponse:(FoldCardResponse*) value {
  if (result.hasFoldCardResponse &&
      result.foldCardResponse != [FoldCardResponse defaultInstance]) {
    result.foldCardResponse =
      [[[FoldCardResponse builderWithPrototype:result.foldCardResponse] mergeFrom:value] buildPartial];
  } else {
    result.foldCardResponse = value;
  }
  result.hasFoldCardResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearFoldCardResponse {
  result.hasFoldCardResponse = NO;
  result.foldCardResponse = [FoldCardResponse defaultInstance];
  return self;
}
- (BOOL) hasShowCardRequest {
  return result.hasShowCardRequest;
}
- (ShowCardRequest*) showCardRequest {
  return result.showCardRequest;
}
- (GameMessage_Builder*) setShowCardRequest:(ShowCardRequest*) value {
  result.hasShowCardRequest = YES;
  result.showCardRequest = value;
  return self;
}
- (GameMessage_Builder*) setShowCardRequestBuilder:(ShowCardRequest_Builder*) builderForValue {
  return [self setShowCardRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeShowCardRequest:(ShowCardRequest*) value {
  if (result.hasShowCardRequest &&
      result.showCardRequest != [ShowCardRequest defaultInstance]) {
    result.showCardRequest =
      [[[ShowCardRequest builderWithPrototype:result.showCardRequest] mergeFrom:value] buildPartial];
  } else {
    result.showCardRequest = value;
  }
  result.hasShowCardRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearShowCardRequest {
  result.hasShowCardRequest = NO;
  result.showCardRequest = [ShowCardRequest defaultInstance];
  return self;
}
- (BOOL) hasShowCardResponse {
  return result.hasShowCardResponse;
}
- (ShowCardResponse*) showCardResponse {
  return result.showCardResponse;
}
- (GameMessage_Builder*) setShowCardResponse:(ShowCardResponse*) value {
  result.hasShowCardResponse = YES;
  result.showCardResponse = value;
  return self;
}
- (GameMessage_Builder*) setShowCardResponseBuilder:(ShowCardResponse_Builder*) builderForValue {
  return [self setShowCardResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeShowCardResponse:(ShowCardResponse*) value {
  if (result.hasShowCardResponse &&
      result.showCardResponse != [ShowCardResponse defaultInstance]) {
    result.showCardResponse =
      [[[ShowCardResponse builderWithPrototype:result.showCardResponse] mergeFrom:value] buildPartial];
  } else {
    result.showCardResponse = value;
  }
  result.hasShowCardResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearShowCardResponse {
  result.hasShowCardResponse = NO;
  result.showCardResponse = [ShowCardResponse defaultInstance];
  return self;
}
- (BOOL) hasCompareCardRequest {
  return result.hasCompareCardRequest;
}
- (CompareCardRequest*) compareCardRequest {
  return result.compareCardRequest;
}
- (GameMessage_Builder*) setCompareCardRequest:(CompareCardRequest*) value {
  result.hasCompareCardRequest = YES;
  result.compareCardRequest = value;
  return self;
}
- (GameMessage_Builder*) setCompareCardRequestBuilder:(CompareCardRequest_Builder*) builderForValue {
  return [self setCompareCardRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCompareCardRequest:(CompareCardRequest*) value {
  if (result.hasCompareCardRequest &&
      result.compareCardRequest != [CompareCardRequest defaultInstance]) {
    result.compareCardRequest =
      [[[CompareCardRequest builderWithPrototype:result.compareCardRequest] mergeFrom:value] buildPartial];
  } else {
    result.compareCardRequest = value;
  }
  result.hasCompareCardRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearCompareCardRequest {
  result.hasCompareCardRequest = NO;
  result.compareCardRequest = [CompareCardRequest defaultInstance];
  return self;
}
- (BOOL) hasCompareCardResponse {
  return result.hasCompareCardResponse;
}
- (CompareCardResponse*) compareCardResponse {
  return result.compareCardResponse;
}
- (GameMessage_Builder*) setCompareCardResponse:(CompareCardResponse*) value {
  result.hasCompareCardResponse = YES;
  result.compareCardResponse = value;
  return self;
}
- (GameMessage_Builder*) setCompareCardResponseBuilder:(CompareCardResponse_Builder*) builderForValue {
  return [self setCompareCardResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeCompareCardResponse:(CompareCardResponse*) value {
  if (result.hasCompareCardResponse &&
      result.compareCardResponse != [CompareCardResponse defaultInstance]) {
    result.compareCardResponse =
      [[[CompareCardResponse builderWithPrototype:result.compareCardResponse] mergeFrom:value] buildPartial];
  } else {
    result.compareCardResponse = value;
  }
  result.hasCompareCardResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearCompareCardResponse {
  result.hasCompareCardResponse = NO;
  result.compareCardResponse = [CompareCardResponse defaultInstance];
  return self;
}
- (BOOL) hasChangeCardRequest {
  return result.hasChangeCardRequest;
}
- (ChangeCardRequest*) changeCardRequest {
  return result.changeCardRequest;
}
- (GameMessage_Builder*) setChangeCardRequest:(ChangeCardRequest*) value {
  result.hasChangeCardRequest = YES;
  result.changeCardRequest = value;
  return self;
}
- (GameMessage_Builder*) setChangeCardRequestBuilder:(ChangeCardRequest_Builder*) builderForValue {
  return [self setChangeCardRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeChangeCardRequest:(ChangeCardRequest*) value {
  if (result.hasChangeCardRequest &&
      result.changeCardRequest != [ChangeCardRequest defaultInstance]) {
    result.changeCardRequest =
      [[[ChangeCardRequest builderWithPrototype:result.changeCardRequest] mergeFrom:value] buildPartial];
  } else {
    result.changeCardRequest = value;
  }
  result.hasChangeCardRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearChangeCardRequest {
  result.hasChangeCardRequest = NO;
  result.changeCardRequest = [ChangeCardRequest defaultInstance];
  return self;
}
- (BOOL) hasChangeCardResponse {
  return result.hasChangeCardResponse;
}
- (ChangeCardResponse*) changeCardResponse {
  return result.changeCardResponse;
}
- (GameMessage_Builder*) setChangeCardResponse:(ChangeCardResponse*) value {
  result.hasChangeCardResponse = YES;
  result.changeCardResponse = value;
  return self;
}
- (GameMessage_Builder*) setChangeCardResponseBuilder:(ChangeCardResponse_Builder*) builderForValue {
  return [self setChangeCardResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeChangeCardResponse:(ChangeCardResponse*) value {
  if (result.hasChangeCardResponse &&
      result.changeCardResponse != [ChangeCardResponse defaultInstance]) {
    result.changeCardResponse =
      [[[ChangeCardResponse builderWithPrototype:result.changeCardResponse] mergeFrom:value] buildPartial];
  } else {
    result.changeCardResponse = value;
  }
  result.hasChangeCardResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearChangeCardResponse {
  result.hasChangeCardResponse = NO;
  result.changeCardResponse = [ChangeCardResponse defaultInstance];
  return self;
}
- (BOOL) hasTimeoutSettingRequest {
  return result.hasTimeoutSettingRequest;
}
- (TimeoutSettingRequest*) timeoutSettingRequest {
  return result.timeoutSettingRequest;
}
- (GameMessage_Builder*) setTimeoutSettingRequest:(TimeoutSettingRequest*) value {
  result.hasTimeoutSettingRequest = YES;
  result.timeoutSettingRequest = value;
  return self;
}
- (GameMessage_Builder*) setTimeoutSettingRequestBuilder:(TimeoutSettingRequest_Builder*) builderForValue {
  return [self setTimeoutSettingRequest:[builderForValue build]];
}
- (GameMessage_Builder*) mergeTimeoutSettingRequest:(TimeoutSettingRequest*) value {
  if (result.hasTimeoutSettingRequest &&
      result.timeoutSettingRequest != [TimeoutSettingRequest defaultInstance]) {
    result.timeoutSettingRequest =
      [[[TimeoutSettingRequest builderWithPrototype:result.timeoutSettingRequest] mergeFrom:value] buildPartial];
  } else {
    result.timeoutSettingRequest = value;
  }
  result.hasTimeoutSettingRequest = YES;
  return self;
}
- (GameMessage_Builder*) clearTimeoutSettingRequest {
  result.hasTimeoutSettingRequest = NO;
  result.timeoutSettingRequest = [TimeoutSettingRequest defaultInstance];
  return self;
}
- (BOOL) hasTimeoutSettingResponse {
  return result.hasTimeoutSettingResponse;
}
- (TimeoutSettingResponse*) timeoutSettingResponse {
  return result.timeoutSettingResponse;
}
- (GameMessage_Builder*) setTimeoutSettingResponse:(TimeoutSettingResponse*) value {
  result.hasTimeoutSettingResponse = YES;
  result.timeoutSettingResponse = value;
  return self;
}
- (GameMessage_Builder*) setTimeoutSettingResponseBuilder:(TimeoutSettingResponse_Builder*) builderForValue {
  return [self setTimeoutSettingResponse:[builderForValue build]];
}
- (GameMessage_Builder*) mergeTimeoutSettingResponse:(TimeoutSettingResponse*) value {
  if (result.hasTimeoutSettingResponse &&
      result.timeoutSettingResponse != [TimeoutSettingResponse defaultInstance]) {
    result.timeoutSettingResponse =
      [[[TimeoutSettingResponse builderWithPrototype:result.timeoutSettingResponse] mergeFrom:value] buildPartial];
  } else {
    result.timeoutSettingResponse = value;
  }
  result.hasTimeoutSettingResponse = YES;
  return self;
}
- (GameMessage_Builder*) clearTimeoutSettingResponse {
  result.hasTimeoutSettingResponse = NO;
  result.timeoutSettingResponse = [TimeoutSettingResponse defaultInstance];
  return self;
}
- (BOOL) hasStartOffset {
  return result.hasStartOffset;
}
- (int32_t) startOffset {
  return result.startOffset;
}
- (GameMessage_Builder*) setStartOffset:(int32_t) value {
  result.hasStartOffset = YES;
  result.startOffset = value;
  return self;
}
- (GameMessage_Builder*) clearStartOffset {
  result.hasStartOffset = NO;
  result.startOffset = 0;
  return self;
}
- (BOOL) hasMaxCount {
  return result.hasMaxCount;
}
- (int32_t) maxCount {
  return result.maxCount;
}
- (GameMessage_Builder*) setMaxCount:(int32_t) value {
  result.hasMaxCount = YES;
  result.maxCount = value;
  return self;
}
- (GameMessage_Builder*) clearMaxCount {
  result.hasMaxCount = NO;
  result.maxCount = 0;
  return self;
}
- (BOOL) hasTimeStamp {
  return result.hasTimeStamp;
}
- (int32_t) timeStamp {
  return result.timeStamp;
}
- (GameMessage_Builder*) setTimeStamp:(int32_t) value {
  result.hasTimeStamp = YES;
  result.timeStamp = value;
  return self;
}
- (GameMessage_Builder*) clearTimeStamp {
  result.hasTimeStamp = NO;
  result.timeStamp = 0;
  return self;
}
- (BOOL) hasMac {
  return result.hasMac;
}
- (NSString*) mac {
  return result.mac;
}
- (GameMessage_Builder*) setMac:(NSString*) value {
  result.hasMac = YES;
  result.mac = value;
  return self;
}
- (GameMessage_Builder*) clearMac {
  result.hasMac = NO;
  result.mac = @"";
  return self;
}
@end

@interface DataQueryResponse ()
@property int32_t resultCode;
@property int32_t totalCount;
@property (retain) NSMutableArray* mutableDrawDataList;
@property (retain) NSMutableArray* mutableMessageList;
@property (retain) NSMutableArray* mutableMessageStatList;
@property (retain) NSMutableArray* mutableFeedList;
@property (retain) NSMutableArray* mutableBbsBoardList;
@property (retain) NSMutableArray* mutableBbsPostList;
@property (retain) NSMutableArray* mutableBbsActionList;
@property (retain) PBBBSDraw* bbsDrawData;
@property (retain) NSMutableArray* mutableBbsPrivilegeListList;
@property (retain) NSMutableArray* mutableBbsUserListList;
@property (retain) NSMutableArray* mutableWallListList;
@property (retain) PBWall* wall;
@property (retain) PBGameUser* user;
@property int32_t userRelation;
@end

@implementation DataQueryResponse

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value {
  hasResultCode_ = !!value;
}
@synthesize resultCode;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) value {
  hasTotalCount_ = !!value;
}
@synthesize totalCount;
@synthesize mutableDrawDataList;
@synthesize mutableMessageList;
@synthesize mutableMessageStatList;
@synthesize mutableFeedList;
@synthesize mutableBbsBoardList;
@synthesize mutableBbsPostList;
@synthesize mutableBbsActionList;
- (BOOL) hasBbsDrawData {
  return !!hasBbsDrawData_;
}
- (void) setHasBbsDrawData:(BOOL) value {
  hasBbsDrawData_ = !!value;
}
@synthesize bbsDrawData;
@synthesize mutableBbsPrivilegeListList;
@synthesize mutableBbsUserListList;
@synthesize mutableWallListList;
- (BOOL) hasWall {
  return !!hasWall_;
}
- (void) setHasWall:(BOOL) value {
  hasWall_ = !!value;
}
@synthesize wall;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value {
  hasUser_ = !!value;
}
@synthesize user;
- (BOOL) hasUserRelation {
  return !!hasUserRelation_;
}
- (void) setHasUserRelation:(BOOL) value {
  hasUserRelation_ = !!value;
}
@synthesize userRelation;
- (void) dealloc {
  self.mutableDrawDataList = nil;
  self.mutableMessageList = nil;
  self.mutableMessageStatList = nil;
  self.mutableFeedList = nil;
  self.mutableBbsBoardList = nil;
  self.mutableBbsPostList = nil;
  self.mutableBbsActionList = nil;
  self.bbsDrawData = nil;
  self.mutableBbsPrivilegeListList = nil;
  self.mutableBbsUserListList = nil;
  self.mutableWallListList = nil;
  self.wall = nil;
  self.user = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.resultCode = 0;
    self.totalCount = 0;
    self.bbsDrawData = [PBBBSDraw defaultInstance];
    self.wall = [PBWall defaultInstance];
    self.user = [PBGameUser defaultInstance];
    self.userRelation = 0;
  }
  return self;
}
static DataQueryResponse* defaultDataQueryResponseInstance = nil;
+ (void) initialize {
  if (self == [DataQueryResponse class]) {
    defaultDataQueryResponseInstance = [[DataQueryResponse alloc] init];
  }
}
+ (DataQueryResponse*) defaultInstance {
  return defaultDataQueryResponseInstance;
}
- (DataQueryResponse*) defaultInstance {
  return defaultDataQueryResponseInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDraw*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (NSArray*) messageList {
  return mutableMessageList;
}
- (PBMessage*) messageAtIndex:(int32_t) index {
  id value = [mutableMessageList objectAtIndex:index];
  return value;
}
- (NSArray*) messageStatList {
  return mutableMessageStatList;
}
- (PBMessageStat*) messageStatAtIndex:(int32_t) index {
  id value = [mutableMessageStatList objectAtIndex:index];
  return value;
}
- (NSArray*) feedList {
  return mutableFeedList;
}
- (PBFeed*) feedAtIndex:(int32_t) index {
  id value = [mutableFeedList objectAtIndex:index];
  return value;
}
- (NSArray*) bbsBoardList {
  return mutableBbsBoardList;
}
- (PBBBSBoard*) bbsBoardAtIndex:(int32_t) index {
  id value = [mutableBbsBoardList objectAtIndex:index];
  return value;
}
- (NSArray*) bbsPostList {
  return mutableBbsPostList;
}
- (PBBBSPost*) bbsPostAtIndex:(int32_t) index {
  id value = [mutableBbsPostList objectAtIndex:index];
  return value;
}
- (NSArray*) bbsActionList {
  return mutableBbsActionList;
}
- (PBBBSAction*) bbsActionAtIndex:(int32_t) index {
  id value = [mutableBbsActionList objectAtIndex:index];
  return value;
}
- (NSArray*) bbsPrivilegeListList {
  return mutableBbsPrivilegeListList;
}
- (PBBBSPrivilege*) bbsPrivilegeListAtIndex:(int32_t) index {
  id value = [mutableBbsPrivilegeListList objectAtIndex:index];
  return value;
}
- (NSArray*) bbsUserListList {
  return mutableBbsUserListList;
}
- (PBBBSUser*) bbsUserListAtIndex:(int32_t) index {
  id value = [mutableBbsUserListList objectAtIndex:index];
  return value;
}
- (NSArray*) wallListList {
  return mutableWallListList;
}
- (PBWall*) wallListAtIndex:(int32_t) index {
  id value = [mutableWallListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  for (PBDraw* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBMessage* element in self.messageList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBMessageStat* element in self.messageStatList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBFeed* element in self.feedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBBBSBoard* element in self.bbsBoardList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBBBSPost* element in self.bbsPostList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBBBSAction* element in self.bbsActionList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasBbsDrawData) {
    if (!self.bbsDrawData.isInitialized) {
      return NO;
    }
  }
  for (PBBBSPrivilege* element in self.bbsPrivilegeListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBBBSUser* element in self.bbsUserListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBWall* element in self.wallListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasWall) {
    if (!self.wall.isInitialized) {
      return NO;
    }
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeInt32:1 value:self.resultCode];
  }
  if (self.hasTotalCount) {
    [output writeInt32:2 value:self.totalCount];
  }
  for (PBDraw* element in self.drawDataList) {
    [output writeMessage:21 value:element];
  }
  for (PBMessage* element in self.messageList) {
    [output writeMessage:32 value:element];
  }
  for (PBMessageStat* element in self.messageStatList) {
    [output writeMessage:33 value:element];
  }
  for (PBFeed* element in self.feedList) {
    [output writeMessage:41 value:element];
  }
  for (PBBBSBoard* element in self.bbsBoardList) {
    [output writeMessage:51 value:element];
  }
  for (PBBBSPost* element in self.bbsPostList) {
    [output writeMessage:52 value:element];
  }
  for (PBBBSAction* element in self.bbsActionList) {
    [output writeMessage:53 value:element];
  }
  if (self.hasBbsDrawData) {
    [output writeMessage:54 value:self.bbsDrawData];
  }
  for (PBBBSPrivilege* element in self.bbsPrivilegeListList) {
    [output writeMessage:55 value:element];
  }
  for (PBBBSUser* element in self.bbsUserListList) {
    [output writeMessage:56 value:element];
  }
  for (PBWall* element in self.wallListList) {
    [output writeMessage:80 value:element];
  }
  if (self.hasWall) {
    [output writeMessage:81 value:self.wall];
  }
  if (self.hasUser) {
    [output writeMessage:85 value:self.user];
  }
  if (self.hasUserRelation) {
    [output writeInt32:86 value:self.userRelation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasResultCode) {
    size += computeInt32Size(1, self.resultCode);
  }
  if (self.hasTotalCount) {
    size += computeInt32Size(2, self.totalCount);
  }
  for (PBDraw* element in self.drawDataList) {
    size += computeMessageSize(21, element);
  }
  for (PBMessage* element in self.messageList) {
    size += computeMessageSize(32, element);
  }
  for (PBMessageStat* element in self.messageStatList) {
    size += computeMessageSize(33, element);
  }
  for (PBFeed* element in self.feedList) {
    size += computeMessageSize(41, element);
  }
  for (PBBBSBoard* element in self.bbsBoardList) {
    size += computeMessageSize(51, element);
  }
  for (PBBBSPost* element in self.bbsPostList) {
    size += computeMessageSize(52, element);
  }
  for (PBBBSAction* element in self.bbsActionList) {
    size += computeMessageSize(53, element);
  }
  if (self.hasBbsDrawData) {
    size += computeMessageSize(54, self.bbsDrawData);
  }
  for (PBBBSPrivilege* element in self.bbsPrivilegeListList) {
    size += computeMessageSize(55, element);
  }
  for (PBBBSUser* element in self.bbsUserListList) {
    size += computeMessageSize(56, element);
  }
  for (PBWall* element in self.wallListList) {
    size += computeMessageSize(80, element);
  }
  if (self.hasWall) {
    size += computeMessageSize(81, self.wall);
  }
  if (self.hasUser) {
    size += computeMessageSize(85, self.user);
  }
  if (self.hasUserRelation) {
    size += computeInt32Size(86, self.userRelation);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DataQueryResponse*) parseFromData:(NSData*) data {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromData:data] build];
}
+ (DataQueryResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DataQueryResponse*) parseFromInputStream:(NSInputStream*) input {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromInputStream:input] build];
}
+ (DataQueryResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataQueryResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromCodedInputStream:input] build];
}
+ (DataQueryResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataQueryResponse*)[[[DataQueryResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataQueryResponse_Builder*) builder {
  return [[[DataQueryResponse_Builder alloc] init] autorelease];
}
+ (DataQueryResponse_Builder*) builderWithPrototype:(DataQueryResponse*) prototype {
  return [[DataQueryResponse builder] mergeFrom:prototype];
}
- (DataQueryResponse_Builder*) builder {
  return [DataQueryResponse builder];
}
@end

@interface DataQueryResponse_Builder()
@property (retain) DataQueryResponse* result;
@end

@implementation DataQueryResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DataQueryResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DataQueryResponse_Builder*) clear {
  self.result = [[[DataQueryResponse alloc] init] autorelease];
  return self;
}
- (DataQueryResponse_Builder*) clone {
  return [DataQueryResponse builderWithPrototype:result];
}
- (DataQueryResponse*) defaultInstance {
  return [DataQueryResponse defaultInstance];
}
- (DataQueryResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DataQueryResponse*) buildPartial {
  DataQueryResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DataQueryResponse_Builder*) mergeFrom:(DataQueryResponse*) other {
  if (other == [DataQueryResponse defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.mutableMessageList.count > 0) {
    if (result.mutableMessageList == nil) {
      result.mutableMessageList = [NSMutableArray array];
    }
    [result.mutableMessageList addObjectsFromArray:other.mutableMessageList];
  }
  if (other.mutableMessageStatList.count > 0) {
    if (result.mutableMessageStatList == nil) {
      result.mutableMessageStatList = [NSMutableArray array];
    }
    [result.mutableMessageStatList addObjectsFromArray:other.mutableMessageStatList];
  }
  if (other.mutableFeedList.count > 0) {
    if (result.mutableFeedList == nil) {
      result.mutableFeedList = [NSMutableArray array];
    }
    [result.mutableFeedList addObjectsFromArray:other.mutableFeedList];
  }
  if (other.mutableBbsBoardList.count > 0) {
    if (result.mutableBbsBoardList == nil) {
      result.mutableBbsBoardList = [NSMutableArray array];
    }
    [result.mutableBbsBoardList addObjectsFromArray:other.mutableBbsBoardList];
  }
  if (other.mutableBbsPostList.count > 0) {
    if (result.mutableBbsPostList == nil) {
      result.mutableBbsPostList = [NSMutableArray array];
    }
    [result.mutableBbsPostList addObjectsFromArray:other.mutableBbsPostList];
  }
  if (other.mutableBbsActionList.count > 0) {
    if (result.mutableBbsActionList == nil) {
      result.mutableBbsActionList = [NSMutableArray array];
    }
    [result.mutableBbsActionList addObjectsFromArray:other.mutableBbsActionList];
  }
  if (other.hasBbsDrawData) {
    [self mergeBbsDrawData:other.bbsDrawData];
  }
  if (other.mutableBbsPrivilegeListList.count > 0) {
    if (result.mutableBbsPrivilegeListList == nil) {
      result.mutableBbsPrivilegeListList = [NSMutableArray array];
    }
    [result.mutableBbsPrivilegeListList addObjectsFromArray:other.mutableBbsPrivilegeListList];
  }
  if (other.mutableBbsUserListList.count > 0) {
    if (result.mutableBbsUserListList == nil) {
      result.mutableBbsUserListList = [NSMutableArray array];
    }
    [result.mutableBbsUserListList addObjectsFromArray:other.mutableBbsUserListList];
  }
  if (other.mutableWallListList.count > 0) {
    if (result.mutableWallListList == nil) {
      result.mutableWallListList = [NSMutableArray array];
    }
    [result.mutableWallListList addObjectsFromArray:other.mutableWallListList];
  }
  if (other.hasWall) {
    [self mergeWall:other.wall];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasUserRelation) {
    [self setUserRelation:other.userRelation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DataQueryResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DataQueryResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResultCode:[input readInt32]];
        break;
      }
      case 16: {
        [self setTotalCount:[input readInt32]];
        break;
      }
      case 170: {
        PBDraw_Builder* subBuilder = [PBDraw builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        PBMessage_Builder* subBuilder = [PBMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMessage:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        PBMessageStat_Builder* subBuilder = [PBMessageStat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMessageStat:[subBuilder buildPartial]];
        break;
      }
      case 330: {
        PBFeed_Builder* subBuilder = [PBFeed builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeed:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        PBBBSBoard_Builder* subBuilder = [PBBBSBoard builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsBoard:[subBuilder buildPartial]];
        break;
      }
      case 418: {
        PBBBSPost_Builder* subBuilder = [PBBBSPost builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsPost:[subBuilder buildPartial]];
        break;
      }
      case 426: {
        PBBBSAction_Builder* subBuilder = [PBBBSAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsAction:[subBuilder buildPartial]];
        break;
      }
      case 434: {
        PBBBSDraw_Builder* subBuilder = [PBBBSDraw builder];
        if (self.hasBbsDrawData) {
          [subBuilder mergeFrom:self.bbsDrawData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBbsDrawData:[subBuilder buildPartial]];
        break;
      }
      case 442: {
        PBBBSPrivilege_Builder* subBuilder = [PBBBSPrivilege builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsPrivilegeList:[subBuilder buildPartial]];
        break;
      }
      case 450: {
        PBBBSUser_Builder* subBuilder = [PBBBSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBbsUserList:[subBuilder buildPartial]];
        break;
      }
      case 642: {
        PBWall_Builder* subBuilder = [PBWall builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWallList:[subBuilder buildPartial]];
        break;
      }
      case 650: {
        PBWall_Builder* subBuilder = [PBWall builder];
        if (self.hasWall) {
          [subBuilder mergeFrom:self.wall];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWall:[subBuilder buildPartial]];
        break;
      }
      case 682: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 688: {
        [self setUserRelation:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (int32_t) resultCode {
  return result.resultCode;
}
- (DataQueryResponse_Builder*) setResultCode:(int32_t) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (DataQueryResponse_Builder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = 0;
  return self;
}
- (BOOL) hasTotalCount {
  return result.hasTotalCount;
}
- (int32_t) totalCount {
  return result.totalCount;
}
- (DataQueryResponse_Builder*) setTotalCount:(int32_t) value {
  result.hasTotalCount = YES;
  result.totalCount = value;
  return self;
}
- (DataQueryResponse_Builder*) clearTotalCount {
  result.hasTotalCount = NO;
  result.totalCount = 0;
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDraw*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDraw*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addDrawData:(PBDraw*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (NSArray*) messageList {
  if (result.mutableMessageList == nil) { return [NSArray array]; }
  return result.mutableMessageList;
}
- (PBMessage*) messageAtIndex:(int32_t) index {
  return [result messageAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceMessageAtIndex:(int32_t) index with:(PBMessage*) value {
  [result.mutableMessageList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllMessage:(NSArray*) values {
  if (result.mutableMessageList == nil) {
    result.mutableMessageList = [NSMutableArray array];
  }
  [result.mutableMessageList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearMessageList {
  result.mutableMessageList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addMessage:(PBMessage*) value {
  if (result.mutableMessageList == nil) {
    result.mutableMessageList = [NSMutableArray array];
  }
  [result.mutableMessageList addObject:value];
  return self;
}
- (NSArray*) messageStatList {
  if (result.mutableMessageStatList == nil) { return [NSArray array]; }
  return result.mutableMessageStatList;
}
- (PBMessageStat*) messageStatAtIndex:(int32_t) index {
  return [result messageStatAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceMessageStatAtIndex:(int32_t) index with:(PBMessageStat*) value {
  [result.mutableMessageStatList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllMessageStat:(NSArray*) values {
  if (result.mutableMessageStatList == nil) {
    result.mutableMessageStatList = [NSMutableArray array];
  }
  [result.mutableMessageStatList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearMessageStatList {
  result.mutableMessageStatList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addMessageStat:(PBMessageStat*) value {
  if (result.mutableMessageStatList == nil) {
    result.mutableMessageStatList = [NSMutableArray array];
  }
  [result.mutableMessageStatList addObject:value];
  return self;
}
- (NSArray*) feedList {
  if (result.mutableFeedList == nil) { return [NSArray array]; }
  return result.mutableFeedList;
}
- (PBFeed*) feedAtIndex:(int32_t) index {
  return [result feedAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceFeedAtIndex:(int32_t) index with:(PBFeed*) value {
  [result.mutableFeedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllFeed:(NSArray*) values {
  if (result.mutableFeedList == nil) {
    result.mutableFeedList = [NSMutableArray array];
  }
  [result.mutableFeedList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearFeedList {
  result.mutableFeedList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addFeed:(PBFeed*) value {
  if (result.mutableFeedList == nil) {
    result.mutableFeedList = [NSMutableArray array];
  }
  [result.mutableFeedList addObject:value];
  return self;
}
- (NSArray*) bbsBoardList {
  if (result.mutableBbsBoardList == nil) { return [NSArray array]; }
  return result.mutableBbsBoardList;
}
- (PBBBSBoard*) bbsBoardAtIndex:(int32_t) index {
  return [result bbsBoardAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceBbsBoardAtIndex:(int32_t) index with:(PBBBSBoard*) value {
  [result.mutableBbsBoardList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllBbsBoard:(NSArray*) values {
  if (result.mutableBbsBoardList == nil) {
    result.mutableBbsBoardList = [NSMutableArray array];
  }
  [result.mutableBbsBoardList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearBbsBoardList {
  result.mutableBbsBoardList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addBbsBoard:(PBBBSBoard*) value {
  if (result.mutableBbsBoardList == nil) {
    result.mutableBbsBoardList = [NSMutableArray array];
  }
  [result.mutableBbsBoardList addObject:value];
  return self;
}
- (NSArray*) bbsPostList {
  if (result.mutableBbsPostList == nil) { return [NSArray array]; }
  return result.mutableBbsPostList;
}
- (PBBBSPost*) bbsPostAtIndex:(int32_t) index {
  return [result bbsPostAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceBbsPostAtIndex:(int32_t) index with:(PBBBSPost*) value {
  [result.mutableBbsPostList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllBbsPost:(NSArray*) values {
  if (result.mutableBbsPostList == nil) {
    result.mutableBbsPostList = [NSMutableArray array];
  }
  [result.mutableBbsPostList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearBbsPostList {
  result.mutableBbsPostList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addBbsPost:(PBBBSPost*) value {
  if (result.mutableBbsPostList == nil) {
    result.mutableBbsPostList = [NSMutableArray array];
  }
  [result.mutableBbsPostList addObject:value];
  return self;
}
- (NSArray*) bbsActionList {
  if (result.mutableBbsActionList == nil) { return [NSArray array]; }
  return result.mutableBbsActionList;
}
- (PBBBSAction*) bbsActionAtIndex:(int32_t) index {
  return [result bbsActionAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceBbsActionAtIndex:(int32_t) index with:(PBBBSAction*) value {
  [result.mutableBbsActionList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllBbsAction:(NSArray*) values {
  if (result.mutableBbsActionList == nil) {
    result.mutableBbsActionList = [NSMutableArray array];
  }
  [result.mutableBbsActionList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearBbsActionList {
  result.mutableBbsActionList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addBbsAction:(PBBBSAction*) value {
  if (result.mutableBbsActionList == nil) {
    result.mutableBbsActionList = [NSMutableArray array];
  }
  [result.mutableBbsActionList addObject:value];
  return self;
}
- (BOOL) hasBbsDrawData {
  return result.hasBbsDrawData;
}
- (PBBBSDraw*) bbsDrawData {
  return result.bbsDrawData;
}
- (DataQueryResponse_Builder*) setBbsDrawData:(PBBBSDraw*) value {
  result.hasBbsDrawData = YES;
  result.bbsDrawData = value;
  return self;
}
- (DataQueryResponse_Builder*) setBbsDrawDataBuilder:(PBBBSDraw_Builder*) builderForValue {
  return [self setBbsDrawData:[builderForValue build]];
}
- (DataQueryResponse_Builder*) mergeBbsDrawData:(PBBBSDraw*) value {
  if (result.hasBbsDrawData &&
      result.bbsDrawData != [PBBBSDraw defaultInstance]) {
    result.bbsDrawData =
      [[[PBBBSDraw builderWithPrototype:result.bbsDrawData] mergeFrom:value] buildPartial];
  } else {
    result.bbsDrawData = value;
  }
  result.hasBbsDrawData = YES;
  return self;
}
- (DataQueryResponse_Builder*) clearBbsDrawData {
  result.hasBbsDrawData = NO;
  result.bbsDrawData = [PBBBSDraw defaultInstance];
  return self;
}
- (NSArray*) bbsPrivilegeListList {
  if (result.mutableBbsPrivilegeListList == nil) { return [NSArray array]; }
  return result.mutableBbsPrivilegeListList;
}
- (PBBBSPrivilege*) bbsPrivilegeListAtIndex:(int32_t) index {
  return [result bbsPrivilegeListAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceBbsPrivilegeListAtIndex:(int32_t) index with:(PBBBSPrivilege*) value {
  [result.mutableBbsPrivilegeListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllBbsPrivilegeList:(NSArray*) values {
  if (result.mutableBbsPrivilegeListList == nil) {
    result.mutableBbsPrivilegeListList = [NSMutableArray array];
  }
  [result.mutableBbsPrivilegeListList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearBbsPrivilegeListList {
  result.mutableBbsPrivilegeListList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addBbsPrivilegeList:(PBBBSPrivilege*) value {
  if (result.mutableBbsPrivilegeListList == nil) {
    result.mutableBbsPrivilegeListList = [NSMutableArray array];
  }
  [result.mutableBbsPrivilegeListList addObject:value];
  return self;
}
- (NSArray*) bbsUserListList {
  if (result.mutableBbsUserListList == nil) { return [NSArray array]; }
  return result.mutableBbsUserListList;
}
- (PBBBSUser*) bbsUserListAtIndex:(int32_t) index {
  return [result bbsUserListAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceBbsUserListAtIndex:(int32_t) index with:(PBBBSUser*) value {
  [result.mutableBbsUserListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllBbsUserList:(NSArray*) values {
  if (result.mutableBbsUserListList == nil) {
    result.mutableBbsUserListList = [NSMutableArray array];
  }
  [result.mutableBbsUserListList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearBbsUserListList {
  result.mutableBbsUserListList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addBbsUserList:(PBBBSUser*) value {
  if (result.mutableBbsUserListList == nil) {
    result.mutableBbsUserListList = [NSMutableArray array];
  }
  [result.mutableBbsUserListList addObject:value];
  return self;
}
- (NSArray*) wallListList {
  if (result.mutableWallListList == nil) { return [NSArray array]; }
  return result.mutableWallListList;
}
- (PBWall*) wallListAtIndex:(int32_t) index {
  return [result wallListAtIndex:index];
}
- (DataQueryResponse_Builder*) replaceWallListAtIndex:(int32_t) index with:(PBWall*) value {
  [result.mutableWallListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DataQueryResponse_Builder*) addAllWallList:(NSArray*) values {
  if (result.mutableWallListList == nil) {
    result.mutableWallListList = [NSMutableArray array];
  }
  [result.mutableWallListList addObjectsFromArray:values];
  return self;
}
- (DataQueryResponse_Builder*) clearWallListList {
  result.mutableWallListList = nil;
  return self;
}
- (DataQueryResponse_Builder*) addWallList:(PBWall*) value {
  if (result.mutableWallListList == nil) {
    result.mutableWallListList = [NSMutableArray array];
  }
  [result.mutableWallListList addObject:value];
  return self;
}
- (BOOL) hasWall {
  return result.hasWall;
}
- (PBWall*) wall {
  return result.wall;
}
- (DataQueryResponse_Builder*) setWall:(PBWall*) value {
  result.hasWall = YES;
  result.wall = value;
  return self;
}
- (DataQueryResponse_Builder*) setWallBuilder:(PBWall_Builder*) builderForValue {
  return [self setWall:[builderForValue build]];
}
- (DataQueryResponse_Builder*) mergeWall:(PBWall*) value {
  if (result.hasWall &&
      result.wall != [PBWall defaultInstance]) {
    result.wall =
      [[[PBWall builderWithPrototype:result.wall] mergeFrom:value] buildPartial];
  } else {
    result.wall = value;
  }
  result.hasWall = YES;
  return self;
}
- (DataQueryResponse_Builder*) clearWall {
  result.hasWall = NO;
  result.wall = [PBWall defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (PBGameUser*) user {
  return result.user;
}
- (DataQueryResponse_Builder*) setUser:(PBGameUser*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (DataQueryResponse_Builder*) setUserBuilder:(PBGameUser_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (DataQueryResponse_Builder*) mergeUser:(PBGameUser*) value {
  if (result.hasUser &&
      result.user != [PBGameUser defaultInstance]) {
    result.user =
      [[[PBGameUser builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (DataQueryResponse_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasUserRelation {
  return result.hasUserRelation;
}
- (int32_t) userRelation {
  return result.userRelation;
}
- (DataQueryResponse_Builder*) setUserRelation:(int32_t) value {
  result.hasUserRelation = YES;
  result.userRelation = value;
  return self;
}
- (DataQueryResponse_Builder*) clearUserRelation {
  result.hasUserRelation = NO;
  result.userRelation = 0;
  return self;
}
@end

