// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Config.pb.h"
// @@protoc_insertion_point(imports)

@implementation ConfigRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ConfigRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBRewardWallTypeIsValidValue(PBRewardWallType value) {
  switch (value) {
    case PBRewardWallTypeLimei:
    case PBRewardWallTypeWanpu:
    case PBRewardWallTypeAder:
    case PBRewardWallTypeYoumi:
    case PBRewardWallTypeTapjoy:
    case PBRewardWallTypeDomod:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBRewardWallType(PBRewardWallType value) {
  switch (value) {
    case PBRewardWallTypeLimei:
      return @"PBRewardWallTypeLimei";
    case PBRewardWallTypeWanpu:
      return @"PBRewardWallTypeWanpu";
    case PBRewardWallTypeAder:
      return @"PBRewardWallTypeAder";
    case PBRewardWallTypeYoumi:
      return @"PBRewardWallTypeYoumi";
    case PBRewardWallTypeTapjoy:
      return @"PBRewardWallTypeTapjoy";
    case PBRewardWallTypeDomod:
      return @"PBRewardWallTypeDomod";
    default:
      return nil;
  }
}

@interface PBPrice ()
@property (strong) NSString* amount;
@property (strong) NSString* price;
@property (strong) NSString* productId;
@property (strong) NSString* savePercent;
@end

@implementation PBPrice

- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) _value_ {
  hasAmount_ = !!_value_;
}
@synthesize amount;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasProductId {
  return !!hasProductId_;
}
- (void) setHasProductId:(BOOL) _value_ {
  hasProductId_ = !!_value_;
}
@synthesize productId;
- (BOOL) hasSavePercent {
  return !!hasSavePercent_;
}
- (void) setHasSavePercent:(BOOL) _value_ {
  hasSavePercent_ = !!_value_;
}
@synthesize savePercent;
- (instancetype) init {
  if ((self = [super init])) {
    self.amount = @"";
    self.price = @"";
    self.productId = @"";
    self.savePercent = @"";
  }
  return self;
}
static PBPrice* defaultPBPriceInstance = nil;
+ (void) initialize {
  if (self == [PBPrice class]) {
    defaultPBPriceInstance = [[PBPrice alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBPriceInstance;
}
- (instancetype) defaultInstance {
  return defaultPBPriceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAmount) {
    return NO;
  }
  if (!self.hasPrice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAmount) {
    [output writeString:1 value:self.amount];
  }
  if (self.hasPrice) {
    [output writeString:2 value:self.price];
  }
  if (self.hasProductId) {
    [output writeString:3 value:self.productId];
  }
  if (self.hasSavePercent) {
    [output writeString:4 value:self.savePercent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAmount) {
    size_ += computeStringSize(1, self.amount);
  }
  if (self.hasPrice) {
    size_ += computeStringSize(2, self.price);
  }
  if (self.hasProductId) {
    size_ += computeStringSize(3, self.productId);
  }
  if (self.hasSavePercent) {
    size_ += computeStringSize(4, self.savePercent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBPrice*) parseFromData:(NSData*) data {
  return (PBPrice*)[[[PBPrice builder] mergeFromData:data] build];
}
+ (PBPrice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPrice*)[[[PBPrice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPrice*) parseFromInputStream:(NSInputStream*) input {
  return (PBPrice*)[[[PBPrice builder] mergeFromInputStream:input] build];
}
+ (PBPrice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPrice*)[[[PBPrice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPrice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPrice*)[[[PBPrice builder] mergeFromCodedInputStream:input] build];
}
+ (PBPrice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPrice*)[[[PBPrice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPriceBuilder*) builder {
  return [[PBPriceBuilder alloc] init];
}
+ (PBPriceBuilder*) builderWithPrototype:(PBPrice*) prototype {
  return [[PBPrice builder] mergeFrom:prototype];
}
- (PBPriceBuilder*) builder {
  return [PBPrice builder];
}
- (PBPriceBuilder*) toBuilder {
  return [PBPrice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", self.amount];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", self.price];
  }
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasSavePercent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"savePercent", self.savePercent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBPrice class]]) {
    return NO;
  }
  PBPrice *otherMessage = other;
  return
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || [self.amount isEqual:otherMessage.amount]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || [self.price isEqual:otherMessage.price]) &&
      self.hasProductId == otherMessage.hasProductId &&
      (!self.hasProductId || [self.productId isEqual:otherMessage.productId]) &&
      self.hasSavePercent == otherMessage.hasSavePercent &&
      (!self.hasSavePercent || [self.savePercent isEqual:otherMessage.savePercent]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [self.amount hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [self.price hash];
  }
  if (self.hasProductId) {
    hashCode = hashCode * 31 + [self.productId hash];
  }
  if (self.hasSavePercent) {
    hashCode = hashCode * 31 + [self.savePercent hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBPriceBuilder()
@property (strong) PBPrice* resultPbprice;
@end

@implementation PBPriceBuilder
@synthesize resultPbprice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbprice = [[PBPrice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbprice;
}
- (PBPriceBuilder*) clear {
  self.resultPbprice = [[PBPrice alloc] init];
  return self;
}
- (PBPriceBuilder*) clone {
  return [PBPrice builderWithPrototype:resultPbprice];
}
- (PBPrice*) defaultInstance {
  return [PBPrice defaultInstance];
}
- (PBPrice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPrice*) buildPartial {
  PBPrice* returnMe = resultPbprice;
  self.resultPbprice = nil;
  return returnMe;
}
- (PBPriceBuilder*) mergeFrom:(PBPrice*) other {
  if (other == [PBPrice defaultInstance]) {
    return self;
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasProductId) {
    [self setProductId:other.productId];
  }
  if (other.hasSavePercent) {
    [self setSavePercent:other.savePercent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPriceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPriceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAmount:[input readString]];
        break;
      }
      case 18: {
        [self setPrice:[input readString]];
        break;
      }
      case 26: {
        [self setProductId:[input readString]];
        break;
      }
      case 34: {
        [self setSavePercent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAmount {
  return resultPbprice.hasAmount;
}
- (NSString*) amount {
  return resultPbprice.amount;
}
- (PBPriceBuilder*) setAmount:(NSString*) value {
  resultPbprice.hasAmount = YES;
  resultPbprice.amount = value;
  return self;
}
- (PBPriceBuilder*) clearAmount {
  resultPbprice.hasAmount = NO;
  resultPbprice.amount = @"";
  return self;
}
- (BOOL) hasPrice {
  return resultPbprice.hasPrice;
}
- (NSString*) price {
  return resultPbprice.price;
}
- (PBPriceBuilder*) setPrice:(NSString*) value {
  resultPbprice.hasPrice = YES;
  resultPbprice.price = value;
  return self;
}
- (PBPriceBuilder*) clearPrice {
  resultPbprice.hasPrice = NO;
  resultPbprice.price = @"";
  return self;
}
- (BOOL) hasProductId {
  return resultPbprice.hasProductId;
}
- (NSString*) productId {
  return resultPbprice.productId;
}
- (PBPriceBuilder*) setProductId:(NSString*) value {
  resultPbprice.hasProductId = YES;
  resultPbprice.productId = value;
  return self;
}
- (PBPriceBuilder*) clearProductId {
  resultPbprice.hasProductId = NO;
  resultPbprice.productId = @"";
  return self;
}
- (BOOL) hasSavePercent {
  return resultPbprice.hasSavePercent;
}
- (NSString*) savePercent {
  return resultPbprice.savePercent;
}
- (PBPriceBuilder*) setSavePercent:(NSString*) value {
  resultPbprice.hasSavePercent = YES;
  resultPbprice.savePercent = value;
  return self;
}
- (PBPriceBuilder*) clearSavePercent {
  resultPbprice.hasSavePercent = NO;
  resultPbprice.savePercent = @"";
  return self;
}
@end

@interface PBZJHConfig ()
@property SInt32 levelExp;
@property SInt32 runwayCoin;
@property SInt32 maxAutoBetCount;
@property SInt32 treeMatureTime;
@property SInt32 treeGainTime;
@property SInt32 treeCoinValue;
@property SInt32 shareReward;
@end

@implementation PBZJHConfig

- (BOOL) hasLevelExp {
  return !!hasLevelExp_;
}
- (void) setHasLevelExp:(BOOL) _value_ {
  hasLevelExp_ = !!_value_;
}
@synthesize levelExp;
- (BOOL) hasRunwayCoin {
  return !!hasRunwayCoin_;
}
- (void) setHasRunwayCoin:(BOOL) _value_ {
  hasRunwayCoin_ = !!_value_;
}
@synthesize runwayCoin;
- (BOOL) hasMaxAutoBetCount {
  return !!hasMaxAutoBetCount_;
}
- (void) setHasMaxAutoBetCount:(BOOL) _value_ {
  hasMaxAutoBetCount_ = !!_value_;
}
@synthesize maxAutoBetCount;
- (BOOL) hasTreeMatureTime {
  return !!hasTreeMatureTime_;
}
- (void) setHasTreeMatureTime:(BOOL) _value_ {
  hasTreeMatureTime_ = !!_value_;
}
@synthesize treeMatureTime;
- (BOOL) hasTreeGainTime {
  return !!hasTreeGainTime_;
}
- (void) setHasTreeGainTime:(BOOL) _value_ {
  hasTreeGainTime_ = !!_value_;
}
@synthesize treeGainTime;
- (BOOL) hasTreeCoinValue {
  return !!hasTreeCoinValue_;
}
- (void) setHasTreeCoinValue:(BOOL) _value_ {
  hasTreeCoinValue_ = !!_value_;
}
@synthesize treeCoinValue;
- (BOOL) hasShareReward {
  return !!hasShareReward_;
}
- (void) setHasShareReward:(BOOL) _value_ {
  hasShareReward_ = !!_value_;
}
@synthesize shareReward;
- (instancetype) init {
  if ((self = [super init])) {
    self.levelExp = 5;
    self.runwayCoin = 200;
    self.maxAutoBetCount = 5;
    self.treeMatureTime = 60;
    self.treeGainTime = 60;
    self.treeCoinValue = 25;
    self.shareReward = 100;
  }
  return self;
}
static PBZJHConfig* defaultPBZJHConfigInstance = nil;
+ (void) initialize {
  if (self == [PBZJHConfig class]) {
    defaultPBZJHConfigInstance = [[PBZJHConfig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBZJHConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultPBZJHConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLevelExp) {
    [output writeInt32:1 value:self.levelExp];
  }
  if (self.hasRunwayCoin) {
    [output writeInt32:2 value:self.runwayCoin];
  }
  if (self.hasMaxAutoBetCount) {
    [output writeInt32:3 value:self.maxAutoBetCount];
  }
  if (self.hasTreeMatureTime) {
    [output writeInt32:30 value:self.treeMatureTime];
  }
  if (self.hasTreeGainTime) {
    [output writeInt32:31 value:self.treeGainTime];
  }
  if (self.hasTreeCoinValue) {
    [output writeInt32:32 value:self.treeCoinValue];
  }
  if (self.hasShareReward) {
    [output writeInt32:40 value:self.shareReward];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLevelExp) {
    size_ += computeInt32Size(1, self.levelExp);
  }
  if (self.hasRunwayCoin) {
    size_ += computeInt32Size(2, self.runwayCoin);
  }
  if (self.hasMaxAutoBetCount) {
    size_ += computeInt32Size(3, self.maxAutoBetCount);
  }
  if (self.hasTreeMatureTime) {
    size_ += computeInt32Size(30, self.treeMatureTime);
  }
  if (self.hasTreeGainTime) {
    size_ += computeInt32Size(31, self.treeGainTime);
  }
  if (self.hasTreeCoinValue) {
    size_ += computeInt32Size(32, self.treeCoinValue);
  }
  if (self.hasShareReward) {
    size_ += computeInt32Size(40, self.shareReward);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBZJHConfig*) parseFromData:(NSData*) data {
  return (PBZJHConfig*)[[[PBZJHConfig builder] mergeFromData:data] build];
}
+ (PBZJHConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHConfig*)[[[PBZJHConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHConfig*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHConfig*)[[[PBZJHConfig builder] mergeFromInputStream:input] build];
}
+ (PBZJHConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHConfig*)[[[PBZJHConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHConfig*)[[[PBZJHConfig builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHConfig*)[[[PBZJHConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHConfigBuilder*) builder {
  return [[PBZJHConfigBuilder alloc] init];
}
+ (PBZJHConfigBuilder*) builderWithPrototype:(PBZJHConfig*) prototype {
  return [[PBZJHConfig builder] mergeFrom:prototype];
}
- (PBZJHConfigBuilder*) builder {
  return [PBZJHConfig builder];
}
- (PBZJHConfigBuilder*) toBuilder {
  return [PBZJHConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLevelExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"levelExp", [NSNumber numberWithInteger:self.levelExp]];
  }
  if (self.hasRunwayCoin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"runwayCoin", [NSNumber numberWithInteger:self.runwayCoin]];
  }
  if (self.hasMaxAutoBetCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxAutoBetCount", [NSNumber numberWithInteger:self.maxAutoBetCount]];
  }
  if (self.hasTreeMatureTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"treeMatureTime", [NSNumber numberWithInteger:self.treeMatureTime]];
  }
  if (self.hasTreeGainTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"treeGainTime", [NSNumber numberWithInteger:self.treeGainTime]];
  }
  if (self.hasTreeCoinValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"treeCoinValue", [NSNumber numberWithInteger:self.treeCoinValue]];
  }
  if (self.hasShareReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareReward", [NSNumber numberWithInteger:self.shareReward]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBZJHConfig class]]) {
    return NO;
  }
  PBZJHConfig *otherMessage = other;
  return
      self.hasLevelExp == otherMessage.hasLevelExp &&
      (!self.hasLevelExp || self.levelExp == otherMessage.levelExp) &&
      self.hasRunwayCoin == otherMessage.hasRunwayCoin &&
      (!self.hasRunwayCoin || self.runwayCoin == otherMessage.runwayCoin) &&
      self.hasMaxAutoBetCount == otherMessage.hasMaxAutoBetCount &&
      (!self.hasMaxAutoBetCount || self.maxAutoBetCount == otherMessage.maxAutoBetCount) &&
      self.hasTreeMatureTime == otherMessage.hasTreeMatureTime &&
      (!self.hasTreeMatureTime || self.treeMatureTime == otherMessage.treeMatureTime) &&
      self.hasTreeGainTime == otherMessage.hasTreeGainTime &&
      (!self.hasTreeGainTime || self.treeGainTime == otherMessage.treeGainTime) &&
      self.hasTreeCoinValue == otherMessage.hasTreeCoinValue &&
      (!self.hasTreeCoinValue || self.treeCoinValue == otherMessage.treeCoinValue) &&
      self.hasShareReward == otherMessage.hasShareReward &&
      (!self.hasShareReward || self.shareReward == otherMessage.shareReward) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLevelExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.levelExp] hash];
  }
  if (self.hasRunwayCoin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.runwayCoin] hash];
  }
  if (self.hasMaxAutoBetCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxAutoBetCount] hash];
  }
  if (self.hasTreeMatureTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.treeMatureTime] hash];
  }
  if (self.hasTreeGainTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.treeGainTime] hash];
  }
  if (self.hasTreeCoinValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.treeCoinValue] hash];
  }
  if (self.hasShareReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shareReward] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBZJHConfigBuilder()
@property (strong) PBZJHConfig* resultPbzjhconfig;
@end

@implementation PBZJHConfigBuilder
@synthesize resultPbzjhconfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbzjhconfig = [[PBZJHConfig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbzjhconfig;
}
- (PBZJHConfigBuilder*) clear {
  self.resultPbzjhconfig = [[PBZJHConfig alloc] init];
  return self;
}
- (PBZJHConfigBuilder*) clone {
  return [PBZJHConfig builderWithPrototype:resultPbzjhconfig];
}
- (PBZJHConfig*) defaultInstance {
  return [PBZJHConfig defaultInstance];
}
- (PBZJHConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHConfig*) buildPartial {
  PBZJHConfig* returnMe = resultPbzjhconfig;
  self.resultPbzjhconfig = nil;
  return returnMe;
}
- (PBZJHConfigBuilder*) mergeFrom:(PBZJHConfig*) other {
  if (other == [PBZJHConfig defaultInstance]) {
    return self;
  }
  if (other.hasLevelExp) {
    [self setLevelExp:other.levelExp];
  }
  if (other.hasRunwayCoin) {
    [self setRunwayCoin:other.runwayCoin];
  }
  if (other.hasMaxAutoBetCount) {
    [self setMaxAutoBetCount:other.maxAutoBetCount];
  }
  if (other.hasTreeMatureTime) {
    [self setTreeMatureTime:other.treeMatureTime];
  }
  if (other.hasTreeGainTime) {
    [self setTreeGainTime:other.treeGainTime];
  }
  if (other.hasTreeCoinValue) {
    [self setTreeCoinValue:other.treeCoinValue];
  }
  if (other.hasShareReward) {
    [self setShareReward:other.shareReward];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLevelExp:[input readInt32]];
        break;
      }
      case 16: {
        [self setRunwayCoin:[input readInt32]];
        break;
      }
      case 24: {
        [self setMaxAutoBetCount:[input readInt32]];
        break;
      }
      case 240: {
        [self setTreeMatureTime:[input readInt32]];
        break;
      }
      case 248: {
        [self setTreeGainTime:[input readInt32]];
        break;
      }
      case 256: {
        [self setTreeCoinValue:[input readInt32]];
        break;
      }
      case 320: {
        [self setShareReward:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLevelExp {
  return resultPbzjhconfig.hasLevelExp;
}
- (SInt32) levelExp {
  return resultPbzjhconfig.levelExp;
}
- (PBZJHConfigBuilder*) setLevelExp:(SInt32) value {
  resultPbzjhconfig.hasLevelExp = YES;
  resultPbzjhconfig.levelExp = value;
  return self;
}
- (PBZJHConfigBuilder*) clearLevelExp {
  resultPbzjhconfig.hasLevelExp = NO;
  resultPbzjhconfig.levelExp = 5;
  return self;
}
- (BOOL) hasRunwayCoin {
  return resultPbzjhconfig.hasRunwayCoin;
}
- (SInt32) runwayCoin {
  return resultPbzjhconfig.runwayCoin;
}
- (PBZJHConfigBuilder*) setRunwayCoin:(SInt32) value {
  resultPbzjhconfig.hasRunwayCoin = YES;
  resultPbzjhconfig.runwayCoin = value;
  return self;
}
- (PBZJHConfigBuilder*) clearRunwayCoin {
  resultPbzjhconfig.hasRunwayCoin = NO;
  resultPbzjhconfig.runwayCoin = 200;
  return self;
}
- (BOOL) hasMaxAutoBetCount {
  return resultPbzjhconfig.hasMaxAutoBetCount;
}
- (SInt32) maxAutoBetCount {
  return resultPbzjhconfig.maxAutoBetCount;
}
- (PBZJHConfigBuilder*) setMaxAutoBetCount:(SInt32) value {
  resultPbzjhconfig.hasMaxAutoBetCount = YES;
  resultPbzjhconfig.maxAutoBetCount = value;
  return self;
}
- (PBZJHConfigBuilder*) clearMaxAutoBetCount {
  resultPbzjhconfig.hasMaxAutoBetCount = NO;
  resultPbzjhconfig.maxAutoBetCount = 5;
  return self;
}
- (BOOL) hasTreeMatureTime {
  return resultPbzjhconfig.hasTreeMatureTime;
}
- (SInt32) treeMatureTime {
  return resultPbzjhconfig.treeMatureTime;
}
- (PBZJHConfigBuilder*) setTreeMatureTime:(SInt32) value {
  resultPbzjhconfig.hasTreeMatureTime = YES;
  resultPbzjhconfig.treeMatureTime = value;
  return self;
}
- (PBZJHConfigBuilder*) clearTreeMatureTime {
  resultPbzjhconfig.hasTreeMatureTime = NO;
  resultPbzjhconfig.treeMatureTime = 60;
  return self;
}
- (BOOL) hasTreeGainTime {
  return resultPbzjhconfig.hasTreeGainTime;
}
- (SInt32) treeGainTime {
  return resultPbzjhconfig.treeGainTime;
}
- (PBZJHConfigBuilder*) setTreeGainTime:(SInt32) value {
  resultPbzjhconfig.hasTreeGainTime = YES;
  resultPbzjhconfig.treeGainTime = value;
  return self;
}
- (PBZJHConfigBuilder*) clearTreeGainTime {
  resultPbzjhconfig.hasTreeGainTime = NO;
  resultPbzjhconfig.treeGainTime = 60;
  return self;
}
- (BOOL) hasTreeCoinValue {
  return resultPbzjhconfig.hasTreeCoinValue;
}
- (SInt32) treeCoinValue {
  return resultPbzjhconfig.treeCoinValue;
}
- (PBZJHConfigBuilder*) setTreeCoinValue:(SInt32) value {
  resultPbzjhconfig.hasTreeCoinValue = YES;
  resultPbzjhconfig.treeCoinValue = value;
  return self;
}
- (PBZJHConfigBuilder*) clearTreeCoinValue {
  resultPbzjhconfig.hasTreeCoinValue = NO;
  resultPbzjhconfig.treeCoinValue = 25;
  return self;
}
- (BOOL) hasShareReward {
  return resultPbzjhconfig.hasShareReward;
}
- (SInt32) shareReward {
  return resultPbzjhconfig.shareReward;
}
- (PBZJHConfigBuilder*) setShareReward:(SInt32) value {
  resultPbzjhconfig.hasShareReward = YES;
  resultPbzjhconfig.shareReward = value;
  return self;
}
- (PBZJHConfigBuilder*) clearShareReward {
  resultPbzjhconfig.hasShareReward = NO;
  resultPbzjhconfig.shareReward = 100;
  return self;
}
@end

@interface PBDiceConfig ()
@property SInt32 shareReward;
@property SInt32 followReward;
@property SInt32 levelExp;
@property SInt32 levelUpRewardCut;
@property SInt32 runwayCoin;
@property SInt32 normalRoomThreshhold;
@property SInt32 highRoomThreshhold;
@property SInt32 superHighRoomThreshhold;
@property SInt32 betAnteNormalRoom;
@property SInt32 betAnteHighRoom;
@property SInt32 betAnteSuperHighRoom;
@property SInt32 dailyGift;
@property SInt32 dailyGiftIncreament;
@end

@implementation PBDiceConfig

- (BOOL) hasShareReward {
  return !!hasShareReward_;
}
- (void) setHasShareReward:(BOOL) _value_ {
  hasShareReward_ = !!_value_;
}
@synthesize shareReward;
- (BOOL) hasFollowReward {
  return !!hasFollowReward_;
}
- (void) setHasFollowReward:(BOOL) _value_ {
  hasFollowReward_ = !!_value_;
}
@synthesize followReward;
- (BOOL) hasLevelExp {
  return !!hasLevelExp_;
}
- (void) setHasLevelExp:(BOOL) _value_ {
  hasLevelExp_ = !!_value_;
}
@synthesize levelExp;
- (BOOL) hasLevelUpRewardCut {
  return !!hasLevelUpRewardCut_;
}
- (void) setHasLevelUpRewardCut:(BOOL) _value_ {
  hasLevelUpRewardCut_ = !!_value_;
}
@synthesize levelUpRewardCut;
- (BOOL) hasRunwayCoin {
  return !!hasRunwayCoin_;
}
- (void) setHasRunwayCoin:(BOOL) _value_ {
  hasRunwayCoin_ = !!_value_;
}
@synthesize runwayCoin;
- (BOOL) hasNormalRoomThreshhold {
  return !!hasNormalRoomThreshhold_;
}
- (void) setHasNormalRoomThreshhold:(BOOL) _value_ {
  hasNormalRoomThreshhold_ = !!_value_;
}
@synthesize normalRoomThreshhold;
- (BOOL) hasHighRoomThreshhold {
  return !!hasHighRoomThreshhold_;
}
- (void) setHasHighRoomThreshhold:(BOOL) _value_ {
  hasHighRoomThreshhold_ = !!_value_;
}
@synthesize highRoomThreshhold;
- (BOOL) hasSuperHighRoomThreshhold {
  return !!hasSuperHighRoomThreshhold_;
}
- (void) setHasSuperHighRoomThreshhold:(BOOL) _value_ {
  hasSuperHighRoomThreshhold_ = !!_value_;
}
@synthesize superHighRoomThreshhold;
- (BOOL) hasBetAnteNormalRoom {
  return !!hasBetAnteNormalRoom_;
}
- (void) setHasBetAnteNormalRoom:(BOOL) _value_ {
  hasBetAnteNormalRoom_ = !!_value_;
}
@synthesize betAnteNormalRoom;
- (BOOL) hasBetAnteHighRoom {
  return !!hasBetAnteHighRoom_;
}
- (void) setHasBetAnteHighRoom:(BOOL) _value_ {
  hasBetAnteHighRoom_ = !!_value_;
}
@synthesize betAnteHighRoom;
- (BOOL) hasBetAnteSuperHighRoom {
  return !!hasBetAnteSuperHighRoom_;
}
- (void) setHasBetAnteSuperHighRoom:(BOOL) _value_ {
  hasBetAnteSuperHighRoom_ = !!_value_;
}
@synthesize betAnteSuperHighRoom;
- (BOOL) hasDailyGift {
  return !!hasDailyGift_;
}
- (void) setHasDailyGift:(BOOL) _value_ {
  hasDailyGift_ = !!_value_;
}
@synthesize dailyGift;
- (BOOL) hasDailyGiftIncreament {
  return !!hasDailyGiftIncreament_;
}
- (void) setHasDailyGiftIncreament:(BOOL) _value_ {
  hasDailyGiftIncreament_ = !!_value_;
}
@synthesize dailyGiftIncreament;
- (instancetype) init {
  if ((self = [super init])) {
    self.shareReward = 100;
    self.followReward = 1000;
    self.levelExp = 5;
    self.levelUpRewardCut = 2;
    self.runwayCoin = 200;
    self.normalRoomThreshhold = 200;
    self.highRoomThreshhold = 2000;
    self.superHighRoomThreshhold = 10000;
    self.betAnteNormalRoom = 50;
    self.betAnteHighRoom = 100;
    self.betAnteSuperHighRoom = 200;
    self.dailyGift = 70;
    self.dailyGiftIncreament = 12;
  }
  return self;
}
static PBDiceConfig* defaultPBDiceConfigInstance = nil;
+ (void) initialize {
  if (self == [PBDiceConfig class]) {
    defaultPBDiceConfigInstance = [[PBDiceConfig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDiceConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDiceConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasShareReward) {
    [output writeInt32:1 value:self.shareReward];
  }
  if (self.hasFollowReward) {
    [output writeInt32:2 value:self.followReward];
  }
  if (self.hasLevelExp) {
    [output writeInt32:10 value:self.levelExp];
  }
  if (self.hasLevelUpRewardCut) {
    [output writeInt32:11 value:self.levelUpRewardCut];
  }
  if (self.hasRunwayCoin) {
    [output writeInt32:21 value:self.runwayCoin];
  }
  if (self.hasNormalRoomThreshhold) {
    [output writeInt32:31 value:self.normalRoomThreshhold];
  }
  if (self.hasHighRoomThreshhold) {
    [output writeInt32:32 value:self.highRoomThreshhold];
  }
  if (self.hasSuperHighRoomThreshhold) {
    [output writeInt32:33 value:self.superHighRoomThreshhold];
  }
  if (self.hasBetAnteNormalRoom) {
    [output writeInt32:41 value:self.betAnteNormalRoom];
  }
  if (self.hasBetAnteHighRoom) {
    [output writeInt32:42 value:self.betAnteHighRoom];
  }
  if (self.hasBetAnteSuperHighRoom) {
    [output writeInt32:43 value:self.betAnteSuperHighRoom];
  }
  if (self.hasDailyGift) {
    [output writeInt32:51 value:self.dailyGift];
  }
  if (self.hasDailyGiftIncreament) {
    [output writeInt32:52 value:self.dailyGiftIncreament];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasShareReward) {
    size_ += computeInt32Size(1, self.shareReward);
  }
  if (self.hasFollowReward) {
    size_ += computeInt32Size(2, self.followReward);
  }
  if (self.hasLevelExp) {
    size_ += computeInt32Size(10, self.levelExp);
  }
  if (self.hasLevelUpRewardCut) {
    size_ += computeInt32Size(11, self.levelUpRewardCut);
  }
  if (self.hasRunwayCoin) {
    size_ += computeInt32Size(21, self.runwayCoin);
  }
  if (self.hasNormalRoomThreshhold) {
    size_ += computeInt32Size(31, self.normalRoomThreshhold);
  }
  if (self.hasHighRoomThreshhold) {
    size_ += computeInt32Size(32, self.highRoomThreshhold);
  }
  if (self.hasSuperHighRoomThreshhold) {
    size_ += computeInt32Size(33, self.superHighRoomThreshhold);
  }
  if (self.hasBetAnteNormalRoom) {
    size_ += computeInt32Size(41, self.betAnteNormalRoom);
  }
  if (self.hasBetAnteHighRoom) {
    size_ += computeInt32Size(42, self.betAnteHighRoom);
  }
  if (self.hasBetAnteSuperHighRoom) {
    size_ += computeInt32Size(43, self.betAnteSuperHighRoom);
  }
  if (self.hasDailyGift) {
    size_ += computeInt32Size(51, self.dailyGift);
  }
  if (self.hasDailyGiftIncreament) {
    size_ += computeInt32Size(52, self.dailyGiftIncreament);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDiceConfig*) parseFromData:(NSData*) data {
  return (PBDiceConfig*)[[[PBDiceConfig builder] mergeFromData:data] build];
}
+ (PBDiceConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceConfig*)[[[PBDiceConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDiceConfig*) parseFromInputStream:(NSInputStream*) input {
  return (PBDiceConfig*)[[[PBDiceConfig builder] mergeFromInputStream:input] build];
}
+ (PBDiceConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceConfig*)[[[PBDiceConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDiceConfig*)[[[PBDiceConfig builder] mergeFromCodedInputStream:input] build];
}
+ (PBDiceConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceConfig*)[[[PBDiceConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceConfigBuilder*) builder {
  return [[PBDiceConfigBuilder alloc] init];
}
+ (PBDiceConfigBuilder*) builderWithPrototype:(PBDiceConfig*) prototype {
  return [[PBDiceConfig builder] mergeFrom:prototype];
}
- (PBDiceConfigBuilder*) builder {
  return [PBDiceConfig builder];
}
- (PBDiceConfigBuilder*) toBuilder {
  return [PBDiceConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasShareReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareReward", [NSNumber numberWithInteger:self.shareReward]];
  }
  if (self.hasFollowReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"followReward", [NSNumber numberWithInteger:self.followReward]];
  }
  if (self.hasLevelExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"levelExp", [NSNumber numberWithInteger:self.levelExp]];
  }
  if (self.hasLevelUpRewardCut) {
    [output appendFormat:@"%@%@: %@\n", indent, @"levelUpRewardCut", [NSNumber numberWithInteger:self.levelUpRewardCut]];
  }
  if (self.hasRunwayCoin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"runwayCoin", [NSNumber numberWithInteger:self.runwayCoin]];
  }
  if (self.hasNormalRoomThreshhold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"normalRoomThreshhold", [NSNumber numberWithInteger:self.normalRoomThreshhold]];
  }
  if (self.hasHighRoomThreshhold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"highRoomThreshhold", [NSNumber numberWithInteger:self.highRoomThreshhold]];
  }
  if (self.hasSuperHighRoomThreshhold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"superHighRoomThreshhold", [NSNumber numberWithInteger:self.superHighRoomThreshhold]];
  }
  if (self.hasBetAnteNormalRoom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"betAnteNormalRoom", [NSNumber numberWithInteger:self.betAnteNormalRoom]];
  }
  if (self.hasBetAnteHighRoom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"betAnteHighRoom", [NSNumber numberWithInteger:self.betAnteHighRoom]];
  }
  if (self.hasBetAnteSuperHighRoom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"betAnteSuperHighRoom", [NSNumber numberWithInteger:self.betAnteSuperHighRoom]];
  }
  if (self.hasDailyGift) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dailyGift", [NSNumber numberWithInteger:self.dailyGift]];
  }
  if (self.hasDailyGiftIncreament) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dailyGiftIncreament", [NSNumber numberWithInteger:self.dailyGiftIncreament]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDiceConfig class]]) {
    return NO;
  }
  PBDiceConfig *otherMessage = other;
  return
      self.hasShareReward == otherMessage.hasShareReward &&
      (!self.hasShareReward || self.shareReward == otherMessage.shareReward) &&
      self.hasFollowReward == otherMessage.hasFollowReward &&
      (!self.hasFollowReward || self.followReward == otherMessage.followReward) &&
      self.hasLevelExp == otherMessage.hasLevelExp &&
      (!self.hasLevelExp || self.levelExp == otherMessage.levelExp) &&
      self.hasLevelUpRewardCut == otherMessage.hasLevelUpRewardCut &&
      (!self.hasLevelUpRewardCut || self.levelUpRewardCut == otherMessage.levelUpRewardCut) &&
      self.hasRunwayCoin == otherMessage.hasRunwayCoin &&
      (!self.hasRunwayCoin || self.runwayCoin == otherMessage.runwayCoin) &&
      self.hasNormalRoomThreshhold == otherMessage.hasNormalRoomThreshhold &&
      (!self.hasNormalRoomThreshhold || self.normalRoomThreshhold == otherMessage.normalRoomThreshhold) &&
      self.hasHighRoomThreshhold == otherMessage.hasHighRoomThreshhold &&
      (!self.hasHighRoomThreshhold || self.highRoomThreshhold == otherMessage.highRoomThreshhold) &&
      self.hasSuperHighRoomThreshhold == otherMessage.hasSuperHighRoomThreshhold &&
      (!self.hasSuperHighRoomThreshhold || self.superHighRoomThreshhold == otherMessage.superHighRoomThreshhold) &&
      self.hasBetAnteNormalRoom == otherMessage.hasBetAnteNormalRoom &&
      (!self.hasBetAnteNormalRoom || self.betAnteNormalRoom == otherMessage.betAnteNormalRoom) &&
      self.hasBetAnteHighRoom == otherMessage.hasBetAnteHighRoom &&
      (!self.hasBetAnteHighRoom || self.betAnteHighRoom == otherMessage.betAnteHighRoom) &&
      self.hasBetAnteSuperHighRoom == otherMessage.hasBetAnteSuperHighRoom &&
      (!self.hasBetAnteSuperHighRoom || self.betAnteSuperHighRoom == otherMessage.betAnteSuperHighRoom) &&
      self.hasDailyGift == otherMessage.hasDailyGift &&
      (!self.hasDailyGift || self.dailyGift == otherMessage.dailyGift) &&
      self.hasDailyGiftIncreament == otherMessage.hasDailyGiftIncreament &&
      (!self.hasDailyGiftIncreament || self.dailyGiftIncreament == otherMessage.dailyGiftIncreament) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasShareReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shareReward] hash];
  }
  if (self.hasFollowReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.followReward] hash];
  }
  if (self.hasLevelExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.levelExp] hash];
  }
  if (self.hasLevelUpRewardCut) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.levelUpRewardCut] hash];
  }
  if (self.hasRunwayCoin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.runwayCoin] hash];
  }
  if (self.hasNormalRoomThreshhold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.normalRoomThreshhold] hash];
  }
  if (self.hasHighRoomThreshhold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.highRoomThreshhold] hash];
  }
  if (self.hasSuperHighRoomThreshhold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.superHighRoomThreshhold] hash];
  }
  if (self.hasBetAnteNormalRoom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.betAnteNormalRoom] hash];
  }
  if (self.hasBetAnteHighRoom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.betAnteHighRoom] hash];
  }
  if (self.hasBetAnteSuperHighRoom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.betAnteSuperHighRoom] hash];
  }
  if (self.hasDailyGift) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dailyGift] hash];
  }
  if (self.hasDailyGiftIncreament) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dailyGiftIncreament] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDiceConfigBuilder()
@property (strong) PBDiceConfig* resultPbdiceConfig;
@end

@implementation PBDiceConfigBuilder
@synthesize resultPbdiceConfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdiceConfig = [[PBDiceConfig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdiceConfig;
}
- (PBDiceConfigBuilder*) clear {
  self.resultPbdiceConfig = [[PBDiceConfig alloc] init];
  return self;
}
- (PBDiceConfigBuilder*) clone {
  return [PBDiceConfig builderWithPrototype:resultPbdiceConfig];
}
- (PBDiceConfig*) defaultInstance {
  return [PBDiceConfig defaultInstance];
}
- (PBDiceConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDiceConfig*) buildPartial {
  PBDiceConfig* returnMe = resultPbdiceConfig;
  self.resultPbdiceConfig = nil;
  return returnMe;
}
- (PBDiceConfigBuilder*) mergeFrom:(PBDiceConfig*) other {
  if (other == [PBDiceConfig defaultInstance]) {
    return self;
  }
  if (other.hasShareReward) {
    [self setShareReward:other.shareReward];
  }
  if (other.hasFollowReward) {
    [self setFollowReward:other.followReward];
  }
  if (other.hasLevelExp) {
    [self setLevelExp:other.levelExp];
  }
  if (other.hasLevelUpRewardCut) {
    [self setLevelUpRewardCut:other.levelUpRewardCut];
  }
  if (other.hasRunwayCoin) {
    [self setRunwayCoin:other.runwayCoin];
  }
  if (other.hasNormalRoomThreshhold) {
    [self setNormalRoomThreshhold:other.normalRoomThreshhold];
  }
  if (other.hasHighRoomThreshhold) {
    [self setHighRoomThreshhold:other.highRoomThreshhold];
  }
  if (other.hasSuperHighRoomThreshhold) {
    [self setSuperHighRoomThreshhold:other.superHighRoomThreshhold];
  }
  if (other.hasBetAnteNormalRoom) {
    [self setBetAnteNormalRoom:other.betAnteNormalRoom];
  }
  if (other.hasBetAnteHighRoom) {
    [self setBetAnteHighRoom:other.betAnteHighRoom];
  }
  if (other.hasBetAnteSuperHighRoom) {
    [self setBetAnteSuperHighRoom:other.betAnteSuperHighRoom];
  }
  if (other.hasDailyGift) {
    [self setDailyGift:other.dailyGift];
  }
  if (other.hasDailyGiftIncreament) {
    [self setDailyGiftIncreament:other.dailyGiftIncreament];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setShareReward:[input readInt32]];
        break;
      }
      case 16: {
        [self setFollowReward:[input readInt32]];
        break;
      }
      case 80: {
        [self setLevelExp:[input readInt32]];
        break;
      }
      case 88: {
        [self setLevelUpRewardCut:[input readInt32]];
        break;
      }
      case 168: {
        [self setRunwayCoin:[input readInt32]];
        break;
      }
      case 248: {
        [self setNormalRoomThreshhold:[input readInt32]];
        break;
      }
      case 256: {
        [self setHighRoomThreshhold:[input readInt32]];
        break;
      }
      case 264: {
        [self setSuperHighRoomThreshhold:[input readInt32]];
        break;
      }
      case 328: {
        [self setBetAnteNormalRoom:[input readInt32]];
        break;
      }
      case 336: {
        [self setBetAnteHighRoom:[input readInt32]];
        break;
      }
      case 344: {
        [self setBetAnteSuperHighRoom:[input readInt32]];
        break;
      }
      case 408: {
        [self setDailyGift:[input readInt32]];
        break;
      }
      case 416: {
        [self setDailyGiftIncreament:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasShareReward {
  return resultPbdiceConfig.hasShareReward;
}
- (SInt32) shareReward {
  return resultPbdiceConfig.shareReward;
}
- (PBDiceConfigBuilder*) setShareReward:(SInt32) value {
  resultPbdiceConfig.hasShareReward = YES;
  resultPbdiceConfig.shareReward = value;
  return self;
}
- (PBDiceConfigBuilder*) clearShareReward {
  resultPbdiceConfig.hasShareReward = NO;
  resultPbdiceConfig.shareReward = 100;
  return self;
}
- (BOOL) hasFollowReward {
  return resultPbdiceConfig.hasFollowReward;
}
- (SInt32) followReward {
  return resultPbdiceConfig.followReward;
}
- (PBDiceConfigBuilder*) setFollowReward:(SInt32) value {
  resultPbdiceConfig.hasFollowReward = YES;
  resultPbdiceConfig.followReward = value;
  return self;
}
- (PBDiceConfigBuilder*) clearFollowReward {
  resultPbdiceConfig.hasFollowReward = NO;
  resultPbdiceConfig.followReward = 1000;
  return self;
}
- (BOOL) hasLevelExp {
  return resultPbdiceConfig.hasLevelExp;
}
- (SInt32) levelExp {
  return resultPbdiceConfig.levelExp;
}
- (PBDiceConfigBuilder*) setLevelExp:(SInt32) value {
  resultPbdiceConfig.hasLevelExp = YES;
  resultPbdiceConfig.levelExp = value;
  return self;
}
- (PBDiceConfigBuilder*) clearLevelExp {
  resultPbdiceConfig.hasLevelExp = NO;
  resultPbdiceConfig.levelExp = 5;
  return self;
}
- (BOOL) hasLevelUpRewardCut {
  return resultPbdiceConfig.hasLevelUpRewardCut;
}
- (SInt32) levelUpRewardCut {
  return resultPbdiceConfig.levelUpRewardCut;
}
- (PBDiceConfigBuilder*) setLevelUpRewardCut:(SInt32) value {
  resultPbdiceConfig.hasLevelUpRewardCut = YES;
  resultPbdiceConfig.levelUpRewardCut = value;
  return self;
}
- (PBDiceConfigBuilder*) clearLevelUpRewardCut {
  resultPbdiceConfig.hasLevelUpRewardCut = NO;
  resultPbdiceConfig.levelUpRewardCut = 2;
  return self;
}
- (BOOL) hasRunwayCoin {
  return resultPbdiceConfig.hasRunwayCoin;
}
- (SInt32) runwayCoin {
  return resultPbdiceConfig.runwayCoin;
}
- (PBDiceConfigBuilder*) setRunwayCoin:(SInt32) value {
  resultPbdiceConfig.hasRunwayCoin = YES;
  resultPbdiceConfig.runwayCoin = value;
  return self;
}
- (PBDiceConfigBuilder*) clearRunwayCoin {
  resultPbdiceConfig.hasRunwayCoin = NO;
  resultPbdiceConfig.runwayCoin = 200;
  return self;
}
- (BOOL) hasNormalRoomThreshhold {
  return resultPbdiceConfig.hasNormalRoomThreshhold;
}
- (SInt32) normalRoomThreshhold {
  return resultPbdiceConfig.normalRoomThreshhold;
}
- (PBDiceConfigBuilder*) setNormalRoomThreshhold:(SInt32) value {
  resultPbdiceConfig.hasNormalRoomThreshhold = YES;
  resultPbdiceConfig.normalRoomThreshhold = value;
  return self;
}
- (PBDiceConfigBuilder*) clearNormalRoomThreshhold {
  resultPbdiceConfig.hasNormalRoomThreshhold = NO;
  resultPbdiceConfig.normalRoomThreshhold = 200;
  return self;
}
- (BOOL) hasHighRoomThreshhold {
  return resultPbdiceConfig.hasHighRoomThreshhold;
}
- (SInt32) highRoomThreshhold {
  return resultPbdiceConfig.highRoomThreshhold;
}
- (PBDiceConfigBuilder*) setHighRoomThreshhold:(SInt32) value {
  resultPbdiceConfig.hasHighRoomThreshhold = YES;
  resultPbdiceConfig.highRoomThreshhold = value;
  return self;
}
- (PBDiceConfigBuilder*) clearHighRoomThreshhold {
  resultPbdiceConfig.hasHighRoomThreshhold = NO;
  resultPbdiceConfig.highRoomThreshhold = 2000;
  return self;
}
- (BOOL) hasSuperHighRoomThreshhold {
  return resultPbdiceConfig.hasSuperHighRoomThreshhold;
}
- (SInt32) superHighRoomThreshhold {
  return resultPbdiceConfig.superHighRoomThreshhold;
}
- (PBDiceConfigBuilder*) setSuperHighRoomThreshhold:(SInt32) value {
  resultPbdiceConfig.hasSuperHighRoomThreshhold = YES;
  resultPbdiceConfig.superHighRoomThreshhold = value;
  return self;
}
- (PBDiceConfigBuilder*) clearSuperHighRoomThreshhold {
  resultPbdiceConfig.hasSuperHighRoomThreshhold = NO;
  resultPbdiceConfig.superHighRoomThreshhold = 10000;
  return self;
}
- (BOOL) hasBetAnteNormalRoom {
  return resultPbdiceConfig.hasBetAnteNormalRoom;
}
- (SInt32) betAnteNormalRoom {
  return resultPbdiceConfig.betAnteNormalRoom;
}
- (PBDiceConfigBuilder*) setBetAnteNormalRoom:(SInt32) value {
  resultPbdiceConfig.hasBetAnteNormalRoom = YES;
  resultPbdiceConfig.betAnteNormalRoom = value;
  return self;
}
- (PBDiceConfigBuilder*) clearBetAnteNormalRoom {
  resultPbdiceConfig.hasBetAnteNormalRoom = NO;
  resultPbdiceConfig.betAnteNormalRoom = 50;
  return self;
}
- (BOOL) hasBetAnteHighRoom {
  return resultPbdiceConfig.hasBetAnteHighRoom;
}
- (SInt32) betAnteHighRoom {
  return resultPbdiceConfig.betAnteHighRoom;
}
- (PBDiceConfigBuilder*) setBetAnteHighRoom:(SInt32) value {
  resultPbdiceConfig.hasBetAnteHighRoom = YES;
  resultPbdiceConfig.betAnteHighRoom = value;
  return self;
}
- (PBDiceConfigBuilder*) clearBetAnteHighRoom {
  resultPbdiceConfig.hasBetAnteHighRoom = NO;
  resultPbdiceConfig.betAnteHighRoom = 100;
  return self;
}
- (BOOL) hasBetAnteSuperHighRoom {
  return resultPbdiceConfig.hasBetAnteSuperHighRoom;
}
- (SInt32) betAnteSuperHighRoom {
  return resultPbdiceConfig.betAnteSuperHighRoom;
}
- (PBDiceConfigBuilder*) setBetAnteSuperHighRoom:(SInt32) value {
  resultPbdiceConfig.hasBetAnteSuperHighRoom = YES;
  resultPbdiceConfig.betAnteSuperHighRoom = value;
  return self;
}
- (PBDiceConfigBuilder*) clearBetAnteSuperHighRoom {
  resultPbdiceConfig.hasBetAnteSuperHighRoom = NO;
  resultPbdiceConfig.betAnteSuperHighRoom = 200;
  return self;
}
- (BOOL) hasDailyGift {
  return resultPbdiceConfig.hasDailyGift;
}
- (SInt32) dailyGift {
  return resultPbdiceConfig.dailyGift;
}
- (PBDiceConfigBuilder*) setDailyGift:(SInt32) value {
  resultPbdiceConfig.hasDailyGift = YES;
  resultPbdiceConfig.dailyGift = value;
  return self;
}
- (PBDiceConfigBuilder*) clearDailyGift {
  resultPbdiceConfig.hasDailyGift = NO;
  resultPbdiceConfig.dailyGift = 70;
  return self;
}
- (BOOL) hasDailyGiftIncreament {
  return resultPbdiceConfig.hasDailyGiftIncreament;
}
- (SInt32) dailyGiftIncreament {
  return resultPbdiceConfig.dailyGiftIncreament;
}
- (PBDiceConfigBuilder*) setDailyGiftIncreament:(SInt32) value {
  resultPbdiceConfig.hasDailyGiftIncreament = YES;
  resultPbdiceConfig.dailyGiftIncreament = value;
  return self;
}
- (PBDiceConfigBuilder*) clearDailyGiftIncreament {
  resultPbdiceConfig.hasDailyGiftIncreament = NO;
  resultPbdiceConfig.dailyGiftIncreament = 12;
  return self;
}
@end

@interface PBDrawConfig ()
@property (strong) NSString* defaultOnlineEnServerAddress;
@property SInt32 defaultOnlineEnServerPort;
@property (strong) NSString* defaultOnlineCnServerAddress;
@property SInt32 defaultOnlineCnServerPort;
@property SInt32 guessReward;
@property SInt32 tomatoReward;
@property SInt32 tomatoExp;
@property SInt32 flowerReward;
@property SInt32 flowerExp;
@property SInt32 shareReward;
@property SInt32 followReward;
@property SInt32 levelUpFlower;
@property SInt32 onlineDrawExp;
@property SInt32 onlineGuessExp;
@property SInt32 offlineDrawExp;
@property SInt32 offlineGuessExp;
@property SInt32 maxItemTimesOnNormalOpus;
@property SInt32 maxItemTimesOnContestOpus;
@end

@implementation PBDrawConfig

- (BOOL) hasDefaultOnlineEnServerAddress {
  return !!hasDefaultOnlineEnServerAddress_;
}
- (void) setHasDefaultOnlineEnServerAddress:(BOOL) _value_ {
  hasDefaultOnlineEnServerAddress_ = !!_value_;
}
@synthesize defaultOnlineEnServerAddress;
- (BOOL) hasDefaultOnlineEnServerPort {
  return !!hasDefaultOnlineEnServerPort_;
}
- (void) setHasDefaultOnlineEnServerPort:(BOOL) _value_ {
  hasDefaultOnlineEnServerPort_ = !!_value_;
}
@synthesize defaultOnlineEnServerPort;
- (BOOL) hasDefaultOnlineCnServerAddress {
  return !!hasDefaultOnlineCnServerAddress_;
}
- (void) setHasDefaultOnlineCnServerAddress:(BOOL) _value_ {
  hasDefaultOnlineCnServerAddress_ = !!_value_;
}
@synthesize defaultOnlineCnServerAddress;
- (BOOL) hasDefaultOnlineCnServerPort {
  return !!hasDefaultOnlineCnServerPort_;
}
- (void) setHasDefaultOnlineCnServerPort:(BOOL) _value_ {
  hasDefaultOnlineCnServerPort_ = !!_value_;
}
@synthesize defaultOnlineCnServerPort;
- (BOOL) hasGuessReward {
  return !!hasGuessReward_;
}
- (void) setHasGuessReward:(BOOL) _value_ {
  hasGuessReward_ = !!_value_;
}
@synthesize guessReward;
- (BOOL) hasTomatoReward {
  return !!hasTomatoReward_;
}
- (void) setHasTomatoReward:(BOOL) _value_ {
  hasTomatoReward_ = !!_value_;
}
@synthesize tomatoReward;
- (BOOL) hasTomatoExp {
  return !!hasTomatoExp_;
}
- (void) setHasTomatoExp:(BOOL) _value_ {
  hasTomatoExp_ = !!_value_;
}
@synthesize tomatoExp;
- (BOOL) hasFlowerReward {
  return !!hasFlowerReward_;
}
- (void) setHasFlowerReward:(BOOL) _value_ {
  hasFlowerReward_ = !!_value_;
}
@synthesize flowerReward;
- (BOOL) hasFlowerExp {
  return !!hasFlowerExp_;
}
- (void) setHasFlowerExp:(BOOL) _value_ {
  hasFlowerExp_ = !!_value_;
}
@synthesize flowerExp;
- (BOOL) hasShareReward {
  return !!hasShareReward_;
}
- (void) setHasShareReward:(BOOL) _value_ {
  hasShareReward_ = !!_value_;
}
@synthesize shareReward;
- (BOOL) hasFollowReward {
  return !!hasFollowReward_;
}
- (void) setHasFollowReward:(BOOL) _value_ {
  hasFollowReward_ = !!_value_;
}
@synthesize followReward;
- (BOOL) hasLevelUpFlower {
  return !!hasLevelUpFlower_;
}
- (void) setHasLevelUpFlower:(BOOL) _value_ {
  hasLevelUpFlower_ = !!_value_;
}
@synthesize levelUpFlower;
- (BOOL) hasOnlineDrawExp {
  return !!hasOnlineDrawExp_;
}
- (void) setHasOnlineDrawExp:(BOOL) _value_ {
  hasOnlineDrawExp_ = !!_value_;
}
@synthesize onlineDrawExp;
- (BOOL) hasOnlineGuessExp {
  return !!hasOnlineGuessExp_;
}
- (void) setHasOnlineGuessExp:(BOOL) _value_ {
  hasOnlineGuessExp_ = !!_value_;
}
@synthesize onlineGuessExp;
- (BOOL) hasOfflineDrawExp {
  return !!hasOfflineDrawExp_;
}
- (void) setHasOfflineDrawExp:(BOOL) _value_ {
  hasOfflineDrawExp_ = !!_value_;
}
@synthesize offlineDrawExp;
- (BOOL) hasOfflineGuessExp {
  return !!hasOfflineGuessExp_;
}
- (void) setHasOfflineGuessExp:(BOOL) _value_ {
  hasOfflineGuessExp_ = !!_value_;
}
@synthesize offlineGuessExp;
- (BOOL) hasMaxItemTimesOnNormalOpus {
  return !!hasMaxItemTimesOnNormalOpus_;
}
- (void) setHasMaxItemTimesOnNormalOpus:(BOOL) _value_ {
  hasMaxItemTimesOnNormalOpus_ = !!_value_;
}
@synthesize maxItemTimesOnNormalOpus;
- (BOOL) hasMaxItemTimesOnContestOpus {
  return !!hasMaxItemTimesOnContestOpus_;
}
- (void) setHasMaxItemTimesOnContestOpus:(BOOL) _value_ {
  hasMaxItemTimesOnContestOpus_ = !!_value_;
}
@synthesize maxItemTimesOnContestOpus;
- (instancetype) init {
  if ((self = [super init])) {
    self.defaultOnlineEnServerAddress = @"106.187.89.232";
    self.defaultOnlineEnServerPort = 9000;
    self.defaultOnlineCnServerAddress = @"www.place100.com";
    self.defaultOnlineCnServerPort = 9000;
    self.guessReward = 3;
    self.tomatoReward = -3;
    self.tomatoExp = -5;
    self.flowerReward = 3;
    self.flowerExp = 5;
    self.shareReward = 10;
    self.followReward = 1000;
    self.levelUpFlower = 2;
    self.onlineDrawExp = 15;
    self.onlineGuessExp = 10;
    self.offlineDrawExp = 15;
    self.offlineGuessExp = 2;
    self.maxItemTimesOnNormalOpus = 10;
    self.maxItemTimesOnContestOpus = 3;
  }
  return self;
}
static PBDrawConfig* defaultPBDrawConfigInstance = nil;
+ (void) initialize {
  if (self == [PBDrawConfig class]) {
    defaultPBDrawConfigInstance = [[PBDrawConfig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDefaultOnlineEnServerAddress) {
    [output writeString:1 value:self.defaultOnlineEnServerAddress];
  }
  if (self.hasDefaultOnlineEnServerPort) {
    [output writeInt32:2 value:self.defaultOnlineEnServerPort];
  }
  if (self.hasDefaultOnlineCnServerAddress) {
    [output writeString:3 value:self.defaultOnlineCnServerAddress];
  }
  if (self.hasDefaultOnlineCnServerPort) {
    [output writeInt32:4 value:self.defaultOnlineCnServerPort];
  }
  if (self.hasGuessReward) {
    [output writeInt32:10 value:self.guessReward];
  }
  if (self.hasTomatoReward) {
    [output writeInt32:11 value:self.tomatoReward];
  }
  if (self.hasTomatoExp) {
    [output writeInt32:12 value:self.tomatoExp];
  }
  if (self.hasFlowerReward) {
    [output writeInt32:13 value:self.flowerReward];
  }
  if (self.hasFlowerExp) {
    [output writeInt32:14 value:self.flowerExp];
  }
  if (self.hasShareReward) {
    [output writeInt32:15 value:self.shareReward];
  }
  if (self.hasFollowReward) {
    [output writeInt32:16 value:self.followReward];
  }
  if (self.hasLevelUpFlower) {
    [output writeInt32:21 value:self.levelUpFlower];
  }
  if (self.hasOnlineDrawExp) {
    [output writeInt32:30 value:self.onlineDrawExp];
  }
  if (self.hasOnlineGuessExp) {
    [output writeInt32:31 value:self.onlineGuessExp];
  }
  if (self.hasOfflineDrawExp) {
    [output writeInt32:32 value:self.offlineDrawExp];
  }
  if (self.hasOfflineGuessExp) {
    [output writeInt32:33 value:self.offlineGuessExp];
  }
  if (self.hasMaxItemTimesOnNormalOpus) {
    [output writeInt32:41 value:self.maxItemTimesOnNormalOpus];
  }
  if (self.hasMaxItemTimesOnContestOpus) {
    [output writeInt32:42 value:self.maxItemTimesOnContestOpus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDefaultOnlineEnServerAddress) {
    size_ += computeStringSize(1, self.defaultOnlineEnServerAddress);
  }
  if (self.hasDefaultOnlineEnServerPort) {
    size_ += computeInt32Size(2, self.defaultOnlineEnServerPort);
  }
  if (self.hasDefaultOnlineCnServerAddress) {
    size_ += computeStringSize(3, self.defaultOnlineCnServerAddress);
  }
  if (self.hasDefaultOnlineCnServerPort) {
    size_ += computeInt32Size(4, self.defaultOnlineCnServerPort);
  }
  if (self.hasGuessReward) {
    size_ += computeInt32Size(10, self.guessReward);
  }
  if (self.hasTomatoReward) {
    size_ += computeInt32Size(11, self.tomatoReward);
  }
  if (self.hasTomatoExp) {
    size_ += computeInt32Size(12, self.tomatoExp);
  }
  if (self.hasFlowerReward) {
    size_ += computeInt32Size(13, self.flowerReward);
  }
  if (self.hasFlowerExp) {
    size_ += computeInt32Size(14, self.flowerExp);
  }
  if (self.hasShareReward) {
    size_ += computeInt32Size(15, self.shareReward);
  }
  if (self.hasFollowReward) {
    size_ += computeInt32Size(16, self.followReward);
  }
  if (self.hasLevelUpFlower) {
    size_ += computeInt32Size(21, self.levelUpFlower);
  }
  if (self.hasOnlineDrawExp) {
    size_ += computeInt32Size(30, self.onlineDrawExp);
  }
  if (self.hasOnlineGuessExp) {
    size_ += computeInt32Size(31, self.onlineGuessExp);
  }
  if (self.hasOfflineDrawExp) {
    size_ += computeInt32Size(32, self.offlineDrawExp);
  }
  if (self.hasOfflineGuessExp) {
    size_ += computeInt32Size(33, self.offlineGuessExp);
  }
  if (self.hasMaxItemTimesOnNormalOpus) {
    size_ += computeInt32Size(41, self.maxItemTimesOnNormalOpus);
  }
  if (self.hasMaxItemTimesOnContestOpus) {
    size_ += computeInt32Size(42, self.maxItemTimesOnContestOpus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDrawConfig*) parseFromData:(NSData*) data {
  return (PBDrawConfig*)[[[PBDrawConfig builder] mergeFromData:data] build];
}
+ (PBDrawConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawConfig*)[[[PBDrawConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawConfig*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawConfig*)[[[PBDrawConfig builder] mergeFromInputStream:input] build];
}
+ (PBDrawConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawConfig*)[[[PBDrawConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawConfig*)[[[PBDrawConfig builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawConfig*)[[[PBDrawConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawConfigBuilder*) builder {
  return [[PBDrawConfigBuilder alloc] init];
}
+ (PBDrawConfigBuilder*) builderWithPrototype:(PBDrawConfig*) prototype {
  return [[PBDrawConfig builder] mergeFrom:prototype];
}
- (PBDrawConfigBuilder*) builder {
  return [PBDrawConfig builder];
}
- (PBDrawConfigBuilder*) toBuilder {
  return [PBDrawConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDefaultOnlineEnServerAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultOnlineEnServerAddress", self.defaultOnlineEnServerAddress];
  }
  if (self.hasDefaultOnlineEnServerPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultOnlineEnServerPort", [NSNumber numberWithInteger:self.defaultOnlineEnServerPort]];
  }
  if (self.hasDefaultOnlineCnServerAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultOnlineCnServerAddress", self.defaultOnlineCnServerAddress];
  }
  if (self.hasDefaultOnlineCnServerPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultOnlineCnServerPort", [NSNumber numberWithInteger:self.defaultOnlineCnServerPort]];
  }
  if (self.hasGuessReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessReward", [NSNumber numberWithInteger:self.guessReward]];
  }
  if (self.hasTomatoReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tomatoReward", [NSNumber numberWithInteger:self.tomatoReward]];
  }
  if (self.hasTomatoExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tomatoExp", [NSNumber numberWithInteger:self.tomatoExp]];
  }
  if (self.hasFlowerReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flowerReward", [NSNumber numberWithInteger:self.flowerReward]];
  }
  if (self.hasFlowerExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flowerExp", [NSNumber numberWithInteger:self.flowerExp]];
  }
  if (self.hasShareReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareReward", [NSNumber numberWithInteger:self.shareReward]];
  }
  if (self.hasFollowReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"followReward", [NSNumber numberWithInteger:self.followReward]];
  }
  if (self.hasLevelUpFlower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"levelUpFlower", [NSNumber numberWithInteger:self.levelUpFlower]];
  }
  if (self.hasOnlineDrawExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineDrawExp", [NSNumber numberWithInteger:self.onlineDrawExp]];
  }
  if (self.hasOnlineGuessExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineGuessExp", [NSNumber numberWithInteger:self.onlineGuessExp]];
  }
  if (self.hasOfflineDrawExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offlineDrawExp", [NSNumber numberWithInteger:self.offlineDrawExp]];
  }
  if (self.hasOfflineGuessExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offlineGuessExp", [NSNumber numberWithInteger:self.offlineGuessExp]];
  }
  if (self.hasMaxItemTimesOnNormalOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxItemTimesOnNormalOpus", [NSNumber numberWithInteger:self.maxItemTimesOnNormalOpus]];
  }
  if (self.hasMaxItemTimesOnContestOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxItemTimesOnContestOpus", [NSNumber numberWithInteger:self.maxItemTimesOnContestOpus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDrawConfig class]]) {
    return NO;
  }
  PBDrawConfig *otherMessage = other;
  return
      self.hasDefaultOnlineEnServerAddress == otherMessage.hasDefaultOnlineEnServerAddress &&
      (!self.hasDefaultOnlineEnServerAddress || [self.defaultOnlineEnServerAddress isEqual:otherMessage.defaultOnlineEnServerAddress]) &&
      self.hasDefaultOnlineEnServerPort == otherMessage.hasDefaultOnlineEnServerPort &&
      (!self.hasDefaultOnlineEnServerPort || self.defaultOnlineEnServerPort == otherMessage.defaultOnlineEnServerPort) &&
      self.hasDefaultOnlineCnServerAddress == otherMessage.hasDefaultOnlineCnServerAddress &&
      (!self.hasDefaultOnlineCnServerAddress || [self.defaultOnlineCnServerAddress isEqual:otherMessage.defaultOnlineCnServerAddress]) &&
      self.hasDefaultOnlineCnServerPort == otherMessage.hasDefaultOnlineCnServerPort &&
      (!self.hasDefaultOnlineCnServerPort || self.defaultOnlineCnServerPort == otherMessage.defaultOnlineCnServerPort) &&
      self.hasGuessReward == otherMessage.hasGuessReward &&
      (!self.hasGuessReward || self.guessReward == otherMessage.guessReward) &&
      self.hasTomatoReward == otherMessage.hasTomatoReward &&
      (!self.hasTomatoReward || self.tomatoReward == otherMessage.tomatoReward) &&
      self.hasTomatoExp == otherMessage.hasTomatoExp &&
      (!self.hasTomatoExp || self.tomatoExp == otherMessage.tomatoExp) &&
      self.hasFlowerReward == otherMessage.hasFlowerReward &&
      (!self.hasFlowerReward || self.flowerReward == otherMessage.flowerReward) &&
      self.hasFlowerExp == otherMessage.hasFlowerExp &&
      (!self.hasFlowerExp || self.flowerExp == otherMessage.flowerExp) &&
      self.hasShareReward == otherMessage.hasShareReward &&
      (!self.hasShareReward || self.shareReward == otherMessage.shareReward) &&
      self.hasFollowReward == otherMessage.hasFollowReward &&
      (!self.hasFollowReward || self.followReward == otherMessage.followReward) &&
      self.hasLevelUpFlower == otherMessage.hasLevelUpFlower &&
      (!self.hasLevelUpFlower || self.levelUpFlower == otherMessage.levelUpFlower) &&
      self.hasOnlineDrawExp == otherMessage.hasOnlineDrawExp &&
      (!self.hasOnlineDrawExp || self.onlineDrawExp == otherMessage.onlineDrawExp) &&
      self.hasOnlineGuessExp == otherMessage.hasOnlineGuessExp &&
      (!self.hasOnlineGuessExp || self.onlineGuessExp == otherMessage.onlineGuessExp) &&
      self.hasOfflineDrawExp == otherMessage.hasOfflineDrawExp &&
      (!self.hasOfflineDrawExp || self.offlineDrawExp == otherMessage.offlineDrawExp) &&
      self.hasOfflineGuessExp == otherMessage.hasOfflineGuessExp &&
      (!self.hasOfflineGuessExp || self.offlineGuessExp == otherMessage.offlineGuessExp) &&
      self.hasMaxItemTimesOnNormalOpus == otherMessage.hasMaxItemTimesOnNormalOpus &&
      (!self.hasMaxItemTimesOnNormalOpus || self.maxItemTimesOnNormalOpus == otherMessage.maxItemTimesOnNormalOpus) &&
      self.hasMaxItemTimesOnContestOpus == otherMessage.hasMaxItemTimesOnContestOpus &&
      (!self.hasMaxItemTimesOnContestOpus || self.maxItemTimesOnContestOpus == otherMessage.maxItemTimesOnContestOpus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDefaultOnlineEnServerAddress) {
    hashCode = hashCode * 31 + [self.defaultOnlineEnServerAddress hash];
  }
  if (self.hasDefaultOnlineEnServerPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultOnlineEnServerPort] hash];
  }
  if (self.hasDefaultOnlineCnServerAddress) {
    hashCode = hashCode * 31 + [self.defaultOnlineCnServerAddress hash];
  }
  if (self.hasDefaultOnlineCnServerPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultOnlineCnServerPort] hash];
  }
  if (self.hasGuessReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guessReward] hash];
  }
  if (self.hasTomatoReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tomatoReward] hash];
  }
  if (self.hasTomatoExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tomatoExp] hash];
  }
  if (self.hasFlowerReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.flowerReward] hash];
  }
  if (self.hasFlowerExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.flowerExp] hash];
  }
  if (self.hasShareReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shareReward] hash];
  }
  if (self.hasFollowReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.followReward] hash];
  }
  if (self.hasLevelUpFlower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.levelUpFlower] hash];
  }
  if (self.hasOnlineDrawExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.onlineDrawExp] hash];
  }
  if (self.hasOnlineGuessExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.onlineGuessExp] hash];
  }
  if (self.hasOfflineDrawExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offlineDrawExp] hash];
  }
  if (self.hasOfflineGuessExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offlineGuessExp] hash];
  }
  if (self.hasMaxItemTimesOnNormalOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxItemTimesOnNormalOpus] hash];
  }
  if (self.hasMaxItemTimesOnContestOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxItemTimesOnContestOpus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawConfigBuilder()
@property (strong) PBDrawConfig* resultPbdrawConfig;
@end

@implementation PBDrawConfigBuilder
@synthesize resultPbdrawConfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdrawConfig = [[PBDrawConfig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdrawConfig;
}
- (PBDrawConfigBuilder*) clear {
  self.resultPbdrawConfig = [[PBDrawConfig alloc] init];
  return self;
}
- (PBDrawConfigBuilder*) clone {
  return [PBDrawConfig builderWithPrototype:resultPbdrawConfig];
}
- (PBDrawConfig*) defaultInstance {
  return [PBDrawConfig defaultInstance];
}
- (PBDrawConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawConfig*) buildPartial {
  PBDrawConfig* returnMe = resultPbdrawConfig;
  self.resultPbdrawConfig = nil;
  return returnMe;
}
- (PBDrawConfigBuilder*) mergeFrom:(PBDrawConfig*) other {
  if (other == [PBDrawConfig defaultInstance]) {
    return self;
  }
  if (other.hasDefaultOnlineEnServerAddress) {
    [self setDefaultOnlineEnServerAddress:other.defaultOnlineEnServerAddress];
  }
  if (other.hasDefaultOnlineEnServerPort) {
    [self setDefaultOnlineEnServerPort:other.defaultOnlineEnServerPort];
  }
  if (other.hasDefaultOnlineCnServerAddress) {
    [self setDefaultOnlineCnServerAddress:other.defaultOnlineCnServerAddress];
  }
  if (other.hasDefaultOnlineCnServerPort) {
    [self setDefaultOnlineCnServerPort:other.defaultOnlineCnServerPort];
  }
  if (other.hasGuessReward) {
    [self setGuessReward:other.guessReward];
  }
  if (other.hasTomatoReward) {
    [self setTomatoReward:other.tomatoReward];
  }
  if (other.hasTomatoExp) {
    [self setTomatoExp:other.tomatoExp];
  }
  if (other.hasFlowerReward) {
    [self setFlowerReward:other.flowerReward];
  }
  if (other.hasFlowerExp) {
    [self setFlowerExp:other.flowerExp];
  }
  if (other.hasShareReward) {
    [self setShareReward:other.shareReward];
  }
  if (other.hasFollowReward) {
    [self setFollowReward:other.followReward];
  }
  if (other.hasLevelUpFlower) {
    [self setLevelUpFlower:other.levelUpFlower];
  }
  if (other.hasOnlineDrawExp) {
    [self setOnlineDrawExp:other.onlineDrawExp];
  }
  if (other.hasOnlineGuessExp) {
    [self setOnlineGuessExp:other.onlineGuessExp];
  }
  if (other.hasOfflineDrawExp) {
    [self setOfflineDrawExp:other.offlineDrawExp];
  }
  if (other.hasOfflineGuessExp) {
    [self setOfflineGuessExp:other.offlineGuessExp];
  }
  if (other.hasMaxItemTimesOnNormalOpus) {
    [self setMaxItemTimesOnNormalOpus:other.maxItemTimesOnNormalOpus];
  }
  if (other.hasMaxItemTimesOnContestOpus) {
    [self setMaxItemTimesOnContestOpus:other.maxItemTimesOnContestOpus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDefaultOnlineEnServerAddress:[input readString]];
        break;
      }
      case 16: {
        [self setDefaultOnlineEnServerPort:[input readInt32]];
        break;
      }
      case 26: {
        [self setDefaultOnlineCnServerAddress:[input readString]];
        break;
      }
      case 32: {
        [self setDefaultOnlineCnServerPort:[input readInt32]];
        break;
      }
      case 80: {
        [self setGuessReward:[input readInt32]];
        break;
      }
      case 88: {
        [self setTomatoReward:[input readInt32]];
        break;
      }
      case 96: {
        [self setTomatoExp:[input readInt32]];
        break;
      }
      case 104: {
        [self setFlowerReward:[input readInt32]];
        break;
      }
      case 112: {
        [self setFlowerExp:[input readInt32]];
        break;
      }
      case 120: {
        [self setShareReward:[input readInt32]];
        break;
      }
      case 128: {
        [self setFollowReward:[input readInt32]];
        break;
      }
      case 168: {
        [self setLevelUpFlower:[input readInt32]];
        break;
      }
      case 240: {
        [self setOnlineDrawExp:[input readInt32]];
        break;
      }
      case 248: {
        [self setOnlineGuessExp:[input readInt32]];
        break;
      }
      case 256: {
        [self setOfflineDrawExp:[input readInt32]];
        break;
      }
      case 264: {
        [self setOfflineGuessExp:[input readInt32]];
        break;
      }
      case 328: {
        [self setMaxItemTimesOnNormalOpus:[input readInt32]];
        break;
      }
      case 336: {
        [self setMaxItemTimesOnContestOpus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDefaultOnlineEnServerAddress {
  return resultPbdrawConfig.hasDefaultOnlineEnServerAddress;
}
- (NSString*) defaultOnlineEnServerAddress {
  return resultPbdrawConfig.defaultOnlineEnServerAddress;
}
- (PBDrawConfigBuilder*) setDefaultOnlineEnServerAddress:(NSString*) value {
  resultPbdrawConfig.hasDefaultOnlineEnServerAddress = YES;
  resultPbdrawConfig.defaultOnlineEnServerAddress = value;
  return self;
}
- (PBDrawConfigBuilder*) clearDefaultOnlineEnServerAddress {
  resultPbdrawConfig.hasDefaultOnlineEnServerAddress = NO;
  resultPbdrawConfig.defaultOnlineEnServerAddress = @"106.187.89.232";
  return self;
}
- (BOOL) hasDefaultOnlineEnServerPort {
  return resultPbdrawConfig.hasDefaultOnlineEnServerPort;
}
- (SInt32) defaultOnlineEnServerPort {
  return resultPbdrawConfig.defaultOnlineEnServerPort;
}
- (PBDrawConfigBuilder*) setDefaultOnlineEnServerPort:(SInt32) value {
  resultPbdrawConfig.hasDefaultOnlineEnServerPort = YES;
  resultPbdrawConfig.defaultOnlineEnServerPort = value;
  return self;
}
- (PBDrawConfigBuilder*) clearDefaultOnlineEnServerPort {
  resultPbdrawConfig.hasDefaultOnlineEnServerPort = NO;
  resultPbdrawConfig.defaultOnlineEnServerPort = 9000;
  return self;
}
- (BOOL) hasDefaultOnlineCnServerAddress {
  return resultPbdrawConfig.hasDefaultOnlineCnServerAddress;
}
- (NSString*) defaultOnlineCnServerAddress {
  return resultPbdrawConfig.defaultOnlineCnServerAddress;
}
- (PBDrawConfigBuilder*) setDefaultOnlineCnServerAddress:(NSString*) value {
  resultPbdrawConfig.hasDefaultOnlineCnServerAddress = YES;
  resultPbdrawConfig.defaultOnlineCnServerAddress = value;
  return self;
}
- (PBDrawConfigBuilder*) clearDefaultOnlineCnServerAddress {
  resultPbdrawConfig.hasDefaultOnlineCnServerAddress = NO;
  resultPbdrawConfig.defaultOnlineCnServerAddress = @"www.place100.com";
  return self;
}
- (BOOL) hasDefaultOnlineCnServerPort {
  return resultPbdrawConfig.hasDefaultOnlineCnServerPort;
}
- (SInt32) defaultOnlineCnServerPort {
  return resultPbdrawConfig.defaultOnlineCnServerPort;
}
- (PBDrawConfigBuilder*) setDefaultOnlineCnServerPort:(SInt32) value {
  resultPbdrawConfig.hasDefaultOnlineCnServerPort = YES;
  resultPbdrawConfig.defaultOnlineCnServerPort = value;
  return self;
}
- (PBDrawConfigBuilder*) clearDefaultOnlineCnServerPort {
  resultPbdrawConfig.hasDefaultOnlineCnServerPort = NO;
  resultPbdrawConfig.defaultOnlineCnServerPort = 9000;
  return self;
}
- (BOOL) hasGuessReward {
  return resultPbdrawConfig.hasGuessReward;
}
- (SInt32) guessReward {
  return resultPbdrawConfig.guessReward;
}
- (PBDrawConfigBuilder*) setGuessReward:(SInt32) value {
  resultPbdrawConfig.hasGuessReward = YES;
  resultPbdrawConfig.guessReward = value;
  return self;
}
- (PBDrawConfigBuilder*) clearGuessReward {
  resultPbdrawConfig.hasGuessReward = NO;
  resultPbdrawConfig.guessReward = 3;
  return self;
}
- (BOOL) hasTomatoReward {
  return resultPbdrawConfig.hasTomatoReward;
}
- (SInt32) tomatoReward {
  return resultPbdrawConfig.tomatoReward;
}
- (PBDrawConfigBuilder*) setTomatoReward:(SInt32) value {
  resultPbdrawConfig.hasTomatoReward = YES;
  resultPbdrawConfig.tomatoReward = value;
  return self;
}
- (PBDrawConfigBuilder*) clearTomatoReward {
  resultPbdrawConfig.hasTomatoReward = NO;
  resultPbdrawConfig.tomatoReward = -3;
  return self;
}
- (BOOL) hasTomatoExp {
  return resultPbdrawConfig.hasTomatoExp;
}
- (SInt32) tomatoExp {
  return resultPbdrawConfig.tomatoExp;
}
- (PBDrawConfigBuilder*) setTomatoExp:(SInt32) value {
  resultPbdrawConfig.hasTomatoExp = YES;
  resultPbdrawConfig.tomatoExp = value;
  return self;
}
- (PBDrawConfigBuilder*) clearTomatoExp {
  resultPbdrawConfig.hasTomatoExp = NO;
  resultPbdrawConfig.tomatoExp = -5;
  return self;
}
- (BOOL) hasFlowerReward {
  return resultPbdrawConfig.hasFlowerReward;
}
- (SInt32) flowerReward {
  return resultPbdrawConfig.flowerReward;
}
- (PBDrawConfigBuilder*) setFlowerReward:(SInt32) value {
  resultPbdrawConfig.hasFlowerReward = YES;
  resultPbdrawConfig.flowerReward = value;
  return self;
}
- (PBDrawConfigBuilder*) clearFlowerReward {
  resultPbdrawConfig.hasFlowerReward = NO;
  resultPbdrawConfig.flowerReward = 3;
  return self;
}
- (BOOL) hasFlowerExp {
  return resultPbdrawConfig.hasFlowerExp;
}
- (SInt32) flowerExp {
  return resultPbdrawConfig.flowerExp;
}
- (PBDrawConfigBuilder*) setFlowerExp:(SInt32) value {
  resultPbdrawConfig.hasFlowerExp = YES;
  resultPbdrawConfig.flowerExp = value;
  return self;
}
- (PBDrawConfigBuilder*) clearFlowerExp {
  resultPbdrawConfig.hasFlowerExp = NO;
  resultPbdrawConfig.flowerExp = 5;
  return self;
}
- (BOOL) hasShareReward {
  return resultPbdrawConfig.hasShareReward;
}
- (SInt32) shareReward {
  return resultPbdrawConfig.shareReward;
}
- (PBDrawConfigBuilder*) setShareReward:(SInt32) value {
  resultPbdrawConfig.hasShareReward = YES;
  resultPbdrawConfig.shareReward = value;
  return self;
}
- (PBDrawConfigBuilder*) clearShareReward {
  resultPbdrawConfig.hasShareReward = NO;
  resultPbdrawConfig.shareReward = 10;
  return self;
}
- (BOOL) hasFollowReward {
  return resultPbdrawConfig.hasFollowReward;
}
- (SInt32) followReward {
  return resultPbdrawConfig.followReward;
}
- (PBDrawConfigBuilder*) setFollowReward:(SInt32) value {
  resultPbdrawConfig.hasFollowReward = YES;
  resultPbdrawConfig.followReward = value;
  return self;
}
- (PBDrawConfigBuilder*) clearFollowReward {
  resultPbdrawConfig.hasFollowReward = NO;
  resultPbdrawConfig.followReward = 1000;
  return self;
}
- (BOOL) hasLevelUpFlower {
  return resultPbdrawConfig.hasLevelUpFlower;
}
- (SInt32) levelUpFlower {
  return resultPbdrawConfig.levelUpFlower;
}
- (PBDrawConfigBuilder*) setLevelUpFlower:(SInt32) value {
  resultPbdrawConfig.hasLevelUpFlower = YES;
  resultPbdrawConfig.levelUpFlower = value;
  return self;
}
- (PBDrawConfigBuilder*) clearLevelUpFlower {
  resultPbdrawConfig.hasLevelUpFlower = NO;
  resultPbdrawConfig.levelUpFlower = 2;
  return self;
}
- (BOOL) hasOnlineDrawExp {
  return resultPbdrawConfig.hasOnlineDrawExp;
}
- (SInt32) onlineDrawExp {
  return resultPbdrawConfig.onlineDrawExp;
}
- (PBDrawConfigBuilder*) setOnlineDrawExp:(SInt32) value {
  resultPbdrawConfig.hasOnlineDrawExp = YES;
  resultPbdrawConfig.onlineDrawExp = value;
  return self;
}
- (PBDrawConfigBuilder*) clearOnlineDrawExp {
  resultPbdrawConfig.hasOnlineDrawExp = NO;
  resultPbdrawConfig.onlineDrawExp = 15;
  return self;
}
- (BOOL) hasOnlineGuessExp {
  return resultPbdrawConfig.hasOnlineGuessExp;
}
- (SInt32) onlineGuessExp {
  return resultPbdrawConfig.onlineGuessExp;
}
- (PBDrawConfigBuilder*) setOnlineGuessExp:(SInt32) value {
  resultPbdrawConfig.hasOnlineGuessExp = YES;
  resultPbdrawConfig.onlineGuessExp = value;
  return self;
}
- (PBDrawConfigBuilder*) clearOnlineGuessExp {
  resultPbdrawConfig.hasOnlineGuessExp = NO;
  resultPbdrawConfig.onlineGuessExp = 10;
  return self;
}
- (BOOL) hasOfflineDrawExp {
  return resultPbdrawConfig.hasOfflineDrawExp;
}
- (SInt32) offlineDrawExp {
  return resultPbdrawConfig.offlineDrawExp;
}
- (PBDrawConfigBuilder*) setOfflineDrawExp:(SInt32) value {
  resultPbdrawConfig.hasOfflineDrawExp = YES;
  resultPbdrawConfig.offlineDrawExp = value;
  return self;
}
- (PBDrawConfigBuilder*) clearOfflineDrawExp {
  resultPbdrawConfig.hasOfflineDrawExp = NO;
  resultPbdrawConfig.offlineDrawExp = 15;
  return self;
}
- (BOOL) hasOfflineGuessExp {
  return resultPbdrawConfig.hasOfflineGuessExp;
}
- (SInt32) offlineGuessExp {
  return resultPbdrawConfig.offlineGuessExp;
}
- (PBDrawConfigBuilder*) setOfflineGuessExp:(SInt32) value {
  resultPbdrawConfig.hasOfflineGuessExp = YES;
  resultPbdrawConfig.offlineGuessExp = value;
  return self;
}
- (PBDrawConfigBuilder*) clearOfflineGuessExp {
  resultPbdrawConfig.hasOfflineGuessExp = NO;
  resultPbdrawConfig.offlineGuessExp = 2;
  return self;
}
- (BOOL) hasMaxItemTimesOnNormalOpus {
  return resultPbdrawConfig.hasMaxItemTimesOnNormalOpus;
}
- (SInt32) maxItemTimesOnNormalOpus {
  return resultPbdrawConfig.maxItemTimesOnNormalOpus;
}
- (PBDrawConfigBuilder*) setMaxItemTimesOnNormalOpus:(SInt32) value {
  resultPbdrawConfig.hasMaxItemTimesOnNormalOpus = YES;
  resultPbdrawConfig.maxItemTimesOnNormalOpus = value;
  return self;
}
- (PBDrawConfigBuilder*) clearMaxItemTimesOnNormalOpus {
  resultPbdrawConfig.hasMaxItemTimesOnNormalOpus = NO;
  resultPbdrawConfig.maxItemTimesOnNormalOpus = 10;
  return self;
}
- (BOOL) hasMaxItemTimesOnContestOpus {
  return resultPbdrawConfig.hasMaxItemTimesOnContestOpus;
}
- (SInt32) maxItemTimesOnContestOpus {
  return resultPbdrawConfig.maxItemTimesOnContestOpus;
}
- (PBDrawConfigBuilder*) setMaxItemTimesOnContestOpus:(SInt32) value {
  resultPbdrawConfig.hasMaxItemTimesOnContestOpus = YES;
  resultPbdrawConfig.maxItemTimesOnContestOpus = value;
  return self;
}
- (PBDrawConfigBuilder*) clearMaxItemTimesOnContestOpus {
  resultPbdrawConfig.hasMaxItemTimesOnContestOpus = NO;
  resultPbdrawConfig.maxItemTimesOnContestOpus = 3;
  return self;
}
@end

@interface PBAppReward ()
@property (strong) PBApp* app;
@property SInt32 rewardAmount;
@property PBGameCurrency rewardCurrency;
@end

@implementation PBAppReward

- (BOOL) hasApp {
  return !!hasApp_;
}
- (void) setHasApp:(BOOL) _value_ {
  hasApp_ = !!_value_;
}
@synthesize app;
- (BOOL) hasRewardAmount {
  return !!hasRewardAmount_;
}
- (void) setHasRewardAmount:(BOOL) _value_ {
  hasRewardAmount_ = !!_value_;
}
@synthesize rewardAmount;
- (BOOL) hasRewardCurrency {
  return !!hasRewardCurrency_;
}
- (void) setHasRewardCurrency:(BOOL) _value_ {
  hasRewardCurrency_ = !!_value_;
}
@synthesize rewardCurrency;
- (instancetype) init {
  if ((self = [super init])) {
    self.app = [PBApp defaultInstance];
    self.rewardAmount = 0;
    self.rewardCurrency = PBGameCurrencyCoin;
  }
  return self;
}
static PBAppReward* defaultPBAppRewardInstance = nil;
+ (void) initialize {
  if (self == [PBAppReward class]) {
    defaultPBAppRewardInstance = [[PBAppReward alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBAppRewardInstance;
}
- (instancetype) defaultInstance {
  return defaultPBAppRewardInstance;
}
- (BOOL) isInitialized {
  if (!self.hasApp) {
    return NO;
  }
  if (!self.hasRewardAmount) {
    return NO;
  }
  if (!self.hasRewardCurrency) {
    return NO;
  }
  if (!self.app.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasApp) {
    [output writeMessage:1 value:self.app];
  }
  if (self.hasRewardAmount) {
    [output writeInt32:2 value:self.rewardAmount];
  }
  if (self.hasRewardCurrency) {
    [output writeEnum:3 value:self.rewardCurrency];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasApp) {
    size_ += computeMessageSize(1, self.app);
  }
  if (self.hasRewardAmount) {
    size_ += computeInt32Size(2, self.rewardAmount);
  }
  if (self.hasRewardCurrency) {
    size_ += computeEnumSize(3, self.rewardCurrency);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBAppReward*) parseFromData:(NSData*) data {
  return (PBAppReward*)[[[PBAppReward builder] mergeFromData:data] build];
}
+ (PBAppReward*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAppReward*)[[[PBAppReward builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBAppReward*) parseFromInputStream:(NSInputStream*) input {
  return (PBAppReward*)[[[PBAppReward builder] mergeFromInputStream:input] build];
}
+ (PBAppReward*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAppReward*)[[[PBAppReward builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAppReward*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBAppReward*)[[[PBAppReward builder] mergeFromCodedInputStream:input] build];
}
+ (PBAppReward*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAppReward*)[[[PBAppReward builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAppRewardBuilder*) builder {
  return [[PBAppRewardBuilder alloc] init];
}
+ (PBAppRewardBuilder*) builderWithPrototype:(PBAppReward*) prototype {
  return [[PBAppReward builder] mergeFrom:prototype];
}
- (PBAppRewardBuilder*) builder {
  return [PBAppReward builder];
}
- (PBAppRewardBuilder*) toBuilder {
  return [PBAppReward builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasApp) {
    [output appendFormat:@"%@%@ {\n", indent, @"app"];
    [self.app writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRewardAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rewardAmount", [NSNumber numberWithInteger:self.rewardAmount]];
  }
  if (self.hasRewardCurrency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rewardCurrency", NSStringFromPBGameCurrency(self.rewardCurrency)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBAppReward class]]) {
    return NO;
  }
  PBAppReward *otherMessage = other;
  return
      self.hasApp == otherMessage.hasApp &&
      (!self.hasApp || [self.app isEqual:otherMessage.app]) &&
      self.hasRewardAmount == otherMessage.hasRewardAmount &&
      (!self.hasRewardAmount || self.rewardAmount == otherMessage.rewardAmount) &&
      self.hasRewardCurrency == otherMessage.hasRewardCurrency &&
      (!self.hasRewardCurrency || self.rewardCurrency == otherMessage.rewardCurrency) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasApp) {
    hashCode = hashCode * 31 + [self.app hash];
  }
  if (self.hasRewardAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rewardAmount] hash];
  }
  if (self.hasRewardCurrency) {
    hashCode = hashCode * 31 + self.rewardCurrency;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBAppRewardBuilder()
@property (strong) PBAppReward* resultPbappReward;
@end

@implementation PBAppRewardBuilder
@synthesize resultPbappReward;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbappReward = [[PBAppReward alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbappReward;
}
- (PBAppRewardBuilder*) clear {
  self.resultPbappReward = [[PBAppReward alloc] init];
  return self;
}
- (PBAppRewardBuilder*) clone {
  return [PBAppReward builderWithPrototype:resultPbappReward];
}
- (PBAppReward*) defaultInstance {
  return [PBAppReward defaultInstance];
}
- (PBAppReward*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBAppReward*) buildPartial {
  PBAppReward* returnMe = resultPbappReward;
  self.resultPbappReward = nil;
  return returnMe;
}
- (PBAppRewardBuilder*) mergeFrom:(PBAppReward*) other {
  if (other == [PBAppReward defaultInstance]) {
    return self;
  }
  if (other.hasApp) {
    [self mergeApp:other.app];
  }
  if (other.hasRewardAmount) {
    [self setRewardAmount:other.rewardAmount];
  }
  if (other.hasRewardCurrency) {
    [self setRewardCurrency:other.rewardCurrency];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBAppRewardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBAppRewardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBAppBuilder* subBuilder = [PBApp builder];
        if (self.hasApp) {
          [subBuilder mergeFrom:self.app];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setApp:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setRewardAmount:[input readInt32]];
        break;
      }
      case 24: {
        PBGameCurrency value = (PBGameCurrency)[input readEnum];
        if (PBGameCurrencyIsValidValue(value)) {
          [self setRewardCurrency:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasApp {
  return resultPbappReward.hasApp;
}
- (PBApp*) app {
  return resultPbappReward.app;
}
- (PBAppRewardBuilder*) setApp:(PBApp*) value {
  resultPbappReward.hasApp = YES;
  resultPbappReward.app = value;
  return self;
}
- (PBAppRewardBuilder*) setAppBuilder:(PBAppBuilder*) builderForValue {
  return [self setApp:[builderForValue build]];
}
- (PBAppRewardBuilder*) mergeApp:(PBApp*) value {
  if (resultPbappReward.hasApp &&
      resultPbappReward.app != [PBApp defaultInstance]) {
    resultPbappReward.app =
      [[[PBApp builderWithPrototype:resultPbappReward.app] mergeFrom:value] buildPartial];
  } else {
    resultPbappReward.app = value;
  }
  resultPbappReward.hasApp = YES;
  return self;
}
- (PBAppRewardBuilder*) clearApp {
  resultPbappReward.hasApp = NO;
  resultPbappReward.app = [PBApp defaultInstance];
  return self;
}
- (BOOL) hasRewardAmount {
  return resultPbappReward.hasRewardAmount;
}
- (SInt32) rewardAmount {
  return resultPbappReward.rewardAmount;
}
- (PBAppRewardBuilder*) setRewardAmount:(SInt32) value {
  resultPbappReward.hasRewardAmount = YES;
  resultPbappReward.rewardAmount = value;
  return self;
}
- (PBAppRewardBuilder*) clearRewardAmount {
  resultPbappReward.hasRewardAmount = NO;
  resultPbappReward.rewardAmount = 0;
  return self;
}
- (BOOL) hasRewardCurrency {
  return resultPbappReward.hasRewardCurrency;
}
- (PBGameCurrency) rewardCurrency {
  return resultPbappReward.rewardCurrency;
}
- (PBAppRewardBuilder*) setRewardCurrency:(PBGameCurrency) value {
  resultPbappReward.hasRewardCurrency = YES;
  resultPbappReward.rewardCurrency = value;
  return self;
}
- (PBAppRewardBuilder*) clearRewardCurrency {
  resultPbappReward.hasRewardCurrency = NO;
  resultPbappReward.rewardCurrency = PBGameCurrencyCoin;
  return self;
}
@end

@interface PBRewardWall ()
@property SInt32 type;
@property (strong) NSString* logo;
@property (strong) NSMutableArray * nameArray;
@end

@implementation PBRewardWall

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) _value_ {
  hasLogo_ = !!_value_;
}
@synthesize logo;
@synthesize nameArray;
@dynamic name;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.logo = @"";
  }
  return self;
}
static PBRewardWall* defaultPBRewardWallInstance = nil;
+ (void) initialize {
  if (self == [PBRewardWall class]) {
    defaultPBRewardWallInstance = [[PBRewardWall alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBRewardWallInstance;
}
- (instancetype) defaultInstance {
  return defaultPBRewardWallInstance;
}
- (NSArray *)name {
  return nameArray;
}
- (PBLocalizeString*)nameAtIndex:(NSUInteger)index {
  return [nameArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  __block BOOL isInitname = YES;
   [self.name enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitname = NO;
      *stop = YES;
    }
  }];
  if (!isInitname) return isInitname;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasLogo) {
    [output writeString:2 value:self.logo];
  }
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasLogo) {
    size_ += computeStringSize(2, self.logo);
  }
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRewardWall*) parseFromData:(NSData*) data {
  return (PBRewardWall*)[[[PBRewardWall builder] mergeFromData:data] build];
}
+ (PBRewardWall*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRewardWall*)[[[PBRewardWall builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRewardWall*) parseFromInputStream:(NSInputStream*) input {
  return (PBRewardWall*)[[[PBRewardWall builder] mergeFromInputStream:input] build];
}
+ (PBRewardWall*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRewardWall*)[[[PBRewardWall builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRewardWall*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRewardWall*)[[[PBRewardWall builder] mergeFromCodedInputStream:input] build];
}
+ (PBRewardWall*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRewardWall*)[[[PBRewardWall builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRewardWallBuilder*) builder {
  return [[PBRewardWallBuilder alloc] init];
}
+ (PBRewardWallBuilder*) builderWithPrototype:(PBRewardWall*) prototype {
  return [[PBRewardWall builder] mergeFrom:prototype];
}
- (PBRewardWallBuilder*) builder {
  return [PBRewardWall builder];
}
- (PBRewardWallBuilder*) toBuilder {
  return [PBRewardWall builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", self.logo];
  }
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"name"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRewardWall class]]) {
    return NO;
  }
  PBRewardWall *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || [self.logo isEqual:otherMessage.logo]) &&
      [self.nameArray isEqualToArray:otherMessage.nameArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [self.logo hash];
  }
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRewardWallBuilder()
@property (strong) PBRewardWall* resultPbrewardWall;
@end

@implementation PBRewardWallBuilder
@synthesize resultPbrewardWall;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbrewardWall = [[PBRewardWall alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbrewardWall;
}
- (PBRewardWallBuilder*) clear {
  self.resultPbrewardWall = [[PBRewardWall alloc] init];
  return self;
}
- (PBRewardWallBuilder*) clone {
  return [PBRewardWall builderWithPrototype:resultPbrewardWall];
}
- (PBRewardWall*) defaultInstance {
  return [PBRewardWall defaultInstance];
}
- (PBRewardWall*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRewardWall*) buildPartial {
  PBRewardWall* returnMe = resultPbrewardWall;
  self.resultPbrewardWall = nil;
  return returnMe;
}
- (PBRewardWallBuilder*) mergeFrom:(PBRewardWall*) other {
  if (other == [PBRewardWall defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  if (other.nameArray.count > 0) {
    if (resultPbrewardWall.nameArray == nil) {
      resultPbrewardWall.nameArray = [[NSMutableArray alloc] initWithArray:other.nameArray];
    } else {
      [resultPbrewardWall.nameArray addObjectsFromArray:other.nameArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRewardWallBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRewardWallBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setLogo:[input readString]];
        break;
      }
      case 26: {
        PBLocalizeStringBuilder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addName:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbrewardWall.hasType;
}
- (SInt32) type {
  return resultPbrewardWall.type;
}
- (PBRewardWallBuilder*) setType:(SInt32) value {
  resultPbrewardWall.hasType = YES;
  resultPbrewardWall.type = value;
  return self;
}
- (PBRewardWallBuilder*) clearType {
  resultPbrewardWall.hasType = NO;
  resultPbrewardWall.type = 0;
  return self;
}
- (BOOL) hasLogo {
  return resultPbrewardWall.hasLogo;
}
- (NSString*) logo {
  return resultPbrewardWall.logo;
}
- (PBRewardWallBuilder*) setLogo:(NSString*) value {
  resultPbrewardWall.hasLogo = YES;
  resultPbrewardWall.logo = value;
  return self;
}
- (PBRewardWallBuilder*) clearLogo {
  resultPbrewardWall.hasLogo = NO;
  resultPbrewardWall.logo = @"";
  return self;
}
- (NSMutableArray *)name {
  return resultPbrewardWall.nameArray;
}
- (PBLocalizeString*)nameAtIndex:(NSUInteger)index {
  return [resultPbrewardWall nameAtIndex:index];
}
- (PBRewardWallBuilder *)addName:(PBLocalizeString*)value {
  if (resultPbrewardWall.nameArray == nil) {
    resultPbrewardWall.nameArray = [[NSMutableArray alloc]init];
  }
  [resultPbrewardWall.nameArray addObject:value];
  return self;
}
- (PBRewardWallBuilder *)setNameArray:(NSArray *)array {
  resultPbrewardWall.nameArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBRewardWallBuilder *)clearName {
  resultPbrewardWall.nameArray = nil;
  return self;
}
@end

@interface PBConfig ()
@property (strong) NSMutableArray * coinPricesArray;
@property SInt32 balanceDeviation;
@property (strong) NSString* trafficApiserverUrl;
@property (strong) NSString* userApiserverUrl;
@property (strong) NSString* musicHomeCnUrl;
@property (strong) NSString* musicHomeEnUrl;
@property BOOL enableReview;
@property BOOL inReview;
@property (strong) NSString* inReviewVersion;
@property SInt32 postponeTime;
@property SInt32 urgeTime;
@property BOOL enableAd;
@property BOOL enableWall;
@property SInt32 wallType;
@property (strong) NSMutableArray * rewardWallsArray;
@property (strong) NSMutableArray * appRewardsArray;
@property (strong) PBDrawConfig* drawConfig;
@property (strong) PBDiceConfig* diceConfig;
@property (strong) PBZJHConfig* zjhConfig;
@end

@implementation PBConfig

@synthesize coinPricesArray;
@dynamic coinPrices;
- (BOOL) hasBalanceDeviation {
  return !!hasBalanceDeviation_;
}
- (void) setHasBalanceDeviation:(BOOL) _value_ {
  hasBalanceDeviation_ = !!_value_;
}
@synthesize balanceDeviation;
- (BOOL) hasTrafficApiserverUrl {
  return !!hasTrafficApiserverUrl_;
}
- (void) setHasTrafficApiserverUrl:(BOOL) _value_ {
  hasTrafficApiserverUrl_ = !!_value_;
}
@synthesize trafficApiserverUrl;
- (BOOL) hasUserApiserverUrl {
  return !!hasUserApiserverUrl_;
}
- (void) setHasUserApiserverUrl:(BOOL) _value_ {
  hasUserApiserverUrl_ = !!_value_;
}
@synthesize userApiserverUrl;
- (BOOL) hasMusicHomeCnUrl {
  return !!hasMusicHomeCnUrl_;
}
- (void) setHasMusicHomeCnUrl:(BOOL) _value_ {
  hasMusicHomeCnUrl_ = !!_value_;
}
@synthesize musicHomeCnUrl;
- (BOOL) hasMusicHomeEnUrl {
  return !!hasMusicHomeEnUrl_;
}
- (void) setHasMusicHomeEnUrl:(BOOL) _value_ {
  hasMusicHomeEnUrl_ = !!_value_;
}
@synthesize musicHomeEnUrl;
- (BOOL) hasEnableReview {
  return !!hasEnableReview_;
}
- (void) setHasEnableReview:(BOOL) _value_ {
  hasEnableReview_ = !!_value_;
}
- (BOOL) enableReview {
  return !!enableReview_;
}
- (void) setEnableReview:(BOOL) _value_ {
  enableReview_ = !!_value_;
}
- (BOOL) hasInReview {
  return !!hasInReview_;
}
- (void) setHasInReview:(BOOL) _value_ {
  hasInReview_ = !!_value_;
}
- (BOOL) inReview {
  return !!inReview_;
}
- (void) setInReview:(BOOL) _value_ {
  inReview_ = !!_value_;
}
- (BOOL) hasInReviewVersion {
  return !!hasInReviewVersion_;
}
- (void) setHasInReviewVersion:(BOOL) _value_ {
  hasInReviewVersion_ = !!_value_;
}
@synthesize inReviewVersion;
- (BOOL) hasPostponeTime {
  return !!hasPostponeTime_;
}
- (void) setHasPostponeTime:(BOOL) _value_ {
  hasPostponeTime_ = !!_value_;
}
@synthesize postponeTime;
- (BOOL) hasUrgeTime {
  return !!hasUrgeTime_;
}
- (void) setHasUrgeTime:(BOOL) _value_ {
  hasUrgeTime_ = !!_value_;
}
@synthesize urgeTime;
- (BOOL) hasEnableAd {
  return !!hasEnableAd_;
}
- (void) setHasEnableAd:(BOOL) _value_ {
  hasEnableAd_ = !!_value_;
}
- (BOOL) enableAd {
  return !!enableAd_;
}
- (void) setEnableAd:(BOOL) _value_ {
  enableAd_ = !!_value_;
}
- (BOOL) hasEnableWall {
  return !!hasEnableWall_;
}
- (void) setHasEnableWall:(BOOL) _value_ {
  hasEnableWall_ = !!_value_;
}
- (BOOL) enableWall {
  return !!enableWall_;
}
- (void) setEnableWall:(BOOL) _value_ {
  enableWall_ = !!_value_;
}
- (BOOL) hasWallType {
  return !!hasWallType_;
}
- (void) setHasWallType:(BOOL) _value_ {
  hasWallType_ = !!_value_;
}
@synthesize wallType;
@synthesize rewardWallsArray;
@dynamic rewardWalls;
@synthesize appRewardsArray;
@dynamic appRewards;
- (BOOL) hasDrawConfig {
  return !!hasDrawConfig_;
}
- (void) setHasDrawConfig:(BOOL) _value_ {
  hasDrawConfig_ = !!_value_;
}
@synthesize drawConfig;
- (BOOL) hasDiceConfig {
  return !!hasDiceConfig_;
}
- (void) setHasDiceConfig:(BOOL) _value_ {
  hasDiceConfig_ = !!_value_;
}
@synthesize diceConfig;
- (BOOL) hasZjhConfig {
  return !!hasZjhConfig_;
}
- (void) setHasZjhConfig:(BOOL) _value_ {
  hasZjhConfig_ = !!_value_;
}
@synthesize zjhConfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.balanceDeviation = 4000;
    self.trafficApiserverUrl = @"http://www.place100.com:8100/api/i\?";
    self.userApiserverUrl = @"http://www.you100.me:8001/api/i\?";
    self.musicHomeCnUrl = @"http://m.easou.com/col.e\?id=112";
    self.musicHomeEnUrl = @"http://mp3skull.com/";
    self.enableReview = YES;
    self.inReview = NO;
    self.inReviewVersion = @"";
    self.postponeTime = 10;
    self.urgeTime = 5;
    self.enableAd = YES;
    self.enableWall = YES;
    self.wallType = 1;
    self.drawConfig = [PBDrawConfig defaultInstance];
    self.diceConfig = [PBDiceConfig defaultInstance];
    self.zjhConfig = [PBZJHConfig defaultInstance];
  }
  return self;
}
static PBConfig* defaultPBConfigInstance = nil;
+ (void) initialize {
  if (self == [PBConfig class]) {
    defaultPBConfigInstance = [[PBConfig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultPBConfigInstance;
}
- (NSArray *)coinPrices {
  return coinPricesArray;
}
- (PBPrice*)coinPricesAtIndex:(NSUInteger)index {
  return [coinPricesArray objectAtIndex:index];
}
- (NSArray *)rewardWalls {
  return rewardWallsArray;
}
- (PBRewardWall*)rewardWallsAtIndex:(NSUInteger)index {
  return [rewardWallsArray objectAtIndex:index];
}
- (NSArray *)appRewards {
  return appRewardsArray;
}
- (PBAppReward*)appRewardsAtIndex:(NSUInteger)index {
  return [appRewardsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitcoinPrices = YES;
   [self.coinPrices enumerateObjectsUsingBlock:^(PBPrice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcoinPrices = NO;
      *stop = YES;
    }
  }];
  if (!isInitcoinPrices) return isInitcoinPrices;
  __block BOOL isInitrewardWalls = YES;
   [self.rewardWalls enumerateObjectsUsingBlock:^(PBRewardWall *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrewardWalls = NO;
      *stop = YES;
    }
  }];
  if (!isInitrewardWalls) return isInitrewardWalls;
  __block BOOL isInitappRewards = YES;
   [self.appRewards enumerateObjectsUsingBlock:^(PBAppReward *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitappRewards = NO;
      *stop = YES;
    }
  }];
  if (!isInitappRewards) return isInitappRewards;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.coinPricesArray enumerateObjectsUsingBlock:^(PBPrice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasBalanceDeviation) {
    [output writeInt32:2 value:self.balanceDeviation];
  }
  if (self.hasTrafficApiserverUrl) {
    [output writeString:30 value:self.trafficApiserverUrl];
  }
  if (self.hasUserApiserverUrl) {
    [output writeString:31 value:self.userApiserverUrl];
  }
  if (self.hasMusicHomeCnUrl) {
    [output writeString:41 value:self.musicHomeCnUrl];
  }
  if (self.hasMusicHomeEnUrl) {
    [output writeString:42 value:self.musicHomeEnUrl];
  }
  if (self.hasEnableReview) {
    [output writeBool:61 value:self.enableReview];
  }
  if (self.hasInReview) {
    [output writeBool:62 value:self.inReview];
  }
  if (self.hasInReviewVersion) {
    [output writeString:63 value:self.inReviewVersion];
  }
  if (self.hasPostponeTime) {
    [output writeInt32:64 value:self.postponeTime];
  }
  if (self.hasUrgeTime) {
    [output writeInt32:65 value:self.urgeTime];
  }
  if (self.hasEnableAd) {
    [output writeBool:70 value:self.enableAd];
  }
  if (self.hasEnableWall) {
    [output writeBool:71 value:self.enableWall];
  }
  if (self.hasWallType) {
    [output writeInt32:72 value:self.wallType];
  }
  [self.rewardWallsArray enumerateObjectsUsingBlock:^(PBRewardWall *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:81 value:element];
  }];
  [self.appRewardsArray enumerateObjectsUsingBlock:^(PBAppReward *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:82 value:element];
  }];
  if (self.hasDrawConfig) {
    [output writeMessage:100 value:self.drawConfig];
  }
  if (self.hasDiceConfig) {
    [output writeMessage:101 value:self.diceConfig];
  }
  if (self.hasZjhConfig) {
    [output writeMessage:102 value:self.zjhConfig];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.coinPricesArray enumerateObjectsUsingBlock:^(PBPrice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasBalanceDeviation) {
    size_ += computeInt32Size(2, self.balanceDeviation);
  }
  if (self.hasTrafficApiserverUrl) {
    size_ += computeStringSize(30, self.trafficApiserverUrl);
  }
  if (self.hasUserApiserverUrl) {
    size_ += computeStringSize(31, self.userApiserverUrl);
  }
  if (self.hasMusicHomeCnUrl) {
    size_ += computeStringSize(41, self.musicHomeCnUrl);
  }
  if (self.hasMusicHomeEnUrl) {
    size_ += computeStringSize(42, self.musicHomeEnUrl);
  }
  if (self.hasEnableReview) {
    size_ += computeBoolSize(61, self.enableReview);
  }
  if (self.hasInReview) {
    size_ += computeBoolSize(62, self.inReview);
  }
  if (self.hasInReviewVersion) {
    size_ += computeStringSize(63, self.inReviewVersion);
  }
  if (self.hasPostponeTime) {
    size_ += computeInt32Size(64, self.postponeTime);
  }
  if (self.hasUrgeTime) {
    size_ += computeInt32Size(65, self.urgeTime);
  }
  if (self.hasEnableAd) {
    size_ += computeBoolSize(70, self.enableAd);
  }
  if (self.hasEnableWall) {
    size_ += computeBoolSize(71, self.enableWall);
  }
  if (self.hasWallType) {
    size_ += computeInt32Size(72, self.wallType);
  }
  [self.rewardWallsArray enumerateObjectsUsingBlock:^(PBRewardWall *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(81, element);
  }];
  [self.appRewardsArray enumerateObjectsUsingBlock:^(PBAppReward *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(82, element);
  }];
  if (self.hasDrawConfig) {
    size_ += computeMessageSize(100, self.drawConfig);
  }
  if (self.hasDiceConfig) {
    size_ += computeMessageSize(101, self.diceConfig);
  }
  if (self.hasZjhConfig) {
    size_ += computeMessageSize(102, self.zjhConfig);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBConfig*) parseFromData:(NSData*) data {
  return (PBConfig*)[[[PBConfig builder] mergeFromData:data] build];
}
+ (PBConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBConfig*)[[[PBConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBConfig*) parseFromInputStream:(NSInputStream*) input {
  return (PBConfig*)[[[PBConfig builder] mergeFromInputStream:input] build];
}
+ (PBConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBConfig*)[[[PBConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBConfig*)[[[PBConfig builder] mergeFromCodedInputStream:input] build];
}
+ (PBConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBConfig*)[[[PBConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBConfigBuilder*) builder {
  return [[PBConfigBuilder alloc] init];
}
+ (PBConfigBuilder*) builderWithPrototype:(PBConfig*) prototype {
  return [[PBConfig builder] mergeFrom:prototype];
}
- (PBConfigBuilder*) builder {
  return [PBConfig builder];
}
- (PBConfigBuilder*) toBuilder {
  return [PBConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.coinPricesArray enumerateObjectsUsingBlock:^(PBPrice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"coinPrices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBalanceDeviation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"balanceDeviation", [NSNumber numberWithInteger:self.balanceDeviation]];
  }
  if (self.hasTrafficApiserverUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"trafficApiserverUrl", self.trafficApiserverUrl];
  }
  if (self.hasUserApiserverUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userApiserverUrl", self.userApiserverUrl];
  }
  if (self.hasMusicHomeCnUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"musicHomeCnUrl", self.musicHomeCnUrl];
  }
  if (self.hasMusicHomeEnUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"musicHomeEnUrl", self.musicHomeEnUrl];
  }
  if (self.hasEnableReview) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enableReview", [NSNumber numberWithBool:self.enableReview]];
  }
  if (self.hasInReview) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inReview", [NSNumber numberWithBool:self.inReview]];
  }
  if (self.hasInReviewVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inReviewVersion", self.inReviewVersion];
  }
  if (self.hasPostponeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postponeTime", [NSNumber numberWithInteger:self.postponeTime]];
  }
  if (self.hasUrgeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"urgeTime", [NSNumber numberWithInteger:self.urgeTime]];
  }
  if (self.hasEnableAd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enableAd", [NSNumber numberWithBool:self.enableAd]];
  }
  if (self.hasEnableWall) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enableWall", [NSNumber numberWithBool:self.enableWall]];
  }
  if (self.hasWallType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wallType", [NSNumber numberWithInteger:self.wallType]];
  }
  [self.rewardWallsArray enumerateObjectsUsingBlock:^(PBRewardWall *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rewardWalls"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.appRewardsArray enumerateObjectsUsingBlock:^(PBAppReward *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"appRewards"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDrawConfig) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawConfig"];
    [self.drawConfig writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDiceConfig) {
    [output appendFormat:@"%@%@ {\n", indent, @"diceConfig"];
    [self.diceConfig writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasZjhConfig) {
    [output appendFormat:@"%@%@ {\n", indent, @"zjhConfig"];
    [self.zjhConfig writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBConfig class]]) {
    return NO;
  }
  PBConfig *otherMessage = other;
  return
      [self.coinPricesArray isEqualToArray:otherMessage.coinPricesArray] &&
      self.hasBalanceDeviation == otherMessage.hasBalanceDeviation &&
      (!self.hasBalanceDeviation || self.balanceDeviation == otherMessage.balanceDeviation) &&
      self.hasTrafficApiserverUrl == otherMessage.hasTrafficApiserverUrl &&
      (!self.hasTrafficApiserverUrl || [self.trafficApiserverUrl isEqual:otherMessage.trafficApiserverUrl]) &&
      self.hasUserApiserverUrl == otherMessage.hasUserApiserverUrl &&
      (!self.hasUserApiserverUrl || [self.userApiserverUrl isEqual:otherMessage.userApiserverUrl]) &&
      self.hasMusicHomeCnUrl == otherMessage.hasMusicHomeCnUrl &&
      (!self.hasMusicHomeCnUrl || [self.musicHomeCnUrl isEqual:otherMessage.musicHomeCnUrl]) &&
      self.hasMusicHomeEnUrl == otherMessage.hasMusicHomeEnUrl &&
      (!self.hasMusicHomeEnUrl || [self.musicHomeEnUrl isEqual:otherMessage.musicHomeEnUrl]) &&
      self.hasEnableReview == otherMessage.hasEnableReview &&
      (!self.hasEnableReview || self.enableReview == otherMessage.enableReview) &&
      self.hasInReview == otherMessage.hasInReview &&
      (!self.hasInReview || self.inReview == otherMessage.inReview) &&
      self.hasInReviewVersion == otherMessage.hasInReviewVersion &&
      (!self.hasInReviewVersion || [self.inReviewVersion isEqual:otherMessage.inReviewVersion]) &&
      self.hasPostponeTime == otherMessage.hasPostponeTime &&
      (!self.hasPostponeTime || self.postponeTime == otherMessage.postponeTime) &&
      self.hasUrgeTime == otherMessage.hasUrgeTime &&
      (!self.hasUrgeTime || self.urgeTime == otherMessage.urgeTime) &&
      self.hasEnableAd == otherMessage.hasEnableAd &&
      (!self.hasEnableAd || self.enableAd == otherMessage.enableAd) &&
      self.hasEnableWall == otherMessage.hasEnableWall &&
      (!self.hasEnableWall || self.enableWall == otherMessage.enableWall) &&
      self.hasWallType == otherMessage.hasWallType &&
      (!self.hasWallType || self.wallType == otherMessage.wallType) &&
      [self.rewardWallsArray isEqualToArray:otherMessage.rewardWallsArray] &&
      [self.appRewardsArray isEqualToArray:otherMessage.appRewardsArray] &&
      self.hasDrawConfig == otherMessage.hasDrawConfig &&
      (!self.hasDrawConfig || [self.drawConfig isEqual:otherMessage.drawConfig]) &&
      self.hasDiceConfig == otherMessage.hasDiceConfig &&
      (!self.hasDiceConfig || [self.diceConfig isEqual:otherMessage.diceConfig]) &&
      self.hasZjhConfig == otherMessage.hasZjhConfig &&
      (!self.hasZjhConfig || [self.zjhConfig isEqual:otherMessage.zjhConfig]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.coinPricesArray enumerateObjectsUsingBlock:^(PBPrice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBalanceDeviation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.balanceDeviation] hash];
  }
  if (self.hasTrafficApiserverUrl) {
    hashCode = hashCode * 31 + [self.trafficApiserverUrl hash];
  }
  if (self.hasUserApiserverUrl) {
    hashCode = hashCode * 31 + [self.userApiserverUrl hash];
  }
  if (self.hasMusicHomeCnUrl) {
    hashCode = hashCode * 31 + [self.musicHomeCnUrl hash];
  }
  if (self.hasMusicHomeEnUrl) {
    hashCode = hashCode * 31 + [self.musicHomeEnUrl hash];
  }
  if (self.hasEnableReview) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enableReview] hash];
  }
  if (self.hasInReview) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inReview] hash];
  }
  if (self.hasInReviewVersion) {
    hashCode = hashCode * 31 + [self.inReviewVersion hash];
  }
  if (self.hasPostponeTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.postponeTime] hash];
  }
  if (self.hasUrgeTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.urgeTime] hash];
  }
  if (self.hasEnableAd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enableAd] hash];
  }
  if (self.hasEnableWall) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enableWall] hash];
  }
  if (self.hasWallType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.wallType] hash];
  }
  [self.rewardWallsArray enumerateObjectsUsingBlock:^(PBRewardWall *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.appRewardsArray enumerateObjectsUsingBlock:^(PBAppReward *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDrawConfig) {
    hashCode = hashCode * 31 + [self.drawConfig hash];
  }
  if (self.hasDiceConfig) {
    hashCode = hashCode * 31 + [self.diceConfig hash];
  }
  if (self.hasZjhConfig) {
    hashCode = hashCode * 31 + [self.zjhConfig hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBConfigBuilder()
@property (strong) PBConfig* resultPbconfig;
@end

@implementation PBConfigBuilder
@synthesize resultPbconfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbconfig = [[PBConfig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbconfig;
}
- (PBConfigBuilder*) clear {
  self.resultPbconfig = [[PBConfig alloc] init];
  return self;
}
- (PBConfigBuilder*) clone {
  return [PBConfig builderWithPrototype:resultPbconfig];
}
- (PBConfig*) defaultInstance {
  return [PBConfig defaultInstance];
}
- (PBConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBConfig*) buildPartial {
  PBConfig* returnMe = resultPbconfig;
  self.resultPbconfig = nil;
  return returnMe;
}
- (PBConfigBuilder*) mergeFrom:(PBConfig*) other {
  if (other == [PBConfig defaultInstance]) {
    return self;
  }
  if (other.coinPricesArray.count > 0) {
    if (resultPbconfig.coinPricesArray == nil) {
      resultPbconfig.coinPricesArray = [[NSMutableArray alloc] initWithArray:other.coinPricesArray];
    } else {
      [resultPbconfig.coinPricesArray addObjectsFromArray:other.coinPricesArray];
    }
  }
  if (other.hasBalanceDeviation) {
    [self setBalanceDeviation:other.balanceDeviation];
  }
  if (other.hasTrafficApiserverUrl) {
    [self setTrafficApiserverUrl:other.trafficApiserverUrl];
  }
  if (other.hasUserApiserverUrl) {
    [self setUserApiserverUrl:other.userApiserverUrl];
  }
  if (other.hasMusicHomeCnUrl) {
    [self setMusicHomeCnUrl:other.musicHomeCnUrl];
  }
  if (other.hasMusicHomeEnUrl) {
    [self setMusicHomeEnUrl:other.musicHomeEnUrl];
  }
  if (other.hasEnableReview) {
    [self setEnableReview:other.enableReview];
  }
  if (other.hasInReview) {
    [self setInReview:other.inReview];
  }
  if (other.hasInReviewVersion) {
    [self setInReviewVersion:other.inReviewVersion];
  }
  if (other.hasPostponeTime) {
    [self setPostponeTime:other.postponeTime];
  }
  if (other.hasUrgeTime) {
    [self setUrgeTime:other.urgeTime];
  }
  if (other.hasEnableAd) {
    [self setEnableAd:other.enableAd];
  }
  if (other.hasEnableWall) {
    [self setEnableWall:other.enableWall];
  }
  if (other.hasWallType) {
    [self setWallType:other.wallType];
  }
  if (other.rewardWallsArray.count > 0) {
    if (resultPbconfig.rewardWallsArray == nil) {
      resultPbconfig.rewardWallsArray = [[NSMutableArray alloc] initWithArray:other.rewardWallsArray];
    } else {
      [resultPbconfig.rewardWallsArray addObjectsFromArray:other.rewardWallsArray];
    }
  }
  if (other.appRewardsArray.count > 0) {
    if (resultPbconfig.appRewardsArray == nil) {
      resultPbconfig.appRewardsArray = [[NSMutableArray alloc] initWithArray:other.appRewardsArray];
    } else {
      [resultPbconfig.appRewardsArray addObjectsFromArray:other.appRewardsArray];
    }
  }
  if (other.hasDrawConfig) {
    [self mergeDrawConfig:other.drawConfig];
  }
  if (other.hasDiceConfig) {
    [self mergeDiceConfig:other.diceConfig];
  }
  if (other.hasZjhConfig) {
    [self mergeZjhConfig:other.zjhConfig];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBPriceBuilder* subBuilder = [PBPrice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCoinPrices:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setBalanceDeviation:[input readInt32]];
        break;
      }
      case 242: {
        [self setTrafficApiserverUrl:[input readString]];
        break;
      }
      case 250: {
        [self setUserApiserverUrl:[input readString]];
        break;
      }
      case 330: {
        [self setMusicHomeCnUrl:[input readString]];
        break;
      }
      case 338: {
        [self setMusicHomeEnUrl:[input readString]];
        break;
      }
      case 488: {
        [self setEnableReview:[input readBool]];
        break;
      }
      case 496: {
        [self setInReview:[input readBool]];
        break;
      }
      case 506: {
        [self setInReviewVersion:[input readString]];
        break;
      }
      case 512: {
        [self setPostponeTime:[input readInt32]];
        break;
      }
      case 520: {
        [self setUrgeTime:[input readInt32]];
        break;
      }
      case 560: {
        [self setEnableAd:[input readBool]];
        break;
      }
      case 568: {
        [self setEnableWall:[input readBool]];
        break;
      }
      case 576: {
        [self setWallType:[input readInt32]];
        break;
      }
      case 650: {
        PBRewardWallBuilder* subBuilder = [PBRewardWall builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRewardWalls:[subBuilder buildPartial]];
        break;
      }
      case 658: {
        PBAppRewardBuilder* subBuilder = [PBAppReward builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAppRewards:[subBuilder buildPartial]];
        break;
      }
      case 802: {
        PBDrawConfigBuilder* subBuilder = [PBDrawConfig builder];
        if (self.hasDrawConfig) {
          [subBuilder mergeFrom:self.drawConfig];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawConfig:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        PBDiceConfigBuilder* subBuilder = [PBDiceConfig builder];
        if (self.hasDiceConfig) {
          [subBuilder mergeFrom:self.diceConfig];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDiceConfig:[subBuilder buildPartial]];
        break;
      }
      case 818: {
        PBZJHConfigBuilder* subBuilder = [PBZJHConfig builder];
        if (self.hasZjhConfig) {
          [subBuilder mergeFrom:self.zjhConfig];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZjhConfig:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)coinPrices {
  return resultPbconfig.coinPricesArray;
}
- (PBPrice*)coinPricesAtIndex:(NSUInteger)index {
  return [resultPbconfig coinPricesAtIndex:index];
}
- (PBConfigBuilder *)addCoinPrices:(PBPrice*)value {
  if (resultPbconfig.coinPricesArray == nil) {
    resultPbconfig.coinPricesArray = [[NSMutableArray alloc]init];
  }
  [resultPbconfig.coinPricesArray addObject:value];
  return self;
}
- (PBConfigBuilder *)setCoinPricesArray:(NSArray *)array {
  resultPbconfig.coinPricesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBConfigBuilder *)clearCoinPrices {
  resultPbconfig.coinPricesArray = nil;
  return self;
}
- (BOOL) hasBalanceDeviation {
  return resultPbconfig.hasBalanceDeviation;
}
- (SInt32) balanceDeviation {
  return resultPbconfig.balanceDeviation;
}
- (PBConfigBuilder*) setBalanceDeviation:(SInt32) value {
  resultPbconfig.hasBalanceDeviation = YES;
  resultPbconfig.balanceDeviation = value;
  return self;
}
- (PBConfigBuilder*) clearBalanceDeviation {
  resultPbconfig.hasBalanceDeviation = NO;
  resultPbconfig.balanceDeviation = 4000;
  return self;
}
- (BOOL) hasTrafficApiserverUrl {
  return resultPbconfig.hasTrafficApiserverUrl;
}
- (NSString*) trafficApiserverUrl {
  return resultPbconfig.trafficApiserverUrl;
}
- (PBConfigBuilder*) setTrafficApiserverUrl:(NSString*) value {
  resultPbconfig.hasTrafficApiserverUrl = YES;
  resultPbconfig.trafficApiserverUrl = value;
  return self;
}
- (PBConfigBuilder*) clearTrafficApiserverUrl {
  resultPbconfig.hasTrafficApiserverUrl = NO;
  resultPbconfig.trafficApiserverUrl = @"http://www.place100.com:8100/api/i\?";
  return self;
}
- (BOOL) hasUserApiserverUrl {
  return resultPbconfig.hasUserApiserverUrl;
}
- (NSString*) userApiserverUrl {
  return resultPbconfig.userApiserverUrl;
}
- (PBConfigBuilder*) setUserApiserverUrl:(NSString*) value {
  resultPbconfig.hasUserApiserverUrl = YES;
  resultPbconfig.userApiserverUrl = value;
  return self;
}
- (PBConfigBuilder*) clearUserApiserverUrl {
  resultPbconfig.hasUserApiserverUrl = NO;
  resultPbconfig.userApiserverUrl = @"http://www.you100.me:8001/api/i\?";
  return self;
}
- (BOOL) hasMusicHomeCnUrl {
  return resultPbconfig.hasMusicHomeCnUrl;
}
- (NSString*) musicHomeCnUrl {
  return resultPbconfig.musicHomeCnUrl;
}
- (PBConfigBuilder*) setMusicHomeCnUrl:(NSString*) value {
  resultPbconfig.hasMusicHomeCnUrl = YES;
  resultPbconfig.musicHomeCnUrl = value;
  return self;
}
- (PBConfigBuilder*) clearMusicHomeCnUrl {
  resultPbconfig.hasMusicHomeCnUrl = NO;
  resultPbconfig.musicHomeCnUrl = @"http://m.easou.com/col.e\?id=112";
  return self;
}
- (BOOL) hasMusicHomeEnUrl {
  return resultPbconfig.hasMusicHomeEnUrl;
}
- (NSString*) musicHomeEnUrl {
  return resultPbconfig.musicHomeEnUrl;
}
- (PBConfigBuilder*) setMusicHomeEnUrl:(NSString*) value {
  resultPbconfig.hasMusicHomeEnUrl = YES;
  resultPbconfig.musicHomeEnUrl = value;
  return self;
}
- (PBConfigBuilder*) clearMusicHomeEnUrl {
  resultPbconfig.hasMusicHomeEnUrl = NO;
  resultPbconfig.musicHomeEnUrl = @"http://mp3skull.com/";
  return self;
}
- (BOOL) hasEnableReview {
  return resultPbconfig.hasEnableReview;
}
- (BOOL) enableReview {
  return resultPbconfig.enableReview;
}
- (PBConfigBuilder*) setEnableReview:(BOOL) value {
  resultPbconfig.hasEnableReview = YES;
  resultPbconfig.enableReview = value;
  return self;
}
- (PBConfigBuilder*) clearEnableReview {
  resultPbconfig.hasEnableReview = NO;
  resultPbconfig.enableReview = YES;
  return self;
}
- (BOOL) hasInReview {
  return resultPbconfig.hasInReview;
}
- (BOOL) inReview {
  return resultPbconfig.inReview;
}
- (PBConfigBuilder*) setInReview:(BOOL) value {
  resultPbconfig.hasInReview = YES;
  resultPbconfig.inReview = value;
  return self;
}
- (PBConfigBuilder*) clearInReview {
  resultPbconfig.hasInReview = NO;
  resultPbconfig.inReview = NO;
  return self;
}
- (BOOL) hasInReviewVersion {
  return resultPbconfig.hasInReviewVersion;
}
- (NSString*) inReviewVersion {
  return resultPbconfig.inReviewVersion;
}
- (PBConfigBuilder*) setInReviewVersion:(NSString*) value {
  resultPbconfig.hasInReviewVersion = YES;
  resultPbconfig.inReviewVersion = value;
  return self;
}
- (PBConfigBuilder*) clearInReviewVersion {
  resultPbconfig.hasInReviewVersion = NO;
  resultPbconfig.inReviewVersion = @"";
  return self;
}
- (BOOL) hasPostponeTime {
  return resultPbconfig.hasPostponeTime;
}
- (SInt32) postponeTime {
  return resultPbconfig.postponeTime;
}
- (PBConfigBuilder*) setPostponeTime:(SInt32) value {
  resultPbconfig.hasPostponeTime = YES;
  resultPbconfig.postponeTime = value;
  return self;
}
- (PBConfigBuilder*) clearPostponeTime {
  resultPbconfig.hasPostponeTime = NO;
  resultPbconfig.postponeTime = 10;
  return self;
}
- (BOOL) hasUrgeTime {
  return resultPbconfig.hasUrgeTime;
}
- (SInt32) urgeTime {
  return resultPbconfig.urgeTime;
}
- (PBConfigBuilder*) setUrgeTime:(SInt32) value {
  resultPbconfig.hasUrgeTime = YES;
  resultPbconfig.urgeTime = value;
  return self;
}
- (PBConfigBuilder*) clearUrgeTime {
  resultPbconfig.hasUrgeTime = NO;
  resultPbconfig.urgeTime = 5;
  return self;
}
- (BOOL) hasEnableAd {
  return resultPbconfig.hasEnableAd;
}
- (BOOL) enableAd {
  return resultPbconfig.enableAd;
}
- (PBConfigBuilder*) setEnableAd:(BOOL) value {
  resultPbconfig.hasEnableAd = YES;
  resultPbconfig.enableAd = value;
  return self;
}
- (PBConfigBuilder*) clearEnableAd {
  resultPbconfig.hasEnableAd = NO;
  resultPbconfig.enableAd = YES;
  return self;
}
- (BOOL) hasEnableWall {
  return resultPbconfig.hasEnableWall;
}
- (BOOL) enableWall {
  return resultPbconfig.enableWall;
}
- (PBConfigBuilder*) setEnableWall:(BOOL) value {
  resultPbconfig.hasEnableWall = YES;
  resultPbconfig.enableWall = value;
  return self;
}
- (PBConfigBuilder*) clearEnableWall {
  resultPbconfig.hasEnableWall = NO;
  resultPbconfig.enableWall = YES;
  return self;
}
- (BOOL) hasWallType {
  return resultPbconfig.hasWallType;
}
- (SInt32) wallType {
  return resultPbconfig.wallType;
}
- (PBConfigBuilder*) setWallType:(SInt32) value {
  resultPbconfig.hasWallType = YES;
  resultPbconfig.wallType = value;
  return self;
}
- (PBConfigBuilder*) clearWallType {
  resultPbconfig.hasWallType = NO;
  resultPbconfig.wallType = 1;
  return self;
}
- (NSMutableArray *)rewardWalls {
  return resultPbconfig.rewardWallsArray;
}
- (PBRewardWall*)rewardWallsAtIndex:(NSUInteger)index {
  return [resultPbconfig rewardWallsAtIndex:index];
}
- (PBConfigBuilder *)addRewardWalls:(PBRewardWall*)value {
  if (resultPbconfig.rewardWallsArray == nil) {
    resultPbconfig.rewardWallsArray = [[NSMutableArray alloc]init];
  }
  [resultPbconfig.rewardWallsArray addObject:value];
  return self;
}
- (PBConfigBuilder *)setRewardWallsArray:(NSArray *)array {
  resultPbconfig.rewardWallsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBConfigBuilder *)clearRewardWalls {
  resultPbconfig.rewardWallsArray = nil;
  return self;
}
- (NSMutableArray *)appRewards {
  return resultPbconfig.appRewardsArray;
}
- (PBAppReward*)appRewardsAtIndex:(NSUInteger)index {
  return [resultPbconfig appRewardsAtIndex:index];
}
- (PBConfigBuilder *)addAppRewards:(PBAppReward*)value {
  if (resultPbconfig.appRewardsArray == nil) {
    resultPbconfig.appRewardsArray = [[NSMutableArray alloc]init];
  }
  [resultPbconfig.appRewardsArray addObject:value];
  return self;
}
- (PBConfigBuilder *)setAppRewardsArray:(NSArray *)array {
  resultPbconfig.appRewardsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBConfigBuilder *)clearAppRewards {
  resultPbconfig.appRewardsArray = nil;
  return self;
}
- (BOOL) hasDrawConfig {
  return resultPbconfig.hasDrawConfig;
}
- (PBDrawConfig*) drawConfig {
  return resultPbconfig.drawConfig;
}
- (PBConfigBuilder*) setDrawConfig:(PBDrawConfig*) value {
  resultPbconfig.hasDrawConfig = YES;
  resultPbconfig.drawConfig = value;
  return self;
}
- (PBConfigBuilder*) setDrawConfigBuilder:(PBDrawConfigBuilder*) builderForValue {
  return [self setDrawConfig:[builderForValue build]];
}
- (PBConfigBuilder*) mergeDrawConfig:(PBDrawConfig*) value {
  if (resultPbconfig.hasDrawConfig &&
      resultPbconfig.drawConfig != [PBDrawConfig defaultInstance]) {
    resultPbconfig.drawConfig =
      [[[PBDrawConfig builderWithPrototype:resultPbconfig.drawConfig] mergeFrom:value] buildPartial];
  } else {
    resultPbconfig.drawConfig = value;
  }
  resultPbconfig.hasDrawConfig = YES;
  return self;
}
- (PBConfigBuilder*) clearDrawConfig {
  resultPbconfig.hasDrawConfig = NO;
  resultPbconfig.drawConfig = [PBDrawConfig defaultInstance];
  return self;
}
- (BOOL) hasDiceConfig {
  return resultPbconfig.hasDiceConfig;
}
- (PBDiceConfig*) diceConfig {
  return resultPbconfig.diceConfig;
}
- (PBConfigBuilder*) setDiceConfig:(PBDiceConfig*) value {
  resultPbconfig.hasDiceConfig = YES;
  resultPbconfig.diceConfig = value;
  return self;
}
- (PBConfigBuilder*) setDiceConfigBuilder:(PBDiceConfigBuilder*) builderForValue {
  return [self setDiceConfig:[builderForValue build]];
}
- (PBConfigBuilder*) mergeDiceConfig:(PBDiceConfig*) value {
  if (resultPbconfig.hasDiceConfig &&
      resultPbconfig.diceConfig != [PBDiceConfig defaultInstance]) {
    resultPbconfig.diceConfig =
      [[[PBDiceConfig builderWithPrototype:resultPbconfig.diceConfig] mergeFrom:value] buildPartial];
  } else {
    resultPbconfig.diceConfig = value;
  }
  resultPbconfig.hasDiceConfig = YES;
  return self;
}
- (PBConfigBuilder*) clearDiceConfig {
  resultPbconfig.hasDiceConfig = NO;
  resultPbconfig.diceConfig = [PBDiceConfig defaultInstance];
  return self;
}
- (BOOL) hasZjhConfig {
  return resultPbconfig.hasZjhConfig;
}
- (PBZJHConfig*) zjhConfig {
  return resultPbconfig.zjhConfig;
}
- (PBConfigBuilder*) setZjhConfig:(PBZJHConfig*) value {
  resultPbconfig.hasZjhConfig = YES;
  resultPbconfig.zjhConfig = value;
  return self;
}
- (PBConfigBuilder*) setZjhConfigBuilder:(PBZJHConfigBuilder*) builderForValue {
  return [self setZjhConfig:[builderForValue build]];
}
- (PBConfigBuilder*) mergeZjhConfig:(PBZJHConfig*) value {
  if (resultPbconfig.hasZjhConfig &&
      resultPbconfig.zjhConfig != [PBZJHConfig defaultInstance]) {
    resultPbconfig.zjhConfig =
      [[[PBZJHConfig builderWithPrototype:resultPbconfig.zjhConfig] mergeFrom:value] buildPartial];
  } else {
    resultPbconfig.zjhConfig = value;
  }
  resultPbconfig.hasZjhConfig = YES;
  return self;
}
- (PBConfigBuilder*) clearZjhConfig {
  resultPbconfig.hasZjhConfig = NO;
  resultPbconfig.zjhConfig = [PBZJHConfig defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
