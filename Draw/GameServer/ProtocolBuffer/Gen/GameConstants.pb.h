// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

// @@protoc_insertion_point(imports)

#ifndef __has_feature
  #define __has_feature(x) 0 // Compatibility with non-clang compilers.
#endif // __has_feature

#ifndef NS_RETURNS_NOT_RETAINED
  #if __has_feature(attribute_ns_returns_not_retained)
    #define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
  #else
    #define NS_RETURNS_NOT_RETAINED
  #endif
#endif

typedef NS_ENUM(SInt32, GameCommandType) {
  GameCommandTypeJoinGameRequest = 1,
  GameCommandTypeJoinGameResponse = 2,
  GameCommandTypeStartGameRequest = 3,
  GameCommandTypeStartGameResponse = 4,
  GameCommandTypeQuitGameRequest = 5,
  GameCommandTypeQuitGameResponse = 6,
  GameCommandTypeSendDrawDataRequest = 11,
  GameCommandTypeSendDrawDataResponse = 12,
  GameCommandTypeCleanDrawRequest = 13,
  GameCommandTypeCleanDrawResponse = 14,
  GameCommandTypeChatRequest = 15,
  GameCommandTypeChatResponse = 16,
  GameCommandTypeCompleteGameRequest = 17,
  GameCommandTypeCompleteGameResponse = 18,
  GameCommandTypeForceUserQuitRequest = 19,
  GameCommandTypeForceUserQuitResponse = 20,
  GameCommandTypeFacetimeChatRequest = 81,
  GameCommandTypeFacetimeChatResponse = 82,
  GameCommandTypeFacetimeChatStart = 83,
  GameCommandTypeKeepAliveRequest = 91,
  GameCommandTypeKeepAliveResponse = 92,
  GameCommandTypeGetRoomsRequest = 601,
  GameCommandTypeGetRoomsResponse = 602,
  GameCommandTypeCreateRoomRequest = 603,
  GameCommandTypeCreateRoomResponse = 604,
  GameCommandTypeEnterRoomRequest = 605,
  GameCommandTypeEnterRoomResponse = 606,
  GameCommandTypeRegisterRoomsNotificationRequest = 607,
  GameCommandTypeRegisterRoomsNotificationResponse = 608,
  GameCommandTypeUnregisterRoomsNotificationRequest = 609,
  GameCommandTypeUnregisterRoomsNotificationResponse = 610,
  GameCommandTypeSerachRoomRequest = 611,
  GameCommandTypeSearchRoomResponse = 612,
  GameCommandTypeCallDiceRequest = 621,
  GameCommandTypeCallDiceResponse = 622,
  GameCommandTypeOpenDiceRequest = 623,
  GameCommandTypeOpenDiceResponse = 624,
  GameCommandTypeBetDiceRequest = 625,
  GameCommandTypeBetDiceResponse = 626,
  GameCommandTypeUseItemRequest = 631,
  GameCommandTypeUseItemResponse = 632,
  GameCommandTypeBetRequest = 801,
  GameCommandTypeBetResponse = 802,
  GameCommandTypeCheckCardRequest = 803,
  GameCommandTypeCheckCardResponse = 804,
  GameCommandTypeFoldCardRequest = 807,
  GameCommandTypeFoldCardResponse = 808,
  GameCommandTypeShowCardRequest = 809,
  GameCommandTypeShowCardResponse = 810,
  GameCommandTypeCompareCardRequest = 811,
  GameCommandTypeCompareCardResponse = 812,
  GameCommandTypeChangeCardRequest = 813,
  GameCommandTypeChangeCardResponse = 814,
  GameCommandTypeTimeoutSettingRequest = 815,
  GameCommandTypeTimeoutSettingResponse = 816,
  GameCommandTypeUserJoinNotificationRequest = 51,
  GameCommandTypeUserJoinNotificationResponse = 52,
  GameCommandTypeUserQuitNotificationRequest = 53,
  GameCommandTypeUserQuitNotificationResponse = 54,
  GameCommandTypeGameStartNotificationRequest = 55,
  GameCommandTypeGameStartNotificationResponse = 56,
  GameCommandTypeHostChangeNotificationRequest = 61,
  GameCommandTypeHostChangeNotificationResponse = 62,
  GameCommandTypeNewDrawDataNotificationRequest = 71,
  GameCommandTypeNewDrawDataNotificationResponse = 72,
  GameCommandTypeCleanDrawNotificationRequest = 73,
  GameCommandTypeCleanDrawNotificationResponse = 74,
  GameCommandTypeChatNotificationRequest = 75,
  GameCommandTypeChatNotificationResponse = 76,
  GameCommandTypeGameTurnCompleteNotificationRequest = 77,
  GameCommandTypeGameTurnCompleteNotificationResponse = 78,
  GameCommandTypeLocalChannelDisconnect = 201,
  GameCommandTypeLocalFinishGame = 203,
  GameCommandTypeLocalJoinGame = 204,
  GameCommandTypeLocalGameTurnComplete = 205,
  GameCommandTypeLocalUserTimeOut = 206,
  GameCommandTypeLocalNewUserJoin = 301,
  GameCommandTypeLocalUserQuit = 302,
  GameCommandTypeLocalDrawUserQuit = 303,
  GameCommandTypeLocalAllOtherUserQuit = 304,
  GameCommandTypeLocalOtherUserQuit = 305,
  GameCommandTypeLocalTimeOut = 306,
  GameCommandTypeLocalStartGame = 307,
  GameCommandTypeLocalAllUserQuit = 308,
  GameCommandTypeLocalAllUserGuess = 309,
  GameCommandTypeLocalDrawUserChat = 310,
  GameCommandTypeLocalPlayUserQuit = 311,
  GameCommandTypeLocalCallDice = 312,
  GameCommandTypeLocalOpenDice = 313,
  GameCommandTypeLocalUserSkip = 314,
  GameCommandTypeLocalAllUserBet = 315,
  GameCommandTypeLocalBet = 316,
  GameCommandTypeLocalCheckCard = 317,
  GameCommandTypeLocalFoldCard = 318,
  GameCommandTypeLocalShowCard = 319,
  GameCommandTypeLocalCompareCard = 320,
  GameCommandTypeLocalNotCurrentTurnFoldCard = 321,
  GameCommandTypeLocalChangeCard = 322,
  GameCommandTypeLocalWordPicked = 323,
  GameCommandTypeRoomNotificationRequest = 701,
  GameCommandTypeRoomNotificationResponse = 702,
  GameCommandTypeRollDiceBeginNotificationRequest = 711,
  GameCommandTypeRollDiceBeginNotificationResponse = 712,
  GameCommandTypeRollDiceEndNotificationRequest = 713,
  GameCommandTypeRollDiceEndNotificationResponse = 714,
  GameCommandTypeNextPlayerStartNotificationRequest = 715,
  GameCommandTypeNextPlayerStartNotificationResponse = 716,
  GameCommandTypeUserDiceNotification = 717,
  GameCommandTypeGameOverNotificationRequest = 731,
  GameCommandTypeGameOverNotificationResponse = 732,
};

BOOL GameCommandTypeIsValidValue(GameCommandType value);
NSString *NSStringFromGameCommandType(GameCommandType value);

typedef NS_ENUM(SInt32, GameResultCode) {
  GameResultCodeSuccess = 0,
  GameResultCodeErrorJoinGame = 1,
  GameResultCodeErrorUseridNull = 100,
  GameResultCodeErrorUserCannotStartGame = 101,
  GameResultCodeErrorUserNotInSession = 102,
  GameResultCodeErrorUserNotCurrentPlayUser = 103,
  GameResultCodeErrorCurrentPlayUserNull = 104,
  GameResultCodeErrorNoSessionId = 200,
  GameResultCodeErrorNextStateNotFound = 201,
  GameResultCodeErrorSessionidNull = 202,
  GameResultCodeErrorSessionAlreadyStart = 203,
  GameResultCodeErrorSessionNotStart = 204,
  GameResultCodeErrorNoSessionAvailable = 205,
  GameResultCodeErrorSessionidFull = 206,
  GameResultCodeErrorSessionNameDuplicated = 207,
  GameResultCodeErrorNoDrawData = 301,
  GameResultCodeErrorDiceAlreadyOpen = 401,
  GameResultCodeErrorUserAlreadyCallDice = 402,
  GameResultCodeErrorDiceOpenSelf = 403,
  GameResultCodeErrorCannotBet = 451,
  GameResultCodeErrorAlreadyCheckCard = 452,
  GameResultCodeErrorCannotCheckCard = 453,
  GameResultCodeErrorAlreadyFoldCard = 454,
  GameResultCodeErrorCannotFoldCard = 455,
  GameResultCodeErrorAlreadyShowCard = 456,
  GameResultCodeErrorCannotShowCard = 457,
  GameResultCodeErrorAlreadyCompareCard = 458,
  GameResultCodeErrorCannotCompareCard = 459,
  GameResultCodeErrorExcessChahgeQuota = 460,
  GameResultCodeErrorAlreadyChangeCardThisRound = 461,
  GameResultCodeErrorUnknownItem = 501,
  GameResultCodeErrorExcessTimeLimit = 502,
  GameResultCodeErrorSystemHandlerNotFound = 910,
  GameResultCodeErrorSystemException = 911,
  GameResultCodeErrorSystemSecurityCheck = 912,
};

BOOL GameResultCodeIsValidValue(GameResultCode value);
NSString *NSStringFromGameResultCode(GameResultCode value);

typedef NS_ENUM(SInt32, GameCompleteReason) {
  GameCompleteReasonReasonNotComplete = 0,
  GameCompleteReasonReasonAllUserGuess = 1,
  GameCompleteReasonReasonAllUserQuit = 11,
  GameCompleteReasonReasonDrawUserQuit = 12,
  GameCompleteReasonReasonOnlyOneUser = 13,
  GameCompleteReasonReasonExpired = 21,
};

BOOL GameCompleteReasonIsValidValue(GameCompleteReason value);
NSString *NSStringFromGameCompleteReason(GameCompleteReason value);

typedef NS_ENUM(SInt32, GameChatType) {
  GameChatTypeChatGroup = 0,
  GameChatTypeChatPrivate = 1,
};

BOOL GameChatTypeIsValidValue(GameChatType value);
NSString *NSStringFromGameChatType(GameChatType value);

typedef NS_ENUM(SInt32, DiceGameRuleType) {
  DiceGameRuleTypeRuleNormal = 0,
  DiceGameRuleTypeRuleHigh = 1,
  DiceGameRuleTypeRuleSuperHigh = 2,
};

BOOL DiceGameRuleTypeIsValidValue(DiceGameRuleType value);
NSString *NSStringFromDiceGameRuleType(DiceGameRuleType value);

typedef NS_ENUM(SInt32, PBWordType) {
  PBWordTypeSystem = 1,
  PBWordTypeCustom = 2,
  PBWordTypeHot = 3,
};

BOOL PBWordTypeIsValidValue(PBWordType value);
NSString *NSStringFromPBWordType(PBWordType value);

typedef NS_ENUM(SInt32, PBWallType) {
  PBWallTypeOpuses = 1,
};

BOOL PBWallTypeIsValidValue(PBWallType value);
NSString *NSStringFromPBWallType(PBWallType value);

typedef NS_ENUM(SInt32, PBMessageType) {
  PBMessageTypeText = 0,
  PBMessageTypeLocationRequest = 1,
  PBMessageTypeLocationResponse = 2,
  PBMessageTypeDraw = 4,
  PBMessageTypeImage = 5,
  PBMessageTypeVoice = 6,
};

BOOL PBMessageTypeIsValidValue(PBMessageType value);
NSString *NSStringFromPBMessageType(PBMessageType value);

typedef NS_ENUM(SInt32, PBContestStatus) {
  PBContestStatusPending = 1,
  PBContestStatusRunning = 2,
  PBContestStatusPassed = 3,
  PBContestStatusDeleted = 4,
};

BOOL PBContestStatusIsValidValue(PBContestStatus value);
NSString *NSStringFromPBContestStatus(PBContestStatus value);

typedef NS_ENUM(SInt32, PBOpusCategoryType) {
  PBOpusCategoryTypeDrawCategory = 0,
  PBOpusCategoryTypeSingCategory = 1,
  PBOpusCategoryTypeAskPsCategory = 2,
};

BOOL PBOpusCategoryTypeIsValidValue(PBOpusCategoryType value);
NSString *NSStringFromPBOpusCategoryType(PBOpusCategoryType value);


@interface GameConstantsRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end


// @@protoc_insertion_point(global_scope)
