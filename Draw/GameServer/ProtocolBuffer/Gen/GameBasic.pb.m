// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameBasic.pb.h"

@implementation GameBasicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameBasicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBGameUser ()
@property (retain) NSString* userId;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@end

@implementation PBGameUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
- (void) dealloc {
  self.userId = nil;
  self.nickName = nil;
  self.avatar = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
  }
  return self;
}
static PBGameUser* defaultPBGameUserInstance = nil;
+ (void) initialize {
  if (self == [PBGameUser class]) {
    defaultPBGameUserInstance = [[PBGameUser alloc] init];
  }
}
+ (PBGameUser*) defaultInstance {
  return defaultPBGameUserInstance;
}
- (PBGameUser*) defaultInstance {
  return defaultPBGameUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:4 value:self.gender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(4, self.gender);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameUser*) parseFromData:(NSData*) data {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data] build];
}
+ (PBGameUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser_Builder*) builder {
  return [[[PBGameUser_Builder alloc] init] autorelease];
}
+ (PBGameUser_Builder*) builderWithPrototype:(PBGameUser*) prototype {
  return [[PBGameUser builder] mergeFrom:prototype];
}
- (PBGameUser_Builder*) builder {
  return [PBGameUser builder];
}
@end

@interface PBGameUser_Builder()
@property (retain) PBGameUser* result;
@end

@implementation PBGameUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameUser_Builder*) clear {
  self.result = [[[PBGameUser alloc] init] autorelease];
  return self;
}
- (PBGameUser_Builder*) clone {
  return [PBGameUser builderWithPrototype:result];
}
- (PBGameUser*) defaultInstance {
  return [PBGameUser defaultInstance];
}
- (PBGameUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameUser*) buildPartial {
  PBGameUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameUser_Builder*) mergeFrom:(PBGameUser*) other {
  if (other == [PBGameUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGender:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBGameUser_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBGameUser_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBGameUser_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBGameUser_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBGameUser_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBGameUser_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBGameUser_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBGameUser_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
@end

@interface PBGameSession ()
@property (retain) NSString* gameId;
@property int64_t sessionId;
@property (retain) NSString* name;
@property (retain) NSString* createBy;
@property int32_t createTime;
@property (retain) NSString* host;
@property int32_t status;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@property (retain) NSMutableArray* mutableUsersList;
@end

@implementation PBGameSession

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCreateBy {
  return !!hasCreateBy_;
}
- (void) setHasCreateBy:(BOOL) value {
  hasCreateBy_ = !!value;
}
@synthesize createBy;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (BOOL) hasHost {
  return !!hasHost_;
}
- (void) setHasHost:(BOOL) value {
  hasHost_ = !!value;
}
@synthesize host;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
@synthesize mutableUsersList;
- (void) dealloc {
  self.gameId = nil;
  self.name = nil;
  self.createBy = nil;
  self.host = nil;
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  self.mutableUsersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.sessionId = 0L;
    self.name = @"";
    self.createBy = @"";
    self.createTime = 0;
    self.host = @"";
    self.status = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
  }
  return self;
}
static PBGameSession* defaultPBGameSessionInstance = nil;
+ (void) initialize {
  if (self == [PBGameSession class]) {
    defaultPBGameSessionInstance = [[PBGameSession alloc] init];
  }
}
+ (PBGameSession*) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (PBGameSession*) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (NSArray*) usersList {
  return mutableUsersList;
}
- (PBGameUser*) usersAtIndex:(int32_t) index {
  id value = [mutableUsersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (PBGameUser* element in self.usersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCreateBy) {
    [output writeString:4 value:self.createBy];
  }
  if (self.hasCreateTime) {
    [output writeInt32:5 value:self.createTime];
  }
  if (self.hasHost) {
    [output writeString:6 value:self.host];
  }
  if (self.hasStatus) {
    [output writeInt32:7 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:8 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:9 value:self.nextPlayUserId];
  }
  for (PBGameUser* element in self.usersList) {
    [output writeMessage:50 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameId) {
    size += computeStringSize(1, self.gameId);
  }
  if (self.hasSessionId) {
    size += computeInt64Size(2, self.sessionId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCreateBy) {
    size += computeStringSize(4, self.createBy);
  }
  if (self.hasCreateTime) {
    size += computeInt32Size(5, self.createTime);
  }
  if (self.hasHost) {
    size += computeStringSize(6, self.host);
  }
  if (self.hasStatus) {
    size += computeInt32Size(7, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(8, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(9, self.nextPlayUserId);
  }
  for (PBGameUser* element in self.usersList) {
    size += computeMessageSize(50, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameSession*) parseFromData:(NSData*) data {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data] build];
}
+ (PBGameSession*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession_Builder*) builder {
  return [[[PBGameSession_Builder alloc] init] autorelease];
}
+ (PBGameSession_Builder*) builderWithPrototype:(PBGameSession*) prototype {
  return [[PBGameSession builder] mergeFrom:prototype];
}
- (PBGameSession_Builder*) builder {
  return [PBGameSession builder];
}
@end

@interface PBGameSession_Builder()
@property (retain) PBGameSession* result;
@end

@implementation PBGameSession_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameSession alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameSession_Builder*) clear {
  self.result = [[[PBGameSession alloc] init] autorelease];
  return self;
}
- (PBGameSession_Builder*) clone {
  return [PBGameSession builderWithPrototype:result];
}
- (PBGameSession*) defaultInstance {
  return [PBGameSession defaultInstance];
}
- (PBGameSession*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSession*) buildPartial {
  PBGameSession* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameSession_Builder*) mergeFrom:(PBGameSession*) other {
  if (other == [PBGameSession defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateBy) {
    [self setCreateBy:other.createBy];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasHost) {
    [self setHost:other.host];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.mutableUsersList.count > 0) {
    if (result.mutableUsersList == nil) {
      result.mutableUsersList = [NSMutableArray array];
    }
    [result.mutableUsersList addObjectsFromArray:other.mutableUsersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSession_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSession_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setCreateBy:[input readString]];
        break;
      }
      case 40: {
        [self setCreateTime:[input readInt32]];
        break;
      }
      case 50: {
        [self setHost:[input readString]];
        break;
      }
      case 56: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 66: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 402: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (PBGameSession_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (PBGameSession_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (PBGameSession_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (PBGameSession_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBGameSession_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBGameSession_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCreateBy {
  return result.hasCreateBy;
}
- (NSString*) createBy {
  return result.createBy;
}
- (PBGameSession_Builder*) setCreateBy:(NSString*) value {
  result.hasCreateBy = YES;
  result.createBy = value;
  return self;
}
- (PBGameSession_Builder*) clearCreateBy {
  result.hasCreateBy = NO;
  result.createBy = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int32_t) createTime {
  return result.createTime;
}
- (PBGameSession_Builder*) setCreateTime:(int32_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (PBGameSession_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasHost {
  return result.hasHost;
}
- (NSString*) host {
  return result.host;
}
- (PBGameSession_Builder*) setHost:(NSString*) value {
  result.hasHost = YES;
  result.host = value;
  return self;
}
- (PBGameSession_Builder*) clearHost {
  result.hasHost = NO;
  result.host = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBGameSession_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBGameSession_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (PBGameSession_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (PBGameSession_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (PBGameSession_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (PBGameSession_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (NSArray*) usersList {
  if (result.mutableUsersList == nil) { return [NSArray array]; }
  return result.mutableUsersList;
}
- (PBGameUser*) usersAtIndex:(int32_t) index {
  return [result usersAtIndex:index];
}
- (PBGameSession_Builder*) replaceUsersAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSession_Builder*) addAllUsers:(NSArray*) values {
  if (result.mutableUsersList == nil) {
    result.mutableUsersList = [NSMutableArray array];
  }
  [result.mutableUsersList addObjectsFromArray:values];
  return self;
}
- (PBGameSession_Builder*) clearUsersList {
  result.mutableUsersList = nil;
  return self;
}
- (PBGameSession_Builder*) addUsers:(PBGameUser*) value {
  if (result.mutableUsersList == nil) {
    result.mutableUsersList = [NSMutableArray array];
  }
  [result.mutableUsersList addObject:value];
  return self;
}
@end

@interface PBDrawAction ()
@property int32_t type;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@end

@implementation PBDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (void) dealloc {
  self.mutablePointsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.width = 0;
    self.color = 0;
  }
  return self;
}
static PBDrawAction* defaultPBDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBDrawAction class]) {
    defaultPBDrawActionInstance = [[PBDrawAction alloc] init];
  }
}
+ (PBDrawAction*) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (PBDrawAction*) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWidth) {
    [output writeFloat:3 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size += computeFloatSize(3, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(4, self.color);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDrawAction*) parseFromData:(NSData*) data {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data] build];
}
+ (PBDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction_Builder*) builder {
  return [[[PBDrawAction_Builder alloc] init] autorelease];
}
+ (PBDrawAction_Builder*) builderWithPrototype:(PBDrawAction*) prototype {
  return [[PBDrawAction builder] mergeFrom:prototype];
}
- (PBDrawAction_Builder*) builder {
  return [PBDrawAction builder];
}
@end

@interface PBDrawAction_Builder()
@property (retain) PBDrawAction* result;
@end

@implementation PBDrawAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDrawAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDrawAction_Builder*) clear {
  self.result = [[[PBDrawAction alloc] init] autorelease];
  return self;
}
- (PBDrawAction_Builder*) clone {
  return [PBDrawAction builderWithPrototype:result];
}
- (PBDrawAction*) defaultInstance {
  return [PBDrawAction defaultInstance];
}
- (PBDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawAction*) buildPartial {
  PBDrawAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDrawAction_Builder*) mergeFrom:(PBDrawAction*) other {
  if (other == [PBDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 29: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBDrawAction_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBDrawAction_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (PBDrawAction_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (PBDrawAction_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (PBDrawAction_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (PBDrawAction_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (PBDrawAction_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBDrawAction_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (PBDrawAction_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (PBDrawAction_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
@end

@interface PBDraw ()
@property (retain) NSString* userId;
@property (retain) NSString* word;
@property int32_t level;
@property int32_t language;
@property int32_t createDate;
@property (retain) NSString* nickName;
@property (retain) NSMutableArray* mutableDrawDataList;
@end

@implementation PBDraw

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
@synthesize mutableDrawDataList;
- (void) dealloc {
  self.userId = nil;
  self.word = nil;
  self.nickName = nil;
  self.mutableDrawDataList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.createDate = 0;
    self.nickName = @"";
  }
  return self;
}
static PBDraw* defaultPBDrawInstance = nil;
+ (void) initialize {
  if (self == [PBDraw class]) {
    defaultPBDrawInstance = [[PBDraw alloc] init];
  }
}
+ (PBDraw*) defaultInstance {
  return defaultPBDrawInstance;
}
- (PBDraw*) defaultInstance {
  return defaultPBDrawInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWord) {
    return NO;
  }
  if (!self.hasLevel) {
    return NO;
  }
  if (!self.hasLanguage) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWord) {
    [output writeString:2 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:3 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:4 value:self.language];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasNickName) {
    [output writeString:6 value:self.nickName];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:10 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasWord) {
    size += computeStringSize(2, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(3, self.level);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(4, self.language);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(5, self.createDate);
  }
  if (self.hasNickName) {
    size += computeStringSize(6, self.nickName);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(10, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDraw*) parseFromData:(NSData*) data {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data] build];
}
+ (PBDraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw_Builder*) builder {
  return [[[PBDraw_Builder alloc] init] autorelease];
}
+ (PBDraw_Builder*) builderWithPrototype:(PBDraw*) prototype {
  return [[PBDraw builder] mergeFrom:prototype];
}
- (PBDraw_Builder*) builder {
  return [PBDraw builder];
}
@end

@interface PBDraw_Builder()
@property (retain) PBDraw* result;
@end

@implementation PBDraw_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDraw alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDraw_Builder*) clear {
  self.result = [[[PBDraw alloc] init] autorelease];
  return self;
}
- (PBDraw_Builder*) clone {
  return [PBDraw builderWithPrototype:result];
}
- (PBDraw*) defaultInstance {
  return [PBDraw defaultInstance];
}
- (PBDraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDraw*) buildPartial {
  PBDraw* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDraw_Builder*) mergeFrom:(PBDraw*) other {
  if (other == [PBDraw defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setWord:[input readString]];
        break;
      }
      case 24: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 50: {
        [self setNickName:[input readString]];
        break;
      }
      case 82: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBDraw_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBDraw_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (PBDraw_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (PBDraw_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (PBDraw_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (PBDraw_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (PBDraw_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (PBDraw_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBDraw_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBDraw_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBDraw_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBDraw_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBDraw_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBDraw_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBDraw_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBDraw_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
@end

