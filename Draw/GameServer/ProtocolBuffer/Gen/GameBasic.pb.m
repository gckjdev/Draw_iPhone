// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameBasic.pb.h"

@implementation GameBasicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameBasicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBOpenInfoTypeIsValidValue(PBOpenInfoType value) {
  switch (value) {
    case PBOpenInfoTypeOpenToFriend:
    case PBOpenInfoTypeOpenNo:
    case PBOpenInfoTypeOpenAll:
      return YES;
    default:
      return NO;
  }
}
BOOL PBGameCurrencyIsValidValue(PBGameCurrency value) {
  switch (value) {
    case PBGameCurrencyCoin:
    case PBGameCurrencyIngot:
      return YES;
    default:
      return NO;
  }
}
BOOL PBDrawItemTypeIsValidValue(PBDrawItemType value) {
  switch (value) {
    case PBDrawItemTypeNomal:
    case PBDrawItemTypeTool:
      return YES;
    default:
      return NO;
  }
}
BOOL PBGameItemConsumeTypeIsValidValue(PBGameItemConsumeType value) {
  switch (value) {
    case PBGameItemConsumeTypeNonConsumable:
    case PBGameItemConsumeTypeAmountConsumable:
    case PBGameItemConsumeTypeTimeConsumable:
      return YES;
    default:
      return NO;
  }
}
BOOL PBGameTimeUnitIsValidValue(PBGameTimeUnit value) {
  switch (value) {
    case PBGameTimeUnitHour:
    case PBGameTimeUnitDay:
    case PBGameTimeUnitMonth:
    case PBGameTimeUnitYear:
      return YES;
    default:
      return NO;
  }
}
@interface PBKeyValue ()
@property (retain) NSString* name;
@property (retain) NSString* value;
@end

@implementation PBKeyValue

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value {
  hasValue_ = !!value;
}
@synthesize value;
- (void) dealloc {
  self.name = nil;
  self.value = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = @"";
  }
  return self;
}
static PBKeyValue* defaultPBKeyValueInstance = nil;
+ (void) initialize {
  if (self == [PBKeyValue class]) {
    defaultPBKeyValueInstance = [[PBKeyValue alloc] init];
  }
}
+ (PBKeyValue*) defaultInstance {
  return defaultPBKeyValueInstance;
}
- (PBKeyValue*) defaultInstance {
  return defaultPBKeyValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size += computeStringSize(2, self.value);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBKeyValue*) parseFromData:(NSData*) data {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromData:data] build];
}
+ (PBKeyValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue*) parseFromInputStream:(NSInputStream*) input {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromInputStream:input] build];
}
+ (PBKeyValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromCodedInputStream:input] build];
}
+ (PBKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue_Builder*) builder {
  return [[[PBKeyValue_Builder alloc] init] autorelease];
}
+ (PBKeyValue_Builder*) builderWithPrototype:(PBKeyValue*) prototype {
  return [[PBKeyValue builder] mergeFrom:prototype];
}
- (PBKeyValue_Builder*) builder {
  return [PBKeyValue builder];
}
@end

@interface PBKeyValue_Builder()
@property (retain) PBKeyValue* result;
@end

@implementation PBKeyValue_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBKeyValue alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBKeyValue_Builder*) clear {
  self.result = [[[PBKeyValue alloc] init] autorelease];
  return self;
}
- (PBKeyValue_Builder*) clone {
  return [PBKeyValue builderWithPrototype:result];
}
- (PBKeyValue*) defaultInstance {
  return [PBKeyValue defaultInstance];
}
- (PBKeyValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBKeyValue*) buildPartial {
  PBKeyValue* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBKeyValue_Builder*) mergeFrom:(PBKeyValue*) other {
  if (other == [PBKeyValue defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBKeyValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBKeyValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBKeyValue_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBKeyValue_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (PBKeyValue_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (PBKeyValue_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface PBSNSUser ()
@property int32_t type;
@property (retain) NSString* userId;
@property (retain) NSString* nickName;
@property (retain) NSString* accessToken;
@property (retain) NSString* accessTokenSecret;
@property (retain) NSString* refreshToken;
@property int32_t expireTime;
@property (retain) NSString* qqOpenId;
@end

@implementation PBSNSUser

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAccessToken {
  return !!hasAccessToken_;
}
- (void) setHasAccessToken:(BOOL) value {
  hasAccessToken_ = !!value;
}
@synthesize accessToken;
- (BOOL) hasAccessTokenSecret {
  return !!hasAccessTokenSecret_;
}
- (void) setHasAccessTokenSecret:(BOOL) value {
  hasAccessTokenSecret_ = !!value;
}
@synthesize accessTokenSecret;
- (BOOL) hasRefreshToken {
  return !!hasRefreshToken_;
}
- (void) setHasRefreshToken:(BOOL) value {
  hasRefreshToken_ = !!value;
}
@synthesize refreshToken;
- (BOOL) hasExpireTime {
  return !!hasExpireTime_;
}
- (void) setHasExpireTime:(BOOL) value {
  hasExpireTime_ = !!value;
}
@synthesize expireTime;
- (BOOL) hasQqOpenId {
  return !!hasQqOpenId_;
}
- (void) setHasQqOpenId:(BOOL) value {
  hasQqOpenId_ = !!value;
}
@synthesize qqOpenId;
- (void) dealloc {
  self.userId = nil;
  self.nickName = nil;
  self.accessToken = nil;
  self.accessTokenSecret = nil;
  self.refreshToken = nil;
  self.qqOpenId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.userId = @"";
    self.nickName = @"";
    self.accessToken = @"";
    self.accessTokenSecret = @"";
    self.refreshToken = @"";
    self.expireTime = 0;
    self.qqOpenId = @"";
  }
  return self;
}
static PBSNSUser* defaultPBSNSUserInstance = nil;
+ (void) initialize {
  if (self == [PBSNSUser class]) {
    defaultPBSNSUserInstance = [[PBSNSUser alloc] init];
  }
}
+ (PBSNSUser*) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (PBSNSUser*) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasAccessToken) {
    [output writeString:4 value:self.accessToken];
  }
  if (self.hasAccessTokenSecret) {
    [output writeString:5 value:self.accessTokenSecret];
  }
  if (self.hasRefreshToken) {
    [output writeString:6 value:self.refreshToken];
  }
  if (self.hasExpireTime) {
    [output writeInt32:7 value:self.expireTime];
  }
  if (self.hasQqOpenId) {
    [output writeString:8 value:self.qqOpenId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  if (self.hasUserId) {
    size += computeStringSize(2, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(3, self.nickName);
  }
  if (self.hasAccessToken) {
    size += computeStringSize(4, self.accessToken);
  }
  if (self.hasAccessTokenSecret) {
    size += computeStringSize(5, self.accessTokenSecret);
  }
  if (self.hasRefreshToken) {
    size += computeStringSize(6, self.refreshToken);
  }
  if (self.hasExpireTime) {
    size += computeInt32Size(7, self.expireTime);
  }
  if (self.hasQqOpenId) {
    size += computeStringSize(8, self.qqOpenId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSNSUser*) parseFromData:(NSData*) data {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data] build];
}
+ (PBSNSUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser_Builder*) builder {
  return [[[PBSNSUser_Builder alloc] init] autorelease];
}
+ (PBSNSUser_Builder*) builderWithPrototype:(PBSNSUser*) prototype {
  return [[PBSNSUser builder] mergeFrom:prototype];
}
- (PBSNSUser_Builder*) builder {
  return [PBSNSUser builder];
}
@end

@interface PBSNSUser_Builder()
@property (retain) PBSNSUser* result;
@end

@implementation PBSNSUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSNSUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSNSUser_Builder*) clear {
  self.result = [[[PBSNSUser alloc] init] autorelease];
  return self;
}
- (PBSNSUser_Builder*) clone {
  return [PBSNSUser builderWithPrototype:result];
}
- (PBSNSUser*) defaultInstance {
  return [PBSNSUser defaultInstance];
}
- (PBSNSUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSNSUser*) buildPartial {
  PBSNSUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSNSUser_Builder*) mergeFrom:(PBSNSUser*) other {
  if (other == [PBSNSUser defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAccessToken) {
    [self setAccessToken:other.accessToken];
  }
  if (other.hasAccessTokenSecret) {
    [self setAccessTokenSecret:other.accessTokenSecret];
  }
  if (other.hasRefreshToken) {
    [self setRefreshToken:other.refreshToken];
  }
  if (other.hasExpireTime) {
    [self setExpireTime:other.expireTime];
  }
  if (other.hasQqOpenId) {
    [self setQqOpenId:other.qqOpenId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSNSUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSNSUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setAccessToken:[input readString]];
        break;
      }
      case 42: {
        [self setAccessTokenSecret:[input readString]];
        break;
      }
      case 50: {
        [self setRefreshToken:[input readString]];
        break;
      }
      case 56: {
        [self setExpireTime:[input readInt32]];
        break;
      }
      case 66: {
        [self setQqOpenId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBSNSUser_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBSNSUser_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBSNSUser_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBSNSUser_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBSNSUser_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBSNSUser_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAccessToken {
  return result.hasAccessToken;
}
- (NSString*) accessToken {
  return result.accessToken;
}
- (PBSNSUser_Builder*) setAccessToken:(NSString*) value {
  result.hasAccessToken = YES;
  result.accessToken = value;
  return self;
}
- (PBSNSUser_Builder*) clearAccessToken {
  result.hasAccessToken = NO;
  result.accessToken = @"";
  return self;
}
- (BOOL) hasAccessTokenSecret {
  return result.hasAccessTokenSecret;
}
- (NSString*) accessTokenSecret {
  return result.accessTokenSecret;
}
- (PBSNSUser_Builder*) setAccessTokenSecret:(NSString*) value {
  result.hasAccessTokenSecret = YES;
  result.accessTokenSecret = value;
  return self;
}
- (PBSNSUser_Builder*) clearAccessTokenSecret {
  result.hasAccessTokenSecret = NO;
  result.accessTokenSecret = @"";
  return self;
}
- (BOOL) hasRefreshToken {
  return result.hasRefreshToken;
}
- (NSString*) refreshToken {
  return result.refreshToken;
}
- (PBSNSUser_Builder*) setRefreshToken:(NSString*) value {
  result.hasRefreshToken = YES;
  result.refreshToken = value;
  return self;
}
- (PBSNSUser_Builder*) clearRefreshToken {
  result.hasRefreshToken = NO;
  result.refreshToken = @"";
  return self;
}
- (BOOL) hasExpireTime {
  return result.hasExpireTime;
}
- (int32_t) expireTime {
  return result.expireTime;
}
- (PBSNSUser_Builder*) setExpireTime:(int32_t) value {
  result.hasExpireTime = YES;
  result.expireTime = value;
  return self;
}
- (PBSNSUser_Builder*) clearExpireTime {
  result.hasExpireTime = NO;
  result.expireTime = 0;
  return self;
}
- (BOOL) hasQqOpenId {
  return result.hasQqOpenId;
}
- (NSString*) qqOpenId {
  return result.qqOpenId;
}
- (PBSNSUser_Builder*) setQqOpenId:(NSString*) value {
  result.hasQqOpenId = YES;
  result.qqOpenId = value;
  return self;
}
- (PBSNSUser_Builder*) clearQqOpenId {
  result.hasQqOpenId = NO;
  result.qqOpenId = @"";
  return self;
}
@end

@interface PBGameUser ()
@property (retain) NSString* userId;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@property (retain) NSMutableArray* mutableSnsUsersList;
@property (retain) NSString* location;
@property int32_t userLevel;
@property (retain) NSString* facetimeId;
@property int32_t seatId;
@property BOOL isPlaying;
@property BOOL isTakenOver;
@property (retain) NSMutableArray* mutableAttributesList;
@property (retain) NSString* email;
@property (retain) NSString* password;
@property (retain) NSString* birthday;
@property int32_t zodiac;
@property int32_t guessWordLanguage;
@property (retain) NSString* backgroundUrl;
@property (retain) NSString* deviceToken;
@property (retain) NSString* countryCode;
@property (retain) NSString* language;
@property int32_t level;
@property int64_t experience;
@property int32_t coinBalance;
@property int32_t diamondBalance;
@property int32_t ingotBalance;
@property (retain) NSMutableArray* mutableItemsList;
@property (retain) NSString* deviceModel;
@property (retain) NSString* deviceOs;
@property (retain) NSString* deviceId;
@property (retain) NSString* deviceType;
@property (retain) NSString* bloodGroup;
@property int32_t fanCount;
@property int32_t followCount;
@property PBOpenInfoType openInfoType;
@property (retain) NSString* signature;
@end

@implementation PBGameUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
@synthesize mutableSnsUsersList;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value {
  hasLocation_ = !!value;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) value {
  hasUserLevel_ = !!value;
}
@synthesize userLevel;
- (BOOL) hasFacetimeId {
  return !!hasFacetimeId_;
}
- (void) setHasFacetimeId:(BOOL) value {
  hasFacetimeId_ = !!value;
}
@synthesize facetimeId;
- (BOOL) hasSeatId {
  return !!hasSeatId_;
}
- (void) setHasSeatId:(BOOL) value {
  hasSeatId_ = !!value;
}
@synthesize seatId;
- (BOOL) hasIsPlaying {
  return !!hasIsPlaying_;
}
- (void) setHasIsPlaying:(BOOL) value {
  hasIsPlaying_ = !!value;
}
- (BOOL) isPlaying {
  return !!isPlaying_;
}
- (void) setIsPlaying:(BOOL) value {
  isPlaying_ = !!value;
}
- (BOOL) hasIsTakenOver {
  return !!hasIsTakenOver_;
}
- (void) setHasIsTakenOver:(BOOL) value {
  hasIsTakenOver_ = !!value;
}
- (BOOL) isTakenOver {
  return !!isTakenOver_;
}
- (void) setIsTakenOver:(BOOL) value {
  isTakenOver_ = !!value;
}
@synthesize mutableAttributesList;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) value {
  hasBirthday_ = !!value;
}
@synthesize birthday;
- (BOOL) hasZodiac {
  return !!hasZodiac_;
}
- (void) setHasZodiac:(BOOL) value {
  hasZodiac_ = !!value;
}
@synthesize zodiac;
- (BOOL) hasGuessWordLanguage {
  return !!hasGuessWordLanguage_;
}
- (void) setHasGuessWordLanguage:(BOOL) value {
  hasGuessWordLanguage_ = !!value;
}
@synthesize guessWordLanguage;
- (BOOL) hasBackgroundUrl {
  return !!hasBackgroundUrl_;
}
- (void) setHasBackgroundUrl:(BOOL) value {
  hasBackgroundUrl_ = !!value;
}
@synthesize backgroundUrl;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) value {
  hasDeviceToken_ = !!value;
}
@synthesize deviceToken;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) value {
  hasCountryCode_ = !!value;
}
@synthesize countryCode;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value {
  hasExperience_ = !!value;
}
@synthesize experience;
- (BOOL) hasCoinBalance {
  return !!hasCoinBalance_;
}
- (void) setHasCoinBalance:(BOOL) value {
  hasCoinBalance_ = !!value;
}
@synthesize coinBalance;
- (BOOL) hasDiamondBalance {
  return !!hasDiamondBalance_;
}
- (void) setHasDiamondBalance:(BOOL) value {
  hasDiamondBalance_ = !!value;
}
@synthesize diamondBalance;
- (BOOL) hasIngotBalance {
  return !!hasIngotBalance_;
}
- (void) setHasIngotBalance:(BOOL) value {
  hasIngotBalance_ = !!value;
}
@synthesize ingotBalance;
@synthesize mutableItemsList;
- (BOOL) hasDeviceModel {
  return !!hasDeviceModel_;
}
- (void) setHasDeviceModel:(BOOL) value {
  hasDeviceModel_ = !!value;
}
@synthesize deviceModel;
- (BOOL) hasDeviceOs {
  return !!hasDeviceOs_;
}
- (void) setHasDeviceOs:(BOOL) value {
  hasDeviceOs_ = !!value;
}
@synthesize deviceOs;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value {
  hasDeviceType_ = !!value;
}
@synthesize deviceType;
- (BOOL) hasBloodGroup {
  return !!hasBloodGroup_;
}
- (void) setHasBloodGroup:(BOOL) value {
  hasBloodGroup_ = !!value;
}
@synthesize bloodGroup;
- (BOOL) hasFanCount {
  return !!hasFanCount_;
}
- (void) setHasFanCount:(BOOL) value {
  hasFanCount_ = !!value;
}
@synthesize fanCount;
- (BOOL) hasFollowCount {
  return !!hasFollowCount_;
}
- (void) setHasFollowCount:(BOOL) value {
  hasFollowCount_ = !!value;
}
@synthesize followCount;
- (BOOL) hasOpenInfoType {
  return !!hasOpenInfoType_;
}
- (void) setHasOpenInfoType:(BOOL) value {
  hasOpenInfoType_ = !!value;
}
@synthesize openInfoType;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) value {
  hasSignature_ = !!value;
}
@synthesize signature;
- (void) dealloc {
  self.userId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.mutableSnsUsersList = nil;
  self.location = nil;
  self.facetimeId = nil;
  self.mutableAttributesList = nil;
  self.email = nil;
  self.password = nil;
  self.birthday = nil;
  self.backgroundUrl = nil;
  self.deviceToken = nil;
  self.countryCode = nil;
  self.language = nil;
  self.mutableItemsList = nil;
  self.deviceModel = nil;
  self.deviceOs = nil;
  self.deviceId = nil;
  self.deviceType = nil;
  self.bloodGroup = nil;
  self.signature = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.location = @"";
    self.userLevel = 0;
    self.facetimeId = @"";
    self.seatId = 0;
    self.isPlaying = YES;
    self.isTakenOver = NO;
    self.email = @"";
    self.password = @"";
    self.birthday = @"";
    self.zodiac = 0;
    self.guessWordLanguage = 1;
    self.backgroundUrl = @"";
    self.deviceToken = @"";
    self.countryCode = @"";
    self.language = @"";
    self.level = 0;
    self.experience = 0L;
    self.coinBalance = 0;
    self.diamondBalance = 0;
    self.ingotBalance = 0;
    self.deviceModel = @"";
    self.deviceOs = @"";
    self.deviceId = @"";
    self.deviceType = @"";
    self.bloodGroup = @"";
    self.fanCount = 0;
    self.followCount = 0;
    self.openInfoType = PBOpenInfoTypeOpenToFriend;
    self.signature = @"";
  }
  return self;
}
static PBGameUser* defaultPBGameUserInstance = nil;
+ (void) initialize {
  if (self == [PBGameUser class]) {
    defaultPBGameUserInstance = [[PBGameUser alloc] init];
  }
}
+ (PBGameUser*) defaultInstance {
  return defaultPBGameUserInstance;
}
- (PBGameUser*) defaultInstance {
  return defaultPBGameUserInstance;
}
- (NSArray*) snsUsersList {
  return mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  id value = [mutableSnsUsersList objectAtIndex:index];
  return value;
}
- (NSArray*) attributesList {
  return mutableAttributesList;
}
- (PBKeyValue*) attributesAtIndex:(int32_t) index {
  id value = [mutableAttributesList objectAtIndex:index];
  return value;
}
- (NSArray*) itemsList {
  return mutableItemsList;
}
- (PBUserItem*) itemsAtIndex:(int32_t) index {
  id value = [mutableItemsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  for (PBSNSUser* element in self.snsUsersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBKeyValue* element in self.attributesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBUserItem* element in self.itemsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:4 value:self.gender];
  }
  for (PBSNSUser* element in self.snsUsersList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasLocation) {
    [output writeString:6 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:7 value:self.userLevel];
  }
  if (self.hasFacetimeId) {
    [output writeString:8 value:self.facetimeId];
  }
  if (self.hasSeatId) {
    [output writeInt32:9 value:self.seatId];
  }
  if (self.hasIsPlaying) {
    [output writeBool:20 value:self.isPlaying];
  }
  if (self.hasIsTakenOver) {
    [output writeBool:21 value:self.isTakenOver];
  }
  for (PBKeyValue* element in self.attributesList) {
    [output writeMessage:22 value:element];
  }
  if (self.hasEmail) {
    [output writeString:31 value:self.email];
  }
  if (self.hasPassword) {
    [output writeString:32 value:self.password];
  }
  if (self.hasBirthday) {
    [output writeString:33 value:self.birthday];
  }
  if (self.hasZodiac) {
    [output writeInt32:34 value:self.zodiac];
  }
  if (self.hasGuessWordLanguage) {
    [output writeInt32:35 value:self.guessWordLanguage];
  }
  if (self.hasBackgroundUrl) {
    [output writeString:36 value:self.backgroundUrl];
  }
  if (self.hasDeviceToken) {
    [output writeString:37 value:self.deviceToken];
  }
  if (self.hasCountryCode) {
    [output writeString:38 value:self.countryCode];
  }
  if (self.hasLanguage) {
    [output writeString:39 value:self.language];
  }
  if (self.hasLevel) {
    [output writeInt32:41 value:self.level];
  }
  if (self.hasExperience) {
    [output writeInt64:42 value:self.experience];
  }
  if (self.hasCoinBalance) {
    [output writeInt32:51 value:self.coinBalance];
  }
  if (self.hasDiamondBalance) {
    [output writeInt32:52 value:self.diamondBalance];
  }
  if (self.hasIngotBalance) {
    [output writeInt32:53 value:self.ingotBalance];
  }
  for (PBUserItem* element in self.itemsList) {
    [output writeMessage:61 value:element];
  }
  if (self.hasDeviceModel) {
    [output writeString:71 value:self.deviceModel];
  }
  if (self.hasDeviceOs) {
    [output writeString:72 value:self.deviceOs];
  }
  if (self.hasDeviceId) {
    [output writeString:73 value:self.deviceId];
  }
  if (self.hasDeviceType) {
    [output writeString:74 value:self.deviceType];
  }
  if (self.hasBloodGroup) {
    [output writeString:81 value:self.bloodGroup];
  }
  if (self.hasFanCount) {
    [output writeInt32:82 value:self.fanCount];
  }
  if (self.hasFollowCount) {
    [output writeInt32:83 value:self.followCount];
  }
  if (self.hasOpenInfoType) {
    [output writeEnum:91 value:self.openInfoType];
  }
  if (self.hasSignature) {
    [output writeString:100 value:self.signature];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(4, self.gender);
  }
  for (PBSNSUser* element in self.snsUsersList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasLocation) {
    size += computeStringSize(6, self.location);
  }
  if (self.hasUserLevel) {
    size += computeInt32Size(7, self.userLevel);
  }
  if (self.hasFacetimeId) {
    size += computeStringSize(8, self.facetimeId);
  }
  if (self.hasSeatId) {
    size += computeInt32Size(9, self.seatId);
  }
  if (self.hasIsPlaying) {
    size += computeBoolSize(20, self.isPlaying);
  }
  if (self.hasIsTakenOver) {
    size += computeBoolSize(21, self.isTakenOver);
  }
  for (PBKeyValue* element in self.attributesList) {
    size += computeMessageSize(22, element);
  }
  if (self.hasEmail) {
    size += computeStringSize(31, self.email);
  }
  if (self.hasPassword) {
    size += computeStringSize(32, self.password);
  }
  if (self.hasBirthday) {
    size += computeStringSize(33, self.birthday);
  }
  if (self.hasZodiac) {
    size += computeInt32Size(34, self.zodiac);
  }
  if (self.hasGuessWordLanguage) {
    size += computeInt32Size(35, self.guessWordLanguage);
  }
  if (self.hasBackgroundUrl) {
    size += computeStringSize(36, self.backgroundUrl);
  }
  if (self.hasDeviceToken) {
    size += computeStringSize(37, self.deviceToken);
  }
  if (self.hasCountryCode) {
    size += computeStringSize(38, self.countryCode);
  }
  if (self.hasLanguage) {
    size += computeStringSize(39, self.language);
  }
  if (self.hasLevel) {
    size += computeInt32Size(41, self.level);
  }
  if (self.hasExperience) {
    size += computeInt64Size(42, self.experience);
  }
  if (self.hasCoinBalance) {
    size += computeInt32Size(51, self.coinBalance);
  }
  if (self.hasDiamondBalance) {
    size += computeInt32Size(52, self.diamondBalance);
  }
  if (self.hasIngotBalance) {
    size += computeInt32Size(53, self.ingotBalance);
  }
  for (PBUserItem* element in self.itemsList) {
    size += computeMessageSize(61, element);
  }
  if (self.hasDeviceModel) {
    size += computeStringSize(71, self.deviceModel);
  }
  if (self.hasDeviceOs) {
    size += computeStringSize(72, self.deviceOs);
  }
  if (self.hasDeviceId) {
    size += computeStringSize(73, self.deviceId);
  }
  if (self.hasDeviceType) {
    size += computeStringSize(74, self.deviceType);
  }
  if (self.hasBloodGroup) {
    size += computeStringSize(81, self.bloodGroup);
  }
  if (self.hasFanCount) {
    size += computeInt32Size(82, self.fanCount);
  }
  if (self.hasFollowCount) {
    size += computeInt32Size(83, self.followCount);
  }
  if (self.hasOpenInfoType) {
    size += computeEnumSize(91, self.openInfoType);
  }
  if (self.hasSignature) {
    size += computeStringSize(100, self.signature);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameUser*) parseFromData:(NSData*) data {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data] build];
}
+ (PBGameUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser_Builder*) builder {
  return [[[PBGameUser_Builder alloc] init] autorelease];
}
+ (PBGameUser_Builder*) builderWithPrototype:(PBGameUser*) prototype {
  return [[PBGameUser builder] mergeFrom:prototype];
}
- (PBGameUser_Builder*) builder {
  return [PBGameUser builder];
}
@end

@interface PBGameUser_Builder()
@property (retain) PBGameUser* result;
@end

@implementation PBGameUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameUser_Builder*) clear {
  self.result = [[[PBGameUser alloc] init] autorelease];
  return self;
}
- (PBGameUser_Builder*) clone {
  return [PBGameUser builderWithPrototype:result];
}
- (PBGameUser*) defaultInstance {
  return [PBGameUser defaultInstance];
}
- (PBGameUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameUser*) buildPartial {
  PBGameUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameUser_Builder*) mergeFrom:(PBGameUser*) other {
  if (other == [PBGameUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.mutableSnsUsersList.count > 0) {
    if (result.mutableSnsUsersList == nil) {
      result.mutableSnsUsersList = [NSMutableArray array];
    }
    [result.mutableSnsUsersList addObjectsFromArray:other.mutableSnsUsersList];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.hasFacetimeId) {
    [self setFacetimeId:other.facetimeId];
  }
  if (other.hasSeatId) {
    [self setSeatId:other.seatId];
  }
  if (other.hasIsPlaying) {
    [self setIsPlaying:other.isPlaying];
  }
  if (other.hasIsTakenOver) {
    [self setIsTakenOver:other.isTakenOver];
  }
  if (other.mutableAttributesList.count > 0) {
    if (result.mutableAttributesList == nil) {
      result.mutableAttributesList = [NSMutableArray array];
    }
    [result.mutableAttributesList addObjectsFromArray:other.mutableAttributesList];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasZodiac) {
    [self setZodiac:other.zodiac];
  }
  if (other.hasGuessWordLanguage) {
    [self setGuessWordLanguage:other.guessWordLanguage];
  }
  if (other.hasBackgroundUrl) {
    [self setBackgroundUrl:other.backgroundUrl];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasCoinBalance) {
    [self setCoinBalance:other.coinBalance];
  }
  if (other.hasDiamondBalance) {
    [self setDiamondBalance:other.diamondBalance];
  }
  if (other.hasIngotBalance) {
    [self setIngotBalance:other.ingotBalance];
  }
  if (other.mutableItemsList.count > 0) {
    if (result.mutableItemsList == nil) {
      result.mutableItemsList = [NSMutableArray array];
    }
    [result.mutableItemsList addObjectsFromArray:other.mutableItemsList];
  }
  if (other.hasDeviceModel) {
    [self setDeviceModel:other.deviceModel];
  }
  if (other.hasDeviceOs) {
    [self setDeviceOs:other.deviceOs];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasBloodGroup) {
    [self setBloodGroup:other.bloodGroup];
  }
  if (other.hasFanCount) {
    [self setFanCount:other.fanCount];
  }
  if (other.hasFollowCount) {
    [self setFollowCount:other.followCount];
  }
  if (other.hasOpenInfoType) {
    [self setOpenInfoType:other.openInfoType];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGender:[input readBool]];
        break;
      }
      case 42: {
        PBSNSUser_Builder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setLocation:[input readString]];
        break;
      }
      case 56: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 66: {
        [self setFacetimeId:[input readString]];
        break;
      }
      case 72: {
        [self setSeatId:[input readInt32]];
        break;
      }
      case 160: {
        [self setIsPlaying:[input readBool]];
        break;
      }
      case 168: {
        [self setIsTakenOver:[input readBool]];
        break;
      }
      case 178: {
        PBKeyValue_Builder* subBuilder = [PBKeyValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttributes:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        [self setEmail:[input readString]];
        break;
      }
      case 258: {
        [self setPassword:[input readString]];
        break;
      }
      case 266: {
        [self setBirthday:[input readString]];
        break;
      }
      case 272: {
        [self setZodiac:[input readInt32]];
        break;
      }
      case 280: {
        [self setGuessWordLanguage:[input readInt32]];
        break;
      }
      case 290: {
        [self setBackgroundUrl:[input readString]];
        break;
      }
      case 298: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 306: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 314: {
        [self setLanguage:[input readString]];
        break;
      }
      case 328: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 336: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 408: {
        [self setCoinBalance:[input readInt32]];
        break;
      }
      case 416: {
        [self setDiamondBalance:[input readInt32]];
        break;
      }
      case 424: {
        [self setIngotBalance:[input readInt32]];
        break;
      }
      case 490: {
        PBUserItem_Builder* subBuilder = [PBUserItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
      case 570: {
        [self setDeviceModel:[input readString]];
        break;
      }
      case 578: {
        [self setDeviceOs:[input readString]];
        break;
      }
      case 586: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 594: {
        [self setDeviceType:[input readString]];
        break;
      }
      case 650: {
        [self setBloodGroup:[input readString]];
        break;
      }
      case 656: {
        [self setFanCount:[input readInt32]];
        break;
      }
      case 664: {
        [self setFollowCount:[input readInt32]];
        break;
      }
      case 728: {
        int32_t value = [input readEnum];
        if (PBOpenInfoTypeIsValidValue(value)) {
          [self setOpenInfoType:value];
        } else {
          [unknownFields mergeVarintField:91 value:value];
        }
        break;
      }
      case 802: {
        [self setSignature:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBGameUser_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBGameUser_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBGameUser_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBGameUser_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBGameUser_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBGameUser_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBGameUser_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBGameUser_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (NSArray*) snsUsersList {
  if (result.mutableSnsUsersList == nil) { return [NSArray array]; }
  return result.mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  return [result snsUsersAtIndex:index];
}
- (PBGameUser_Builder*) replaceSnsUsersAtIndex:(int32_t) index with:(PBSNSUser*) value {
  [result.mutableSnsUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameUser_Builder*) addAllSnsUsers:(NSArray*) values {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObjectsFromArray:values];
  return self;
}
- (PBGameUser_Builder*) clearSnsUsersList {
  result.mutableSnsUsersList = nil;
  return self;
}
- (PBGameUser_Builder*) addSnsUsers:(PBSNSUser*) value {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObject:value];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (NSString*) location {
  return result.location;
}
- (PBGameUser_Builder*) setLocation:(NSString*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (PBGameUser_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return result.hasUserLevel;
}
- (int32_t) userLevel {
  return result.userLevel;
}
- (PBGameUser_Builder*) setUserLevel:(int32_t) value {
  result.hasUserLevel = YES;
  result.userLevel = value;
  return self;
}
- (PBGameUser_Builder*) clearUserLevel {
  result.hasUserLevel = NO;
  result.userLevel = 0;
  return self;
}
- (BOOL) hasFacetimeId {
  return result.hasFacetimeId;
}
- (NSString*) facetimeId {
  return result.facetimeId;
}
- (PBGameUser_Builder*) setFacetimeId:(NSString*) value {
  result.hasFacetimeId = YES;
  result.facetimeId = value;
  return self;
}
- (PBGameUser_Builder*) clearFacetimeId {
  result.hasFacetimeId = NO;
  result.facetimeId = @"";
  return self;
}
- (BOOL) hasSeatId {
  return result.hasSeatId;
}
- (int32_t) seatId {
  return result.seatId;
}
- (PBGameUser_Builder*) setSeatId:(int32_t) value {
  result.hasSeatId = YES;
  result.seatId = value;
  return self;
}
- (PBGameUser_Builder*) clearSeatId {
  result.hasSeatId = NO;
  result.seatId = 0;
  return self;
}
- (BOOL) hasIsPlaying {
  return result.hasIsPlaying;
}
- (BOOL) isPlaying {
  return result.isPlaying;
}
- (PBGameUser_Builder*) setIsPlaying:(BOOL) value {
  result.hasIsPlaying = YES;
  result.isPlaying = value;
  return self;
}
- (PBGameUser_Builder*) clearIsPlaying {
  result.hasIsPlaying = NO;
  result.isPlaying = YES;
  return self;
}
- (BOOL) hasIsTakenOver {
  return result.hasIsTakenOver;
}
- (BOOL) isTakenOver {
  return result.isTakenOver;
}
- (PBGameUser_Builder*) setIsTakenOver:(BOOL) value {
  result.hasIsTakenOver = YES;
  result.isTakenOver = value;
  return self;
}
- (PBGameUser_Builder*) clearIsTakenOver {
  result.hasIsTakenOver = NO;
  result.isTakenOver = NO;
  return self;
}
- (NSArray*) attributesList {
  if (result.mutableAttributesList == nil) { return [NSArray array]; }
  return result.mutableAttributesList;
}
- (PBKeyValue*) attributesAtIndex:(int32_t) index {
  return [result attributesAtIndex:index];
}
- (PBGameUser_Builder*) replaceAttributesAtIndex:(int32_t) index with:(PBKeyValue*) value {
  [result.mutableAttributesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameUser_Builder*) addAllAttributes:(NSArray*) values {
  if (result.mutableAttributesList == nil) {
    result.mutableAttributesList = [NSMutableArray array];
  }
  [result.mutableAttributesList addObjectsFromArray:values];
  return self;
}
- (PBGameUser_Builder*) clearAttributesList {
  result.mutableAttributesList = nil;
  return self;
}
- (PBGameUser_Builder*) addAttributes:(PBKeyValue*) value {
  if (result.mutableAttributesList == nil) {
    result.mutableAttributesList = [NSMutableArray array];
  }
  [result.mutableAttributesList addObject:value];
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (PBGameUser_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (PBGameUser_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (PBGameUser_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (PBGameUser_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasBirthday {
  return result.hasBirthday;
}
- (NSString*) birthday {
  return result.birthday;
}
- (PBGameUser_Builder*) setBirthday:(NSString*) value {
  result.hasBirthday = YES;
  result.birthday = value;
  return self;
}
- (PBGameUser_Builder*) clearBirthday {
  result.hasBirthday = NO;
  result.birthday = @"";
  return self;
}
- (BOOL) hasZodiac {
  return result.hasZodiac;
}
- (int32_t) zodiac {
  return result.zodiac;
}
- (PBGameUser_Builder*) setZodiac:(int32_t) value {
  result.hasZodiac = YES;
  result.zodiac = value;
  return self;
}
- (PBGameUser_Builder*) clearZodiac {
  result.hasZodiac = NO;
  result.zodiac = 0;
  return self;
}
- (BOOL) hasGuessWordLanguage {
  return result.hasGuessWordLanguage;
}
- (int32_t) guessWordLanguage {
  return result.guessWordLanguage;
}
- (PBGameUser_Builder*) setGuessWordLanguage:(int32_t) value {
  result.hasGuessWordLanguage = YES;
  result.guessWordLanguage = value;
  return self;
}
- (PBGameUser_Builder*) clearGuessWordLanguage {
  result.hasGuessWordLanguage = NO;
  result.guessWordLanguage = 1;
  return self;
}
- (BOOL) hasBackgroundUrl {
  return result.hasBackgroundUrl;
}
- (NSString*) backgroundUrl {
  return result.backgroundUrl;
}
- (PBGameUser_Builder*) setBackgroundUrl:(NSString*) value {
  result.hasBackgroundUrl = YES;
  result.backgroundUrl = value;
  return self;
}
- (PBGameUser_Builder*) clearBackgroundUrl {
  result.hasBackgroundUrl = NO;
  result.backgroundUrl = @"";
  return self;
}
- (BOOL) hasDeviceToken {
  return result.hasDeviceToken;
}
- (NSString*) deviceToken {
  return result.deviceToken;
}
- (PBGameUser_Builder*) setDeviceToken:(NSString*) value {
  result.hasDeviceToken = YES;
  result.deviceToken = value;
  return self;
}
- (PBGameUser_Builder*) clearDeviceToken {
  result.hasDeviceToken = NO;
  result.deviceToken = @"";
  return self;
}
- (BOOL) hasCountryCode {
  return result.hasCountryCode;
}
- (NSString*) countryCode {
  return result.countryCode;
}
- (PBGameUser_Builder*) setCountryCode:(NSString*) value {
  result.hasCountryCode = YES;
  result.countryCode = value;
  return self;
}
- (PBGameUser_Builder*) clearCountryCode {
  result.hasCountryCode = NO;
  result.countryCode = @"";
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (NSString*) language {
  return result.language;
}
- (PBGameUser_Builder*) setLanguage:(NSString*) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (PBGameUser_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (PBGameUser_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (PBGameUser_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int64_t) experience {
  return result.experience;
}
- (PBGameUser_Builder*) setExperience:(int64_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (PBGameUser_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0L;
  return self;
}
- (BOOL) hasCoinBalance {
  return result.hasCoinBalance;
}
- (int32_t) coinBalance {
  return result.coinBalance;
}
- (PBGameUser_Builder*) setCoinBalance:(int32_t) value {
  result.hasCoinBalance = YES;
  result.coinBalance = value;
  return self;
}
- (PBGameUser_Builder*) clearCoinBalance {
  result.hasCoinBalance = NO;
  result.coinBalance = 0;
  return self;
}
- (BOOL) hasDiamondBalance {
  return result.hasDiamondBalance;
}
- (int32_t) diamondBalance {
  return result.diamondBalance;
}
- (PBGameUser_Builder*) setDiamondBalance:(int32_t) value {
  result.hasDiamondBalance = YES;
  result.diamondBalance = value;
  return self;
}
- (PBGameUser_Builder*) clearDiamondBalance {
  result.hasDiamondBalance = NO;
  result.diamondBalance = 0;
  return self;
}
- (BOOL) hasIngotBalance {
  return result.hasIngotBalance;
}
- (int32_t) ingotBalance {
  return result.ingotBalance;
}
- (PBGameUser_Builder*) setIngotBalance:(int32_t) value {
  result.hasIngotBalance = YES;
  result.ingotBalance = value;
  return self;
}
- (PBGameUser_Builder*) clearIngotBalance {
  result.hasIngotBalance = NO;
  result.ingotBalance = 0;
  return self;
}
- (NSArray*) itemsList {
  if (result.mutableItemsList == nil) { return [NSArray array]; }
  return result.mutableItemsList;
}
- (PBUserItem*) itemsAtIndex:(int32_t) index {
  return [result itemsAtIndex:index];
}
- (PBGameUser_Builder*) replaceItemsAtIndex:(int32_t) index with:(PBUserItem*) value {
  [result.mutableItemsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameUser_Builder*) addAllItems:(NSArray*) values {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObjectsFromArray:values];
  return self;
}
- (PBGameUser_Builder*) clearItemsList {
  result.mutableItemsList = nil;
  return self;
}
- (PBGameUser_Builder*) addItems:(PBUserItem*) value {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObject:value];
  return self;
}
- (BOOL) hasDeviceModel {
  return result.hasDeviceModel;
}
- (NSString*) deviceModel {
  return result.deviceModel;
}
- (PBGameUser_Builder*) setDeviceModel:(NSString*) value {
  result.hasDeviceModel = YES;
  result.deviceModel = value;
  return self;
}
- (PBGameUser_Builder*) clearDeviceModel {
  result.hasDeviceModel = NO;
  result.deviceModel = @"";
  return self;
}
- (BOOL) hasDeviceOs {
  return result.hasDeviceOs;
}
- (NSString*) deviceOs {
  return result.deviceOs;
}
- (PBGameUser_Builder*) setDeviceOs:(NSString*) value {
  result.hasDeviceOs = YES;
  result.deviceOs = value;
  return self;
}
- (PBGameUser_Builder*) clearDeviceOs {
  result.hasDeviceOs = NO;
  result.deviceOs = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (PBGameUser_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (PBGameUser_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (NSString*) deviceType {
  return result.deviceType;
}
- (PBGameUser_Builder*) setDeviceType:(NSString*) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (PBGameUser_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = @"";
  return self;
}
- (BOOL) hasBloodGroup {
  return result.hasBloodGroup;
}
- (NSString*) bloodGroup {
  return result.bloodGroup;
}
- (PBGameUser_Builder*) setBloodGroup:(NSString*) value {
  result.hasBloodGroup = YES;
  result.bloodGroup = value;
  return self;
}
- (PBGameUser_Builder*) clearBloodGroup {
  result.hasBloodGroup = NO;
  result.bloodGroup = @"";
  return self;
}
- (BOOL) hasFanCount {
  return result.hasFanCount;
}
- (int32_t) fanCount {
  return result.fanCount;
}
- (PBGameUser_Builder*) setFanCount:(int32_t) value {
  result.hasFanCount = YES;
  result.fanCount = value;
  return self;
}
- (PBGameUser_Builder*) clearFanCount {
  result.hasFanCount = NO;
  result.fanCount = 0;
  return self;
}
- (BOOL) hasFollowCount {
  return result.hasFollowCount;
}
- (int32_t) followCount {
  return result.followCount;
}
- (PBGameUser_Builder*) setFollowCount:(int32_t) value {
  result.hasFollowCount = YES;
  result.followCount = value;
  return self;
}
- (PBGameUser_Builder*) clearFollowCount {
  result.hasFollowCount = NO;
  result.followCount = 0;
  return self;
}
- (BOOL) hasOpenInfoType {
  return result.hasOpenInfoType;
}
- (PBOpenInfoType) openInfoType {
  return result.openInfoType;
}
- (PBGameUser_Builder*) setOpenInfoType:(PBOpenInfoType) value {
  result.hasOpenInfoType = YES;
  result.openInfoType = value;
  return self;
}
- (PBGameUser_Builder*) clearOpenInfoType {
  result.hasOpenInfoType = NO;
  result.openInfoType = PBOpenInfoTypeOpenToFriend;
  return self;
}
- (BOOL) hasSignature {
  return result.hasSignature;
}
- (NSString*) signature {
  return result.signature;
}
- (PBGameUser_Builder*) setSignature:(NSString*) value {
  result.hasSignature = YES;
  result.signature = value;
  return self;
}
- (PBGameUser_Builder*) clearSignature {
  result.hasSignature = NO;
  result.signature = @"";
  return self;
}
@end

@interface PBGameSession ()
@property (retain) NSString* gameId;
@property int64_t sessionId;
@property (retain) NSString* name;
@property (retain) NSString* createBy;
@property int32_t createTime;
@property (retain) NSString* host;
@property int32_t status;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@property (retain) NSString* password;
@property int32_t ruleType;
@property (retain) NSMutableArray* mutableUsersList;
@end

@implementation PBGameSession

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCreateBy {
  return !!hasCreateBy_;
}
- (void) setHasCreateBy:(BOOL) value {
  hasCreateBy_ = !!value;
}
@synthesize createBy;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (BOOL) hasHost {
  return !!hasHost_;
}
- (void) setHasHost:(BOOL) value {
  hasHost_ = !!value;
}
@synthesize host;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) value {
  hasRuleType_ = !!value;
}
@synthesize ruleType;
@synthesize mutableUsersList;
- (void) dealloc {
  self.gameId = nil;
  self.name = nil;
  self.createBy = nil;
  self.host = nil;
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  self.password = nil;
  self.mutableUsersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.sessionId = 0L;
    self.name = @"";
    self.createBy = @"";
    self.createTime = 0;
    self.host = @"";
    self.status = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.password = @"";
    self.ruleType = 0;
  }
  return self;
}
static PBGameSession* defaultPBGameSessionInstance = nil;
+ (void) initialize {
  if (self == [PBGameSession class]) {
    defaultPBGameSessionInstance = [[PBGameSession alloc] init];
  }
}
+ (PBGameSession*) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (PBGameSession*) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (NSArray*) usersList {
  return mutableUsersList;
}
- (PBGameUser*) usersAtIndex:(int32_t) index {
  id value = [mutableUsersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (PBGameUser* element in self.usersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCreateBy) {
    [output writeString:4 value:self.createBy];
  }
  if (self.hasCreateTime) {
    [output writeInt32:5 value:self.createTime];
  }
  if (self.hasHost) {
    [output writeString:6 value:self.host];
  }
  if (self.hasStatus) {
    [output writeInt32:7 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:8 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:9 value:self.nextPlayUserId];
  }
  if (self.hasPassword) {
    [output writeString:10 value:self.password];
  }
  if (self.hasRuleType) {
    [output writeInt32:11 value:self.ruleType];
  }
  for (PBGameUser* element in self.usersList) {
    [output writeMessage:50 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameId) {
    size += computeStringSize(1, self.gameId);
  }
  if (self.hasSessionId) {
    size += computeInt64Size(2, self.sessionId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCreateBy) {
    size += computeStringSize(4, self.createBy);
  }
  if (self.hasCreateTime) {
    size += computeInt32Size(5, self.createTime);
  }
  if (self.hasHost) {
    size += computeStringSize(6, self.host);
  }
  if (self.hasStatus) {
    size += computeInt32Size(7, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(8, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(9, self.nextPlayUserId);
  }
  if (self.hasPassword) {
    size += computeStringSize(10, self.password);
  }
  if (self.hasRuleType) {
    size += computeInt32Size(11, self.ruleType);
  }
  for (PBGameUser* element in self.usersList) {
    size += computeMessageSize(50, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameSession*) parseFromData:(NSData*) data {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data] build];
}
+ (PBGameSession*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession_Builder*) builder {
  return [[[PBGameSession_Builder alloc] init] autorelease];
}
+ (PBGameSession_Builder*) builderWithPrototype:(PBGameSession*) prototype {
  return [[PBGameSession builder] mergeFrom:prototype];
}
- (PBGameSession_Builder*) builder {
  return [PBGameSession builder];
}
@end

@interface PBGameSession_Builder()
@property (retain) PBGameSession* result;
@end

@implementation PBGameSession_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameSession alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameSession_Builder*) clear {
  self.result = [[[PBGameSession alloc] init] autorelease];
  return self;
}
- (PBGameSession_Builder*) clone {
  return [PBGameSession builderWithPrototype:result];
}
- (PBGameSession*) defaultInstance {
  return [PBGameSession defaultInstance];
}
- (PBGameSession*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSession*) buildPartial {
  PBGameSession* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameSession_Builder*) mergeFrom:(PBGameSession*) other {
  if (other == [PBGameSession defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateBy) {
    [self setCreateBy:other.createBy];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasHost) {
    [self setHost:other.host];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  if (other.mutableUsersList.count > 0) {
    if (result.mutableUsersList == nil) {
      result.mutableUsersList = [NSMutableArray array];
    }
    [result.mutableUsersList addObjectsFromArray:other.mutableUsersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSession_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSession_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setCreateBy:[input readString]];
        break;
      }
      case 40: {
        [self setCreateTime:[input readInt32]];
        break;
      }
      case 50: {
        [self setHost:[input readString]];
        break;
      }
      case 56: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 66: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 82: {
        [self setPassword:[input readString]];
        break;
      }
      case 88: {
        [self setRuleType:[input readInt32]];
        break;
      }
      case 402: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (PBGameSession_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (PBGameSession_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (PBGameSession_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (PBGameSession_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBGameSession_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBGameSession_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCreateBy {
  return result.hasCreateBy;
}
- (NSString*) createBy {
  return result.createBy;
}
- (PBGameSession_Builder*) setCreateBy:(NSString*) value {
  result.hasCreateBy = YES;
  result.createBy = value;
  return self;
}
- (PBGameSession_Builder*) clearCreateBy {
  result.hasCreateBy = NO;
  result.createBy = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int32_t) createTime {
  return result.createTime;
}
- (PBGameSession_Builder*) setCreateTime:(int32_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (PBGameSession_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasHost {
  return result.hasHost;
}
- (NSString*) host {
  return result.host;
}
- (PBGameSession_Builder*) setHost:(NSString*) value {
  result.hasHost = YES;
  result.host = value;
  return self;
}
- (PBGameSession_Builder*) clearHost {
  result.hasHost = NO;
  result.host = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBGameSession_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBGameSession_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (PBGameSession_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (PBGameSession_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (PBGameSession_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (PBGameSession_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (PBGameSession_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (PBGameSession_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasRuleType {
  return result.hasRuleType;
}
- (int32_t) ruleType {
  return result.ruleType;
}
- (PBGameSession_Builder*) setRuleType:(int32_t) value {
  result.hasRuleType = YES;
  result.ruleType = value;
  return self;
}
- (PBGameSession_Builder*) clearRuleType {
  result.hasRuleType = NO;
  result.ruleType = 0;
  return self;
}
- (NSArray*) usersList {
  if (result.mutableUsersList == nil) { return [NSArray array]; }
  return result.mutableUsersList;
}
- (PBGameUser*) usersAtIndex:(int32_t) index {
  return [result usersAtIndex:index];
}
- (PBGameSession_Builder*) replaceUsersAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSession_Builder*) addAllUsers:(NSArray*) values {
  if (result.mutableUsersList == nil) {
    result.mutableUsersList = [NSMutableArray array];
  }
  [result.mutableUsersList addObjectsFromArray:values];
  return self;
}
- (PBGameSession_Builder*) clearUsersList {
  result.mutableUsersList = nil;
  return self;
}
- (PBGameSession_Builder*) addUsers:(PBGameUser*) value {
  if (result.mutableUsersList == nil) {
    result.mutableUsersList = [NSMutableArray array];
  }
  [result.mutableUsersList addObject:value];
  return self;
}
@end

@interface PBGameSessionChanged ()
@property int64_t sessionId;
@property int32_t status;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSMutableArray* mutableUsersAddedList;
@property (retain) NSMutableArray* mutableUserIdsDeletedList;
@property (retain) NSMutableArray* mutableUsersUpdatedList;
@end

@implementation PBGameSessionChanged

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
@synthesize mutableUsersAddedList;
@synthesize mutableUserIdsDeletedList;
@synthesize mutableUsersUpdatedList;
- (void) dealloc {
  self.currentPlayUserId = nil;
  self.mutableUsersAddedList = nil;
  self.mutableUserIdsDeletedList = nil;
  self.mutableUsersUpdatedList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.status = 0;
    self.currentPlayUserId = @"";
  }
  return self;
}
static PBGameSessionChanged* defaultPBGameSessionChangedInstance = nil;
+ (void) initialize {
  if (self == [PBGameSessionChanged class]) {
    defaultPBGameSessionChangedInstance = [[PBGameSessionChanged alloc] init];
  }
}
+ (PBGameSessionChanged*) defaultInstance {
  return defaultPBGameSessionChangedInstance;
}
- (PBGameSessionChanged*) defaultInstance {
  return defaultPBGameSessionChangedInstance;
}
- (NSArray*) usersAddedList {
  return mutableUsersAddedList;
}
- (PBGameUser*) usersAddedAtIndex:(int32_t) index {
  id value = [mutableUsersAddedList objectAtIndex:index];
  return value;
}
- (NSArray*) userIdsDeletedList {
  return mutableUserIdsDeletedList;
}
- (NSString*) userIdsDeletedAtIndex:(int32_t) index {
  id value = [mutableUserIdsDeletedList objectAtIndex:index];
  return value;
}
- (NSArray*) usersUpdatedList {
  return mutableUsersUpdatedList;
}
- (PBGameUser*) usersUpdatedAtIndex:(int32_t) index {
  id value = [mutableUsersUpdatedList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBGameUser* element in self.usersAddedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBGameUser* element in self.usersUpdatedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:3 value:self.currentPlayUserId];
  }
  for (PBGameUser* element in self.usersAddedList) {
    [output writeMessage:5 value:element];
  }
  for (NSString* element in self.mutableUserIdsDeletedList) {
    [output writeString:6 value:element];
  }
  for (PBGameUser* element in self.usersUpdatedList) {
    [output writeMessage:7 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionId) {
    size += computeInt64Size(1, self.sessionId);
  }
  if (self.hasStatus) {
    size += computeInt32Size(2, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(3, self.currentPlayUserId);
  }
  for (PBGameUser* element in self.usersAddedList) {
    size += computeMessageSize(5, element);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableUserIdsDeletedList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableUserIdsDeletedList.count;
  }
  for (PBGameUser* element in self.usersUpdatedList) {
    size += computeMessageSize(7, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameSessionChanged*) parseFromData:(NSData*) data {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromData:data] build];
}
+ (PBGameSessionChanged*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromInputStream:input] build];
}
+ (PBGameSessionChanged*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSessionChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged_Builder*) builder {
  return [[[PBGameSessionChanged_Builder alloc] init] autorelease];
}
+ (PBGameSessionChanged_Builder*) builderWithPrototype:(PBGameSessionChanged*) prototype {
  return [[PBGameSessionChanged builder] mergeFrom:prototype];
}
- (PBGameSessionChanged_Builder*) builder {
  return [PBGameSessionChanged builder];
}
@end

@interface PBGameSessionChanged_Builder()
@property (retain) PBGameSessionChanged* result;
@end

@implementation PBGameSessionChanged_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameSessionChanged alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameSessionChanged_Builder*) clear {
  self.result = [[[PBGameSessionChanged alloc] init] autorelease];
  return self;
}
- (PBGameSessionChanged_Builder*) clone {
  return [PBGameSessionChanged builderWithPrototype:result];
}
- (PBGameSessionChanged*) defaultInstance {
  return [PBGameSessionChanged defaultInstance];
}
- (PBGameSessionChanged*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSessionChanged*) buildPartial {
  PBGameSessionChanged* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameSessionChanged_Builder*) mergeFrom:(PBGameSessionChanged*) other {
  if (other == [PBGameSessionChanged defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.mutableUsersAddedList.count > 0) {
    if (result.mutableUsersAddedList == nil) {
      result.mutableUsersAddedList = [NSMutableArray array];
    }
    [result.mutableUsersAddedList addObjectsFromArray:other.mutableUsersAddedList];
  }
  if (other.mutableUserIdsDeletedList.count > 0) {
    if (result.mutableUserIdsDeletedList == nil) {
      result.mutableUserIdsDeletedList = [NSMutableArray array];
    }
    [result.mutableUserIdsDeletedList addObjectsFromArray:other.mutableUserIdsDeletedList];
  }
  if (other.mutableUsersUpdatedList.count > 0) {
    if (result.mutableUsersUpdatedList == nil) {
      result.mutableUsersUpdatedList = [NSMutableArray array];
    }
    [result.mutableUsersUpdatedList addObjectsFromArray:other.mutableUsersUpdatedList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSessionChanged_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSessionChanged_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 42: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersAdded:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self addUserIdsDeleted:[input readString]];
        break;
      }
      case 58: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersUpdated:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (PBGameSessionChanged_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (PBGameSessionChanged_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBGameSessionChanged_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBGameSessionChanged_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (PBGameSessionChanged_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (PBGameSessionChanged_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (NSArray*) usersAddedList {
  if (result.mutableUsersAddedList == nil) { return [NSArray array]; }
  return result.mutableUsersAddedList;
}
- (PBGameUser*) usersAddedAtIndex:(int32_t) index {
  return [result usersAddedAtIndex:index];
}
- (PBGameSessionChanged_Builder*) replaceUsersAddedAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersAddedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addAllUsersAdded:(NSArray*) values {
  if (result.mutableUsersAddedList == nil) {
    result.mutableUsersAddedList = [NSMutableArray array];
  }
  [result.mutableUsersAddedList addObjectsFromArray:values];
  return self;
}
- (PBGameSessionChanged_Builder*) clearUsersAddedList {
  result.mutableUsersAddedList = nil;
  return self;
}
- (PBGameSessionChanged_Builder*) addUsersAdded:(PBGameUser*) value {
  if (result.mutableUsersAddedList == nil) {
    result.mutableUsersAddedList = [NSMutableArray array];
  }
  [result.mutableUsersAddedList addObject:value];
  return self;
}
- (NSArray*) userIdsDeletedList {
  if (result.mutableUserIdsDeletedList == nil) {
    return [NSArray array];
  }
  return result.mutableUserIdsDeletedList;
}
- (NSString*) userIdsDeletedAtIndex:(int32_t) index {
  return [result userIdsDeletedAtIndex:index];
}
- (PBGameSessionChanged_Builder*) replaceUserIdsDeletedAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableUserIdsDeletedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addUserIdsDeleted:(NSString*) value {
  if (result.mutableUserIdsDeletedList == nil) {
    result.mutableUserIdsDeletedList = [NSMutableArray array];
  }
  [result.mutableUserIdsDeletedList addObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addAllUserIdsDeleted:(NSArray*) values {
  if (result.mutableUserIdsDeletedList == nil) {
    result.mutableUserIdsDeletedList = [NSMutableArray array];
  }
  [result.mutableUserIdsDeletedList addObjectsFromArray:values];
  return self;
}
- (PBGameSessionChanged_Builder*) clearUserIdsDeletedList {
  result.mutableUserIdsDeletedList = nil;
  return self;
}
- (NSArray*) usersUpdatedList {
  if (result.mutableUsersUpdatedList == nil) { return [NSArray array]; }
  return result.mutableUsersUpdatedList;
}
- (PBGameUser*) usersUpdatedAtIndex:(int32_t) index {
  return [result usersUpdatedAtIndex:index];
}
- (PBGameSessionChanged_Builder*) replaceUsersUpdatedAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersUpdatedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addAllUsersUpdated:(NSArray*) values {
  if (result.mutableUsersUpdatedList == nil) {
    result.mutableUsersUpdatedList = [NSMutableArray array];
  }
  [result.mutableUsersUpdatedList addObjectsFromArray:values];
  return self;
}
- (PBGameSessionChanged_Builder*) clearUsersUpdatedList {
  result.mutableUsersUpdatedList = nil;
  return self;
}
- (PBGameSessionChanged_Builder*) addUsersUpdated:(PBGameUser*) value {
  if (result.mutableUsersUpdatedList == nil) {
    result.mutableUsersUpdatedList = [NSMutableArray array];
  }
  [result.mutableUsersUpdatedList addObject:value];
  return self;
}
@end

@interface PBDrawAction ()
@property int32_t type;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@property int32_t penType;
@property int32_t shapeType;
@property (retain) NSMutableArray* mutableRectComponentList;
@property (retain) NSMutableArray* mutablePointsXList;
@property (retain) NSMutableArray* mutablePointsYList;
@property int32_t betterColor;
@end

@implementation PBDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) value {
  hasPenType_ = !!value;
}
@synthesize penType;
- (BOOL) hasShapeType {
  return !!hasShapeType_;
}
- (void) setHasShapeType:(BOOL) value {
  hasShapeType_ = !!value;
}
@synthesize shapeType;
@synthesize mutableRectComponentList;
@synthesize mutablePointsXList;
@synthesize mutablePointsYList;
- (BOOL) hasBetterColor {
  return !!hasBetterColor_;
}
- (void) setHasBetterColor:(BOOL) value {
  hasBetterColor_ = !!value;
}
@synthesize betterColor;
- (void) dealloc {
  self.mutablePointsList = nil;
  self.mutableRectComponentList = nil;
  self.mutablePointsXList = nil;
  self.mutablePointsYList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
    self.shapeType = 0;
    self.betterColor = 0;
  }
  return self;
}
static PBDrawAction* defaultPBDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBDrawAction class]) {
    defaultPBDrawActionInstance = [[PBDrawAction alloc] init];
  }
}
+ (PBDrawAction*) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (PBDrawAction*) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) rectComponentList {
  return mutableRectComponentList;
}
- (Float32) rectComponentAtIndex:(int32_t) index {
  id value = [mutableRectComponentList objectAtIndex:index];
  return [value floatValue];
}
- (NSArray*) pointsXList {
  return mutablePointsXList;
}
- (Float32) pointsXAtIndex:(int32_t) index {
  id value = [mutablePointsXList objectAtIndex:index];
  return [value floatValue];
}
- (NSArray*) pointsYList {
  return mutablePointsYList;
}
- (Float32) pointsYAtIndex:(int32_t) index {
  id value = [mutablePointsYList objectAtIndex:index];
  return [value floatValue];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWidth) {
    [output writeFloat:3 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:5 value:self.penType];
  }
  if (self.hasShapeType) {
    [output writeInt32:6 value:self.shapeType];
  }
  for (NSNumber* value in self.mutableRectComponentList) {
    [output writeFloat:7 value:[value floatValue]];
  }
  for (NSNumber* value in self.mutablePointsXList) {
    [output writeFloat:11 value:[value floatValue]];
  }
  for (NSNumber* value in self.mutablePointsYList) {
    [output writeFloat:12 value:[value floatValue]];
  }
  if (self.hasBetterColor) {
    [output writeInt32:13 value:self.betterColor];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size += computeFloatSize(3, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(4, self.color);
  }
  if (self.hasPenType) {
    size += computeInt32Size(5, self.penType);
  }
  if (self.hasShapeType) {
    size += computeInt32Size(6, self.shapeType);
  }
  {
    int32_t dataSize = 0;
    dataSize = 4 * self.mutableRectComponentList.count;
    size += dataSize;
    size += 1 * self.mutableRectComponentList.count;
  }
  {
    int32_t dataSize = 0;
    dataSize = 4 * self.mutablePointsXList.count;
    size += dataSize;
    size += 1 * self.mutablePointsXList.count;
  }
  {
    int32_t dataSize = 0;
    dataSize = 4 * self.mutablePointsYList.count;
    size += dataSize;
    size += 1 * self.mutablePointsYList.count;
  }
  if (self.hasBetterColor) {
    size += computeInt32Size(13, self.betterColor);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDrawAction*) parseFromData:(NSData*) data {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data] build];
}
+ (PBDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction_Builder*) builder {
  return [[[PBDrawAction_Builder alloc] init] autorelease];
}
+ (PBDrawAction_Builder*) builderWithPrototype:(PBDrawAction*) prototype {
  return [[PBDrawAction builder] mergeFrom:prototype];
}
- (PBDrawAction_Builder*) builder {
  return [PBDrawAction builder];
}
@end

@interface PBDrawAction_Builder()
@property (retain) PBDrawAction* result;
@end

@implementation PBDrawAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDrawAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDrawAction_Builder*) clear {
  self.result = [[[PBDrawAction alloc] init] autorelease];
  return self;
}
- (PBDrawAction_Builder*) clone {
  return [PBDrawAction builderWithPrototype:result];
}
- (PBDrawAction*) defaultInstance {
  return [PBDrawAction defaultInstance];
}
- (PBDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawAction*) buildPartial {
  PBDrawAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDrawAction_Builder*) mergeFrom:(PBDrawAction*) other {
  if (other == [PBDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasShapeType) {
    [self setShapeType:other.shapeType];
  }
  if (other.mutableRectComponentList.count > 0) {
    if (result.mutableRectComponentList == nil) {
      result.mutableRectComponentList = [NSMutableArray array];
    }
    [result.mutableRectComponentList addObjectsFromArray:other.mutableRectComponentList];
  }
  if (other.mutablePointsXList.count > 0) {
    if (result.mutablePointsXList == nil) {
      result.mutablePointsXList = [NSMutableArray array];
    }
    [result.mutablePointsXList addObjectsFromArray:other.mutablePointsXList];
  }
  if (other.mutablePointsYList.count > 0) {
    if (result.mutablePointsYList == nil) {
      result.mutablePointsYList = [NSMutableArray array];
    }
    [result.mutablePointsYList addObjectsFromArray:other.mutablePointsYList];
  }
  if (other.hasBetterColor) {
    [self setBetterColor:other.betterColor];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 29: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
      case 40: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 48: {
        [self setShapeType:[input readInt32]];
        break;
      }
      case 61: {
        [self addRectComponent:[input readFloat]];
        break;
      }
      case 93: {
        [self addPointsX:[input readFloat]];
        break;
      }
      case 101: {
        [self addPointsY:[input readFloat]];
        break;
      }
      case 104: {
        [self setBetterColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBDrawAction_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBDrawAction_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (PBDrawAction_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (PBDrawAction_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (PBDrawAction_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (PBDrawAction_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (PBDrawAction_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBDrawAction_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (PBDrawAction_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (PBDrawAction_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return result.hasPenType;
}
- (int32_t) penType {
  return result.penType;
}
- (PBDrawAction_Builder*) setPenType:(int32_t) value {
  result.hasPenType = YES;
  result.penType = value;
  return self;
}
- (PBDrawAction_Builder*) clearPenType {
  result.hasPenType = NO;
  result.penType = 0;
  return self;
}
- (BOOL) hasShapeType {
  return result.hasShapeType;
}
- (int32_t) shapeType {
  return result.shapeType;
}
- (PBDrawAction_Builder*) setShapeType:(int32_t) value {
  result.hasShapeType = YES;
  result.shapeType = value;
  return self;
}
- (PBDrawAction_Builder*) clearShapeType {
  result.hasShapeType = NO;
  result.shapeType = 0;
  return self;
}
- (NSArray*) rectComponentList {
  if (result.mutableRectComponentList == nil) {
    return [NSArray array];
  }
  return result.mutableRectComponentList;
}
- (Float32) rectComponentAtIndex:(int32_t) index {
  return [result rectComponentAtIndex:index];
}
- (PBDrawAction_Builder*) replaceRectComponentAtIndex:(int32_t) index with:(Float32) value {
  [result.mutableRectComponentList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBDrawAction_Builder*) addRectComponent:(Float32) value {
  if (result.mutableRectComponentList == nil) {
    result.mutableRectComponentList = [NSMutableArray array];
  }
  [result.mutableRectComponentList addObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBDrawAction_Builder*) addAllRectComponent:(NSArray*) values {
  if (result.mutableRectComponentList == nil) {
    result.mutableRectComponentList = [NSMutableArray array];
  }
  [result.mutableRectComponentList addObjectsFromArray:values];
  return self;
}
- (PBDrawAction_Builder*) clearRectComponentList {
  result.mutableRectComponentList = nil;
  return self;
}
- (NSArray*) pointsXList {
  if (result.mutablePointsXList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsXList;
}
- (Float32) pointsXAtIndex:(int32_t) index {
  return [result pointsXAtIndex:index];
}
- (PBDrawAction_Builder*) replacePointsXAtIndex:(int32_t) index with:(Float32) value {
  [result.mutablePointsXList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBDrawAction_Builder*) addPointsX:(Float32) value {
  if (result.mutablePointsXList == nil) {
    result.mutablePointsXList = [NSMutableArray array];
  }
  [result.mutablePointsXList addObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBDrawAction_Builder*) addAllPointsX:(NSArray*) values {
  if (result.mutablePointsXList == nil) {
    result.mutablePointsXList = [NSMutableArray array];
  }
  [result.mutablePointsXList addObjectsFromArray:values];
  return self;
}
- (PBDrawAction_Builder*) clearPointsXList {
  result.mutablePointsXList = nil;
  return self;
}
- (NSArray*) pointsYList {
  if (result.mutablePointsYList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsYList;
}
- (Float32) pointsYAtIndex:(int32_t) index {
  return [result pointsYAtIndex:index];
}
- (PBDrawAction_Builder*) replacePointsYAtIndex:(int32_t) index with:(Float32) value {
  [result.mutablePointsYList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBDrawAction_Builder*) addPointsY:(Float32) value {
  if (result.mutablePointsYList == nil) {
    result.mutablePointsYList = [NSMutableArray array];
  }
  [result.mutablePointsYList addObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBDrawAction_Builder*) addAllPointsY:(NSArray*) values {
  if (result.mutablePointsYList == nil) {
    result.mutablePointsYList = [NSMutableArray array];
  }
  [result.mutablePointsYList addObjectsFromArray:values];
  return self;
}
- (PBDrawAction_Builder*) clearPointsYList {
  result.mutablePointsYList = nil;
  return self;
}
- (BOOL) hasBetterColor {
  return result.hasBetterColor;
}
- (int32_t) betterColor {
  return result.betterColor;
}
- (PBDrawAction_Builder*) setBetterColor:(int32_t) value {
  result.hasBetterColor = YES;
  result.betterColor = value;
  return self;
}
- (PBDrawAction_Builder*) clearBetterColor {
  result.hasBetterColor = NO;
  result.betterColor = 0;
  return self;
}
@end

@interface PBMessage ()
@property (retain) NSString* messageId;
@property (retain) NSString* from;
@property (retain) NSString* to;
@property int32_t status;
@property int32_t type;
@property (retain) NSString* text;
@property (retain) NSMutableArray* mutableDrawDataList;
@property int32_t createDate;
@property int32_t drawDataVersion;
@property (retain) PBSize* canvasSize;
@property Float64 longitude;
@property Float64 latitude;
@property (retain) NSString* reqMessageId;
@property int32_t replyResult;
@end

@implementation PBMessage

- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) value {
  hasFrom_ = !!value;
}
@synthesize from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) value {
  hasTo_ = !!value;
}
@synthesize to;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value {
  hasText_ = !!value;
}
@synthesize text;
@synthesize mutableDrawDataList;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasDrawDataVersion {
  return !!hasDrawDataVersion_;
}
- (void) setHasDrawDataVersion:(BOOL) value {
  hasDrawDataVersion_ = !!value;
}
@synthesize drawDataVersion;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) value {
  hasCanvasSize_ = !!value;
}
@synthesize canvasSize;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value {
  hasLongitude_ = !!value;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value {
  hasLatitude_ = !!value;
}
@synthesize latitude;
- (BOOL) hasReqMessageId {
  return !!hasReqMessageId_;
}
- (void) setHasReqMessageId:(BOOL) value {
  hasReqMessageId_ = !!value;
}
@synthesize reqMessageId;
- (BOOL) hasReplyResult {
  return !!hasReplyResult_;
}
- (void) setHasReplyResult:(BOOL) value {
  hasReplyResult_ = !!value;
}
@synthesize replyResult;
- (void) dealloc {
  self.messageId = nil;
  self.from = nil;
  self.to = nil;
  self.text = nil;
  self.mutableDrawDataList = nil;
  self.canvasSize = nil;
  self.reqMessageId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.messageId = @"";
    self.from = @"";
    self.to = @"";
    self.status = 0;
    self.type = 0;
    self.text = @"";
    self.createDate = 0;
    self.drawDataVersion = 0;
    self.canvasSize = [PBSize defaultInstance];
    self.longitude = 0;
    self.latitude = 0;
    self.reqMessageId = @"";
    self.replyResult = 0;
  }
  return self;
}
static PBMessage* defaultPBMessageInstance = nil;
+ (void) initialize {
  if (self == [PBMessage class]) {
    defaultPBMessageInstance = [[PBMessage alloc] init];
  }
}
+ (PBMessage*) defaultInstance {
  return defaultPBMessageInstance;
}
- (PBMessage*) defaultInstance {
  return defaultPBMessageInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasMessageId) {
    return NO;
  }
  if (!self.hasFrom) {
    return NO;
  }
  if (!self.hasTo) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessageId) {
    [output writeString:1 value:self.messageId];
  }
  if (self.hasFrom) {
    [output writeString:2 value:self.from];
  }
  if (self.hasTo) {
    [output writeString:3 value:self.to];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  if (self.hasType) {
    [output writeInt32:5 value:self.type];
  }
  if (self.hasText) {
    [output writeString:20 value:self.text];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:21 value:element];
  }
  if (self.hasCreateDate) {
    [output writeInt32:22 value:self.createDate];
  }
  if (self.hasDrawDataVersion) {
    [output writeInt32:23 value:self.drawDataVersion];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:24 value:self.canvasSize];
  }
  if (self.hasLongitude) {
    [output writeDouble:31 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeDouble:32 value:self.latitude];
  }
  if (self.hasReqMessageId) {
    [output writeString:33 value:self.reqMessageId];
  }
  if (self.hasReplyResult) {
    [output writeInt32:34 value:self.replyResult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMessageId) {
    size += computeStringSize(1, self.messageId);
  }
  if (self.hasFrom) {
    size += computeStringSize(2, self.from);
  }
  if (self.hasTo) {
    size += computeStringSize(3, self.to);
  }
  if (self.hasStatus) {
    size += computeInt32Size(4, self.status);
  }
  if (self.hasType) {
    size += computeInt32Size(5, self.type);
  }
  if (self.hasText) {
    size += computeStringSize(20, self.text);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(21, element);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(22, self.createDate);
  }
  if (self.hasDrawDataVersion) {
    size += computeInt32Size(23, self.drawDataVersion);
  }
  if (self.hasCanvasSize) {
    size += computeMessageSize(24, self.canvasSize);
  }
  if (self.hasLongitude) {
    size += computeDoubleSize(31, self.longitude);
  }
  if (self.hasLatitude) {
    size += computeDoubleSize(32, self.latitude);
  }
  if (self.hasReqMessageId) {
    size += computeStringSize(33, self.reqMessageId);
  }
  if (self.hasReplyResult) {
    size += computeInt32Size(34, self.replyResult);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBMessage*) parseFromData:(NSData*) data {
  return (PBMessage*)[[[PBMessage builder] mergeFromData:data] build];
}
+ (PBMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMessage*) parseFromInputStream:(NSInputStream*) input {
  return (PBMessage*)[[[PBMessage builder] mergeFromInputStream:input] build];
}
+ (PBMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMessage*)[[[PBMessage builder] mergeFromCodedInputStream:input] build];
}
+ (PBMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessage_Builder*) builder {
  return [[[PBMessage_Builder alloc] init] autorelease];
}
+ (PBMessage_Builder*) builderWithPrototype:(PBMessage*) prototype {
  return [[PBMessage builder] mergeFrom:prototype];
}
- (PBMessage_Builder*) builder {
  return [PBMessage builder];
}
@end

@interface PBMessage_Builder()
@property (retain) PBMessage* result;
@end

@implementation PBMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBMessage_Builder*) clear {
  self.result = [[[PBMessage alloc] init] autorelease];
  return self;
}
- (PBMessage_Builder*) clone {
  return [PBMessage builderWithPrototype:result];
}
- (PBMessage*) defaultInstance {
  return [PBMessage defaultInstance];
}
- (PBMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMessage*) buildPartial {
  PBMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBMessage_Builder*) mergeFrom:(PBMessage*) other {
  if (other == [PBMessage defaultInstance]) {
    return self;
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasDrawDataVersion) {
    [self setDrawDataVersion:other.drawDataVersion];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasReqMessageId) {
    [self setReqMessageId:other.reqMessageId];
  }
  if (other.hasReplyResult) {
    [self setReplyResult:other.replyResult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessageId:[input readString]];
        break;
      }
      case 18: {
        [self setFrom:[input readString]];
        break;
      }
      case 26: {
        [self setTo:[input readString]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setType:[input readInt32]];
        break;
      }
      case 162: {
        [self setText:[input readString]];
        break;
      }
      case 170: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 184: {
        [self setDrawDataVersion:[input readInt32]];
        break;
      }
      case 194: {
        PBSize_Builder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 249: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 257: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 266: {
        [self setReqMessageId:[input readString]];
        break;
      }
      case 272: {
        [self setReplyResult:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (NSString*) messageId {
  return result.messageId;
}
- (PBMessage_Builder*) setMessageId:(NSString*) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (PBMessage_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = @"";
  return self;
}
- (BOOL) hasFrom {
  return result.hasFrom;
}
- (NSString*) from {
  return result.from;
}
- (PBMessage_Builder*) setFrom:(NSString*) value {
  result.hasFrom = YES;
  result.from = value;
  return self;
}
- (PBMessage_Builder*) clearFrom {
  result.hasFrom = NO;
  result.from = @"";
  return self;
}
- (BOOL) hasTo {
  return result.hasTo;
}
- (NSString*) to {
  return result.to;
}
- (PBMessage_Builder*) setTo:(NSString*) value {
  result.hasTo = YES;
  result.to = value;
  return self;
}
- (PBMessage_Builder*) clearTo {
  result.hasTo = NO;
  result.to = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBMessage_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBMessage_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBMessage_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBMessage_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (PBMessage_Builder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (PBMessage_Builder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBMessage_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBMessage_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBMessage_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBMessage_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBMessage_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBMessage_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasDrawDataVersion {
  return result.hasDrawDataVersion;
}
- (int32_t) drawDataVersion {
  return result.drawDataVersion;
}
- (PBMessage_Builder*) setDrawDataVersion:(int32_t) value {
  result.hasDrawDataVersion = YES;
  result.drawDataVersion = value;
  return self;
}
- (PBMessage_Builder*) clearDrawDataVersion {
  result.hasDrawDataVersion = NO;
  result.drawDataVersion = 0;
  return self;
}
- (BOOL) hasCanvasSize {
  return result.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return result.canvasSize;
}
- (PBMessage_Builder*) setCanvasSize:(PBSize*) value {
  result.hasCanvasSize = YES;
  result.canvasSize = value;
  return self;
}
- (PBMessage_Builder*) setCanvasSizeBuilder:(PBSize_Builder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBMessage_Builder*) mergeCanvasSize:(PBSize*) value {
  if (result.hasCanvasSize &&
      result.canvasSize != [PBSize defaultInstance]) {
    result.canvasSize =
      [[[PBSize builderWithPrototype:result.canvasSize] mergeFrom:value] buildPartial];
  } else {
    result.canvasSize = value;
  }
  result.hasCanvasSize = YES;
  return self;
}
- (PBMessage_Builder*) clearCanvasSize {
  result.hasCanvasSize = NO;
  result.canvasSize = [PBSize defaultInstance];
  return self;
}
- (BOOL) hasLongitude {
  return result.hasLongitude;
}
- (Float64) longitude {
  return result.longitude;
}
- (PBMessage_Builder*) setLongitude:(Float64) value {
  result.hasLongitude = YES;
  result.longitude = value;
  return self;
}
- (PBMessage_Builder*) clearLongitude {
  result.hasLongitude = NO;
  result.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return result.hasLatitude;
}
- (Float64) latitude {
  return result.latitude;
}
- (PBMessage_Builder*) setLatitude:(Float64) value {
  result.hasLatitude = YES;
  result.latitude = value;
  return self;
}
- (PBMessage_Builder*) clearLatitude {
  result.hasLatitude = NO;
  result.latitude = 0;
  return self;
}
- (BOOL) hasReqMessageId {
  return result.hasReqMessageId;
}
- (NSString*) reqMessageId {
  return result.reqMessageId;
}
- (PBMessage_Builder*) setReqMessageId:(NSString*) value {
  result.hasReqMessageId = YES;
  result.reqMessageId = value;
  return self;
}
- (PBMessage_Builder*) clearReqMessageId {
  result.hasReqMessageId = NO;
  result.reqMessageId = @"";
  return self;
}
- (BOOL) hasReplyResult {
  return result.hasReplyResult;
}
- (int32_t) replyResult {
  return result.replyResult;
}
- (PBMessage_Builder*) setReplyResult:(int32_t) value {
  result.hasReplyResult = YES;
  result.replyResult = value;
  return self;
}
- (PBMessage_Builder*) clearReplyResult {
  result.hasReplyResult = NO;
  result.replyResult = 0;
  return self;
}
@end

@interface PBMessageStat ()
@property (retain) NSString* userId;
@property (retain) NSString* friendUserId;
@property (retain) NSString* friendNickName;
@property (retain) NSString* friendAvatar;
@property BOOL friendGender;
@property (retain) NSString* messageId;
@property (retain) NSString* from;
@property (retain) NSString* to;
@property (retain) NSString* text;
@property (retain) NSMutableArray* mutableDrawDataList;
@property int32_t createDate;
@property int32_t type;
@property int32_t modifiedDate;
@property int32_t totalMessageCount;
@property int32_t newMessageCount;
@end

@implementation PBMessageStat

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasFriendUserId {
  return !!hasFriendUserId_;
}
- (void) setHasFriendUserId:(BOOL) value {
  hasFriendUserId_ = !!value;
}
@synthesize friendUserId;
- (BOOL) hasFriendNickName {
  return !!hasFriendNickName_;
}
- (void) setHasFriendNickName:(BOOL) value {
  hasFriendNickName_ = !!value;
}
@synthesize friendNickName;
- (BOOL) hasFriendAvatar {
  return !!hasFriendAvatar_;
}
- (void) setHasFriendAvatar:(BOOL) value {
  hasFriendAvatar_ = !!value;
}
@synthesize friendAvatar;
- (BOOL) hasFriendGender {
  return !!hasFriendGender_;
}
- (void) setHasFriendGender:(BOOL) value {
  hasFriendGender_ = !!value;
}
- (BOOL) friendGender {
  return !!friendGender_;
}
- (void) setFriendGender:(BOOL) value {
  friendGender_ = !!value;
}
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) value {
  hasFrom_ = !!value;
}
@synthesize from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) value {
  hasTo_ = !!value;
}
@synthesize to;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value {
  hasText_ = !!value;
}
@synthesize text;
@synthesize mutableDrawDataList;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) value {
  hasModifiedDate_ = !!value;
}
@synthesize modifiedDate;
- (BOOL) hasTotalMessageCount {
  return !!hasTotalMessageCount_;
}
- (void) setHasTotalMessageCount:(BOOL) value {
  hasTotalMessageCount_ = !!value;
}
@synthesize totalMessageCount;
- (BOOL) hasNewMessageCount {
  return !!hasNewMessageCount_;
}
- (void) setHasNewMessageCount:(BOOL) value {
  hasNewMessageCount_ = !!value;
}
@synthesize newMessageCount;
- (void) dealloc {
  self.userId = nil;
  self.friendUserId = nil;
  self.friendNickName = nil;
  self.friendAvatar = nil;
  self.messageId = nil;
  self.from = nil;
  self.to = nil;
  self.text = nil;
  self.mutableDrawDataList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.friendUserId = @"";
    self.friendNickName = @"";
    self.friendAvatar = @"";
    self.friendGender = NO;
    self.messageId = @"";
    self.from = @"";
    self.to = @"";
    self.text = @"";
    self.createDate = 0;
    self.type = 0;
    self.modifiedDate = 0;
    self.totalMessageCount = 0;
    self.newMessageCount = 0;
  }
  return self;
}
static PBMessageStat* defaultPBMessageStatInstance = nil;
+ (void) initialize {
  if (self == [PBMessageStat class]) {
    defaultPBMessageStatInstance = [[PBMessageStat alloc] init];
  }
}
+ (PBMessageStat*) defaultInstance {
  return defaultPBMessageStatInstance;
}
- (PBMessageStat*) defaultInstance {
  return defaultPBMessageStatInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFriendUserId) {
    return NO;
  }
  if (!self.hasFriendNickName) {
    return NO;
  }
  if (!self.hasFrom) {
    return NO;
  }
  if (!self.hasTo) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasFriendUserId) {
    [output writeString:2 value:self.friendUserId];
  }
  if (self.hasFriendNickName) {
    [output writeString:3 value:self.friendNickName];
  }
  if (self.hasFriendAvatar) {
    [output writeString:4 value:self.friendAvatar];
  }
  if (self.hasFriendGender) {
    [output writeBool:5 value:self.friendGender];
  }
  if (self.hasMessageId) {
    [output writeString:10 value:self.messageId];
  }
  if (self.hasFrom) {
    [output writeString:11 value:self.from];
  }
  if (self.hasTo) {
    [output writeString:12 value:self.to];
  }
  if (self.hasText) {
    [output writeString:13 value:self.text];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:14 value:element];
  }
  if (self.hasCreateDate) {
    [output writeInt32:15 value:self.createDate];
  }
  if (self.hasType) {
    [output writeInt32:16 value:self.type];
  }
  if (self.hasModifiedDate) {
    [output writeInt32:31 value:self.modifiedDate];
  }
  if (self.hasTotalMessageCount) {
    [output writeInt32:32 value:self.totalMessageCount];
  }
  if (self.hasNewMessageCount) {
    [output writeInt32:33 value:self.newMessageCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasFriendUserId) {
    size += computeStringSize(2, self.friendUserId);
  }
  if (self.hasFriendNickName) {
    size += computeStringSize(3, self.friendNickName);
  }
  if (self.hasFriendAvatar) {
    size += computeStringSize(4, self.friendAvatar);
  }
  if (self.hasFriendGender) {
    size += computeBoolSize(5, self.friendGender);
  }
  if (self.hasMessageId) {
    size += computeStringSize(10, self.messageId);
  }
  if (self.hasFrom) {
    size += computeStringSize(11, self.from);
  }
  if (self.hasTo) {
    size += computeStringSize(12, self.to);
  }
  if (self.hasText) {
    size += computeStringSize(13, self.text);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(14, element);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(15, self.createDate);
  }
  if (self.hasType) {
    size += computeInt32Size(16, self.type);
  }
  if (self.hasModifiedDate) {
    size += computeInt32Size(31, self.modifiedDate);
  }
  if (self.hasTotalMessageCount) {
    size += computeInt32Size(32, self.totalMessageCount);
  }
  if (self.hasNewMessageCount) {
    size += computeInt32Size(33, self.newMessageCount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBMessageStat*) parseFromData:(NSData*) data {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromData:data] build];
}
+ (PBMessageStat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat*) parseFromInputStream:(NSInputStream*) input {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromInputStream:input] build];
}
+ (PBMessageStat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromCodedInputStream:input] build];
}
+ (PBMessageStat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat_Builder*) builder {
  return [[[PBMessageStat_Builder alloc] init] autorelease];
}
+ (PBMessageStat_Builder*) builderWithPrototype:(PBMessageStat*) prototype {
  return [[PBMessageStat builder] mergeFrom:prototype];
}
- (PBMessageStat_Builder*) builder {
  return [PBMessageStat builder];
}
@end

@interface PBMessageStat_Builder()
@property (retain) PBMessageStat* result;
@end

@implementation PBMessageStat_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBMessageStat alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBMessageStat_Builder*) clear {
  self.result = [[[PBMessageStat alloc] init] autorelease];
  return self;
}
- (PBMessageStat_Builder*) clone {
  return [PBMessageStat builderWithPrototype:result];
}
- (PBMessageStat*) defaultInstance {
  return [PBMessageStat defaultInstance];
}
- (PBMessageStat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMessageStat*) buildPartial {
  PBMessageStat* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBMessageStat_Builder*) mergeFrom:(PBMessageStat*) other {
  if (other == [PBMessageStat defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFriendUserId) {
    [self setFriendUserId:other.friendUserId];
  }
  if (other.hasFriendNickName) {
    [self setFriendNickName:other.friendNickName];
  }
  if (other.hasFriendAvatar) {
    [self setFriendAvatar:other.friendAvatar];
  }
  if (other.hasFriendGender) {
    [self setFriendGender:other.friendGender];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTotalMessageCount) {
    [self setTotalMessageCount:other.totalMessageCount];
  }
  if (other.hasNewMessageCount) {
    [self setNewMessageCount:other.newMessageCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMessageStat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMessageStat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setFriendUserId:[input readString]];
        break;
      }
      case 26: {
        [self setFriendNickName:[input readString]];
        break;
      }
      case 34: {
        [self setFriendAvatar:[input readString]];
        break;
      }
      case 40: {
        [self setFriendGender:[input readBool]];
        break;
      }
      case 82: {
        [self setMessageId:[input readString]];
        break;
      }
      case 90: {
        [self setFrom:[input readString]];
        break;
      }
      case 98: {
        [self setTo:[input readString]];
        break;
      }
      case 106: {
        [self setText:[input readString]];
        break;
      }
      case 114: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 120: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 128: {
        [self setType:[input readInt32]];
        break;
      }
      case 248: {
        [self setModifiedDate:[input readInt32]];
        break;
      }
      case 256: {
        [self setTotalMessageCount:[input readInt32]];
        break;
      }
      case 264: {
        [self setNewMessageCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBMessageStat_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBMessageStat_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasFriendUserId {
  return result.hasFriendUserId;
}
- (NSString*) friendUserId {
  return result.friendUserId;
}
- (PBMessageStat_Builder*) setFriendUserId:(NSString*) value {
  result.hasFriendUserId = YES;
  result.friendUserId = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendUserId {
  result.hasFriendUserId = NO;
  result.friendUserId = @"";
  return self;
}
- (BOOL) hasFriendNickName {
  return result.hasFriendNickName;
}
- (NSString*) friendNickName {
  return result.friendNickName;
}
- (PBMessageStat_Builder*) setFriendNickName:(NSString*) value {
  result.hasFriendNickName = YES;
  result.friendNickName = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendNickName {
  result.hasFriendNickName = NO;
  result.friendNickName = @"";
  return self;
}
- (BOOL) hasFriendAvatar {
  return result.hasFriendAvatar;
}
- (NSString*) friendAvatar {
  return result.friendAvatar;
}
- (PBMessageStat_Builder*) setFriendAvatar:(NSString*) value {
  result.hasFriendAvatar = YES;
  result.friendAvatar = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendAvatar {
  result.hasFriendAvatar = NO;
  result.friendAvatar = @"";
  return self;
}
- (BOOL) hasFriendGender {
  return result.hasFriendGender;
}
- (BOOL) friendGender {
  return result.friendGender;
}
- (PBMessageStat_Builder*) setFriendGender:(BOOL) value {
  result.hasFriendGender = YES;
  result.friendGender = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendGender {
  result.hasFriendGender = NO;
  result.friendGender = NO;
  return self;
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (NSString*) messageId {
  return result.messageId;
}
- (PBMessageStat_Builder*) setMessageId:(NSString*) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (PBMessageStat_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = @"";
  return self;
}
- (BOOL) hasFrom {
  return result.hasFrom;
}
- (NSString*) from {
  return result.from;
}
- (PBMessageStat_Builder*) setFrom:(NSString*) value {
  result.hasFrom = YES;
  result.from = value;
  return self;
}
- (PBMessageStat_Builder*) clearFrom {
  result.hasFrom = NO;
  result.from = @"";
  return self;
}
- (BOOL) hasTo {
  return result.hasTo;
}
- (NSString*) to {
  return result.to;
}
- (PBMessageStat_Builder*) setTo:(NSString*) value {
  result.hasTo = YES;
  result.to = value;
  return self;
}
- (PBMessageStat_Builder*) clearTo {
  result.hasTo = NO;
  result.to = @"";
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (PBMessageStat_Builder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (PBMessageStat_Builder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBMessageStat_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBMessageStat_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBMessageStat_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBMessageStat_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBMessageStat_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBMessageStat_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBMessageStat_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBMessageStat_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return result.hasModifiedDate;
}
- (int32_t) modifiedDate {
  return result.modifiedDate;
}
- (PBMessageStat_Builder*) setModifiedDate:(int32_t) value {
  result.hasModifiedDate = YES;
  result.modifiedDate = value;
  return self;
}
- (PBMessageStat_Builder*) clearModifiedDate {
  result.hasModifiedDate = NO;
  result.modifiedDate = 0;
  return self;
}
- (BOOL) hasTotalMessageCount {
  return result.hasTotalMessageCount;
}
- (int32_t) totalMessageCount {
  return result.totalMessageCount;
}
- (PBMessageStat_Builder*) setTotalMessageCount:(int32_t) value {
  result.hasTotalMessageCount = YES;
  result.totalMessageCount = value;
  return self;
}
- (PBMessageStat_Builder*) clearTotalMessageCount {
  result.hasTotalMessageCount = NO;
  result.totalMessageCount = 0;
  return self;
}
- (BOOL) hasNewMessageCount {
  return result.hasNewMessageCount;
}
- (int32_t) newMessageCount {
  return result.newMessageCount;
}
- (PBMessageStat_Builder*) setNewMessageCount:(int32_t) value {
  result.hasNewMessageCount = YES;
  result.newMessageCount = value;
  return self;
}
- (PBMessageStat_Builder*) clearNewMessageCount {
  result.hasNewMessageCount = NO;
  result.newMessageCount = 0;
  return self;
}
@end

@interface PBUserBasicInfo ()
@property (retain) NSString* userId;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property (retain) NSString* gender;
@end

@implementation PBUserBasicInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
@synthesize gender;
- (void) dealloc {
  self.userId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.gender = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = @"";
  }
  return self;
}
static PBUserBasicInfo* defaultPBUserBasicInfoInstance = nil;
+ (void) initialize {
  if (self == [PBUserBasicInfo class]) {
    defaultPBUserBasicInfoInstance = [[PBUserBasicInfo alloc] init];
  }
}
+ (PBUserBasicInfo*) defaultInstance {
  return defaultPBUserBasicInfoInstance;
}
- (PBUserBasicInfo*) defaultInstance {
  return defaultPBUserBasicInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasAvatar) {
    return NO;
  }
  if (!self.hasGender) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeString:4 value:self.gender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size += computeStringSize(4, self.gender);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserBasicInfo*) parseFromData:(NSData*) data {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromData:data] build];
}
+ (PBUserBasicInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserBasicInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromInputStream:input] build];
}
+ (PBUserBasicInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserBasicInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserBasicInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserBasicInfo_Builder*) builder {
  return [[[PBUserBasicInfo_Builder alloc] init] autorelease];
}
+ (PBUserBasicInfo_Builder*) builderWithPrototype:(PBUserBasicInfo*) prototype {
  return [[PBUserBasicInfo builder] mergeFrom:prototype];
}
- (PBUserBasicInfo_Builder*) builder {
  return [PBUserBasicInfo builder];
}
@end

@interface PBUserBasicInfo_Builder()
@property (retain) PBUserBasicInfo* result;
@end

@implementation PBUserBasicInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserBasicInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserBasicInfo_Builder*) clear {
  self.result = [[[PBUserBasicInfo alloc] init] autorelease];
  return self;
}
- (PBUserBasicInfo_Builder*) clone {
  return [PBUserBasicInfo builderWithPrototype:result];
}
- (PBUserBasicInfo*) defaultInstance {
  return [PBUserBasicInfo defaultInstance];
}
- (PBUserBasicInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserBasicInfo*) buildPartial {
  PBUserBasicInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserBasicInfo_Builder*) mergeFrom:(PBUserBasicInfo*) other {
  if (other == [PBUserBasicInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserBasicInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserBasicInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 34: {
        [self setGender:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserBasicInfo_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserBasicInfo_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBUserBasicInfo_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBUserBasicInfo_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBUserBasicInfo_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBUserBasicInfo_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (NSString*) gender {
  return result.gender;
}
- (PBUserBasicInfo_Builder*) setGender:(NSString*) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBUserBasicInfo_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = @"";
  return self;
}
@end

@interface PBUserResult ()
@property (retain) NSString* userId;
@property BOOL win;
@property int32_t gainCoins;
@end

@implementation PBUserResult

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasWin {
  return !!hasWin_;
}
- (void) setHasWin:(BOOL) value {
  hasWin_ = !!value;
}
- (BOOL) win {
  return !!win_;
}
- (void) setWin:(BOOL) value {
  win_ = !!value;
}
- (BOOL) hasGainCoins {
  return !!hasGainCoins_;
}
- (void) setHasGainCoins:(BOOL) value {
  hasGainCoins_ = !!value;
}
@synthesize gainCoins;
- (void) dealloc {
  self.userId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.win = NO;
    self.gainCoins = 0;
  }
  return self;
}
static PBUserResult* defaultPBUserResultInstance = nil;
+ (void) initialize {
  if (self == [PBUserResult class]) {
    defaultPBUserResultInstance = [[PBUserResult alloc] init];
  }
}
+ (PBUserResult*) defaultInstance {
  return defaultPBUserResultInstance;
}
- (PBUserResult*) defaultInstance {
  return defaultPBUserResultInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWin) {
    return NO;
  }
  if (!self.hasGainCoins) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWin) {
    [output writeBool:2 value:self.win];
  }
  if (self.hasGainCoins) {
    [output writeInt32:5 value:self.gainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasWin) {
    size += computeBoolSize(2, self.win);
  }
  if (self.hasGainCoins) {
    size += computeInt32Size(5, self.gainCoins);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserResult*) parseFromData:(NSData*) data {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data] build];
}
+ (PBUserResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult_Builder*) builder {
  return [[[PBUserResult_Builder alloc] init] autorelease];
}
+ (PBUserResult_Builder*) builderWithPrototype:(PBUserResult*) prototype {
  return [[PBUserResult builder] mergeFrom:prototype];
}
- (PBUserResult_Builder*) builder {
  return [PBUserResult builder];
}
@end

@interface PBUserResult_Builder()
@property (retain) PBUserResult* result;
@end

@implementation PBUserResult_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserResult_Builder*) clear {
  self.result = [[[PBUserResult alloc] init] autorelease];
  return self;
}
- (PBUserResult_Builder*) clone {
  return [PBUserResult builderWithPrototype:result];
}
- (PBUserResult*) defaultInstance {
  return [PBUserResult defaultInstance];
}
- (PBUserResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserResult*) buildPartial {
  PBUserResult* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserResult_Builder*) mergeFrom:(PBUserResult*) other {
  if (other == [PBUserResult defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWin) {
    [self setWin:other.win];
  }
  if (other.hasGainCoins) {
    [self setGainCoins:other.gainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        [self setWin:[input readBool]];
        break;
      }
      case 40: {
        [self setGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserResult_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserResult_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasWin {
  return result.hasWin;
}
- (BOOL) win {
  return result.win;
}
- (PBUserResult_Builder*) setWin:(BOOL) value {
  result.hasWin = YES;
  result.win = value;
  return self;
}
- (PBUserResult_Builder*) clearWin {
  result.hasWin = NO;
  result.win = NO;
  return self;
}
- (BOOL) hasGainCoins {
  return result.hasGainCoins;
}
- (int32_t) gainCoins {
  return result.gainCoins;
}
- (PBUserResult_Builder*) setGainCoins:(int32_t) value {
  result.hasGainCoins = YES;
  result.gainCoins = value;
  return self;
}
- (PBUserResult_Builder*) clearGainCoins {
  result.hasGainCoins = NO;
  result.gainCoins = 0;
  return self;
}
@end

@interface PBItemPriceInfo ()
@property int32_t price;
@property PBGameCurrency currency;
@end

@implementation PBItemPriceInfo

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasCurrency {
  return !!hasCurrency_;
}
- (void) setHasCurrency:(BOOL) value {
  hasCurrency_ = !!value;
}
@synthesize currency;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.price = 0;
    self.currency = PBGameCurrencyCoin;
  }
  return self;
}
static PBItemPriceInfo* defaultPBItemPriceInfoInstance = nil;
+ (void) initialize {
  if (self == [PBItemPriceInfo class]) {
    defaultPBItemPriceInfoInstance = [[PBItemPriceInfo alloc] init];
  }
}
+ (PBItemPriceInfo*) defaultInstance {
  return defaultPBItemPriceInfoInstance;
}
- (PBItemPriceInfo*) defaultInstance {
  return defaultPBItemPriceInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPrice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeInt32:1 value:self.price];
  }
  if (self.hasCurrency) {
    [output writeEnum:2 value:self.currency];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrice) {
    size += computeInt32Size(1, self.price);
  }
  if (self.hasCurrency) {
    size += computeEnumSize(2, self.currency);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBItemPriceInfo*) parseFromData:(NSData*) data {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromData:data] build];
}
+ (PBItemPriceInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBItemPriceInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromInputStream:input] build];
}
+ (PBItemPriceInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBItemPriceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBItemPriceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBItemPriceInfo_Builder*) builder {
  return [[[PBItemPriceInfo_Builder alloc] init] autorelease];
}
+ (PBItemPriceInfo_Builder*) builderWithPrototype:(PBItemPriceInfo*) prototype {
  return [[PBItemPriceInfo builder] mergeFrom:prototype];
}
- (PBItemPriceInfo_Builder*) builder {
  return [PBItemPriceInfo builder];
}
@end

@interface PBItemPriceInfo_Builder()
@property (retain) PBItemPriceInfo* result;
@end

@implementation PBItemPriceInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBItemPriceInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBItemPriceInfo_Builder*) clear {
  self.result = [[[PBItemPriceInfo alloc] init] autorelease];
  return self;
}
- (PBItemPriceInfo_Builder*) clone {
  return [PBItemPriceInfo builderWithPrototype:result];
}
- (PBItemPriceInfo*) defaultInstance {
  return [PBItemPriceInfo defaultInstance];
}
- (PBItemPriceInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBItemPriceInfo*) buildPartial {
  PBItemPriceInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBItemPriceInfo_Builder*) mergeFrom:(PBItemPriceInfo*) other {
  if (other == [PBItemPriceInfo defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasCurrency) {
    [self setCurrency:other.currency];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBItemPriceInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBItemPriceInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (PBGameCurrencyIsValidValue(value)) {
          [self setCurrency:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (PBItemPriceInfo_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (PBItemPriceInfo_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasCurrency {
  return result.hasCurrency;
}
- (PBGameCurrency) currency {
  return result.currency;
}
- (PBItemPriceInfo_Builder*) setCurrency:(PBGameCurrency) value {
  result.hasCurrency = YES;
  result.currency = value;
  return self;
}
- (PBItemPriceInfo_Builder*) clearCurrency {
  result.hasCurrency = NO;
  result.currency = PBGameCurrencyCoin;
  return self;
}
@end

@interface PBPromotionInfo ()
@property int32_t price;
@property int32_t startDate;
@property int32_t expireDate;
@end

@implementation PBPromotionInfo

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value {
  hasStartDate_ = !!value;
}
@synthesize startDate;
- (BOOL) hasExpireDate {
  return !!hasExpireDate_;
}
- (void) setHasExpireDate:(BOOL) value {
  hasExpireDate_ = !!value;
}
@synthesize expireDate;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.price = 0;
    self.startDate = 0;
    self.expireDate = 0;
  }
  return self;
}
static PBPromotionInfo* defaultPBPromotionInfoInstance = nil;
+ (void) initialize {
  if (self == [PBPromotionInfo class]) {
    defaultPBPromotionInfoInstance = [[PBPromotionInfo alloc] init];
  }
}
+ (PBPromotionInfo*) defaultInstance {
  return defaultPBPromotionInfoInstance;
}
- (PBPromotionInfo*) defaultInstance {
  return defaultPBPromotionInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPrice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeInt32:1 value:self.price];
  }
  if (self.hasStartDate) {
    [output writeInt32:2 value:self.startDate];
  }
  if (self.hasExpireDate) {
    [output writeInt32:3 value:self.expireDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrice) {
    size += computeInt32Size(1, self.price);
  }
  if (self.hasStartDate) {
    size += computeInt32Size(2, self.startDate);
  }
  if (self.hasExpireDate) {
    size += computeInt32Size(3, self.expireDate);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBPromotionInfo*) parseFromData:(NSData*) data {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromData:data] build];
}
+ (PBPromotionInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPromotionInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromInputStream:input] build];
}
+ (PBPromotionInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPromotionInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBPromotionInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPromotionInfo_Builder*) builder {
  return [[[PBPromotionInfo_Builder alloc] init] autorelease];
}
+ (PBPromotionInfo_Builder*) builderWithPrototype:(PBPromotionInfo*) prototype {
  return [[PBPromotionInfo builder] mergeFrom:prototype];
}
- (PBPromotionInfo_Builder*) builder {
  return [PBPromotionInfo builder];
}
@end

@interface PBPromotionInfo_Builder()
@property (retain) PBPromotionInfo* result;
@end

@implementation PBPromotionInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBPromotionInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPromotionInfo_Builder*) clear {
  self.result = [[[PBPromotionInfo alloc] init] autorelease];
  return self;
}
- (PBPromotionInfo_Builder*) clone {
  return [PBPromotionInfo builderWithPrototype:result];
}
- (PBPromotionInfo*) defaultInstance {
  return [PBPromotionInfo defaultInstance];
}
- (PBPromotionInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPromotionInfo*) buildPartial {
  PBPromotionInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBPromotionInfo_Builder*) mergeFrom:(PBPromotionInfo*) other {
  if (other == [PBPromotionInfo defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasExpireDate) {
    [self setExpireDate:other.expireDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPromotionInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPromotionInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 16: {
        [self setStartDate:[input readInt32]];
        break;
      }
      case 24: {
        [self setExpireDate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (PBPromotionInfo_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (PBPromotionInfo_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (int32_t) startDate {
  return result.startDate;
}
- (PBPromotionInfo_Builder*) setStartDate:(int32_t) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (PBPromotionInfo_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = 0;
  return self;
}
- (BOOL) hasExpireDate {
  return result.hasExpireDate;
}
- (int32_t) expireDate {
  return result.expireDate;
}
- (PBPromotionInfo_Builder*) setExpireDate:(int32_t) value {
  result.hasExpireDate = YES;
  result.expireDate = value;
  return self;
}
- (PBPromotionInfo_Builder*) clearExpireDate {
  result.hasExpireDate = NO;
  result.expireDate = 0;
  return self;
}
@end

@interface PBGameItem ()
@property int32_t itemId;
@property (retain) NSString* name;
@property (retain) NSString* desc;
@property PBGameItemConsumeType consumeType;
@property (retain) NSString* image;
@property (retain) NSString* demoImage;
@property int32_t type;
@property (retain) NSString* appleProductId;
@property (retain) PBItemPriceInfo* priceInfo;
@property (retain) PBPromotionInfo* promotionInfo;
@property int32_t defaultSaleCount;
@property PBGameTimeUnit usageLifeUnit;
@property int32_t usageLife;
@end

@implementation PBGameItem

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value {
  hasItemId_ = !!value;
}
@synthesize itemId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value {
  hasDesc_ = !!value;
}
@synthesize desc;
- (BOOL) hasConsumeType {
  return !!hasConsumeType_;
}
- (void) setHasConsumeType:(BOOL) value {
  hasConsumeType_ = !!value;
}
@synthesize consumeType;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) value {
  hasImage_ = !!value;
}
@synthesize image;
- (BOOL) hasDemoImage {
  return !!hasDemoImage_;
}
- (void) setHasDemoImage:(BOOL) value {
  hasDemoImage_ = !!value;
}
@synthesize demoImage;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasAppleProductId {
  return !!hasAppleProductId_;
}
- (void) setHasAppleProductId:(BOOL) value {
  hasAppleProductId_ = !!value;
}
@synthesize appleProductId;
- (BOOL) hasPriceInfo {
  return !!hasPriceInfo_;
}
- (void) setHasPriceInfo:(BOOL) value {
  hasPriceInfo_ = !!value;
}
@synthesize priceInfo;
- (BOOL) hasPromotionInfo {
  return !!hasPromotionInfo_;
}
- (void) setHasPromotionInfo:(BOOL) value {
  hasPromotionInfo_ = !!value;
}
@synthesize promotionInfo;
- (BOOL) hasDefaultSaleCount {
  return !!hasDefaultSaleCount_;
}
- (void) setHasDefaultSaleCount:(BOOL) value {
  hasDefaultSaleCount_ = !!value;
}
@synthesize defaultSaleCount;
- (BOOL) hasUsageLifeUnit {
  return !!hasUsageLifeUnit_;
}
- (void) setHasUsageLifeUnit:(BOOL) value {
  hasUsageLifeUnit_ = !!value;
}
@synthesize usageLifeUnit;
- (BOOL) hasUsageLife {
  return !!hasUsageLife_;
}
- (void) setHasUsageLife:(BOOL) value {
  hasUsageLife_ = !!value;
}
@synthesize usageLife;
- (void) dealloc {
  self.name = nil;
  self.desc = nil;
  self.image = nil;
  self.demoImage = nil;
  self.appleProductId = nil;
  self.priceInfo = nil;
  self.promotionInfo = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.name = @"";
    self.desc = @"";
    self.consumeType = PBGameItemConsumeTypeNonConsumable;
    self.image = @"";
    self.demoImage = @"";
    self.type = 0;
    self.appleProductId = @"";
    self.priceInfo = [PBItemPriceInfo defaultInstance];
    self.promotionInfo = [PBPromotionInfo defaultInstance];
    self.defaultSaleCount = 0;
    self.usageLifeUnit = PBGameTimeUnitHour;
    self.usageLife = 0;
  }
  return self;
}
static PBGameItem* defaultPBGameItemInstance = nil;
+ (void) initialize {
  if (self == [PBGameItem class]) {
    defaultPBGameItemInstance = [[PBGameItem alloc] init];
  }
}
+ (PBGameItem*) defaultInstance {
  return defaultPBGameItemInstance;
}
- (PBGameItem*) defaultInstance {
  return defaultPBGameItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasPriceInfo) {
    if (!self.priceInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasPromotionInfo) {
    if (!self.promotionInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:3 value:self.desc];
  }
  if (self.hasConsumeType) {
    [output writeEnum:5 value:self.consumeType];
  }
  if (self.hasImage) {
    [output writeString:11 value:self.image];
  }
  if (self.hasDemoImage) {
    [output writeString:12 value:self.demoImage];
  }
  if (self.hasType) {
    [output writeInt32:15 value:self.type];
  }
  if (self.hasAppleProductId) {
    [output writeString:22 value:self.appleProductId];
  }
  if (self.hasPriceInfo) {
    [output writeMessage:23 value:self.priceInfo];
  }
  if (self.hasPromotionInfo) {
    [output writeMessage:24 value:self.promotionInfo];
  }
  if (self.hasDefaultSaleCount) {
    [output writeInt32:30 value:self.defaultSaleCount];
  }
  if (self.hasUsageLifeUnit) {
    [output writeEnum:50 value:self.usageLifeUnit];
  }
  if (self.hasUsageLife) {
    [output writeInt32:51 value:self.usageLife];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasItemId) {
    size += computeInt32Size(1, self.itemId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasDesc) {
    size += computeStringSize(3, self.desc);
  }
  if (self.hasConsumeType) {
    size += computeEnumSize(5, self.consumeType);
  }
  if (self.hasImage) {
    size += computeStringSize(11, self.image);
  }
  if (self.hasDemoImage) {
    size += computeStringSize(12, self.demoImage);
  }
  if (self.hasType) {
    size += computeInt32Size(15, self.type);
  }
  if (self.hasAppleProductId) {
    size += computeStringSize(22, self.appleProductId);
  }
  if (self.hasPriceInfo) {
    size += computeMessageSize(23, self.priceInfo);
  }
  if (self.hasPromotionInfo) {
    size += computeMessageSize(24, self.promotionInfo);
  }
  if (self.hasDefaultSaleCount) {
    size += computeInt32Size(30, self.defaultSaleCount);
  }
  if (self.hasUsageLifeUnit) {
    size += computeEnumSize(50, self.usageLifeUnit);
  }
  if (self.hasUsageLife) {
    size += computeInt32Size(51, self.usageLife);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameItem*) parseFromData:(NSData*) data {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromData:data] build];
}
+ (PBGameItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromInputStream:input] build];
}
+ (PBGameItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItem_Builder*) builder {
  return [[[PBGameItem_Builder alloc] init] autorelease];
}
+ (PBGameItem_Builder*) builderWithPrototype:(PBGameItem*) prototype {
  return [[PBGameItem builder] mergeFrom:prototype];
}
- (PBGameItem_Builder*) builder {
  return [PBGameItem builder];
}
@end

@interface PBGameItem_Builder()
@property (retain) PBGameItem* result;
@end

@implementation PBGameItem_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameItem alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameItem_Builder*) clear {
  self.result = [[[PBGameItem alloc] init] autorelease];
  return self;
}
- (PBGameItem_Builder*) clone {
  return [PBGameItem builderWithPrototype:result];
}
- (PBGameItem*) defaultInstance {
  return [PBGameItem defaultInstance];
}
- (PBGameItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameItem*) buildPartial {
  PBGameItem* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameItem_Builder*) mergeFrom:(PBGameItem*) other {
  if (other == [PBGameItem defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasConsumeType) {
    [self setConsumeType:other.consumeType];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasDemoImage) {
    [self setDemoImage:other.demoImage];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasAppleProductId) {
    [self setAppleProductId:other.appleProductId];
  }
  if (other.hasPriceInfo) {
    [self mergePriceInfo:other.priceInfo];
  }
  if (other.hasPromotionInfo) {
    [self mergePromotionInfo:other.promotionInfo];
  }
  if (other.hasDefaultSaleCount) {
    [self setDefaultSaleCount:other.defaultSaleCount];
  }
  if (other.hasUsageLifeUnit) {
    [self setUsageLifeUnit:other.usageLifeUnit];
  }
  if (other.hasUsageLife) {
    [self setUsageLife:other.usageLife];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDesc:[input readString]];
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (PBGameItemConsumeTypeIsValidValue(value)) {
          [self setConsumeType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 90: {
        [self setImage:[input readString]];
        break;
      }
      case 98: {
        [self setDemoImage:[input readString]];
        break;
      }
      case 120: {
        [self setType:[input readInt32]];
        break;
      }
      case 178: {
        [self setAppleProductId:[input readString]];
        break;
      }
      case 186: {
        PBItemPriceInfo_Builder* subBuilder = [PBItemPriceInfo builder];
        if (self.hasPriceInfo) {
          [subBuilder mergeFrom:self.priceInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPriceInfo:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        PBPromotionInfo_Builder* subBuilder = [PBPromotionInfo builder];
        if (self.hasPromotionInfo) {
          [subBuilder mergeFrom:self.promotionInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPromotionInfo:[subBuilder buildPartial]];
        break;
      }
      case 240: {
        [self setDefaultSaleCount:[input readInt32]];
        break;
      }
      case 400: {
        int32_t value = [input readEnum];
        if (PBGameTimeUnitIsValidValue(value)) {
          [self setUsageLifeUnit:value];
        } else {
          [unknownFields mergeVarintField:50 value:value];
        }
        break;
      }
      case 408: {
        [self setUsageLife:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (PBGameItem_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (PBGameItem_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBGameItem_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBGameItem_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (PBGameItem_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (PBGameItem_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasConsumeType {
  return result.hasConsumeType;
}
- (PBGameItemConsumeType) consumeType {
  return result.consumeType;
}
- (PBGameItem_Builder*) setConsumeType:(PBGameItemConsumeType) value {
  result.hasConsumeType = YES;
  result.consumeType = value;
  return self;
}
- (PBGameItem_Builder*) clearConsumeType {
  result.hasConsumeType = NO;
  result.consumeType = PBGameItemConsumeTypeNonConsumable;
  return self;
}
- (BOOL) hasImage {
  return result.hasImage;
}
- (NSString*) image {
  return result.image;
}
- (PBGameItem_Builder*) setImage:(NSString*) value {
  result.hasImage = YES;
  result.image = value;
  return self;
}
- (PBGameItem_Builder*) clearImage {
  result.hasImage = NO;
  result.image = @"";
  return self;
}
- (BOOL) hasDemoImage {
  return result.hasDemoImage;
}
- (NSString*) demoImage {
  return result.demoImage;
}
- (PBGameItem_Builder*) setDemoImage:(NSString*) value {
  result.hasDemoImage = YES;
  result.demoImage = value;
  return self;
}
- (PBGameItem_Builder*) clearDemoImage {
  result.hasDemoImage = NO;
  result.demoImage = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBGameItem_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBGameItem_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasAppleProductId {
  return result.hasAppleProductId;
}
- (NSString*) appleProductId {
  return result.appleProductId;
}
- (PBGameItem_Builder*) setAppleProductId:(NSString*) value {
  result.hasAppleProductId = YES;
  result.appleProductId = value;
  return self;
}
- (PBGameItem_Builder*) clearAppleProductId {
  result.hasAppleProductId = NO;
  result.appleProductId = @"";
  return self;
}
- (BOOL) hasPriceInfo {
  return result.hasPriceInfo;
}
- (PBItemPriceInfo*) priceInfo {
  return result.priceInfo;
}
- (PBGameItem_Builder*) setPriceInfo:(PBItemPriceInfo*) value {
  result.hasPriceInfo = YES;
  result.priceInfo = value;
  return self;
}
- (PBGameItem_Builder*) setPriceInfoBuilder:(PBItemPriceInfo_Builder*) builderForValue {
  return [self setPriceInfo:[builderForValue build]];
}
- (PBGameItem_Builder*) mergePriceInfo:(PBItemPriceInfo*) value {
  if (result.hasPriceInfo &&
      result.priceInfo != [PBItemPriceInfo defaultInstance]) {
    result.priceInfo =
      [[[PBItemPriceInfo builderWithPrototype:result.priceInfo] mergeFrom:value] buildPartial];
  } else {
    result.priceInfo = value;
  }
  result.hasPriceInfo = YES;
  return self;
}
- (PBGameItem_Builder*) clearPriceInfo {
  result.hasPriceInfo = NO;
  result.priceInfo = [PBItemPriceInfo defaultInstance];
  return self;
}
- (BOOL) hasPromotionInfo {
  return result.hasPromotionInfo;
}
- (PBPromotionInfo*) promotionInfo {
  return result.promotionInfo;
}
- (PBGameItem_Builder*) setPromotionInfo:(PBPromotionInfo*) value {
  result.hasPromotionInfo = YES;
  result.promotionInfo = value;
  return self;
}
- (PBGameItem_Builder*) setPromotionInfoBuilder:(PBPromotionInfo_Builder*) builderForValue {
  return [self setPromotionInfo:[builderForValue build]];
}
- (PBGameItem_Builder*) mergePromotionInfo:(PBPromotionInfo*) value {
  if (result.hasPromotionInfo &&
      result.promotionInfo != [PBPromotionInfo defaultInstance]) {
    result.promotionInfo =
      [[[PBPromotionInfo builderWithPrototype:result.promotionInfo] mergeFrom:value] buildPartial];
  } else {
    result.promotionInfo = value;
  }
  result.hasPromotionInfo = YES;
  return self;
}
- (PBGameItem_Builder*) clearPromotionInfo {
  result.hasPromotionInfo = NO;
  result.promotionInfo = [PBPromotionInfo defaultInstance];
  return self;
}
- (BOOL) hasDefaultSaleCount {
  return result.hasDefaultSaleCount;
}
- (int32_t) defaultSaleCount {
  return result.defaultSaleCount;
}
- (PBGameItem_Builder*) setDefaultSaleCount:(int32_t) value {
  result.hasDefaultSaleCount = YES;
  result.defaultSaleCount = value;
  return self;
}
- (PBGameItem_Builder*) clearDefaultSaleCount {
  result.hasDefaultSaleCount = NO;
  result.defaultSaleCount = 0;
  return self;
}
- (BOOL) hasUsageLifeUnit {
  return result.hasUsageLifeUnit;
}
- (PBGameTimeUnit) usageLifeUnit {
  return result.usageLifeUnit;
}
- (PBGameItem_Builder*) setUsageLifeUnit:(PBGameTimeUnit) value {
  result.hasUsageLifeUnit = YES;
  result.usageLifeUnit = value;
  return self;
}
- (PBGameItem_Builder*) clearUsageLifeUnit {
  result.hasUsageLifeUnit = NO;
  result.usageLifeUnit = PBGameTimeUnitHour;
  return self;
}
- (BOOL) hasUsageLife {
  return result.hasUsageLife;
}
- (int32_t) usageLife {
  return result.usageLife;
}
- (PBGameItem_Builder*) setUsageLife:(int32_t) value {
  result.hasUsageLife = YES;
  result.usageLife = value;
  return self;
}
- (PBGameItem_Builder*) clearUsageLife {
  result.hasUsageLife = NO;
  result.usageLife = 0;
  return self;
}
@end

@interface PBGameItemList ()
@property (retain) NSMutableArray* mutableItemsList;
@end

@implementation PBGameItemList

@synthesize mutableItemsList;
- (void) dealloc {
  self.mutableItemsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBGameItemList* defaultPBGameItemListInstance = nil;
+ (void) initialize {
  if (self == [PBGameItemList class]) {
    defaultPBGameItemListInstance = [[PBGameItemList alloc] init];
  }
}
+ (PBGameItemList*) defaultInstance {
  return defaultPBGameItemListInstance;
}
- (PBGameItemList*) defaultInstance {
  return defaultPBGameItemListInstance;
}
- (NSArray*) itemsList {
  return mutableItemsList;
}
- (PBGameItem*) itemsAtIndex:(int32_t) index {
  id value = [mutableItemsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBGameItem* element in self.itemsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBGameItem* element in self.itemsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBGameItem* element in self.itemsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameItemList*) parseFromData:(NSData*) data {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromData:data] build];
}
+ (PBGameItemList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemList*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromInputStream:input] build];
}
+ (PBGameItemList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemList_Builder*) builder {
  return [[[PBGameItemList_Builder alloc] init] autorelease];
}
+ (PBGameItemList_Builder*) builderWithPrototype:(PBGameItemList*) prototype {
  return [[PBGameItemList builder] mergeFrom:prototype];
}
- (PBGameItemList_Builder*) builder {
  return [PBGameItemList builder];
}
@end

@interface PBGameItemList_Builder()
@property (retain) PBGameItemList* result;
@end

@implementation PBGameItemList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameItemList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameItemList_Builder*) clear {
  self.result = [[[PBGameItemList alloc] init] autorelease];
  return self;
}
- (PBGameItemList_Builder*) clone {
  return [PBGameItemList builderWithPrototype:result];
}
- (PBGameItemList*) defaultInstance {
  return [PBGameItemList defaultInstance];
}
- (PBGameItemList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameItemList*) buildPartial {
  PBGameItemList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameItemList_Builder*) mergeFrom:(PBGameItemList*) other {
  if (other == [PBGameItemList defaultInstance]) {
    return self;
  }
  if (other.mutableItemsList.count > 0) {
    if (result.mutableItemsList == nil) {
      result.mutableItemsList = [NSMutableArray array];
    }
    [result.mutableItemsList addObjectsFromArray:other.mutableItemsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameItemList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameItemList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameItem_Builder* subBuilder = [PBGameItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) itemsList {
  if (result.mutableItemsList == nil) { return [NSArray array]; }
  return result.mutableItemsList;
}
- (PBGameItem*) itemsAtIndex:(int32_t) index {
  return [result itemsAtIndex:index];
}
- (PBGameItemList_Builder*) replaceItemsAtIndex:(int32_t) index with:(PBGameItem*) value {
  [result.mutableItemsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameItemList_Builder*) addAllItems:(NSArray*) values {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObjectsFromArray:values];
  return self;
}
- (PBGameItemList_Builder*) clearItemsList {
  result.mutableItemsList = nil;
  return self;
}
- (PBGameItemList_Builder*) addItems:(PBGameItem*) value {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObject:value];
  return self;
}
@end

@interface PBSaleIngot ()
@property int32_t count;
@property (retain) NSString* totalPrice;
@property (retain) NSString* currency;
@property (retain) NSString* country;
@property (retain) NSString* saving;
@property (retain) NSString* appleProductId;
@end

@implementation PBSaleIngot

- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (BOOL) hasTotalPrice {
  return !!hasTotalPrice_;
}
- (void) setHasTotalPrice:(BOOL) value {
  hasTotalPrice_ = !!value;
}
@synthesize totalPrice;
- (BOOL) hasCurrency {
  return !!hasCurrency_;
}
- (void) setHasCurrency:(BOOL) value {
  hasCurrency_ = !!value;
}
@synthesize currency;
- (BOOL) hasCountry {
  return !!hasCountry_;
}
- (void) setHasCountry:(BOOL) value {
  hasCountry_ = !!value;
}
@synthesize country;
- (BOOL) hasSaving {
  return !!hasSaving_;
}
- (void) setHasSaving:(BOOL) value {
  hasSaving_ = !!value;
}
@synthesize saving;
- (BOOL) hasAppleProductId {
  return !!hasAppleProductId_;
}
- (void) setHasAppleProductId:(BOOL) value {
  hasAppleProductId_ = !!value;
}
@synthesize appleProductId;
- (void) dealloc {
  self.totalPrice = nil;
  self.currency = nil;
  self.country = nil;
  self.saving = nil;
  self.appleProductId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.count = 0;
    self.totalPrice = @"";
    self.currency = @"";
    self.country = @"";
    self.saving = @"";
    self.appleProductId = @"";
  }
  return self;
}
static PBSaleIngot* defaultPBSaleIngotInstance = nil;
+ (void) initialize {
  if (self == [PBSaleIngot class]) {
    defaultPBSaleIngotInstance = [[PBSaleIngot alloc] init];
  }
}
+ (PBSaleIngot*) defaultInstance {
  return defaultPBSaleIngotInstance;
}
- (PBSaleIngot*) defaultInstance {
  return defaultPBSaleIngotInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCount) {
    [output writeInt32:1 value:self.count];
  }
  if (self.hasTotalPrice) {
    [output writeString:2 value:self.totalPrice];
  }
  if (self.hasCurrency) {
    [output writeString:3 value:self.currency];
  }
  if (self.hasCountry) {
    [output writeString:5 value:self.country];
  }
  if (self.hasSaving) {
    [output writeString:10 value:self.saving];
  }
  if (self.hasAppleProductId) {
    [output writeString:20 value:self.appleProductId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCount) {
    size += computeInt32Size(1, self.count);
  }
  if (self.hasTotalPrice) {
    size += computeStringSize(2, self.totalPrice);
  }
  if (self.hasCurrency) {
    size += computeStringSize(3, self.currency);
  }
  if (self.hasCountry) {
    size += computeStringSize(5, self.country);
  }
  if (self.hasSaving) {
    size += computeStringSize(10, self.saving);
  }
  if (self.hasAppleProductId) {
    size += computeStringSize(20, self.appleProductId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSaleIngot*) parseFromData:(NSData*) data {
  return (PBSaleIngot*)[[[PBSaleIngot builder] mergeFromData:data] build];
}
+ (PBSaleIngot*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSaleIngot*)[[[PBSaleIngot builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSaleIngot*) parseFromInputStream:(NSInputStream*) input {
  return (PBSaleIngot*)[[[PBSaleIngot builder] mergeFromInputStream:input] build];
}
+ (PBSaleIngot*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSaleIngot*)[[[PBSaleIngot builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSaleIngot*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSaleIngot*)[[[PBSaleIngot builder] mergeFromCodedInputStream:input] build];
}
+ (PBSaleIngot*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSaleIngot*)[[[PBSaleIngot builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSaleIngot_Builder*) builder {
  return [[[PBSaleIngot_Builder alloc] init] autorelease];
}
+ (PBSaleIngot_Builder*) builderWithPrototype:(PBSaleIngot*) prototype {
  return [[PBSaleIngot builder] mergeFrom:prototype];
}
- (PBSaleIngot_Builder*) builder {
  return [PBSaleIngot builder];
}
@end

@interface PBSaleIngot_Builder()
@property (retain) PBSaleIngot* result;
@end

@implementation PBSaleIngot_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSaleIngot alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSaleIngot_Builder*) clear {
  self.result = [[[PBSaleIngot alloc] init] autorelease];
  return self;
}
- (PBSaleIngot_Builder*) clone {
  return [PBSaleIngot builderWithPrototype:result];
}
- (PBSaleIngot*) defaultInstance {
  return [PBSaleIngot defaultInstance];
}
- (PBSaleIngot*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSaleIngot*) buildPartial {
  PBSaleIngot* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSaleIngot_Builder*) mergeFrom:(PBSaleIngot*) other {
  if (other == [PBSaleIngot defaultInstance]) {
    return self;
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasTotalPrice) {
    [self setTotalPrice:other.totalPrice];
  }
  if (other.hasCurrency) {
    [self setCurrency:other.currency];
  }
  if (other.hasCountry) {
    [self setCountry:other.country];
  }
  if (other.hasSaving) {
    [self setSaving:other.saving];
  }
  if (other.hasAppleProductId) {
    [self setAppleProductId:other.appleProductId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSaleIngot_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSaleIngot_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCount:[input readInt32]];
        break;
      }
      case 18: {
        [self setTotalPrice:[input readString]];
        break;
      }
      case 26: {
        [self setCurrency:[input readString]];
        break;
      }
      case 42: {
        [self setCountry:[input readString]];
        break;
      }
      case 82: {
        [self setSaving:[input readString]];
        break;
      }
      case 162: {
        [self setAppleProductId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (PBSaleIngot_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBSaleIngot_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
- (BOOL) hasTotalPrice {
  return result.hasTotalPrice;
}
- (NSString*) totalPrice {
  return result.totalPrice;
}
- (PBSaleIngot_Builder*) setTotalPrice:(NSString*) value {
  result.hasTotalPrice = YES;
  result.totalPrice = value;
  return self;
}
- (PBSaleIngot_Builder*) clearTotalPrice {
  result.hasTotalPrice = NO;
  result.totalPrice = @"";
  return self;
}
- (BOOL) hasCurrency {
  return result.hasCurrency;
}
- (NSString*) currency {
  return result.currency;
}
- (PBSaleIngot_Builder*) setCurrency:(NSString*) value {
  result.hasCurrency = YES;
  result.currency = value;
  return self;
}
- (PBSaleIngot_Builder*) clearCurrency {
  result.hasCurrency = NO;
  result.currency = @"";
  return self;
}
- (BOOL) hasCountry {
  return result.hasCountry;
}
- (NSString*) country {
  return result.country;
}
- (PBSaleIngot_Builder*) setCountry:(NSString*) value {
  result.hasCountry = YES;
  result.country = value;
  return self;
}
- (PBSaleIngot_Builder*) clearCountry {
  result.hasCountry = NO;
  result.country = @"";
  return self;
}
- (BOOL) hasSaving {
  return result.hasSaving;
}
- (NSString*) saving {
  return result.saving;
}
- (PBSaleIngot_Builder*) setSaving:(NSString*) value {
  result.hasSaving = YES;
  result.saving = value;
  return self;
}
- (PBSaleIngot_Builder*) clearSaving {
  result.hasSaving = NO;
  result.saving = @"";
  return self;
}
- (BOOL) hasAppleProductId {
  return result.hasAppleProductId;
}
- (NSString*) appleProductId {
  return result.appleProductId;
}
- (PBSaleIngot_Builder*) setAppleProductId:(NSString*) value {
  result.hasAppleProductId = YES;
  result.appleProductId = value;
  return self;
}
- (PBSaleIngot_Builder*) clearAppleProductId {
  result.hasAppleProductId = NO;
  result.appleProductId = @"";
  return self;
}
@end

@interface PBSaleIngotList ()
@property (retain) NSMutableArray* mutableIngotsList;
@end

@implementation PBSaleIngotList

@synthesize mutableIngotsList;
- (void) dealloc {
  self.mutableIngotsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBSaleIngotList* defaultPBSaleIngotListInstance = nil;
+ (void) initialize {
  if (self == [PBSaleIngotList class]) {
    defaultPBSaleIngotListInstance = [[PBSaleIngotList alloc] init];
  }
}
+ (PBSaleIngotList*) defaultInstance {
  return defaultPBSaleIngotListInstance;
}
- (PBSaleIngotList*) defaultInstance {
  return defaultPBSaleIngotListInstance;
}
- (NSArray*) ingotsList {
  return mutableIngotsList;
}
- (PBSaleIngot*) ingotsAtIndex:(int32_t) index {
  id value = [mutableIngotsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBSaleIngot* element in self.ingotsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBSaleIngot* element in self.ingotsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBSaleIngot* element in self.ingotsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSaleIngotList*) parseFromData:(NSData*) data {
  return (PBSaleIngotList*)[[[PBSaleIngotList builder] mergeFromData:data] build];
}
+ (PBSaleIngotList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSaleIngotList*)[[[PBSaleIngotList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSaleIngotList*) parseFromInputStream:(NSInputStream*) input {
  return (PBSaleIngotList*)[[[PBSaleIngotList builder] mergeFromInputStream:input] build];
}
+ (PBSaleIngotList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSaleIngotList*)[[[PBSaleIngotList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSaleIngotList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSaleIngotList*)[[[PBSaleIngotList builder] mergeFromCodedInputStream:input] build];
}
+ (PBSaleIngotList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSaleIngotList*)[[[PBSaleIngotList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSaleIngotList_Builder*) builder {
  return [[[PBSaleIngotList_Builder alloc] init] autorelease];
}
+ (PBSaleIngotList_Builder*) builderWithPrototype:(PBSaleIngotList*) prototype {
  return [[PBSaleIngotList builder] mergeFrom:prototype];
}
- (PBSaleIngotList_Builder*) builder {
  return [PBSaleIngotList builder];
}
@end

@interface PBSaleIngotList_Builder()
@property (retain) PBSaleIngotList* result;
@end

@implementation PBSaleIngotList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSaleIngotList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSaleIngotList_Builder*) clear {
  self.result = [[[PBSaleIngotList alloc] init] autorelease];
  return self;
}
- (PBSaleIngotList_Builder*) clone {
  return [PBSaleIngotList builderWithPrototype:result];
}
- (PBSaleIngotList*) defaultInstance {
  return [PBSaleIngotList defaultInstance];
}
- (PBSaleIngotList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSaleIngotList*) buildPartial {
  PBSaleIngotList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSaleIngotList_Builder*) mergeFrom:(PBSaleIngotList*) other {
  if (other == [PBSaleIngotList defaultInstance]) {
    return self;
  }
  if (other.mutableIngotsList.count > 0) {
    if (result.mutableIngotsList == nil) {
      result.mutableIngotsList = [NSMutableArray array];
    }
    [result.mutableIngotsList addObjectsFromArray:other.mutableIngotsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSaleIngotList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSaleIngotList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBSaleIngot_Builder* subBuilder = [PBSaleIngot builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIngots:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) ingotsList {
  if (result.mutableIngotsList == nil) { return [NSArray array]; }
  return result.mutableIngotsList;
}
- (PBSaleIngot*) ingotsAtIndex:(int32_t) index {
  return [result ingotsAtIndex:index];
}
- (PBSaleIngotList_Builder*) replaceIngotsAtIndex:(int32_t) index with:(PBSaleIngot*) value {
  [result.mutableIngotsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBSaleIngotList_Builder*) addAllIngots:(NSArray*) values {
  if (result.mutableIngotsList == nil) {
    result.mutableIngotsList = [NSMutableArray array];
  }
  [result.mutableIngotsList addObjectsFromArray:values];
  return self;
}
- (PBSaleIngotList_Builder*) clearIngotsList {
  result.mutableIngotsList = nil;
  return self;
}
- (PBSaleIngotList_Builder*) addIngots:(PBSaleIngot*) value {
  if (result.mutableIngotsList == nil) {
    result.mutableIngotsList = [NSMutableArray array];
  }
  [result.mutableIngotsList addObject:value];
  return self;
}
@end

@interface PBUserItem ()
@property int32_t itemId;
@property int32_t count;
@property int32_t createDate;
@property int32_t modifyDate;
@property int32_t expireDate;
@end

@implementation PBUserItem

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value {
  hasItemId_ = !!value;
}
@synthesize itemId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasModifyDate {
  return !!hasModifyDate_;
}
- (void) setHasModifyDate:(BOOL) value {
  hasModifyDate_ = !!value;
}
@synthesize modifyDate;
- (BOOL) hasExpireDate {
  return !!hasExpireDate_;
}
- (void) setHasExpireDate:(BOOL) value {
  hasExpireDate_ = !!value;
}
@synthesize expireDate;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.count = 0;
    self.createDate = 0;
    self.modifyDate = 0;
    self.expireDate = 0;
  }
  return self;
}
static PBUserItem* defaultPBUserItemInstance = nil;
+ (void) initialize {
  if (self == [PBUserItem class]) {
    defaultPBUserItemInstance = [[PBUserItem alloc] init];
  }
}
+ (PBUserItem*) defaultInstance {
  return defaultPBUserItemInstance;
}
- (PBUserItem*) defaultInstance {
  return defaultPBUserItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasModifyDate) {
    [output writeInt32:6 value:self.modifyDate];
  }
  if (self.hasExpireDate) {
    [output writeInt32:7 value:self.expireDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasItemId) {
    size += computeInt32Size(1, self.itemId);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(5, self.createDate);
  }
  if (self.hasModifyDate) {
    size += computeInt32Size(6, self.modifyDate);
  }
  if (self.hasExpireDate) {
    size += computeInt32Size(7, self.expireDate);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserItem*) parseFromData:(NSData*) data {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromData:data] build];
}
+ (PBUserItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromInputStream:input] build];
}
+ (PBUserItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem_Builder*) builder {
  return [[[PBUserItem_Builder alloc] init] autorelease];
}
+ (PBUserItem_Builder*) builderWithPrototype:(PBUserItem*) prototype {
  return [[PBUserItem builder] mergeFrom:prototype];
}
- (PBUserItem_Builder*) builder {
  return [PBUserItem builder];
}
@end

@interface PBUserItem_Builder()
@property (retain) PBUserItem* result;
@end

@implementation PBUserItem_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserItem alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserItem_Builder*) clear {
  self.result = [[[PBUserItem alloc] init] autorelease];
  return self;
}
- (PBUserItem_Builder*) clone {
  return [PBUserItem builderWithPrototype:result];
}
- (PBUserItem*) defaultInstance {
  return [PBUserItem defaultInstance];
}
- (PBUserItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserItem*) buildPartial {
  PBUserItem* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserItem_Builder*) mergeFrom:(PBUserItem*) other {
  if (other == [PBUserItem defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasModifyDate) {
    [self setModifyDate:other.modifyDate];
  }
  if (other.hasExpireDate) {
    [self setExpireDate:other.expireDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 48: {
        [self setModifyDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setExpireDate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (PBUserItem_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (PBUserItem_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (PBUserItem_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBUserItem_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBUserItem_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBUserItem_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasModifyDate {
  return result.hasModifyDate;
}
- (int32_t) modifyDate {
  return result.modifyDate;
}
- (PBUserItem_Builder*) setModifyDate:(int32_t) value {
  result.hasModifyDate = YES;
  result.modifyDate = value;
  return self;
}
- (PBUserItem_Builder*) clearModifyDate {
  result.hasModifyDate = NO;
  result.modifyDate = 0;
  return self;
}
- (BOOL) hasExpireDate {
  return result.hasExpireDate;
}
- (int32_t) expireDate {
  return result.expireDate;
}
- (PBUserItem_Builder*) setExpireDate:(int32_t) value {
  result.hasExpireDate = YES;
  result.expireDate = value;
  return self;
}
- (PBUserItem_Builder*) clearExpireDate {
  result.hasExpireDate = NO;
  result.expireDate = 0;
  return self;
}
@end

@interface PBUserItemList ()
@property (retain) NSMutableArray* mutableUserItemsList;
@end

@implementation PBUserItemList

@synthesize mutableUserItemsList;
- (void) dealloc {
  self.mutableUserItemsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBUserItemList* defaultPBUserItemListInstance = nil;
+ (void) initialize {
  if (self == [PBUserItemList class]) {
    defaultPBUserItemListInstance = [[PBUserItemList alloc] init];
  }
}
+ (PBUserItemList*) defaultInstance {
  return defaultPBUserItemListInstance;
}
- (PBUserItemList*) defaultInstance {
  return defaultPBUserItemListInstance;
}
- (NSArray*) userItemsList {
  return mutableUserItemsList;
}
- (PBUserItem*) userItemsAtIndex:(int32_t) index {
  id value = [mutableUserItemsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBUserItem* element in self.userItemsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBUserItem* element in self.userItemsList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBUserItem* element in self.userItemsList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserItemList*) parseFromData:(NSData*) data {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromData:data] build];
}
+ (PBUserItemList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromInputStream:input] build];
}
+ (PBUserItemList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList_Builder*) builder {
  return [[[PBUserItemList_Builder alloc] init] autorelease];
}
+ (PBUserItemList_Builder*) builderWithPrototype:(PBUserItemList*) prototype {
  return [[PBUserItemList builder] mergeFrom:prototype];
}
- (PBUserItemList_Builder*) builder {
  return [PBUserItemList builder];
}
@end

@interface PBUserItemList_Builder()
@property (retain) PBUserItemList* result;
@end

@implementation PBUserItemList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserItemList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserItemList_Builder*) clear {
  self.result = [[[PBUserItemList alloc] init] autorelease];
  return self;
}
- (PBUserItemList_Builder*) clone {
  return [PBUserItemList builderWithPrototype:result];
}
- (PBUserItemList*) defaultInstance {
  return [PBUserItemList defaultInstance];
}
- (PBUserItemList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserItemList*) buildPartial {
  PBUserItemList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserItemList_Builder*) mergeFrom:(PBUserItemList*) other {
  if (other == [PBUserItemList defaultInstance]) {
    return self;
  }
  if (other.mutableUserItemsList.count > 0) {
    if (result.mutableUserItemsList == nil) {
      result.mutableUserItemsList = [NSMutableArray array];
    }
    [result.mutableUserItemsList addObjectsFromArray:other.mutableUserItemsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserItemList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserItemList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PBUserItem_Builder* subBuilder = [PBUserItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) userItemsList {
  if (result.mutableUserItemsList == nil) { return [NSArray array]; }
  return result.mutableUserItemsList;
}
- (PBUserItem*) userItemsAtIndex:(int32_t) index {
  return [result userItemsAtIndex:index];
}
- (PBUserItemList_Builder*) replaceUserItemsAtIndex:(int32_t) index with:(PBUserItem*) value {
  [result.mutableUserItemsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBUserItemList_Builder*) addAllUserItems:(NSArray*) values {
  if (result.mutableUserItemsList == nil) {
    result.mutableUserItemsList = [NSMutableArray array];
  }
  [result.mutableUserItemsList addObjectsFromArray:values];
  return self;
}
- (PBUserItemList_Builder*) clearUserItemsList {
  result.mutableUserItemsList = nil;
  return self;
}
- (PBUserItemList_Builder*) addUserItems:(PBUserItem*) value {
  if (result.mutableUserItemsList == nil) {
    result.mutableUserItemsList = [NSMutableArray array];
  }
  [result.mutableUserItemsList addObject:value];
  return self;
}
@end

@interface PBLocalizeString ()
@property (retain) NSString* languageCode;
@property (retain) NSString* text;
@property (retain) NSString* localizedText;
@end

@implementation PBLocalizeString

- (BOOL) hasLanguageCode {
  return !!hasLanguageCode_;
}
- (void) setHasLanguageCode:(BOOL) value {
  hasLanguageCode_ = !!value;
}
@synthesize languageCode;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value {
  hasText_ = !!value;
}
@synthesize text;
- (BOOL) hasLocalizedText {
  return !!hasLocalizedText_;
}
- (void) setHasLocalizedText:(BOOL) value {
  hasLocalizedText_ = !!value;
}
@synthesize localizedText;
- (void) dealloc {
  self.languageCode = nil;
  self.text = nil;
  self.localizedText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.languageCode = @"";
    self.text = @"";
    self.localizedText = @"";
  }
  return self;
}
static PBLocalizeString* defaultPBLocalizeStringInstance = nil;
+ (void) initialize {
  if (self == [PBLocalizeString class]) {
    defaultPBLocalizeStringInstance = [[PBLocalizeString alloc] init];
  }
}
+ (PBLocalizeString*) defaultInstance {
  return defaultPBLocalizeStringInstance;
}
- (PBLocalizeString*) defaultInstance {
  return defaultPBLocalizeStringInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLanguageCode) {
    return NO;
  }
  if (!self.hasLocalizedText) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLanguageCode) {
    [output writeString:1 value:self.languageCode];
  }
  if (self.hasText) {
    [output writeString:2 value:self.text];
  }
  if (self.hasLocalizedText) {
    [output writeString:3 value:self.localizedText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLanguageCode) {
    size += computeStringSize(1, self.languageCode);
  }
  if (self.hasText) {
    size += computeStringSize(2, self.text);
  }
  if (self.hasLocalizedText) {
    size += computeStringSize(3, self.localizedText);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBLocalizeString*) parseFromData:(NSData*) data {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromData:data] build];
}
+ (PBLocalizeString*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLocalizeString*) parseFromInputStream:(NSInputStream*) input {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromInputStream:input] build];
}
+ (PBLocalizeString*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLocalizeString*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromCodedInputStream:input] build];
}
+ (PBLocalizeString*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLocalizeString_Builder*) builder {
  return [[[PBLocalizeString_Builder alloc] init] autorelease];
}
+ (PBLocalizeString_Builder*) builderWithPrototype:(PBLocalizeString*) prototype {
  return [[PBLocalizeString builder] mergeFrom:prototype];
}
- (PBLocalizeString_Builder*) builder {
  return [PBLocalizeString builder];
}
@end

@interface PBLocalizeString_Builder()
@property (retain) PBLocalizeString* result;
@end

@implementation PBLocalizeString_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBLocalizeString alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBLocalizeString_Builder*) clear {
  self.result = [[[PBLocalizeString alloc] init] autorelease];
  return self;
}
- (PBLocalizeString_Builder*) clone {
  return [PBLocalizeString builderWithPrototype:result];
}
- (PBLocalizeString*) defaultInstance {
  return [PBLocalizeString defaultInstance];
}
- (PBLocalizeString*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLocalizeString*) buildPartial {
  PBLocalizeString* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBLocalizeString_Builder*) mergeFrom:(PBLocalizeString*) other {
  if (other == [PBLocalizeString defaultInstance]) {
    return self;
  }
  if (other.hasLanguageCode) {
    [self setLanguageCode:other.languageCode];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasLocalizedText) {
    [self setLocalizedText:other.localizedText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLocalizeString_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLocalizeString_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLanguageCode:[input readString]];
        break;
      }
      case 18: {
        [self setText:[input readString]];
        break;
      }
      case 26: {
        [self setLocalizedText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLanguageCode {
  return result.hasLanguageCode;
}
- (NSString*) languageCode {
  return result.languageCode;
}
- (PBLocalizeString_Builder*) setLanguageCode:(NSString*) value {
  result.hasLanguageCode = YES;
  result.languageCode = value;
  return self;
}
- (PBLocalizeString_Builder*) clearLanguageCode {
  result.hasLanguageCode = NO;
  result.languageCode = @"";
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (PBLocalizeString_Builder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (PBLocalizeString_Builder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (BOOL) hasLocalizedText {
  return result.hasLocalizedText;
}
- (NSString*) localizedText {
  return result.localizedText;
}
- (PBLocalizeString_Builder*) setLocalizedText:(NSString*) value {
  result.hasLocalizedText = YES;
  result.localizedText = value;
  return self;
}
- (PBLocalizeString_Builder*) clearLocalizedText {
  result.hasLocalizedText = NO;
  result.localizedText = @"";
  return self;
}
@end

@interface PBApp ()
@property (retain) NSMutableArray* mutableNameList;
@property (retain) NSString* appId;
@property (retain) NSMutableArray* mutableDescList;
@property (retain) NSString* downloadUrl;
@property (retain) NSString* logo;
@end

@implementation PBApp

@synthesize mutableNameList;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) value {
  hasAppId_ = !!value;
}
@synthesize appId;
@synthesize mutableDescList;
- (BOOL) hasDownloadUrl {
  return !!hasDownloadUrl_;
}
- (void) setHasDownloadUrl:(BOOL) value {
  hasDownloadUrl_ = !!value;
}
@synthesize downloadUrl;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) value {
  hasLogo_ = !!value;
}
@synthesize logo;
- (void) dealloc {
  self.mutableNameList = nil;
  self.appId = nil;
  self.mutableDescList = nil;
  self.downloadUrl = nil;
  self.logo = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.appId = @"";
    self.downloadUrl = @"";
    self.logo = @"";
  }
  return self;
}
static PBApp* defaultPBAppInstance = nil;
+ (void) initialize {
  if (self == [PBApp class]) {
    defaultPBAppInstance = [[PBApp alloc] init];
  }
}
+ (PBApp*) defaultInstance {
  return defaultPBAppInstance;
}
- (PBApp*) defaultInstance {
  return defaultPBAppInstance;
}
- (NSArray*) nameList {
  return mutableNameList;
}
- (PBLocalizeString*) nameAtIndex:(int32_t) index {
  id value = [mutableNameList objectAtIndex:index];
  return value;
}
- (NSArray*) descList {
  return mutableDescList;
}
- (PBLocalizeString*) descAtIndex:(int32_t) index {
  id value = [mutableDescList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasAppId) {
    return NO;
  }
  for (PBLocalizeString* element in self.nameList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBLocalizeString* element in self.descList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBLocalizeString* element in self.nameList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasAppId) {
    [output writeString:2 value:self.appId];
  }
  for (PBLocalizeString* element in self.descList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasDownloadUrl) {
    [output writeString:4 value:self.downloadUrl];
  }
  if (self.hasLogo) {
    [output writeString:5 value:self.logo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBLocalizeString* element in self.nameList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasAppId) {
    size += computeStringSize(2, self.appId);
  }
  for (PBLocalizeString* element in self.descList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasDownloadUrl) {
    size += computeStringSize(4, self.downloadUrl);
  }
  if (self.hasLogo) {
    size += computeStringSize(5, self.logo);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBApp*) parseFromData:(NSData*) data {
  return (PBApp*)[[[PBApp builder] mergeFromData:data] build];
}
+ (PBApp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBApp*)[[[PBApp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBApp*) parseFromInputStream:(NSInputStream*) input {
  return (PBApp*)[[[PBApp builder] mergeFromInputStream:input] build];
}
+ (PBApp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBApp*)[[[PBApp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBApp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBApp*)[[[PBApp builder] mergeFromCodedInputStream:input] build];
}
+ (PBApp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBApp*)[[[PBApp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBApp_Builder*) builder {
  return [[[PBApp_Builder alloc] init] autorelease];
}
+ (PBApp_Builder*) builderWithPrototype:(PBApp*) prototype {
  return [[PBApp builder] mergeFrom:prototype];
}
- (PBApp_Builder*) builder {
  return [PBApp builder];
}
@end

@interface PBApp_Builder()
@property (retain) PBApp* result;
@end

@implementation PBApp_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBApp alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBApp_Builder*) clear {
  self.result = [[[PBApp alloc] init] autorelease];
  return self;
}
- (PBApp_Builder*) clone {
  return [PBApp builderWithPrototype:result];
}
- (PBApp*) defaultInstance {
  return [PBApp defaultInstance];
}
- (PBApp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBApp*) buildPartial {
  PBApp* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBApp_Builder*) mergeFrom:(PBApp*) other {
  if (other == [PBApp defaultInstance]) {
    return self;
  }
  if (other.mutableNameList.count > 0) {
    if (result.mutableNameList == nil) {
      result.mutableNameList = [NSMutableArray array];
    }
    [result.mutableNameList addObjectsFromArray:other.mutableNameList];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.mutableDescList.count > 0) {
    if (result.mutableDescList == nil) {
      result.mutableDescList = [NSMutableArray array];
    }
    [result.mutableDescList addObjectsFromArray:other.mutableDescList];
  }
  if (other.hasDownloadUrl) {
    [self setDownloadUrl:other.downloadUrl];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBApp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBApp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBLocalizeString_Builder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addName:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setAppId:[input readString]];
        break;
      }
      case 26: {
        PBLocalizeString_Builder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDesc:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setDownloadUrl:[input readString]];
        break;
      }
      case 42: {
        [self setLogo:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) nameList {
  if (result.mutableNameList == nil) { return [NSArray array]; }
  return result.mutableNameList;
}
- (PBLocalizeString*) nameAtIndex:(int32_t) index {
  return [result nameAtIndex:index];
}
- (PBApp_Builder*) replaceNameAtIndex:(int32_t) index with:(PBLocalizeString*) value {
  [result.mutableNameList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBApp_Builder*) addAllName:(NSArray*) values {
  if (result.mutableNameList == nil) {
    result.mutableNameList = [NSMutableArray array];
  }
  [result.mutableNameList addObjectsFromArray:values];
  return self;
}
- (PBApp_Builder*) clearNameList {
  result.mutableNameList = nil;
  return self;
}
- (PBApp_Builder*) addName:(PBLocalizeString*) value {
  if (result.mutableNameList == nil) {
    result.mutableNameList = [NSMutableArray array];
  }
  [result.mutableNameList addObject:value];
  return self;
}
- (BOOL) hasAppId {
  return result.hasAppId;
}
- (NSString*) appId {
  return result.appId;
}
- (PBApp_Builder*) setAppId:(NSString*) value {
  result.hasAppId = YES;
  result.appId = value;
  return self;
}
- (PBApp_Builder*) clearAppId {
  result.hasAppId = NO;
  result.appId = @"";
  return self;
}
- (NSArray*) descList {
  if (result.mutableDescList == nil) { return [NSArray array]; }
  return result.mutableDescList;
}
- (PBLocalizeString*) descAtIndex:(int32_t) index {
  return [result descAtIndex:index];
}
- (PBApp_Builder*) replaceDescAtIndex:(int32_t) index with:(PBLocalizeString*) value {
  [result.mutableDescList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBApp_Builder*) addAllDesc:(NSArray*) values {
  if (result.mutableDescList == nil) {
    result.mutableDescList = [NSMutableArray array];
  }
  [result.mutableDescList addObjectsFromArray:values];
  return self;
}
- (PBApp_Builder*) clearDescList {
  result.mutableDescList = nil;
  return self;
}
- (PBApp_Builder*) addDesc:(PBLocalizeString*) value {
  if (result.mutableDescList == nil) {
    result.mutableDescList = [NSMutableArray array];
  }
  [result.mutableDescList addObject:value];
  return self;
}
- (BOOL) hasDownloadUrl {
  return result.hasDownloadUrl;
}
- (NSString*) downloadUrl {
  return result.downloadUrl;
}
- (PBApp_Builder*) setDownloadUrl:(NSString*) value {
  result.hasDownloadUrl = YES;
  result.downloadUrl = value;
  return self;
}
- (PBApp_Builder*) clearDownloadUrl {
  result.hasDownloadUrl = NO;
  result.downloadUrl = @"";
  return self;
}
- (BOOL) hasLogo {
  return result.hasLogo;
}
- (NSString*) logo {
  return result.logo;
}
- (PBApp_Builder*) setLogo:(NSString*) value {
  result.hasLogo = YES;
  result.logo = value;
  return self;
}
- (PBApp_Builder*) clearLogo {
  result.hasLogo = NO;
  result.logo = @"";
  return self;
}
@end

@interface PBSize ()
@property Float32 width;
@property Float32 height;
@end

@implementation PBSize

- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) value {
  hasHeight_ = !!value;
}
@synthesize height;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.width = 304;
    self.height = 320;
  }
  return self;
}
static PBSize* defaultPBSizeInstance = nil;
+ (void) initialize {
  if (self == [PBSize class]) {
    defaultPBSizeInstance = [[PBSize alloc] init];
  }
}
+ (PBSize*) defaultInstance {
  return defaultPBSizeInstance;
}
- (PBSize*) defaultInstance {
  return defaultPBSizeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWidth) {
    [output writeFloat:1 value:self.width];
  }
  if (self.hasHeight) {
    [output writeFloat:2 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasWidth) {
    size += computeFloatSize(1, self.width);
  }
  if (self.hasHeight) {
    size += computeFloatSize(2, self.height);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSize*) parseFromData:(NSData*) data {
  return (PBSize*)[[[PBSize builder] mergeFromData:data] build];
}
+ (PBSize*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSize*)[[[PBSize builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSize*) parseFromInputStream:(NSInputStream*) input {
  return (PBSize*)[[[PBSize builder] mergeFromInputStream:input] build];
}
+ (PBSize*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSize*)[[[PBSize builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSize*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSize*)[[[PBSize builder] mergeFromCodedInputStream:input] build];
}
+ (PBSize*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSize*)[[[PBSize builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSize_Builder*) builder {
  return [[[PBSize_Builder alloc] init] autorelease];
}
+ (PBSize_Builder*) builderWithPrototype:(PBSize*) prototype {
  return [[PBSize builder] mergeFrom:prototype];
}
- (PBSize_Builder*) builder {
  return [PBSize builder];
}
@end

@interface PBSize_Builder()
@property (retain) PBSize* result;
@end

@implementation PBSize_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSize alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSize_Builder*) clear {
  self.result = [[[PBSize alloc] init] autorelease];
  return self;
}
- (PBSize_Builder*) clone {
  return [PBSize builderWithPrototype:result];
}
- (PBSize*) defaultInstance {
  return [PBSize defaultInstance];
}
- (PBSize*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSize*) buildPartial {
  PBSize* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSize_Builder*) mergeFrom:(PBSize*) other {
  if (other == [PBSize defaultInstance]) {
    return self;
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSize_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSize_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 21: {
        [self setHeight:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (PBSize_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBSize_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 304;
  return self;
}
- (BOOL) hasHeight {
  return result.hasHeight;
}
- (Float32) height {
  return result.height;
}
- (PBSize_Builder*) setHeight:(Float32) value {
  result.hasHeight = YES;
  result.height = value;
  return self;
}
- (PBSize_Builder*) clearHeight {
  result.hasHeight = NO;
  result.height = 320;
  return self;
}
@end

