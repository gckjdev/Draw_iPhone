// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameBasic.pb.h"

@implementation GameBasicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameBasicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBKeyValue ()
@property (retain) NSString* name;
@property (retain) NSString* value;
@end

@implementation PBKeyValue

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value {
  hasValue_ = !!value;
}
@synthesize value;
- (void) dealloc {
  self.name = nil;
  self.value = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = @"";
  }
  return self;
}
static PBKeyValue* defaultPBKeyValueInstance = nil;
+ (void) initialize {
  if (self == [PBKeyValue class]) {
    defaultPBKeyValueInstance = [[PBKeyValue alloc] init];
  }
}
+ (PBKeyValue*) defaultInstance {
  return defaultPBKeyValueInstance;
}
- (PBKeyValue*) defaultInstance {
  return defaultPBKeyValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size += computeStringSize(2, self.value);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBKeyValue*) parseFromData:(NSData*) data {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromData:data] build];
}
+ (PBKeyValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue*) parseFromInputStream:(NSInputStream*) input {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromInputStream:input] build];
}
+ (PBKeyValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromCodedInputStream:input] build];
}
+ (PBKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue_Builder*) builder {
  return [[[PBKeyValue_Builder alloc] init] autorelease];
}
+ (PBKeyValue_Builder*) builderWithPrototype:(PBKeyValue*) prototype {
  return [[PBKeyValue builder] mergeFrom:prototype];
}
- (PBKeyValue_Builder*) builder {
  return [PBKeyValue builder];
}
@end

@interface PBKeyValue_Builder()
@property (retain) PBKeyValue* result;
@end

@implementation PBKeyValue_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBKeyValue alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBKeyValue_Builder*) clear {
  self.result = [[[PBKeyValue alloc] init] autorelease];
  return self;
}
- (PBKeyValue_Builder*) clone {
  return [PBKeyValue builderWithPrototype:result];
}
- (PBKeyValue*) defaultInstance {
  return [PBKeyValue defaultInstance];
}
- (PBKeyValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBKeyValue*) buildPartial {
  PBKeyValue* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBKeyValue_Builder*) mergeFrom:(PBKeyValue*) other {
  if (other == [PBKeyValue defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBKeyValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBKeyValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBKeyValue_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBKeyValue_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (PBKeyValue_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (PBKeyValue_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface PBSNSUser ()
@property int32_t type;
@property (retain) NSString* userId;
@property (retain) NSString* nickName;
@property (retain) NSString* accessToken;
@property (retain) NSString* accessTokenSecret;
@property (retain) NSString* refreshToken;
@property int32_t expireTime;
@property (retain) NSString* qqOpenId;
@end

@implementation PBSNSUser

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAccessToken {
  return !!hasAccessToken_;
}
- (void) setHasAccessToken:(BOOL) value {
  hasAccessToken_ = !!value;
}
@synthesize accessToken;
- (BOOL) hasAccessTokenSecret {
  return !!hasAccessTokenSecret_;
}
- (void) setHasAccessTokenSecret:(BOOL) value {
  hasAccessTokenSecret_ = !!value;
}
@synthesize accessTokenSecret;
- (BOOL) hasRefreshToken {
  return !!hasRefreshToken_;
}
- (void) setHasRefreshToken:(BOOL) value {
  hasRefreshToken_ = !!value;
}
@synthesize refreshToken;
- (BOOL) hasExpireTime {
  return !!hasExpireTime_;
}
- (void) setHasExpireTime:(BOOL) value {
  hasExpireTime_ = !!value;
}
@synthesize expireTime;
- (BOOL) hasQqOpenId {
  return !!hasQqOpenId_;
}
- (void) setHasQqOpenId:(BOOL) value {
  hasQqOpenId_ = !!value;
}
@synthesize qqOpenId;
- (void) dealloc {
  self.userId = nil;
  self.nickName = nil;
  self.accessToken = nil;
  self.accessTokenSecret = nil;
  self.refreshToken = nil;
  self.qqOpenId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.userId = @"";
    self.nickName = @"";
    self.accessToken = @"";
    self.accessTokenSecret = @"";
    self.refreshToken = @"";
    self.expireTime = 0;
    self.qqOpenId = @"";
  }
  return self;
}
static PBSNSUser* defaultPBSNSUserInstance = nil;
+ (void) initialize {
  if (self == [PBSNSUser class]) {
    defaultPBSNSUserInstance = [[PBSNSUser alloc] init];
  }
}
+ (PBSNSUser*) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (PBSNSUser*) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasAccessToken) {
    [output writeString:4 value:self.accessToken];
  }
  if (self.hasAccessTokenSecret) {
    [output writeString:5 value:self.accessTokenSecret];
  }
  if (self.hasRefreshToken) {
    [output writeString:6 value:self.refreshToken];
  }
  if (self.hasExpireTime) {
    [output writeInt32:7 value:self.expireTime];
  }
  if (self.hasQqOpenId) {
    [output writeString:8 value:self.qqOpenId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  if (self.hasUserId) {
    size += computeStringSize(2, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(3, self.nickName);
  }
  if (self.hasAccessToken) {
    size += computeStringSize(4, self.accessToken);
  }
  if (self.hasAccessTokenSecret) {
    size += computeStringSize(5, self.accessTokenSecret);
  }
  if (self.hasRefreshToken) {
    size += computeStringSize(6, self.refreshToken);
  }
  if (self.hasExpireTime) {
    size += computeInt32Size(7, self.expireTime);
  }
  if (self.hasQqOpenId) {
    size += computeStringSize(8, self.qqOpenId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBSNSUser*) parseFromData:(NSData*) data {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data] build];
}
+ (PBSNSUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser_Builder*) builder {
  return [[[PBSNSUser_Builder alloc] init] autorelease];
}
+ (PBSNSUser_Builder*) builderWithPrototype:(PBSNSUser*) prototype {
  return [[PBSNSUser builder] mergeFrom:prototype];
}
- (PBSNSUser_Builder*) builder {
  return [PBSNSUser builder];
}
@end

@interface PBSNSUser_Builder()
@property (retain) PBSNSUser* result;
@end

@implementation PBSNSUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBSNSUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSNSUser_Builder*) clear {
  self.result = [[[PBSNSUser alloc] init] autorelease];
  return self;
}
- (PBSNSUser_Builder*) clone {
  return [PBSNSUser builderWithPrototype:result];
}
- (PBSNSUser*) defaultInstance {
  return [PBSNSUser defaultInstance];
}
- (PBSNSUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSNSUser*) buildPartial {
  PBSNSUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBSNSUser_Builder*) mergeFrom:(PBSNSUser*) other {
  if (other == [PBSNSUser defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAccessToken) {
    [self setAccessToken:other.accessToken];
  }
  if (other.hasAccessTokenSecret) {
    [self setAccessTokenSecret:other.accessTokenSecret];
  }
  if (other.hasRefreshToken) {
    [self setRefreshToken:other.refreshToken];
  }
  if (other.hasExpireTime) {
    [self setExpireTime:other.expireTime];
  }
  if (other.hasQqOpenId) {
    [self setQqOpenId:other.qqOpenId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSNSUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSNSUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setAccessToken:[input readString]];
        break;
      }
      case 42: {
        [self setAccessTokenSecret:[input readString]];
        break;
      }
      case 50: {
        [self setRefreshToken:[input readString]];
        break;
      }
      case 56: {
        [self setExpireTime:[input readInt32]];
        break;
      }
      case 66: {
        [self setQqOpenId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBSNSUser_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBSNSUser_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBSNSUser_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBSNSUser_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBSNSUser_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBSNSUser_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAccessToken {
  return result.hasAccessToken;
}
- (NSString*) accessToken {
  return result.accessToken;
}
- (PBSNSUser_Builder*) setAccessToken:(NSString*) value {
  result.hasAccessToken = YES;
  result.accessToken = value;
  return self;
}
- (PBSNSUser_Builder*) clearAccessToken {
  result.hasAccessToken = NO;
  result.accessToken = @"";
  return self;
}
- (BOOL) hasAccessTokenSecret {
  return result.hasAccessTokenSecret;
}
- (NSString*) accessTokenSecret {
  return result.accessTokenSecret;
}
- (PBSNSUser_Builder*) setAccessTokenSecret:(NSString*) value {
  result.hasAccessTokenSecret = YES;
  result.accessTokenSecret = value;
  return self;
}
- (PBSNSUser_Builder*) clearAccessTokenSecret {
  result.hasAccessTokenSecret = NO;
  result.accessTokenSecret = @"";
  return self;
}
- (BOOL) hasRefreshToken {
  return result.hasRefreshToken;
}
- (NSString*) refreshToken {
  return result.refreshToken;
}
- (PBSNSUser_Builder*) setRefreshToken:(NSString*) value {
  result.hasRefreshToken = YES;
  result.refreshToken = value;
  return self;
}
- (PBSNSUser_Builder*) clearRefreshToken {
  result.hasRefreshToken = NO;
  result.refreshToken = @"";
  return self;
}
- (BOOL) hasExpireTime {
  return result.hasExpireTime;
}
- (int32_t) expireTime {
  return result.expireTime;
}
- (PBSNSUser_Builder*) setExpireTime:(int32_t) value {
  result.hasExpireTime = YES;
  result.expireTime = value;
  return self;
}
- (PBSNSUser_Builder*) clearExpireTime {
  result.hasExpireTime = NO;
  result.expireTime = 0;
  return self;
}
- (BOOL) hasQqOpenId {
  return result.hasQqOpenId;
}
- (NSString*) qqOpenId {
  return result.qqOpenId;
}
- (PBSNSUser_Builder*) setQqOpenId:(NSString*) value {
  result.hasQqOpenId = YES;
  result.qqOpenId = value;
  return self;
}
- (PBSNSUser_Builder*) clearQqOpenId {
  result.hasQqOpenId = NO;
  result.qqOpenId = @"";
  return self;
}
@end

@interface PBUserItem ()
@property int32_t itemId;
@property int32_t count;
@end

@implementation PBUserItem

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value {
  hasItemId_ = !!value;
}
@synthesize itemId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.count = 0;
  }
  return self;
}
static PBUserItem* defaultPBUserItemInstance = nil;
+ (void) initialize {
  if (self == [PBUserItem class]) {
    defaultPBUserItemInstance = [[PBUserItem alloc] init];
  }
}
+ (PBUserItem*) defaultInstance {
  return defaultPBUserItemInstance;
}
- (PBUserItem*) defaultInstance {
  return defaultPBUserItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasItemId) {
    size += computeInt32Size(1, self.itemId);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserItem*) parseFromData:(NSData*) data {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromData:data] build];
}
+ (PBUserItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromInputStream:input] build];
}
+ (PBUserItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem_Builder*) builder {
  return [[[PBUserItem_Builder alloc] init] autorelease];
}
+ (PBUserItem_Builder*) builderWithPrototype:(PBUserItem*) prototype {
  return [[PBUserItem builder] mergeFrom:prototype];
}
- (PBUserItem_Builder*) builder {
  return [PBUserItem builder];
}
@end

@interface PBUserItem_Builder()
@property (retain) PBUserItem* result;
@end

@implementation PBUserItem_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserItem alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserItem_Builder*) clear {
  self.result = [[[PBUserItem alloc] init] autorelease];
  return self;
}
- (PBUserItem_Builder*) clone {
  return [PBUserItem builderWithPrototype:result];
}
- (PBUserItem*) defaultInstance {
  return [PBUserItem defaultInstance];
}
- (PBUserItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserItem*) buildPartial {
  PBUserItem* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserItem_Builder*) mergeFrom:(PBUserItem*) other {
  if (other == [PBUserItem defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (PBUserItem_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (PBUserItem_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (PBUserItem_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBUserItem_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
@end

@interface PBUserItemList ()
@property (retain) NSString* userId;
@property (retain) NSMutableArray* mutableItemsList;
@end

@implementation PBUserItemList

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
@synthesize mutableItemsList;
- (void) dealloc {
  self.userId = nil;
  self.mutableItemsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
  }
  return self;
}
static PBUserItemList* defaultPBUserItemListInstance = nil;
+ (void) initialize {
  if (self == [PBUserItemList class]) {
    defaultPBUserItemListInstance = [[PBUserItemList alloc] init];
  }
}
+ (PBUserItemList*) defaultInstance {
  return defaultPBUserItemListInstance;
}
- (PBUserItemList*) defaultInstance {
  return defaultPBUserItemListInstance;
}
- (NSArray*) itemsList {
  return mutableItemsList;
}
- (PBUserItem*) itemsAtIndex:(int32_t) index {
  id value = [mutableItemsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  for (PBUserItem* element in self.itemsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  for (PBUserItem* element in self.itemsList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  for (PBUserItem* element in self.itemsList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserItemList*) parseFromData:(NSData*) data {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromData:data] build];
}
+ (PBUserItemList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromInputStream:input] build];
}
+ (PBUserItemList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList_Builder*) builder {
  return [[[PBUserItemList_Builder alloc] init] autorelease];
}
+ (PBUserItemList_Builder*) builderWithPrototype:(PBUserItemList*) prototype {
  return [[PBUserItemList builder] mergeFrom:prototype];
}
- (PBUserItemList_Builder*) builder {
  return [PBUserItemList builder];
}
@end

@interface PBUserItemList_Builder()
@property (retain) PBUserItemList* result;
@end

@implementation PBUserItemList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserItemList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserItemList_Builder*) clear {
  self.result = [[[PBUserItemList alloc] init] autorelease];
  return self;
}
- (PBUserItemList_Builder*) clone {
  return [PBUserItemList builderWithPrototype:result];
}
- (PBUserItemList*) defaultInstance {
  return [PBUserItemList defaultInstance];
}
- (PBUserItemList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserItemList*) buildPartial {
  PBUserItemList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserItemList_Builder*) mergeFrom:(PBUserItemList*) other {
  if (other == [PBUserItemList defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.mutableItemsList.count > 0) {
    if (result.mutableItemsList == nil) {
      result.mutableItemsList = [NSMutableArray array];
    }
    [result.mutableItemsList addObjectsFromArray:other.mutableItemsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserItemList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserItemList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBUserItem_Builder* subBuilder = [PBUserItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserItemList_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserItemList_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (NSArray*) itemsList {
  if (result.mutableItemsList == nil) { return [NSArray array]; }
  return result.mutableItemsList;
}
- (PBUserItem*) itemsAtIndex:(int32_t) index {
  return [result itemsAtIndex:index];
}
- (PBUserItemList_Builder*) replaceItemsAtIndex:(int32_t) index with:(PBUserItem*) value {
  [result.mutableItemsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBUserItemList_Builder*) addAllItems:(NSArray*) values {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObjectsFromArray:values];
  return self;
}
- (PBUserItemList_Builder*) clearItemsList {
  result.mutableItemsList = nil;
  return self;
}
- (PBUserItemList_Builder*) addItems:(PBUserItem*) value {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObject:value];
  return self;
}
@end

@interface PBGameUser ()
@property (retain) NSString* userId;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@property (retain) NSMutableArray* mutableSnsUsersList;
@property (retain) NSString* location;
@property int32_t userLevel;
@property (retain) NSString* facetimeId;
@property int32_t seatId;
@property BOOL isPlaying;
@property BOOL isTakenOver;
@property (retain) NSString* email;
@property (retain) NSString* password;
@property int32_t level;
@property int64_t experience;
@property int32_t coinBalance;
@property int32_t diamondBalance;
@property (retain) NSMutableArray* mutableItemsList;
@property (retain) NSMutableArray* mutableAttributesList;
@end

@implementation PBGameUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
@synthesize mutableSnsUsersList;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value {
  hasLocation_ = !!value;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) value {
  hasUserLevel_ = !!value;
}
@synthesize userLevel;
- (BOOL) hasFacetimeId {
  return !!hasFacetimeId_;
}
- (void) setHasFacetimeId:(BOOL) value {
  hasFacetimeId_ = !!value;
}
@synthesize facetimeId;
- (BOOL) hasSeatId {
  return !!hasSeatId_;
}
- (void) setHasSeatId:(BOOL) value {
  hasSeatId_ = !!value;
}
@synthesize seatId;
- (BOOL) hasIsPlaying {
  return !!hasIsPlaying_;
}
- (void) setHasIsPlaying:(BOOL) value {
  hasIsPlaying_ = !!value;
}
- (BOOL) isPlaying {
  return !!isPlaying_;
}
- (void) setIsPlaying:(BOOL) value {
  isPlaying_ = !!value;
}
- (BOOL) hasIsTakenOver {
  return !!hasIsTakenOver_;
}
- (void) setHasIsTakenOver:(BOOL) value {
  hasIsTakenOver_ = !!value;
}
- (BOOL) isTakenOver {
  return !!isTakenOver_;
}
- (void) setIsTakenOver:(BOOL) value {
  isTakenOver_ = !!value;
}
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value {
  hasExperience_ = !!value;
}
@synthesize experience;
- (BOOL) hasCoinBalance {
  return !!hasCoinBalance_;
}
- (void) setHasCoinBalance:(BOOL) value {
  hasCoinBalance_ = !!value;
}
@synthesize coinBalance;
- (BOOL) hasDiamondBalance {
  return !!hasDiamondBalance_;
}
- (void) setHasDiamondBalance:(BOOL) value {
  hasDiamondBalance_ = !!value;
}
@synthesize diamondBalance;
@synthesize mutableItemsList;
@synthesize mutableAttributesList;
- (void) dealloc {
  self.userId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.mutableSnsUsersList = nil;
  self.location = nil;
  self.facetimeId = nil;
  self.email = nil;
  self.password = nil;
  self.mutableItemsList = nil;
  self.mutableAttributesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.location = @"";
    self.userLevel = 0;
    self.facetimeId = @"";
    self.seatId = 0;
    self.isPlaying = YES;
    self.isTakenOver = NO;
    self.email = @"";
    self.password = @"";
    self.level = 0;
    self.experience = 0L;
    self.coinBalance = 0;
    self.diamondBalance = 0;
  }
  return self;
}
static PBGameUser* defaultPBGameUserInstance = nil;
+ (void) initialize {
  if (self == [PBGameUser class]) {
    defaultPBGameUserInstance = [[PBGameUser alloc] init];
  }
}
+ (PBGameUser*) defaultInstance {
  return defaultPBGameUserInstance;
}
- (PBGameUser*) defaultInstance {
  return defaultPBGameUserInstance;
}
- (NSArray*) snsUsersList {
  return mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  id value = [mutableSnsUsersList objectAtIndex:index];
  return value;
}
- (NSArray*) itemsList {
  return mutableItemsList;
}
- (PBUserItem*) itemsAtIndex:(int32_t) index {
  id value = [mutableItemsList objectAtIndex:index];
  return value;
}
- (NSArray*) attributesList {
  return mutableAttributesList;
}
- (PBKeyValue*) attributesAtIndex:(int32_t) index {
  id value = [mutableAttributesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  for (PBSNSUser* element in self.snsUsersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBUserItem* element in self.itemsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBKeyValue* element in self.attributesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:4 value:self.gender];
  }
  for (PBSNSUser* element in self.snsUsersList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasLocation) {
    [output writeString:6 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:7 value:self.userLevel];
  }
  if (self.hasFacetimeId) {
    [output writeString:8 value:self.facetimeId];
  }
  if (self.hasSeatId) {
    [output writeInt32:9 value:self.seatId];
  }
  if (self.hasIsPlaying) {
    [output writeBool:20 value:self.isPlaying];
  }
  if (self.hasIsTakenOver) {
    [output writeBool:21 value:self.isTakenOver];
  }
  for (PBKeyValue* element in self.attributesList) {
    [output writeMessage:22 value:element];
  }
  if (self.hasEmail) {
    [output writeString:31 value:self.email];
  }
  if (self.hasPassword) {
    [output writeString:32 value:self.password];
  }
  if (self.hasLevel) {
    [output writeInt32:41 value:self.level];
  }
  if (self.hasExperience) {
    [output writeInt64:42 value:self.experience];
  }
  if (self.hasCoinBalance) {
    [output writeInt32:51 value:self.coinBalance];
  }
  if (self.hasDiamondBalance) {
    [output writeInt32:52 value:self.diamondBalance];
  }
  for (PBUserItem* element in self.itemsList) {
    [output writeMessage:61 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(4, self.gender);
  }
  for (PBSNSUser* element in self.snsUsersList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasLocation) {
    size += computeStringSize(6, self.location);
  }
  if (self.hasUserLevel) {
    size += computeInt32Size(7, self.userLevel);
  }
  if (self.hasFacetimeId) {
    size += computeStringSize(8, self.facetimeId);
  }
  if (self.hasSeatId) {
    size += computeInt32Size(9, self.seatId);
  }
  if (self.hasIsPlaying) {
    size += computeBoolSize(20, self.isPlaying);
  }
  if (self.hasIsTakenOver) {
    size += computeBoolSize(21, self.isTakenOver);
  }
  for (PBKeyValue* element in self.attributesList) {
    size += computeMessageSize(22, element);
  }
  if (self.hasEmail) {
    size += computeStringSize(31, self.email);
  }
  if (self.hasPassword) {
    size += computeStringSize(32, self.password);
  }
  if (self.hasLevel) {
    size += computeInt32Size(41, self.level);
  }
  if (self.hasExperience) {
    size += computeInt64Size(42, self.experience);
  }
  if (self.hasCoinBalance) {
    size += computeInt32Size(51, self.coinBalance);
  }
  if (self.hasDiamondBalance) {
    size += computeInt32Size(52, self.diamondBalance);
  }
  for (PBUserItem* element in self.itemsList) {
    size += computeMessageSize(61, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameUser*) parseFromData:(NSData*) data {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data] build];
}
+ (PBGameUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser_Builder*) builder {
  return [[[PBGameUser_Builder alloc] init] autorelease];
}
+ (PBGameUser_Builder*) builderWithPrototype:(PBGameUser*) prototype {
  return [[PBGameUser builder] mergeFrom:prototype];
}
- (PBGameUser_Builder*) builder {
  return [PBGameUser builder];
}
@end

@interface PBGameUser_Builder()
@property (retain) PBGameUser* result;
@end

@implementation PBGameUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameUser_Builder*) clear {
  self.result = [[[PBGameUser alloc] init] autorelease];
  return self;
}
- (PBGameUser_Builder*) clone {
  return [PBGameUser builderWithPrototype:result];
}
- (PBGameUser*) defaultInstance {
  return [PBGameUser defaultInstance];
}
- (PBGameUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameUser*) buildPartial {
  PBGameUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameUser_Builder*) mergeFrom:(PBGameUser*) other {
  if (other == [PBGameUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.mutableSnsUsersList.count > 0) {
    if (result.mutableSnsUsersList == nil) {
      result.mutableSnsUsersList = [NSMutableArray array];
    }
    [result.mutableSnsUsersList addObjectsFromArray:other.mutableSnsUsersList];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.hasFacetimeId) {
    [self setFacetimeId:other.facetimeId];
  }
  if (other.hasSeatId) {
    [self setSeatId:other.seatId];
  }
  if (other.hasIsPlaying) {
    [self setIsPlaying:other.isPlaying];
  }
  if (other.hasIsTakenOver) {
    [self setIsTakenOver:other.isTakenOver];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasCoinBalance) {
    [self setCoinBalance:other.coinBalance];
  }
  if (other.hasDiamondBalance) {
    [self setDiamondBalance:other.diamondBalance];
  }
  if (other.mutableItemsList.count > 0) {
    if (result.mutableItemsList == nil) {
      result.mutableItemsList = [NSMutableArray array];
    }
    [result.mutableItemsList addObjectsFromArray:other.mutableItemsList];
  }
  if (other.mutableAttributesList.count > 0) {
    if (result.mutableAttributesList == nil) {
      result.mutableAttributesList = [NSMutableArray array];
    }
    [result.mutableAttributesList addObjectsFromArray:other.mutableAttributesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGender:[input readBool]];
        break;
      }
      case 42: {
        PBSNSUser_Builder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setLocation:[input readString]];
        break;
      }
      case 56: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 66: {
        [self setFacetimeId:[input readString]];
        break;
      }
      case 72: {
        [self setSeatId:[input readInt32]];
        break;
      }
      case 160: {
        [self setIsPlaying:[input readBool]];
        break;
      }
      case 168: {
        [self setIsTakenOver:[input readBool]];
        break;
      }
      case 178: {
        PBKeyValue_Builder* subBuilder = [PBKeyValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttributes:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        [self setEmail:[input readString]];
        break;
      }
      case 258: {
        [self setPassword:[input readString]];
        break;
      }
      case 328: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 336: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 408: {
        [self setCoinBalance:[input readInt32]];
        break;
      }
      case 416: {
        [self setDiamondBalance:[input readInt32]];
        break;
      }
      case 490: {
        PBUserItem_Builder* subBuilder = [PBUserItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBGameUser_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBGameUser_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBGameUser_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBGameUser_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBGameUser_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBGameUser_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBGameUser_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBGameUser_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (NSArray*) snsUsersList {
  if (result.mutableSnsUsersList == nil) { return [NSArray array]; }
  return result.mutableSnsUsersList;
}
- (PBSNSUser*) snsUsersAtIndex:(int32_t) index {
  return [result snsUsersAtIndex:index];
}
- (PBGameUser_Builder*) replaceSnsUsersAtIndex:(int32_t) index with:(PBSNSUser*) value {
  [result.mutableSnsUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameUser_Builder*) addAllSnsUsers:(NSArray*) values {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObjectsFromArray:values];
  return self;
}
- (PBGameUser_Builder*) clearSnsUsersList {
  result.mutableSnsUsersList = nil;
  return self;
}
- (PBGameUser_Builder*) addSnsUsers:(PBSNSUser*) value {
  if (result.mutableSnsUsersList == nil) {
    result.mutableSnsUsersList = [NSMutableArray array];
  }
  [result.mutableSnsUsersList addObject:value];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (NSString*) location {
  return result.location;
}
- (PBGameUser_Builder*) setLocation:(NSString*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (PBGameUser_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return result.hasUserLevel;
}
- (int32_t) userLevel {
  return result.userLevel;
}
- (PBGameUser_Builder*) setUserLevel:(int32_t) value {
  result.hasUserLevel = YES;
  result.userLevel = value;
  return self;
}
- (PBGameUser_Builder*) clearUserLevel {
  result.hasUserLevel = NO;
  result.userLevel = 0;
  return self;
}
- (BOOL) hasFacetimeId {
  return result.hasFacetimeId;
}
- (NSString*) facetimeId {
  return result.facetimeId;
}
- (PBGameUser_Builder*) setFacetimeId:(NSString*) value {
  result.hasFacetimeId = YES;
  result.facetimeId = value;
  return self;
}
- (PBGameUser_Builder*) clearFacetimeId {
  result.hasFacetimeId = NO;
  result.facetimeId = @"";
  return self;
}
- (BOOL) hasSeatId {
  return result.hasSeatId;
}
- (int32_t) seatId {
  return result.seatId;
}
- (PBGameUser_Builder*) setSeatId:(int32_t) value {
  result.hasSeatId = YES;
  result.seatId = value;
  return self;
}
- (PBGameUser_Builder*) clearSeatId {
  result.hasSeatId = NO;
  result.seatId = 0;
  return self;
}
- (BOOL) hasIsPlaying {
  return result.hasIsPlaying;
}
- (BOOL) isPlaying {
  return result.isPlaying;
}
- (PBGameUser_Builder*) setIsPlaying:(BOOL) value {
  result.hasIsPlaying = YES;
  result.isPlaying = value;
  return self;
}
- (PBGameUser_Builder*) clearIsPlaying {
  result.hasIsPlaying = NO;
  result.isPlaying = YES;
  return self;
}
- (BOOL) hasIsTakenOver {
  return result.hasIsTakenOver;
}
- (BOOL) isTakenOver {
  return result.isTakenOver;
}
- (PBGameUser_Builder*) setIsTakenOver:(BOOL) value {
  result.hasIsTakenOver = YES;
  result.isTakenOver = value;
  return self;
}
- (PBGameUser_Builder*) clearIsTakenOver {
  result.hasIsTakenOver = NO;
  result.isTakenOver = NO;
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (PBGameUser_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (PBGameUser_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (PBGameUser_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (PBGameUser_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (PBGameUser_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (PBGameUser_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int64_t) experience {
  return result.experience;
}
- (PBGameUser_Builder*) setExperience:(int64_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (PBGameUser_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0L;
  return self;
}
- (BOOL) hasCoinBalance {
  return result.hasCoinBalance;
}
- (int32_t) coinBalance {
  return result.coinBalance;
}
- (PBGameUser_Builder*) setCoinBalance:(int32_t) value {
  result.hasCoinBalance = YES;
  result.coinBalance = value;
  return self;
}
- (PBGameUser_Builder*) clearCoinBalance {
  result.hasCoinBalance = NO;
  result.coinBalance = 0;
  return self;
}
- (BOOL) hasDiamondBalance {
  return result.hasDiamondBalance;
}
- (int32_t) diamondBalance {
  return result.diamondBalance;
}
- (PBGameUser_Builder*) setDiamondBalance:(int32_t) value {
  result.hasDiamondBalance = YES;
  result.diamondBalance = value;
  return self;
}
- (PBGameUser_Builder*) clearDiamondBalance {
  result.hasDiamondBalance = NO;
  result.diamondBalance = 0;
  return self;
}
- (NSArray*) itemsList {
  if (result.mutableItemsList == nil) { return [NSArray array]; }
  return result.mutableItemsList;
}
- (PBUserItem*) itemsAtIndex:(int32_t) index {
  return [result itemsAtIndex:index];
}
- (PBGameUser_Builder*) replaceItemsAtIndex:(int32_t) index with:(PBUserItem*) value {
  [result.mutableItemsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameUser_Builder*) addAllItems:(NSArray*) values {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObjectsFromArray:values];
  return self;
}
- (PBGameUser_Builder*) clearItemsList {
  result.mutableItemsList = nil;
  return self;
}
- (PBGameUser_Builder*) addItems:(PBUserItem*) value {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObject:value];
  return self;
}
- (NSArray*) attributesList {
  if (result.mutableAttributesList == nil) { return [NSArray array]; }
  return result.mutableAttributesList;
}
- (PBKeyValue*) attributesAtIndex:(int32_t) index {
  return [result attributesAtIndex:index];
}
- (PBGameUser_Builder*) replaceAttributesAtIndex:(int32_t) index with:(PBKeyValue*) value {
  [result.mutableAttributesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameUser_Builder*) addAllAttributes:(NSArray*) values {
  if (result.mutableAttributesList == nil) {
    result.mutableAttributesList = [NSMutableArray array];
  }
  [result.mutableAttributesList addObjectsFromArray:values];
  return self;
}
- (PBGameUser_Builder*) clearAttributesList {
  result.mutableAttributesList = nil;
  return self;
}
- (PBGameUser_Builder*) addAttributes:(PBKeyValue*) value {
  if (result.mutableAttributesList == nil) {
    result.mutableAttributesList = [NSMutableArray array];
  }
  [result.mutableAttributesList addObject:value];
  return self;
}
@end

@interface PBGameSession ()
@property (retain) NSString* gameId;
@property int64_t sessionId;
@property (retain) NSString* name;
@property (retain) NSString* createBy;
@property int32_t createTime;
@property (retain) NSString* host;
@property int32_t status;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSString* nextPlayUserId;
@property (retain) NSString* password;
@property int32_t ruleType;
@property (retain) NSMutableArray* mutableUsersList;
@end

@implementation PBGameSession

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCreateBy {
  return !!hasCreateBy_;
}
- (void) setHasCreateBy:(BOOL) value {
  hasCreateBy_ = !!value;
}
@synthesize createBy;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (BOOL) hasHost {
  return !!hasHost_;
}
- (void) setHasHost:(BOOL) value {
  hasHost_ = !!value;
}
@synthesize host;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) value {
  hasNextPlayUserId_ = !!value;
}
@synthesize nextPlayUserId;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) value {
  hasRuleType_ = !!value;
}
@synthesize ruleType;
@synthesize mutableUsersList;
- (void) dealloc {
  self.gameId = nil;
  self.name = nil;
  self.createBy = nil;
  self.host = nil;
  self.currentPlayUserId = nil;
  self.nextPlayUserId = nil;
  self.password = nil;
  self.mutableUsersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.sessionId = 0L;
    self.name = @"";
    self.createBy = @"";
    self.createTime = 0;
    self.host = @"";
    self.status = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.password = @"";
    self.ruleType = 0;
  }
  return self;
}
static PBGameSession* defaultPBGameSessionInstance = nil;
+ (void) initialize {
  if (self == [PBGameSession class]) {
    defaultPBGameSessionInstance = [[PBGameSession alloc] init];
  }
}
+ (PBGameSession*) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (PBGameSession*) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (NSArray*) usersList {
  return mutableUsersList;
}
- (PBGameUser*) usersAtIndex:(int32_t) index {
  id value = [mutableUsersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (PBGameUser* element in self.usersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCreateBy) {
    [output writeString:4 value:self.createBy];
  }
  if (self.hasCreateTime) {
    [output writeInt32:5 value:self.createTime];
  }
  if (self.hasHost) {
    [output writeString:6 value:self.host];
  }
  if (self.hasStatus) {
    [output writeInt32:7 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:8 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:9 value:self.nextPlayUserId];
  }
  if (self.hasPassword) {
    [output writeString:10 value:self.password];
  }
  if (self.hasRuleType) {
    [output writeInt32:11 value:self.ruleType];
  }
  for (PBGameUser* element in self.usersList) {
    [output writeMessage:50 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameId) {
    size += computeStringSize(1, self.gameId);
  }
  if (self.hasSessionId) {
    size += computeInt64Size(2, self.sessionId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCreateBy) {
    size += computeStringSize(4, self.createBy);
  }
  if (self.hasCreateTime) {
    size += computeInt32Size(5, self.createTime);
  }
  if (self.hasHost) {
    size += computeStringSize(6, self.host);
  }
  if (self.hasStatus) {
    size += computeInt32Size(7, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(8, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size += computeStringSize(9, self.nextPlayUserId);
  }
  if (self.hasPassword) {
    size += computeStringSize(10, self.password);
  }
  if (self.hasRuleType) {
    size += computeInt32Size(11, self.ruleType);
  }
  for (PBGameUser* element in self.usersList) {
    size += computeMessageSize(50, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameSession*) parseFromData:(NSData*) data {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data] build];
}
+ (PBGameSession*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession_Builder*) builder {
  return [[[PBGameSession_Builder alloc] init] autorelease];
}
+ (PBGameSession_Builder*) builderWithPrototype:(PBGameSession*) prototype {
  return [[PBGameSession builder] mergeFrom:prototype];
}
- (PBGameSession_Builder*) builder {
  return [PBGameSession builder];
}
@end

@interface PBGameSession_Builder()
@property (retain) PBGameSession* result;
@end

@implementation PBGameSession_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameSession alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameSession_Builder*) clear {
  self.result = [[[PBGameSession alloc] init] autorelease];
  return self;
}
- (PBGameSession_Builder*) clone {
  return [PBGameSession builderWithPrototype:result];
}
- (PBGameSession*) defaultInstance {
  return [PBGameSession defaultInstance];
}
- (PBGameSession*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSession*) buildPartial {
  PBGameSession* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameSession_Builder*) mergeFrom:(PBGameSession*) other {
  if (other == [PBGameSession defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateBy) {
    [self setCreateBy:other.createBy];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasHost) {
    [self setHost:other.host];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  if (other.mutableUsersList.count > 0) {
    if (result.mutableUsersList == nil) {
      result.mutableUsersList = [NSMutableArray array];
    }
    [result.mutableUsersList addObjectsFromArray:other.mutableUsersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSession_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSession_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setCreateBy:[input readString]];
        break;
      }
      case 40: {
        [self setCreateTime:[input readInt32]];
        break;
      }
      case 50: {
        [self setHost:[input readString]];
        break;
      }
      case 56: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 66: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 82: {
        [self setPassword:[input readString]];
        break;
      }
      case 88: {
        [self setRuleType:[input readInt32]];
        break;
      }
      case 402: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (PBGameSession_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (PBGameSession_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (PBGameSession_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (PBGameSession_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBGameSession_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBGameSession_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCreateBy {
  return result.hasCreateBy;
}
- (NSString*) createBy {
  return result.createBy;
}
- (PBGameSession_Builder*) setCreateBy:(NSString*) value {
  result.hasCreateBy = YES;
  result.createBy = value;
  return self;
}
- (PBGameSession_Builder*) clearCreateBy {
  result.hasCreateBy = NO;
  result.createBy = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int32_t) createTime {
  return result.createTime;
}
- (PBGameSession_Builder*) setCreateTime:(int32_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (PBGameSession_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasHost {
  return result.hasHost;
}
- (NSString*) host {
  return result.host;
}
- (PBGameSession_Builder*) setHost:(NSString*) value {
  result.hasHost = YES;
  result.host = value;
  return self;
}
- (PBGameSession_Builder*) clearHost {
  result.hasHost = NO;
  result.host = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBGameSession_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBGameSession_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (PBGameSession_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (PBGameSession_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return result.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return result.nextPlayUserId;
}
- (PBGameSession_Builder*) setNextPlayUserId:(NSString*) value {
  result.hasNextPlayUserId = YES;
  result.nextPlayUserId = value;
  return self;
}
- (PBGameSession_Builder*) clearNextPlayUserId {
  result.hasNextPlayUserId = NO;
  result.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (PBGameSession_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (PBGameSession_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasRuleType {
  return result.hasRuleType;
}
- (int32_t) ruleType {
  return result.ruleType;
}
- (PBGameSession_Builder*) setRuleType:(int32_t) value {
  result.hasRuleType = YES;
  result.ruleType = value;
  return self;
}
- (PBGameSession_Builder*) clearRuleType {
  result.hasRuleType = NO;
  result.ruleType = 0;
  return self;
}
- (NSArray*) usersList {
  if (result.mutableUsersList == nil) { return [NSArray array]; }
  return result.mutableUsersList;
}
- (PBGameUser*) usersAtIndex:(int32_t) index {
  return [result usersAtIndex:index];
}
- (PBGameSession_Builder*) replaceUsersAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSession_Builder*) addAllUsers:(NSArray*) values {
  if (result.mutableUsersList == nil) {
    result.mutableUsersList = [NSMutableArray array];
  }
  [result.mutableUsersList addObjectsFromArray:values];
  return self;
}
- (PBGameSession_Builder*) clearUsersList {
  result.mutableUsersList = nil;
  return self;
}
- (PBGameSession_Builder*) addUsers:(PBGameUser*) value {
  if (result.mutableUsersList == nil) {
    result.mutableUsersList = [NSMutableArray array];
  }
  [result.mutableUsersList addObject:value];
  return self;
}
@end

@interface PBGameSessionChanged ()
@property int64_t sessionId;
@property int32_t status;
@property (retain) NSString* currentPlayUserId;
@property (retain) NSMutableArray* mutableUsersAddedList;
@property (retain) NSMutableArray* mutableUserIdsDeletedList;
@property (retain) NSMutableArray* mutableUsersUpdatedList;
@end

@implementation PBGameSessionChanged

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) value {
  hasCurrentPlayUserId_ = !!value;
}
@synthesize currentPlayUserId;
@synthesize mutableUsersAddedList;
@synthesize mutableUserIdsDeletedList;
@synthesize mutableUsersUpdatedList;
- (void) dealloc {
  self.currentPlayUserId = nil;
  self.mutableUsersAddedList = nil;
  self.mutableUserIdsDeletedList = nil;
  self.mutableUsersUpdatedList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.status = 0;
    self.currentPlayUserId = @"";
  }
  return self;
}
static PBGameSessionChanged* defaultPBGameSessionChangedInstance = nil;
+ (void) initialize {
  if (self == [PBGameSessionChanged class]) {
    defaultPBGameSessionChangedInstance = [[PBGameSessionChanged alloc] init];
  }
}
+ (PBGameSessionChanged*) defaultInstance {
  return defaultPBGameSessionChangedInstance;
}
- (PBGameSessionChanged*) defaultInstance {
  return defaultPBGameSessionChangedInstance;
}
- (NSArray*) usersAddedList {
  return mutableUsersAddedList;
}
- (PBGameUser*) usersAddedAtIndex:(int32_t) index {
  id value = [mutableUsersAddedList objectAtIndex:index];
  return value;
}
- (NSArray*) userIdsDeletedList {
  return mutableUserIdsDeletedList;
}
- (NSString*) userIdsDeletedAtIndex:(int32_t) index {
  id value = [mutableUserIdsDeletedList objectAtIndex:index];
  return value;
}
- (NSArray*) usersUpdatedList {
  return mutableUsersUpdatedList;
}
- (PBGameUser*) usersUpdatedAtIndex:(int32_t) index {
  id value = [mutableUsersUpdatedList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBGameUser* element in self.usersAddedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBGameUser* element in self.usersUpdatedList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:3 value:self.currentPlayUserId];
  }
  for (PBGameUser* element in self.usersAddedList) {
    [output writeMessage:5 value:element];
  }
  for (NSString* element in self.mutableUserIdsDeletedList) {
    [output writeString:6 value:element];
  }
  for (PBGameUser* element in self.usersUpdatedList) {
    [output writeMessage:7 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionId) {
    size += computeInt64Size(1, self.sessionId);
  }
  if (self.hasStatus) {
    size += computeInt32Size(2, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size += computeStringSize(3, self.currentPlayUserId);
  }
  for (PBGameUser* element in self.usersAddedList) {
    size += computeMessageSize(5, element);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableUserIdsDeletedList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableUserIdsDeletedList.count;
  }
  for (PBGameUser* element in self.usersUpdatedList) {
    size += computeMessageSize(7, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBGameSessionChanged*) parseFromData:(NSData*) data {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromData:data] build];
}
+ (PBGameSessionChanged*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromInputStream:input] build];
}
+ (PBGameSessionChanged*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSessionChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged_Builder*) builder {
  return [[[PBGameSessionChanged_Builder alloc] init] autorelease];
}
+ (PBGameSessionChanged_Builder*) builderWithPrototype:(PBGameSessionChanged*) prototype {
  return [[PBGameSessionChanged builder] mergeFrom:prototype];
}
- (PBGameSessionChanged_Builder*) builder {
  return [PBGameSessionChanged builder];
}
@end

@interface PBGameSessionChanged_Builder()
@property (retain) PBGameSessionChanged* result;
@end

@implementation PBGameSessionChanged_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBGameSessionChanged alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBGameSessionChanged_Builder*) clear {
  self.result = [[[PBGameSessionChanged alloc] init] autorelease];
  return self;
}
- (PBGameSessionChanged_Builder*) clone {
  return [PBGameSessionChanged builderWithPrototype:result];
}
- (PBGameSessionChanged*) defaultInstance {
  return [PBGameSessionChanged defaultInstance];
}
- (PBGameSessionChanged*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSessionChanged*) buildPartial {
  PBGameSessionChanged* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBGameSessionChanged_Builder*) mergeFrom:(PBGameSessionChanged*) other {
  if (other == [PBGameSessionChanged defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.mutableUsersAddedList.count > 0) {
    if (result.mutableUsersAddedList == nil) {
      result.mutableUsersAddedList = [NSMutableArray array];
    }
    [result.mutableUsersAddedList addObjectsFromArray:other.mutableUsersAddedList];
  }
  if (other.mutableUserIdsDeletedList.count > 0) {
    if (result.mutableUserIdsDeletedList == nil) {
      result.mutableUserIdsDeletedList = [NSMutableArray array];
    }
    [result.mutableUserIdsDeletedList addObjectsFromArray:other.mutableUserIdsDeletedList];
  }
  if (other.mutableUsersUpdatedList.count > 0) {
    if (result.mutableUsersUpdatedList == nil) {
      result.mutableUsersUpdatedList = [NSMutableArray array];
    }
    [result.mutableUsersUpdatedList addObjectsFromArray:other.mutableUsersUpdatedList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSessionChanged_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSessionChanged_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 42: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersAdded:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self addUserIdsDeleted:[input readString]];
        break;
      }
      case 58: {
        PBGameUser_Builder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersUpdated:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (int64_t) sessionId {
  return result.sessionId;
}
- (PBGameSessionChanged_Builder*) setSessionId:(int64_t) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (PBGameSessionChanged_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBGameSessionChanged_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBGameSessionChanged_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return result.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return result.currentPlayUserId;
}
- (PBGameSessionChanged_Builder*) setCurrentPlayUserId:(NSString*) value {
  result.hasCurrentPlayUserId = YES;
  result.currentPlayUserId = value;
  return self;
}
- (PBGameSessionChanged_Builder*) clearCurrentPlayUserId {
  result.hasCurrentPlayUserId = NO;
  result.currentPlayUserId = @"";
  return self;
}
- (NSArray*) usersAddedList {
  if (result.mutableUsersAddedList == nil) { return [NSArray array]; }
  return result.mutableUsersAddedList;
}
- (PBGameUser*) usersAddedAtIndex:(int32_t) index {
  return [result usersAddedAtIndex:index];
}
- (PBGameSessionChanged_Builder*) replaceUsersAddedAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersAddedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addAllUsersAdded:(NSArray*) values {
  if (result.mutableUsersAddedList == nil) {
    result.mutableUsersAddedList = [NSMutableArray array];
  }
  [result.mutableUsersAddedList addObjectsFromArray:values];
  return self;
}
- (PBGameSessionChanged_Builder*) clearUsersAddedList {
  result.mutableUsersAddedList = nil;
  return self;
}
- (PBGameSessionChanged_Builder*) addUsersAdded:(PBGameUser*) value {
  if (result.mutableUsersAddedList == nil) {
    result.mutableUsersAddedList = [NSMutableArray array];
  }
  [result.mutableUsersAddedList addObject:value];
  return self;
}
- (NSArray*) userIdsDeletedList {
  if (result.mutableUserIdsDeletedList == nil) {
    return [NSArray array];
  }
  return result.mutableUserIdsDeletedList;
}
- (NSString*) userIdsDeletedAtIndex:(int32_t) index {
  return [result userIdsDeletedAtIndex:index];
}
- (PBGameSessionChanged_Builder*) replaceUserIdsDeletedAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableUserIdsDeletedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addUserIdsDeleted:(NSString*) value {
  if (result.mutableUserIdsDeletedList == nil) {
    result.mutableUserIdsDeletedList = [NSMutableArray array];
  }
  [result.mutableUserIdsDeletedList addObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addAllUserIdsDeleted:(NSArray*) values {
  if (result.mutableUserIdsDeletedList == nil) {
    result.mutableUserIdsDeletedList = [NSMutableArray array];
  }
  [result.mutableUserIdsDeletedList addObjectsFromArray:values];
  return self;
}
- (PBGameSessionChanged_Builder*) clearUserIdsDeletedList {
  result.mutableUserIdsDeletedList = nil;
  return self;
}
- (NSArray*) usersUpdatedList {
  if (result.mutableUsersUpdatedList == nil) { return [NSArray array]; }
  return result.mutableUsersUpdatedList;
}
- (PBGameUser*) usersUpdatedAtIndex:(int32_t) index {
  return [result usersUpdatedAtIndex:index];
}
- (PBGameSessionChanged_Builder*) replaceUsersUpdatedAtIndex:(int32_t) index with:(PBGameUser*) value {
  [result.mutableUsersUpdatedList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBGameSessionChanged_Builder*) addAllUsersUpdated:(NSArray*) values {
  if (result.mutableUsersUpdatedList == nil) {
    result.mutableUsersUpdatedList = [NSMutableArray array];
  }
  [result.mutableUsersUpdatedList addObjectsFromArray:values];
  return self;
}
- (PBGameSessionChanged_Builder*) clearUsersUpdatedList {
  result.mutableUsersUpdatedList = nil;
  return self;
}
- (PBGameSessionChanged_Builder*) addUsersUpdated:(PBGameUser*) value {
  if (result.mutableUsersUpdatedList == nil) {
    result.mutableUsersUpdatedList = [NSMutableArray array];
  }
  [result.mutableUsersUpdatedList addObject:value];
  return self;
}
@end

@interface PBDrawAction ()
@property int32_t type;
@property (retain) NSMutableArray* mutablePointsList;
@property Float32 width;
@property int32_t color;
@property int32_t penType;
@end

@implementation PBDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
@synthesize mutablePointsList;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) value {
  hasPenType_ = !!value;
}
@synthesize penType;
- (void) dealloc {
  self.mutablePointsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
  }
  return self;
}
static PBDrawAction* defaultPBDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBDrawAction class]) {
    defaultPBDrawActionInstance = [[PBDrawAction alloc] init];
  }
}
+ (PBDrawAction*) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (PBDrawAction*) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (NSArray*) pointsList {
  return mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  id value = [mutablePointsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.mutablePointsList.count > 0) {
    [output writeRawVarint32:18];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
  }
  for (NSNumber* value in self.mutablePointsList) {
    [output writeInt32NoTag:[value intValue]];
  }
  if (self.hasWidth) {
    [output writeFloat:3 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:5 value:self.penType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePointsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    if (self.mutablePointsList.count > 0) {
      size += 1;
      size += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size += computeFloatSize(3, self.width);
  }
  if (self.hasColor) {
    size += computeInt32Size(4, self.color);
  }
  if (self.hasPenType) {
    size += computeInt32Size(5, self.penType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDrawAction*) parseFromData:(NSData*) data {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data] build];
}
+ (PBDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction_Builder*) builder {
  return [[[PBDrawAction_Builder alloc] init] autorelease];
}
+ (PBDrawAction_Builder*) builderWithPrototype:(PBDrawAction*) prototype {
  return [[PBDrawAction builder] mergeFrom:prototype];
}
- (PBDrawAction_Builder*) builder {
  return [PBDrawAction builder];
}
@end

@interface PBDrawAction_Builder()
@property (retain) PBDrawAction* result;
@end

@implementation PBDrawAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDrawAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDrawAction_Builder*) clear {
  self.result = [[[PBDrawAction alloc] init] autorelease];
  return self;
}
- (PBDrawAction_Builder*) clone {
  return [PBDrawAction builderWithPrototype:result];
}
- (PBDrawAction*) defaultInstance {
  return [PBDrawAction defaultInstance];
}
- (PBDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawAction*) buildPartial {
  PBDrawAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDrawAction_Builder*) mergeFrom:(PBDrawAction*) other {
  if (other == [PBDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.mutablePointsList.count > 0) {
    if (result.mutablePointsList == nil) {
      result.mutablePointsList = [NSMutableArray array];
    }
    [result.mutablePointsList addObjectsFromArray:other.mutablePointsList];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          [self addPoints:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 29: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
      case 40: {
        [self setPenType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBDrawAction_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBDrawAction_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (NSArray*) pointsList {
  if (result.mutablePointsList == nil) {
    return [NSArray array];
  }
  return result.mutablePointsList;
}
- (int32_t) pointsAtIndex:(int32_t) index {
  return [result pointsAtIndex:index];
}
- (PBDrawAction_Builder*) replacePointsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePointsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (PBDrawAction_Builder*) addPoints:(int32_t) value {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (PBDrawAction_Builder*) addAllPoints:(NSArray*) values {
  if (result.mutablePointsList == nil) {
    result.mutablePointsList = [NSMutableArray array];
  }
  [result.mutablePointsList addObjectsFromArray:values];
  return self;
}
- (PBDrawAction_Builder*) clearPointsList {
  result.mutablePointsList = nil;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (PBDrawAction_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBDrawAction_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (int32_t) color {
  return result.color;
}
- (PBDrawAction_Builder*) setColor:(int32_t) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (PBDrawAction_Builder*) clearColor {
  result.hasColor = NO;
  result.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return result.hasPenType;
}
- (int32_t) penType {
  return result.penType;
}
- (PBDrawAction_Builder*) setPenType:(int32_t) value {
  result.hasPenType = YES;
  result.penType = value;
  return self;
}
- (PBDrawAction_Builder*) clearPenType {
  result.hasPenType = NO;
  result.penType = 0;
  return self;
}
@end

@interface PBMessage ()
@property (retain) NSString* messageId;
@property (retain) NSString* from;
@property (retain) NSString* to;
@property int32_t status;
@property int32_t type;
@property (retain) NSString* text;
@property (retain) NSMutableArray* mutableDrawDataList;
@property int32_t createDate;
@property Float64 longitude;
@property Float64 latitude;
@property (retain) NSString* reqMessageId;
@property int32_t replyResult;
@end

@implementation PBMessage

- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) value {
  hasFrom_ = !!value;
}
@synthesize from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) value {
  hasTo_ = !!value;
}
@synthesize to;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value {
  hasText_ = !!value;
}
@synthesize text;
@synthesize mutableDrawDataList;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value {
  hasLongitude_ = !!value;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value {
  hasLatitude_ = !!value;
}
@synthesize latitude;
- (BOOL) hasReqMessageId {
  return !!hasReqMessageId_;
}
- (void) setHasReqMessageId:(BOOL) value {
  hasReqMessageId_ = !!value;
}
@synthesize reqMessageId;
- (BOOL) hasReplyResult {
  return !!hasReplyResult_;
}
- (void) setHasReplyResult:(BOOL) value {
  hasReplyResult_ = !!value;
}
@synthesize replyResult;
- (void) dealloc {
  self.messageId = nil;
  self.from = nil;
  self.to = nil;
  self.text = nil;
  self.mutableDrawDataList = nil;
  self.reqMessageId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.messageId = @"";
    self.from = @"";
    self.to = @"";
    self.status = 0;
    self.type = 0;
    self.text = @"";
    self.createDate = 0;
    self.longitude = 0;
    self.latitude = 0;
    self.reqMessageId = @"";
    self.replyResult = 0;
  }
  return self;
}
static PBMessage* defaultPBMessageInstance = nil;
+ (void) initialize {
  if (self == [PBMessage class]) {
    defaultPBMessageInstance = [[PBMessage alloc] init];
  }
}
+ (PBMessage*) defaultInstance {
  return defaultPBMessageInstance;
}
- (PBMessage*) defaultInstance {
  return defaultPBMessageInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasMessageId) {
    return NO;
  }
  if (!self.hasFrom) {
    return NO;
  }
  if (!self.hasTo) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessageId) {
    [output writeString:1 value:self.messageId];
  }
  if (self.hasFrom) {
    [output writeString:2 value:self.from];
  }
  if (self.hasTo) {
    [output writeString:3 value:self.to];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  if (self.hasType) {
    [output writeInt32:5 value:self.type];
  }
  if (self.hasText) {
    [output writeString:20 value:self.text];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:21 value:element];
  }
  if (self.hasCreateDate) {
    [output writeInt32:22 value:self.createDate];
  }
  if (self.hasLongitude) {
    [output writeDouble:31 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeDouble:32 value:self.latitude];
  }
  if (self.hasReqMessageId) {
    [output writeString:33 value:self.reqMessageId];
  }
  if (self.hasReplyResult) {
    [output writeInt32:34 value:self.replyResult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMessageId) {
    size += computeStringSize(1, self.messageId);
  }
  if (self.hasFrom) {
    size += computeStringSize(2, self.from);
  }
  if (self.hasTo) {
    size += computeStringSize(3, self.to);
  }
  if (self.hasStatus) {
    size += computeInt32Size(4, self.status);
  }
  if (self.hasType) {
    size += computeInt32Size(5, self.type);
  }
  if (self.hasText) {
    size += computeStringSize(20, self.text);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(21, element);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(22, self.createDate);
  }
  if (self.hasLongitude) {
    size += computeDoubleSize(31, self.longitude);
  }
  if (self.hasLatitude) {
    size += computeDoubleSize(32, self.latitude);
  }
  if (self.hasReqMessageId) {
    size += computeStringSize(33, self.reqMessageId);
  }
  if (self.hasReplyResult) {
    size += computeInt32Size(34, self.replyResult);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBMessage*) parseFromData:(NSData*) data {
  return (PBMessage*)[[[PBMessage builder] mergeFromData:data] build];
}
+ (PBMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMessage*) parseFromInputStream:(NSInputStream*) input {
  return (PBMessage*)[[[PBMessage builder] mergeFromInputStream:input] build];
}
+ (PBMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMessage*)[[[PBMessage builder] mergeFromCodedInputStream:input] build];
}
+ (PBMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessage_Builder*) builder {
  return [[[PBMessage_Builder alloc] init] autorelease];
}
+ (PBMessage_Builder*) builderWithPrototype:(PBMessage*) prototype {
  return [[PBMessage builder] mergeFrom:prototype];
}
- (PBMessage_Builder*) builder {
  return [PBMessage builder];
}
@end

@interface PBMessage_Builder()
@property (retain) PBMessage* result;
@end

@implementation PBMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBMessage_Builder*) clear {
  self.result = [[[PBMessage alloc] init] autorelease];
  return self;
}
- (PBMessage_Builder*) clone {
  return [PBMessage builderWithPrototype:result];
}
- (PBMessage*) defaultInstance {
  return [PBMessage defaultInstance];
}
- (PBMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMessage*) buildPartial {
  PBMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBMessage_Builder*) mergeFrom:(PBMessage*) other {
  if (other == [PBMessage defaultInstance]) {
    return self;
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasReqMessageId) {
    [self setReqMessageId:other.reqMessageId];
  }
  if (other.hasReplyResult) {
    [self setReplyResult:other.replyResult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessageId:[input readString]];
        break;
      }
      case 18: {
        [self setFrom:[input readString]];
        break;
      }
      case 26: {
        [self setTo:[input readString]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setType:[input readInt32]];
        break;
      }
      case 162: {
        [self setText:[input readString]];
        break;
      }
      case 170: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 249: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 257: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 266: {
        [self setReqMessageId:[input readString]];
        break;
      }
      case 272: {
        [self setReplyResult:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (NSString*) messageId {
  return result.messageId;
}
- (PBMessage_Builder*) setMessageId:(NSString*) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (PBMessage_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = @"";
  return self;
}
- (BOOL) hasFrom {
  return result.hasFrom;
}
- (NSString*) from {
  return result.from;
}
- (PBMessage_Builder*) setFrom:(NSString*) value {
  result.hasFrom = YES;
  result.from = value;
  return self;
}
- (PBMessage_Builder*) clearFrom {
  result.hasFrom = NO;
  result.from = @"";
  return self;
}
- (BOOL) hasTo {
  return result.hasTo;
}
- (NSString*) to {
  return result.to;
}
- (PBMessage_Builder*) setTo:(NSString*) value {
  result.hasTo = YES;
  result.to = value;
  return self;
}
- (PBMessage_Builder*) clearTo {
  result.hasTo = NO;
  result.to = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (PBMessage_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBMessage_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBMessage_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBMessage_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (PBMessage_Builder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (PBMessage_Builder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBMessage_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBMessage_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBMessage_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBMessage_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBMessage_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBMessage_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasLongitude {
  return result.hasLongitude;
}
- (Float64) longitude {
  return result.longitude;
}
- (PBMessage_Builder*) setLongitude:(Float64) value {
  result.hasLongitude = YES;
  result.longitude = value;
  return self;
}
- (PBMessage_Builder*) clearLongitude {
  result.hasLongitude = NO;
  result.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return result.hasLatitude;
}
- (Float64) latitude {
  return result.latitude;
}
- (PBMessage_Builder*) setLatitude:(Float64) value {
  result.hasLatitude = YES;
  result.latitude = value;
  return self;
}
- (PBMessage_Builder*) clearLatitude {
  result.hasLatitude = NO;
  result.latitude = 0;
  return self;
}
- (BOOL) hasReqMessageId {
  return result.hasReqMessageId;
}
- (NSString*) reqMessageId {
  return result.reqMessageId;
}
- (PBMessage_Builder*) setReqMessageId:(NSString*) value {
  result.hasReqMessageId = YES;
  result.reqMessageId = value;
  return self;
}
- (PBMessage_Builder*) clearReqMessageId {
  result.hasReqMessageId = NO;
  result.reqMessageId = @"";
  return self;
}
- (BOOL) hasReplyResult {
  return result.hasReplyResult;
}
- (int32_t) replyResult {
  return result.replyResult;
}
- (PBMessage_Builder*) setReplyResult:(int32_t) value {
  result.hasReplyResult = YES;
  result.replyResult = value;
  return self;
}
- (PBMessage_Builder*) clearReplyResult {
  result.hasReplyResult = NO;
  result.replyResult = 0;
  return self;
}
@end

@interface PBMessageStat ()
@property (retain) NSString* userId;
@property (retain) NSString* friendUserId;
@property (retain) NSString* friendNickName;
@property (retain) NSString* friendAvatar;
@property BOOL friendGender;
@property (retain) NSString* messageId;
@property (retain) NSString* from;
@property (retain) NSString* to;
@property (retain) NSString* text;
@property (retain) NSMutableArray* mutableDrawDataList;
@property int32_t createDate;
@property int32_t type;
@property int32_t modifiedDate;
@property int32_t totalMessageCount;
@property int32_t newMessageCount;
@end

@implementation PBMessageStat

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasFriendUserId {
  return !!hasFriendUserId_;
}
- (void) setHasFriendUserId:(BOOL) value {
  hasFriendUserId_ = !!value;
}
@synthesize friendUserId;
- (BOOL) hasFriendNickName {
  return !!hasFriendNickName_;
}
- (void) setHasFriendNickName:(BOOL) value {
  hasFriendNickName_ = !!value;
}
@synthesize friendNickName;
- (BOOL) hasFriendAvatar {
  return !!hasFriendAvatar_;
}
- (void) setHasFriendAvatar:(BOOL) value {
  hasFriendAvatar_ = !!value;
}
@synthesize friendAvatar;
- (BOOL) hasFriendGender {
  return !!hasFriendGender_;
}
- (void) setHasFriendGender:(BOOL) value {
  hasFriendGender_ = !!value;
}
- (BOOL) friendGender {
  return !!friendGender_;
}
- (void) setFriendGender:(BOOL) value {
  friendGender_ = !!value;
}
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) value {
  hasMessageId_ = !!value;
}
@synthesize messageId;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) value {
  hasFrom_ = !!value;
}
@synthesize from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) value {
  hasTo_ = !!value;
}
@synthesize to;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value {
  hasText_ = !!value;
}
@synthesize text;
@synthesize mutableDrawDataList;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) value {
  hasModifiedDate_ = !!value;
}
@synthesize modifiedDate;
- (BOOL) hasTotalMessageCount {
  return !!hasTotalMessageCount_;
}
- (void) setHasTotalMessageCount:(BOOL) value {
  hasTotalMessageCount_ = !!value;
}
@synthesize totalMessageCount;
- (BOOL) hasNewMessageCount {
  return !!hasNewMessageCount_;
}
- (void) setHasNewMessageCount:(BOOL) value {
  hasNewMessageCount_ = !!value;
}
@synthesize newMessageCount;
- (void) dealloc {
  self.userId = nil;
  self.friendUserId = nil;
  self.friendNickName = nil;
  self.friendAvatar = nil;
  self.messageId = nil;
  self.from = nil;
  self.to = nil;
  self.text = nil;
  self.mutableDrawDataList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.friendUserId = @"";
    self.friendNickName = @"";
    self.friendAvatar = @"";
    self.friendGender = NO;
    self.messageId = @"";
    self.from = @"";
    self.to = @"";
    self.text = @"";
    self.createDate = 0;
    self.type = 0;
    self.modifiedDate = 0;
    self.totalMessageCount = 0;
    self.newMessageCount = 0;
  }
  return self;
}
static PBMessageStat* defaultPBMessageStatInstance = nil;
+ (void) initialize {
  if (self == [PBMessageStat class]) {
    defaultPBMessageStatInstance = [[PBMessageStat alloc] init];
  }
}
+ (PBMessageStat*) defaultInstance {
  return defaultPBMessageStatInstance;
}
- (PBMessageStat*) defaultInstance {
  return defaultPBMessageStatInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFriendUserId) {
    return NO;
  }
  if (!self.hasFriendNickName) {
    return NO;
  }
  if (!self.hasFrom) {
    return NO;
  }
  if (!self.hasTo) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasFriendUserId) {
    [output writeString:2 value:self.friendUserId];
  }
  if (self.hasFriendNickName) {
    [output writeString:3 value:self.friendNickName];
  }
  if (self.hasFriendAvatar) {
    [output writeString:4 value:self.friendAvatar];
  }
  if (self.hasFriendGender) {
    [output writeBool:5 value:self.friendGender];
  }
  if (self.hasMessageId) {
    [output writeString:10 value:self.messageId];
  }
  if (self.hasFrom) {
    [output writeString:11 value:self.from];
  }
  if (self.hasTo) {
    [output writeString:12 value:self.to];
  }
  if (self.hasText) {
    [output writeString:13 value:self.text];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:14 value:element];
  }
  if (self.hasCreateDate) {
    [output writeInt32:15 value:self.createDate];
  }
  if (self.hasType) {
    [output writeInt32:16 value:self.type];
  }
  if (self.hasModifiedDate) {
    [output writeInt32:31 value:self.modifiedDate];
  }
  if (self.hasTotalMessageCount) {
    [output writeInt32:32 value:self.totalMessageCount];
  }
  if (self.hasNewMessageCount) {
    [output writeInt32:33 value:self.newMessageCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasFriendUserId) {
    size += computeStringSize(2, self.friendUserId);
  }
  if (self.hasFriendNickName) {
    size += computeStringSize(3, self.friendNickName);
  }
  if (self.hasFriendAvatar) {
    size += computeStringSize(4, self.friendAvatar);
  }
  if (self.hasFriendGender) {
    size += computeBoolSize(5, self.friendGender);
  }
  if (self.hasMessageId) {
    size += computeStringSize(10, self.messageId);
  }
  if (self.hasFrom) {
    size += computeStringSize(11, self.from);
  }
  if (self.hasTo) {
    size += computeStringSize(12, self.to);
  }
  if (self.hasText) {
    size += computeStringSize(13, self.text);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(14, element);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(15, self.createDate);
  }
  if (self.hasType) {
    size += computeInt32Size(16, self.type);
  }
  if (self.hasModifiedDate) {
    size += computeInt32Size(31, self.modifiedDate);
  }
  if (self.hasTotalMessageCount) {
    size += computeInt32Size(32, self.totalMessageCount);
  }
  if (self.hasNewMessageCount) {
    size += computeInt32Size(33, self.newMessageCount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBMessageStat*) parseFromData:(NSData*) data {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromData:data] build];
}
+ (PBMessageStat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat*) parseFromInputStream:(NSInputStream*) input {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromInputStream:input] build];
}
+ (PBMessageStat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromCodedInputStream:input] build];
}
+ (PBMessageStat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat_Builder*) builder {
  return [[[PBMessageStat_Builder alloc] init] autorelease];
}
+ (PBMessageStat_Builder*) builderWithPrototype:(PBMessageStat*) prototype {
  return [[PBMessageStat builder] mergeFrom:prototype];
}
- (PBMessageStat_Builder*) builder {
  return [PBMessageStat builder];
}
@end

@interface PBMessageStat_Builder()
@property (retain) PBMessageStat* result;
@end

@implementation PBMessageStat_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBMessageStat alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBMessageStat_Builder*) clear {
  self.result = [[[PBMessageStat alloc] init] autorelease];
  return self;
}
- (PBMessageStat_Builder*) clone {
  return [PBMessageStat builderWithPrototype:result];
}
- (PBMessageStat*) defaultInstance {
  return [PBMessageStat defaultInstance];
}
- (PBMessageStat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMessageStat*) buildPartial {
  PBMessageStat* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBMessageStat_Builder*) mergeFrom:(PBMessageStat*) other {
  if (other == [PBMessageStat defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFriendUserId) {
    [self setFriendUserId:other.friendUserId];
  }
  if (other.hasFriendNickName) {
    [self setFriendNickName:other.friendNickName];
  }
  if (other.hasFriendAvatar) {
    [self setFriendAvatar:other.friendAvatar];
  }
  if (other.hasFriendGender) {
    [self setFriendGender:other.friendGender];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTotalMessageCount) {
    [self setTotalMessageCount:other.totalMessageCount];
  }
  if (other.hasNewMessageCount) {
    [self setNewMessageCount:other.newMessageCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMessageStat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMessageStat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setFriendUserId:[input readString]];
        break;
      }
      case 26: {
        [self setFriendNickName:[input readString]];
        break;
      }
      case 34: {
        [self setFriendAvatar:[input readString]];
        break;
      }
      case 40: {
        [self setFriendGender:[input readBool]];
        break;
      }
      case 82: {
        [self setMessageId:[input readString]];
        break;
      }
      case 90: {
        [self setFrom:[input readString]];
        break;
      }
      case 98: {
        [self setTo:[input readString]];
        break;
      }
      case 106: {
        [self setText:[input readString]];
        break;
      }
      case 114: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 120: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 128: {
        [self setType:[input readInt32]];
        break;
      }
      case 248: {
        [self setModifiedDate:[input readInt32]];
        break;
      }
      case 256: {
        [self setTotalMessageCount:[input readInt32]];
        break;
      }
      case 264: {
        [self setNewMessageCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBMessageStat_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBMessageStat_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasFriendUserId {
  return result.hasFriendUserId;
}
- (NSString*) friendUserId {
  return result.friendUserId;
}
- (PBMessageStat_Builder*) setFriendUserId:(NSString*) value {
  result.hasFriendUserId = YES;
  result.friendUserId = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendUserId {
  result.hasFriendUserId = NO;
  result.friendUserId = @"";
  return self;
}
- (BOOL) hasFriendNickName {
  return result.hasFriendNickName;
}
- (NSString*) friendNickName {
  return result.friendNickName;
}
- (PBMessageStat_Builder*) setFriendNickName:(NSString*) value {
  result.hasFriendNickName = YES;
  result.friendNickName = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendNickName {
  result.hasFriendNickName = NO;
  result.friendNickName = @"";
  return self;
}
- (BOOL) hasFriendAvatar {
  return result.hasFriendAvatar;
}
- (NSString*) friendAvatar {
  return result.friendAvatar;
}
- (PBMessageStat_Builder*) setFriendAvatar:(NSString*) value {
  result.hasFriendAvatar = YES;
  result.friendAvatar = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendAvatar {
  result.hasFriendAvatar = NO;
  result.friendAvatar = @"";
  return self;
}
- (BOOL) hasFriendGender {
  return result.hasFriendGender;
}
- (BOOL) friendGender {
  return result.friendGender;
}
- (PBMessageStat_Builder*) setFriendGender:(BOOL) value {
  result.hasFriendGender = YES;
  result.friendGender = value;
  return self;
}
- (PBMessageStat_Builder*) clearFriendGender {
  result.hasFriendGender = NO;
  result.friendGender = NO;
  return self;
}
- (BOOL) hasMessageId {
  return result.hasMessageId;
}
- (NSString*) messageId {
  return result.messageId;
}
- (PBMessageStat_Builder*) setMessageId:(NSString*) value {
  result.hasMessageId = YES;
  result.messageId = value;
  return self;
}
- (PBMessageStat_Builder*) clearMessageId {
  result.hasMessageId = NO;
  result.messageId = @"";
  return self;
}
- (BOOL) hasFrom {
  return result.hasFrom;
}
- (NSString*) from {
  return result.from;
}
- (PBMessageStat_Builder*) setFrom:(NSString*) value {
  result.hasFrom = YES;
  result.from = value;
  return self;
}
- (PBMessageStat_Builder*) clearFrom {
  result.hasFrom = NO;
  result.from = @"";
  return self;
}
- (BOOL) hasTo {
  return result.hasTo;
}
- (NSString*) to {
  return result.to;
}
- (PBMessageStat_Builder*) setTo:(NSString*) value {
  result.hasTo = YES;
  result.to = value;
  return self;
}
- (PBMessageStat_Builder*) clearTo {
  result.hasTo = NO;
  result.to = @"";
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (PBMessageStat_Builder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (PBMessageStat_Builder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBMessageStat_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBMessageStat_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBMessageStat_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBMessageStat_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBMessageStat_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBMessageStat_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBMessageStat_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBMessageStat_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return result.hasModifiedDate;
}
- (int32_t) modifiedDate {
  return result.modifiedDate;
}
- (PBMessageStat_Builder*) setModifiedDate:(int32_t) value {
  result.hasModifiedDate = YES;
  result.modifiedDate = value;
  return self;
}
- (PBMessageStat_Builder*) clearModifiedDate {
  result.hasModifiedDate = NO;
  result.modifiedDate = 0;
  return self;
}
- (BOOL) hasTotalMessageCount {
  return result.hasTotalMessageCount;
}
- (int32_t) totalMessageCount {
  return result.totalMessageCount;
}
- (PBMessageStat_Builder*) setTotalMessageCount:(int32_t) value {
  result.hasTotalMessageCount = YES;
  result.totalMessageCount = value;
  return self;
}
- (PBMessageStat_Builder*) clearTotalMessageCount {
  result.hasTotalMessageCount = NO;
  result.totalMessageCount = 0;
  return self;
}
- (BOOL) hasNewMessageCount {
  return result.hasNewMessageCount;
}
- (int32_t) newMessageCount {
  return result.newMessageCount;
}
- (PBMessageStat_Builder*) setNewMessageCount:(int32_t) value {
  result.hasNewMessageCount = YES;
  result.newMessageCount = value;
  return self;
}
- (PBMessageStat_Builder*) clearNewMessageCount {
  result.hasNewMessageCount = NO;
  result.newMessageCount = 0;
  return self;
}
@end

@interface PBUserResult ()
@property (retain) NSString* userId;
@property BOOL win;
@property int32_t gainCoins;
@end

@implementation PBUserResult

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasWin {
  return !!hasWin_;
}
- (void) setHasWin:(BOOL) value {
  hasWin_ = !!value;
}
- (BOOL) win {
  return !!win_;
}
- (void) setWin:(BOOL) value {
  win_ = !!value;
}
- (BOOL) hasGainCoins {
  return !!hasGainCoins_;
}
- (void) setHasGainCoins:(BOOL) value {
  hasGainCoins_ = !!value;
}
@synthesize gainCoins;
- (void) dealloc {
  self.userId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.win = NO;
    self.gainCoins = 0;
  }
  return self;
}
static PBUserResult* defaultPBUserResultInstance = nil;
+ (void) initialize {
  if (self == [PBUserResult class]) {
    defaultPBUserResultInstance = [[PBUserResult alloc] init];
  }
}
+ (PBUserResult*) defaultInstance {
  return defaultPBUserResultInstance;
}
- (PBUserResult*) defaultInstance {
  return defaultPBUserResultInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWin) {
    return NO;
  }
  if (!self.hasGainCoins) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWin) {
    [output writeBool:2 value:self.win];
  }
  if (self.hasGainCoins) {
    [output writeInt32:5 value:self.gainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasWin) {
    size += computeBoolSize(2, self.win);
  }
  if (self.hasGainCoins) {
    size += computeInt32Size(5, self.gainCoins);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserResult*) parseFromData:(NSData*) data {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data] build];
}
+ (PBUserResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult_Builder*) builder {
  return [[[PBUserResult_Builder alloc] init] autorelease];
}
+ (PBUserResult_Builder*) builderWithPrototype:(PBUserResult*) prototype {
  return [[PBUserResult builder] mergeFrom:prototype];
}
- (PBUserResult_Builder*) builder {
  return [PBUserResult builder];
}
@end

@interface PBUserResult_Builder()
@property (retain) PBUserResult* result;
@end

@implementation PBUserResult_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserResult_Builder*) clear {
  self.result = [[[PBUserResult alloc] init] autorelease];
  return self;
}
- (PBUserResult_Builder*) clone {
  return [PBUserResult builderWithPrototype:result];
}
- (PBUserResult*) defaultInstance {
  return [PBUserResult defaultInstance];
}
- (PBUserResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserResult*) buildPartial {
  PBUserResult* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserResult_Builder*) mergeFrom:(PBUserResult*) other {
  if (other == [PBUserResult defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWin) {
    [self setWin:other.win];
  }
  if (other.hasGainCoins) {
    [self setGainCoins:other.gainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        [self setWin:[input readBool]];
        break;
      }
      case 40: {
        [self setGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserResult_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserResult_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasWin {
  return result.hasWin;
}
- (BOOL) win {
  return result.win;
}
- (PBUserResult_Builder*) setWin:(BOOL) value {
  result.hasWin = YES;
  result.win = value;
  return self;
}
- (PBUserResult_Builder*) clearWin {
  result.hasWin = NO;
  result.win = NO;
  return self;
}
- (BOOL) hasGainCoins {
  return result.hasGainCoins;
}
- (int32_t) gainCoins {
  return result.gainCoins;
}
- (PBUserResult_Builder*) setGainCoins:(int32_t) value {
  result.hasGainCoins = YES;
  result.gainCoins = value;
  return self;
}
- (PBUserResult_Builder*) clearGainCoins {
  result.hasGainCoins = NO;
  result.gainCoins = 0;
  return self;
}
@end

