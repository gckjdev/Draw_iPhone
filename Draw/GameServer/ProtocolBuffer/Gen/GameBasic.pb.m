// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GameBasic.pb.h"
// @@protoc_insertion_point(imports)

@implementation GameBasicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameBasicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBOpenInfoTypeIsValidValue(PBOpenInfoType value) {
  switch (value) {
    case PBOpenInfoTypeOpenToFriend:
    case PBOpenInfoTypeOpenNo:
    case PBOpenInfoTypeOpenAll:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBOpenInfoType(PBOpenInfoType value) {
  switch (value) {
    case PBOpenInfoTypeOpenToFriend:
      return @"PBOpenInfoTypeOpenToFriend";
    case PBOpenInfoTypeOpenNo:
      return @"PBOpenInfoTypeOpenNo";
    case PBOpenInfoTypeOpenAll:
      return @"PBOpenInfoTypeOpenAll";
    default:
      return nil;
  }
}

BOOL PBDrawBgTypeIsValidValue(PBDrawBgType value) {
  switch (value) {
    case PBDrawBgTypeDrawBgItem:
    case PBDrawBgTypeDrawBgNormalDraw:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBDrawBgType(PBDrawBgType value) {
  switch (value) {
    case PBDrawBgTypeDrawBgItem:
      return @"PBDrawBgTypeDrawBgItem";
    case PBDrawBgTypeDrawBgNormalDraw:
      return @"PBDrawBgTypeDrawBgNormalDraw";
    default:
      return nil;
  }
}

BOOL PBDrawBgPurposeIsValidValue(PBDrawBgPurpose value) {
  switch (value) {
    case PBDrawBgPurposeDrawBgPurposeLearnDraw:
    case PBDrawBgPurposeDrawBgPurposeNormalDraw:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBDrawBgPurpose(PBDrawBgPurpose value) {
  switch (value) {
    case PBDrawBgPurposeDrawBgPurposeLearnDraw:
      return @"PBDrawBgPurposeDrawBgPurposeLearnDraw";
    case PBDrawBgPurposeDrawBgPurposeNormalDraw:
      return @"PBDrawBgPurposeDrawBgPurposeNormalDraw";
    default:
      return nil;
  }
}

BOOL PBDrawBgLayerTypeIsValidValue(PBDrawBgLayerType value) {
  switch (value) {
    case PBDrawBgLayerTypeDrawBgLayerBackground:
    case PBDrawBgLayerTypeDrawBgLayerForeground:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBDrawBgLayerType(PBDrawBgLayerType value) {
  switch (value) {
    case PBDrawBgLayerTypeDrawBgLayerBackground:
      return @"PBDrawBgLayerTypeDrawBgLayerBackground";
    case PBDrawBgLayerTypeDrawBgLayerForeground:
      return @"PBDrawBgLayerTypeDrawBgLayerForeground";
    default:
      return nil;
  }
}

BOOL PBGameCurrencyIsValidValue(PBGameCurrency value) {
  switch (value) {
    case PBGameCurrencyCoin:
    case PBGameCurrencyIngot:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBGameCurrency(PBGameCurrency value) {
  switch (value) {
    case PBGameCurrencyCoin:
      return @"PBGameCurrencyCoin";
    case PBGameCurrencyIngot:
      return @"PBGameCurrencyIngot";
    default:
      return nil;
  }
}

BOOL PBDrawItemTypeIsValidValue(PBDrawItemType value) {
  switch (value) {
    case PBDrawItemTypeDrawNomal:
    case PBDrawItemTypeDrawTool:
    case PBDrawItemTypeDrawTaoBao:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBDrawItemType(PBDrawItemType value) {
  switch (value) {
    case PBDrawItemTypeDrawNomal:
      return @"PBDrawItemTypeDrawNomal";
    case PBDrawItemTypeDrawTool:
      return @"PBDrawItemTypeDrawTool";
    case PBDrawItemTypeDrawTaoBao:
      return @"PBDrawItemTypeDrawTaoBao";
    default:
      return nil;
  }
}

BOOL PBDiceItemTypeIsValidValue(PBDiceItemType value) {
  switch (value) {
    case PBDiceItemTypeDiceNomal:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBDiceItemType(PBDiceItemType value) {
  switch (value) {
    case PBDiceItemTypeDiceNomal:
      return @"PBDiceItemTypeDiceNomal";
    default:
      return nil;
  }
}

BOOL PBGameItemConsumeTypeIsValidValue(PBGameItemConsumeType value) {
  switch (value) {
    case PBGameItemConsumeTypeNonConsumable:
    case PBGameItemConsumeTypeAmountConsumable:
    case PBGameItemConsumeTypeTimeConsumable:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBGameItemConsumeType(PBGameItemConsumeType value) {
  switch (value) {
    case PBGameItemConsumeTypeNonConsumable:
      return @"PBGameItemConsumeTypeNonConsumable";
    case PBGameItemConsumeTypeAmountConsumable:
      return @"PBGameItemConsumeTypeAmountConsumable";
    case PBGameItemConsumeTypeTimeConsumable:
      return @"PBGameItemConsumeTypeTimeConsumable";
    default:
      return nil;
  }
}

BOOL PBGameTimeUnitIsValidValue(PBGameTimeUnit value) {
  switch (value) {
    case PBGameTimeUnitHour:
    case PBGameTimeUnitDay:
    case PBGameTimeUnitMonth:
    case PBGameTimeUnitYear:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBGameTimeUnit(PBGameTimeUnit value) {
  switch (value) {
    case PBGameTimeUnitHour:
      return @"PBGameTimeUnitHour";
    case PBGameTimeUnitDay:
      return @"PBGameTimeUnitDay";
    case PBGameTimeUnitMonth:
      return @"PBGameTimeUnitMonth";
    case PBGameTimeUnitYear:
      return @"PBGameTimeUnitYear";
    default:
      return nil;
  }
}

BOOL PBIAPProductTypeIsValidValue(PBIAPProductType value) {
  switch (value) {
    case PBIAPProductTypeIapcoin:
    case PBIAPProductTypeIapingot:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBIAPProductType(PBIAPProductType value) {
  switch (value) {
    case PBIAPProductTypeIapcoin:
      return @"PBIAPProductTypeIapcoin";
    case PBIAPProductTypeIapingot:
      return @"PBIAPProductTypeIapingot";
    default:
      return nil;
  }
}

BOOL PBTaskStatusIsValidValue(PBTaskStatus value) {
  switch (value) {
    case PBTaskStatusTaskStatusCanTake:
    case PBTaskStatusTaskStatusDone:
    case PBTaskStatusTaskStatusAward:
    case PBTaskStatusTaskStatusExpired:
    case PBTaskStatusTaskStatusWaitForStart:
    case PBTaskStatusTaskStatusAlwaysOpen:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTaskStatus(PBTaskStatus value) {
  switch (value) {
    case PBTaskStatusTaskStatusCanTake:
      return @"PBTaskStatusTaskStatusCanTake";
    case PBTaskStatusTaskStatusDone:
      return @"PBTaskStatusTaskStatusDone";
    case PBTaskStatusTaskStatusAward:
      return @"PBTaskStatusTaskStatusAward";
    case PBTaskStatusTaskStatusExpired:
      return @"PBTaskStatusTaskStatusExpired";
    case PBTaskStatusTaskStatusWaitForStart:
      return @"PBTaskStatusTaskStatusWaitForStart";
    case PBTaskStatusTaskStatusAlwaysOpen:
      return @"PBTaskStatusTaskStatusAlwaysOpen";
    default:
      return nil;
  }
}

BOOL PBTaskIdTypeIsValidValue(PBTaskIdType value) {
  switch (value) {
    case PBTaskIdTypeTaskNone:
    case PBTaskIdTypeTaskCheckIn:
    case PBTaskIdTypeTaskBindSina:
    case PBTaskIdTypeTaskBindQq:
    case PBTaskIdTypeTaskShareSina:
    case PBTaskIdTypeTaskShareWeixinTimeline:
    case PBTaskIdTypeTaskShareQqSpace:
    case PBTaskIdTypeTaskAppReview:
    case PBTaskIdTypeTaskCreateOpus:
    case PBTaskIdTypeTaskGuessOpus:
    case PBTaskIdTypeTaskShareOpus:
    case PBTaskIdTypeTaskShareQqWeibo:
    case PBTaskIdTypeTaskAppUpgrade:
    case PBTaskIdTypeTaskVip:
    case PBTaskIdTypeTaskAppViewWeb:
    case PBTaskIdTypeTaskLingqian:
    case PBTaskIdTypeTaskAppWall:
    case PBTaskIdTypeTaskAppDownload:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTaskIdType(PBTaskIdType value) {
  switch (value) {
    case PBTaskIdTypeTaskNone:
      return @"PBTaskIdTypeTaskNone";
    case PBTaskIdTypeTaskCheckIn:
      return @"PBTaskIdTypeTaskCheckIn";
    case PBTaskIdTypeTaskBindSina:
      return @"PBTaskIdTypeTaskBindSina";
    case PBTaskIdTypeTaskBindQq:
      return @"PBTaskIdTypeTaskBindQq";
    case PBTaskIdTypeTaskShareSina:
      return @"PBTaskIdTypeTaskShareSina";
    case PBTaskIdTypeTaskShareWeixinTimeline:
      return @"PBTaskIdTypeTaskShareWeixinTimeline";
    case PBTaskIdTypeTaskShareQqSpace:
      return @"PBTaskIdTypeTaskShareQqSpace";
    case PBTaskIdTypeTaskAppReview:
      return @"PBTaskIdTypeTaskAppReview";
    case PBTaskIdTypeTaskCreateOpus:
      return @"PBTaskIdTypeTaskCreateOpus";
    case PBTaskIdTypeTaskGuessOpus:
      return @"PBTaskIdTypeTaskGuessOpus";
    case PBTaskIdTypeTaskShareOpus:
      return @"PBTaskIdTypeTaskShareOpus";
    case PBTaskIdTypeTaskShareQqWeibo:
      return @"PBTaskIdTypeTaskShareQqWeibo";
    case PBTaskIdTypeTaskAppUpgrade:
      return @"PBTaskIdTypeTaskAppUpgrade";
    case PBTaskIdTypeTaskVip:
      return @"PBTaskIdTypeTaskVip";
    case PBTaskIdTypeTaskAppViewWeb:
      return @"PBTaskIdTypeTaskAppViewWeb";
    case PBTaskIdTypeTaskLingqian:
      return @"PBTaskIdTypeTaskLingqian";
    case PBTaskIdTypeTaskAppWall:
      return @"PBTaskIdTypeTaskAppWall";
    case PBTaskIdTypeTaskAppDownload:
      return @"PBTaskIdTypeTaskAppDownload";
    default:
      return nil;
  }
}

@interface PBKeyValue ()
@property (strong) NSString* name;
@property (strong) NSString* value;
@end

@implementation PBKeyValue

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = @"";
  }
  return self;
}
static PBKeyValue* defaultPBKeyValueInstance = nil;
+ (void) initialize {
  if (self == [PBKeyValue class]) {
    defaultPBKeyValueInstance = [[PBKeyValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBKeyValueInstance;
}
- (instancetype) defaultInstance {
  return defaultPBKeyValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBKeyValue*) parseFromData:(NSData*) data {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromData:data] build];
}
+ (PBKeyValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue*) parseFromInputStream:(NSInputStream*) input {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromInputStream:input] build];
}
+ (PBKeyValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromCodedInputStream:input] build];
}
+ (PBKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBKeyValue*)[[[PBKeyValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBKeyValueBuilder*) builder {
  return [[PBKeyValueBuilder alloc] init];
}
+ (PBKeyValueBuilder*) builderWithPrototype:(PBKeyValue*) prototype {
  return [[PBKeyValue builder] mergeFrom:prototype];
}
- (PBKeyValueBuilder*) builder {
  return [PBKeyValue builder];
}
- (PBKeyValueBuilder*) toBuilder {
  return [PBKeyValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBKeyValue class]]) {
    return NO;
  }
  PBKeyValue *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBKeyValueBuilder()
@property (strong) PBKeyValue* resultPbkeyValue;
@end

@implementation PBKeyValueBuilder
@synthesize resultPbkeyValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbkeyValue = [[PBKeyValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbkeyValue;
}
- (PBKeyValueBuilder*) clear {
  self.resultPbkeyValue = [[PBKeyValue alloc] init];
  return self;
}
- (PBKeyValueBuilder*) clone {
  return [PBKeyValue builderWithPrototype:resultPbkeyValue];
}
- (PBKeyValue*) defaultInstance {
  return [PBKeyValue defaultInstance];
}
- (PBKeyValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBKeyValue*) buildPartial {
  PBKeyValue* returnMe = resultPbkeyValue;
  self.resultPbkeyValue = nil;
  return returnMe;
}
- (PBKeyValueBuilder*) mergeFrom:(PBKeyValue*) other {
  if (other == [PBKeyValue defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBKeyValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBKeyValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultPbkeyValue.hasName;
}
- (NSString*) name {
  return resultPbkeyValue.name;
}
- (PBKeyValueBuilder*) setName:(NSString*) value {
  resultPbkeyValue.hasName = YES;
  resultPbkeyValue.name = value;
  return self;
}
- (PBKeyValueBuilder*) clearName {
  resultPbkeyValue.hasName = NO;
  resultPbkeyValue.name = @"";
  return self;
}
- (BOOL) hasValue {
  return resultPbkeyValue.hasValue;
}
- (NSString*) value {
  return resultPbkeyValue.value;
}
- (PBKeyValueBuilder*) setValue:(NSString*) value {
  resultPbkeyValue.hasValue = YES;
  resultPbkeyValue.value = value;
  return self;
}
- (PBKeyValueBuilder*) clearValue {
  resultPbkeyValue.hasValue = NO;
  resultPbkeyValue.value = @"";
  return self;
}
@end

@interface PBIntKeyValue ()
@property SInt32 key;
@property (strong) NSString* value;
@end

@implementation PBIntKeyValue

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = 0;
    self.value = @"";
  }
  return self;
}
static PBIntKeyValue* defaultPBIntKeyValueInstance = nil;
+ (void) initialize {
  if (self == [PBIntKeyValue class]) {
    defaultPBIntKeyValueInstance = [[PBIntKeyValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBIntKeyValueInstance;
}
- (instancetype) defaultInstance {
  return defaultPBIntKeyValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKey) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeInt32:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeInt32Size(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBIntKeyValue*) parseFromData:(NSData*) data {
  return (PBIntKeyValue*)[[[PBIntKeyValue builder] mergeFromData:data] build];
}
+ (PBIntKeyValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIntKeyValue*)[[[PBIntKeyValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBIntKeyValue*) parseFromInputStream:(NSInputStream*) input {
  return (PBIntKeyValue*)[[[PBIntKeyValue builder] mergeFromInputStream:input] build];
}
+ (PBIntKeyValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIntKeyValue*)[[[PBIntKeyValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIntKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBIntKeyValue*)[[[PBIntKeyValue builder] mergeFromCodedInputStream:input] build];
}
+ (PBIntKeyValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIntKeyValue*)[[[PBIntKeyValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIntKeyValueBuilder*) builder {
  return [[PBIntKeyValueBuilder alloc] init];
}
+ (PBIntKeyValueBuilder*) builderWithPrototype:(PBIntKeyValue*) prototype {
  return [[PBIntKeyValue builder] mergeFrom:prototype];
}
- (PBIntKeyValueBuilder*) builder {
  return [PBIntKeyValue builder];
}
- (PBIntKeyValueBuilder*) toBuilder {
  return [PBIntKeyValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", [NSNumber numberWithInteger:self.key]];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBIntKeyValue class]]) {
    return NO;
  }
  PBIntKeyValue *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || self.key == otherMessage.key) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.key] hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBIntKeyValueBuilder()
@property (strong) PBIntKeyValue* resultPbintKeyValue;
@end

@implementation PBIntKeyValueBuilder
@synthesize resultPbintKeyValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbintKeyValue = [[PBIntKeyValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbintKeyValue;
}
- (PBIntKeyValueBuilder*) clear {
  self.resultPbintKeyValue = [[PBIntKeyValue alloc] init];
  return self;
}
- (PBIntKeyValueBuilder*) clone {
  return [PBIntKeyValue builderWithPrototype:resultPbintKeyValue];
}
- (PBIntKeyValue*) defaultInstance {
  return [PBIntKeyValue defaultInstance];
}
- (PBIntKeyValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBIntKeyValue*) buildPartial {
  PBIntKeyValue* returnMe = resultPbintKeyValue;
  self.resultPbintKeyValue = nil;
  return returnMe;
}
- (PBIntKeyValueBuilder*) mergeFrom:(PBIntKeyValue*) other {
  if (other == [PBIntKeyValue defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBIntKeyValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBIntKeyValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setKey:[input readInt32]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultPbintKeyValue.hasKey;
}
- (SInt32) key {
  return resultPbintKeyValue.key;
}
- (PBIntKeyValueBuilder*) setKey:(SInt32) value {
  resultPbintKeyValue.hasKey = YES;
  resultPbintKeyValue.key = value;
  return self;
}
- (PBIntKeyValueBuilder*) clearKey {
  resultPbintKeyValue.hasKey = NO;
  resultPbintKeyValue.key = 0;
  return self;
}
- (BOOL) hasValue {
  return resultPbintKeyValue.hasValue;
}
- (NSString*) value {
  return resultPbintKeyValue.value;
}
- (PBIntKeyValueBuilder*) setValue:(NSString*) value {
  resultPbintKeyValue.hasValue = YES;
  resultPbintKeyValue.value = value;
  return self;
}
- (PBIntKeyValueBuilder*) clearValue {
  resultPbintKeyValue.hasValue = NO;
  resultPbintKeyValue.value = @"";
  return self;
}
@end

@interface PBIntKeyIntValue ()
@property SInt32 key;
@property SInt32 value;
@end

@implementation PBIntKeyIntValue

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = 0;
    self.value = 0;
  }
  return self;
}
static PBIntKeyIntValue* defaultPBIntKeyIntValueInstance = nil;
+ (void) initialize {
  if (self == [PBIntKeyIntValue class]) {
    defaultPBIntKeyIntValueInstance = [[PBIntKeyIntValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBIntKeyIntValueInstance;
}
- (instancetype) defaultInstance {
  return defaultPBIntKeyIntValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKey) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeInt32:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeInt32Size(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeInt32Size(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBIntKeyIntValue*) parseFromData:(NSData*) data {
  return (PBIntKeyIntValue*)[[[PBIntKeyIntValue builder] mergeFromData:data] build];
}
+ (PBIntKeyIntValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIntKeyIntValue*)[[[PBIntKeyIntValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBIntKeyIntValue*) parseFromInputStream:(NSInputStream*) input {
  return (PBIntKeyIntValue*)[[[PBIntKeyIntValue builder] mergeFromInputStream:input] build];
}
+ (PBIntKeyIntValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIntKeyIntValue*)[[[PBIntKeyIntValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIntKeyIntValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBIntKeyIntValue*)[[[PBIntKeyIntValue builder] mergeFromCodedInputStream:input] build];
}
+ (PBIntKeyIntValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIntKeyIntValue*)[[[PBIntKeyIntValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIntKeyIntValueBuilder*) builder {
  return [[PBIntKeyIntValueBuilder alloc] init];
}
+ (PBIntKeyIntValueBuilder*) builderWithPrototype:(PBIntKeyIntValue*) prototype {
  return [[PBIntKeyIntValue builder] mergeFrom:prototype];
}
- (PBIntKeyIntValueBuilder*) builder {
  return [PBIntKeyIntValue builder];
}
- (PBIntKeyIntValueBuilder*) toBuilder {
  return [PBIntKeyIntValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", [NSNumber numberWithInteger:self.key]];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBIntKeyIntValue class]]) {
    return NO;
  }
  PBIntKeyIntValue *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || self.key == otherMessage.key) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.key] hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBIntKeyIntValueBuilder()
@property (strong) PBIntKeyIntValue* resultPbintKeyIntValue;
@end

@implementation PBIntKeyIntValueBuilder
@synthesize resultPbintKeyIntValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbintKeyIntValue = [[PBIntKeyIntValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbintKeyIntValue;
}
- (PBIntKeyIntValueBuilder*) clear {
  self.resultPbintKeyIntValue = [[PBIntKeyIntValue alloc] init];
  return self;
}
- (PBIntKeyIntValueBuilder*) clone {
  return [PBIntKeyIntValue builderWithPrototype:resultPbintKeyIntValue];
}
- (PBIntKeyIntValue*) defaultInstance {
  return [PBIntKeyIntValue defaultInstance];
}
- (PBIntKeyIntValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBIntKeyIntValue*) buildPartial {
  PBIntKeyIntValue* returnMe = resultPbintKeyIntValue;
  self.resultPbintKeyIntValue = nil;
  return returnMe;
}
- (PBIntKeyIntValueBuilder*) mergeFrom:(PBIntKeyIntValue*) other {
  if (other == [PBIntKeyIntValue defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBIntKeyIntValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBIntKeyIntValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setKey:[input readInt32]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultPbintKeyIntValue.hasKey;
}
- (SInt32) key {
  return resultPbintKeyIntValue.key;
}
- (PBIntKeyIntValueBuilder*) setKey:(SInt32) value {
  resultPbintKeyIntValue.hasKey = YES;
  resultPbintKeyIntValue.key = value;
  return self;
}
- (PBIntKeyIntValueBuilder*) clearKey {
  resultPbintKeyIntValue.hasKey = NO;
  resultPbintKeyIntValue.key = 0;
  return self;
}
- (BOOL) hasValue {
  return resultPbintKeyIntValue.hasValue;
}
- (SInt32) value {
  return resultPbintKeyIntValue.value;
}
- (PBIntKeyIntValueBuilder*) setValue:(SInt32) value {
  resultPbintKeyIntValue.hasValue = YES;
  resultPbintKeyIntValue.value = value;
  return self;
}
- (PBIntKeyIntValueBuilder*) clearValue {
  resultPbintKeyIntValue.hasValue = NO;
  resultPbintKeyIntValue.value = 0;
  return self;
}
@end

@interface PBSNSUser ()
@property SInt32 type;
@property (strong) NSString* userId;
@property (strong) NSString* nickName;
@property (strong) NSString* accessToken;
@property (strong) NSString* accessTokenSecret;
@property (strong) NSString* refreshToken;
@property SInt32 expireTime;
@property (strong) NSString* qqOpenId;
@property (strong) NSString* credential;
@end

@implementation PBSNSUser

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAccessToken {
  return !!hasAccessToken_;
}
- (void) setHasAccessToken:(BOOL) _value_ {
  hasAccessToken_ = !!_value_;
}
@synthesize accessToken;
- (BOOL) hasAccessTokenSecret {
  return !!hasAccessTokenSecret_;
}
- (void) setHasAccessTokenSecret:(BOOL) _value_ {
  hasAccessTokenSecret_ = !!_value_;
}
@synthesize accessTokenSecret;
- (BOOL) hasRefreshToken {
  return !!hasRefreshToken_;
}
- (void) setHasRefreshToken:(BOOL) _value_ {
  hasRefreshToken_ = !!_value_;
}
@synthesize refreshToken;
- (BOOL) hasExpireTime {
  return !!hasExpireTime_;
}
- (void) setHasExpireTime:(BOOL) _value_ {
  hasExpireTime_ = !!_value_;
}
@synthesize expireTime;
- (BOOL) hasQqOpenId {
  return !!hasQqOpenId_;
}
- (void) setHasQqOpenId:(BOOL) _value_ {
  hasQqOpenId_ = !!_value_;
}
@synthesize qqOpenId;
- (BOOL) hasCredential {
  return !!hasCredential_;
}
- (void) setHasCredential:(BOOL) _value_ {
  hasCredential_ = !!_value_;
}
@synthesize credential;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.userId = @"";
    self.nickName = @"";
    self.accessToken = @"";
    self.accessTokenSecret = @"";
    self.refreshToken = @"";
    self.expireTime = 0;
    self.qqOpenId = @"";
    self.credential = @"";
  }
  return self;
}
static PBSNSUser* defaultPBSNSUserInstance = nil;
+ (void) initialize {
  if (self == [PBSNSUser class]) {
    defaultPBSNSUserInstance = [[PBSNSUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSNSUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasAccessToken) {
    [output writeString:4 value:self.accessToken];
  }
  if (self.hasAccessTokenSecret) {
    [output writeString:5 value:self.accessTokenSecret];
  }
  if (self.hasRefreshToken) {
    [output writeString:6 value:self.refreshToken];
  }
  if (self.hasExpireTime) {
    [output writeInt32:7 value:self.expireTime];
  }
  if (self.hasQqOpenId) {
    [output writeString:8 value:self.qqOpenId];
  }
  if (self.hasCredential) {
    [output writeString:20 value:self.credential];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(3, self.nickName);
  }
  if (self.hasAccessToken) {
    size_ += computeStringSize(4, self.accessToken);
  }
  if (self.hasAccessTokenSecret) {
    size_ += computeStringSize(5, self.accessTokenSecret);
  }
  if (self.hasRefreshToken) {
    size_ += computeStringSize(6, self.refreshToken);
  }
  if (self.hasExpireTime) {
    size_ += computeInt32Size(7, self.expireTime);
  }
  if (self.hasQqOpenId) {
    size_ += computeStringSize(8, self.qqOpenId);
  }
  if (self.hasCredential) {
    size_ += computeStringSize(20, self.credential);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSNSUser*) parseFromData:(NSData*) data {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data] build];
}
+ (PBSNSUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input] build];
}
+ (PBSNSUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBSNSUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUser*)[[[PBSNSUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUserBuilder*) builder {
  return [[PBSNSUserBuilder alloc] init];
}
+ (PBSNSUserBuilder*) builderWithPrototype:(PBSNSUser*) prototype {
  return [[PBSNSUser builder] mergeFrom:prototype];
}
- (PBSNSUserBuilder*) builder {
  return [PBSNSUser builder];
}
- (PBSNSUserBuilder*) toBuilder {
  return [PBSNSUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAccessToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accessToken", self.accessToken];
  }
  if (self.hasAccessTokenSecret) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accessTokenSecret", self.accessTokenSecret];
  }
  if (self.hasRefreshToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refreshToken", self.refreshToken];
  }
  if (self.hasExpireTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expireTime", [NSNumber numberWithInteger:self.expireTime]];
  }
  if (self.hasQqOpenId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qqOpenId", self.qqOpenId];
  }
  if (self.hasCredential) {
    [output appendFormat:@"%@%@: %@\n", indent, @"credential", self.credential];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSNSUser class]]) {
    return NO;
  }
  PBSNSUser *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAccessToken == otherMessage.hasAccessToken &&
      (!self.hasAccessToken || [self.accessToken isEqual:otherMessage.accessToken]) &&
      self.hasAccessTokenSecret == otherMessage.hasAccessTokenSecret &&
      (!self.hasAccessTokenSecret || [self.accessTokenSecret isEqual:otherMessage.accessTokenSecret]) &&
      self.hasRefreshToken == otherMessage.hasRefreshToken &&
      (!self.hasRefreshToken || [self.refreshToken isEqual:otherMessage.refreshToken]) &&
      self.hasExpireTime == otherMessage.hasExpireTime &&
      (!self.hasExpireTime || self.expireTime == otherMessage.expireTime) &&
      self.hasQqOpenId == otherMessage.hasQqOpenId &&
      (!self.hasQqOpenId || [self.qqOpenId isEqual:otherMessage.qqOpenId]) &&
      self.hasCredential == otherMessage.hasCredential &&
      (!self.hasCredential || [self.credential isEqual:otherMessage.credential]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAccessToken) {
    hashCode = hashCode * 31 + [self.accessToken hash];
  }
  if (self.hasAccessTokenSecret) {
    hashCode = hashCode * 31 + [self.accessTokenSecret hash];
  }
  if (self.hasRefreshToken) {
    hashCode = hashCode * 31 + [self.refreshToken hash];
  }
  if (self.hasExpireTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expireTime] hash];
  }
  if (self.hasQqOpenId) {
    hashCode = hashCode * 31 + [self.qqOpenId hash];
  }
  if (self.hasCredential) {
    hashCode = hashCode * 31 + [self.credential hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSNSUserBuilder()
@property (strong) PBSNSUser* resultPbsnsuser;
@end

@implementation PBSNSUserBuilder
@synthesize resultPbsnsuser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsnsuser = [[PBSNSUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsnsuser;
}
- (PBSNSUserBuilder*) clear {
  self.resultPbsnsuser = [[PBSNSUser alloc] init];
  return self;
}
- (PBSNSUserBuilder*) clone {
  return [PBSNSUser builderWithPrototype:resultPbsnsuser];
}
- (PBSNSUser*) defaultInstance {
  return [PBSNSUser defaultInstance];
}
- (PBSNSUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSNSUser*) buildPartial {
  PBSNSUser* returnMe = resultPbsnsuser;
  self.resultPbsnsuser = nil;
  return returnMe;
}
- (PBSNSUserBuilder*) mergeFrom:(PBSNSUser*) other {
  if (other == [PBSNSUser defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAccessToken) {
    [self setAccessToken:other.accessToken];
  }
  if (other.hasAccessTokenSecret) {
    [self setAccessTokenSecret:other.accessTokenSecret];
  }
  if (other.hasRefreshToken) {
    [self setRefreshToken:other.refreshToken];
  }
  if (other.hasExpireTime) {
    [self setExpireTime:other.expireTime];
  }
  if (other.hasQqOpenId) {
    [self setQqOpenId:other.qqOpenId];
  }
  if (other.hasCredential) {
    [self setCredential:other.credential];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSNSUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSNSUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setAccessToken:[input readString]];
        break;
      }
      case 42: {
        [self setAccessTokenSecret:[input readString]];
        break;
      }
      case 50: {
        [self setRefreshToken:[input readString]];
        break;
      }
      case 56: {
        [self setExpireTime:[input readInt32]];
        break;
      }
      case 66: {
        [self setQqOpenId:[input readString]];
        break;
      }
      case 162: {
        [self setCredential:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbsnsuser.hasType;
}
- (SInt32) type {
  return resultPbsnsuser.type;
}
- (PBSNSUserBuilder*) setType:(SInt32) value {
  resultPbsnsuser.hasType = YES;
  resultPbsnsuser.type = value;
  return self;
}
- (PBSNSUserBuilder*) clearType {
  resultPbsnsuser.hasType = NO;
  resultPbsnsuser.type = 0;
  return self;
}
- (BOOL) hasUserId {
  return resultPbsnsuser.hasUserId;
}
- (NSString*) userId {
  return resultPbsnsuser.userId;
}
- (PBSNSUserBuilder*) setUserId:(NSString*) value {
  resultPbsnsuser.hasUserId = YES;
  resultPbsnsuser.userId = value;
  return self;
}
- (PBSNSUserBuilder*) clearUserId {
  resultPbsnsuser.hasUserId = NO;
  resultPbsnsuser.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return resultPbsnsuser.hasNickName;
}
- (NSString*) nickName {
  return resultPbsnsuser.nickName;
}
- (PBSNSUserBuilder*) setNickName:(NSString*) value {
  resultPbsnsuser.hasNickName = YES;
  resultPbsnsuser.nickName = value;
  return self;
}
- (PBSNSUserBuilder*) clearNickName {
  resultPbsnsuser.hasNickName = NO;
  resultPbsnsuser.nickName = @"";
  return self;
}
- (BOOL) hasAccessToken {
  return resultPbsnsuser.hasAccessToken;
}
- (NSString*) accessToken {
  return resultPbsnsuser.accessToken;
}
- (PBSNSUserBuilder*) setAccessToken:(NSString*) value {
  resultPbsnsuser.hasAccessToken = YES;
  resultPbsnsuser.accessToken = value;
  return self;
}
- (PBSNSUserBuilder*) clearAccessToken {
  resultPbsnsuser.hasAccessToken = NO;
  resultPbsnsuser.accessToken = @"";
  return self;
}
- (BOOL) hasAccessTokenSecret {
  return resultPbsnsuser.hasAccessTokenSecret;
}
- (NSString*) accessTokenSecret {
  return resultPbsnsuser.accessTokenSecret;
}
- (PBSNSUserBuilder*) setAccessTokenSecret:(NSString*) value {
  resultPbsnsuser.hasAccessTokenSecret = YES;
  resultPbsnsuser.accessTokenSecret = value;
  return self;
}
- (PBSNSUserBuilder*) clearAccessTokenSecret {
  resultPbsnsuser.hasAccessTokenSecret = NO;
  resultPbsnsuser.accessTokenSecret = @"";
  return self;
}
- (BOOL) hasRefreshToken {
  return resultPbsnsuser.hasRefreshToken;
}
- (NSString*) refreshToken {
  return resultPbsnsuser.refreshToken;
}
- (PBSNSUserBuilder*) setRefreshToken:(NSString*) value {
  resultPbsnsuser.hasRefreshToken = YES;
  resultPbsnsuser.refreshToken = value;
  return self;
}
- (PBSNSUserBuilder*) clearRefreshToken {
  resultPbsnsuser.hasRefreshToken = NO;
  resultPbsnsuser.refreshToken = @"";
  return self;
}
- (BOOL) hasExpireTime {
  return resultPbsnsuser.hasExpireTime;
}
- (SInt32) expireTime {
  return resultPbsnsuser.expireTime;
}
- (PBSNSUserBuilder*) setExpireTime:(SInt32) value {
  resultPbsnsuser.hasExpireTime = YES;
  resultPbsnsuser.expireTime = value;
  return self;
}
- (PBSNSUserBuilder*) clearExpireTime {
  resultPbsnsuser.hasExpireTime = NO;
  resultPbsnsuser.expireTime = 0;
  return self;
}
- (BOOL) hasQqOpenId {
  return resultPbsnsuser.hasQqOpenId;
}
- (NSString*) qqOpenId {
  return resultPbsnsuser.qqOpenId;
}
- (PBSNSUserBuilder*) setQqOpenId:(NSString*) value {
  resultPbsnsuser.hasQqOpenId = YES;
  resultPbsnsuser.qqOpenId = value;
  return self;
}
- (PBSNSUserBuilder*) clearQqOpenId {
  resultPbsnsuser.hasQqOpenId = NO;
  resultPbsnsuser.qqOpenId = @"";
  return self;
}
- (BOOL) hasCredential {
  return resultPbsnsuser.hasCredential;
}
- (NSString*) credential {
  return resultPbsnsuser.credential;
}
- (PBSNSUserBuilder*) setCredential:(NSString*) value {
  resultPbsnsuser.hasCredential = YES;
  resultPbsnsuser.credential = value;
  return self;
}
- (PBSNSUserBuilder*) clearCredential {
  resultPbsnsuser.hasCredential = NO;
  resultPbsnsuser.credential = @"";
  return self;
}
@end

@interface PBSNSUserCredential ()
@property SInt32 type;
@property (strong) NSString* credential;
@end

@implementation PBSNSUserCredential

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasCredential {
  return !!hasCredential_;
}
- (void) setHasCredential:(BOOL) _value_ {
  hasCredential_ = !!_value_;
}
@synthesize credential;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.credential = @"";
  }
  return self;
}
static PBSNSUserCredential* defaultPBSNSUserCredentialInstance = nil;
+ (void) initialize {
  if (self == [PBSNSUserCredential class]) {
    defaultPBSNSUserCredentialInstance = [[PBSNSUserCredential alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSNSUserCredentialInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSNSUserCredentialInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasCredential) {
    [output writeString:20 value:self.credential];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasCredential) {
    size_ += computeStringSize(20, self.credential);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSNSUserCredential*) parseFromData:(NSData*) data {
  return (PBSNSUserCredential*)[[[PBSNSUserCredential builder] mergeFromData:data] build];
}
+ (PBSNSUserCredential*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUserCredential*)[[[PBSNSUserCredential builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUserCredential*) parseFromInputStream:(NSInputStream*) input {
  return (PBSNSUserCredential*)[[[PBSNSUserCredential builder] mergeFromInputStream:input] build];
}
+ (PBSNSUserCredential*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUserCredential*)[[[PBSNSUserCredential builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUserCredential*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSNSUserCredential*)[[[PBSNSUserCredential builder] mergeFromCodedInputStream:input] build];
}
+ (PBSNSUserCredential*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSNSUserCredential*)[[[PBSNSUserCredential builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSNSUserCredentialBuilder*) builder {
  return [[PBSNSUserCredentialBuilder alloc] init];
}
+ (PBSNSUserCredentialBuilder*) builderWithPrototype:(PBSNSUserCredential*) prototype {
  return [[PBSNSUserCredential builder] mergeFrom:prototype];
}
- (PBSNSUserCredentialBuilder*) builder {
  return [PBSNSUserCredential builder];
}
- (PBSNSUserCredentialBuilder*) toBuilder {
  return [PBSNSUserCredential builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasCredential) {
    [output appendFormat:@"%@%@: %@\n", indent, @"credential", self.credential];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSNSUserCredential class]]) {
    return NO;
  }
  PBSNSUserCredential *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasCredential == otherMessage.hasCredential &&
      (!self.hasCredential || [self.credential isEqual:otherMessage.credential]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasCredential) {
    hashCode = hashCode * 31 + [self.credential hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSNSUserCredentialBuilder()
@property (strong) PBSNSUserCredential* resultPbsnsuserCredential;
@end

@implementation PBSNSUserCredentialBuilder
@synthesize resultPbsnsuserCredential;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsnsuserCredential = [[PBSNSUserCredential alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsnsuserCredential;
}
- (PBSNSUserCredentialBuilder*) clear {
  self.resultPbsnsuserCredential = [[PBSNSUserCredential alloc] init];
  return self;
}
- (PBSNSUserCredentialBuilder*) clone {
  return [PBSNSUserCredential builderWithPrototype:resultPbsnsuserCredential];
}
- (PBSNSUserCredential*) defaultInstance {
  return [PBSNSUserCredential defaultInstance];
}
- (PBSNSUserCredential*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSNSUserCredential*) buildPartial {
  PBSNSUserCredential* returnMe = resultPbsnsuserCredential;
  self.resultPbsnsuserCredential = nil;
  return returnMe;
}
- (PBSNSUserCredentialBuilder*) mergeFrom:(PBSNSUserCredential*) other {
  if (other == [PBSNSUserCredential defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCredential) {
    [self setCredential:other.credential];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSNSUserCredentialBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSNSUserCredentialBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 162: {
        [self setCredential:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbsnsuserCredential.hasType;
}
- (SInt32) type {
  return resultPbsnsuserCredential.type;
}
- (PBSNSUserCredentialBuilder*) setType:(SInt32) value {
  resultPbsnsuserCredential.hasType = YES;
  resultPbsnsuserCredential.type = value;
  return self;
}
- (PBSNSUserCredentialBuilder*) clearType {
  resultPbsnsuserCredential.hasType = NO;
  resultPbsnsuserCredential.type = 0;
  return self;
}
- (BOOL) hasCredential {
  return resultPbsnsuserCredential.hasCredential;
}
- (NSString*) credential {
  return resultPbsnsuserCredential.credential;
}
- (PBSNSUserCredentialBuilder*) setCredential:(NSString*) value {
  resultPbsnsuserCredential.hasCredential = YES;
  resultPbsnsuserCredential.credential = value;
  return self;
}
- (PBSNSUserCredentialBuilder*) clearCredential {
  resultPbsnsuserCredential.hasCredential = NO;
  resultPbsnsuserCredential.credential = @"";
  return self;
}
@end

@interface PBUserLevel ()
@property (strong) NSString* gameId;
@property SInt32 level;
@property SInt64 exp;
@end

@implementation PBUserLevel

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasExp {
  return !!hasExp_;
}
- (void) setHasExp:(BOOL) _value_ {
  hasExp_ = !!_value_;
}
@synthesize exp;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.level = 1;
    self.exp = 0L;
  }
  return self;
}
static PBUserLevel* defaultPBUserLevelInstance = nil;
+ (void) initialize {
  if (self == [PBUserLevel class]) {
    defaultPBUserLevelInstance = [[PBUserLevel alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserLevelInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserLevelInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasLevel) {
    [output writeInt32:2 value:self.level];
  }
  if (self.hasExp) {
    [output writeInt64:3 value:self.exp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeStringSize(1, self.gameId);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(2, self.level);
  }
  if (self.hasExp) {
    size_ += computeInt64Size(3, self.exp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserLevel*) parseFromData:(NSData*) data {
  return (PBUserLevel*)[[[PBUserLevel builder] mergeFromData:data] build];
}
+ (PBUserLevel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserLevel*)[[[PBUserLevel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserLevel*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserLevel*)[[[PBUserLevel builder] mergeFromInputStream:input] build];
}
+ (PBUserLevel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserLevel*)[[[PBUserLevel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserLevel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserLevel*)[[[PBUserLevel builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserLevel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserLevel*)[[[PBUserLevel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserLevelBuilder*) builder {
  return [[PBUserLevelBuilder alloc] init];
}
+ (PBUserLevelBuilder*) builderWithPrototype:(PBUserLevel*) prototype {
  return [[PBUserLevel builder] mergeFrom:prototype];
}
- (PBUserLevelBuilder*) builder {
  return [PBUserLevel builder];
}
- (PBUserLevelBuilder*) toBuilder {
  return [PBUserLevel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", self.gameId];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"exp", [NSNumber numberWithLongLong:self.exp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserLevel class]]) {
    return NO;
  }
  PBUserLevel *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || [self.gameId isEqual:otherMessage.gameId]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasExp == otherMessage.hasExp &&
      (!self.hasExp || self.exp == otherMessage.exp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [self.gameId hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.exp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserLevelBuilder()
@property (strong) PBUserLevel* resultPbuserLevel;
@end

@implementation PBUserLevelBuilder
@synthesize resultPbuserLevel;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserLevel = [[PBUserLevel alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserLevel;
}
- (PBUserLevelBuilder*) clear {
  self.resultPbuserLevel = [[PBUserLevel alloc] init];
  return self;
}
- (PBUserLevelBuilder*) clone {
  return [PBUserLevel builderWithPrototype:resultPbuserLevel];
}
- (PBUserLevel*) defaultInstance {
  return [PBUserLevel defaultInstance];
}
- (PBUserLevel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserLevel*) buildPartial {
  PBUserLevel* returnMe = resultPbuserLevel;
  self.resultPbuserLevel = nil;
  return returnMe;
}
- (PBUserLevelBuilder*) mergeFrom:(PBUserLevel*) other {
  if (other == [PBUserLevel defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasExp) {
    [self setExp:other.exp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserLevelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserLevelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 16: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 24: {
        [self setExp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultPbuserLevel.hasGameId;
}
- (NSString*) gameId {
  return resultPbuserLevel.gameId;
}
- (PBUserLevelBuilder*) setGameId:(NSString*) value {
  resultPbuserLevel.hasGameId = YES;
  resultPbuserLevel.gameId = value;
  return self;
}
- (PBUserLevelBuilder*) clearGameId {
  resultPbuserLevel.hasGameId = NO;
  resultPbuserLevel.gameId = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultPbuserLevel.hasLevel;
}
- (SInt32) level {
  return resultPbuserLevel.level;
}
- (PBUserLevelBuilder*) setLevel:(SInt32) value {
  resultPbuserLevel.hasLevel = YES;
  resultPbuserLevel.level = value;
  return self;
}
- (PBUserLevelBuilder*) clearLevel {
  resultPbuserLevel.hasLevel = NO;
  resultPbuserLevel.level = 1;
  return self;
}
- (BOOL) hasExp {
  return resultPbuserLevel.hasExp;
}
- (SInt64) exp {
  return resultPbuserLevel.exp;
}
- (PBUserLevelBuilder*) setExp:(SInt64) value {
  resultPbuserLevel.hasExp = YES;
  resultPbuserLevel.exp = value;
  return self;
}
- (PBUserLevelBuilder*) clearExp {
  resultPbuserLevel.hasExp = NO;
  resultPbuserLevel.exp = 0L;
  return self;
}
@end

@interface PBGameUser ()
@property (strong) NSString* userId;
@property (strong) NSString* nickName;
@property (strong) NSString* avatar;
@property BOOL gender;
@property (strong) NSMutableArray * snsUsersArray;
@property (strong) NSString* location;
@property SInt32 userLevel;
@property (strong) NSString* facetimeId;
@property SInt32 seatId;
@property (strong) NSString* xiaojiNumber;
@property (strong) NSMutableArray * snsCredentialsArray;
@property BOOL isPlaying;
@property BOOL isTakenOver;
@property (strong) NSMutableArray * attributesArray;
@property (strong) NSString* email;
@property (strong) NSString* password;
@property (strong) NSString* birthday;
@property SInt32 zodiac;
@property SInt32 guessWordLanguage;
@property (strong) NSString* backgroundUrl;
@property (strong) NSString* deviceToken;
@property (strong) NSString* countryCode;
@property (strong) NSString* language;
@property SInt32 level;
@property SInt64 experience;
@property SInt32 coinBalance;
@property SInt32 diamondBalance;
@property SInt32 ingotBalance;
@property (strong) NSMutableArray * itemsArray;
@property (strong) NSString* deviceModel;
@property (strong) NSString* deviceOs;
@property (strong) NSString* deviceId;
@property (strong) NSString* deviceType;
@property (strong) NSMutableArray * blockDeviceIdsArray;
@property (strong) NSString* bloodGroup;
@property SInt32 fanCount;
@property SInt32 followCount;
@property Float32 longitude;
@property Float32 latitude;
@property BOOL isJailBroken;
@property PBOpenInfoType openInfoType;
@property SInt32 opusCoverflowType;
@property (strong) NSString* signature;
@property SInt32 featureOpus;
@property (strong) NSString* friendMemo;
@property SInt32 emailVerifyStatus;
@property BOOL canShakeNumber;
@property SInt32 shakeNumberTimes;
@property SInt32 takeCoins;
@property (strong) NSMutableArray * awardAppsArray;
@property SInt32 vip;
@property SInt32 vipExpireDate;
@property SInt32 vipLastPayDate;
@property (strong) PBSimpleGroup* groupInfo;
@property (strong) NSMutableArray * offGroupIdsArray;
@property (strong) NSMutableArray * permissionsArray;
@property SInt32 singRecordLimit;
@end

@implementation PBGameUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) _value_ {
  gender_ = !!_value_;
}
@synthesize snsUsersArray;
@dynamic snsUsers;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasUserLevel {
  return !!hasUserLevel_;
}
- (void) setHasUserLevel:(BOOL) _value_ {
  hasUserLevel_ = !!_value_;
}
@synthesize userLevel;
- (BOOL) hasFacetimeId {
  return !!hasFacetimeId_;
}
- (void) setHasFacetimeId:(BOOL) _value_ {
  hasFacetimeId_ = !!_value_;
}
@synthesize facetimeId;
- (BOOL) hasSeatId {
  return !!hasSeatId_;
}
- (void) setHasSeatId:(BOOL) _value_ {
  hasSeatId_ = !!_value_;
}
@synthesize seatId;
- (BOOL) hasXiaojiNumber {
  return !!hasXiaojiNumber_;
}
- (void) setHasXiaojiNumber:(BOOL) _value_ {
  hasXiaojiNumber_ = !!_value_;
}
@synthesize xiaojiNumber;
@synthesize snsCredentialsArray;
@dynamic snsCredentials;
- (BOOL) hasIsPlaying {
  return !!hasIsPlaying_;
}
- (void) setHasIsPlaying:(BOOL) _value_ {
  hasIsPlaying_ = !!_value_;
}
- (BOOL) isPlaying {
  return !!isPlaying_;
}
- (void) setIsPlaying:(BOOL) _value_ {
  isPlaying_ = !!_value_;
}
- (BOOL) hasIsTakenOver {
  return !!hasIsTakenOver_;
}
- (void) setHasIsTakenOver:(BOOL) _value_ {
  hasIsTakenOver_ = !!_value_;
}
- (BOOL) isTakenOver {
  return !!isTakenOver_;
}
- (void) setIsTakenOver:(BOOL) _value_ {
  isTakenOver_ = !!_value_;
}
@synthesize attributesArray;
@dynamic attributes;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) _value_ {
  hasBirthday_ = !!_value_;
}
@synthesize birthday;
- (BOOL) hasZodiac {
  return !!hasZodiac_;
}
- (void) setHasZodiac:(BOOL) _value_ {
  hasZodiac_ = !!_value_;
}
@synthesize zodiac;
- (BOOL) hasGuessWordLanguage {
  return !!hasGuessWordLanguage_;
}
- (void) setHasGuessWordLanguage:(BOOL) _value_ {
  hasGuessWordLanguage_ = !!_value_;
}
@synthesize guessWordLanguage;
- (BOOL) hasBackgroundUrl {
  return !!hasBackgroundUrl_;
}
- (void) setHasBackgroundUrl:(BOOL) _value_ {
  hasBackgroundUrl_ = !!_value_;
}
@synthesize backgroundUrl;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) _value_ {
  hasDeviceToken_ = !!_value_;
}
@synthesize deviceToken;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) _value_ {
  hasCountryCode_ = !!_value_;
}
@synthesize countryCode;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) _value_ {
  hasExperience_ = !!_value_;
}
@synthesize experience;
- (BOOL) hasCoinBalance {
  return !!hasCoinBalance_;
}
- (void) setHasCoinBalance:(BOOL) _value_ {
  hasCoinBalance_ = !!_value_;
}
@synthesize coinBalance;
- (BOOL) hasDiamondBalance {
  return !!hasDiamondBalance_;
}
- (void) setHasDiamondBalance:(BOOL) _value_ {
  hasDiamondBalance_ = !!_value_;
}
@synthesize diamondBalance;
- (BOOL) hasIngotBalance {
  return !!hasIngotBalance_;
}
- (void) setHasIngotBalance:(BOOL) _value_ {
  hasIngotBalance_ = !!_value_;
}
@synthesize ingotBalance;
@synthesize itemsArray;
@dynamic items;
- (BOOL) hasDeviceModel {
  return !!hasDeviceModel_;
}
- (void) setHasDeviceModel:(BOOL) _value_ {
  hasDeviceModel_ = !!_value_;
}
@synthesize deviceModel;
- (BOOL) hasDeviceOs {
  return !!hasDeviceOs_;
}
- (void) setHasDeviceOs:(BOOL) _value_ {
  hasDeviceOs_ = !!_value_;
}
@synthesize deviceOs;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
@synthesize blockDeviceIdsArray;
@dynamic blockDeviceIds;
- (BOOL) hasBloodGroup {
  return !!hasBloodGroup_;
}
- (void) setHasBloodGroup:(BOOL) _value_ {
  hasBloodGroup_ = !!_value_;
}
@synthesize bloodGroup;
- (BOOL) hasFanCount {
  return !!hasFanCount_;
}
- (void) setHasFanCount:(BOOL) _value_ {
  hasFanCount_ = !!_value_;
}
@synthesize fanCount;
- (BOOL) hasFollowCount {
  return !!hasFollowCount_;
}
- (void) setHasFollowCount:(BOOL) _value_ {
  hasFollowCount_ = !!_value_;
}
@synthesize followCount;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasIsJailBroken {
  return !!hasIsJailBroken_;
}
- (void) setHasIsJailBroken:(BOOL) _value_ {
  hasIsJailBroken_ = !!_value_;
}
- (BOOL) isJailBroken {
  return !!isJailBroken_;
}
- (void) setIsJailBroken:(BOOL) _value_ {
  isJailBroken_ = !!_value_;
}
- (BOOL) hasOpenInfoType {
  return !!hasOpenInfoType_;
}
- (void) setHasOpenInfoType:(BOOL) _value_ {
  hasOpenInfoType_ = !!_value_;
}
@synthesize openInfoType;
- (BOOL) hasOpusCoverflowType {
  return !!hasOpusCoverflowType_;
}
- (void) setHasOpusCoverflowType:(BOOL) _value_ {
  hasOpusCoverflowType_ = !!_value_;
}
@synthesize opusCoverflowType;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) _value_ {
  hasSignature_ = !!_value_;
}
@synthesize signature;
- (BOOL) hasFeatureOpus {
  return !!hasFeatureOpus_;
}
- (void) setHasFeatureOpus:(BOOL) _value_ {
  hasFeatureOpus_ = !!_value_;
}
@synthesize featureOpus;
- (BOOL) hasFriendMemo {
  return !!hasFriendMemo_;
}
- (void) setHasFriendMemo:(BOOL) _value_ {
  hasFriendMemo_ = !!_value_;
}
@synthesize friendMemo;
- (BOOL) hasEmailVerifyStatus {
  return !!hasEmailVerifyStatus_;
}
- (void) setHasEmailVerifyStatus:(BOOL) _value_ {
  hasEmailVerifyStatus_ = !!_value_;
}
@synthesize emailVerifyStatus;
- (BOOL) hasCanShakeNumber {
  return !!hasCanShakeNumber_;
}
- (void) setHasCanShakeNumber:(BOOL) _value_ {
  hasCanShakeNumber_ = !!_value_;
}
- (BOOL) canShakeNumber {
  return !!canShakeNumber_;
}
- (void) setCanShakeNumber:(BOOL) _value_ {
  canShakeNumber_ = !!_value_;
}
- (BOOL) hasShakeNumberTimes {
  return !!hasShakeNumberTimes_;
}
- (void) setHasShakeNumberTimes:(BOOL) _value_ {
  hasShakeNumberTimes_ = !!_value_;
}
@synthesize shakeNumberTimes;
- (BOOL) hasTakeCoins {
  return !!hasTakeCoins_;
}
- (void) setHasTakeCoins:(BOOL) _value_ {
  hasTakeCoins_ = !!_value_;
}
@synthesize takeCoins;
@synthesize awardAppsArray;
@dynamic awardApps;
- (BOOL) hasVip {
  return !!hasVip_;
}
- (void) setHasVip:(BOOL) _value_ {
  hasVip_ = !!_value_;
}
@synthesize vip;
- (BOOL) hasVipExpireDate {
  return !!hasVipExpireDate_;
}
- (void) setHasVipExpireDate:(BOOL) _value_ {
  hasVipExpireDate_ = !!_value_;
}
@synthesize vipExpireDate;
- (BOOL) hasVipLastPayDate {
  return !!hasVipLastPayDate_;
}
- (void) setHasVipLastPayDate:(BOOL) _value_ {
  hasVipLastPayDate_ = !!_value_;
}
@synthesize vipLastPayDate;
- (BOOL) hasGroupInfo {
  return !!hasGroupInfo_;
}
- (void) setHasGroupInfo:(BOOL) _value_ {
  hasGroupInfo_ = !!_value_;
}
@synthesize groupInfo;
@synthesize offGroupIdsArray;
@dynamic offGroupIds;
@synthesize permissionsArray;
@dynamic permissions;
- (BOOL) hasSingRecordLimit {
  return !!hasSingRecordLimit_;
}
- (void) setHasSingRecordLimit:(BOOL) _value_ {
  hasSingRecordLimit_ = !!_value_;
}
@synthesize singRecordLimit;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.location = @"";
    self.userLevel = 0;
    self.facetimeId = @"";
    self.seatId = 0;
    self.xiaojiNumber = @"";
    self.isPlaying = YES;
    self.isTakenOver = NO;
    self.email = @"";
    self.password = @"";
    self.birthday = @"";
    self.zodiac = 0;
    self.guessWordLanguage = 1;
    self.backgroundUrl = @"";
    self.deviceToken = @"";
    self.countryCode = @"";
    self.language = @"";
    self.level = 0;
    self.experience = 0L;
    self.coinBalance = 0;
    self.diamondBalance = 0;
    self.ingotBalance = 0;
    self.deviceModel = @"";
    self.deviceOs = @"";
    self.deviceId = @"";
    self.deviceType = @"";
    self.bloodGroup = @"";
    self.fanCount = 0;
    self.followCount = 0;
    self.longitude = 0;
    self.latitude = 0;
    self.isJailBroken = NO;
    self.openInfoType = PBOpenInfoTypeOpenToFriend;
    self.opusCoverflowType = 0;
    self.signature = @"";
    self.featureOpus = 0;
    self.friendMemo = @"";
    self.emailVerifyStatus = 0;
    self.canShakeNumber = NO;
    self.shakeNumberTimes = 0;
    self.takeCoins = 0;
    self.vip = 0;
    self.vipExpireDate = 0;
    self.vipLastPayDate = 0;
    self.groupInfo = [PBSimpleGroup defaultInstance];
    self.singRecordLimit = 30;
  }
  return self;
}
static PBGameUser* defaultPBGameUserInstance = nil;
+ (void) initialize {
  if (self == [PBGameUser class]) {
    defaultPBGameUserInstance = [[PBGameUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGameUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGameUserInstance;
}
- (NSArray *)snsUsers {
  return snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [snsUsersArray objectAtIndex:index];
}
- (NSArray *)snsCredentials {
  return snsCredentialsArray;
}
- (PBSNSUserCredential*)snsCredentialsAtIndex:(NSUInteger)index {
  return [snsCredentialsArray objectAtIndex:index];
}
- (NSArray *)attributes {
  return attributesArray;
}
- (PBKeyValue*)attributesAtIndex:(NSUInteger)index {
  return [attributesArray objectAtIndex:index];
}
- (NSArray *)items {
  return itemsArray;
}
- (PBUserItem*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (NSArray *)blockDeviceIds {
  return blockDeviceIdsArray;
}
- (NSString*)blockDeviceIdsAtIndex:(NSUInteger)index {
  return [blockDeviceIdsArray objectAtIndex:index];
}
- (NSArray *)awardApps {
  return awardAppsArray;
}
- (NSString*)awardAppsAtIndex:(NSUInteger)index {
  return [awardAppsArray objectAtIndex:index];
}
- (NSArray *)offGroupIds {
  return offGroupIdsArray;
}
- (NSString*)offGroupIdsAtIndex:(NSUInteger)index {
  return [offGroupIdsArray objectAtIndex:index];
}
- (NSArray *)permissions {
  return permissionsArray;
}
- (NSString*)permissionsAtIndex:(NSUInteger)index {
  return [permissionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  __block BOOL isInitsnsUsers = YES;
   [self.snsUsers enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsnsUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInitsnsUsers) return isInitsnsUsers;
  __block BOOL isInitsnsCredentials = YES;
   [self.snsCredentials enumerateObjectsUsingBlock:^(PBSNSUserCredential *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsnsCredentials = NO;
      *stop = YES;
    }
  }];
  if (!isInitsnsCredentials) return isInitsnsCredentials;
  __block BOOL isInitattributes = YES;
   [self.attributes enumerateObjectsUsingBlock:^(PBKeyValue *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitattributes = NO;
      *stop = YES;
    }
  }];
  if (!isInitattributes) return isInitattributes;
  __block BOOL isInititems = YES;
   [self.items enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititems = NO;
      *stop = YES;
    }
  }];
  if (!isInititems) return isInititems;
  if (self.hasGroupInfo) {
    if (!self.groupInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:4 value:self.gender];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasLocation) {
    [output writeString:6 value:self.location];
  }
  if (self.hasUserLevel) {
    [output writeInt32:7 value:self.userLevel];
  }
  if (self.hasFacetimeId) {
    [output writeString:8 value:self.facetimeId];
  }
  if (self.hasSeatId) {
    [output writeInt32:9 value:self.seatId];
  }
  if (self.hasXiaojiNumber) {
    [output writeString:10 value:self.xiaojiNumber];
  }
  [self.snsCredentialsArray enumerateObjectsUsingBlock:^(PBSNSUserCredential *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  if (self.hasIsPlaying) {
    [output writeBool:20 value:self.isPlaying];
  }
  if (self.hasIsTakenOver) {
    [output writeBool:21 value:self.isTakenOver];
  }
  [self.attributesArray enumerateObjectsUsingBlock:^(PBKeyValue *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:22 value:element];
  }];
  if (self.hasEmail) {
    [output writeString:31 value:self.email];
  }
  if (self.hasPassword) {
    [output writeString:32 value:self.password];
  }
  if (self.hasBirthday) {
    [output writeString:33 value:self.birthday];
  }
  if (self.hasZodiac) {
    [output writeInt32:34 value:self.zodiac];
  }
  if (self.hasGuessWordLanguage) {
    [output writeInt32:35 value:self.guessWordLanguage];
  }
  if (self.hasBackgroundUrl) {
    [output writeString:36 value:self.backgroundUrl];
  }
  if (self.hasDeviceToken) {
    [output writeString:37 value:self.deviceToken];
  }
  if (self.hasCountryCode) {
    [output writeString:38 value:self.countryCode];
  }
  if (self.hasLanguage) {
    [output writeString:39 value:self.language];
  }
  if (self.hasLevel) {
    [output writeInt32:41 value:self.level];
  }
  if (self.hasExperience) {
    [output writeInt64:42 value:self.experience];
  }
  if (self.hasCoinBalance) {
    [output writeInt32:51 value:self.coinBalance];
  }
  if (self.hasDiamondBalance) {
    [output writeInt32:52 value:self.diamondBalance];
  }
  if (self.hasIngotBalance) {
    [output writeInt32:53 value:self.ingotBalance];
  }
  [self.itemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:61 value:element];
  }];
  if (self.hasDeviceModel) {
    [output writeString:71 value:self.deviceModel];
  }
  if (self.hasDeviceOs) {
    [output writeString:72 value:self.deviceOs];
  }
  if (self.hasDeviceId) {
    [output writeString:73 value:self.deviceId];
  }
  if (self.hasDeviceType) {
    [output writeString:74 value:self.deviceType];
  }
  [self.blockDeviceIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:75 value:element];
  }];
  if (self.hasBloodGroup) {
    [output writeString:81 value:self.bloodGroup];
  }
  if (self.hasFanCount) {
    [output writeInt32:82 value:self.fanCount];
  }
  if (self.hasFollowCount) {
    [output writeInt32:83 value:self.followCount];
  }
  if (self.hasLongitude) {
    [output writeFloat:84 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeFloat:85 value:self.latitude];
  }
  if (self.hasIsJailBroken) {
    [output writeBool:86 value:self.isJailBroken];
  }
  if (self.hasOpenInfoType) {
    [output writeEnum:91 value:self.openInfoType];
  }
  if (self.hasOpusCoverflowType) {
    [output writeInt32:92 value:self.opusCoverflowType];
  }
  if (self.hasSignature) {
    [output writeString:100 value:self.signature];
  }
  if (self.hasFeatureOpus) {
    [output writeInt32:101 value:self.featureOpus];
  }
  if (self.hasFriendMemo) {
    [output writeString:102 value:self.friendMemo];
  }
  if (self.hasEmailVerifyStatus) {
    [output writeInt32:103 value:self.emailVerifyStatus];
  }
  if (self.hasCanShakeNumber) {
    [output writeBool:104 value:self.canShakeNumber];
  }
  if (self.hasShakeNumberTimes) {
    [output writeInt32:105 value:self.shakeNumberTimes];
  }
  if (self.hasTakeCoins) {
    [output writeInt32:106 value:self.takeCoins];
  }
  [self.awardAppsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:107 value:element];
  }];
  if (self.hasVip) {
    [output writeInt32:110 value:self.vip];
  }
  if (self.hasVipExpireDate) {
    [output writeInt32:111 value:self.vipExpireDate];
  }
  if (self.hasVipLastPayDate) {
    [output writeInt32:112 value:self.vipLastPayDate];
  }
  if (self.hasGroupInfo) {
    [output writeMessage:150 value:self.groupInfo];
  }
  [self.offGroupIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:151 value:element];
  }];
  [self.permissionsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:152 value:element];
  }];
  if (self.hasSingRecordLimit) {
    [output writeInt32:200 value:self.singRecordLimit];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeBoolSize(4, self.gender);
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasLocation) {
    size_ += computeStringSize(6, self.location);
  }
  if (self.hasUserLevel) {
    size_ += computeInt32Size(7, self.userLevel);
  }
  if (self.hasFacetimeId) {
    size_ += computeStringSize(8, self.facetimeId);
  }
  if (self.hasSeatId) {
    size_ += computeInt32Size(9, self.seatId);
  }
  if (self.hasXiaojiNumber) {
    size_ += computeStringSize(10, self.xiaojiNumber);
  }
  [self.snsCredentialsArray enumerateObjectsUsingBlock:^(PBSNSUserCredential *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  if (self.hasIsPlaying) {
    size_ += computeBoolSize(20, self.isPlaying);
  }
  if (self.hasIsTakenOver) {
    size_ += computeBoolSize(21, self.isTakenOver);
  }
  [self.attributesArray enumerateObjectsUsingBlock:^(PBKeyValue *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(22, element);
  }];
  if (self.hasEmail) {
    size_ += computeStringSize(31, self.email);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(32, self.password);
  }
  if (self.hasBirthday) {
    size_ += computeStringSize(33, self.birthday);
  }
  if (self.hasZodiac) {
    size_ += computeInt32Size(34, self.zodiac);
  }
  if (self.hasGuessWordLanguage) {
    size_ += computeInt32Size(35, self.guessWordLanguage);
  }
  if (self.hasBackgroundUrl) {
    size_ += computeStringSize(36, self.backgroundUrl);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(37, self.deviceToken);
  }
  if (self.hasCountryCode) {
    size_ += computeStringSize(38, self.countryCode);
  }
  if (self.hasLanguage) {
    size_ += computeStringSize(39, self.language);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(41, self.level);
  }
  if (self.hasExperience) {
    size_ += computeInt64Size(42, self.experience);
  }
  if (self.hasCoinBalance) {
    size_ += computeInt32Size(51, self.coinBalance);
  }
  if (self.hasDiamondBalance) {
    size_ += computeInt32Size(52, self.diamondBalance);
  }
  if (self.hasIngotBalance) {
    size_ += computeInt32Size(53, self.ingotBalance);
  }
  [self.itemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(61, element);
  }];
  if (self.hasDeviceModel) {
    size_ += computeStringSize(71, self.deviceModel);
  }
  if (self.hasDeviceOs) {
    size_ += computeStringSize(72, self.deviceOs);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(73, self.deviceId);
  }
  if (self.hasDeviceType) {
    size_ += computeStringSize(74, self.deviceType);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.blockDeviceIdsArray.count;
    [self.blockDeviceIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasBloodGroup) {
    size_ += computeStringSize(81, self.bloodGroup);
  }
  if (self.hasFanCount) {
    size_ += computeInt32Size(82, self.fanCount);
  }
  if (self.hasFollowCount) {
    size_ += computeInt32Size(83, self.followCount);
  }
  if (self.hasLongitude) {
    size_ += computeFloatSize(84, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeFloatSize(85, self.latitude);
  }
  if (self.hasIsJailBroken) {
    size_ += computeBoolSize(86, self.isJailBroken);
  }
  if (self.hasOpenInfoType) {
    size_ += computeEnumSize(91, self.openInfoType);
  }
  if (self.hasOpusCoverflowType) {
    size_ += computeInt32Size(92, self.opusCoverflowType);
  }
  if (self.hasSignature) {
    size_ += computeStringSize(100, self.signature);
  }
  if (self.hasFeatureOpus) {
    size_ += computeInt32Size(101, self.featureOpus);
  }
  if (self.hasFriendMemo) {
    size_ += computeStringSize(102, self.friendMemo);
  }
  if (self.hasEmailVerifyStatus) {
    size_ += computeInt32Size(103, self.emailVerifyStatus);
  }
  if (self.hasCanShakeNumber) {
    size_ += computeBoolSize(104, self.canShakeNumber);
  }
  if (self.hasShakeNumberTimes) {
    size_ += computeInt32Size(105, self.shakeNumberTimes);
  }
  if (self.hasTakeCoins) {
    size_ += computeInt32Size(106, self.takeCoins);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.awardAppsArray.count;
    [self.awardAppsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasVip) {
    size_ += computeInt32Size(110, self.vip);
  }
  if (self.hasVipExpireDate) {
    size_ += computeInt32Size(111, self.vipExpireDate);
  }
  if (self.hasVipLastPayDate) {
    size_ += computeInt32Size(112, self.vipLastPayDate);
  }
  if (self.hasGroupInfo) {
    size_ += computeMessageSize(150, self.groupInfo);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.offGroupIdsArray.count;
    [self.offGroupIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.permissionsArray.count;
    [self.permissionsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasSingRecordLimit) {
    size_ += computeInt32Size(200, self.singRecordLimit);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGameUser*) parseFromData:(NSData*) data {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data] build];
}
+ (PBGameUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input] build];
}
+ (PBGameUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameUser*)[[[PBGameUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameUserBuilder*) builder {
  return [[PBGameUserBuilder alloc] init];
}
+ (PBGameUserBuilder*) builderWithPrototype:(PBGameUser*) prototype {
  return [[PBGameUser builder] mergeFrom:prototype];
}
- (PBGameUserBuilder*) builder {
  return [PBGameUser builder];
}
- (PBGameUserBuilder*) toBuilder {
  return [PBGameUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithBool:self.gender]];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"snsUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasUserLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userLevel", [NSNumber numberWithInteger:self.userLevel]];
  }
  if (self.hasFacetimeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"facetimeId", self.facetimeId];
  }
  if (self.hasSeatId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seatId", [NSNumber numberWithInteger:self.seatId]];
  }
  if (self.hasXiaojiNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xiaojiNumber", self.xiaojiNumber];
  }
  [self.snsCredentialsArray enumerateObjectsUsingBlock:^(PBSNSUserCredential *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"snsCredentials"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasIsPlaying) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isPlaying", [NSNumber numberWithBool:self.isPlaying]];
  }
  if (self.hasIsTakenOver) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isTakenOver", [NSNumber numberWithBool:self.isTakenOver]];
  }
  [self.attributesArray enumerateObjectsUsingBlock:^(PBKeyValue *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"attributes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasBirthday) {
    [output appendFormat:@"%@%@: %@\n", indent, @"birthday", self.birthday];
  }
  if (self.hasZodiac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zodiac", [NSNumber numberWithInteger:self.zodiac]];
  }
  if (self.hasGuessWordLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessWordLanguage", [NSNumber numberWithInteger:self.guessWordLanguage]];
  }
  if (self.hasBackgroundUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundUrl", self.backgroundUrl];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", self.language];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasExperience) {
    [output appendFormat:@"%@%@: %@\n", indent, @"experience", [NSNumber numberWithLongLong:self.experience]];
  }
  if (self.hasCoinBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coinBalance", [NSNumber numberWithInteger:self.coinBalance]];
  }
  if (self.hasDiamondBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diamondBalance", [NSNumber numberWithInteger:self.diamondBalance]];
  }
  if (self.hasIngotBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ingotBalance", [NSNumber numberWithInteger:self.ingotBalance]];
  }
  [self.itemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDeviceModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceModel", self.deviceModel];
  }
  if (self.hasDeviceOs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceOs", self.deviceOs];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", self.deviceType];
  }
  [self.blockDeviceIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blockDeviceIds", obj];
  }];
  if (self.hasBloodGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bloodGroup", self.bloodGroup];
  }
  if (self.hasFanCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fanCount", [NSNumber numberWithInteger:self.fanCount]];
  }
  if (self.hasFollowCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"followCount", [NSNumber numberWithInteger:self.followCount]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithFloat:self.longitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithFloat:self.latitude]];
  }
  if (self.hasIsJailBroken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isJailBroken", [NSNumber numberWithBool:self.isJailBroken]];
  }
  if (self.hasOpenInfoType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openInfoType", NSStringFromPBOpenInfoType(self.openInfoType)];
  }
  if (self.hasOpusCoverflowType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCoverflowType", [NSNumber numberWithInteger:self.opusCoverflowType]];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasFeatureOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"featureOpus", [NSNumber numberWithInteger:self.featureOpus]];
  }
  if (self.hasFriendMemo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendMemo", self.friendMemo];
  }
  if (self.hasEmailVerifyStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"emailVerifyStatus", [NSNumber numberWithInteger:self.emailVerifyStatus]];
  }
  if (self.hasCanShakeNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canShakeNumber", [NSNumber numberWithBool:self.canShakeNumber]];
  }
  if (self.hasShakeNumberTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shakeNumberTimes", [NSNumber numberWithInteger:self.shakeNumberTimes]];
  }
  if (self.hasTakeCoins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"takeCoins", [NSNumber numberWithInteger:self.takeCoins]];
  }
  [self.awardAppsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardApps", obj];
  }];
  if (self.hasVip) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vip", [NSNumber numberWithInteger:self.vip]];
  }
  if (self.hasVipExpireDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vipExpireDate", [NSNumber numberWithInteger:self.vipExpireDate]];
  }
  if (self.hasVipLastPayDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vipLastPayDate", [NSNumber numberWithInteger:self.vipLastPayDate]];
  }
  if (self.hasGroupInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupInfo"];
    [self.groupInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.offGroupIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offGroupIds", obj];
  }];
  [self.permissionsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permissions", obj];
  }];
  if (self.hasSingRecordLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"singRecordLimit", [NSNumber numberWithInteger:self.singRecordLimit]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGameUser class]]) {
    return NO;
  }
  PBGameUser *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      [self.snsUsersArray isEqualToArray:otherMessage.snsUsersArray] &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasUserLevel == otherMessage.hasUserLevel &&
      (!self.hasUserLevel || self.userLevel == otherMessage.userLevel) &&
      self.hasFacetimeId == otherMessage.hasFacetimeId &&
      (!self.hasFacetimeId || [self.facetimeId isEqual:otherMessage.facetimeId]) &&
      self.hasSeatId == otherMessage.hasSeatId &&
      (!self.hasSeatId || self.seatId == otherMessage.seatId) &&
      self.hasXiaojiNumber == otherMessage.hasXiaojiNumber &&
      (!self.hasXiaojiNumber || [self.xiaojiNumber isEqual:otherMessage.xiaojiNumber]) &&
      [self.snsCredentialsArray isEqualToArray:otherMessage.snsCredentialsArray] &&
      self.hasIsPlaying == otherMessage.hasIsPlaying &&
      (!self.hasIsPlaying || self.isPlaying == otherMessage.isPlaying) &&
      self.hasIsTakenOver == otherMessage.hasIsTakenOver &&
      (!self.hasIsTakenOver || self.isTakenOver == otherMessage.isTakenOver) &&
      [self.attributesArray isEqualToArray:otherMessage.attributesArray] &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasBirthday == otherMessage.hasBirthday &&
      (!self.hasBirthday || [self.birthday isEqual:otherMessage.birthday]) &&
      self.hasZodiac == otherMessage.hasZodiac &&
      (!self.hasZodiac || self.zodiac == otherMessage.zodiac) &&
      self.hasGuessWordLanguage == otherMessage.hasGuessWordLanguage &&
      (!self.hasGuessWordLanguage || self.guessWordLanguage == otherMessage.guessWordLanguage) &&
      self.hasBackgroundUrl == otherMessage.hasBackgroundUrl &&
      (!self.hasBackgroundUrl || [self.backgroundUrl isEqual:otherMessage.backgroundUrl]) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || [self.language isEqual:otherMessage.language]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasExperience == otherMessage.hasExperience &&
      (!self.hasExperience || self.experience == otherMessage.experience) &&
      self.hasCoinBalance == otherMessage.hasCoinBalance &&
      (!self.hasCoinBalance || self.coinBalance == otherMessage.coinBalance) &&
      self.hasDiamondBalance == otherMessage.hasDiamondBalance &&
      (!self.hasDiamondBalance || self.diamondBalance == otherMessage.diamondBalance) &&
      self.hasIngotBalance == otherMessage.hasIngotBalance &&
      (!self.hasIngotBalance || self.ingotBalance == otherMessage.ingotBalance) &&
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      self.hasDeviceModel == otherMessage.hasDeviceModel &&
      (!self.hasDeviceModel || [self.deviceModel isEqual:otherMessage.deviceModel]) &&
      self.hasDeviceOs == otherMessage.hasDeviceOs &&
      (!self.hasDeviceOs || [self.deviceOs isEqual:otherMessage.deviceOs]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || [self.deviceType isEqual:otherMessage.deviceType]) &&
      [self.blockDeviceIdsArray isEqualToArray:otherMessage.blockDeviceIdsArray] &&
      self.hasBloodGroup == otherMessage.hasBloodGroup &&
      (!self.hasBloodGroup || [self.bloodGroup isEqual:otherMessage.bloodGroup]) &&
      self.hasFanCount == otherMessage.hasFanCount &&
      (!self.hasFanCount || self.fanCount == otherMessage.fanCount) &&
      self.hasFollowCount == otherMessage.hasFollowCount &&
      (!self.hasFollowCount || self.followCount == otherMessage.followCount) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasIsJailBroken == otherMessage.hasIsJailBroken &&
      (!self.hasIsJailBroken || self.isJailBroken == otherMessage.isJailBroken) &&
      self.hasOpenInfoType == otherMessage.hasOpenInfoType &&
      (!self.hasOpenInfoType || self.openInfoType == otherMessage.openInfoType) &&
      self.hasOpusCoverflowType == otherMessage.hasOpusCoverflowType &&
      (!self.hasOpusCoverflowType || self.opusCoverflowType == otherMessage.opusCoverflowType) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasFeatureOpus == otherMessage.hasFeatureOpus &&
      (!self.hasFeatureOpus || self.featureOpus == otherMessage.featureOpus) &&
      self.hasFriendMemo == otherMessage.hasFriendMemo &&
      (!self.hasFriendMemo || [self.friendMemo isEqual:otherMessage.friendMemo]) &&
      self.hasEmailVerifyStatus == otherMessage.hasEmailVerifyStatus &&
      (!self.hasEmailVerifyStatus || self.emailVerifyStatus == otherMessage.emailVerifyStatus) &&
      self.hasCanShakeNumber == otherMessage.hasCanShakeNumber &&
      (!self.hasCanShakeNumber || self.canShakeNumber == otherMessage.canShakeNumber) &&
      self.hasShakeNumberTimes == otherMessage.hasShakeNumberTimes &&
      (!self.hasShakeNumberTimes || self.shakeNumberTimes == otherMessage.shakeNumberTimes) &&
      self.hasTakeCoins == otherMessage.hasTakeCoins &&
      (!self.hasTakeCoins || self.takeCoins == otherMessage.takeCoins) &&
      [self.awardAppsArray isEqualToArray:otherMessage.awardAppsArray] &&
      self.hasVip == otherMessage.hasVip &&
      (!self.hasVip || self.vip == otherMessage.vip) &&
      self.hasVipExpireDate == otherMessage.hasVipExpireDate &&
      (!self.hasVipExpireDate || self.vipExpireDate == otherMessage.vipExpireDate) &&
      self.hasVipLastPayDate == otherMessage.hasVipLastPayDate &&
      (!self.hasVipLastPayDate || self.vipLastPayDate == otherMessage.vipLastPayDate) &&
      self.hasGroupInfo == otherMessage.hasGroupInfo &&
      (!self.hasGroupInfo || [self.groupInfo isEqual:otherMessage.groupInfo]) &&
      [self.offGroupIdsArray isEqualToArray:otherMessage.offGroupIdsArray] &&
      [self.permissionsArray isEqualToArray:otherMessage.permissionsArray] &&
      self.hasSingRecordLimit == otherMessage.hasSingRecordLimit &&
      (!self.hasSingRecordLimit || self.singRecordLimit == otherMessage.singRecordLimit) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gender] hash];
  }
  [self.snsUsersArray enumerateObjectsUsingBlock:^(PBSNSUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasUserLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userLevel] hash];
  }
  if (self.hasFacetimeId) {
    hashCode = hashCode * 31 + [self.facetimeId hash];
  }
  if (self.hasSeatId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seatId] hash];
  }
  if (self.hasXiaojiNumber) {
    hashCode = hashCode * 31 + [self.xiaojiNumber hash];
  }
  [self.snsCredentialsArray enumerateObjectsUsingBlock:^(PBSNSUserCredential *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasIsPlaying) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isPlaying] hash];
  }
  if (self.hasIsTakenOver) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isTakenOver] hash];
  }
  [self.attributesArray enumerateObjectsUsingBlock:^(PBKeyValue *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasBirthday) {
    hashCode = hashCode * 31 + [self.birthday hash];
  }
  if (self.hasZodiac) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.zodiac] hash];
  }
  if (self.hasGuessWordLanguage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guessWordLanguage] hash];
  }
  if (self.hasBackgroundUrl) {
    hashCode = hashCode * 31 + [self.backgroundUrl hash];
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [self.language hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasExperience) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.experience] hash];
  }
  if (self.hasCoinBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.coinBalance] hash];
  }
  if (self.hasDiamondBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.diamondBalance] hash];
  }
  if (self.hasIngotBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ingotBalance] hash];
  }
  [self.itemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDeviceModel) {
    hashCode = hashCode * 31 + [self.deviceModel hash];
  }
  if (self.hasDeviceOs) {
    hashCode = hashCode * 31 + [self.deviceOs hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [self.deviceType hash];
  }
  [self.blockDeviceIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBloodGroup) {
    hashCode = hashCode * 31 + [self.bloodGroup hash];
  }
  if (self.hasFanCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fanCount] hash];
  }
  if (self.hasFollowCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.followCount] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.longitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.latitude] hash];
  }
  if (self.hasIsJailBroken) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isJailBroken] hash];
  }
  if (self.hasOpenInfoType) {
    hashCode = hashCode * 31 + self.openInfoType;
  }
  if (self.hasOpusCoverflowType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.opusCoverflowType] hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasFeatureOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.featureOpus] hash];
  }
  if (self.hasFriendMemo) {
    hashCode = hashCode * 31 + [self.friendMemo hash];
  }
  if (self.hasEmailVerifyStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.emailVerifyStatus] hash];
  }
  if (self.hasCanShakeNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.canShakeNumber] hash];
  }
  if (self.hasShakeNumberTimes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shakeNumberTimes] hash];
  }
  if (self.hasTakeCoins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.takeCoins] hash];
  }
  [self.awardAppsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVip) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.vip] hash];
  }
  if (self.hasVipExpireDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.vipExpireDate] hash];
  }
  if (self.hasVipLastPayDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.vipLastPayDate] hash];
  }
  if (self.hasGroupInfo) {
    hashCode = hashCode * 31 + [self.groupInfo hash];
  }
  [self.offGroupIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.permissionsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSingRecordLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.singRecordLimit] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGameUserBuilder()
@property (strong) PBGameUser* resultPbgameUser;
@end

@implementation PBGameUserBuilder
@synthesize resultPbgameUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgameUser = [[PBGameUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgameUser;
}
- (PBGameUserBuilder*) clear {
  self.resultPbgameUser = [[PBGameUser alloc] init];
  return self;
}
- (PBGameUserBuilder*) clone {
  return [PBGameUser builderWithPrototype:resultPbgameUser];
}
- (PBGameUser*) defaultInstance {
  return [PBGameUser defaultInstance];
}
- (PBGameUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameUser*) buildPartial {
  PBGameUser* returnMe = resultPbgameUser;
  self.resultPbgameUser = nil;
  return returnMe;
}
- (PBGameUserBuilder*) mergeFrom:(PBGameUser*) other {
  if (other == [PBGameUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.snsUsersArray.count > 0) {
    if (resultPbgameUser.snsUsersArray == nil) {
      resultPbgameUser.snsUsersArray = [[NSMutableArray alloc] initWithArray:other.snsUsersArray];
    } else {
      [resultPbgameUser.snsUsersArray addObjectsFromArray:other.snsUsersArray];
    }
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasUserLevel) {
    [self setUserLevel:other.userLevel];
  }
  if (other.hasFacetimeId) {
    [self setFacetimeId:other.facetimeId];
  }
  if (other.hasSeatId) {
    [self setSeatId:other.seatId];
  }
  if (other.hasXiaojiNumber) {
    [self setXiaojiNumber:other.xiaojiNumber];
  }
  if (other.snsCredentialsArray.count > 0) {
    if (resultPbgameUser.snsCredentialsArray == nil) {
      resultPbgameUser.snsCredentialsArray = [[NSMutableArray alloc] initWithArray:other.snsCredentialsArray];
    } else {
      [resultPbgameUser.snsCredentialsArray addObjectsFromArray:other.snsCredentialsArray];
    }
  }
  if (other.hasIsPlaying) {
    [self setIsPlaying:other.isPlaying];
  }
  if (other.hasIsTakenOver) {
    [self setIsTakenOver:other.isTakenOver];
  }
  if (other.attributesArray.count > 0) {
    if (resultPbgameUser.attributesArray == nil) {
      resultPbgameUser.attributesArray = [[NSMutableArray alloc] initWithArray:other.attributesArray];
    } else {
      [resultPbgameUser.attributesArray addObjectsFromArray:other.attributesArray];
    }
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasZodiac) {
    [self setZodiac:other.zodiac];
  }
  if (other.hasGuessWordLanguage) {
    [self setGuessWordLanguage:other.guessWordLanguage];
  }
  if (other.hasBackgroundUrl) {
    [self setBackgroundUrl:other.backgroundUrl];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasCoinBalance) {
    [self setCoinBalance:other.coinBalance];
  }
  if (other.hasDiamondBalance) {
    [self setDiamondBalance:other.diamondBalance];
  }
  if (other.hasIngotBalance) {
    [self setIngotBalance:other.ingotBalance];
  }
  if (other.itemsArray.count > 0) {
    if (resultPbgameUser.itemsArray == nil) {
      resultPbgameUser.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [resultPbgameUser.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  if (other.hasDeviceModel) {
    [self setDeviceModel:other.deviceModel];
  }
  if (other.hasDeviceOs) {
    [self setDeviceOs:other.deviceOs];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.blockDeviceIdsArray.count > 0) {
    if (resultPbgameUser.blockDeviceIdsArray == nil) {
      resultPbgameUser.blockDeviceIdsArray = [[NSMutableArray alloc] initWithArray:other.blockDeviceIdsArray];
    } else {
      [resultPbgameUser.blockDeviceIdsArray addObjectsFromArray:other.blockDeviceIdsArray];
    }
  }
  if (other.hasBloodGroup) {
    [self setBloodGroup:other.bloodGroup];
  }
  if (other.hasFanCount) {
    [self setFanCount:other.fanCount];
  }
  if (other.hasFollowCount) {
    [self setFollowCount:other.followCount];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasIsJailBroken) {
    [self setIsJailBroken:other.isJailBroken];
  }
  if (other.hasOpenInfoType) {
    [self setOpenInfoType:other.openInfoType];
  }
  if (other.hasOpusCoverflowType) {
    [self setOpusCoverflowType:other.opusCoverflowType];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasFeatureOpus) {
    [self setFeatureOpus:other.featureOpus];
  }
  if (other.hasFriendMemo) {
    [self setFriendMemo:other.friendMemo];
  }
  if (other.hasEmailVerifyStatus) {
    [self setEmailVerifyStatus:other.emailVerifyStatus];
  }
  if (other.hasCanShakeNumber) {
    [self setCanShakeNumber:other.canShakeNumber];
  }
  if (other.hasShakeNumberTimes) {
    [self setShakeNumberTimes:other.shakeNumberTimes];
  }
  if (other.hasTakeCoins) {
    [self setTakeCoins:other.takeCoins];
  }
  if (other.awardAppsArray.count > 0) {
    if (resultPbgameUser.awardAppsArray == nil) {
      resultPbgameUser.awardAppsArray = [[NSMutableArray alloc] initWithArray:other.awardAppsArray];
    } else {
      [resultPbgameUser.awardAppsArray addObjectsFromArray:other.awardAppsArray];
    }
  }
  if (other.hasVip) {
    [self setVip:other.vip];
  }
  if (other.hasVipExpireDate) {
    [self setVipExpireDate:other.vipExpireDate];
  }
  if (other.hasVipLastPayDate) {
    [self setVipLastPayDate:other.vipLastPayDate];
  }
  if (other.hasGroupInfo) {
    [self mergeGroupInfo:other.groupInfo];
  }
  if (other.offGroupIdsArray.count > 0) {
    if (resultPbgameUser.offGroupIdsArray == nil) {
      resultPbgameUser.offGroupIdsArray = [[NSMutableArray alloc] initWithArray:other.offGroupIdsArray];
    } else {
      [resultPbgameUser.offGroupIdsArray addObjectsFromArray:other.offGroupIdsArray];
    }
  }
  if (other.permissionsArray.count > 0) {
    if (resultPbgameUser.permissionsArray == nil) {
      resultPbgameUser.permissionsArray = [[NSMutableArray alloc] initWithArray:other.permissionsArray];
    } else {
      [resultPbgameUser.permissionsArray addObjectsFromArray:other.permissionsArray];
    }
  }
  if (other.hasSingRecordLimit) {
    [self setSingRecordLimit:other.singRecordLimit];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGender:[input readBool]];
        break;
      }
      case 42: {
        PBSNSUserBuilder* subBuilder = [PBSNSUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsUsers:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setLocation:[input readString]];
        break;
      }
      case 56: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 66: {
        [self setFacetimeId:[input readString]];
        break;
      }
      case 72: {
        [self setSeatId:[input readInt32]];
        break;
      }
      case 82: {
        [self setXiaojiNumber:[input readString]];
        break;
      }
      case 90: {
        PBSNSUserCredentialBuilder* subBuilder = [PBSNSUserCredential builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSnsCredentials:[subBuilder buildPartial]];
        break;
      }
      case 160: {
        [self setIsPlaying:[input readBool]];
        break;
      }
      case 168: {
        [self setIsTakenOver:[input readBool]];
        break;
      }
      case 178: {
        PBKeyValueBuilder* subBuilder = [PBKeyValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttributes:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        [self setEmail:[input readString]];
        break;
      }
      case 258: {
        [self setPassword:[input readString]];
        break;
      }
      case 266: {
        [self setBirthday:[input readString]];
        break;
      }
      case 272: {
        [self setZodiac:[input readInt32]];
        break;
      }
      case 280: {
        [self setGuessWordLanguage:[input readInt32]];
        break;
      }
      case 290: {
        [self setBackgroundUrl:[input readString]];
        break;
      }
      case 298: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 306: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 314: {
        [self setLanguage:[input readString]];
        break;
      }
      case 328: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 336: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 408: {
        [self setCoinBalance:[input readInt32]];
        break;
      }
      case 416: {
        [self setDiamondBalance:[input readInt32]];
        break;
      }
      case 424: {
        [self setIngotBalance:[input readInt32]];
        break;
      }
      case 490: {
        PBUserItemBuilder* subBuilder = [PBUserItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
      case 570: {
        [self setDeviceModel:[input readString]];
        break;
      }
      case 578: {
        [self setDeviceOs:[input readString]];
        break;
      }
      case 586: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 594: {
        [self setDeviceType:[input readString]];
        break;
      }
      case 602: {
        [self addBlockDeviceIds:[input readString]];
        break;
      }
      case 650: {
        [self setBloodGroup:[input readString]];
        break;
      }
      case 656: {
        [self setFanCount:[input readInt32]];
        break;
      }
      case 664: {
        [self setFollowCount:[input readInt32]];
        break;
      }
      case 677: {
        [self setLongitude:[input readFloat]];
        break;
      }
      case 685: {
        [self setLatitude:[input readFloat]];
        break;
      }
      case 688: {
        [self setIsJailBroken:[input readBool]];
        break;
      }
      case 728: {
        PBOpenInfoType value = (PBOpenInfoType)[input readEnum];
        if (PBOpenInfoTypeIsValidValue(value)) {
          [self setOpenInfoType:value];
        } else {
          [unknownFields mergeVarintField:91 value:value];
        }
        break;
      }
      case 736: {
        [self setOpusCoverflowType:[input readInt32]];
        break;
      }
      case 802: {
        [self setSignature:[input readString]];
        break;
      }
      case 808: {
        [self setFeatureOpus:[input readInt32]];
        break;
      }
      case 818: {
        [self setFriendMemo:[input readString]];
        break;
      }
      case 824: {
        [self setEmailVerifyStatus:[input readInt32]];
        break;
      }
      case 832: {
        [self setCanShakeNumber:[input readBool]];
        break;
      }
      case 840: {
        [self setShakeNumberTimes:[input readInt32]];
        break;
      }
      case 848: {
        [self setTakeCoins:[input readInt32]];
        break;
      }
      case 858: {
        [self addAwardApps:[input readString]];
        break;
      }
      case 880: {
        [self setVip:[input readInt32]];
        break;
      }
      case 888: {
        [self setVipExpireDate:[input readInt32]];
        break;
      }
      case 896: {
        [self setVipLastPayDate:[input readInt32]];
        break;
      }
      case 1202: {
        PBSimpleGroupBuilder* subBuilder = [PBSimpleGroup builder];
        if (self.hasGroupInfo) {
          [subBuilder mergeFrom:self.groupInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGroupInfo:[subBuilder buildPartial]];
        break;
      }
      case 1210: {
        [self addOffGroupIds:[input readString]];
        break;
      }
      case 1218: {
        [self addPermissions:[input readString]];
        break;
      }
      case 1600: {
        [self setSingRecordLimit:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbgameUser.hasUserId;
}
- (NSString*) userId {
  return resultPbgameUser.userId;
}
- (PBGameUserBuilder*) setUserId:(NSString*) value {
  resultPbgameUser.hasUserId = YES;
  resultPbgameUser.userId = value;
  return self;
}
- (PBGameUserBuilder*) clearUserId {
  resultPbgameUser.hasUserId = NO;
  resultPbgameUser.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return resultPbgameUser.hasNickName;
}
- (NSString*) nickName {
  return resultPbgameUser.nickName;
}
- (PBGameUserBuilder*) setNickName:(NSString*) value {
  resultPbgameUser.hasNickName = YES;
  resultPbgameUser.nickName = value;
  return self;
}
- (PBGameUserBuilder*) clearNickName {
  resultPbgameUser.hasNickName = NO;
  resultPbgameUser.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbgameUser.hasAvatar;
}
- (NSString*) avatar {
  return resultPbgameUser.avatar;
}
- (PBGameUserBuilder*) setAvatar:(NSString*) value {
  resultPbgameUser.hasAvatar = YES;
  resultPbgameUser.avatar = value;
  return self;
}
- (PBGameUserBuilder*) clearAvatar {
  resultPbgameUser.hasAvatar = NO;
  resultPbgameUser.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultPbgameUser.hasGender;
}
- (BOOL) gender {
  return resultPbgameUser.gender;
}
- (PBGameUserBuilder*) setGender:(BOOL) value {
  resultPbgameUser.hasGender = YES;
  resultPbgameUser.gender = value;
  return self;
}
- (PBGameUserBuilder*) clearGender {
  resultPbgameUser.hasGender = NO;
  resultPbgameUser.gender = NO;
  return self;
}
- (NSMutableArray *)snsUsers {
  return resultPbgameUser.snsUsersArray;
}
- (PBSNSUser*)snsUsersAtIndex:(NSUInteger)index {
  return [resultPbgameUser snsUsersAtIndex:index];
}
- (PBGameUserBuilder *)addSnsUsers:(PBSNSUser*)value {
  if (resultPbgameUser.snsUsersArray == nil) {
    resultPbgameUser.snsUsersArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.snsUsersArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setSnsUsersArray:(NSArray *)array {
  resultPbgameUser.snsUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearSnsUsers {
  resultPbgameUser.snsUsersArray = nil;
  return self;
}
- (BOOL) hasLocation {
  return resultPbgameUser.hasLocation;
}
- (NSString*) location {
  return resultPbgameUser.location;
}
- (PBGameUserBuilder*) setLocation:(NSString*) value {
  resultPbgameUser.hasLocation = YES;
  resultPbgameUser.location = value;
  return self;
}
- (PBGameUserBuilder*) clearLocation {
  resultPbgameUser.hasLocation = NO;
  resultPbgameUser.location = @"";
  return self;
}
- (BOOL) hasUserLevel {
  return resultPbgameUser.hasUserLevel;
}
- (SInt32) userLevel {
  return resultPbgameUser.userLevel;
}
- (PBGameUserBuilder*) setUserLevel:(SInt32) value {
  resultPbgameUser.hasUserLevel = YES;
  resultPbgameUser.userLevel = value;
  return self;
}
- (PBGameUserBuilder*) clearUserLevel {
  resultPbgameUser.hasUserLevel = NO;
  resultPbgameUser.userLevel = 0;
  return self;
}
- (BOOL) hasFacetimeId {
  return resultPbgameUser.hasFacetimeId;
}
- (NSString*) facetimeId {
  return resultPbgameUser.facetimeId;
}
- (PBGameUserBuilder*) setFacetimeId:(NSString*) value {
  resultPbgameUser.hasFacetimeId = YES;
  resultPbgameUser.facetimeId = value;
  return self;
}
- (PBGameUserBuilder*) clearFacetimeId {
  resultPbgameUser.hasFacetimeId = NO;
  resultPbgameUser.facetimeId = @"";
  return self;
}
- (BOOL) hasSeatId {
  return resultPbgameUser.hasSeatId;
}
- (SInt32) seatId {
  return resultPbgameUser.seatId;
}
- (PBGameUserBuilder*) setSeatId:(SInt32) value {
  resultPbgameUser.hasSeatId = YES;
  resultPbgameUser.seatId = value;
  return self;
}
- (PBGameUserBuilder*) clearSeatId {
  resultPbgameUser.hasSeatId = NO;
  resultPbgameUser.seatId = 0;
  return self;
}
- (BOOL) hasXiaojiNumber {
  return resultPbgameUser.hasXiaojiNumber;
}
- (NSString*) xiaojiNumber {
  return resultPbgameUser.xiaojiNumber;
}
- (PBGameUserBuilder*) setXiaojiNumber:(NSString*) value {
  resultPbgameUser.hasXiaojiNumber = YES;
  resultPbgameUser.xiaojiNumber = value;
  return self;
}
- (PBGameUserBuilder*) clearXiaojiNumber {
  resultPbgameUser.hasXiaojiNumber = NO;
  resultPbgameUser.xiaojiNumber = @"";
  return self;
}
- (NSMutableArray *)snsCredentials {
  return resultPbgameUser.snsCredentialsArray;
}
- (PBSNSUserCredential*)snsCredentialsAtIndex:(NSUInteger)index {
  return [resultPbgameUser snsCredentialsAtIndex:index];
}
- (PBGameUserBuilder *)addSnsCredentials:(PBSNSUserCredential*)value {
  if (resultPbgameUser.snsCredentialsArray == nil) {
    resultPbgameUser.snsCredentialsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.snsCredentialsArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setSnsCredentialsArray:(NSArray *)array {
  resultPbgameUser.snsCredentialsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearSnsCredentials {
  resultPbgameUser.snsCredentialsArray = nil;
  return self;
}
- (BOOL) hasIsPlaying {
  return resultPbgameUser.hasIsPlaying;
}
- (BOOL) isPlaying {
  return resultPbgameUser.isPlaying;
}
- (PBGameUserBuilder*) setIsPlaying:(BOOL) value {
  resultPbgameUser.hasIsPlaying = YES;
  resultPbgameUser.isPlaying = value;
  return self;
}
- (PBGameUserBuilder*) clearIsPlaying {
  resultPbgameUser.hasIsPlaying = NO;
  resultPbgameUser.isPlaying = YES;
  return self;
}
- (BOOL) hasIsTakenOver {
  return resultPbgameUser.hasIsTakenOver;
}
- (BOOL) isTakenOver {
  return resultPbgameUser.isTakenOver;
}
- (PBGameUserBuilder*) setIsTakenOver:(BOOL) value {
  resultPbgameUser.hasIsTakenOver = YES;
  resultPbgameUser.isTakenOver = value;
  return self;
}
- (PBGameUserBuilder*) clearIsTakenOver {
  resultPbgameUser.hasIsTakenOver = NO;
  resultPbgameUser.isTakenOver = NO;
  return self;
}
- (NSMutableArray *)attributes {
  return resultPbgameUser.attributesArray;
}
- (PBKeyValue*)attributesAtIndex:(NSUInteger)index {
  return [resultPbgameUser attributesAtIndex:index];
}
- (PBGameUserBuilder *)addAttributes:(PBKeyValue*)value {
  if (resultPbgameUser.attributesArray == nil) {
    resultPbgameUser.attributesArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.attributesArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setAttributesArray:(NSArray *)array {
  resultPbgameUser.attributesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearAttributes {
  resultPbgameUser.attributesArray = nil;
  return self;
}
- (BOOL) hasEmail {
  return resultPbgameUser.hasEmail;
}
- (NSString*) email {
  return resultPbgameUser.email;
}
- (PBGameUserBuilder*) setEmail:(NSString*) value {
  resultPbgameUser.hasEmail = YES;
  resultPbgameUser.email = value;
  return self;
}
- (PBGameUserBuilder*) clearEmail {
  resultPbgameUser.hasEmail = NO;
  resultPbgameUser.email = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultPbgameUser.hasPassword;
}
- (NSString*) password {
  return resultPbgameUser.password;
}
- (PBGameUserBuilder*) setPassword:(NSString*) value {
  resultPbgameUser.hasPassword = YES;
  resultPbgameUser.password = value;
  return self;
}
- (PBGameUserBuilder*) clearPassword {
  resultPbgameUser.hasPassword = NO;
  resultPbgameUser.password = @"";
  return self;
}
- (BOOL) hasBirthday {
  return resultPbgameUser.hasBirthday;
}
- (NSString*) birthday {
  return resultPbgameUser.birthday;
}
- (PBGameUserBuilder*) setBirthday:(NSString*) value {
  resultPbgameUser.hasBirthday = YES;
  resultPbgameUser.birthday = value;
  return self;
}
- (PBGameUserBuilder*) clearBirthday {
  resultPbgameUser.hasBirthday = NO;
  resultPbgameUser.birthday = @"";
  return self;
}
- (BOOL) hasZodiac {
  return resultPbgameUser.hasZodiac;
}
- (SInt32) zodiac {
  return resultPbgameUser.zodiac;
}
- (PBGameUserBuilder*) setZodiac:(SInt32) value {
  resultPbgameUser.hasZodiac = YES;
  resultPbgameUser.zodiac = value;
  return self;
}
- (PBGameUserBuilder*) clearZodiac {
  resultPbgameUser.hasZodiac = NO;
  resultPbgameUser.zodiac = 0;
  return self;
}
- (BOOL) hasGuessWordLanguage {
  return resultPbgameUser.hasGuessWordLanguage;
}
- (SInt32) guessWordLanguage {
  return resultPbgameUser.guessWordLanguage;
}
- (PBGameUserBuilder*) setGuessWordLanguage:(SInt32) value {
  resultPbgameUser.hasGuessWordLanguage = YES;
  resultPbgameUser.guessWordLanguage = value;
  return self;
}
- (PBGameUserBuilder*) clearGuessWordLanguage {
  resultPbgameUser.hasGuessWordLanguage = NO;
  resultPbgameUser.guessWordLanguage = 1;
  return self;
}
- (BOOL) hasBackgroundUrl {
  return resultPbgameUser.hasBackgroundUrl;
}
- (NSString*) backgroundUrl {
  return resultPbgameUser.backgroundUrl;
}
- (PBGameUserBuilder*) setBackgroundUrl:(NSString*) value {
  resultPbgameUser.hasBackgroundUrl = YES;
  resultPbgameUser.backgroundUrl = value;
  return self;
}
- (PBGameUserBuilder*) clearBackgroundUrl {
  resultPbgameUser.hasBackgroundUrl = NO;
  resultPbgameUser.backgroundUrl = @"";
  return self;
}
- (BOOL) hasDeviceToken {
  return resultPbgameUser.hasDeviceToken;
}
- (NSString*) deviceToken {
  return resultPbgameUser.deviceToken;
}
- (PBGameUserBuilder*) setDeviceToken:(NSString*) value {
  resultPbgameUser.hasDeviceToken = YES;
  resultPbgameUser.deviceToken = value;
  return self;
}
- (PBGameUserBuilder*) clearDeviceToken {
  resultPbgameUser.hasDeviceToken = NO;
  resultPbgameUser.deviceToken = @"";
  return self;
}
- (BOOL) hasCountryCode {
  return resultPbgameUser.hasCountryCode;
}
- (NSString*) countryCode {
  return resultPbgameUser.countryCode;
}
- (PBGameUserBuilder*) setCountryCode:(NSString*) value {
  resultPbgameUser.hasCountryCode = YES;
  resultPbgameUser.countryCode = value;
  return self;
}
- (PBGameUserBuilder*) clearCountryCode {
  resultPbgameUser.hasCountryCode = NO;
  resultPbgameUser.countryCode = @"";
  return self;
}
- (BOOL) hasLanguage {
  return resultPbgameUser.hasLanguage;
}
- (NSString*) language {
  return resultPbgameUser.language;
}
- (PBGameUserBuilder*) setLanguage:(NSString*) value {
  resultPbgameUser.hasLanguage = YES;
  resultPbgameUser.language = value;
  return self;
}
- (PBGameUserBuilder*) clearLanguage {
  resultPbgameUser.hasLanguage = NO;
  resultPbgameUser.language = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultPbgameUser.hasLevel;
}
- (SInt32) level {
  return resultPbgameUser.level;
}
- (PBGameUserBuilder*) setLevel:(SInt32) value {
  resultPbgameUser.hasLevel = YES;
  resultPbgameUser.level = value;
  return self;
}
- (PBGameUserBuilder*) clearLevel {
  resultPbgameUser.hasLevel = NO;
  resultPbgameUser.level = 0;
  return self;
}
- (BOOL) hasExperience {
  return resultPbgameUser.hasExperience;
}
- (SInt64) experience {
  return resultPbgameUser.experience;
}
- (PBGameUserBuilder*) setExperience:(SInt64) value {
  resultPbgameUser.hasExperience = YES;
  resultPbgameUser.experience = value;
  return self;
}
- (PBGameUserBuilder*) clearExperience {
  resultPbgameUser.hasExperience = NO;
  resultPbgameUser.experience = 0L;
  return self;
}
- (BOOL) hasCoinBalance {
  return resultPbgameUser.hasCoinBalance;
}
- (SInt32) coinBalance {
  return resultPbgameUser.coinBalance;
}
- (PBGameUserBuilder*) setCoinBalance:(SInt32) value {
  resultPbgameUser.hasCoinBalance = YES;
  resultPbgameUser.coinBalance = value;
  return self;
}
- (PBGameUserBuilder*) clearCoinBalance {
  resultPbgameUser.hasCoinBalance = NO;
  resultPbgameUser.coinBalance = 0;
  return self;
}
- (BOOL) hasDiamondBalance {
  return resultPbgameUser.hasDiamondBalance;
}
- (SInt32) diamondBalance {
  return resultPbgameUser.diamondBalance;
}
- (PBGameUserBuilder*) setDiamondBalance:(SInt32) value {
  resultPbgameUser.hasDiamondBalance = YES;
  resultPbgameUser.diamondBalance = value;
  return self;
}
- (PBGameUserBuilder*) clearDiamondBalance {
  resultPbgameUser.hasDiamondBalance = NO;
  resultPbgameUser.diamondBalance = 0;
  return self;
}
- (BOOL) hasIngotBalance {
  return resultPbgameUser.hasIngotBalance;
}
- (SInt32) ingotBalance {
  return resultPbgameUser.ingotBalance;
}
- (PBGameUserBuilder*) setIngotBalance:(SInt32) value {
  resultPbgameUser.hasIngotBalance = YES;
  resultPbgameUser.ingotBalance = value;
  return self;
}
- (PBGameUserBuilder*) clearIngotBalance {
  resultPbgameUser.hasIngotBalance = NO;
  resultPbgameUser.ingotBalance = 0;
  return self;
}
- (NSMutableArray *)items {
  return resultPbgameUser.itemsArray;
}
- (PBUserItem*)itemsAtIndex:(NSUInteger)index {
  return [resultPbgameUser itemsAtIndex:index];
}
- (PBGameUserBuilder *)addItems:(PBUserItem*)value {
  if (resultPbgameUser.itemsArray == nil) {
    resultPbgameUser.itemsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.itemsArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setItemsArray:(NSArray *)array {
  resultPbgameUser.itemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearItems {
  resultPbgameUser.itemsArray = nil;
  return self;
}
- (BOOL) hasDeviceModel {
  return resultPbgameUser.hasDeviceModel;
}
- (NSString*) deviceModel {
  return resultPbgameUser.deviceModel;
}
- (PBGameUserBuilder*) setDeviceModel:(NSString*) value {
  resultPbgameUser.hasDeviceModel = YES;
  resultPbgameUser.deviceModel = value;
  return self;
}
- (PBGameUserBuilder*) clearDeviceModel {
  resultPbgameUser.hasDeviceModel = NO;
  resultPbgameUser.deviceModel = @"";
  return self;
}
- (BOOL) hasDeviceOs {
  return resultPbgameUser.hasDeviceOs;
}
- (NSString*) deviceOs {
  return resultPbgameUser.deviceOs;
}
- (PBGameUserBuilder*) setDeviceOs:(NSString*) value {
  resultPbgameUser.hasDeviceOs = YES;
  resultPbgameUser.deviceOs = value;
  return self;
}
- (PBGameUserBuilder*) clearDeviceOs {
  resultPbgameUser.hasDeviceOs = NO;
  resultPbgameUser.deviceOs = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultPbgameUser.hasDeviceId;
}
- (NSString*) deviceId {
  return resultPbgameUser.deviceId;
}
- (PBGameUserBuilder*) setDeviceId:(NSString*) value {
  resultPbgameUser.hasDeviceId = YES;
  resultPbgameUser.deviceId = value;
  return self;
}
- (PBGameUserBuilder*) clearDeviceId {
  resultPbgameUser.hasDeviceId = NO;
  resultPbgameUser.deviceId = @"";
  return self;
}
- (BOOL) hasDeviceType {
  return resultPbgameUser.hasDeviceType;
}
- (NSString*) deviceType {
  return resultPbgameUser.deviceType;
}
- (PBGameUserBuilder*) setDeviceType:(NSString*) value {
  resultPbgameUser.hasDeviceType = YES;
  resultPbgameUser.deviceType = value;
  return self;
}
- (PBGameUserBuilder*) clearDeviceType {
  resultPbgameUser.hasDeviceType = NO;
  resultPbgameUser.deviceType = @"";
  return self;
}
- (NSMutableArray *)blockDeviceIds {
  return resultPbgameUser.blockDeviceIdsArray;
}
- (NSString*)blockDeviceIdsAtIndex:(NSUInteger)index {
  return [resultPbgameUser blockDeviceIdsAtIndex:index];
}
- (PBGameUserBuilder *)addBlockDeviceIds:(NSString*)value {
  if (resultPbgameUser.blockDeviceIdsArray == nil) {
    resultPbgameUser.blockDeviceIdsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.blockDeviceIdsArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setBlockDeviceIdsArray:(NSArray *)array {
  resultPbgameUser.blockDeviceIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearBlockDeviceIds {
  resultPbgameUser.blockDeviceIdsArray = nil;
  return self;
}
- (BOOL) hasBloodGroup {
  return resultPbgameUser.hasBloodGroup;
}
- (NSString*) bloodGroup {
  return resultPbgameUser.bloodGroup;
}
- (PBGameUserBuilder*) setBloodGroup:(NSString*) value {
  resultPbgameUser.hasBloodGroup = YES;
  resultPbgameUser.bloodGroup = value;
  return self;
}
- (PBGameUserBuilder*) clearBloodGroup {
  resultPbgameUser.hasBloodGroup = NO;
  resultPbgameUser.bloodGroup = @"";
  return self;
}
- (BOOL) hasFanCount {
  return resultPbgameUser.hasFanCount;
}
- (SInt32) fanCount {
  return resultPbgameUser.fanCount;
}
- (PBGameUserBuilder*) setFanCount:(SInt32) value {
  resultPbgameUser.hasFanCount = YES;
  resultPbgameUser.fanCount = value;
  return self;
}
- (PBGameUserBuilder*) clearFanCount {
  resultPbgameUser.hasFanCount = NO;
  resultPbgameUser.fanCount = 0;
  return self;
}
- (BOOL) hasFollowCount {
  return resultPbgameUser.hasFollowCount;
}
- (SInt32) followCount {
  return resultPbgameUser.followCount;
}
- (PBGameUserBuilder*) setFollowCount:(SInt32) value {
  resultPbgameUser.hasFollowCount = YES;
  resultPbgameUser.followCount = value;
  return self;
}
- (PBGameUserBuilder*) clearFollowCount {
  resultPbgameUser.hasFollowCount = NO;
  resultPbgameUser.followCount = 0;
  return self;
}
- (BOOL) hasLongitude {
  return resultPbgameUser.hasLongitude;
}
- (Float32) longitude {
  return resultPbgameUser.longitude;
}
- (PBGameUserBuilder*) setLongitude:(Float32) value {
  resultPbgameUser.hasLongitude = YES;
  resultPbgameUser.longitude = value;
  return self;
}
- (PBGameUserBuilder*) clearLongitude {
  resultPbgameUser.hasLongitude = NO;
  resultPbgameUser.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultPbgameUser.hasLatitude;
}
- (Float32) latitude {
  return resultPbgameUser.latitude;
}
- (PBGameUserBuilder*) setLatitude:(Float32) value {
  resultPbgameUser.hasLatitude = YES;
  resultPbgameUser.latitude = value;
  return self;
}
- (PBGameUserBuilder*) clearLatitude {
  resultPbgameUser.hasLatitude = NO;
  resultPbgameUser.latitude = 0;
  return self;
}
- (BOOL) hasIsJailBroken {
  return resultPbgameUser.hasIsJailBroken;
}
- (BOOL) isJailBroken {
  return resultPbgameUser.isJailBroken;
}
- (PBGameUserBuilder*) setIsJailBroken:(BOOL) value {
  resultPbgameUser.hasIsJailBroken = YES;
  resultPbgameUser.isJailBroken = value;
  return self;
}
- (PBGameUserBuilder*) clearIsJailBroken {
  resultPbgameUser.hasIsJailBroken = NO;
  resultPbgameUser.isJailBroken = NO;
  return self;
}
- (BOOL) hasOpenInfoType {
  return resultPbgameUser.hasOpenInfoType;
}
- (PBOpenInfoType) openInfoType {
  return resultPbgameUser.openInfoType;
}
- (PBGameUserBuilder*) setOpenInfoType:(PBOpenInfoType) value {
  resultPbgameUser.hasOpenInfoType = YES;
  resultPbgameUser.openInfoType = value;
  return self;
}
- (PBGameUserBuilder*) clearOpenInfoType {
  resultPbgameUser.hasOpenInfoType = NO;
  resultPbgameUser.openInfoType = PBOpenInfoTypeOpenToFriend;
  return self;
}
- (BOOL) hasOpusCoverflowType {
  return resultPbgameUser.hasOpusCoverflowType;
}
- (SInt32) opusCoverflowType {
  return resultPbgameUser.opusCoverflowType;
}
- (PBGameUserBuilder*) setOpusCoverflowType:(SInt32) value {
  resultPbgameUser.hasOpusCoverflowType = YES;
  resultPbgameUser.opusCoverflowType = value;
  return self;
}
- (PBGameUserBuilder*) clearOpusCoverflowType {
  resultPbgameUser.hasOpusCoverflowType = NO;
  resultPbgameUser.opusCoverflowType = 0;
  return self;
}
- (BOOL) hasSignature {
  return resultPbgameUser.hasSignature;
}
- (NSString*) signature {
  return resultPbgameUser.signature;
}
- (PBGameUserBuilder*) setSignature:(NSString*) value {
  resultPbgameUser.hasSignature = YES;
  resultPbgameUser.signature = value;
  return self;
}
- (PBGameUserBuilder*) clearSignature {
  resultPbgameUser.hasSignature = NO;
  resultPbgameUser.signature = @"";
  return self;
}
- (BOOL) hasFeatureOpus {
  return resultPbgameUser.hasFeatureOpus;
}
- (SInt32) featureOpus {
  return resultPbgameUser.featureOpus;
}
- (PBGameUserBuilder*) setFeatureOpus:(SInt32) value {
  resultPbgameUser.hasFeatureOpus = YES;
  resultPbgameUser.featureOpus = value;
  return self;
}
- (PBGameUserBuilder*) clearFeatureOpus {
  resultPbgameUser.hasFeatureOpus = NO;
  resultPbgameUser.featureOpus = 0;
  return self;
}
- (BOOL) hasFriendMemo {
  return resultPbgameUser.hasFriendMemo;
}
- (NSString*) friendMemo {
  return resultPbgameUser.friendMemo;
}
- (PBGameUserBuilder*) setFriendMemo:(NSString*) value {
  resultPbgameUser.hasFriendMemo = YES;
  resultPbgameUser.friendMemo = value;
  return self;
}
- (PBGameUserBuilder*) clearFriendMemo {
  resultPbgameUser.hasFriendMemo = NO;
  resultPbgameUser.friendMemo = @"";
  return self;
}
- (BOOL) hasEmailVerifyStatus {
  return resultPbgameUser.hasEmailVerifyStatus;
}
- (SInt32) emailVerifyStatus {
  return resultPbgameUser.emailVerifyStatus;
}
- (PBGameUserBuilder*) setEmailVerifyStatus:(SInt32) value {
  resultPbgameUser.hasEmailVerifyStatus = YES;
  resultPbgameUser.emailVerifyStatus = value;
  return self;
}
- (PBGameUserBuilder*) clearEmailVerifyStatus {
  resultPbgameUser.hasEmailVerifyStatus = NO;
  resultPbgameUser.emailVerifyStatus = 0;
  return self;
}
- (BOOL) hasCanShakeNumber {
  return resultPbgameUser.hasCanShakeNumber;
}
- (BOOL) canShakeNumber {
  return resultPbgameUser.canShakeNumber;
}
- (PBGameUserBuilder*) setCanShakeNumber:(BOOL) value {
  resultPbgameUser.hasCanShakeNumber = YES;
  resultPbgameUser.canShakeNumber = value;
  return self;
}
- (PBGameUserBuilder*) clearCanShakeNumber {
  resultPbgameUser.hasCanShakeNumber = NO;
  resultPbgameUser.canShakeNumber = NO;
  return self;
}
- (BOOL) hasShakeNumberTimes {
  return resultPbgameUser.hasShakeNumberTimes;
}
- (SInt32) shakeNumberTimes {
  return resultPbgameUser.shakeNumberTimes;
}
- (PBGameUserBuilder*) setShakeNumberTimes:(SInt32) value {
  resultPbgameUser.hasShakeNumberTimes = YES;
  resultPbgameUser.shakeNumberTimes = value;
  return self;
}
- (PBGameUserBuilder*) clearShakeNumberTimes {
  resultPbgameUser.hasShakeNumberTimes = NO;
  resultPbgameUser.shakeNumberTimes = 0;
  return self;
}
- (BOOL) hasTakeCoins {
  return resultPbgameUser.hasTakeCoins;
}
- (SInt32) takeCoins {
  return resultPbgameUser.takeCoins;
}
- (PBGameUserBuilder*) setTakeCoins:(SInt32) value {
  resultPbgameUser.hasTakeCoins = YES;
  resultPbgameUser.takeCoins = value;
  return self;
}
- (PBGameUserBuilder*) clearTakeCoins {
  resultPbgameUser.hasTakeCoins = NO;
  resultPbgameUser.takeCoins = 0;
  return self;
}
- (NSMutableArray *)awardApps {
  return resultPbgameUser.awardAppsArray;
}
- (NSString*)awardAppsAtIndex:(NSUInteger)index {
  return [resultPbgameUser awardAppsAtIndex:index];
}
- (PBGameUserBuilder *)addAwardApps:(NSString*)value {
  if (resultPbgameUser.awardAppsArray == nil) {
    resultPbgameUser.awardAppsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.awardAppsArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setAwardAppsArray:(NSArray *)array {
  resultPbgameUser.awardAppsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearAwardApps {
  resultPbgameUser.awardAppsArray = nil;
  return self;
}
- (BOOL) hasVip {
  return resultPbgameUser.hasVip;
}
- (SInt32) vip {
  return resultPbgameUser.vip;
}
- (PBGameUserBuilder*) setVip:(SInt32) value {
  resultPbgameUser.hasVip = YES;
  resultPbgameUser.vip = value;
  return self;
}
- (PBGameUserBuilder*) clearVip {
  resultPbgameUser.hasVip = NO;
  resultPbgameUser.vip = 0;
  return self;
}
- (BOOL) hasVipExpireDate {
  return resultPbgameUser.hasVipExpireDate;
}
- (SInt32) vipExpireDate {
  return resultPbgameUser.vipExpireDate;
}
- (PBGameUserBuilder*) setVipExpireDate:(SInt32) value {
  resultPbgameUser.hasVipExpireDate = YES;
  resultPbgameUser.vipExpireDate = value;
  return self;
}
- (PBGameUserBuilder*) clearVipExpireDate {
  resultPbgameUser.hasVipExpireDate = NO;
  resultPbgameUser.vipExpireDate = 0;
  return self;
}
- (BOOL) hasVipLastPayDate {
  return resultPbgameUser.hasVipLastPayDate;
}
- (SInt32) vipLastPayDate {
  return resultPbgameUser.vipLastPayDate;
}
- (PBGameUserBuilder*) setVipLastPayDate:(SInt32) value {
  resultPbgameUser.hasVipLastPayDate = YES;
  resultPbgameUser.vipLastPayDate = value;
  return self;
}
- (PBGameUserBuilder*) clearVipLastPayDate {
  resultPbgameUser.hasVipLastPayDate = NO;
  resultPbgameUser.vipLastPayDate = 0;
  return self;
}
- (BOOL) hasGroupInfo {
  return resultPbgameUser.hasGroupInfo;
}
- (PBSimpleGroup*) groupInfo {
  return resultPbgameUser.groupInfo;
}
- (PBGameUserBuilder*) setGroupInfo:(PBSimpleGroup*) value {
  resultPbgameUser.hasGroupInfo = YES;
  resultPbgameUser.groupInfo = value;
  return self;
}
- (PBGameUserBuilder*) setGroupInfoBuilder:(PBSimpleGroupBuilder*) builderForValue {
  return [self setGroupInfo:[builderForValue build]];
}
- (PBGameUserBuilder*) mergeGroupInfo:(PBSimpleGroup*) value {
  if (resultPbgameUser.hasGroupInfo &&
      resultPbgameUser.groupInfo != [PBSimpleGroup defaultInstance]) {
    resultPbgameUser.groupInfo =
      [[[PBSimpleGroup builderWithPrototype:resultPbgameUser.groupInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbgameUser.groupInfo = value;
  }
  resultPbgameUser.hasGroupInfo = YES;
  return self;
}
- (PBGameUserBuilder*) clearGroupInfo {
  resultPbgameUser.hasGroupInfo = NO;
  resultPbgameUser.groupInfo = [PBSimpleGroup defaultInstance];
  return self;
}
- (NSMutableArray *)offGroupIds {
  return resultPbgameUser.offGroupIdsArray;
}
- (NSString*)offGroupIdsAtIndex:(NSUInteger)index {
  return [resultPbgameUser offGroupIdsAtIndex:index];
}
- (PBGameUserBuilder *)addOffGroupIds:(NSString*)value {
  if (resultPbgameUser.offGroupIdsArray == nil) {
    resultPbgameUser.offGroupIdsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.offGroupIdsArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setOffGroupIdsArray:(NSArray *)array {
  resultPbgameUser.offGroupIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearOffGroupIds {
  resultPbgameUser.offGroupIdsArray = nil;
  return self;
}
- (NSMutableArray *)permissions {
  return resultPbgameUser.permissionsArray;
}
- (NSString*)permissionsAtIndex:(NSUInteger)index {
  return [resultPbgameUser permissionsAtIndex:index];
}
- (PBGameUserBuilder *)addPermissions:(NSString*)value {
  if (resultPbgameUser.permissionsArray == nil) {
    resultPbgameUser.permissionsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameUser.permissionsArray addObject:value];
  return self;
}
- (PBGameUserBuilder *)setPermissionsArray:(NSArray *)array {
  resultPbgameUser.permissionsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBGameUserBuilder *)clearPermissions {
  resultPbgameUser.permissionsArray = nil;
  return self;
}
- (BOOL) hasSingRecordLimit {
  return resultPbgameUser.hasSingRecordLimit;
}
- (SInt32) singRecordLimit {
  return resultPbgameUser.singRecordLimit;
}
- (PBGameUserBuilder*) setSingRecordLimit:(SInt32) value {
  resultPbgameUser.hasSingRecordLimit = YES;
  resultPbgameUser.singRecordLimit = value;
  return self;
}
- (PBGameUserBuilder*) clearSingRecordLimit {
  resultPbgameUser.hasSingRecordLimit = NO;
  resultPbgameUser.singRecordLimit = 30;
  return self;
}
@end

@interface PBSimpleGroup ()
@property (strong) NSString* groupId;
@property (strong) NSString* groupName;
@property (strong) NSString* groupMedal;
@end

@implementation PBSimpleGroup

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) _value_ {
  hasGroupName_ = !!_value_;
}
@synthesize groupName;
- (BOOL) hasGroupMedal {
  return !!hasGroupMedal_;
}
- (void) setHasGroupMedal:(BOOL) _value_ {
  hasGroupMedal_ = !!_value_;
}
@synthesize groupMedal;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.groupName = @"";
    self.groupMedal = @"";
  }
  return self;
}
static PBSimpleGroup* defaultPBSimpleGroupInstance = nil;
+ (void) initialize {
  if (self == [PBSimpleGroup class]) {
    defaultPBSimpleGroupInstance = [[PBSimpleGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSimpleGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSimpleGroupInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasGroupName) {
    return NO;
  }
  if (!self.hasGroupMedal) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasGroupName) {
    [output writeString:2 value:self.groupName];
  }
  if (self.hasGroupMedal) {
    [output writeString:3 value:self.groupMedal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeStringSize(1, self.groupId);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(2, self.groupName);
  }
  if (self.hasGroupMedal) {
    size_ += computeStringSize(3, self.groupMedal);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSimpleGroup*) parseFromData:(NSData*) data {
  return (PBSimpleGroup*)[[[PBSimpleGroup builder] mergeFromData:data] build];
}
+ (PBSimpleGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSimpleGroup*)[[[PBSimpleGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSimpleGroup*) parseFromInputStream:(NSInputStream*) input {
  return (PBSimpleGroup*)[[[PBSimpleGroup builder] mergeFromInputStream:input] build];
}
+ (PBSimpleGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSimpleGroup*)[[[PBSimpleGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSimpleGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSimpleGroup*)[[[PBSimpleGroup builder] mergeFromCodedInputStream:input] build];
}
+ (PBSimpleGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSimpleGroup*)[[[PBSimpleGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSimpleGroupBuilder*) builder {
  return [[PBSimpleGroupBuilder alloc] init];
}
+ (PBSimpleGroupBuilder*) builderWithPrototype:(PBSimpleGroup*) prototype {
  return [[PBSimpleGroup builder] mergeFrom:prototype];
}
- (PBSimpleGroupBuilder*) builder {
  return [PBSimpleGroup builder];
}
- (PBSimpleGroupBuilder*) toBuilder {
  return [PBSimpleGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasGroupMedal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupMedal", self.groupMedal];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSimpleGroup class]]) {
    return NO;
  }
  PBSimpleGroup *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasGroupMedal == otherMessage.hasGroupMedal &&
      (!self.hasGroupMedal || [self.groupMedal isEqual:otherMessage.groupMedal]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasGroupMedal) {
    hashCode = hashCode * 31 + [self.groupMedal hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSimpleGroupBuilder()
@property (strong) PBSimpleGroup* resultPbsimpleGroup;
@end

@implementation PBSimpleGroupBuilder
@synthesize resultPbsimpleGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsimpleGroup = [[PBSimpleGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsimpleGroup;
}
- (PBSimpleGroupBuilder*) clear {
  self.resultPbsimpleGroup = [[PBSimpleGroup alloc] init];
  return self;
}
- (PBSimpleGroupBuilder*) clone {
  return [PBSimpleGroup builderWithPrototype:resultPbsimpleGroup];
}
- (PBSimpleGroup*) defaultInstance {
  return [PBSimpleGroup defaultInstance];
}
- (PBSimpleGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSimpleGroup*) buildPartial {
  PBSimpleGroup* returnMe = resultPbsimpleGroup;
  self.resultPbsimpleGroup = nil;
  return returnMe;
}
- (PBSimpleGroupBuilder*) mergeFrom:(PBSimpleGroup*) other {
  if (other == [PBSimpleGroup defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasGroupMedal) {
    [self setGroupMedal:other.groupMedal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSimpleGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSimpleGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 18: {
        [self setGroupName:[input readString]];
        break;
      }
      case 26: {
        [self setGroupMedal:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultPbsimpleGroup.hasGroupId;
}
- (NSString*) groupId {
  return resultPbsimpleGroup.groupId;
}
- (PBSimpleGroupBuilder*) setGroupId:(NSString*) value {
  resultPbsimpleGroup.hasGroupId = YES;
  resultPbsimpleGroup.groupId = value;
  return self;
}
- (PBSimpleGroupBuilder*) clearGroupId {
  resultPbsimpleGroup.hasGroupId = NO;
  resultPbsimpleGroup.groupId = @"";
  return self;
}
- (BOOL) hasGroupName {
  return resultPbsimpleGroup.hasGroupName;
}
- (NSString*) groupName {
  return resultPbsimpleGroup.groupName;
}
- (PBSimpleGroupBuilder*) setGroupName:(NSString*) value {
  resultPbsimpleGroup.hasGroupName = YES;
  resultPbsimpleGroup.groupName = value;
  return self;
}
- (PBSimpleGroupBuilder*) clearGroupName {
  resultPbsimpleGroup.hasGroupName = NO;
  resultPbsimpleGroup.groupName = @"";
  return self;
}
- (BOOL) hasGroupMedal {
  return resultPbsimpleGroup.hasGroupMedal;
}
- (NSString*) groupMedal {
  return resultPbsimpleGroup.groupMedal;
}
- (PBSimpleGroupBuilder*) setGroupMedal:(NSString*) value {
  resultPbsimpleGroup.hasGroupMedal = YES;
  resultPbsimpleGroup.groupMedal = value;
  return self;
}
- (PBSimpleGroupBuilder*) clearGroupMedal {
  resultPbsimpleGroup.hasGroupMedal = NO;
  resultPbsimpleGroup.groupMedal = @"";
  return self;
}
@end

@interface PBGameSession ()
@property (strong) NSString* gameId;
@property SInt64 sessionId;
@property (strong) NSString* name;
@property (strong) NSString* createBy;
@property SInt32 createTime;
@property (strong) NSString* host;
@property SInt32 status;
@property (strong) NSString* currentPlayUserId;
@property (strong) NSString* nextPlayUserId;
@property (strong) NSString* password;
@property SInt32 ruleType;
@property (strong) NSMutableArray * usersArray;
@end

@implementation PBGameSession

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasCreateBy {
  return !!hasCreateBy_;
}
- (void) setHasCreateBy:(BOOL) _value_ {
  hasCreateBy_ = !!_value_;
}
@synthesize createBy;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) _value_ {
  hasCreateTime_ = !!_value_;
}
@synthesize createTime;
- (BOOL) hasHost {
  return !!hasHost_;
}
- (void) setHasHost:(BOOL) _value_ {
  hasHost_ = !!_value_;
}
@synthesize host;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) _value_ {
  hasCurrentPlayUserId_ = !!_value_;
}
@synthesize currentPlayUserId;
- (BOOL) hasNextPlayUserId {
  return !!hasNextPlayUserId_;
}
- (void) setHasNextPlayUserId:(BOOL) _value_ {
  hasNextPlayUserId_ = !!_value_;
}
@synthesize nextPlayUserId;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasRuleType {
  return !!hasRuleType_;
}
- (void) setHasRuleType:(BOOL) _value_ {
  hasRuleType_ = !!_value_;
}
@synthesize ruleType;
@synthesize usersArray;
@dynamic users;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.sessionId = 0L;
    self.name = @"";
    self.createBy = @"";
    self.createTime = 0;
    self.host = @"";
    self.status = 0;
    self.currentPlayUserId = @"";
    self.nextPlayUserId = @"";
    self.password = @"";
    self.ruleType = 0;
  }
  return self;
}
static PBGameSession* defaultPBGameSessionInstance = nil;
+ (void) initialize {
  if (self == [PBGameSession class]) {
    defaultPBGameSessionInstance = [[PBGameSession alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGameSessionInstance;
}
- (NSArray *)users {
  return usersArray;
}
- (PBGameUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeString:1 value:self.gameId];
  }
  if (self.hasSessionId) {
    [output writeInt64:2 value:self.sessionId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCreateBy) {
    [output writeString:4 value:self.createBy];
  }
  if (self.hasCreateTime) {
    [output writeInt32:5 value:self.createTime];
  }
  if (self.hasHost) {
    [output writeString:6 value:self.host];
  }
  if (self.hasStatus) {
    [output writeInt32:7 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:8 value:self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output writeString:9 value:self.nextPlayUserId];
  }
  if (self.hasPassword) {
    [output writeString:10 value:self.password];
  }
  if (self.hasRuleType) {
    [output writeInt32:11 value:self.ruleType];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:50 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeStringSize(1, self.gameId);
  }
  if (self.hasSessionId) {
    size_ += computeInt64Size(2, self.sessionId);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasCreateBy) {
    size_ += computeStringSize(4, self.createBy);
  }
  if (self.hasCreateTime) {
    size_ += computeInt32Size(5, self.createTime);
  }
  if (self.hasHost) {
    size_ += computeStringSize(6, self.host);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(7, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size_ += computeStringSize(8, self.currentPlayUserId);
  }
  if (self.hasNextPlayUserId) {
    size_ += computeStringSize(9, self.nextPlayUserId);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(10, self.password);
  }
  if (self.hasRuleType) {
    size_ += computeInt32Size(11, self.ruleType);
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(50, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGameSession*) parseFromData:(NSData*) data {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data] build];
}
+ (PBGameSession*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input] build];
}
+ (PBGameSession*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSession*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSession*)[[[PBGameSession builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionBuilder*) builder {
  return [[PBGameSessionBuilder alloc] init];
}
+ (PBGameSessionBuilder*) builderWithPrototype:(PBGameSession*) prototype {
  return [[PBGameSession builder] mergeFrom:prototype];
}
- (PBGameSessionBuilder*) builder {
  return [PBGameSession builder];
}
- (PBGameSessionBuilder*) toBuilder {
  return [PBGameSession builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", self.gameId];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCreateBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createBy", self.createBy];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  if (self.hasHost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"host", self.host];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasCurrentPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPlayUserId", self.currentPlayUserId];
  }
  if (self.hasNextPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextPlayUserId", self.nextPlayUserId];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasRuleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ruleType", [NSNumber numberWithInteger:self.ruleType]];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGameSession class]]) {
    return NO;
  }
  PBGameSession *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || [self.gameId isEqual:otherMessage.gameId]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCreateBy == otherMessage.hasCreateBy &&
      (!self.hasCreateBy || [self.createBy isEqual:otherMessage.createBy]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasHost == otherMessage.hasHost &&
      (!self.hasHost || [self.host isEqual:otherMessage.host]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasCurrentPlayUserId == otherMessage.hasCurrentPlayUserId &&
      (!self.hasCurrentPlayUserId || [self.currentPlayUserId isEqual:otherMessage.currentPlayUserId]) &&
      self.hasNextPlayUserId == otherMessage.hasNextPlayUserId &&
      (!self.hasNextPlayUserId || [self.nextPlayUserId isEqual:otherMessage.nextPlayUserId]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasRuleType == otherMessage.hasRuleType &&
      (!self.hasRuleType || self.ruleType == otherMessage.ruleType) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [self.gameId hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCreateBy) {
    hashCode = hashCode * 31 + [self.createBy hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  if (self.hasHost) {
    hashCode = hashCode * 31 + [self.host hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasCurrentPlayUserId) {
    hashCode = hashCode * 31 + [self.currentPlayUserId hash];
  }
  if (self.hasNextPlayUserId) {
    hashCode = hashCode * 31 + [self.nextPlayUserId hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasRuleType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ruleType] hash];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGameSessionBuilder()
@property (strong) PBGameSession* resultPbgameSession;
@end

@implementation PBGameSessionBuilder
@synthesize resultPbgameSession;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgameSession = [[PBGameSession alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgameSession;
}
- (PBGameSessionBuilder*) clear {
  self.resultPbgameSession = [[PBGameSession alloc] init];
  return self;
}
- (PBGameSessionBuilder*) clone {
  return [PBGameSession builderWithPrototype:resultPbgameSession];
}
- (PBGameSession*) defaultInstance {
  return [PBGameSession defaultInstance];
}
- (PBGameSession*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSession*) buildPartial {
  PBGameSession* returnMe = resultPbgameSession;
  self.resultPbgameSession = nil;
  return returnMe;
}
- (PBGameSessionBuilder*) mergeFrom:(PBGameSession*) other {
  if (other == [PBGameSession defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateBy) {
    [self setCreateBy:other.createBy];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasHost) {
    [self setHost:other.host];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.hasNextPlayUserId) {
    [self setNextPlayUserId:other.nextPlayUserId];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasRuleType) {
    [self setRuleType:other.ruleType];
  }
  if (other.usersArray.count > 0) {
    if (resultPbgameSession.usersArray == nil) {
      resultPbgameSession.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultPbgameSession.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSessionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSessionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGameId:[input readString]];
        break;
      }
      case 16: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setCreateBy:[input readString]];
        break;
      }
      case 40: {
        [self setCreateTime:[input readInt32]];
        break;
      }
      case 50: {
        [self setHost:[input readString]];
        break;
      }
      case 56: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 66: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 74: {
        [self setNextPlayUserId:[input readString]];
        break;
      }
      case 82: {
        [self setPassword:[input readString]];
        break;
      }
      case 88: {
        [self setRuleType:[input readInt32]];
        break;
      }
      case 402: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultPbgameSession.hasGameId;
}
- (NSString*) gameId {
  return resultPbgameSession.gameId;
}
- (PBGameSessionBuilder*) setGameId:(NSString*) value {
  resultPbgameSession.hasGameId = YES;
  resultPbgameSession.gameId = value;
  return self;
}
- (PBGameSessionBuilder*) clearGameId {
  resultPbgameSession.hasGameId = NO;
  resultPbgameSession.gameId = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultPbgameSession.hasSessionId;
}
- (SInt64) sessionId {
  return resultPbgameSession.sessionId;
}
- (PBGameSessionBuilder*) setSessionId:(SInt64) value {
  resultPbgameSession.hasSessionId = YES;
  resultPbgameSession.sessionId = value;
  return self;
}
- (PBGameSessionBuilder*) clearSessionId {
  resultPbgameSession.hasSessionId = NO;
  resultPbgameSession.sessionId = 0L;
  return self;
}
- (BOOL) hasName {
  return resultPbgameSession.hasName;
}
- (NSString*) name {
  return resultPbgameSession.name;
}
- (PBGameSessionBuilder*) setName:(NSString*) value {
  resultPbgameSession.hasName = YES;
  resultPbgameSession.name = value;
  return self;
}
- (PBGameSessionBuilder*) clearName {
  resultPbgameSession.hasName = NO;
  resultPbgameSession.name = @"";
  return self;
}
- (BOOL) hasCreateBy {
  return resultPbgameSession.hasCreateBy;
}
- (NSString*) createBy {
  return resultPbgameSession.createBy;
}
- (PBGameSessionBuilder*) setCreateBy:(NSString*) value {
  resultPbgameSession.hasCreateBy = YES;
  resultPbgameSession.createBy = value;
  return self;
}
- (PBGameSessionBuilder*) clearCreateBy {
  resultPbgameSession.hasCreateBy = NO;
  resultPbgameSession.createBy = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return resultPbgameSession.hasCreateTime;
}
- (SInt32) createTime {
  return resultPbgameSession.createTime;
}
- (PBGameSessionBuilder*) setCreateTime:(SInt32) value {
  resultPbgameSession.hasCreateTime = YES;
  resultPbgameSession.createTime = value;
  return self;
}
- (PBGameSessionBuilder*) clearCreateTime {
  resultPbgameSession.hasCreateTime = NO;
  resultPbgameSession.createTime = 0;
  return self;
}
- (BOOL) hasHost {
  return resultPbgameSession.hasHost;
}
- (NSString*) host {
  return resultPbgameSession.host;
}
- (PBGameSessionBuilder*) setHost:(NSString*) value {
  resultPbgameSession.hasHost = YES;
  resultPbgameSession.host = value;
  return self;
}
- (PBGameSessionBuilder*) clearHost {
  resultPbgameSession.hasHost = NO;
  resultPbgameSession.host = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultPbgameSession.hasStatus;
}
- (SInt32) status {
  return resultPbgameSession.status;
}
- (PBGameSessionBuilder*) setStatus:(SInt32) value {
  resultPbgameSession.hasStatus = YES;
  resultPbgameSession.status = value;
  return self;
}
- (PBGameSessionBuilder*) clearStatus {
  resultPbgameSession.hasStatus = NO;
  resultPbgameSession.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return resultPbgameSession.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return resultPbgameSession.currentPlayUserId;
}
- (PBGameSessionBuilder*) setCurrentPlayUserId:(NSString*) value {
  resultPbgameSession.hasCurrentPlayUserId = YES;
  resultPbgameSession.currentPlayUserId = value;
  return self;
}
- (PBGameSessionBuilder*) clearCurrentPlayUserId {
  resultPbgameSession.hasCurrentPlayUserId = NO;
  resultPbgameSession.currentPlayUserId = @"";
  return self;
}
- (BOOL) hasNextPlayUserId {
  return resultPbgameSession.hasNextPlayUserId;
}
- (NSString*) nextPlayUserId {
  return resultPbgameSession.nextPlayUserId;
}
- (PBGameSessionBuilder*) setNextPlayUserId:(NSString*) value {
  resultPbgameSession.hasNextPlayUserId = YES;
  resultPbgameSession.nextPlayUserId = value;
  return self;
}
- (PBGameSessionBuilder*) clearNextPlayUserId {
  resultPbgameSession.hasNextPlayUserId = NO;
  resultPbgameSession.nextPlayUserId = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultPbgameSession.hasPassword;
}
- (NSString*) password {
  return resultPbgameSession.password;
}
- (PBGameSessionBuilder*) setPassword:(NSString*) value {
  resultPbgameSession.hasPassword = YES;
  resultPbgameSession.password = value;
  return self;
}
- (PBGameSessionBuilder*) clearPassword {
  resultPbgameSession.hasPassword = NO;
  resultPbgameSession.password = @"";
  return self;
}
- (BOOL) hasRuleType {
  return resultPbgameSession.hasRuleType;
}
- (SInt32) ruleType {
  return resultPbgameSession.ruleType;
}
- (PBGameSessionBuilder*) setRuleType:(SInt32) value {
  resultPbgameSession.hasRuleType = YES;
  resultPbgameSession.ruleType = value;
  return self;
}
- (PBGameSessionBuilder*) clearRuleType {
  resultPbgameSession.hasRuleType = NO;
  resultPbgameSession.ruleType = 0;
  return self;
}
- (NSMutableArray *)users {
  return resultPbgameSession.usersArray;
}
- (PBGameUser*)usersAtIndex:(NSUInteger)index {
  return [resultPbgameSession usersAtIndex:index];
}
- (PBGameSessionBuilder *)addUsers:(PBGameUser*)value {
  if (resultPbgameSession.usersArray == nil) {
    resultPbgameSession.usersArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameSession.usersArray addObject:value];
  return self;
}
- (PBGameSessionBuilder *)setUsersArray:(NSArray *)array {
  resultPbgameSession.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameSessionBuilder *)clearUsers {
  resultPbgameSession.usersArray = nil;
  return self;
}
@end

@interface PBGameSessionChanged ()
@property SInt64 sessionId;
@property SInt32 status;
@property (strong) NSString* currentPlayUserId;
@property (strong) NSMutableArray * usersAddedArray;
@property (strong) NSMutableArray * userIdsDeletedArray;
@property (strong) NSMutableArray * usersUpdatedArray;
@end

@implementation PBGameSessionChanged

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasCurrentPlayUserId {
  return !!hasCurrentPlayUserId_;
}
- (void) setHasCurrentPlayUserId:(BOOL) _value_ {
  hasCurrentPlayUserId_ = !!_value_;
}
@synthesize currentPlayUserId;
@synthesize usersAddedArray;
@dynamic usersAdded;
@synthesize userIdsDeletedArray;
@dynamic userIdsDeleted;
@synthesize usersUpdatedArray;
@dynamic usersUpdated;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionId = 0L;
    self.status = 0;
    self.currentPlayUserId = @"";
  }
  return self;
}
static PBGameSessionChanged* defaultPBGameSessionChangedInstance = nil;
+ (void) initialize {
  if (self == [PBGameSessionChanged class]) {
    defaultPBGameSessionChangedInstance = [[PBGameSessionChanged alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGameSessionChangedInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGameSessionChangedInstance;
}
- (NSArray *)usersAdded {
  return usersAddedArray;
}
- (PBGameUser*)usersAddedAtIndex:(NSUInteger)index {
  return [usersAddedArray objectAtIndex:index];
}
- (NSArray *)userIdsDeleted {
  return userIdsDeletedArray;
}
- (NSString*)userIdsDeletedAtIndex:(NSUInteger)index {
  return [userIdsDeletedArray objectAtIndex:index];
}
- (NSArray *)usersUpdated {
  return usersUpdatedArray;
}
- (PBGameUser*)usersUpdatedAtIndex:(NSUInteger)index {
  return [usersUpdatedArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitusersAdded = YES;
   [self.usersAdded enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusersAdded = NO;
      *stop = YES;
    }
  }];
  if (!isInitusersAdded) return isInitusersAdded;
  __block BOOL isInitusersUpdated = YES;
   [self.usersUpdated enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusersUpdated = NO;
      *stop = YES;
    }
  }];
  if (!isInitusersUpdated) return isInitusersUpdated;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeInt64:1 value:self.sessionId];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  if (self.hasCurrentPlayUserId) {
    [output writeString:3 value:self.currentPlayUserId];
  }
  [self.usersAddedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.userIdsDeletedArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:6 value:element];
  }];
  [self.usersUpdatedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionId) {
    size_ += computeInt64Size(1, self.sessionId);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(2, self.status);
  }
  if (self.hasCurrentPlayUserId) {
    size_ += computeStringSize(3, self.currentPlayUserId);
  }
  [self.usersAddedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdsDeletedArray.count;
    [self.userIdsDeletedArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.usersUpdatedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGameSessionChanged*) parseFromData:(NSData*) data {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromData:data] build];
}
+ (PBGameSessionChanged*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromInputStream:input] build];
}
+ (PBGameSessionChanged*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameSessionChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameSessionChanged*)[[[PBGameSessionChanged builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameSessionChangedBuilder*) builder {
  return [[PBGameSessionChangedBuilder alloc] init];
}
+ (PBGameSessionChangedBuilder*) builderWithPrototype:(PBGameSessionChanged*) prototype {
  return [[PBGameSessionChanged builder] mergeFrom:prototype];
}
- (PBGameSessionChangedBuilder*) builder {
  return [PBGameSessionChanged builder];
}
- (PBGameSessionChangedBuilder*) toBuilder {
  return [PBGameSessionChanged builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasCurrentPlayUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentPlayUserId", self.currentPlayUserId];
  }
  [self.usersAddedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"usersAdded"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userIdsDeletedArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdsDeleted", obj];
  }];
  [self.usersUpdatedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"usersUpdated"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGameSessionChanged class]]) {
    return NO;
  }
  PBGameSessionChanged *otherMessage = other;
  return
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasCurrentPlayUserId == otherMessage.hasCurrentPlayUserId &&
      (!self.hasCurrentPlayUserId || [self.currentPlayUserId isEqual:otherMessage.currentPlayUserId]) &&
      [self.usersAddedArray isEqualToArray:otherMessage.usersAddedArray] &&
      [self.userIdsDeletedArray isEqualToArray:otherMessage.userIdsDeletedArray] &&
      [self.usersUpdatedArray isEqualToArray:otherMessage.usersUpdatedArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasCurrentPlayUserId) {
    hashCode = hashCode * 31 + [self.currentPlayUserId hash];
  }
  [self.usersAddedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userIdsDeletedArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.usersUpdatedArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGameSessionChangedBuilder()
@property (strong) PBGameSessionChanged* resultPbgameSessionChanged;
@end

@implementation PBGameSessionChangedBuilder
@synthesize resultPbgameSessionChanged;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgameSessionChanged = [[PBGameSessionChanged alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgameSessionChanged;
}
- (PBGameSessionChangedBuilder*) clear {
  self.resultPbgameSessionChanged = [[PBGameSessionChanged alloc] init];
  return self;
}
- (PBGameSessionChangedBuilder*) clone {
  return [PBGameSessionChanged builderWithPrototype:resultPbgameSessionChanged];
}
- (PBGameSessionChanged*) defaultInstance {
  return [PBGameSessionChanged defaultInstance];
}
- (PBGameSessionChanged*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameSessionChanged*) buildPartial {
  PBGameSessionChanged* returnMe = resultPbgameSessionChanged;
  self.resultPbgameSessionChanged = nil;
  return returnMe;
}
- (PBGameSessionChangedBuilder*) mergeFrom:(PBGameSessionChanged*) other {
  if (other == [PBGameSessionChanged defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCurrentPlayUserId) {
    [self setCurrentPlayUserId:other.currentPlayUserId];
  }
  if (other.usersAddedArray.count > 0) {
    if (resultPbgameSessionChanged.usersAddedArray == nil) {
      resultPbgameSessionChanged.usersAddedArray = [[NSMutableArray alloc] initWithArray:other.usersAddedArray];
    } else {
      [resultPbgameSessionChanged.usersAddedArray addObjectsFromArray:other.usersAddedArray];
    }
  }
  if (other.userIdsDeletedArray.count > 0) {
    if (resultPbgameSessionChanged.userIdsDeletedArray == nil) {
      resultPbgameSessionChanged.userIdsDeletedArray = [[NSMutableArray alloc] initWithArray:other.userIdsDeletedArray];
    } else {
      [resultPbgameSessionChanged.userIdsDeletedArray addObjectsFromArray:other.userIdsDeletedArray];
    }
  }
  if (other.usersUpdatedArray.count > 0) {
    if (resultPbgameSessionChanged.usersUpdatedArray == nil) {
      resultPbgameSessionChanged.usersUpdatedArray = [[NSMutableArray alloc] initWithArray:other.usersUpdatedArray];
    } else {
      [resultPbgameSessionChanged.usersUpdatedArray addObjectsFromArray:other.usersUpdatedArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameSessionChangedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameSessionChangedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSessionId:[input readInt64]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        [self setCurrentPlayUserId:[input readString]];
        break;
      }
      case 42: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersAdded:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self addUserIdsDeleted:[input readString]];
        break;
      }
      case 58: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersUpdated:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return resultPbgameSessionChanged.hasSessionId;
}
- (SInt64) sessionId {
  return resultPbgameSessionChanged.sessionId;
}
- (PBGameSessionChangedBuilder*) setSessionId:(SInt64) value {
  resultPbgameSessionChanged.hasSessionId = YES;
  resultPbgameSessionChanged.sessionId = value;
  return self;
}
- (PBGameSessionChangedBuilder*) clearSessionId {
  resultPbgameSessionChanged.hasSessionId = NO;
  resultPbgameSessionChanged.sessionId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return resultPbgameSessionChanged.hasStatus;
}
- (SInt32) status {
  return resultPbgameSessionChanged.status;
}
- (PBGameSessionChangedBuilder*) setStatus:(SInt32) value {
  resultPbgameSessionChanged.hasStatus = YES;
  resultPbgameSessionChanged.status = value;
  return self;
}
- (PBGameSessionChangedBuilder*) clearStatus {
  resultPbgameSessionChanged.hasStatus = NO;
  resultPbgameSessionChanged.status = 0;
  return self;
}
- (BOOL) hasCurrentPlayUserId {
  return resultPbgameSessionChanged.hasCurrentPlayUserId;
}
- (NSString*) currentPlayUserId {
  return resultPbgameSessionChanged.currentPlayUserId;
}
- (PBGameSessionChangedBuilder*) setCurrentPlayUserId:(NSString*) value {
  resultPbgameSessionChanged.hasCurrentPlayUserId = YES;
  resultPbgameSessionChanged.currentPlayUserId = value;
  return self;
}
- (PBGameSessionChangedBuilder*) clearCurrentPlayUserId {
  resultPbgameSessionChanged.hasCurrentPlayUserId = NO;
  resultPbgameSessionChanged.currentPlayUserId = @"";
  return self;
}
- (NSMutableArray *)usersAdded {
  return resultPbgameSessionChanged.usersAddedArray;
}
- (PBGameUser*)usersAddedAtIndex:(NSUInteger)index {
  return [resultPbgameSessionChanged usersAddedAtIndex:index];
}
- (PBGameSessionChangedBuilder *)addUsersAdded:(PBGameUser*)value {
  if (resultPbgameSessionChanged.usersAddedArray == nil) {
    resultPbgameSessionChanged.usersAddedArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameSessionChanged.usersAddedArray addObject:value];
  return self;
}
- (PBGameSessionChangedBuilder *)setUsersAddedArray:(NSArray *)array {
  resultPbgameSessionChanged.usersAddedArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameSessionChangedBuilder *)clearUsersAdded {
  resultPbgameSessionChanged.usersAddedArray = nil;
  return self;
}
- (NSMutableArray *)userIdsDeleted {
  return resultPbgameSessionChanged.userIdsDeletedArray;
}
- (NSString*)userIdsDeletedAtIndex:(NSUInteger)index {
  return [resultPbgameSessionChanged userIdsDeletedAtIndex:index];
}
- (PBGameSessionChangedBuilder *)addUserIdsDeleted:(NSString*)value {
  if (resultPbgameSessionChanged.userIdsDeletedArray == nil) {
    resultPbgameSessionChanged.userIdsDeletedArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameSessionChanged.userIdsDeletedArray addObject:value];
  return self;
}
- (PBGameSessionChangedBuilder *)setUserIdsDeletedArray:(NSArray *)array {
  resultPbgameSessionChanged.userIdsDeletedArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBGameSessionChangedBuilder *)clearUserIdsDeleted {
  resultPbgameSessionChanged.userIdsDeletedArray = nil;
  return self;
}
- (NSMutableArray *)usersUpdated {
  return resultPbgameSessionChanged.usersUpdatedArray;
}
- (PBGameUser*)usersUpdatedAtIndex:(NSUInteger)index {
  return [resultPbgameSessionChanged usersUpdatedAtIndex:index];
}
- (PBGameSessionChangedBuilder *)addUsersUpdated:(PBGameUser*)value {
  if (resultPbgameSessionChanged.usersUpdatedArray == nil) {
    resultPbgameSessionChanged.usersUpdatedArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameSessionChanged.usersUpdatedArray addObject:value];
  return self;
}
- (PBGameSessionChangedBuilder *)setUsersUpdatedArray:(NSArray *)array {
  resultPbgameSessionChanged.usersUpdatedArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameSessionChangedBuilder *)clearUsersUpdated {
  resultPbgameSessionChanged.usersUpdatedArray = nil;
  return self;
}
@end

@interface PBDrawBg ()
@property (strong) NSString* bgId;
@property (strong) NSString* localUrl;
@property (strong) NSString* remoteUrl;
@property SInt32 showStyle;
@property SInt32 type;
@property SInt32 purpose;
@property SInt32 layerPosition;
@property (strong) NSString* tutorialId;
@property (strong) NSString* stageId;
@property (strong) NSString* tutorialBgImageName;
@end

@implementation PBDrawBg

- (BOOL) hasBgId {
  return !!hasBgId_;
}
- (void) setHasBgId:(BOOL) _value_ {
  hasBgId_ = !!_value_;
}
@synthesize bgId;
- (BOOL) hasLocalUrl {
  return !!hasLocalUrl_;
}
- (void) setHasLocalUrl:(BOOL) _value_ {
  hasLocalUrl_ = !!_value_;
}
@synthesize localUrl;
- (BOOL) hasRemoteUrl {
  return !!hasRemoteUrl_;
}
- (void) setHasRemoteUrl:(BOOL) _value_ {
  hasRemoteUrl_ = !!_value_;
}
@synthesize remoteUrl;
- (BOOL) hasShowStyle {
  return !!hasShowStyle_;
}
- (void) setHasShowStyle:(BOOL) _value_ {
  hasShowStyle_ = !!_value_;
}
@synthesize showStyle;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasPurpose {
  return !!hasPurpose_;
}
- (void) setHasPurpose:(BOOL) _value_ {
  hasPurpose_ = !!_value_;
}
@synthesize purpose;
- (BOOL) hasLayerPosition {
  return !!hasLayerPosition_;
}
- (void) setHasLayerPosition:(BOOL) _value_ {
  hasLayerPosition_ = !!_value_;
}
@synthesize layerPosition;
- (BOOL) hasTutorialId {
  return !!hasTutorialId_;
}
- (void) setHasTutorialId:(BOOL) _value_ {
  hasTutorialId_ = !!_value_;
}
@synthesize tutorialId;
- (BOOL) hasStageId {
  return !!hasStageId_;
}
- (void) setHasStageId:(BOOL) _value_ {
  hasStageId_ = !!_value_;
}
@synthesize stageId;
- (BOOL) hasTutorialBgImageName {
  return !!hasTutorialBgImageName_;
}
- (void) setHasTutorialBgImageName:(BOOL) _value_ {
  hasTutorialBgImageName_ = !!_value_;
}
@synthesize tutorialBgImageName;
- (instancetype) init {
  if ((self = [super init])) {
    self.bgId = @"";
    self.localUrl = @"";
    self.remoteUrl = @"";
    self.showStyle = 0;
    self.type = 0;
    self.purpose = 0;
    self.layerPosition = 0;
    self.tutorialId = @"";
    self.stageId = @"";
    self.tutorialBgImageName = @"";
  }
  return self;
}
static PBDrawBg* defaultPBDrawBgInstance = nil;
+ (void) initialize {
  if (self == [PBDrawBg class]) {
    defaultPBDrawBgInstance = [[PBDrawBg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawBgInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawBgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBgId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBgId) {
    [output writeString:1 value:self.bgId];
  }
  if (self.hasLocalUrl) {
    [output writeString:2 value:self.localUrl];
  }
  if (self.hasRemoteUrl) {
    [output writeString:3 value:self.remoteUrl];
  }
  if (self.hasShowStyle) {
    [output writeInt32:4 value:self.showStyle];
  }
  if (self.hasType) {
    [output writeInt32:5 value:self.type];
  }
  if (self.hasPurpose) {
    [output writeInt32:6 value:self.purpose];
  }
  if (self.hasLayerPosition) {
    [output writeInt32:7 value:self.layerPosition];
  }
  if (self.hasTutorialId) {
    [output writeString:20 value:self.tutorialId];
  }
  if (self.hasStageId) {
    [output writeString:21 value:self.stageId];
  }
  if (self.hasTutorialBgImageName) {
    [output writeString:22 value:self.tutorialBgImageName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBgId) {
    size_ += computeStringSize(1, self.bgId);
  }
  if (self.hasLocalUrl) {
    size_ += computeStringSize(2, self.localUrl);
  }
  if (self.hasRemoteUrl) {
    size_ += computeStringSize(3, self.remoteUrl);
  }
  if (self.hasShowStyle) {
    size_ += computeInt32Size(4, self.showStyle);
  }
  if (self.hasType) {
    size_ += computeInt32Size(5, self.type);
  }
  if (self.hasPurpose) {
    size_ += computeInt32Size(6, self.purpose);
  }
  if (self.hasLayerPosition) {
    size_ += computeInt32Size(7, self.layerPosition);
  }
  if (self.hasTutorialId) {
    size_ += computeStringSize(20, self.tutorialId);
  }
  if (self.hasStageId) {
    size_ += computeStringSize(21, self.stageId);
  }
  if (self.hasTutorialBgImageName) {
    size_ += computeStringSize(22, self.tutorialBgImageName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDrawBg*) parseFromData:(NSData*) data {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromData:data] build];
}
+ (PBDrawBg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBg*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromInputStream:input] build];
}
+ (PBDrawBg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawBg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgBuilder*) builder {
  return [[PBDrawBgBuilder alloc] init];
}
+ (PBDrawBgBuilder*) builderWithPrototype:(PBDrawBg*) prototype {
  return [[PBDrawBg builder] mergeFrom:prototype];
}
- (PBDrawBgBuilder*) builder {
  return [PBDrawBg builder];
}
- (PBDrawBgBuilder*) toBuilder {
  return [PBDrawBg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgId", self.bgId];
  }
  if (self.hasLocalUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localUrl", self.localUrl];
  }
  if (self.hasRemoteUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remoteUrl", self.remoteUrl];
  }
  if (self.hasShowStyle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showStyle", [NSNumber numberWithInteger:self.showStyle]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasPurpose) {
    [output appendFormat:@"%@%@: %@\n", indent, @"purpose", [NSNumber numberWithInteger:self.purpose]];
  }
  if (self.hasLayerPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"layerPosition", [NSNumber numberWithInteger:self.layerPosition]];
  }
  if (self.hasTutorialId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tutorialId", self.tutorialId];
  }
  if (self.hasStageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageId", self.stageId];
  }
  if (self.hasTutorialBgImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tutorialBgImageName", self.tutorialBgImageName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDrawBg class]]) {
    return NO;
  }
  PBDrawBg *otherMessage = other;
  return
      self.hasBgId == otherMessage.hasBgId &&
      (!self.hasBgId || [self.bgId isEqual:otherMessage.bgId]) &&
      self.hasLocalUrl == otherMessage.hasLocalUrl &&
      (!self.hasLocalUrl || [self.localUrl isEqual:otherMessage.localUrl]) &&
      self.hasRemoteUrl == otherMessage.hasRemoteUrl &&
      (!self.hasRemoteUrl || [self.remoteUrl isEqual:otherMessage.remoteUrl]) &&
      self.hasShowStyle == otherMessage.hasShowStyle &&
      (!self.hasShowStyle || self.showStyle == otherMessage.showStyle) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasPurpose == otherMessage.hasPurpose &&
      (!self.hasPurpose || self.purpose == otherMessage.purpose) &&
      self.hasLayerPosition == otherMessage.hasLayerPosition &&
      (!self.hasLayerPosition || self.layerPosition == otherMessage.layerPosition) &&
      self.hasTutorialId == otherMessage.hasTutorialId &&
      (!self.hasTutorialId || [self.tutorialId isEqual:otherMessage.tutorialId]) &&
      self.hasStageId == otherMessage.hasStageId &&
      (!self.hasStageId || [self.stageId isEqual:otherMessage.stageId]) &&
      self.hasTutorialBgImageName == otherMessage.hasTutorialBgImageName &&
      (!self.hasTutorialBgImageName || [self.tutorialBgImageName isEqual:otherMessage.tutorialBgImageName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBgId) {
    hashCode = hashCode * 31 + [self.bgId hash];
  }
  if (self.hasLocalUrl) {
    hashCode = hashCode * 31 + [self.localUrl hash];
  }
  if (self.hasRemoteUrl) {
    hashCode = hashCode * 31 + [self.remoteUrl hash];
  }
  if (self.hasShowStyle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.showStyle] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasPurpose) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.purpose] hash];
  }
  if (self.hasLayerPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.layerPosition] hash];
  }
  if (self.hasTutorialId) {
    hashCode = hashCode * 31 + [self.tutorialId hash];
  }
  if (self.hasStageId) {
    hashCode = hashCode * 31 + [self.stageId hash];
  }
  if (self.hasTutorialBgImageName) {
    hashCode = hashCode * 31 + [self.tutorialBgImageName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawBgBuilder()
@property (strong) PBDrawBg* resultPbdrawBg;
@end

@implementation PBDrawBgBuilder
@synthesize resultPbdrawBg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdrawBg = [[PBDrawBg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdrawBg;
}
- (PBDrawBgBuilder*) clear {
  self.resultPbdrawBg = [[PBDrawBg alloc] init];
  return self;
}
- (PBDrawBgBuilder*) clone {
  return [PBDrawBg builderWithPrototype:resultPbdrawBg];
}
- (PBDrawBg*) defaultInstance {
  return [PBDrawBg defaultInstance];
}
- (PBDrawBg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawBg*) buildPartial {
  PBDrawBg* returnMe = resultPbdrawBg;
  self.resultPbdrawBg = nil;
  return returnMe;
}
- (PBDrawBgBuilder*) mergeFrom:(PBDrawBg*) other {
  if (other == [PBDrawBg defaultInstance]) {
    return self;
  }
  if (other.hasBgId) {
    [self setBgId:other.bgId];
  }
  if (other.hasLocalUrl) {
    [self setLocalUrl:other.localUrl];
  }
  if (other.hasRemoteUrl) {
    [self setRemoteUrl:other.remoteUrl];
  }
  if (other.hasShowStyle) {
    [self setShowStyle:other.showStyle];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasPurpose) {
    [self setPurpose:other.purpose];
  }
  if (other.hasLayerPosition) {
    [self setLayerPosition:other.layerPosition];
  }
  if (other.hasTutorialId) {
    [self setTutorialId:other.tutorialId];
  }
  if (other.hasStageId) {
    [self setStageId:other.stageId];
  }
  if (other.hasTutorialBgImageName) {
    [self setTutorialBgImageName:other.tutorialBgImageName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawBgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawBgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBgId:[input readString]];
        break;
      }
      case 18: {
        [self setLocalUrl:[input readString]];
        break;
      }
      case 26: {
        [self setRemoteUrl:[input readString]];
        break;
      }
      case 32: {
        [self setShowStyle:[input readInt32]];
        break;
      }
      case 40: {
        [self setType:[input readInt32]];
        break;
      }
      case 48: {
        [self setPurpose:[input readInt32]];
        break;
      }
      case 56: {
        [self setLayerPosition:[input readInt32]];
        break;
      }
      case 162: {
        [self setTutorialId:[input readString]];
        break;
      }
      case 170: {
        [self setStageId:[input readString]];
        break;
      }
      case 178: {
        [self setTutorialBgImageName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBgId {
  return resultPbdrawBg.hasBgId;
}
- (NSString*) bgId {
  return resultPbdrawBg.bgId;
}
- (PBDrawBgBuilder*) setBgId:(NSString*) value {
  resultPbdrawBg.hasBgId = YES;
  resultPbdrawBg.bgId = value;
  return self;
}
- (PBDrawBgBuilder*) clearBgId {
  resultPbdrawBg.hasBgId = NO;
  resultPbdrawBg.bgId = @"";
  return self;
}
- (BOOL) hasLocalUrl {
  return resultPbdrawBg.hasLocalUrl;
}
- (NSString*) localUrl {
  return resultPbdrawBg.localUrl;
}
- (PBDrawBgBuilder*) setLocalUrl:(NSString*) value {
  resultPbdrawBg.hasLocalUrl = YES;
  resultPbdrawBg.localUrl = value;
  return self;
}
- (PBDrawBgBuilder*) clearLocalUrl {
  resultPbdrawBg.hasLocalUrl = NO;
  resultPbdrawBg.localUrl = @"";
  return self;
}
- (BOOL) hasRemoteUrl {
  return resultPbdrawBg.hasRemoteUrl;
}
- (NSString*) remoteUrl {
  return resultPbdrawBg.remoteUrl;
}
- (PBDrawBgBuilder*) setRemoteUrl:(NSString*) value {
  resultPbdrawBg.hasRemoteUrl = YES;
  resultPbdrawBg.remoteUrl = value;
  return self;
}
- (PBDrawBgBuilder*) clearRemoteUrl {
  resultPbdrawBg.hasRemoteUrl = NO;
  resultPbdrawBg.remoteUrl = @"";
  return self;
}
- (BOOL) hasShowStyle {
  return resultPbdrawBg.hasShowStyle;
}
- (SInt32) showStyle {
  return resultPbdrawBg.showStyle;
}
- (PBDrawBgBuilder*) setShowStyle:(SInt32) value {
  resultPbdrawBg.hasShowStyle = YES;
  resultPbdrawBg.showStyle = value;
  return self;
}
- (PBDrawBgBuilder*) clearShowStyle {
  resultPbdrawBg.hasShowStyle = NO;
  resultPbdrawBg.showStyle = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbdrawBg.hasType;
}
- (SInt32) type {
  return resultPbdrawBg.type;
}
- (PBDrawBgBuilder*) setType:(SInt32) value {
  resultPbdrawBg.hasType = YES;
  resultPbdrawBg.type = value;
  return self;
}
- (PBDrawBgBuilder*) clearType {
  resultPbdrawBg.hasType = NO;
  resultPbdrawBg.type = 0;
  return self;
}
- (BOOL) hasPurpose {
  return resultPbdrawBg.hasPurpose;
}
- (SInt32) purpose {
  return resultPbdrawBg.purpose;
}
- (PBDrawBgBuilder*) setPurpose:(SInt32) value {
  resultPbdrawBg.hasPurpose = YES;
  resultPbdrawBg.purpose = value;
  return self;
}
- (PBDrawBgBuilder*) clearPurpose {
  resultPbdrawBg.hasPurpose = NO;
  resultPbdrawBg.purpose = 0;
  return self;
}
- (BOOL) hasLayerPosition {
  return resultPbdrawBg.hasLayerPosition;
}
- (SInt32) layerPosition {
  return resultPbdrawBg.layerPosition;
}
- (PBDrawBgBuilder*) setLayerPosition:(SInt32) value {
  resultPbdrawBg.hasLayerPosition = YES;
  resultPbdrawBg.layerPosition = value;
  return self;
}
- (PBDrawBgBuilder*) clearLayerPosition {
  resultPbdrawBg.hasLayerPosition = NO;
  resultPbdrawBg.layerPosition = 0;
  return self;
}
- (BOOL) hasTutorialId {
  return resultPbdrawBg.hasTutorialId;
}
- (NSString*) tutorialId {
  return resultPbdrawBg.tutorialId;
}
- (PBDrawBgBuilder*) setTutorialId:(NSString*) value {
  resultPbdrawBg.hasTutorialId = YES;
  resultPbdrawBg.tutorialId = value;
  return self;
}
- (PBDrawBgBuilder*) clearTutorialId {
  resultPbdrawBg.hasTutorialId = NO;
  resultPbdrawBg.tutorialId = @"";
  return self;
}
- (BOOL) hasStageId {
  return resultPbdrawBg.hasStageId;
}
- (NSString*) stageId {
  return resultPbdrawBg.stageId;
}
- (PBDrawBgBuilder*) setStageId:(NSString*) value {
  resultPbdrawBg.hasStageId = YES;
  resultPbdrawBg.stageId = value;
  return self;
}
- (PBDrawBgBuilder*) clearStageId {
  resultPbdrawBg.hasStageId = NO;
  resultPbdrawBg.stageId = @"";
  return self;
}
- (BOOL) hasTutorialBgImageName {
  return resultPbdrawBg.hasTutorialBgImageName;
}
- (NSString*) tutorialBgImageName {
  return resultPbdrawBg.tutorialBgImageName;
}
- (PBDrawBgBuilder*) setTutorialBgImageName:(NSString*) value {
  resultPbdrawBg.hasTutorialBgImageName = YES;
  resultPbdrawBg.tutorialBgImageName = value;
  return self;
}
- (PBDrawBgBuilder*) clearTutorialBgImageName {
  resultPbdrawBg.hasTutorialBgImageName = NO;
  resultPbdrawBg.tutorialBgImageName = @"";
  return self;
}
@end

@interface PBGradient ()
@property Float32 division;
@property (strong) PBAppendableArray * colorArray;
@property (strong) PBAppendableArray * pointArray;
@end

@implementation PBGradient

- (BOOL) hasDivision {
  return !!hasDivision_;
}
- (void) setHasDivision:(BOOL) _value_ {
  hasDivision_ = !!_value_;
}
@synthesize division;
@synthesize colorArray;
@dynamic color;
@synthesize pointArray;
@dynamic point;
- (instancetype) init {
  if ((self = [super init])) {
    self.division = 0;
  }
  return self;
}
static PBGradient* defaultPBGradientInstance = nil;
+ (void) initialize {
  if (self == [PBGradient class]) {
    defaultPBGradientInstance = [[PBGradient alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGradientInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGradientInstance;
}
- (PBArray *)color {
  return colorArray;
}
- (SInt32)colorAtIndex:(NSUInteger)index {
  return [colorArray int32AtIndex:index];
}
- (PBArray *)point {
  return pointArray;
}
- (Float32)pointAtIndex:(NSUInteger)index {
  return [pointArray floatAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasDivision) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDivision) {
    [output writeFloat:1 value:self.division];
  }
  const NSUInteger colorArrayCount = self.colorArray.count;
  if (colorArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.colorArray.data;
    [output writeRawVarint32:18];
    [output writeRawVarint32:colorMemoizedSerializedSize];
    for (NSUInteger i = 0; i < colorArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  const NSUInteger pointArrayCount = self.pointArray.count;
  if (pointArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.pointArray.data;
    for (NSUInteger i = 0; i < pointArrayCount; ++i) {
      [output writeFloat:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDivision) {
    size_ += computeFloatSize(1, self.division);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.colorArray.count;
    const SInt32 *values = (const SInt32 *)self.colorArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    colorMemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGradient*) parseFromData:(NSData*) data {
  return (PBGradient*)[[[PBGradient builder] mergeFromData:data] build];
}
+ (PBGradient*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGradient*)[[[PBGradient builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGradient*) parseFromInputStream:(NSInputStream*) input {
  return (PBGradient*)[[[PBGradient builder] mergeFromInputStream:input] build];
}
+ (PBGradient*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGradient*)[[[PBGradient builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGradient*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGradient*)[[[PBGradient builder] mergeFromCodedInputStream:input] build];
}
+ (PBGradient*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGradient*)[[[PBGradient builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGradientBuilder*) builder {
  return [[PBGradientBuilder alloc] init];
}
+ (PBGradientBuilder*) builderWithPrototype:(PBGradient*) prototype {
  return [[PBGradient builder] mergeFrom:prototype];
}
- (PBGradientBuilder*) builder {
  return [PBGradient builder];
}
- (PBGradientBuilder*) toBuilder {
  return [PBGradient builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDivision) {
    [output appendFormat:@"%@%@: %@\n", indent, @"division", [NSNumber numberWithFloat:self.division]];
  }
  [self.colorArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", obj];
  }];
  [self.pointArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"point", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGradient class]]) {
    return NO;
  }
  PBGradient *otherMessage = other;
  return
      self.hasDivision == otherMessage.hasDivision &&
      (!self.hasDivision || self.division == otherMessage.division) &&
      [self.colorArray isEqualToArray:otherMessage.colorArray] &&
      [self.pointArray isEqualToArray:otherMessage.pointArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDivision) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.division] hash];
  }
  [self.colorArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.pointArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGradientBuilder()
@property (strong) PBGradient* resultPbgradient;
@end

@implementation PBGradientBuilder
@synthesize resultPbgradient;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgradient = [[PBGradient alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgradient;
}
- (PBGradientBuilder*) clear {
  self.resultPbgradient = [[PBGradient alloc] init];
  return self;
}
- (PBGradientBuilder*) clone {
  return [PBGradient builderWithPrototype:resultPbgradient];
}
- (PBGradient*) defaultInstance {
  return [PBGradient defaultInstance];
}
- (PBGradient*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGradient*) buildPartial {
  PBGradient* returnMe = resultPbgradient;
  self.resultPbgradient = nil;
  return returnMe;
}
- (PBGradientBuilder*) mergeFrom:(PBGradient*) other {
  if (other == [PBGradient defaultInstance]) {
    return self;
  }
  if (other.hasDivision) {
    [self setDivision:other.division];
  }
  if (other.colorArray.count > 0) {
    if (resultPbgradient.colorArray == nil) {
      resultPbgradient.colorArray = [other.colorArray copy];
    } else {
      [resultPbgradient.colorArray appendArray:other.colorArray];
    }
  }
  if (other.pointArray.count > 0) {
    if (resultPbgradient.pointArray == nil) {
      resultPbgradient.pointArray = [other.pointArray copy];
    } else {
      [resultPbgradient.pointArray appendArray:other.pointArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGradientBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGradientBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setDivision:[input readFloat]];
        break;
      }
      case 18: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultPbgradient.colorArray == nil) {
          resultPbgradient.colorArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultPbgradient.colorArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 29: {
        [self addPoint:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasDivision {
  return resultPbgradient.hasDivision;
}
- (Float32) division {
  return resultPbgradient.division;
}
- (PBGradientBuilder*) setDivision:(Float32) value {
  resultPbgradient.hasDivision = YES;
  resultPbgradient.division = value;
  return self;
}
- (PBGradientBuilder*) clearDivision {
  resultPbgradient.hasDivision = NO;
  resultPbgradient.division = 0;
  return self;
}
- (PBAppendableArray *)color {
  return resultPbgradient.colorArray;
}
- (SInt32)colorAtIndex:(NSUInteger)index {
  return [resultPbgradient colorAtIndex:index];
}
- (PBGradientBuilder *)addColor:(SInt32)value {
  if (resultPbgradient.colorArray == nil) {
    resultPbgradient.colorArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbgradient.colorArray addInt32:value];
  return self;
}
- (PBGradientBuilder *)setColorArray:(NSArray *)array {
  resultPbgradient.colorArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBGradientBuilder *)setColorValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbgradient.colorArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBGradientBuilder *)clearColor {
  resultPbgradient.colorArray = nil;
  return self;
}
- (PBAppendableArray *)point {
  return resultPbgradient.pointArray;
}
- (Float32)pointAtIndex:(NSUInteger)index {
  return [resultPbgradient pointAtIndex:index];
}
- (PBGradientBuilder *)addPoint:(Float32)value {
  if (resultPbgradient.pointArray == nil) {
    resultPbgradient.pointArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbgradient.pointArray addFloat:value];
  return self;
}
- (PBGradientBuilder *)setPointArray:(NSArray *)array {
  resultPbgradient.pointArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBGradientBuilder *)setPointValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbgradient.pointArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBGradientBuilder *)clearPoint {
  resultPbgradient.pointArray = nil;
  return self;
}
@end

@interface PBLayer ()
@property SInt32 tag;
@property (strong) PBAppendableArray * rectComponentArray;
@property Float32 alpha;
@property (strong) NSString* name;
@property BOOL hidden;
@end

@implementation PBLayer

- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) _value_ {
  hasTag_ = !!_value_;
}
@synthesize tag;
@synthesize rectComponentArray;
@dynamic rectComponent;
- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) _value_ {
  hasAlpha_ = !!_value_;
}
@synthesize alpha;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasHidden {
  return !!hasHidden_;
}
- (void) setHasHidden:(BOOL) _value_ {
  hasHidden_ = !!_value_;
}
- (BOOL) hidden {
  return !!hidden_;
}
- (void) setHidden:(BOOL) _value_ {
  hidden_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.tag = 0;
    self.alpha = 1;
    self.name = @"";
    self.hidden = NO;
  }
  return self;
}
static PBLayer* defaultPBLayerInstance = nil;
+ (void) initialize {
  if (self == [PBLayer class]) {
    defaultPBLayerInstance = [[PBLayer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBLayerInstance;
}
- (instancetype) defaultInstance {
  return defaultPBLayerInstance;
}
- (PBArray *)rectComponent {
  return rectComponentArray;
}
- (Float32)rectComponentAtIndex:(NSUInteger)index {
  return [rectComponentArray floatAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTag) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTag) {
    [output writeInt32:1 value:self.tag];
  }
  const NSUInteger rectComponentArrayCount = self.rectComponentArray.count;
  if (rectComponentArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.rectComponentArray.data;
    for (NSUInteger i = 0; i < rectComponentArrayCount; ++i) {
      [output writeFloat:2 value:values[i]];
    }
  }
  if (self.hasAlpha) {
    [output writeFloat:3 value:self.alpha];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasHidden) {
    [output writeBool:5 value:self.hidden];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTag) {
    size_ += computeInt32Size(1, self.tag);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.rectComponentArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAlpha) {
    size_ += computeFloatSize(3, self.alpha);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasHidden) {
    size_ += computeBoolSize(5, self.hidden);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBLayer*) parseFromData:(NSData*) data {
  return (PBLayer*)[[[PBLayer builder] mergeFromData:data] build];
}
+ (PBLayer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayer*)[[[PBLayer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLayer*) parseFromInputStream:(NSInputStream*) input {
  return (PBLayer*)[[[PBLayer builder] mergeFromInputStream:input] build];
}
+ (PBLayer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayer*)[[[PBLayer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLayer*)[[[PBLayer builder] mergeFromCodedInputStream:input] build];
}
+ (PBLayer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayer*)[[[PBLayer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayerBuilder*) builder {
  return [[PBLayerBuilder alloc] init];
}
+ (PBLayerBuilder*) builderWithPrototype:(PBLayer*) prototype {
  return [[PBLayer builder] mergeFrom:prototype];
}
- (PBLayerBuilder*) builder {
  return [PBLayer builder];
}
- (PBLayerBuilder*) toBuilder {
  return [PBLayer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", [NSNumber numberWithInteger:self.tag]];
  }
  [self.rectComponentArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rectComponent", obj];
  }];
  if (self.hasAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alpha", [NSNumber numberWithFloat:self.alpha]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasHidden) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hidden", [NSNumber numberWithBool:self.hidden]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBLayer class]]) {
    return NO;
  }
  PBLayer *otherMessage = other;
  return
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || self.tag == otherMessage.tag) &&
      [self.rectComponentArray isEqualToArray:otherMessage.rectComponentArray] &&
      self.hasAlpha == otherMessage.hasAlpha &&
      (!self.hasAlpha || self.alpha == otherMessage.alpha) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasHidden == otherMessage.hasHidden &&
      (!self.hasHidden || self.hidden == otherMessage.hidden) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tag] hash];
  }
  [self.rectComponentArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.alpha] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasHidden) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hidden] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBLayerBuilder()
@property (strong) PBLayer* resultPblayer;
@end

@implementation PBLayerBuilder
@synthesize resultPblayer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPblayer = [[PBLayer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPblayer;
}
- (PBLayerBuilder*) clear {
  self.resultPblayer = [[PBLayer alloc] init];
  return self;
}
- (PBLayerBuilder*) clone {
  return [PBLayer builderWithPrototype:resultPblayer];
}
- (PBLayer*) defaultInstance {
  return [PBLayer defaultInstance];
}
- (PBLayer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLayer*) buildPartial {
  PBLayer* returnMe = resultPblayer;
  self.resultPblayer = nil;
  return returnMe;
}
- (PBLayerBuilder*) mergeFrom:(PBLayer*) other {
  if (other == [PBLayer defaultInstance]) {
    return self;
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.rectComponentArray.count > 0) {
    if (resultPblayer.rectComponentArray == nil) {
      resultPblayer.rectComponentArray = [other.rectComponentArray copy];
    } else {
      [resultPblayer.rectComponentArray appendArray:other.rectComponentArray];
    }
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHidden) {
    [self setHidden:other.hidden];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLayerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLayerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTag:[input readInt32]];
        break;
      }
      case 21: {
        [self addRectComponent:[input readFloat]];
        break;
      }
      case 29: {
        [self setAlpha:[input readFloat]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 40: {
        [self setHidden:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasTag {
  return resultPblayer.hasTag;
}
- (SInt32) tag {
  return resultPblayer.tag;
}
- (PBLayerBuilder*) setTag:(SInt32) value {
  resultPblayer.hasTag = YES;
  resultPblayer.tag = value;
  return self;
}
- (PBLayerBuilder*) clearTag {
  resultPblayer.hasTag = NO;
  resultPblayer.tag = 0;
  return self;
}
- (PBAppendableArray *)rectComponent {
  return resultPblayer.rectComponentArray;
}
- (Float32)rectComponentAtIndex:(NSUInteger)index {
  return [resultPblayer rectComponentAtIndex:index];
}
- (PBLayerBuilder *)addRectComponent:(Float32)value {
  if (resultPblayer.rectComponentArray == nil) {
    resultPblayer.rectComponentArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPblayer.rectComponentArray addFloat:value];
  return self;
}
- (PBLayerBuilder *)setRectComponentArray:(NSArray *)array {
  resultPblayer.rectComponentArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBLayerBuilder *)setRectComponentValues:(const Float32 *)values count:(NSUInteger)count {
  resultPblayer.rectComponentArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBLayerBuilder *)clearRectComponent {
  resultPblayer.rectComponentArray = nil;
  return self;
}
- (BOOL) hasAlpha {
  return resultPblayer.hasAlpha;
}
- (Float32) alpha {
  return resultPblayer.alpha;
}
- (PBLayerBuilder*) setAlpha:(Float32) value {
  resultPblayer.hasAlpha = YES;
  resultPblayer.alpha = value;
  return self;
}
- (PBLayerBuilder*) clearAlpha {
  resultPblayer.hasAlpha = NO;
  resultPblayer.alpha = 1;
  return self;
}
- (BOOL) hasName {
  return resultPblayer.hasName;
}
- (NSString*) name {
  return resultPblayer.name;
}
- (PBLayerBuilder*) setName:(NSString*) value {
  resultPblayer.hasName = YES;
  resultPblayer.name = value;
  return self;
}
- (PBLayerBuilder*) clearName {
  resultPblayer.hasName = NO;
  resultPblayer.name = @"";
  return self;
}
- (BOOL) hasHidden {
  return resultPblayer.hasHidden;
}
- (BOOL) hidden {
  return resultPblayer.hidden;
}
- (PBLayerBuilder*) setHidden:(BOOL) value {
  resultPblayer.hasHidden = YES;
  resultPblayer.hidden = value;
  return self;
}
- (PBLayerBuilder*) clearHidden {
  resultPblayer.hasHidden = NO;
  resultPblayer.hidden = NO;
  return self;
}
@end

@interface PBDrawAction ()
@property SInt32 type;
@property (strong) PBAppendableArray * pointsArray;
@property Float32 width;
@property SInt32 color;
@property SInt32 penType;
@property SInt32 shapeType;
@property (strong) PBAppendableArray * rectComponentArray;
@property BOOL shapeStroke;
@property (strong) PBAppendableArray * pointsXArray;
@property (strong) PBAppendableArray * pointsYArray;
@property SInt32 betterColor;
@property (strong) PBDrawBg* drawBg;
@property Float32 shadowOffsetX;
@property Float32 shadowOffsetY;
@property SInt32 shadowColor;
@property Float32 shadowBlur;
@property SInt32 clipTag;
@property SInt32 clipType;
@property SInt32 layerTag;
@property Float32 layerAlpha;
@property (strong) NSMutableArray * changeLayersArray;
@property (strong) PBGradient* gradient;
@property SInt32 brushType;
@property (strong) PBAppendableArray * brushPointWidthArray;
@property (strong) PBAppendableArray * brushRandomValueArray;
@end

@implementation PBDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
@synthesize pointsArray;
@dynamic points;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) _value_ {
  hasPenType_ = !!_value_;
}
@synthesize penType;
- (BOOL) hasShapeType {
  return !!hasShapeType_;
}
- (void) setHasShapeType:(BOOL) _value_ {
  hasShapeType_ = !!_value_;
}
@synthesize shapeType;
@synthesize rectComponentArray;
@dynamic rectComponent;
- (BOOL) hasShapeStroke {
  return !!hasShapeStroke_;
}
- (void) setHasShapeStroke:(BOOL) _value_ {
  hasShapeStroke_ = !!_value_;
}
- (BOOL) shapeStroke {
  return !!shapeStroke_;
}
- (void) setShapeStroke:(BOOL) _value_ {
  shapeStroke_ = !!_value_;
}
@synthesize pointsXArray;
@dynamic pointsX;
@synthesize pointsYArray;
@dynamic pointsY;
- (BOOL) hasBetterColor {
  return !!hasBetterColor_;
}
- (void) setHasBetterColor:(BOOL) _value_ {
  hasBetterColor_ = !!_value_;
}
@synthesize betterColor;
- (BOOL) hasDrawBg {
  return !!hasDrawBg_;
}
- (void) setHasDrawBg:(BOOL) _value_ {
  hasDrawBg_ = !!_value_;
}
@synthesize drawBg;
- (BOOL) hasShadowOffsetX {
  return !!hasShadowOffsetX_;
}
- (void) setHasShadowOffsetX:(BOOL) _value_ {
  hasShadowOffsetX_ = !!_value_;
}
@synthesize shadowOffsetX;
- (BOOL) hasShadowOffsetY {
  return !!hasShadowOffsetY_;
}
- (void) setHasShadowOffsetY:(BOOL) _value_ {
  hasShadowOffsetY_ = !!_value_;
}
@synthesize shadowOffsetY;
- (BOOL) hasShadowColor {
  return !!hasShadowColor_;
}
- (void) setHasShadowColor:(BOOL) _value_ {
  hasShadowColor_ = !!_value_;
}
@synthesize shadowColor;
- (BOOL) hasShadowBlur {
  return !!hasShadowBlur_;
}
- (void) setHasShadowBlur:(BOOL) _value_ {
  hasShadowBlur_ = !!_value_;
}
@synthesize shadowBlur;
- (BOOL) hasClipTag {
  return !!hasClipTag_;
}
- (void) setHasClipTag:(BOOL) _value_ {
  hasClipTag_ = !!_value_;
}
@synthesize clipTag;
- (BOOL) hasClipType {
  return !!hasClipType_;
}
- (void) setHasClipType:(BOOL) _value_ {
  hasClipType_ = !!_value_;
}
@synthesize clipType;
- (BOOL) hasLayerTag {
  return !!hasLayerTag_;
}
- (void) setHasLayerTag:(BOOL) _value_ {
  hasLayerTag_ = !!_value_;
}
@synthesize layerTag;
- (BOOL) hasLayerAlpha {
  return !!hasLayerAlpha_;
}
- (void) setHasLayerAlpha:(BOOL) _value_ {
  hasLayerAlpha_ = !!_value_;
}
@synthesize layerAlpha;
@synthesize changeLayersArray;
@dynamic changeLayers;
- (BOOL) hasGradient {
  return !!hasGradient_;
}
- (void) setHasGradient:(BOOL) _value_ {
  hasGradient_ = !!_value_;
}
@synthesize gradient;
- (BOOL) hasBrushType {
  return !!hasBrushType_;
}
- (void) setHasBrushType:(BOOL) _value_ {
  hasBrushType_ = !!_value_;
}
@synthesize brushType;
@synthesize brushPointWidthArray;
@dynamic brushPointWidth;
@synthesize brushRandomValueArray;
@dynamic brushRandomValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.width = 0;
    self.color = 0;
    self.penType = 0;
    self.shapeType = 0;
    self.shapeStroke = NO;
    self.betterColor = 0;
    self.drawBg = [PBDrawBg defaultInstance];
    self.shadowOffsetX = 0;
    self.shadowOffsetY = 0;
    self.shadowColor = 0;
    self.shadowBlur = 0;
    self.clipTag = 0;
    self.clipType = 0;
    self.layerTag = 0;
    self.layerAlpha = 1;
    self.gradient = [PBGradient defaultInstance];
    self.brushType = 0;
  }
  return self;
}
static PBDrawAction* defaultPBDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBDrawAction class]) {
    defaultPBDrawActionInstance = [[PBDrawAction alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawActionInstance;
}
- (PBArray *)points {
  return pointsArray;
}
- (SInt32)pointsAtIndex:(NSUInteger)index {
  return [pointsArray int32AtIndex:index];
}
- (PBArray *)rectComponent {
  return rectComponentArray;
}
- (Float32)rectComponentAtIndex:(NSUInteger)index {
  return [rectComponentArray floatAtIndex:index];
}
- (PBArray *)pointsX {
  return pointsXArray;
}
- (Float32)pointsXAtIndex:(NSUInteger)index {
  return [pointsXArray floatAtIndex:index];
}
- (PBArray *)pointsY {
  return pointsYArray;
}
- (Float32)pointsYAtIndex:(NSUInteger)index {
  return [pointsYArray floatAtIndex:index];
}
- (NSArray *)changeLayers {
  return changeLayersArray;
}
- (PBLayer*)changeLayersAtIndex:(NSUInteger)index {
  return [changeLayersArray objectAtIndex:index];
}
- (PBArray *)brushPointWidth {
  return brushPointWidthArray;
}
- (Float32)brushPointWidthAtIndex:(NSUInteger)index {
  return [brushPointWidthArray floatAtIndex:index];
}
- (PBArray *)brushRandomValue {
  return brushRandomValueArray;
}
- (SInt32)brushRandomValueAtIndex:(NSUInteger)index {
  return [brushRandomValueArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasDrawBg) {
    if (!self.drawBg.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitchangeLayers = YES;
   [self.changeLayers enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitchangeLayers = NO;
      *stop = YES;
    }
  }];
  if (!isInitchangeLayers) return isInitchangeLayers;
  if (self.hasGradient) {
    if (!self.gradient.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  const NSUInteger pointsArrayCount = self.pointsArray.count;
  if (pointsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.pointsArray.data;
    [output writeRawVarint32:18];
    [output writeRawVarint32:pointsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < pointsArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  if (self.hasWidth) {
    [output writeFloat:3 value:self.width];
  }
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  if (self.hasPenType) {
    [output writeInt32:5 value:self.penType];
  }
  if (self.hasShapeType) {
    [output writeInt32:6 value:self.shapeType];
  }
  const NSUInteger rectComponentArrayCount = self.rectComponentArray.count;
  if (rectComponentArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.rectComponentArray.data;
    for (NSUInteger i = 0; i < rectComponentArrayCount; ++i) {
      [output writeFloat:7 value:values[i]];
    }
  }
  if (self.hasShapeStroke) {
    [output writeBool:8 value:self.shapeStroke];
  }
  const NSUInteger pointsXArrayCount = self.pointsXArray.count;
  if (pointsXArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.pointsXArray.data;
    for (NSUInteger i = 0; i < pointsXArrayCount; ++i) {
      [output writeFloat:11 value:values[i]];
    }
  }
  const NSUInteger pointsYArrayCount = self.pointsYArray.count;
  if (pointsYArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.pointsYArray.data;
    for (NSUInteger i = 0; i < pointsYArrayCount; ++i) {
      [output writeFloat:12 value:values[i]];
    }
  }
  if (self.hasBetterColor) {
    [output writeInt32:13 value:self.betterColor];
  }
  if (self.hasDrawBg) {
    [output writeMessage:14 value:self.drawBg];
  }
  if (self.hasShadowOffsetX) {
    [output writeFloat:15 value:self.shadowOffsetX];
  }
  if (self.hasShadowOffsetY) {
    [output writeFloat:16 value:self.shadowOffsetY];
  }
  if (self.hasShadowColor) {
    [output writeInt32:17 value:self.shadowColor];
  }
  if (self.hasShadowBlur) {
    [output writeFloat:18 value:self.shadowBlur];
  }
  if (self.hasClipTag) {
    [output writeInt32:20 value:self.clipTag];
  }
  if (self.hasClipType) {
    [output writeInt32:21 value:self.clipType];
  }
  if (self.hasLayerTag) {
    [output writeInt32:23 value:self.layerTag];
  }
  if (self.hasLayerAlpha) {
    [output writeFloat:24 value:self.layerAlpha];
  }
  [self.changeLayersArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:25 value:element];
  }];
  if (self.hasGradient) {
    [output writeMessage:30 value:self.gradient];
  }
  if (self.hasBrushType) {
    [output writeInt32:40 value:self.brushType];
  }
  const NSUInteger brushPointWidthArrayCount = self.brushPointWidthArray.count;
  if (brushPointWidthArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.brushPointWidthArray.data;
    for (NSUInteger i = 0; i < brushPointWidthArrayCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger brushRandomValueArrayCount = self.brushRandomValueArray.count;
  if (brushRandomValueArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.brushRandomValueArray.data;
    for (NSUInteger i = 0; i < brushRandomValueArrayCount; ++i) {
      [output writeInt32:42 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointsArray.count;
    const SInt32 *values = (const SInt32 *)self.pointsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    pointsMemoizedSerializedSize = dataSize;
  }
  if (self.hasWidth) {
    size_ += computeFloatSize(3, self.width);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(4, self.color);
  }
  if (self.hasPenType) {
    size_ += computeInt32Size(5, self.penType);
  }
  if (self.hasShapeType) {
    size_ += computeInt32Size(6, self.shapeType);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.rectComponentArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasShapeStroke) {
    size_ += computeBoolSize(8, self.shapeStroke);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointsXArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointsYArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasBetterColor) {
    size_ += computeInt32Size(13, self.betterColor);
  }
  if (self.hasDrawBg) {
    size_ += computeMessageSize(14, self.drawBg);
  }
  if (self.hasShadowOffsetX) {
    size_ += computeFloatSize(15, self.shadowOffsetX);
  }
  if (self.hasShadowOffsetY) {
    size_ += computeFloatSize(16, self.shadowOffsetY);
  }
  if (self.hasShadowColor) {
    size_ += computeInt32Size(17, self.shadowColor);
  }
  if (self.hasShadowBlur) {
    size_ += computeFloatSize(18, self.shadowBlur);
  }
  if (self.hasClipTag) {
    size_ += computeInt32Size(20, self.clipTag);
  }
  if (self.hasClipType) {
    size_ += computeInt32Size(21, self.clipType);
  }
  if (self.hasLayerTag) {
    size_ += computeInt32Size(23, self.layerTag);
  }
  if (self.hasLayerAlpha) {
    size_ += computeFloatSize(24, self.layerAlpha);
  }
  [self.changeLayersArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(25, element);
  }];
  if (self.hasGradient) {
    size_ += computeMessageSize(30, self.gradient);
  }
  if (self.hasBrushType) {
    size_ += computeInt32Size(40, self.brushType);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.brushPointWidthArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.brushRandomValueArray.count;
    const SInt32 *values = (const SInt32 *)self.brushRandomValueArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDrawAction*) parseFromData:(NSData*) data {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data] build];
}
+ (PBDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawAction*)[[[PBDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawActionBuilder*) builder {
  return [[PBDrawActionBuilder alloc] init];
}
+ (PBDrawActionBuilder*) builderWithPrototype:(PBDrawAction*) prototype {
  return [[PBDrawAction builder] mergeFrom:prototype];
}
- (PBDrawActionBuilder*) builder {
  return [PBDrawAction builder];
}
- (PBDrawActionBuilder*) toBuilder {
  return [PBDrawAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"points", obj];
  }];
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  if (self.hasPenType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penType", [NSNumber numberWithInteger:self.penType]];
  }
  if (self.hasShapeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shapeType", [NSNumber numberWithInteger:self.shapeType]];
  }
  [self.rectComponentArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rectComponent", obj];
  }];
  if (self.hasShapeStroke) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shapeStroke", [NSNumber numberWithBool:self.shapeStroke]];
  }
  [self.pointsXArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointsX", obj];
  }];
  [self.pointsYArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointsY", obj];
  }];
  if (self.hasBetterColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"betterColor", [NSNumber numberWithInteger:self.betterColor]];
  }
  if (self.hasDrawBg) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawBg"];
    [self.drawBg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasShadowOffsetX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shadowOffsetX", [NSNumber numberWithFloat:self.shadowOffsetX]];
  }
  if (self.hasShadowOffsetY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shadowOffsetY", [NSNumber numberWithFloat:self.shadowOffsetY]];
  }
  if (self.hasShadowColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shadowColor", [NSNumber numberWithInteger:self.shadowColor]];
  }
  if (self.hasShadowBlur) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shadowBlur", [NSNumber numberWithFloat:self.shadowBlur]];
  }
  if (self.hasClipTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clipTag", [NSNumber numberWithInteger:self.clipTag]];
  }
  if (self.hasClipType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clipType", [NSNumber numberWithInteger:self.clipType]];
  }
  if (self.hasLayerTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"layerTag", [NSNumber numberWithInteger:self.layerTag]];
  }
  if (self.hasLayerAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"layerAlpha", [NSNumber numberWithFloat:self.layerAlpha]];
  }
  [self.changeLayersArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"changeLayers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGradient) {
    [output appendFormat:@"%@%@ {\n", indent, @"gradient"];
    [self.gradient writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBrushType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brushType", [NSNumber numberWithInteger:self.brushType]];
  }
  [self.brushPointWidthArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brushPointWidth", obj];
  }];
  [self.brushRandomValueArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brushRandomValue", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDrawAction class]]) {
    return NO;
  }
  PBDrawAction *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      [self.pointsArray isEqualToArray:otherMessage.pointsArray] &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      self.hasPenType == otherMessage.hasPenType &&
      (!self.hasPenType || self.penType == otherMessage.penType) &&
      self.hasShapeType == otherMessage.hasShapeType &&
      (!self.hasShapeType || self.shapeType == otherMessage.shapeType) &&
      [self.rectComponentArray isEqualToArray:otherMessage.rectComponentArray] &&
      self.hasShapeStroke == otherMessage.hasShapeStroke &&
      (!self.hasShapeStroke || self.shapeStroke == otherMessage.shapeStroke) &&
      [self.pointsXArray isEqualToArray:otherMessage.pointsXArray] &&
      [self.pointsYArray isEqualToArray:otherMessage.pointsYArray] &&
      self.hasBetterColor == otherMessage.hasBetterColor &&
      (!self.hasBetterColor || self.betterColor == otherMessage.betterColor) &&
      self.hasDrawBg == otherMessage.hasDrawBg &&
      (!self.hasDrawBg || [self.drawBg isEqual:otherMessage.drawBg]) &&
      self.hasShadowOffsetX == otherMessage.hasShadowOffsetX &&
      (!self.hasShadowOffsetX || self.shadowOffsetX == otherMessage.shadowOffsetX) &&
      self.hasShadowOffsetY == otherMessage.hasShadowOffsetY &&
      (!self.hasShadowOffsetY || self.shadowOffsetY == otherMessage.shadowOffsetY) &&
      self.hasShadowColor == otherMessage.hasShadowColor &&
      (!self.hasShadowColor || self.shadowColor == otherMessage.shadowColor) &&
      self.hasShadowBlur == otherMessage.hasShadowBlur &&
      (!self.hasShadowBlur || self.shadowBlur == otherMessage.shadowBlur) &&
      self.hasClipTag == otherMessage.hasClipTag &&
      (!self.hasClipTag || self.clipTag == otherMessage.clipTag) &&
      self.hasClipType == otherMessage.hasClipType &&
      (!self.hasClipType || self.clipType == otherMessage.clipType) &&
      self.hasLayerTag == otherMessage.hasLayerTag &&
      (!self.hasLayerTag || self.layerTag == otherMessage.layerTag) &&
      self.hasLayerAlpha == otherMessage.hasLayerAlpha &&
      (!self.hasLayerAlpha || self.layerAlpha == otherMessage.layerAlpha) &&
      [self.changeLayersArray isEqualToArray:otherMessage.changeLayersArray] &&
      self.hasGradient == otherMessage.hasGradient &&
      (!self.hasGradient || [self.gradient isEqual:otherMessage.gradient]) &&
      self.hasBrushType == otherMessage.hasBrushType &&
      (!self.hasBrushType || self.brushType == otherMessage.brushType) &&
      [self.brushPointWidthArray isEqualToArray:otherMessage.brushPointWidthArray] &&
      [self.brushRandomValueArray isEqualToArray:otherMessage.brushRandomValueArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  if (self.hasPenType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.penType] hash];
  }
  if (self.hasShapeType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shapeType] hash];
  }
  [self.rectComponentArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasShapeStroke) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.shapeStroke] hash];
  }
  [self.pointsXArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.pointsYArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasBetterColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.betterColor] hash];
  }
  if (self.hasDrawBg) {
    hashCode = hashCode * 31 + [self.drawBg hash];
  }
  if (self.hasShadowOffsetX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.shadowOffsetX] hash];
  }
  if (self.hasShadowOffsetY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.shadowOffsetY] hash];
  }
  if (self.hasShadowColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shadowColor] hash];
  }
  if (self.hasShadowBlur) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.shadowBlur] hash];
  }
  if (self.hasClipTag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.clipTag] hash];
  }
  if (self.hasClipType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.clipType] hash];
  }
  if (self.hasLayerTag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.layerTag] hash];
  }
  if (self.hasLayerAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.layerAlpha] hash];
  }
  [self.changeLayersArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGradient) {
    hashCode = hashCode * 31 + [self.gradient hash];
  }
  if (self.hasBrushType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.brushType] hash];
  }
  [self.brushPointWidthArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.brushRandomValueArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawActionBuilder()
@property (strong) PBDrawAction* resultPbdrawAction;
@end

@implementation PBDrawActionBuilder
@synthesize resultPbdrawAction;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdrawAction = [[PBDrawAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdrawAction;
}
- (PBDrawActionBuilder*) clear {
  self.resultPbdrawAction = [[PBDrawAction alloc] init];
  return self;
}
- (PBDrawActionBuilder*) clone {
  return [PBDrawAction builderWithPrototype:resultPbdrawAction];
}
- (PBDrawAction*) defaultInstance {
  return [PBDrawAction defaultInstance];
}
- (PBDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawAction*) buildPartial {
  PBDrawAction* returnMe = resultPbdrawAction;
  self.resultPbdrawAction = nil;
  return returnMe;
}
- (PBDrawActionBuilder*) mergeFrom:(PBDrawAction*) other {
  if (other == [PBDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.pointsArray.count > 0) {
    if (resultPbdrawAction.pointsArray == nil) {
      resultPbdrawAction.pointsArray = [other.pointsArray copy];
    } else {
      [resultPbdrawAction.pointsArray appendArray:other.pointsArray];
    }
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasShapeType) {
    [self setShapeType:other.shapeType];
  }
  if (other.rectComponentArray.count > 0) {
    if (resultPbdrawAction.rectComponentArray == nil) {
      resultPbdrawAction.rectComponentArray = [other.rectComponentArray copy];
    } else {
      [resultPbdrawAction.rectComponentArray appendArray:other.rectComponentArray];
    }
  }
  if (other.hasShapeStroke) {
    [self setShapeStroke:other.shapeStroke];
  }
  if (other.pointsXArray.count > 0) {
    if (resultPbdrawAction.pointsXArray == nil) {
      resultPbdrawAction.pointsXArray = [other.pointsXArray copy];
    } else {
      [resultPbdrawAction.pointsXArray appendArray:other.pointsXArray];
    }
  }
  if (other.pointsYArray.count > 0) {
    if (resultPbdrawAction.pointsYArray == nil) {
      resultPbdrawAction.pointsYArray = [other.pointsYArray copy];
    } else {
      [resultPbdrawAction.pointsYArray appendArray:other.pointsYArray];
    }
  }
  if (other.hasBetterColor) {
    [self setBetterColor:other.betterColor];
  }
  if (other.hasDrawBg) {
    [self mergeDrawBg:other.drawBg];
  }
  if (other.hasShadowOffsetX) {
    [self setShadowOffsetX:other.shadowOffsetX];
  }
  if (other.hasShadowOffsetY) {
    [self setShadowOffsetY:other.shadowOffsetY];
  }
  if (other.hasShadowColor) {
    [self setShadowColor:other.shadowColor];
  }
  if (other.hasShadowBlur) {
    [self setShadowBlur:other.shadowBlur];
  }
  if (other.hasClipTag) {
    [self setClipTag:other.clipTag];
  }
  if (other.hasClipType) {
    [self setClipType:other.clipType];
  }
  if (other.hasLayerTag) {
    [self setLayerTag:other.layerTag];
  }
  if (other.hasLayerAlpha) {
    [self setLayerAlpha:other.layerAlpha];
  }
  if (other.changeLayersArray.count > 0) {
    if (resultPbdrawAction.changeLayersArray == nil) {
      resultPbdrawAction.changeLayersArray = [[NSMutableArray alloc] initWithArray:other.changeLayersArray];
    } else {
      [resultPbdrawAction.changeLayersArray addObjectsFromArray:other.changeLayersArray];
    }
  }
  if (other.hasGradient) {
    [self mergeGradient:other.gradient];
  }
  if (other.hasBrushType) {
    [self setBrushType:other.brushType];
  }
  if (other.brushPointWidthArray.count > 0) {
    if (resultPbdrawAction.brushPointWidthArray == nil) {
      resultPbdrawAction.brushPointWidthArray = [other.brushPointWidthArray copy];
    } else {
      [resultPbdrawAction.brushPointWidthArray appendArray:other.brushPointWidthArray];
    }
  }
  if (other.brushRandomValueArray.count > 0) {
    if (resultPbdrawAction.brushRandomValueArray == nil) {
      resultPbdrawAction.brushRandomValueArray = [other.brushRandomValueArray copy];
    } else {
      [resultPbdrawAction.brushRandomValueArray appendArray:other.brushRandomValueArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultPbdrawAction.pointsArray == nil) {
          resultPbdrawAction.pointsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultPbdrawAction.pointsArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 29: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
      case 40: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 48: {
        [self setShapeType:[input readInt32]];
        break;
      }
      case 61: {
        [self addRectComponent:[input readFloat]];
        break;
      }
      case 64: {
        [self setShapeStroke:[input readBool]];
        break;
      }
      case 93: {
        [self addPointsX:[input readFloat]];
        break;
      }
      case 101: {
        [self addPointsY:[input readFloat]];
        break;
      }
      case 104: {
        [self setBetterColor:[input readInt32]];
        break;
      }
      case 114: {
        PBDrawBgBuilder* subBuilder = [PBDrawBg builder];
        if (self.hasDrawBg) {
          [subBuilder mergeFrom:self.drawBg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawBg:[subBuilder buildPartial]];
        break;
      }
      case 125: {
        [self setShadowOffsetX:[input readFloat]];
        break;
      }
      case 133: {
        [self setShadowOffsetY:[input readFloat]];
        break;
      }
      case 136: {
        [self setShadowColor:[input readInt32]];
        break;
      }
      case 149: {
        [self setShadowBlur:[input readFloat]];
        break;
      }
      case 160: {
        [self setClipTag:[input readInt32]];
        break;
      }
      case 168: {
        [self setClipType:[input readInt32]];
        break;
      }
      case 184: {
        [self setLayerTag:[input readInt32]];
        break;
      }
      case 197: {
        [self setLayerAlpha:[input readFloat]];
        break;
      }
      case 202: {
        PBLayerBuilder* subBuilder = [PBLayer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChangeLayers:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        PBGradientBuilder* subBuilder = [PBGradient builder];
        if (self.hasGradient) {
          [subBuilder mergeFrom:self.gradient];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGradient:[subBuilder buildPartial]];
        break;
      }
      case 320: {
        [self setBrushType:[input readInt32]];
        break;
      }
      case 333: {
        [self addBrushPointWidth:[input readFloat]];
        break;
      }
      case 336: {
        [self addBrushRandomValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbdrawAction.hasType;
}
- (SInt32) type {
  return resultPbdrawAction.type;
}
- (PBDrawActionBuilder*) setType:(SInt32) value {
  resultPbdrawAction.hasType = YES;
  resultPbdrawAction.type = value;
  return self;
}
- (PBDrawActionBuilder*) clearType {
  resultPbdrawAction.hasType = NO;
  resultPbdrawAction.type = 0;
  return self;
}
- (PBAppendableArray *)points {
  return resultPbdrawAction.pointsArray;
}
- (SInt32)pointsAtIndex:(NSUInteger)index {
  return [resultPbdrawAction pointsAtIndex:index];
}
- (PBDrawActionBuilder *)addPoints:(SInt32)value {
  if (resultPbdrawAction.pointsArray == nil) {
    resultPbdrawAction.pointsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbdrawAction.pointsArray addInt32:value];
  return self;
}
- (PBDrawActionBuilder *)setPointsArray:(NSArray *)array {
  resultPbdrawAction.pointsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBDrawActionBuilder *)setPointsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbdrawAction.pointsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBDrawActionBuilder *)clearPoints {
  resultPbdrawAction.pointsArray = nil;
  return self;
}
- (BOOL) hasWidth {
  return resultPbdrawAction.hasWidth;
}
- (Float32) width {
  return resultPbdrawAction.width;
}
- (PBDrawActionBuilder*) setWidth:(Float32) value {
  resultPbdrawAction.hasWidth = YES;
  resultPbdrawAction.width = value;
  return self;
}
- (PBDrawActionBuilder*) clearWidth {
  resultPbdrawAction.hasWidth = NO;
  resultPbdrawAction.width = 0;
  return self;
}
- (BOOL) hasColor {
  return resultPbdrawAction.hasColor;
}
- (SInt32) color {
  return resultPbdrawAction.color;
}
- (PBDrawActionBuilder*) setColor:(SInt32) value {
  resultPbdrawAction.hasColor = YES;
  resultPbdrawAction.color = value;
  return self;
}
- (PBDrawActionBuilder*) clearColor {
  resultPbdrawAction.hasColor = NO;
  resultPbdrawAction.color = 0;
  return self;
}
- (BOOL) hasPenType {
  return resultPbdrawAction.hasPenType;
}
- (SInt32) penType {
  return resultPbdrawAction.penType;
}
- (PBDrawActionBuilder*) setPenType:(SInt32) value {
  resultPbdrawAction.hasPenType = YES;
  resultPbdrawAction.penType = value;
  return self;
}
- (PBDrawActionBuilder*) clearPenType {
  resultPbdrawAction.hasPenType = NO;
  resultPbdrawAction.penType = 0;
  return self;
}
- (BOOL) hasShapeType {
  return resultPbdrawAction.hasShapeType;
}
- (SInt32) shapeType {
  return resultPbdrawAction.shapeType;
}
- (PBDrawActionBuilder*) setShapeType:(SInt32) value {
  resultPbdrawAction.hasShapeType = YES;
  resultPbdrawAction.shapeType = value;
  return self;
}
- (PBDrawActionBuilder*) clearShapeType {
  resultPbdrawAction.hasShapeType = NO;
  resultPbdrawAction.shapeType = 0;
  return self;
}
- (PBAppendableArray *)rectComponent {
  return resultPbdrawAction.rectComponentArray;
}
- (Float32)rectComponentAtIndex:(NSUInteger)index {
  return [resultPbdrawAction rectComponentAtIndex:index];
}
- (PBDrawActionBuilder *)addRectComponent:(Float32)value {
  if (resultPbdrawAction.rectComponentArray == nil) {
    resultPbdrawAction.rectComponentArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbdrawAction.rectComponentArray addFloat:value];
  return self;
}
- (PBDrawActionBuilder *)setRectComponentArray:(NSArray *)array {
  resultPbdrawAction.rectComponentArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)setRectComponentValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbdrawAction.rectComponentArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)clearRectComponent {
  resultPbdrawAction.rectComponentArray = nil;
  return self;
}
- (BOOL) hasShapeStroke {
  return resultPbdrawAction.hasShapeStroke;
}
- (BOOL) shapeStroke {
  return resultPbdrawAction.shapeStroke;
}
- (PBDrawActionBuilder*) setShapeStroke:(BOOL) value {
  resultPbdrawAction.hasShapeStroke = YES;
  resultPbdrawAction.shapeStroke = value;
  return self;
}
- (PBDrawActionBuilder*) clearShapeStroke {
  resultPbdrawAction.hasShapeStroke = NO;
  resultPbdrawAction.shapeStroke = NO;
  return self;
}
- (PBAppendableArray *)pointsX {
  return resultPbdrawAction.pointsXArray;
}
- (Float32)pointsXAtIndex:(NSUInteger)index {
  return [resultPbdrawAction pointsXAtIndex:index];
}
- (PBDrawActionBuilder *)addPointsX:(Float32)value {
  if (resultPbdrawAction.pointsXArray == nil) {
    resultPbdrawAction.pointsXArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbdrawAction.pointsXArray addFloat:value];
  return self;
}
- (PBDrawActionBuilder *)setPointsXArray:(NSArray *)array {
  resultPbdrawAction.pointsXArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)setPointsXValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbdrawAction.pointsXArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)clearPointsX {
  resultPbdrawAction.pointsXArray = nil;
  return self;
}
- (PBAppendableArray *)pointsY {
  return resultPbdrawAction.pointsYArray;
}
- (Float32)pointsYAtIndex:(NSUInteger)index {
  return [resultPbdrawAction pointsYAtIndex:index];
}
- (PBDrawActionBuilder *)addPointsY:(Float32)value {
  if (resultPbdrawAction.pointsYArray == nil) {
    resultPbdrawAction.pointsYArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbdrawAction.pointsYArray addFloat:value];
  return self;
}
- (PBDrawActionBuilder *)setPointsYArray:(NSArray *)array {
  resultPbdrawAction.pointsYArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)setPointsYValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbdrawAction.pointsYArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)clearPointsY {
  resultPbdrawAction.pointsYArray = nil;
  return self;
}
- (BOOL) hasBetterColor {
  return resultPbdrawAction.hasBetterColor;
}
- (SInt32) betterColor {
  return resultPbdrawAction.betterColor;
}
- (PBDrawActionBuilder*) setBetterColor:(SInt32) value {
  resultPbdrawAction.hasBetterColor = YES;
  resultPbdrawAction.betterColor = value;
  return self;
}
- (PBDrawActionBuilder*) clearBetterColor {
  resultPbdrawAction.hasBetterColor = NO;
  resultPbdrawAction.betterColor = 0;
  return self;
}
- (BOOL) hasDrawBg {
  return resultPbdrawAction.hasDrawBg;
}
- (PBDrawBg*) drawBg {
  return resultPbdrawAction.drawBg;
}
- (PBDrawActionBuilder*) setDrawBg:(PBDrawBg*) value {
  resultPbdrawAction.hasDrawBg = YES;
  resultPbdrawAction.drawBg = value;
  return self;
}
- (PBDrawActionBuilder*) setDrawBgBuilder:(PBDrawBgBuilder*) builderForValue {
  return [self setDrawBg:[builderForValue build]];
}
- (PBDrawActionBuilder*) mergeDrawBg:(PBDrawBg*) value {
  if (resultPbdrawAction.hasDrawBg &&
      resultPbdrawAction.drawBg != [PBDrawBg defaultInstance]) {
    resultPbdrawAction.drawBg =
      [[[PBDrawBg builderWithPrototype:resultPbdrawAction.drawBg] mergeFrom:value] buildPartial];
  } else {
    resultPbdrawAction.drawBg = value;
  }
  resultPbdrawAction.hasDrawBg = YES;
  return self;
}
- (PBDrawActionBuilder*) clearDrawBg {
  resultPbdrawAction.hasDrawBg = NO;
  resultPbdrawAction.drawBg = [PBDrawBg defaultInstance];
  return self;
}
- (BOOL) hasShadowOffsetX {
  return resultPbdrawAction.hasShadowOffsetX;
}
- (Float32) shadowOffsetX {
  return resultPbdrawAction.shadowOffsetX;
}
- (PBDrawActionBuilder*) setShadowOffsetX:(Float32) value {
  resultPbdrawAction.hasShadowOffsetX = YES;
  resultPbdrawAction.shadowOffsetX = value;
  return self;
}
- (PBDrawActionBuilder*) clearShadowOffsetX {
  resultPbdrawAction.hasShadowOffsetX = NO;
  resultPbdrawAction.shadowOffsetX = 0;
  return self;
}
- (BOOL) hasShadowOffsetY {
  return resultPbdrawAction.hasShadowOffsetY;
}
- (Float32) shadowOffsetY {
  return resultPbdrawAction.shadowOffsetY;
}
- (PBDrawActionBuilder*) setShadowOffsetY:(Float32) value {
  resultPbdrawAction.hasShadowOffsetY = YES;
  resultPbdrawAction.shadowOffsetY = value;
  return self;
}
- (PBDrawActionBuilder*) clearShadowOffsetY {
  resultPbdrawAction.hasShadowOffsetY = NO;
  resultPbdrawAction.shadowOffsetY = 0;
  return self;
}
- (BOOL) hasShadowColor {
  return resultPbdrawAction.hasShadowColor;
}
- (SInt32) shadowColor {
  return resultPbdrawAction.shadowColor;
}
- (PBDrawActionBuilder*) setShadowColor:(SInt32) value {
  resultPbdrawAction.hasShadowColor = YES;
  resultPbdrawAction.shadowColor = value;
  return self;
}
- (PBDrawActionBuilder*) clearShadowColor {
  resultPbdrawAction.hasShadowColor = NO;
  resultPbdrawAction.shadowColor = 0;
  return self;
}
- (BOOL) hasShadowBlur {
  return resultPbdrawAction.hasShadowBlur;
}
- (Float32) shadowBlur {
  return resultPbdrawAction.shadowBlur;
}
- (PBDrawActionBuilder*) setShadowBlur:(Float32) value {
  resultPbdrawAction.hasShadowBlur = YES;
  resultPbdrawAction.shadowBlur = value;
  return self;
}
- (PBDrawActionBuilder*) clearShadowBlur {
  resultPbdrawAction.hasShadowBlur = NO;
  resultPbdrawAction.shadowBlur = 0;
  return self;
}
- (BOOL) hasClipTag {
  return resultPbdrawAction.hasClipTag;
}
- (SInt32) clipTag {
  return resultPbdrawAction.clipTag;
}
- (PBDrawActionBuilder*) setClipTag:(SInt32) value {
  resultPbdrawAction.hasClipTag = YES;
  resultPbdrawAction.clipTag = value;
  return self;
}
- (PBDrawActionBuilder*) clearClipTag {
  resultPbdrawAction.hasClipTag = NO;
  resultPbdrawAction.clipTag = 0;
  return self;
}
- (BOOL) hasClipType {
  return resultPbdrawAction.hasClipType;
}
- (SInt32) clipType {
  return resultPbdrawAction.clipType;
}
- (PBDrawActionBuilder*) setClipType:(SInt32) value {
  resultPbdrawAction.hasClipType = YES;
  resultPbdrawAction.clipType = value;
  return self;
}
- (PBDrawActionBuilder*) clearClipType {
  resultPbdrawAction.hasClipType = NO;
  resultPbdrawAction.clipType = 0;
  return self;
}
- (BOOL) hasLayerTag {
  return resultPbdrawAction.hasLayerTag;
}
- (SInt32) layerTag {
  return resultPbdrawAction.layerTag;
}
- (PBDrawActionBuilder*) setLayerTag:(SInt32) value {
  resultPbdrawAction.hasLayerTag = YES;
  resultPbdrawAction.layerTag = value;
  return self;
}
- (PBDrawActionBuilder*) clearLayerTag {
  resultPbdrawAction.hasLayerTag = NO;
  resultPbdrawAction.layerTag = 0;
  return self;
}
- (BOOL) hasLayerAlpha {
  return resultPbdrawAction.hasLayerAlpha;
}
- (Float32) layerAlpha {
  return resultPbdrawAction.layerAlpha;
}
- (PBDrawActionBuilder*) setLayerAlpha:(Float32) value {
  resultPbdrawAction.hasLayerAlpha = YES;
  resultPbdrawAction.layerAlpha = value;
  return self;
}
- (PBDrawActionBuilder*) clearLayerAlpha {
  resultPbdrawAction.hasLayerAlpha = NO;
  resultPbdrawAction.layerAlpha = 1;
  return self;
}
- (NSMutableArray *)changeLayers {
  return resultPbdrawAction.changeLayersArray;
}
- (PBLayer*)changeLayersAtIndex:(NSUInteger)index {
  return [resultPbdrawAction changeLayersAtIndex:index];
}
- (PBDrawActionBuilder *)addChangeLayers:(PBLayer*)value {
  if (resultPbdrawAction.changeLayersArray == nil) {
    resultPbdrawAction.changeLayersArray = [[NSMutableArray alloc]init];
  }
  [resultPbdrawAction.changeLayersArray addObject:value];
  return self;
}
- (PBDrawActionBuilder *)setChangeLayersArray:(NSArray *)array {
  resultPbdrawAction.changeLayersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDrawActionBuilder *)clearChangeLayers {
  resultPbdrawAction.changeLayersArray = nil;
  return self;
}
- (BOOL) hasGradient {
  return resultPbdrawAction.hasGradient;
}
- (PBGradient*) gradient {
  return resultPbdrawAction.gradient;
}
- (PBDrawActionBuilder*) setGradient:(PBGradient*) value {
  resultPbdrawAction.hasGradient = YES;
  resultPbdrawAction.gradient = value;
  return self;
}
- (PBDrawActionBuilder*) setGradientBuilder:(PBGradientBuilder*) builderForValue {
  return [self setGradient:[builderForValue build]];
}
- (PBDrawActionBuilder*) mergeGradient:(PBGradient*) value {
  if (resultPbdrawAction.hasGradient &&
      resultPbdrawAction.gradient != [PBGradient defaultInstance]) {
    resultPbdrawAction.gradient =
      [[[PBGradient builderWithPrototype:resultPbdrawAction.gradient] mergeFrom:value] buildPartial];
  } else {
    resultPbdrawAction.gradient = value;
  }
  resultPbdrawAction.hasGradient = YES;
  return self;
}
- (PBDrawActionBuilder*) clearGradient {
  resultPbdrawAction.hasGradient = NO;
  resultPbdrawAction.gradient = [PBGradient defaultInstance];
  return self;
}
- (BOOL) hasBrushType {
  return resultPbdrawAction.hasBrushType;
}
- (SInt32) brushType {
  return resultPbdrawAction.brushType;
}
- (PBDrawActionBuilder*) setBrushType:(SInt32) value {
  resultPbdrawAction.hasBrushType = YES;
  resultPbdrawAction.brushType = value;
  return self;
}
- (PBDrawActionBuilder*) clearBrushType {
  resultPbdrawAction.hasBrushType = NO;
  resultPbdrawAction.brushType = 0;
  return self;
}
- (PBAppendableArray *)brushPointWidth {
  return resultPbdrawAction.brushPointWidthArray;
}
- (Float32)brushPointWidthAtIndex:(NSUInteger)index {
  return [resultPbdrawAction brushPointWidthAtIndex:index];
}
- (PBDrawActionBuilder *)addBrushPointWidth:(Float32)value {
  if (resultPbdrawAction.brushPointWidthArray == nil) {
    resultPbdrawAction.brushPointWidthArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbdrawAction.brushPointWidthArray addFloat:value];
  return self;
}
- (PBDrawActionBuilder *)setBrushPointWidthArray:(NSArray *)array {
  resultPbdrawAction.brushPointWidthArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)setBrushPointWidthValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbdrawAction.brushPointWidthArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBDrawActionBuilder *)clearBrushPointWidth {
  resultPbdrawAction.brushPointWidthArray = nil;
  return self;
}
- (PBAppendableArray *)brushRandomValue {
  return resultPbdrawAction.brushRandomValueArray;
}
- (SInt32)brushRandomValueAtIndex:(NSUInteger)index {
  return [resultPbdrawAction brushRandomValueAtIndex:index];
}
- (PBDrawActionBuilder *)addBrushRandomValue:(SInt32)value {
  if (resultPbdrawAction.brushRandomValueArray == nil) {
    resultPbdrawAction.brushRandomValueArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbdrawAction.brushRandomValueArray addInt32:value];
  return self;
}
- (PBDrawActionBuilder *)setBrushRandomValueArray:(NSArray *)array {
  resultPbdrawAction.brushRandomValueArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBDrawActionBuilder *)setBrushRandomValueValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbdrawAction.brushRandomValueArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBDrawActionBuilder *)clearBrushRandomValue {
  resultPbdrawAction.brushRandomValueArray = nil;
  return self;
}
@end

@interface PBMessage ()
@property (strong) NSString* messageId;
@property (strong) NSString* from;
@property (strong) NSString* to;
@property SInt32 status;
@property SInt32 type;
@property BOOL isGroup;
@property (strong) PBGameUser* fromUser;
@property (strong) PBGameUser* toUser;
@property (strong) NSString* text;
@property (strong) NSMutableArray * drawDataArray;
@property SInt32 createDate;
@property SInt32 drawDataVersion;
@property (strong) PBSize* canvasSize;
@property Float64 longitude;
@property Float64 latitude;
@property (strong) NSString* reqMessageId;
@property SInt32 replyResult;
@property (strong) NSString* imageUrl;
@property (strong) NSString* thumbImageUrl;
@end

@implementation PBMessage

- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) _value_ {
  hasTo_ = !!_value_;
}
@synthesize to;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasIsGroup {
  return !!hasIsGroup_;
}
- (void) setHasIsGroup:(BOOL) _value_ {
  hasIsGroup_ = !!_value_;
}
- (BOOL) isGroup {
  return !!isGroup_;
}
- (void) setIsGroup:(BOOL) _value_ {
  isGroup_ = !!_value_;
}
- (BOOL) hasFromUser {
  return !!hasFromUser_;
}
- (void) setHasFromUser:(BOOL) _value_ {
  hasFromUser_ = !!_value_;
}
@synthesize fromUser;
- (BOOL) hasToUser {
  return !!hasToUser_;
}
- (void) setHasToUser:(BOOL) _value_ {
  hasToUser_ = !!_value_;
}
@synthesize toUser;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
@synthesize drawDataArray;
@dynamic drawData;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasDrawDataVersion {
  return !!hasDrawDataVersion_;
}
- (void) setHasDrawDataVersion:(BOOL) _value_ {
  hasDrawDataVersion_ = !!_value_;
}
@synthesize drawDataVersion;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasReqMessageId {
  return !!hasReqMessageId_;
}
- (void) setHasReqMessageId:(BOOL) _value_ {
  hasReqMessageId_ = !!_value_;
}
@synthesize reqMessageId;
- (BOOL) hasReplyResult {
  return !!hasReplyResult_;
}
- (void) setHasReplyResult:(BOOL) _value_ {
  hasReplyResult_ = !!_value_;
}
@synthesize replyResult;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) _value_ {
  hasImageUrl_ = !!_value_;
}
@synthesize imageUrl;
- (BOOL) hasThumbImageUrl {
  return !!hasThumbImageUrl_;
}
- (void) setHasThumbImageUrl:(BOOL) _value_ {
  hasThumbImageUrl_ = !!_value_;
}
@synthesize thumbImageUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.messageId = @"";
    self.from = @"";
    self.to = @"";
    self.status = 0;
    self.type = 0;
    self.isGroup = NO;
    self.fromUser = [PBGameUser defaultInstance];
    self.toUser = [PBGameUser defaultInstance];
    self.text = @"";
    self.createDate = 0;
    self.drawDataVersion = 0;
    self.canvasSize = [PBSize defaultInstance];
    self.longitude = 0;
    self.latitude = 0;
    self.reqMessageId = @"";
    self.replyResult = 0;
    self.imageUrl = @"";
    self.thumbImageUrl = @"";
  }
  return self;
}
static PBMessage* defaultPBMessageInstance = nil;
+ (void) initialize {
  if (self == [PBMessage class]) {
    defaultPBMessageInstance = [[PBMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultPBMessageInstance;
}
- (NSArray *)drawData {
  return drawDataArray;
}
- (PBDrawAction*)drawDataAtIndex:(NSUInteger)index {
  return [drawDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMessageId) {
    return NO;
  }
  if (!self.hasFrom) {
    return NO;
  }
  if (!self.hasTo) {
    return NO;
  }
  if (self.hasFromUser) {
    if (!self.fromUser.isInitialized) {
      return NO;
    }
  }
  if (self.hasToUser) {
    if (!self.toUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitdrawData = YES;
   [self.drawData enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawData = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawData) return isInitdrawData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessageId) {
    [output writeString:1 value:self.messageId];
  }
  if (self.hasFrom) {
    [output writeString:2 value:self.from];
  }
  if (self.hasTo) {
    [output writeString:3 value:self.to];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  if (self.hasType) {
    [output writeInt32:5 value:self.type];
  }
  if (self.hasIsGroup) {
    [output writeBool:6 value:self.isGroup];
  }
  if (self.hasFromUser) {
    [output writeMessage:7 value:self.fromUser];
  }
  if (self.hasToUser) {
    [output writeMessage:8 value:self.toUser];
  }
  if (self.hasText) {
    [output writeString:20 value:self.text];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:21 value:element];
  }];
  if (self.hasCreateDate) {
    [output writeInt32:22 value:self.createDate];
  }
  if (self.hasDrawDataVersion) {
    [output writeInt32:23 value:self.drawDataVersion];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:24 value:self.canvasSize];
  }
  if (self.hasLongitude) {
    [output writeDouble:31 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeDouble:32 value:self.latitude];
  }
  if (self.hasReqMessageId) {
    [output writeString:33 value:self.reqMessageId];
  }
  if (self.hasReplyResult) {
    [output writeInt32:34 value:self.replyResult];
  }
  if (self.hasImageUrl) {
    [output writeString:41 value:self.imageUrl];
  }
  if (self.hasThumbImageUrl) {
    [output writeString:42 value:self.thumbImageUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMessageId) {
    size_ += computeStringSize(1, self.messageId);
  }
  if (self.hasFrom) {
    size_ += computeStringSize(2, self.from);
  }
  if (self.hasTo) {
    size_ += computeStringSize(3, self.to);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(4, self.status);
  }
  if (self.hasType) {
    size_ += computeInt32Size(5, self.type);
  }
  if (self.hasIsGroup) {
    size_ += computeBoolSize(6, self.isGroup);
  }
  if (self.hasFromUser) {
    size_ += computeMessageSize(7, self.fromUser);
  }
  if (self.hasToUser) {
    size_ += computeMessageSize(8, self.toUser);
  }
  if (self.hasText) {
    size_ += computeStringSize(20, self.text);
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(21, element);
  }];
  if (self.hasCreateDate) {
    size_ += computeInt32Size(22, self.createDate);
  }
  if (self.hasDrawDataVersion) {
    size_ += computeInt32Size(23, self.drawDataVersion);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(24, self.canvasSize);
  }
  if (self.hasLongitude) {
    size_ += computeDoubleSize(31, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeDoubleSize(32, self.latitude);
  }
  if (self.hasReqMessageId) {
    size_ += computeStringSize(33, self.reqMessageId);
  }
  if (self.hasReplyResult) {
    size_ += computeInt32Size(34, self.replyResult);
  }
  if (self.hasImageUrl) {
    size_ += computeStringSize(41, self.imageUrl);
  }
  if (self.hasThumbImageUrl) {
    size_ += computeStringSize(42, self.thumbImageUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBMessage*) parseFromData:(NSData*) data {
  return (PBMessage*)[[[PBMessage builder] mergeFromData:data] build];
}
+ (PBMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMessage*) parseFromInputStream:(NSInputStream*) input {
  return (PBMessage*)[[[PBMessage builder] mergeFromInputStream:input] build];
}
+ (PBMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMessage*)[[[PBMessage builder] mergeFromCodedInputStream:input] build];
}
+ (PBMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessage*)[[[PBMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageBuilder*) builder {
  return [[PBMessageBuilder alloc] init];
}
+ (PBMessageBuilder*) builderWithPrototype:(PBMessage*) prototype {
  return [[PBMessage builder] mergeFrom:prototype];
}
- (PBMessageBuilder*) builder {
  return [PBMessage builder];
}
- (PBMessageBuilder*) toBuilder {
  return [PBMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", self.messageId];
  }
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"from", self.from];
  }
  if (self.hasTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"to", self.to];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasIsGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isGroup", [NSNumber numberWithBool:self.isGroup]];
  }
  if (self.hasFromUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromUser"];
    [self.fromUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasToUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"toUser"];
    [self.toUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasDrawDataVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"drawDataVersion", [NSNumber numberWithInteger:self.drawDataVersion]];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  if (self.hasReqMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqMessageId", self.reqMessageId];
  }
  if (self.hasReplyResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyResult", [NSNumber numberWithInteger:self.replyResult]];
  }
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  if (self.hasThumbImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumbImageUrl", self.thumbImageUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBMessage class]]) {
    return NO;
  }
  PBMessage *otherMessage = other;
  return
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || [self.messageId isEqual:otherMessage.messageId]) &&
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.from isEqual:otherMessage.from]) &&
      self.hasTo == otherMessage.hasTo &&
      (!self.hasTo || [self.to isEqual:otherMessage.to]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasIsGroup == otherMessage.hasIsGroup &&
      (!self.hasIsGroup || self.isGroup == otherMessage.isGroup) &&
      self.hasFromUser == otherMessage.hasFromUser &&
      (!self.hasFromUser || [self.fromUser isEqual:otherMessage.fromUser]) &&
      self.hasToUser == otherMessage.hasToUser &&
      (!self.hasToUser || [self.toUser isEqual:otherMessage.toUser]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      [self.drawDataArray isEqualToArray:otherMessage.drawDataArray] &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasDrawDataVersion == otherMessage.hasDrawDataVersion &&
      (!self.hasDrawDataVersion || self.drawDataVersion == otherMessage.drawDataVersion) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasReqMessageId == otherMessage.hasReqMessageId &&
      (!self.hasReqMessageId || [self.reqMessageId isEqual:otherMessage.reqMessageId]) &&
      self.hasReplyResult == otherMessage.hasReplyResult &&
      (!self.hasReplyResult || self.replyResult == otherMessage.replyResult) &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      self.hasThumbImageUrl == otherMessage.hasThumbImageUrl &&
      (!self.hasThumbImageUrl || [self.thumbImageUrl isEqual:otherMessage.thumbImageUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [self.messageId hash];
  }
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.from hash];
  }
  if (self.hasTo) {
    hashCode = hashCode * 31 + [self.to hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasIsGroup) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isGroup] hash];
  }
  if (self.hasFromUser) {
    hashCode = hashCode * 31 + [self.fromUser hash];
  }
  if (self.hasToUser) {
    hashCode = hashCode * 31 + [self.toUser hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasDrawDataVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.drawDataVersion] hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  if (self.hasReqMessageId) {
    hashCode = hashCode * 31 + [self.reqMessageId hash];
  }
  if (self.hasReplyResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.replyResult] hash];
  }
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  if (self.hasThumbImageUrl) {
    hashCode = hashCode * 31 + [self.thumbImageUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBMessageBuilder()
@property (strong) PBMessage* resultPbmessage;
@end

@implementation PBMessageBuilder
@synthesize resultPbmessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbmessage = [[PBMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbmessage;
}
- (PBMessageBuilder*) clear {
  self.resultPbmessage = [[PBMessage alloc] init];
  return self;
}
- (PBMessageBuilder*) clone {
  return [PBMessage builderWithPrototype:resultPbmessage];
}
- (PBMessage*) defaultInstance {
  return [PBMessage defaultInstance];
}
- (PBMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMessage*) buildPartial {
  PBMessage* returnMe = resultPbmessage;
  self.resultPbmessage = nil;
  return returnMe;
}
- (PBMessageBuilder*) mergeFrom:(PBMessage*) other {
  if (other == [PBMessage defaultInstance]) {
    return self;
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasIsGroup) {
    [self setIsGroup:other.isGroup];
  }
  if (other.hasFromUser) {
    [self mergeFromUser:other.fromUser];
  }
  if (other.hasToUser) {
    [self mergeToUser:other.toUser];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.drawDataArray.count > 0) {
    if (resultPbmessage.drawDataArray == nil) {
      resultPbmessage.drawDataArray = [[NSMutableArray alloc] initWithArray:other.drawDataArray];
    } else {
      [resultPbmessage.drawDataArray addObjectsFromArray:other.drawDataArray];
    }
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasDrawDataVersion) {
    [self setDrawDataVersion:other.drawDataVersion];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasReqMessageId) {
    [self setReqMessageId:other.reqMessageId];
  }
  if (other.hasReplyResult) {
    [self setReplyResult:other.replyResult];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  if (other.hasThumbImageUrl) {
    [self setThumbImageUrl:other.thumbImageUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessageId:[input readString]];
        break;
      }
      case 18: {
        [self setFrom:[input readString]];
        break;
      }
      case 26: {
        [self setTo:[input readString]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setType:[input readInt32]];
        break;
      }
      case 48: {
        [self setIsGroup:[input readBool]];
        break;
      }
      case 58: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasFromUser) {
          [subBuilder mergeFrom:self.fromUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromUser:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasToUser) {
          [subBuilder mergeFrom:self.toUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setToUser:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setText:[input readString]];
        break;
      }
      case 170: {
        PBDrawActionBuilder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 184: {
        [self setDrawDataVersion:[input readInt32]];
        break;
      }
      case 194: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 249: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 257: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 266: {
        [self setReqMessageId:[input readString]];
        break;
      }
      case 272: {
        [self setReplyResult:[input readInt32]];
        break;
      }
      case 330: {
        [self setImageUrl:[input readString]];
        break;
      }
      case 338: {
        [self setThumbImageUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMessageId {
  return resultPbmessage.hasMessageId;
}
- (NSString*) messageId {
  return resultPbmessage.messageId;
}
- (PBMessageBuilder*) setMessageId:(NSString*) value {
  resultPbmessage.hasMessageId = YES;
  resultPbmessage.messageId = value;
  return self;
}
- (PBMessageBuilder*) clearMessageId {
  resultPbmessage.hasMessageId = NO;
  resultPbmessage.messageId = @"";
  return self;
}
- (BOOL) hasFrom {
  return resultPbmessage.hasFrom;
}
- (NSString*) from {
  return resultPbmessage.from;
}
- (PBMessageBuilder*) setFrom:(NSString*) value {
  resultPbmessage.hasFrom = YES;
  resultPbmessage.from = value;
  return self;
}
- (PBMessageBuilder*) clearFrom {
  resultPbmessage.hasFrom = NO;
  resultPbmessage.from = @"";
  return self;
}
- (BOOL) hasTo {
  return resultPbmessage.hasTo;
}
- (NSString*) to {
  return resultPbmessage.to;
}
- (PBMessageBuilder*) setTo:(NSString*) value {
  resultPbmessage.hasTo = YES;
  resultPbmessage.to = value;
  return self;
}
- (PBMessageBuilder*) clearTo {
  resultPbmessage.hasTo = NO;
  resultPbmessage.to = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultPbmessage.hasStatus;
}
- (SInt32) status {
  return resultPbmessage.status;
}
- (PBMessageBuilder*) setStatus:(SInt32) value {
  resultPbmessage.hasStatus = YES;
  resultPbmessage.status = value;
  return self;
}
- (PBMessageBuilder*) clearStatus {
  resultPbmessage.hasStatus = NO;
  resultPbmessage.status = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbmessage.hasType;
}
- (SInt32) type {
  return resultPbmessage.type;
}
- (PBMessageBuilder*) setType:(SInt32) value {
  resultPbmessage.hasType = YES;
  resultPbmessage.type = value;
  return self;
}
- (PBMessageBuilder*) clearType {
  resultPbmessage.hasType = NO;
  resultPbmessage.type = 0;
  return self;
}
- (BOOL) hasIsGroup {
  return resultPbmessage.hasIsGroup;
}
- (BOOL) isGroup {
  return resultPbmessage.isGroup;
}
- (PBMessageBuilder*) setIsGroup:(BOOL) value {
  resultPbmessage.hasIsGroup = YES;
  resultPbmessage.isGroup = value;
  return self;
}
- (PBMessageBuilder*) clearIsGroup {
  resultPbmessage.hasIsGroup = NO;
  resultPbmessage.isGroup = NO;
  return self;
}
- (BOOL) hasFromUser {
  return resultPbmessage.hasFromUser;
}
- (PBGameUser*) fromUser {
  return resultPbmessage.fromUser;
}
- (PBMessageBuilder*) setFromUser:(PBGameUser*) value {
  resultPbmessage.hasFromUser = YES;
  resultPbmessage.fromUser = value;
  return self;
}
- (PBMessageBuilder*) setFromUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setFromUser:[builderForValue build]];
}
- (PBMessageBuilder*) mergeFromUser:(PBGameUser*) value {
  if (resultPbmessage.hasFromUser &&
      resultPbmessage.fromUser != [PBGameUser defaultInstance]) {
    resultPbmessage.fromUser =
      [[[PBGameUser builderWithPrototype:resultPbmessage.fromUser] mergeFrom:value] buildPartial];
  } else {
    resultPbmessage.fromUser = value;
  }
  resultPbmessage.hasFromUser = YES;
  return self;
}
- (PBMessageBuilder*) clearFromUser {
  resultPbmessage.hasFromUser = NO;
  resultPbmessage.fromUser = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasToUser {
  return resultPbmessage.hasToUser;
}
- (PBGameUser*) toUser {
  return resultPbmessage.toUser;
}
- (PBMessageBuilder*) setToUser:(PBGameUser*) value {
  resultPbmessage.hasToUser = YES;
  resultPbmessage.toUser = value;
  return self;
}
- (PBMessageBuilder*) setToUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setToUser:[builderForValue build]];
}
- (PBMessageBuilder*) mergeToUser:(PBGameUser*) value {
  if (resultPbmessage.hasToUser &&
      resultPbmessage.toUser != [PBGameUser defaultInstance]) {
    resultPbmessage.toUser =
      [[[PBGameUser builderWithPrototype:resultPbmessage.toUser] mergeFrom:value] buildPartial];
  } else {
    resultPbmessage.toUser = value;
  }
  resultPbmessage.hasToUser = YES;
  return self;
}
- (PBMessageBuilder*) clearToUser {
  resultPbmessage.hasToUser = NO;
  resultPbmessage.toUser = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasText {
  return resultPbmessage.hasText;
}
- (NSString*) text {
  return resultPbmessage.text;
}
- (PBMessageBuilder*) setText:(NSString*) value {
  resultPbmessage.hasText = YES;
  resultPbmessage.text = value;
  return self;
}
- (PBMessageBuilder*) clearText {
  resultPbmessage.hasText = NO;
  resultPbmessage.text = @"";
  return self;
}
- (NSMutableArray *)drawData {
  return resultPbmessage.drawDataArray;
}
- (PBDrawAction*)drawDataAtIndex:(NSUInteger)index {
  return [resultPbmessage drawDataAtIndex:index];
}
- (PBMessageBuilder *)addDrawData:(PBDrawAction*)value {
  if (resultPbmessage.drawDataArray == nil) {
    resultPbmessage.drawDataArray = [[NSMutableArray alloc]init];
  }
  [resultPbmessage.drawDataArray addObject:value];
  return self;
}
- (PBMessageBuilder *)setDrawDataArray:(NSArray *)array {
  resultPbmessage.drawDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBMessageBuilder *)clearDrawData {
  resultPbmessage.drawDataArray = nil;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbmessage.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbmessage.createDate;
}
- (PBMessageBuilder*) setCreateDate:(SInt32) value {
  resultPbmessage.hasCreateDate = YES;
  resultPbmessage.createDate = value;
  return self;
}
- (PBMessageBuilder*) clearCreateDate {
  resultPbmessage.hasCreateDate = NO;
  resultPbmessage.createDate = 0;
  return self;
}
- (BOOL) hasDrawDataVersion {
  return resultPbmessage.hasDrawDataVersion;
}
- (SInt32) drawDataVersion {
  return resultPbmessage.drawDataVersion;
}
- (PBMessageBuilder*) setDrawDataVersion:(SInt32) value {
  resultPbmessage.hasDrawDataVersion = YES;
  resultPbmessage.drawDataVersion = value;
  return self;
}
- (PBMessageBuilder*) clearDrawDataVersion {
  resultPbmessage.hasDrawDataVersion = NO;
  resultPbmessage.drawDataVersion = 0;
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbmessage.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbmessage.canvasSize;
}
- (PBMessageBuilder*) setCanvasSize:(PBSize*) value {
  resultPbmessage.hasCanvasSize = YES;
  resultPbmessage.canvasSize = value;
  return self;
}
- (PBMessageBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBMessageBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbmessage.hasCanvasSize &&
      resultPbmessage.canvasSize != [PBSize defaultInstance]) {
    resultPbmessage.canvasSize =
      [[[PBSize builderWithPrototype:resultPbmessage.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbmessage.canvasSize = value;
  }
  resultPbmessage.hasCanvasSize = YES;
  return self;
}
- (PBMessageBuilder*) clearCanvasSize {
  resultPbmessage.hasCanvasSize = NO;
  resultPbmessage.canvasSize = [PBSize defaultInstance];
  return self;
}
- (BOOL) hasLongitude {
  return resultPbmessage.hasLongitude;
}
- (Float64) longitude {
  return resultPbmessage.longitude;
}
- (PBMessageBuilder*) setLongitude:(Float64) value {
  resultPbmessage.hasLongitude = YES;
  resultPbmessage.longitude = value;
  return self;
}
- (PBMessageBuilder*) clearLongitude {
  resultPbmessage.hasLongitude = NO;
  resultPbmessage.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultPbmessage.hasLatitude;
}
- (Float64) latitude {
  return resultPbmessage.latitude;
}
- (PBMessageBuilder*) setLatitude:(Float64) value {
  resultPbmessage.hasLatitude = YES;
  resultPbmessage.latitude = value;
  return self;
}
- (PBMessageBuilder*) clearLatitude {
  resultPbmessage.hasLatitude = NO;
  resultPbmessage.latitude = 0;
  return self;
}
- (BOOL) hasReqMessageId {
  return resultPbmessage.hasReqMessageId;
}
- (NSString*) reqMessageId {
  return resultPbmessage.reqMessageId;
}
- (PBMessageBuilder*) setReqMessageId:(NSString*) value {
  resultPbmessage.hasReqMessageId = YES;
  resultPbmessage.reqMessageId = value;
  return self;
}
- (PBMessageBuilder*) clearReqMessageId {
  resultPbmessage.hasReqMessageId = NO;
  resultPbmessage.reqMessageId = @"";
  return self;
}
- (BOOL) hasReplyResult {
  return resultPbmessage.hasReplyResult;
}
- (SInt32) replyResult {
  return resultPbmessage.replyResult;
}
- (PBMessageBuilder*) setReplyResult:(SInt32) value {
  resultPbmessage.hasReplyResult = YES;
  resultPbmessage.replyResult = value;
  return self;
}
- (PBMessageBuilder*) clearReplyResult {
  resultPbmessage.hasReplyResult = NO;
  resultPbmessage.replyResult = 0;
  return self;
}
- (BOOL) hasImageUrl {
  return resultPbmessage.hasImageUrl;
}
- (NSString*) imageUrl {
  return resultPbmessage.imageUrl;
}
- (PBMessageBuilder*) setImageUrl:(NSString*) value {
  resultPbmessage.hasImageUrl = YES;
  resultPbmessage.imageUrl = value;
  return self;
}
- (PBMessageBuilder*) clearImageUrl {
  resultPbmessage.hasImageUrl = NO;
  resultPbmessage.imageUrl = @"";
  return self;
}
- (BOOL) hasThumbImageUrl {
  return resultPbmessage.hasThumbImageUrl;
}
- (NSString*) thumbImageUrl {
  return resultPbmessage.thumbImageUrl;
}
- (PBMessageBuilder*) setThumbImageUrl:(NSString*) value {
  resultPbmessage.hasThumbImageUrl = YES;
  resultPbmessage.thumbImageUrl = value;
  return self;
}
- (PBMessageBuilder*) clearThumbImageUrl {
  resultPbmessage.hasThumbImageUrl = NO;
  resultPbmessage.thumbImageUrl = @"";
  return self;
}
@end

@interface PBMessageStat ()
@property (strong) NSString* userId;
@property (strong) NSString* friendUserId;
@property (strong) NSString* friendNickName;
@property (strong) NSString* friendAvatar;
@property BOOL friendGender;
@property BOOL isGroup;
@property SInt32 isVip;
@property (strong) NSString* messageId;
@property (strong) NSString* from;
@property (strong) NSString* to;
@property (strong) NSString* text;
@property (strong) NSMutableArray * drawDataArray;
@property SInt32 createDate;
@property SInt32 type;
@property SInt32 modifiedDate;
@property SInt32 totalMessageCount;
@property SInt32 newMessageCount;
@property SInt32 newGroupMessageCount;
@end

@implementation PBMessageStat

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasFriendUserId {
  return !!hasFriendUserId_;
}
- (void) setHasFriendUserId:(BOOL) _value_ {
  hasFriendUserId_ = !!_value_;
}
@synthesize friendUserId;
- (BOOL) hasFriendNickName {
  return !!hasFriendNickName_;
}
- (void) setHasFriendNickName:(BOOL) _value_ {
  hasFriendNickName_ = !!_value_;
}
@synthesize friendNickName;
- (BOOL) hasFriendAvatar {
  return !!hasFriendAvatar_;
}
- (void) setHasFriendAvatar:(BOOL) _value_ {
  hasFriendAvatar_ = !!_value_;
}
@synthesize friendAvatar;
- (BOOL) hasFriendGender {
  return !!hasFriendGender_;
}
- (void) setHasFriendGender:(BOOL) _value_ {
  hasFriendGender_ = !!_value_;
}
- (BOOL) friendGender {
  return !!friendGender_;
}
- (void) setFriendGender:(BOOL) _value_ {
  friendGender_ = !!_value_;
}
- (BOOL) hasIsGroup {
  return !!hasIsGroup_;
}
- (void) setHasIsGroup:(BOOL) _value_ {
  hasIsGroup_ = !!_value_;
}
- (BOOL) isGroup {
  return !!isGroup_;
}
- (void) setIsGroup:(BOOL) _value_ {
  isGroup_ = !!_value_;
}
- (BOOL) hasIsVip {
  return !!hasIsVip_;
}
- (void) setHasIsVip:(BOOL) _value_ {
  hasIsVip_ = !!_value_;
}
@synthesize isVip;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) _value_ {
  hasTo_ = !!_value_;
}
@synthesize to;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
@synthesize drawDataArray;
@dynamic drawData;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasModifiedDate {
  return !!hasModifiedDate_;
}
- (void) setHasModifiedDate:(BOOL) _value_ {
  hasModifiedDate_ = !!_value_;
}
@synthesize modifiedDate;
- (BOOL) hasTotalMessageCount {
  return !!hasTotalMessageCount_;
}
- (void) setHasTotalMessageCount:(BOOL) _value_ {
  hasTotalMessageCount_ = !!_value_;
}
@synthesize totalMessageCount;
- (BOOL) hasNewMessageCount {
  return !!hasNewMessageCount_;
}
- (void) setHasNewMessageCount:(BOOL) _value_ {
  hasNewMessageCount_ = !!_value_;
}
@synthesize newMessageCount;
- (BOOL) hasNewGroupMessageCount {
  return !!hasNewGroupMessageCount_;
}
- (void) setHasNewGroupMessageCount:(BOOL) _value_ {
  hasNewGroupMessageCount_ = !!_value_;
}
@synthesize newGroupMessageCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.friendUserId = @"";
    self.friendNickName = @"";
    self.friendAvatar = @"";
    self.friendGender = NO;
    self.isGroup = NO;
    self.isVip = 0;
    self.messageId = @"";
    self.from = @"";
    self.to = @"";
    self.text = @"";
    self.createDate = 0;
    self.type = 0;
    self.modifiedDate = 0;
    self.totalMessageCount = 0;
    self.newMessageCount = 0;
    self.newGroupMessageCount = 0;
  }
  return self;
}
static PBMessageStat* defaultPBMessageStatInstance = nil;
+ (void) initialize {
  if (self == [PBMessageStat class]) {
    defaultPBMessageStatInstance = [[PBMessageStat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBMessageStatInstance;
}
- (instancetype) defaultInstance {
  return defaultPBMessageStatInstance;
}
- (NSArray *)drawData {
  return drawDataArray;
}
- (PBDrawAction*)drawDataAtIndex:(NSUInteger)index {
  return [drawDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFriendUserId) {
    return NO;
  }
  if (!self.hasFriendNickName) {
    return NO;
  }
  if (!self.hasFrom) {
    return NO;
  }
  if (!self.hasTo) {
    return NO;
  }
  __block BOOL isInitdrawData = YES;
   [self.drawData enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawData = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawData) return isInitdrawData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasFriendUserId) {
    [output writeString:2 value:self.friendUserId];
  }
  if (self.hasFriendNickName) {
    [output writeString:3 value:self.friendNickName];
  }
  if (self.hasFriendAvatar) {
    [output writeString:4 value:self.friendAvatar];
  }
  if (self.hasFriendGender) {
    [output writeBool:5 value:self.friendGender];
  }
  if (self.hasIsGroup) {
    [output writeBool:6 value:self.isGroup];
  }
  if (self.hasIsVip) {
    [output writeInt32:7 value:self.isVip];
  }
  if (self.hasMessageId) {
    [output writeString:10 value:self.messageId];
  }
  if (self.hasFrom) {
    [output writeString:11 value:self.from];
  }
  if (self.hasTo) {
    [output writeString:12 value:self.to];
  }
  if (self.hasText) {
    [output writeString:13 value:self.text];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:14 value:element];
  }];
  if (self.hasCreateDate) {
    [output writeInt32:15 value:self.createDate];
  }
  if (self.hasType) {
    [output writeInt32:16 value:self.type];
  }
  if (self.hasModifiedDate) {
    [output writeInt32:31 value:self.modifiedDate];
  }
  if (self.hasTotalMessageCount) {
    [output writeInt32:32 value:self.totalMessageCount];
  }
  if (self.hasNewMessageCount) {
    [output writeInt32:33 value:self.newMessageCount];
  }
  if (self.hasNewGroupMessageCount) {
    [output writeInt32:34 value:self.newGroupMessageCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasFriendUserId) {
    size_ += computeStringSize(2, self.friendUserId);
  }
  if (self.hasFriendNickName) {
    size_ += computeStringSize(3, self.friendNickName);
  }
  if (self.hasFriendAvatar) {
    size_ += computeStringSize(4, self.friendAvatar);
  }
  if (self.hasFriendGender) {
    size_ += computeBoolSize(5, self.friendGender);
  }
  if (self.hasIsGroup) {
    size_ += computeBoolSize(6, self.isGroup);
  }
  if (self.hasIsVip) {
    size_ += computeInt32Size(7, self.isVip);
  }
  if (self.hasMessageId) {
    size_ += computeStringSize(10, self.messageId);
  }
  if (self.hasFrom) {
    size_ += computeStringSize(11, self.from);
  }
  if (self.hasTo) {
    size_ += computeStringSize(12, self.to);
  }
  if (self.hasText) {
    size_ += computeStringSize(13, self.text);
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(14, element);
  }];
  if (self.hasCreateDate) {
    size_ += computeInt32Size(15, self.createDate);
  }
  if (self.hasType) {
    size_ += computeInt32Size(16, self.type);
  }
  if (self.hasModifiedDate) {
    size_ += computeInt32Size(31, self.modifiedDate);
  }
  if (self.hasTotalMessageCount) {
    size_ += computeInt32Size(32, self.totalMessageCount);
  }
  if (self.hasNewMessageCount) {
    size_ += computeInt32Size(33, self.newMessageCount);
  }
  if (self.hasNewGroupMessageCount) {
    size_ += computeInt32Size(34, self.newGroupMessageCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBMessageStat*) parseFromData:(NSData*) data {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromData:data] build];
}
+ (PBMessageStat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat*) parseFromInputStream:(NSInputStream*) input {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromInputStream:input] build];
}
+ (PBMessageStat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromCodedInputStream:input] build];
}
+ (PBMessageStat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMessageStat*)[[[PBMessageStat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMessageStatBuilder*) builder {
  return [[PBMessageStatBuilder alloc] init];
}
+ (PBMessageStatBuilder*) builderWithPrototype:(PBMessageStat*) prototype {
  return [[PBMessageStat builder] mergeFrom:prototype];
}
- (PBMessageStatBuilder*) builder {
  return [PBMessageStat builder];
}
- (PBMessageStatBuilder*) toBuilder {
  return [PBMessageStat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasFriendUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendUserId", self.friendUserId];
  }
  if (self.hasFriendNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendNickName", self.friendNickName];
  }
  if (self.hasFriendAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendAvatar", self.friendAvatar];
  }
  if (self.hasFriendGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendGender", [NSNumber numberWithBool:self.friendGender]];
  }
  if (self.hasIsGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isGroup", [NSNumber numberWithBool:self.isGroup]];
  }
  if (self.hasIsVip) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isVip", [NSNumber numberWithInteger:self.isVip]];
  }
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", self.messageId];
  }
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"from", self.from];
  }
  if (self.hasTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"to", self.to];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasModifiedDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDate", [NSNumber numberWithInteger:self.modifiedDate]];
  }
  if (self.hasTotalMessageCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalMessageCount", [NSNumber numberWithInteger:self.totalMessageCount]];
  }
  if (self.hasNewMessageCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newMessageCount", [NSNumber numberWithInteger:self.newMessageCount]];
  }
  if (self.hasNewGroupMessageCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newGroupMessageCount", [NSNumber numberWithInteger:self.newGroupMessageCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBMessageStat class]]) {
    return NO;
  }
  PBMessageStat *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasFriendUserId == otherMessage.hasFriendUserId &&
      (!self.hasFriendUserId || [self.friendUserId isEqual:otherMessage.friendUserId]) &&
      self.hasFriendNickName == otherMessage.hasFriendNickName &&
      (!self.hasFriendNickName || [self.friendNickName isEqual:otherMessage.friendNickName]) &&
      self.hasFriendAvatar == otherMessage.hasFriendAvatar &&
      (!self.hasFriendAvatar || [self.friendAvatar isEqual:otherMessage.friendAvatar]) &&
      self.hasFriendGender == otherMessage.hasFriendGender &&
      (!self.hasFriendGender || self.friendGender == otherMessage.friendGender) &&
      self.hasIsGroup == otherMessage.hasIsGroup &&
      (!self.hasIsGroup || self.isGroup == otherMessage.isGroup) &&
      self.hasIsVip == otherMessage.hasIsVip &&
      (!self.hasIsVip || self.isVip == otherMessage.isVip) &&
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || [self.messageId isEqual:otherMessage.messageId]) &&
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.from isEqual:otherMessage.from]) &&
      self.hasTo == otherMessage.hasTo &&
      (!self.hasTo || [self.to isEqual:otherMessage.to]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      [self.drawDataArray isEqualToArray:otherMessage.drawDataArray] &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasModifiedDate == otherMessage.hasModifiedDate &&
      (!self.hasModifiedDate || self.modifiedDate == otherMessage.modifiedDate) &&
      self.hasTotalMessageCount == otherMessage.hasTotalMessageCount &&
      (!self.hasTotalMessageCount || self.totalMessageCount == otherMessage.totalMessageCount) &&
      self.hasNewMessageCount == otherMessage.hasNewMessageCount &&
      (!self.hasNewMessageCount || self.newMessageCount == otherMessage.newMessageCount) &&
      self.hasNewGroupMessageCount == otherMessage.hasNewGroupMessageCount &&
      (!self.hasNewGroupMessageCount || self.newGroupMessageCount == otherMessage.newGroupMessageCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasFriendUserId) {
    hashCode = hashCode * 31 + [self.friendUserId hash];
  }
  if (self.hasFriendNickName) {
    hashCode = hashCode * 31 + [self.friendNickName hash];
  }
  if (self.hasFriendAvatar) {
    hashCode = hashCode * 31 + [self.friendAvatar hash];
  }
  if (self.hasFriendGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.friendGender] hash];
  }
  if (self.hasIsGroup) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isGroup] hash];
  }
  if (self.hasIsVip) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isVip] hash];
  }
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [self.messageId hash];
  }
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.from hash];
  }
  if (self.hasTo) {
    hashCode = hashCode * 31 + [self.to hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasModifiedDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.modifiedDate] hash];
  }
  if (self.hasTotalMessageCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalMessageCount] hash];
  }
  if (self.hasNewMessageCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.newMessageCount] hash];
  }
  if (self.hasNewGroupMessageCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.newGroupMessageCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBMessageStatBuilder()
@property (strong) PBMessageStat* resultPbmessageStat;
@end

@implementation PBMessageStatBuilder
@synthesize resultPbmessageStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbmessageStat = [[PBMessageStat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbmessageStat;
}
- (PBMessageStatBuilder*) clear {
  self.resultPbmessageStat = [[PBMessageStat alloc] init];
  return self;
}
- (PBMessageStatBuilder*) clone {
  return [PBMessageStat builderWithPrototype:resultPbmessageStat];
}
- (PBMessageStat*) defaultInstance {
  return [PBMessageStat defaultInstance];
}
- (PBMessageStat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMessageStat*) buildPartial {
  PBMessageStat* returnMe = resultPbmessageStat;
  self.resultPbmessageStat = nil;
  return returnMe;
}
- (PBMessageStatBuilder*) mergeFrom:(PBMessageStat*) other {
  if (other == [PBMessageStat defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFriendUserId) {
    [self setFriendUserId:other.friendUserId];
  }
  if (other.hasFriendNickName) {
    [self setFriendNickName:other.friendNickName];
  }
  if (other.hasFriendAvatar) {
    [self setFriendAvatar:other.friendAvatar];
  }
  if (other.hasFriendGender) {
    [self setFriendGender:other.friendGender];
  }
  if (other.hasIsGroup) {
    [self setIsGroup:other.isGroup];
  }
  if (other.hasIsVip) {
    [self setIsVip:other.isVip];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.drawDataArray.count > 0) {
    if (resultPbmessageStat.drawDataArray == nil) {
      resultPbmessageStat.drawDataArray = [[NSMutableArray alloc] initWithArray:other.drawDataArray];
    } else {
      [resultPbmessageStat.drawDataArray addObjectsFromArray:other.drawDataArray];
    }
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasModifiedDate) {
    [self setModifiedDate:other.modifiedDate];
  }
  if (other.hasTotalMessageCount) {
    [self setTotalMessageCount:other.totalMessageCount];
  }
  if (other.hasNewMessageCount) {
    [self setNewMessageCount:other.newMessageCount];
  }
  if (other.hasNewGroupMessageCount) {
    [self setNewGroupMessageCount:other.newGroupMessageCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMessageStatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMessageStatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setFriendUserId:[input readString]];
        break;
      }
      case 26: {
        [self setFriendNickName:[input readString]];
        break;
      }
      case 34: {
        [self setFriendAvatar:[input readString]];
        break;
      }
      case 40: {
        [self setFriendGender:[input readBool]];
        break;
      }
      case 48: {
        [self setIsGroup:[input readBool]];
        break;
      }
      case 56: {
        [self setIsVip:[input readInt32]];
        break;
      }
      case 82: {
        [self setMessageId:[input readString]];
        break;
      }
      case 90: {
        [self setFrom:[input readString]];
        break;
      }
      case 98: {
        [self setTo:[input readString]];
        break;
      }
      case 106: {
        [self setText:[input readString]];
        break;
      }
      case 114: {
        PBDrawActionBuilder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 120: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 128: {
        [self setType:[input readInt32]];
        break;
      }
      case 248: {
        [self setModifiedDate:[input readInt32]];
        break;
      }
      case 256: {
        [self setTotalMessageCount:[input readInt32]];
        break;
      }
      case 264: {
        [self setNewMessageCount:[input readInt32]];
        break;
      }
      case 272: {
        [self setNewGroupMessageCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbmessageStat.hasUserId;
}
- (NSString*) userId {
  return resultPbmessageStat.userId;
}
- (PBMessageStatBuilder*) setUserId:(NSString*) value {
  resultPbmessageStat.hasUserId = YES;
  resultPbmessageStat.userId = value;
  return self;
}
- (PBMessageStatBuilder*) clearUserId {
  resultPbmessageStat.hasUserId = NO;
  resultPbmessageStat.userId = @"";
  return self;
}
- (BOOL) hasFriendUserId {
  return resultPbmessageStat.hasFriendUserId;
}
- (NSString*) friendUserId {
  return resultPbmessageStat.friendUserId;
}
- (PBMessageStatBuilder*) setFriendUserId:(NSString*) value {
  resultPbmessageStat.hasFriendUserId = YES;
  resultPbmessageStat.friendUserId = value;
  return self;
}
- (PBMessageStatBuilder*) clearFriendUserId {
  resultPbmessageStat.hasFriendUserId = NO;
  resultPbmessageStat.friendUserId = @"";
  return self;
}
- (BOOL) hasFriendNickName {
  return resultPbmessageStat.hasFriendNickName;
}
- (NSString*) friendNickName {
  return resultPbmessageStat.friendNickName;
}
- (PBMessageStatBuilder*) setFriendNickName:(NSString*) value {
  resultPbmessageStat.hasFriendNickName = YES;
  resultPbmessageStat.friendNickName = value;
  return self;
}
- (PBMessageStatBuilder*) clearFriendNickName {
  resultPbmessageStat.hasFriendNickName = NO;
  resultPbmessageStat.friendNickName = @"";
  return self;
}
- (BOOL) hasFriendAvatar {
  return resultPbmessageStat.hasFriendAvatar;
}
- (NSString*) friendAvatar {
  return resultPbmessageStat.friendAvatar;
}
- (PBMessageStatBuilder*) setFriendAvatar:(NSString*) value {
  resultPbmessageStat.hasFriendAvatar = YES;
  resultPbmessageStat.friendAvatar = value;
  return self;
}
- (PBMessageStatBuilder*) clearFriendAvatar {
  resultPbmessageStat.hasFriendAvatar = NO;
  resultPbmessageStat.friendAvatar = @"";
  return self;
}
- (BOOL) hasFriendGender {
  return resultPbmessageStat.hasFriendGender;
}
- (BOOL) friendGender {
  return resultPbmessageStat.friendGender;
}
- (PBMessageStatBuilder*) setFriendGender:(BOOL) value {
  resultPbmessageStat.hasFriendGender = YES;
  resultPbmessageStat.friendGender = value;
  return self;
}
- (PBMessageStatBuilder*) clearFriendGender {
  resultPbmessageStat.hasFriendGender = NO;
  resultPbmessageStat.friendGender = NO;
  return self;
}
- (BOOL) hasIsGroup {
  return resultPbmessageStat.hasIsGroup;
}
- (BOOL) isGroup {
  return resultPbmessageStat.isGroup;
}
- (PBMessageStatBuilder*) setIsGroup:(BOOL) value {
  resultPbmessageStat.hasIsGroup = YES;
  resultPbmessageStat.isGroup = value;
  return self;
}
- (PBMessageStatBuilder*) clearIsGroup {
  resultPbmessageStat.hasIsGroup = NO;
  resultPbmessageStat.isGroup = NO;
  return self;
}
- (BOOL) hasIsVip {
  return resultPbmessageStat.hasIsVip;
}
- (SInt32) isVip {
  return resultPbmessageStat.isVip;
}
- (PBMessageStatBuilder*) setIsVip:(SInt32) value {
  resultPbmessageStat.hasIsVip = YES;
  resultPbmessageStat.isVip = value;
  return self;
}
- (PBMessageStatBuilder*) clearIsVip {
  resultPbmessageStat.hasIsVip = NO;
  resultPbmessageStat.isVip = 0;
  return self;
}
- (BOOL) hasMessageId {
  return resultPbmessageStat.hasMessageId;
}
- (NSString*) messageId {
  return resultPbmessageStat.messageId;
}
- (PBMessageStatBuilder*) setMessageId:(NSString*) value {
  resultPbmessageStat.hasMessageId = YES;
  resultPbmessageStat.messageId = value;
  return self;
}
- (PBMessageStatBuilder*) clearMessageId {
  resultPbmessageStat.hasMessageId = NO;
  resultPbmessageStat.messageId = @"";
  return self;
}
- (BOOL) hasFrom {
  return resultPbmessageStat.hasFrom;
}
- (NSString*) from {
  return resultPbmessageStat.from;
}
- (PBMessageStatBuilder*) setFrom:(NSString*) value {
  resultPbmessageStat.hasFrom = YES;
  resultPbmessageStat.from = value;
  return self;
}
- (PBMessageStatBuilder*) clearFrom {
  resultPbmessageStat.hasFrom = NO;
  resultPbmessageStat.from = @"";
  return self;
}
- (BOOL) hasTo {
  return resultPbmessageStat.hasTo;
}
- (NSString*) to {
  return resultPbmessageStat.to;
}
- (PBMessageStatBuilder*) setTo:(NSString*) value {
  resultPbmessageStat.hasTo = YES;
  resultPbmessageStat.to = value;
  return self;
}
- (PBMessageStatBuilder*) clearTo {
  resultPbmessageStat.hasTo = NO;
  resultPbmessageStat.to = @"";
  return self;
}
- (BOOL) hasText {
  return resultPbmessageStat.hasText;
}
- (NSString*) text {
  return resultPbmessageStat.text;
}
- (PBMessageStatBuilder*) setText:(NSString*) value {
  resultPbmessageStat.hasText = YES;
  resultPbmessageStat.text = value;
  return self;
}
- (PBMessageStatBuilder*) clearText {
  resultPbmessageStat.hasText = NO;
  resultPbmessageStat.text = @"";
  return self;
}
- (NSMutableArray *)drawData {
  return resultPbmessageStat.drawDataArray;
}
- (PBDrawAction*)drawDataAtIndex:(NSUInteger)index {
  return [resultPbmessageStat drawDataAtIndex:index];
}
- (PBMessageStatBuilder *)addDrawData:(PBDrawAction*)value {
  if (resultPbmessageStat.drawDataArray == nil) {
    resultPbmessageStat.drawDataArray = [[NSMutableArray alloc]init];
  }
  [resultPbmessageStat.drawDataArray addObject:value];
  return self;
}
- (PBMessageStatBuilder *)setDrawDataArray:(NSArray *)array {
  resultPbmessageStat.drawDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBMessageStatBuilder *)clearDrawData {
  resultPbmessageStat.drawDataArray = nil;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbmessageStat.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbmessageStat.createDate;
}
- (PBMessageStatBuilder*) setCreateDate:(SInt32) value {
  resultPbmessageStat.hasCreateDate = YES;
  resultPbmessageStat.createDate = value;
  return self;
}
- (PBMessageStatBuilder*) clearCreateDate {
  resultPbmessageStat.hasCreateDate = NO;
  resultPbmessageStat.createDate = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbmessageStat.hasType;
}
- (SInt32) type {
  return resultPbmessageStat.type;
}
- (PBMessageStatBuilder*) setType:(SInt32) value {
  resultPbmessageStat.hasType = YES;
  resultPbmessageStat.type = value;
  return self;
}
- (PBMessageStatBuilder*) clearType {
  resultPbmessageStat.hasType = NO;
  resultPbmessageStat.type = 0;
  return self;
}
- (BOOL) hasModifiedDate {
  return resultPbmessageStat.hasModifiedDate;
}
- (SInt32) modifiedDate {
  return resultPbmessageStat.modifiedDate;
}
- (PBMessageStatBuilder*) setModifiedDate:(SInt32) value {
  resultPbmessageStat.hasModifiedDate = YES;
  resultPbmessageStat.modifiedDate = value;
  return self;
}
- (PBMessageStatBuilder*) clearModifiedDate {
  resultPbmessageStat.hasModifiedDate = NO;
  resultPbmessageStat.modifiedDate = 0;
  return self;
}
- (BOOL) hasTotalMessageCount {
  return resultPbmessageStat.hasTotalMessageCount;
}
- (SInt32) totalMessageCount {
  return resultPbmessageStat.totalMessageCount;
}
- (PBMessageStatBuilder*) setTotalMessageCount:(SInt32) value {
  resultPbmessageStat.hasTotalMessageCount = YES;
  resultPbmessageStat.totalMessageCount = value;
  return self;
}
- (PBMessageStatBuilder*) clearTotalMessageCount {
  resultPbmessageStat.hasTotalMessageCount = NO;
  resultPbmessageStat.totalMessageCount = 0;
  return self;
}
- (BOOL) hasNewMessageCount {
  return resultPbmessageStat.hasNewMessageCount;
}
- (SInt32) newMessageCount {
  return resultPbmessageStat.newMessageCount;
}
- (PBMessageStatBuilder*) setNewMessageCount:(SInt32) value {
  resultPbmessageStat.hasNewMessageCount = YES;
  resultPbmessageStat.newMessageCount = value;
  return self;
}
- (PBMessageStatBuilder*) clearNewMessageCount {
  resultPbmessageStat.hasNewMessageCount = NO;
  resultPbmessageStat.newMessageCount = 0;
  return self;
}
- (BOOL) hasNewGroupMessageCount {
  return resultPbmessageStat.hasNewGroupMessageCount;
}
- (SInt32) newGroupMessageCount {
  return resultPbmessageStat.newGroupMessageCount;
}
- (PBMessageStatBuilder*) setNewGroupMessageCount:(SInt32) value {
  resultPbmessageStat.hasNewGroupMessageCount = YES;
  resultPbmessageStat.newGroupMessageCount = value;
  return self;
}
- (PBMessageStatBuilder*) clearNewGroupMessageCount {
  resultPbmessageStat.hasNewGroupMessageCount = NO;
  resultPbmessageStat.newGroupMessageCount = 0;
  return self;
}
@end

@interface PBUserBasicInfo ()
@property (strong) NSString* userId;
@property (strong) NSString* nickName;
@property (strong) NSString* avatar;
@property (strong) NSString* gender;
@end

@implementation PBUserBasicInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = @"";
  }
  return self;
}
static PBUserBasicInfo* defaultPBUserBasicInfoInstance = nil;
+ (void) initialize {
  if (self == [PBUserBasicInfo class]) {
    defaultPBUserBasicInfoInstance = [[PBUserBasicInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserBasicInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserBasicInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasAvatar) {
    return NO;
  }
  if (!self.hasGender) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:3 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeString:4 value:self.gender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(2, self.nickName);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(3, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeStringSize(4, self.gender);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserBasicInfo*) parseFromData:(NSData*) data {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromData:data] build];
}
+ (PBUserBasicInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserBasicInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromInputStream:input] build];
}
+ (PBUserBasicInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserBasicInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserBasicInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserBasicInfo*)[[[PBUserBasicInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserBasicInfoBuilder*) builder {
  return [[PBUserBasicInfoBuilder alloc] init];
}
+ (PBUserBasicInfoBuilder*) builderWithPrototype:(PBUserBasicInfo*) prototype {
  return [[PBUserBasicInfo builder] mergeFrom:prototype];
}
- (PBUserBasicInfoBuilder*) builder {
  return [PBUserBasicInfo builder];
}
- (PBUserBasicInfoBuilder*) toBuilder {
  return [PBUserBasicInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", self.gender];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserBasicInfo class]]) {
    return NO;
  }
  PBUserBasicInfo *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || [self.gender isEqual:otherMessage.gender]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [self.gender hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserBasicInfoBuilder()
@property (strong) PBUserBasicInfo* resultPbuserBasicInfo;
@end

@implementation PBUserBasicInfoBuilder
@synthesize resultPbuserBasicInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserBasicInfo = [[PBUserBasicInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserBasicInfo;
}
- (PBUserBasicInfoBuilder*) clear {
  self.resultPbuserBasicInfo = [[PBUserBasicInfo alloc] init];
  return self;
}
- (PBUserBasicInfoBuilder*) clone {
  return [PBUserBasicInfo builderWithPrototype:resultPbuserBasicInfo];
}
- (PBUserBasicInfo*) defaultInstance {
  return [PBUserBasicInfo defaultInstance];
}
- (PBUserBasicInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserBasicInfo*) buildPartial {
  PBUserBasicInfo* returnMe = resultPbuserBasicInfo;
  self.resultPbuserBasicInfo = nil;
  return returnMe;
}
- (PBUserBasicInfoBuilder*) mergeFrom:(PBUserBasicInfo*) other {
  if (other == [PBUserBasicInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserBasicInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserBasicInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatar:[input readString]];
        break;
      }
      case 34: {
        [self setGender:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserBasicInfo.hasUserId;
}
- (NSString*) userId {
  return resultPbuserBasicInfo.userId;
}
- (PBUserBasicInfoBuilder*) setUserId:(NSString*) value {
  resultPbuserBasicInfo.hasUserId = YES;
  resultPbuserBasicInfo.userId = value;
  return self;
}
- (PBUserBasicInfoBuilder*) clearUserId {
  resultPbuserBasicInfo.hasUserId = NO;
  resultPbuserBasicInfo.userId = @"";
  return self;
}
- (BOOL) hasNickName {
  return resultPbuserBasicInfo.hasNickName;
}
- (NSString*) nickName {
  return resultPbuserBasicInfo.nickName;
}
- (PBUserBasicInfoBuilder*) setNickName:(NSString*) value {
  resultPbuserBasicInfo.hasNickName = YES;
  resultPbuserBasicInfo.nickName = value;
  return self;
}
- (PBUserBasicInfoBuilder*) clearNickName {
  resultPbuserBasicInfo.hasNickName = NO;
  resultPbuserBasicInfo.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbuserBasicInfo.hasAvatar;
}
- (NSString*) avatar {
  return resultPbuserBasicInfo.avatar;
}
- (PBUserBasicInfoBuilder*) setAvatar:(NSString*) value {
  resultPbuserBasicInfo.hasAvatar = YES;
  resultPbuserBasicInfo.avatar = value;
  return self;
}
- (PBUserBasicInfoBuilder*) clearAvatar {
  resultPbuserBasicInfo.hasAvatar = NO;
  resultPbuserBasicInfo.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultPbuserBasicInfo.hasGender;
}
- (NSString*) gender {
  return resultPbuserBasicInfo.gender;
}
- (PBUserBasicInfoBuilder*) setGender:(NSString*) value {
  resultPbuserBasicInfo.hasGender = YES;
  resultPbuserBasicInfo.gender = value;
  return self;
}
- (PBUserBasicInfoBuilder*) clearGender {
  resultPbuserBasicInfo.hasGender = NO;
  resultPbuserBasicInfo.gender = @"";
  return self;
}
@end

@interface PBUserResult ()
@property (strong) NSString* userId;
@property BOOL win;
@property SInt32 gainCoins;
@end

@implementation PBUserResult

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasWin {
  return !!hasWin_;
}
- (void) setHasWin:(BOOL) _value_ {
  hasWin_ = !!_value_;
}
- (BOOL) win {
  return !!win_;
}
- (void) setWin:(BOOL) _value_ {
  win_ = !!_value_;
}
- (BOOL) hasGainCoins {
  return !!hasGainCoins_;
}
- (void) setHasGainCoins:(BOOL) _value_ {
  hasGainCoins_ = !!_value_;
}
@synthesize gainCoins;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.win = NO;
    self.gainCoins = 0;
  }
  return self;
}
static PBUserResult* defaultPBUserResultInstance = nil;
+ (void) initialize {
  if (self == [PBUserResult class]) {
    defaultPBUserResultInstance = [[PBUserResult alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserResultInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserResultInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWin) {
    return NO;
  }
  if (!self.hasGainCoins) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWin) {
    [output writeBool:2 value:self.win];
  }
  if (self.hasGainCoins) {
    [output writeInt32:5 value:self.gainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasWin) {
    size_ += computeBoolSize(2, self.win);
  }
  if (self.hasGainCoins) {
    size_ += computeInt32Size(5, self.gainCoins);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserResult*) parseFromData:(NSData*) data {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data] build];
}
+ (PBUserResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResultBuilder*) builder {
  return [[PBUserResultBuilder alloc] init];
}
+ (PBUserResultBuilder*) builderWithPrototype:(PBUserResult*) prototype {
  return [[PBUserResult builder] mergeFrom:prototype];
}
- (PBUserResultBuilder*) builder {
  return [PBUserResult builder];
}
- (PBUserResultBuilder*) toBuilder {
  return [PBUserResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasWin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"win", [NSNumber numberWithBool:self.win]];
  }
  if (self.hasGainCoins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gainCoins", [NSNumber numberWithInteger:self.gainCoins]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserResult class]]) {
    return NO;
  }
  PBUserResult *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasWin == otherMessage.hasWin &&
      (!self.hasWin || self.win == otherMessage.win) &&
      self.hasGainCoins == otherMessage.hasGainCoins &&
      (!self.hasGainCoins || self.gainCoins == otherMessage.gainCoins) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasWin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.win] hash];
  }
  if (self.hasGainCoins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gainCoins] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserResultBuilder()
@property (strong) PBUserResult* resultPbuserResult;
@end

@implementation PBUserResultBuilder
@synthesize resultPbuserResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserResult = [[PBUserResult alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserResult;
}
- (PBUserResultBuilder*) clear {
  self.resultPbuserResult = [[PBUserResult alloc] init];
  return self;
}
- (PBUserResultBuilder*) clone {
  return [PBUserResult builderWithPrototype:resultPbuserResult];
}
- (PBUserResult*) defaultInstance {
  return [PBUserResult defaultInstance];
}
- (PBUserResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserResult*) buildPartial {
  PBUserResult* returnMe = resultPbuserResult;
  self.resultPbuserResult = nil;
  return returnMe;
}
- (PBUserResultBuilder*) mergeFrom:(PBUserResult*) other {
  if (other == [PBUserResult defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWin) {
    [self setWin:other.win];
  }
  if (other.hasGainCoins) {
    [self setGainCoins:other.gainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        [self setWin:[input readBool]];
        break;
      }
      case 40: {
        [self setGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserResult.hasUserId;
}
- (NSString*) userId {
  return resultPbuserResult.userId;
}
- (PBUserResultBuilder*) setUserId:(NSString*) value {
  resultPbuserResult.hasUserId = YES;
  resultPbuserResult.userId = value;
  return self;
}
- (PBUserResultBuilder*) clearUserId {
  resultPbuserResult.hasUserId = NO;
  resultPbuserResult.userId = @"";
  return self;
}
- (BOOL) hasWin {
  return resultPbuserResult.hasWin;
}
- (BOOL) win {
  return resultPbuserResult.win;
}
- (PBUserResultBuilder*) setWin:(BOOL) value {
  resultPbuserResult.hasWin = YES;
  resultPbuserResult.win = value;
  return self;
}
- (PBUserResultBuilder*) clearWin {
  resultPbuserResult.hasWin = NO;
  resultPbuserResult.win = NO;
  return self;
}
- (BOOL) hasGainCoins {
  return resultPbuserResult.hasGainCoins;
}
- (SInt32) gainCoins {
  return resultPbuserResult.gainCoins;
}
- (PBUserResultBuilder*) setGainCoins:(SInt32) value {
  resultPbuserResult.hasGainCoins = YES;
  resultPbuserResult.gainCoins = value;
  return self;
}
- (PBUserResultBuilder*) clearGainCoins {
  resultPbuserResult.hasGainCoins = NO;
  resultPbuserResult.gainCoins = 0;
  return self;
}
@end

@interface PBItemPriceInfo ()
@property SInt32 price;
@property PBGameCurrency currency;
@end

@implementation PBItemPriceInfo

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasCurrency {
  return !!hasCurrency_;
}
- (void) setHasCurrency:(BOOL) _value_ {
  hasCurrency_ = !!_value_;
}
@synthesize currency;
- (instancetype) init {
  if ((self = [super init])) {
    self.price = 0;
    self.currency = PBGameCurrencyCoin;
  }
  return self;
}
static PBItemPriceInfo* defaultPBItemPriceInfoInstance = nil;
+ (void) initialize {
  if (self == [PBItemPriceInfo class]) {
    defaultPBItemPriceInfoInstance = [[PBItemPriceInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBItemPriceInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBItemPriceInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPrice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeInt32:1 value:self.price];
  }
  if (self.hasCurrency) {
    [output writeEnum:2 value:self.currency];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrice) {
    size_ += computeInt32Size(1, self.price);
  }
  if (self.hasCurrency) {
    size_ += computeEnumSize(2, self.currency);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBItemPriceInfo*) parseFromData:(NSData*) data {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromData:data] build];
}
+ (PBItemPriceInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBItemPriceInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromInputStream:input] build];
}
+ (PBItemPriceInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBItemPriceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBItemPriceInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBItemPriceInfo*)[[[PBItemPriceInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBItemPriceInfoBuilder*) builder {
  return [[PBItemPriceInfoBuilder alloc] init];
}
+ (PBItemPriceInfoBuilder*) builderWithPrototype:(PBItemPriceInfo*) prototype {
  return [[PBItemPriceInfo builder] mergeFrom:prototype];
}
- (PBItemPriceInfoBuilder*) builder {
  return [PBItemPriceInfo builder];
}
- (PBItemPriceInfoBuilder*) toBuilder {
  return [PBItemPriceInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  if (self.hasCurrency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currency", NSStringFromPBGameCurrency(self.currency)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBItemPriceInfo class]]) {
    return NO;
  }
  PBItemPriceInfo *otherMessage = other;
  return
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasCurrency == otherMessage.hasCurrency &&
      (!self.hasCurrency || self.currency == otherMessage.currency) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  if (self.hasCurrency) {
    hashCode = hashCode * 31 + self.currency;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBItemPriceInfoBuilder()
@property (strong) PBItemPriceInfo* resultPbitemPriceInfo;
@end

@implementation PBItemPriceInfoBuilder
@synthesize resultPbitemPriceInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbitemPriceInfo = [[PBItemPriceInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbitemPriceInfo;
}
- (PBItemPriceInfoBuilder*) clear {
  self.resultPbitemPriceInfo = [[PBItemPriceInfo alloc] init];
  return self;
}
- (PBItemPriceInfoBuilder*) clone {
  return [PBItemPriceInfo builderWithPrototype:resultPbitemPriceInfo];
}
- (PBItemPriceInfo*) defaultInstance {
  return [PBItemPriceInfo defaultInstance];
}
- (PBItemPriceInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBItemPriceInfo*) buildPartial {
  PBItemPriceInfo* returnMe = resultPbitemPriceInfo;
  self.resultPbitemPriceInfo = nil;
  return returnMe;
}
- (PBItemPriceInfoBuilder*) mergeFrom:(PBItemPriceInfo*) other {
  if (other == [PBItemPriceInfo defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasCurrency) {
    [self setCurrency:other.currency];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBItemPriceInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBItemPriceInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 16: {
        PBGameCurrency value = (PBGameCurrency)[input readEnum];
        if (PBGameCurrencyIsValidValue(value)) {
          [self setCurrency:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return resultPbitemPriceInfo.hasPrice;
}
- (SInt32) price {
  return resultPbitemPriceInfo.price;
}
- (PBItemPriceInfoBuilder*) setPrice:(SInt32) value {
  resultPbitemPriceInfo.hasPrice = YES;
  resultPbitemPriceInfo.price = value;
  return self;
}
- (PBItemPriceInfoBuilder*) clearPrice {
  resultPbitemPriceInfo.hasPrice = NO;
  resultPbitemPriceInfo.price = 0;
  return self;
}
- (BOOL) hasCurrency {
  return resultPbitemPriceInfo.hasCurrency;
}
- (PBGameCurrency) currency {
  return resultPbitemPriceInfo.currency;
}
- (PBItemPriceInfoBuilder*) setCurrency:(PBGameCurrency) value {
  resultPbitemPriceInfo.hasCurrency = YES;
  resultPbitemPriceInfo.currency = value;
  return self;
}
- (PBItemPriceInfoBuilder*) clearCurrency {
  resultPbitemPriceInfo.hasCurrency = NO;
  resultPbitemPriceInfo.currency = PBGameCurrencyCoin;
  return self;
}
@end

@interface PBPromotionInfo ()
@property SInt32 price;
@property SInt32 startDate;
@property SInt32 expireDate;
@end

@implementation PBPromotionInfo

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) _value_ {
  hasStartDate_ = !!_value_;
}
@synthesize startDate;
- (BOOL) hasExpireDate {
  return !!hasExpireDate_;
}
- (void) setHasExpireDate:(BOOL) _value_ {
  hasExpireDate_ = !!_value_;
}
@synthesize expireDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.price = 0;
    self.startDate = 0;
    self.expireDate = 0;
  }
  return self;
}
static PBPromotionInfo* defaultPBPromotionInfoInstance = nil;
+ (void) initialize {
  if (self == [PBPromotionInfo class]) {
    defaultPBPromotionInfoInstance = [[PBPromotionInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBPromotionInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBPromotionInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPrice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeInt32:1 value:self.price];
  }
  if (self.hasStartDate) {
    [output writeInt32:2 value:self.startDate];
  }
  if (self.hasExpireDate) {
    [output writeInt32:3 value:self.expireDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrice) {
    size_ += computeInt32Size(1, self.price);
  }
  if (self.hasStartDate) {
    size_ += computeInt32Size(2, self.startDate);
  }
  if (self.hasExpireDate) {
    size_ += computeInt32Size(3, self.expireDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBPromotionInfo*) parseFromData:(NSData*) data {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromData:data] build];
}
+ (PBPromotionInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPromotionInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromInputStream:input] build];
}
+ (PBPromotionInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPromotionInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBPromotionInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPromotionInfo*)[[[PBPromotionInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPromotionInfoBuilder*) builder {
  return [[PBPromotionInfoBuilder alloc] init];
}
+ (PBPromotionInfoBuilder*) builderWithPrototype:(PBPromotionInfo*) prototype {
  return [[PBPromotionInfo builder] mergeFrom:prototype];
}
- (PBPromotionInfoBuilder*) builder {
  return [PBPromotionInfo builder];
}
- (PBPromotionInfoBuilder*) toBuilder {
  return [PBPromotionInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", [NSNumber numberWithInteger:self.startDate]];
  }
  if (self.hasExpireDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expireDate", [NSNumber numberWithInteger:self.expireDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBPromotionInfo class]]) {
    return NO;
  }
  PBPromotionInfo *otherMessage = other;
  return
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || self.startDate == otherMessage.startDate) &&
      self.hasExpireDate == otherMessage.hasExpireDate &&
      (!self.hasExpireDate || self.expireDate == otherMessage.expireDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startDate] hash];
  }
  if (self.hasExpireDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expireDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBPromotionInfoBuilder()
@property (strong) PBPromotionInfo* resultPbpromotionInfo;
@end

@implementation PBPromotionInfoBuilder
@synthesize resultPbpromotionInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbpromotionInfo = [[PBPromotionInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbpromotionInfo;
}
- (PBPromotionInfoBuilder*) clear {
  self.resultPbpromotionInfo = [[PBPromotionInfo alloc] init];
  return self;
}
- (PBPromotionInfoBuilder*) clone {
  return [PBPromotionInfo builderWithPrototype:resultPbpromotionInfo];
}
- (PBPromotionInfo*) defaultInstance {
  return [PBPromotionInfo defaultInstance];
}
- (PBPromotionInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPromotionInfo*) buildPartial {
  PBPromotionInfo* returnMe = resultPbpromotionInfo;
  self.resultPbpromotionInfo = nil;
  return returnMe;
}
- (PBPromotionInfoBuilder*) mergeFrom:(PBPromotionInfo*) other {
  if (other == [PBPromotionInfo defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasExpireDate) {
    [self setExpireDate:other.expireDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPromotionInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPromotionInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 16: {
        [self setStartDate:[input readInt32]];
        break;
      }
      case 24: {
        [self setExpireDate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return resultPbpromotionInfo.hasPrice;
}
- (SInt32) price {
  return resultPbpromotionInfo.price;
}
- (PBPromotionInfoBuilder*) setPrice:(SInt32) value {
  resultPbpromotionInfo.hasPrice = YES;
  resultPbpromotionInfo.price = value;
  return self;
}
- (PBPromotionInfoBuilder*) clearPrice {
  resultPbpromotionInfo.hasPrice = NO;
  resultPbpromotionInfo.price = 0;
  return self;
}
- (BOOL) hasStartDate {
  return resultPbpromotionInfo.hasStartDate;
}
- (SInt32) startDate {
  return resultPbpromotionInfo.startDate;
}
- (PBPromotionInfoBuilder*) setStartDate:(SInt32) value {
  resultPbpromotionInfo.hasStartDate = YES;
  resultPbpromotionInfo.startDate = value;
  return self;
}
- (PBPromotionInfoBuilder*) clearStartDate {
  resultPbpromotionInfo.hasStartDate = NO;
  resultPbpromotionInfo.startDate = 0;
  return self;
}
- (BOOL) hasExpireDate {
  return resultPbpromotionInfo.hasExpireDate;
}
- (SInt32) expireDate {
  return resultPbpromotionInfo.expireDate;
}
- (PBPromotionInfoBuilder*) setExpireDate:(SInt32) value {
  resultPbpromotionInfo.hasExpireDate = YES;
  resultPbpromotionInfo.expireDate = value;
  return self;
}
- (PBPromotionInfoBuilder*) clearExpireDate {
  resultPbpromotionInfo.hasExpireDate = NO;
  resultPbpromotionInfo.expireDate = 0;
  return self;
}
@end

@interface PBGameItem ()
@property SInt32 itemId;
@property (strong) NSString* name;
@property (strong) NSString* desc;
@property (strong) NSString* url;
@property PBGameItemConsumeType consumeType;
@property (strong) NSString* image;
@property (strong) NSString* demoImage;
@property SInt32 type;
@property (strong) NSString* appleProductId;
@property (strong) PBItemPriceInfo* priceInfo;
@property (strong) PBPromotionInfo* promotionInfo;
@property SInt32 defaultSaleCount;
@property PBGameTimeUnit usageLifeUnit;
@property SInt32 usageLife;
@end

@implementation PBGameItem

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) _value_ {
  hasItemId_ = !!_value_;
}
@synthesize itemId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasConsumeType {
  return !!hasConsumeType_;
}
- (void) setHasConsumeType:(BOOL) _value_ {
  hasConsumeType_ = !!_value_;
}
@synthesize consumeType;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasDemoImage {
  return !!hasDemoImage_;
}
- (void) setHasDemoImage:(BOOL) _value_ {
  hasDemoImage_ = !!_value_;
}
@synthesize demoImage;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasAppleProductId {
  return !!hasAppleProductId_;
}
- (void) setHasAppleProductId:(BOOL) _value_ {
  hasAppleProductId_ = !!_value_;
}
@synthesize appleProductId;
- (BOOL) hasPriceInfo {
  return !!hasPriceInfo_;
}
- (void) setHasPriceInfo:(BOOL) _value_ {
  hasPriceInfo_ = !!_value_;
}
@synthesize priceInfo;
- (BOOL) hasPromotionInfo {
  return !!hasPromotionInfo_;
}
- (void) setHasPromotionInfo:(BOOL) _value_ {
  hasPromotionInfo_ = !!_value_;
}
@synthesize promotionInfo;
- (BOOL) hasDefaultSaleCount {
  return !!hasDefaultSaleCount_;
}
- (void) setHasDefaultSaleCount:(BOOL) _value_ {
  hasDefaultSaleCount_ = !!_value_;
}
@synthesize defaultSaleCount;
- (BOOL) hasUsageLifeUnit {
  return !!hasUsageLifeUnit_;
}
- (void) setHasUsageLifeUnit:(BOOL) _value_ {
  hasUsageLifeUnit_ = !!_value_;
}
@synthesize usageLifeUnit;
- (BOOL) hasUsageLife {
  return !!hasUsageLife_;
}
- (void) setHasUsageLife:(BOOL) _value_ {
  hasUsageLife_ = !!_value_;
}
@synthesize usageLife;
- (instancetype) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.name = @"";
    self.desc = @"";
    self.url = @"";
    self.consumeType = PBGameItemConsumeTypeNonConsumable;
    self.image = @"";
    self.demoImage = @"";
    self.type = 0;
    self.appleProductId = @"";
    self.priceInfo = [PBItemPriceInfo defaultInstance];
    self.promotionInfo = [PBPromotionInfo defaultInstance];
    self.defaultSaleCount = 0;
    self.usageLifeUnit = PBGameTimeUnitHour;
    self.usageLife = 0;
  }
  return self;
}
static PBGameItem* defaultPBGameItemInstance = nil;
+ (void) initialize {
  if (self == [PBGameItem class]) {
    defaultPBGameItemInstance = [[PBGameItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGameItemInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGameItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasPriceInfo) {
    if (!self.priceInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasPromotionInfo) {
    if (!self.promotionInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:3 value:self.desc];
  }
  if (self.hasUrl) {
    [output writeString:4 value:self.url];
  }
  if (self.hasConsumeType) {
    [output writeEnum:5 value:self.consumeType];
  }
  if (self.hasImage) {
    [output writeString:11 value:self.image];
  }
  if (self.hasDemoImage) {
    [output writeString:12 value:self.demoImage];
  }
  if (self.hasType) {
    [output writeInt32:15 value:self.type];
  }
  if (self.hasAppleProductId) {
    [output writeString:22 value:self.appleProductId];
  }
  if (self.hasPriceInfo) {
    [output writeMessage:23 value:self.priceInfo];
  }
  if (self.hasPromotionInfo) {
    [output writeMessage:24 value:self.promotionInfo];
  }
  if (self.hasDefaultSaleCount) {
    [output writeInt32:30 value:self.defaultSaleCount];
  }
  if (self.hasUsageLifeUnit) {
    [output writeEnum:50 value:self.usageLifeUnit];
  }
  if (self.hasUsageLife) {
    [output writeInt32:51 value:self.usageLife];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeInt32Size(1, self.itemId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(3, self.desc);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(4, self.url);
  }
  if (self.hasConsumeType) {
    size_ += computeEnumSize(5, self.consumeType);
  }
  if (self.hasImage) {
    size_ += computeStringSize(11, self.image);
  }
  if (self.hasDemoImage) {
    size_ += computeStringSize(12, self.demoImage);
  }
  if (self.hasType) {
    size_ += computeInt32Size(15, self.type);
  }
  if (self.hasAppleProductId) {
    size_ += computeStringSize(22, self.appleProductId);
  }
  if (self.hasPriceInfo) {
    size_ += computeMessageSize(23, self.priceInfo);
  }
  if (self.hasPromotionInfo) {
    size_ += computeMessageSize(24, self.promotionInfo);
  }
  if (self.hasDefaultSaleCount) {
    size_ += computeInt32Size(30, self.defaultSaleCount);
  }
  if (self.hasUsageLifeUnit) {
    size_ += computeEnumSize(50, self.usageLifeUnit);
  }
  if (self.hasUsageLife) {
    size_ += computeInt32Size(51, self.usageLife);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGameItem*) parseFromData:(NSData*) data {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromData:data] build];
}
+ (PBGameItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromInputStream:input] build];
}
+ (PBGameItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItem*)[[[PBGameItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemBuilder*) builder {
  return [[PBGameItemBuilder alloc] init];
}
+ (PBGameItemBuilder*) builderWithPrototype:(PBGameItem*) prototype {
  return [[PBGameItem builder] mergeFrom:prototype];
}
- (PBGameItemBuilder*) builder {
  return [PBGameItem builder];
}
- (PBGameItemBuilder*) toBuilder {
  return [PBGameItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInteger:self.itemId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasConsumeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"consumeType", NSStringFromPBGameItemConsumeType(self.consumeType)];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasDemoImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"demoImage", self.demoImage];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasAppleProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appleProductId", self.appleProductId];
  }
  if (self.hasPriceInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"priceInfo"];
    [self.priceInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPromotionInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"promotionInfo"];
    [self.promotionInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefaultSaleCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSaleCount", [NSNumber numberWithInteger:self.defaultSaleCount]];
  }
  if (self.hasUsageLifeUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"usageLifeUnit", NSStringFromPBGameTimeUnit(self.usageLifeUnit)];
  }
  if (self.hasUsageLife) {
    [output appendFormat:@"%@%@: %@\n", indent, @"usageLife", [NSNumber numberWithInteger:self.usageLife]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGameItem class]]) {
    return NO;
  }
  PBGameItem *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasConsumeType == otherMessage.hasConsumeType &&
      (!self.hasConsumeType || self.consumeType == otherMessage.consumeType) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasDemoImage == otherMessage.hasDemoImage &&
      (!self.hasDemoImage || [self.demoImage isEqual:otherMessage.demoImage]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasAppleProductId == otherMessage.hasAppleProductId &&
      (!self.hasAppleProductId || [self.appleProductId isEqual:otherMessage.appleProductId]) &&
      self.hasPriceInfo == otherMessage.hasPriceInfo &&
      (!self.hasPriceInfo || [self.priceInfo isEqual:otherMessage.priceInfo]) &&
      self.hasPromotionInfo == otherMessage.hasPromotionInfo &&
      (!self.hasPromotionInfo || [self.promotionInfo isEqual:otherMessage.promotionInfo]) &&
      self.hasDefaultSaleCount == otherMessage.hasDefaultSaleCount &&
      (!self.hasDefaultSaleCount || self.defaultSaleCount == otherMessage.defaultSaleCount) &&
      self.hasUsageLifeUnit == otherMessage.hasUsageLifeUnit &&
      (!self.hasUsageLifeUnit || self.usageLifeUnit == otherMessage.usageLifeUnit) &&
      self.hasUsageLife == otherMessage.hasUsageLife &&
      (!self.hasUsageLife || self.usageLife == otherMessage.usageLife) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasConsumeType) {
    hashCode = hashCode * 31 + self.consumeType;
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasDemoImage) {
    hashCode = hashCode * 31 + [self.demoImage hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasAppleProductId) {
    hashCode = hashCode * 31 + [self.appleProductId hash];
  }
  if (self.hasPriceInfo) {
    hashCode = hashCode * 31 + [self.priceInfo hash];
  }
  if (self.hasPromotionInfo) {
    hashCode = hashCode * 31 + [self.promotionInfo hash];
  }
  if (self.hasDefaultSaleCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSaleCount] hash];
  }
  if (self.hasUsageLifeUnit) {
    hashCode = hashCode * 31 + self.usageLifeUnit;
  }
  if (self.hasUsageLife) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.usageLife] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGameItemBuilder()
@property (strong) PBGameItem* resultPbgameItem;
@end

@implementation PBGameItemBuilder
@synthesize resultPbgameItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgameItem = [[PBGameItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgameItem;
}
- (PBGameItemBuilder*) clear {
  self.resultPbgameItem = [[PBGameItem alloc] init];
  return self;
}
- (PBGameItemBuilder*) clone {
  return [PBGameItem builderWithPrototype:resultPbgameItem];
}
- (PBGameItem*) defaultInstance {
  return [PBGameItem defaultInstance];
}
- (PBGameItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameItem*) buildPartial {
  PBGameItem* returnMe = resultPbgameItem;
  self.resultPbgameItem = nil;
  return returnMe;
}
- (PBGameItemBuilder*) mergeFrom:(PBGameItem*) other {
  if (other == [PBGameItem defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasConsumeType) {
    [self setConsumeType:other.consumeType];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasDemoImage) {
    [self setDemoImage:other.demoImage];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasAppleProductId) {
    [self setAppleProductId:other.appleProductId];
  }
  if (other.hasPriceInfo) {
    [self mergePriceInfo:other.priceInfo];
  }
  if (other.hasPromotionInfo) {
    [self mergePromotionInfo:other.promotionInfo];
  }
  if (other.hasDefaultSaleCount) {
    [self setDefaultSaleCount:other.defaultSaleCount];
  }
  if (other.hasUsageLifeUnit) {
    [self setUsageLifeUnit:other.usageLifeUnit];
  }
  if (other.hasUsageLife) {
    [self setUsageLife:other.usageLife];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDesc:[input readString]];
        break;
      }
      case 34: {
        [self setUrl:[input readString]];
        break;
      }
      case 40: {
        PBGameItemConsumeType value = (PBGameItemConsumeType)[input readEnum];
        if (PBGameItemConsumeTypeIsValidValue(value)) {
          [self setConsumeType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 90: {
        [self setImage:[input readString]];
        break;
      }
      case 98: {
        [self setDemoImage:[input readString]];
        break;
      }
      case 120: {
        [self setType:[input readInt32]];
        break;
      }
      case 178: {
        [self setAppleProductId:[input readString]];
        break;
      }
      case 186: {
        PBItemPriceInfoBuilder* subBuilder = [PBItemPriceInfo builder];
        if (self.hasPriceInfo) {
          [subBuilder mergeFrom:self.priceInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPriceInfo:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        PBPromotionInfoBuilder* subBuilder = [PBPromotionInfo builder];
        if (self.hasPromotionInfo) {
          [subBuilder mergeFrom:self.promotionInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPromotionInfo:[subBuilder buildPartial]];
        break;
      }
      case 240: {
        [self setDefaultSaleCount:[input readInt32]];
        break;
      }
      case 400: {
        PBGameTimeUnit value = (PBGameTimeUnit)[input readEnum];
        if (PBGameTimeUnitIsValidValue(value)) {
          [self setUsageLifeUnit:value];
        } else {
          [unknownFields mergeVarintField:50 value:value];
        }
        break;
      }
      case 408: {
        [self setUsageLife:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return resultPbgameItem.hasItemId;
}
- (SInt32) itemId {
  return resultPbgameItem.itemId;
}
- (PBGameItemBuilder*) setItemId:(SInt32) value {
  resultPbgameItem.hasItemId = YES;
  resultPbgameItem.itemId = value;
  return self;
}
- (PBGameItemBuilder*) clearItemId {
  resultPbgameItem.hasItemId = NO;
  resultPbgameItem.itemId = 0;
  return self;
}
- (BOOL) hasName {
  return resultPbgameItem.hasName;
}
- (NSString*) name {
  return resultPbgameItem.name;
}
- (PBGameItemBuilder*) setName:(NSString*) value {
  resultPbgameItem.hasName = YES;
  resultPbgameItem.name = value;
  return self;
}
- (PBGameItemBuilder*) clearName {
  resultPbgameItem.hasName = NO;
  resultPbgameItem.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultPbgameItem.hasDesc;
}
- (NSString*) desc {
  return resultPbgameItem.desc;
}
- (PBGameItemBuilder*) setDesc:(NSString*) value {
  resultPbgameItem.hasDesc = YES;
  resultPbgameItem.desc = value;
  return self;
}
- (PBGameItemBuilder*) clearDesc {
  resultPbgameItem.hasDesc = NO;
  resultPbgameItem.desc = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultPbgameItem.hasUrl;
}
- (NSString*) url {
  return resultPbgameItem.url;
}
- (PBGameItemBuilder*) setUrl:(NSString*) value {
  resultPbgameItem.hasUrl = YES;
  resultPbgameItem.url = value;
  return self;
}
- (PBGameItemBuilder*) clearUrl {
  resultPbgameItem.hasUrl = NO;
  resultPbgameItem.url = @"";
  return self;
}
- (BOOL) hasConsumeType {
  return resultPbgameItem.hasConsumeType;
}
- (PBGameItemConsumeType) consumeType {
  return resultPbgameItem.consumeType;
}
- (PBGameItemBuilder*) setConsumeType:(PBGameItemConsumeType) value {
  resultPbgameItem.hasConsumeType = YES;
  resultPbgameItem.consumeType = value;
  return self;
}
- (PBGameItemBuilder*) clearConsumeType {
  resultPbgameItem.hasConsumeType = NO;
  resultPbgameItem.consumeType = PBGameItemConsumeTypeNonConsumable;
  return self;
}
- (BOOL) hasImage {
  return resultPbgameItem.hasImage;
}
- (NSString*) image {
  return resultPbgameItem.image;
}
- (PBGameItemBuilder*) setImage:(NSString*) value {
  resultPbgameItem.hasImage = YES;
  resultPbgameItem.image = value;
  return self;
}
- (PBGameItemBuilder*) clearImage {
  resultPbgameItem.hasImage = NO;
  resultPbgameItem.image = @"";
  return self;
}
- (BOOL) hasDemoImage {
  return resultPbgameItem.hasDemoImage;
}
- (NSString*) demoImage {
  return resultPbgameItem.demoImage;
}
- (PBGameItemBuilder*) setDemoImage:(NSString*) value {
  resultPbgameItem.hasDemoImage = YES;
  resultPbgameItem.demoImage = value;
  return self;
}
- (PBGameItemBuilder*) clearDemoImage {
  resultPbgameItem.hasDemoImage = NO;
  resultPbgameItem.demoImage = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbgameItem.hasType;
}
- (SInt32) type {
  return resultPbgameItem.type;
}
- (PBGameItemBuilder*) setType:(SInt32) value {
  resultPbgameItem.hasType = YES;
  resultPbgameItem.type = value;
  return self;
}
- (PBGameItemBuilder*) clearType {
  resultPbgameItem.hasType = NO;
  resultPbgameItem.type = 0;
  return self;
}
- (BOOL) hasAppleProductId {
  return resultPbgameItem.hasAppleProductId;
}
- (NSString*) appleProductId {
  return resultPbgameItem.appleProductId;
}
- (PBGameItemBuilder*) setAppleProductId:(NSString*) value {
  resultPbgameItem.hasAppleProductId = YES;
  resultPbgameItem.appleProductId = value;
  return self;
}
- (PBGameItemBuilder*) clearAppleProductId {
  resultPbgameItem.hasAppleProductId = NO;
  resultPbgameItem.appleProductId = @"";
  return self;
}
- (BOOL) hasPriceInfo {
  return resultPbgameItem.hasPriceInfo;
}
- (PBItemPriceInfo*) priceInfo {
  return resultPbgameItem.priceInfo;
}
- (PBGameItemBuilder*) setPriceInfo:(PBItemPriceInfo*) value {
  resultPbgameItem.hasPriceInfo = YES;
  resultPbgameItem.priceInfo = value;
  return self;
}
- (PBGameItemBuilder*) setPriceInfoBuilder:(PBItemPriceInfoBuilder*) builderForValue {
  return [self setPriceInfo:[builderForValue build]];
}
- (PBGameItemBuilder*) mergePriceInfo:(PBItemPriceInfo*) value {
  if (resultPbgameItem.hasPriceInfo &&
      resultPbgameItem.priceInfo != [PBItemPriceInfo defaultInstance]) {
    resultPbgameItem.priceInfo =
      [[[PBItemPriceInfo builderWithPrototype:resultPbgameItem.priceInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbgameItem.priceInfo = value;
  }
  resultPbgameItem.hasPriceInfo = YES;
  return self;
}
- (PBGameItemBuilder*) clearPriceInfo {
  resultPbgameItem.hasPriceInfo = NO;
  resultPbgameItem.priceInfo = [PBItemPriceInfo defaultInstance];
  return self;
}
- (BOOL) hasPromotionInfo {
  return resultPbgameItem.hasPromotionInfo;
}
- (PBPromotionInfo*) promotionInfo {
  return resultPbgameItem.promotionInfo;
}
- (PBGameItemBuilder*) setPromotionInfo:(PBPromotionInfo*) value {
  resultPbgameItem.hasPromotionInfo = YES;
  resultPbgameItem.promotionInfo = value;
  return self;
}
- (PBGameItemBuilder*) setPromotionInfoBuilder:(PBPromotionInfoBuilder*) builderForValue {
  return [self setPromotionInfo:[builderForValue build]];
}
- (PBGameItemBuilder*) mergePromotionInfo:(PBPromotionInfo*) value {
  if (resultPbgameItem.hasPromotionInfo &&
      resultPbgameItem.promotionInfo != [PBPromotionInfo defaultInstance]) {
    resultPbgameItem.promotionInfo =
      [[[PBPromotionInfo builderWithPrototype:resultPbgameItem.promotionInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbgameItem.promotionInfo = value;
  }
  resultPbgameItem.hasPromotionInfo = YES;
  return self;
}
- (PBGameItemBuilder*) clearPromotionInfo {
  resultPbgameItem.hasPromotionInfo = NO;
  resultPbgameItem.promotionInfo = [PBPromotionInfo defaultInstance];
  return self;
}
- (BOOL) hasDefaultSaleCount {
  return resultPbgameItem.hasDefaultSaleCount;
}
- (SInt32) defaultSaleCount {
  return resultPbgameItem.defaultSaleCount;
}
- (PBGameItemBuilder*) setDefaultSaleCount:(SInt32) value {
  resultPbgameItem.hasDefaultSaleCount = YES;
  resultPbgameItem.defaultSaleCount = value;
  return self;
}
- (PBGameItemBuilder*) clearDefaultSaleCount {
  resultPbgameItem.hasDefaultSaleCount = NO;
  resultPbgameItem.defaultSaleCount = 0;
  return self;
}
- (BOOL) hasUsageLifeUnit {
  return resultPbgameItem.hasUsageLifeUnit;
}
- (PBGameTimeUnit) usageLifeUnit {
  return resultPbgameItem.usageLifeUnit;
}
- (PBGameItemBuilder*) setUsageLifeUnit:(PBGameTimeUnit) value {
  resultPbgameItem.hasUsageLifeUnit = YES;
  resultPbgameItem.usageLifeUnit = value;
  return self;
}
- (PBGameItemBuilder*) clearUsageLifeUnit {
  resultPbgameItem.hasUsageLifeUnit = NO;
  resultPbgameItem.usageLifeUnit = PBGameTimeUnitHour;
  return self;
}
- (BOOL) hasUsageLife {
  return resultPbgameItem.hasUsageLife;
}
- (SInt32) usageLife {
  return resultPbgameItem.usageLife;
}
- (PBGameItemBuilder*) setUsageLife:(SInt32) value {
  resultPbgameItem.hasUsageLife = YES;
  resultPbgameItem.usageLife = value;
  return self;
}
- (PBGameItemBuilder*) clearUsageLife {
  resultPbgameItem.hasUsageLife = NO;
  resultPbgameItem.usageLife = 0;
  return self;
}
@end

@interface PBGameItemList ()
@property (strong) NSMutableArray * itemsArray;
@end

@implementation PBGameItemList

@synthesize itemsArray;
@dynamic items;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBGameItemList* defaultPBGameItemListInstance = nil;
+ (void) initialize {
  if (self == [PBGameItemList class]) {
    defaultPBGameItemListInstance = [[PBGameItemList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGameItemListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGameItemListInstance;
}
- (NSArray *)items {
  return itemsArray;
}
- (PBGameItem*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInititems = YES;
   [self.items enumerateObjectsUsingBlock:^(PBGameItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititems = NO;
      *stop = YES;
    }
  }];
  if (!isInititems) return isInititems;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.itemsArray enumerateObjectsUsingBlock:^(PBGameItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.itemsArray enumerateObjectsUsingBlock:^(PBGameItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGameItemList*) parseFromData:(NSData*) data {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromData:data] build];
}
+ (PBGameItemList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemList*) parseFromInputStream:(NSInputStream*) input {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromInputStream:input] build];
}
+ (PBGameItemList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromCodedInputStream:input] build];
}
+ (PBGameItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGameItemList*)[[[PBGameItemList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGameItemListBuilder*) builder {
  return [[PBGameItemListBuilder alloc] init];
}
+ (PBGameItemListBuilder*) builderWithPrototype:(PBGameItemList*) prototype {
  return [[PBGameItemList builder] mergeFrom:prototype];
}
- (PBGameItemListBuilder*) builder {
  return [PBGameItemList builder];
}
- (PBGameItemListBuilder*) toBuilder {
  return [PBGameItemList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.itemsArray enumerateObjectsUsingBlock:^(PBGameItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGameItemList class]]) {
    return NO;
  }
  PBGameItemList *otherMessage = other;
  return
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.itemsArray enumerateObjectsUsingBlock:^(PBGameItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGameItemListBuilder()
@property (strong) PBGameItemList* resultPbgameItemList;
@end

@implementation PBGameItemListBuilder
@synthesize resultPbgameItemList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgameItemList = [[PBGameItemList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgameItemList;
}
- (PBGameItemListBuilder*) clear {
  self.resultPbgameItemList = [[PBGameItemList alloc] init];
  return self;
}
- (PBGameItemListBuilder*) clone {
  return [PBGameItemList builderWithPrototype:resultPbgameItemList];
}
- (PBGameItemList*) defaultInstance {
  return [PBGameItemList defaultInstance];
}
- (PBGameItemList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGameItemList*) buildPartial {
  PBGameItemList* returnMe = resultPbgameItemList;
  self.resultPbgameItemList = nil;
  return returnMe;
}
- (PBGameItemListBuilder*) mergeFrom:(PBGameItemList*) other {
  if (other == [PBGameItemList defaultInstance]) {
    return self;
  }
  if (other.itemsArray.count > 0) {
    if (resultPbgameItemList.itemsArray == nil) {
      resultPbgameItemList.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [resultPbgameItemList.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGameItemListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGameItemListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameItemBuilder* subBuilder = [PBGameItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)items {
  return resultPbgameItemList.itemsArray;
}
- (PBGameItem*)itemsAtIndex:(NSUInteger)index {
  return [resultPbgameItemList itemsAtIndex:index];
}
- (PBGameItemListBuilder *)addItems:(PBGameItem*)value {
  if (resultPbgameItemList.itemsArray == nil) {
    resultPbgameItemList.itemsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgameItemList.itemsArray addObject:value];
  return self;
}
- (PBGameItemListBuilder *)setItemsArray:(NSArray *)array {
  resultPbgameItemList.itemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGameItemListBuilder *)clearItems {
  resultPbgameItemList.itemsArray = nil;
  return self;
}
@end

@interface PBIAPProduct ()
@property PBIAPProductType type;
@property (strong) NSString* appleProductId;
@property (strong) NSString* alipayProductId;
@property (strong) NSString* name;
@property (strong) NSString* desc;
@property SInt32 count;
@property (strong) NSString* totalPrice;
@property (strong) NSString* currency;
@property (strong) NSString* country;
@property (strong) NSString* saving;
@property (strong) NSString* taobaoUrl;
@property (strong) NSMutableArray * pricesArray;
@end

@implementation PBIAPProduct

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasAppleProductId {
  return !!hasAppleProductId_;
}
- (void) setHasAppleProductId:(BOOL) _value_ {
  hasAppleProductId_ = !!_value_;
}
@synthesize appleProductId;
- (BOOL) hasAlipayProductId {
  return !!hasAlipayProductId_;
}
- (void) setHasAlipayProductId:(BOOL) _value_ {
  hasAlipayProductId_ = !!_value_;
}
@synthesize alipayProductId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasTotalPrice {
  return !!hasTotalPrice_;
}
- (void) setHasTotalPrice:(BOOL) _value_ {
  hasTotalPrice_ = !!_value_;
}
@synthesize totalPrice;
- (BOOL) hasCurrency {
  return !!hasCurrency_;
}
- (void) setHasCurrency:(BOOL) _value_ {
  hasCurrency_ = !!_value_;
}
@synthesize currency;
- (BOOL) hasCountry {
  return !!hasCountry_;
}
- (void) setHasCountry:(BOOL) _value_ {
  hasCountry_ = !!_value_;
}
@synthesize country;
- (BOOL) hasSaving {
  return !!hasSaving_;
}
- (void) setHasSaving:(BOOL) _value_ {
  hasSaving_ = !!_value_;
}
@synthesize saving;
- (BOOL) hasTaobaoUrl {
  return !!hasTaobaoUrl_;
}
- (void) setHasTaobaoUrl:(BOOL) _value_ {
  hasTaobaoUrl_ = !!_value_;
}
@synthesize taobaoUrl;
@synthesize pricesArray;
@dynamic prices;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = PBIAPProductTypeIapcoin;
    self.appleProductId = @"";
    self.alipayProductId = @"";
    self.name = @"";
    self.desc = @"";
    self.count = 1;
    self.totalPrice = @"";
    self.currency = @"";
    self.country = @"";
    self.saving = @"";
    self.taobaoUrl = @"";
  }
  return self;
}
static PBIAPProduct* defaultPBIAPProductInstance = nil;
+ (void) initialize {
  if (self == [PBIAPProduct class]) {
    defaultPBIAPProductInstance = [[PBIAPProduct alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBIAPProductInstance;
}
- (instancetype) defaultInstance {
  return defaultPBIAPProductInstance;
}
- (NSArray *)prices {
  return pricesArray;
}
- (PBIAPProductPrice*)pricesAtIndex:(NSUInteger)index {
  return [pricesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasAppleProductId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasAppleProductId) {
    [output writeString:2 value:self.appleProductId];
  }
  if (self.hasAlipayProductId) {
    [output writeString:3 value:self.alipayProductId];
  }
  if (self.hasName) {
    [output writeString:5 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:8 value:self.desc];
  }
  if (self.hasCount) {
    [output writeInt32:11 value:self.count];
  }
  if (self.hasTotalPrice) {
    [output writeString:12 value:self.totalPrice];
  }
  if (self.hasCurrency) {
    [output writeString:21 value:self.currency];
  }
  if (self.hasCountry) {
    [output writeString:22 value:self.country];
  }
  if (self.hasSaving) {
    [output writeString:50 value:self.saving];
  }
  if (self.hasTaobaoUrl) {
    [output writeString:61 value:self.taobaoUrl];
  }
  [self.pricesArray enumerateObjectsUsingBlock:^(PBIAPProductPrice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:99 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasAppleProductId) {
    size_ += computeStringSize(2, self.appleProductId);
  }
  if (self.hasAlipayProductId) {
    size_ += computeStringSize(3, self.alipayProductId);
  }
  if (self.hasName) {
    size_ += computeStringSize(5, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(8, self.desc);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(11, self.count);
  }
  if (self.hasTotalPrice) {
    size_ += computeStringSize(12, self.totalPrice);
  }
  if (self.hasCurrency) {
    size_ += computeStringSize(21, self.currency);
  }
  if (self.hasCountry) {
    size_ += computeStringSize(22, self.country);
  }
  if (self.hasSaving) {
    size_ += computeStringSize(50, self.saving);
  }
  if (self.hasTaobaoUrl) {
    size_ += computeStringSize(61, self.taobaoUrl);
  }
  [self.pricesArray enumerateObjectsUsingBlock:^(PBIAPProductPrice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(99, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBIAPProduct*) parseFromData:(NSData*) data {
  return (PBIAPProduct*)[[[PBIAPProduct builder] mergeFromData:data] build];
}
+ (PBIAPProduct*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProduct*)[[[PBIAPProduct builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProduct*) parseFromInputStream:(NSInputStream*) input {
  return (PBIAPProduct*)[[[PBIAPProduct builder] mergeFromInputStream:input] build];
}
+ (PBIAPProduct*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProduct*)[[[PBIAPProduct builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProduct*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBIAPProduct*)[[[PBIAPProduct builder] mergeFromCodedInputStream:input] build];
}
+ (PBIAPProduct*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProduct*)[[[PBIAPProduct builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductBuilder*) builder {
  return [[PBIAPProductBuilder alloc] init];
}
+ (PBIAPProductBuilder*) builderWithPrototype:(PBIAPProduct*) prototype {
  return [[PBIAPProduct builder] mergeFrom:prototype];
}
- (PBIAPProductBuilder*) builder {
  return [PBIAPProduct builder];
}
- (PBIAPProductBuilder*) toBuilder {
  return [PBIAPProduct builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBIAPProductType(self.type)];
  }
  if (self.hasAppleProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appleProductId", self.appleProductId];
  }
  if (self.hasAlipayProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alipayProductId", self.alipayProductId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasTotalPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPrice", self.totalPrice];
  }
  if (self.hasCurrency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currency", self.currency];
  }
  if (self.hasCountry) {
    [output appendFormat:@"%@%@: %@\n", indent, @"country", self.country];
  }
  if (self.hasSaving) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saving", self.saving];
  }
  if (self.hasTaobaoUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taobaoUrl", self.taobaoUrl];
  }
  [self.pricesArray enumerateObjectsUsingBlock:^(PBIAPProductPrice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"prices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBIAPProduct class]]) {
    return NO;
  }
  PBIAPProduct *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasAppleProductId == otherMessage.hasAppleProductId &&
      (!self.hasAppleProductId || [self.appleProductId isEqual:otherMessage.appleProductId]) &&
      self.hasAlipayProductId == otherMessage.hasAlipayProductId &&
      (!self.hasAlipayProductId || [self.alipayProductId isEqual:otherMessage.alipayProductId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasTotalPrice == otherMessage.hasTotalPrice &&
      (!self.hasTotalPrice || [self.totalPrice isEqual:otherMessage.totalPrice]) &&
      self.hasCurrency == otherMessage.hasCurrency &&
      (!self.hasCurrency || [self.currency isEqual:otherMessage.currency]) &&
      self.hasCountry == otherMessage.hasCountry &&
      (!self.hasCountry || [self.country isEqual:otherMessage.country]) &&
      self.hasSaving == otherMessage.hasSaving &&
      (!self.hasSaving || [self.saving isEqual:otherMessage.saving]) &&
      self.hasTaobaoUrl == otherMessage.hasTaobaoUrl &&
      (!self.hasTaobaoUrl || [self.taobaoUrl isEqual:otherMessage.taobaoUrl]) &&
      [self.pricesArray isEqualToArray:otherMessage.pricesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasAppleProductId) {
    hashCode = hashCode * 31 + [self.appleProductId hash];
  }
  if (self.hasAlipayProductId) {
    hashCode = hashCode * 31 + [self.alipayProductId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasTotalPrice) {
    hashCode = hashCode * 31 + [self.totalPrice hash];
  }
  if (self.hasCurrency) {
    hashCode = hashCode * 31 + [self.currency hash];
  }
  if (self.hasCountry) {
    hashCode = hashCode * 31 + [self.country hash];
  }
  if (self.hasSaving) {
    hashCode = hashCode * 31 + [self.saving hash];
  }
  if (self.hasTaobaoUrl) {
    hashCode = hashCode * 31 + [self.taobaoUrl hash];
  }
  [self.pricesArray enumerateObjectsUsingBlock:^(PBIAPProductPrice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBIAPProductBuilder()
@property (strong) PBIAPProduct* resultPbiapproduct;
@end

@implementation PBIAPProductBuilder
@synthesize resultPbiapproduct;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbiapproduct = [[PBIAPProduct alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbiapproduct;
}
- (PBIAPProductBuilder*) clear {
  self.resultPbiapproduct = [[PBIAPProduct alloc] init];
  return self;
}
- (PBIAPProductBuilder*) clone {
  return [PBIAPProduct builderWithPrototype:resultPbiapproduct];
}
- (PBIAPProduct*) defaultInstance {
  return [PBIAPProduct defaultInstance];
}
- (PBIAPProduct*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBIAPProduct*) buildPartial {
  PBIAPProduct* returnMe = resultPbiapproduct;
  self.resultPbiapproduct = nil;
  return returnMe;
}
- (PBIAPProductBuilder*) mergeFrom:(PBIAPProduct*) other {
  if (other == [PBIAPProduct defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasAppleProductId) {
    [self setAppleProductId:other.appleProductId];
  }
  if (other.hasAlipayProductId) {
    [self setAlipayProductId:other.alipayProductId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasTotalPrice) {
    [self setTotalPrice:other.totalPrice];
  }
  if (other.hasCurrency) {
    [self setCurrency:other.currency];
  }
  if (other.hasCountry) {
    [self setCountry:other.country];
  }
  if (other.hasSaving) {
    [self setSaving:other.saving];
  }
  if (other.hasTaobaoUrl) {
    [self setTaobaoUrl:other.taobaoUrl];
  }
  if (other.pricesArray.count > 0) {
    if (resultPbiapproduct.pricesArray == nil) {
      resultPbiapproduct.pricesArray = [[NSMutableArray alloc] initWithArray:other.pricesArray];
    } else {
      [resultPbiapproduct.pricesArray addObjectsFromArray:other.pricesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBIAPProductBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBIAPProductBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PBIAPProductType value = (PBIAPProductType)[input readEnum];
        if (PBIAPProductTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setAppleProductId:[input readString]];
        break;
      }
      case 26: {
        [self setAlipayProductId:[input readString]];
        break;
      }
      case 42: {
        [self setName:[input readString]];
        break;
      }
      case 66: {
        [self setDesc:[input readString]];
        break;
      }
      case 88: {
        [self setCount:[input readInt32]];
        break;
      }
      case 98: {
        [self setTotalPrice:[input readString]];
        break;
      }
      case 170: {
        [self setCurrency:[input readString]];
        break;
      }
      case 178: {
        [self setCountry:[input readString]];
        break;
      }
      case 402: {
        [self setSaving:[input readString]];
        break;
      }
      case 490: {
        [self setTaobaoUrl:[input readString]];
        break;
      }
      case 794: {
        PBIAPProductPriceBuilder* subBuilder = [PBIAPProductPrice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPrices:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbiapproduct.hasType;
}
- (PBIAPProductType) type {
  return resultPbiapproduct.type;
}
- (PBIAPProductBuilder*) setType:(PBIAPProductType) value {
  resultPbiapproduct.hasType = YES;
  resultPbiapproduct.type = value;
  return self;
}
- (PBIAPProductBuilder*) clearType {
  resultPbiapproduct.hasType = NO;
  resultPbiapproduct.type = PBIAPProductTypeIapcoin;
  return self;
}
- (BOOL) hasAppleProductId {
  return resultPbiapproduct.hasAppleProductId;
}
- (NSString*) appleProductId {
  return resultPbiapproduct.appleProductId;
}
- (PBIAPProductBuilder*) setAppleProductId:(NSString*) value {
  resultPbiapproduct.hasAppleProductId = YES;
  resultPbiapproduct.appleProductId = value;
  return self;
}
- (PBIAPProductBuilder*) clearAppleProductId {
  resultPbiapproduct.hasAppleProductId = NO;
  resultPbiapproduct.appleProductId = @"";
  return self;
}
- (BOOL) hasAlipayProductId {
  return resultPbiapproduct.hasAlipayProductId;
}
- (NSString*) alipayProductId {
  return resultPbiapproduct.alipayProductId;
}
- (PBIAPProductBuilder*) setAlipayProductId:(NSString*) value {
  resultPbiapproduct.hasAlipayProductId = YES;
  resultPbiapproduct.alipayProductId = value;
  return self;
}
- (PBIAPProductBuilder*) clearAlipayProductId {
  resultPbiapproduct.hasAlipayProductId = NO;
  resultPbiapproduct.alipayProductId = @"";
  return self;
}
- (BOOL) hasName {
  return resultPbiapproduct.hasName;
}
- (NSString*) name {
  return resultPbiapproduct.name;
}
- (PBIAPProductBuilder*) setName:(NSString*) value {
  resultPbiapproduct.hasName = YES;
  resultPbiapproduct.name = value;
  return self;
}
- (PBIAPProductBuilder*) clearName {
  resultPbiapproduct.hasName = NO;
  resultPbiapproduct.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultPbiapproduct.hasDesc;
}
- (NSString*) desc {
  return resultPbiapproduct.desc;
}
- (PBIAPProductBuilder*) setDesc:(NSString*) value {
  resultPbiapproduct.hasDesc = YES;
  resultPbiapproduct.desc = value;
  return self;
}
- (PBIAPProductBuilder*) clearDesc {
  resultPbiapproduct.hasDesc = NO;
  resultPbiapproduct.desc = @"";
  return self;
}
- (BOOL) hasCount {
  return resultPbiapproduct.hasCount;
}
- (SInt32) count {
  return resultPbiapproduct.count;
}
- (PBIAPProductBuilder*) setCount:(SInt32) value {
  resultPbiapproduct.hasCount = YES;
  resultPbiapproduct.count = value;
  return self;
}
- (PBIAPProductBuilder*) clearCount {
  resultPbiapproduct.hasCount = NO;
  resultPbiapproduct.count = 1;
  return self;
}
- (BOOL) hasTotalPrice {
  return resultPbiapproduct.hasTotalPrice;
}
- (NSString*) totalPrice {
  return resultPbiapproduct.totalPrice;
}
- (PBIAPProductBuilder*) setTotalPrice:(NSString*) value {
  resultPbiapproduct.hasTotalPrice = YES;
  resultPbiapproduct.totalPrice = value;
  return self;
}
- (PBIAPProductBuilder*) clearTotalPrice {
  resultPbiapproduct.hasTotalPrice = NO;
  resultPbiapproduct.totalPrice = @"";
  return self;
}
- (BOOL) hasCurrency {
  return resultPbiapproduct.hasCurrency;
}
- (NSString*) currency {
  return resultPbiapproduct.currency;
}
- (PBIAPProductBuilder*) setCurrency:(NSString*) value {
  resultPbiapproduct.hasCurrency = YES;
  resultPbiapproduct.currency = value;
  return self;
}
- (PBIAPProductBuilder*) clearCurrency {
  resultPbiapproduct.hasCurrency = NO;
  resultPbiapproduct.currency = @"";
  return self;
}
- (BOOL) hasCountry {
  return resultPbiapproduct.hasCountry;
}
- (NSString*) country {
  return resultPbiapproduct.country;
}
- (PBIAPProductBuilder*) setCountry:(NSString*) value {
  resultPbiapproduct.hasCountry = YES;
  resultPbiapproduct.country = value;
  return self;
}
- (PBIAPProductBuilder*) clearCountry {
  resultPbiapproduct.hasCountry = NO;
  resultPbiapproduct.country = @"";
  return self;
}
- (BOOL) hasSaving {
  return resultPbiapproduct.hasSaving;
}
- (NSString*) saving {
  return resultPbiapproduct.saving;
}
- (PBIAPProductBuilder*) setSaving:(NSString*) value {
  resultPbiapproduct.hasSaving = YES;
  resultPbiapproduct.saving = value;
  return self;
}
- (PBIAPProductBuilder*) clearSaving {
  resultPbiapproduct.hasSaving = NO;
  resultPbiapproduct.saving = @"";
  return self;
}
- (BOOL) hasTaobaoUrl {
  return resultPbiapproduct.hasTaobaoUrl;
}
- (NSString*) taobaoUrl {
  return resultPbiapproduct.taobaoUrl;
}
- (PBIAPProductBuilder*) setTaobaoUrl:(NSString*) value {
  resultPbiapproduct.hasTaobaoUrl = YES;
  resultPbiapproduct.taobaoUrl = value;
  return self;
}
- (PBIAPProductBuilder*) clearTaobaoUrl {
  resultPbiapproduct.hasTaobaoUrl = NO;
  resultPbiapproduct.taobaoUrl = @"";
  return self;
}
- (NSMutableArray *)prices {
  return resultPbiapproduct.pricesArray;
}
- (PBIAPProductPrice*)pricesAtIndex:(NSUInteger)index {
  return [resultPbiapproduct pricesAtIndex:index];
}
- (PBIAPProductBuilder *)addPrices:(PBIAPProductPrice*)value {
  if (resultPbiapproduct.pricesArray == nil) {
    resultPbiapproduct.pricesArray = [[NSMutableArray alloc]init];
  }
  [resultPbiapproduct.pricesArray addObject:value];
  return self;
}
- (PBIAPProductBuilder *)setPricesArray:(NSArray *)array {
  resultPbiapproduct.pricesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBIAPProductBuilder *)clearPrices {
  resultPbiapproduct.pricesArray = nil;
  return self;
}
@end

@interface PBIAPProductPrice ()
@property (strong) NSString* price;
@property (strong) NSString* currency;
@property (strong) NSString* country;
@property (strong) NSString* saving;
@end

@implementation PBIAPProductPrice

- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasCurrency {
  return !!hasCurrency_;
}
- (void) setHasCurrency:(BOOL) _value_ {
  hasCurrency_ = !!_value_;
}
@synthesize currency;
- (BOOL) hasCountry {
  return !!hasCountry_;
}
- (void) setHasCountry:(BOOL) _value_ {
  hasCountry_ = !!_value_;
}
@synthesize country;
- (BOOL) hasSaving {
  return !!hasSaving_;
}
- (void) setHasSaving:(BOOL) _value_ {
  hasSaving_ = !!_value_;
}
@synthesize saving;
- (instancetype) init {
  if ((self = [super init])) {
    self.price = @"";
    self.currency = @"";
    self.country = @"";
    self.saving = @"";
  }
  return self;
}
static PBIAPProductPrice* defaultPBIAPProductPriceInstance = nil;
+ (void) initialize {
  if (self == [PBIAPProductPrice class]) {
    defaultPBIAPProductPriceInstance = [[PBIAPProductPrice alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBIAPProductPriceInstance;
}
- (instancetype) defaultInstance {
  return defaultPBIAPProductPriceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrice) {
    [output writeString:1 value:self.price];
  }
  if (self.hasCurrency) {
    [output writeString:2 value:self.currency];
  }
  if (self.hasCountry) {
    [output writeString:11 value:self.country];
  }
  if (self.hasSaving) {
    [output writeString:99 value:self.saving];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrice) {
    size_ += computeStringSize(1, self.price);
  }
  if (self.hasCurrency) {
    size_ += computeStringSize(2, self.currency);
  }
  if (self.hasCountry) {
    size_ += computeStringSize(11, self.country);
  }
  if (self.hasSaving) {
    size_ += computeStringSize(99, self.saving);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBIAPProductPrice*) parseFromData:(NSData*) data {
  return (PBIAPProductPrice*)[[[PBIAPProductPrice builder] mergeFromData:data] build];
}
+ (PBIAPProductPrice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProductPrice*)[[[PBIAPProductPrice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductPrice*) parseFromInputStream:(NSInputStream*) input {
  return (PBIAPProductPrice*)[[[PBIAPProductPrice builder] mergeFromInputStream:input] build];
}
+ (PBIAPProductPrice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProductPrice*)[[[PBIAPProductPrice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductPrice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBIAPProductPrice*)[[[PBIAPProductPrice builder] mergeFromCodedInputStream:input] build];
}
+ (PBIAPProductPrice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProductPrice*)[[[PBIAPProductPrice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductPriceBuilder*) builder {
  return [[PBIAPProductPriceBuilder alloc] init];
}
+ (PBIAPProductPriceBuilder*) builderWithPrototype:(PBIAPProductPrice*) prototype {
  return [[PBIAPProductPrice builder] mergeFrom:prototype];
}
- (PBIAPProductPriceBuilder*) builder {
  return [PBIAPProductPrice builder];
}
- (PBIAPProductPriceBuilder*) toBuilder {
  return [PBIAPProductPrice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", self.price];
  }
  if (self.hasCurrency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currency", self.currency];
  }
  if (self.hasCountry) {
    [output appendFormat:@"%@%@: %@\n", indent, @"country", self.country];
  }
  if (self.hasSaving) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saving", self.saving];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBIAPProductPrice class]]) {
    return NO;
  }
  PBIAPProductPrice *otherMessage = other;
  return
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || [self.price isEqual:otherMessage.price]) &&
      self.hasCurrency == otherMessage.hasCurrency &&
      (!self.hasCurrency || [self.currency isEqual:otherMessage.currency]) &&
      self.hasCountry == otherMessage.hasCountry &&
      (!self.hasCountry || [self.country isEqual:otherMessage.country]) &&
      self.hasSaving == otherMessage.hasSaving &&
      (!self.hasSaving || [self.saving isEqual:otherMessage.saving]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [self.price hash];
  }
  if (self.hasCurrency) {
    hashCode = hashCode * 31 + [self.currency hash];
  }
  if (self.hasCountry) {
    hashCode = hashCode * 31 + [self.country hash];
  }
  if (self.hasSaving) {
    hashCode = hashCode * 31 + [self.saving hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBIAPProductPriceBuilder()
@property (strong) PBIAPProductPrice* resultPbiapproductPrice;
@end

@implementation PBIAPProductPriceBuilder
@synthesize resultPbiapproductPrice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbiapproductPrice = [[PBIAPProductPrice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbiapproductPrice;
}
- (PBIAPProductPriceBuilder*) clear {
  self.resultPbiapproductPrice = [[PBIAPProductPrice alloc] init];
  return self;
}
- (PBIAPProductPriceBuilder*) clone {
  return [PBIAPProductPrice builderWithPrototype:resultPbiapproductPrice];
}
- (PBIAPProductPrice*) defaultInstance {
  return [PBIAPProductPrice defaultInstance];
}
- (PBIAPProductPrice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBIAPProductPrice*) buildPartial {
  PBIAPProductPrice* returnMe = resultPbiapproductPrice;
  self.resultPbiapproductPrice = nil;
  return returnMe;
}
- (PBIAPProductPriceBuilder*) mergeFrom:(PBIAPProductPrice*) other {
  if (other == [PBIAPProductPrice defaultInstance]) {
    return self;
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasCurrency) {
    [self setCurrency:other.currency];
  }
  if (other.hasCountry) {
    [self setCountry:other.country];
  }
  if (other.hasSaving) {
    [self setSaving:other.saving];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBIAPProductPriceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBIAPProductPriceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPrice:[input readString]];
        break;
      }
      case 18: {
        [self setCurrency:[input readString]];
        break;
      }
      case 90: {
        [self setCountry:[input readString]];
        break;
      }
      case 794: {
        [self setSaving:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPrice {
  return resultPbiapproductPrice.hasPrice;
}
- (NSString*) price {
  return resultPbiapproductPrice.price;
}
- (PBIAPProductPriceBuilder*) setPrice:(NSString*) value {
  resultPbiapproductPrice.hasPrice = YES;
  resultPbiapproductPrice.price = value;
  return self;
}
- (PBIAPProductPriceBuilder*) clearPrice {
  resultPbiapproductPrice.hasPrice = NO;
  resultPbiapproductPrice.price = @"";
  return self;
}
- (BOOL) hasCurrency {
  return resultPbiapproductPrice.hasCurrency;
}
- (NSString*) currency {
  return resultPbiapproductPrice.currency;
}
- (PBIAPProductPriceBuilder*) setCurrency:(NSString*) value {
  resultPbiapproductPrice.hasCurrency = YES;
  resultPbiapproductPrice.currency = value;
  return self;
}
- (PBIAPProductPriceBuilder*) clearCurrency {
  resultPbiapproductPrice.hasCurrency = NO;
  resultPbiapproductPrice.currency = @"";
  return self;
}
- (BOOL) hasCountry {
  return resultPbiapproductPrice.hasCountry;
}
- (NSString*) country {
  return resultPbiapproductPrice.country;
}
- (PBIAPProductPriceBuilder*) setCountry:(NSString*) value {
  resultPbiapproductPrice.hasCountry = YES;
  resultPbiapproductPrice.country = value;
  return self;
}
- (PBIAPProductPriceBuilder*) clearCountry {
  resultPbiapproductPrice.hasCountry = NO;
  resultPbiapproductPrice.country = @"";
  return self;
}
- (BOOL) hasSaving {
  return resultPbiapproductPrice.hasSaving;
}
- (NSString*) saving {
  return resultPbiapproductPrice.saving;
}
- (PBIAPProductPriceBuilder*) setSaving:(NSString*) value {
  resultPbiapproductPrice.hasSaving = YES;
  resultPbiapproductPrice.saving = value;
  return self;
}
- (PBIAPProductPriceBuilder*) clearSaving {
  resultPbiapproductPrice.hasSaving = NO;
  resultPbiapproductPrice.saving = @"";
  return self;
}
@end

@interface PBIAPProductList ()
@property (strong) NSMutableArray * productsArray;
@end

@implementation PBIAPProductList

@synthesize productsArray;
@dynamic products;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBIAPProductList* defaultPBIAPProductListInstance = nil;
+ (void) initialize {
  if (self == [PBIAPProductList class]) {
    defaultPBIAPProductListInstance = [[PBIAPProductList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBIAPProductListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBIAPProductListInstance;
}
- (NSArray *)products {
  return productsArray;
}
- (PBIAPProduct*)productsAtIndex:(NSUInteger)index {
  return [productsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitproducts = YES;
   [self.products enumerateObjectsUsingBlock:^(PBIAPProduct *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitproducts = NO;
      *stop = YES;
    }
  }];
  if (!isInitproducts) return isInitproducts;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.productsArray enumerateObjectsUsingBlock:^(PBIAPProduct *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.productsArray enumerateObjectsUsingBlock:^(PBIAPProduct *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBIAPProductList*) parseFromData:(NSData*) data {
  return (PBIAPProductList*)[[[PBIAPProductList builder] mergeFromData:data] build];
}
+ (PBIAPProductList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProductList*)[[[PBIAPProductList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductList*) parseFromInputStream:(NSInputStream*) input {
  return (PBIAPProductList*)[[[PBIAPProductList builder] mergeFromInputStream:input] build];
}
+ (PBIAPProductList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProductList*)[[[PBIAPProductList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBIAPProductList*)[[[PBIAPProductList builder] mergeFromCodedInputStream:input] build];
}
+ (PBIAPProductList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBIAPProductList*)[[[PBIAPProductList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBIAPProductListBuilder*) builder {
  return [[PBIAPProductListBuilder alloc] init];
}
+ (PBIAPProductListBuilder*) builderWithPrototype:(PBIAPProductList*) prototype {
  return [[PBIAPProductList builder] mergeFrom:prototype];
}
- (PBIAPProductListBuilder*) builder {
  return [PBIAPProductList builder];
}
- (PBIAPProductListBuilder*) toBuilder {
  return [PBIAPProductList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.productsArray enumerateObjectsUsingBlock:^(PBIAPProduct *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"products"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBIAPProductList class]]) {
    return NO;
  }
  PBIAPProductList *otherMessage = other;
  return
      [self.productsArray isEqualToArray:otherMessage.productsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.productsArray enumerateObjectsUsingBlock:^(PBIAPProduct *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBIAPProductListBuilder()
@property (strong) PBIAPProductList* resultPbiapproductList;
@end

@implementation PBIAPProductListBuilder
@synthesize resultPbiapproductList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbiapproductList = [[PBIAPProductList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbiapproductList;
}
- (PBIAPProductListBuilder*) clear {
  self.resultPbiapproductList = [[PBIAPProductList alloc] init];
  return self;
}
- (PBIAPProductListBuilder*) clone {
  return [PBIAPProductList builderWithPrototype:resultPbiapproductList];
}
- (PBIAPProductList*) defaultInstance {
  return [PBIAPProductList defaultInstance];
}
- (PBIAPProductList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBIAPProductList*) buildPartial {
  PBIAPProductList* returnMe = resultPbiapproductList;
  self.resultPbiapproductList = nil;
  return returnMe;
}
- (PBIAPProductListBuilder*) mergeFrom:(PBIAPProductList*) other {
  if (other == [PBIAPProductList defaultInstance]) {
    return self;
  }
  if (other.productsArray.count > 0) {
    if (resultPbiapproductList.productsArray == nil) {
      resultPbiapproductList.productsArray = [[NSMutableArray alloc] initWithArray:other.productsArray];
    } else {
      [resultPbiapproductList.productsArray addObjectsFromArray:other.productsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBIAPProductListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBIAPProductListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBIAPProductBuilder* subBuilder = [PBIAPProduct builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProducts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)products {
  return resultPbiapproductList.productsArray;
}
- (PBIAPProduct*)productsAtIndex:(NSUInteger)index {
  return [resultPbiapproductList productsAtIndex:index];
}
- (PBIAPProductListBuilder *)addProducts:(PBIAPProduct*)value {
  if (resultPbiapproductList.productsArray == nil) {
    resultPbiapproductList.productsArray = [[NSMutableArray alloc]init];
  }
  [resultPbiapproductList.productsArray addObject:value];
  return self;
}
- (PBIAPProductListBuilder *)setProductsArray:(NSArray *)array {
  resultPbiapproductList.productsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBIAPProductListBuilder *)clearProducts {
  resultPbiapproductList.productsArray = nil;
  return self;
}
@end

@interface PBUserItem ()
@property SInt32 itemId;
@property SInt32 count;
@property SInt32 createDate;
@property SInt32 modifyDate;
@property SInt32 expireDate;
@end

@implementation PBUserItem

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) _value_ {
  hasItemId_ = !!_value_;
}
@synthesize itemId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasModifyDate {
  return !!hasModifyDate_;
}
- (void) setHasModifyDate:(BOOL) _value_ {
  hasModifyDate_ = !!_value_;
}
@synthesize modifyDate;
- (BOOL) hasExpireDate {
  return !!hasExpireDate_;
}
- (void) setHasExpireDate:(BOOL) _value_ {
  hasExpireDate_ = !!_value_;
}
@synthesize expireDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.count = 0;
    self.createDate = 0;
    self.modifyDate = 0;
    self.expireDate = 0;
  }
  return self;
}
static PBUserItem* defaultPBUserItemInstance = nil;
+ (void) initialize {
  if (self == [PBUserItem class]) {
    defaultPBUserItemInstance = [[PBUserItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserItemInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasItemId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasModifyDate) {
    [output writeInt32:6 value:self.modifyDate];
  }
  if (self.hasExpireDate) {
    [output writeInt32:7 value:self.expireDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeInt32Size(1, self.itemId);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(2, self.count);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(5, self.createDate);
  }
  if (self.hasModifyDate) {
    size_ += computeInt32Size(6, self.modifyDate);
  }
  if (self.hasExpireDate) {
    size_ += computeInt32Size(7, self.expireDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserItem*) parseFromData:(NSData*) data {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromData:data] build];
}
+ (PBUserItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromInputStream:input] build];
}
+ (PBUserItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItem*)[[[PBUserItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemBuilder*) builder {
  return [[PBUserItemBuilder alloc] init];
}
+ (PBUserItemBuilder*) builderWithPrototype:(PBUserItem*) prototype {
  return [[PBUserItem builder] mergeFrom:prototype];
}
- (PBUserItemBuilder*) builder {
  return [PBUserItem builder];
}
- (PBUserItemBuilder*) toBuilder {
  return [PBUserItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInteger:self.itemId]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasModifyDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifyDate", [NSNumber numberWithInteger:self.modifyDate]];
  }
  if (self.hasExpireDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expireDate", [NSNumber numberWithInteger:self.expireDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserItem class]]) {
    return NO;
  }
  PBUserItem *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasModifyDate == otherMessage.hasModifyDate &&
      (!self.hasModifyDate || self.modifyDate == otherMessage.modifyDate) &&
      self.hasExpireDate == otherMessage.hasExpireDate &&
      (!self.hasExpireDate || self.expireDate == otherMessage.expireDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemId] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasModifyDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.modifyDate] hash];
  }
  if (self.hasExpireDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expireDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserItemBuilder()
@property (strong) PBUserItem* resultPbuserItem;
@end

@implementation PBUserItemBuilder
@synthesize resultPbuserItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserItem = [[PBUserItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserItem;
}
- (PBUserItemBuilder*) clear {
  self.resultPbuserItem = [[PBUserItem alloc] init];
  return self;
}
- (PBUserItemBuilder*) clone {
  return [PBUserItem builderWithPrototype:resultPbuserItem];
}
- (PBUserItem*) defaultInstance {
  return [PBUserItem defaultInstance];
}
- (PBUserItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserItem*) buildPartial {
  PBUserItem* returnMe = resultPbuserItem;
  self.resultPbuserItem = nil;
  return returnMe;
}
- (PBUserItemBuilder*) mergeFrom:(PBUserItem*) other {
  if (other == [PBUserItem defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasModifyDate) {
    [self setModifyDate:other.modifyDate];
  }
  if (other.hasExpireDate) {
    [self setExpireDate:other.expireDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 48: {
        [self setModifyDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setExpireDate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return resultPbuserItem.hasItemId;
}
- (SInt32) itemId {
  return resultPbuserItem.itemId;
}
- (PBUserItemBuilder*) setItemId:(SInt32) value {
  resultPbuserItem.hasItemId = YES;
  resultPbuserItem.itemId = value;
  return self;
}
- (PBUserItemBuilder*) clearItemId {
  resultPbuserItem.hasItemId = NO;
  resultPbuserItem.itemId = 0;
  return self;
}
- (BOOL) hasCount {
  return resultPbuserItem.hasCount;
}
- (SInt32) count {
  return resultPbuserItem.count;
}
- (PBUserItemBuilder*) setCount:(SInt32) value {
  resultPbuserItem.hasCount = YES;
  resultPbuserItem.count = value;
  return self;
}
- (PBUserItemBuilder*) clearCount {
  resultPbuserItem.hasCount = NO;
  resultPbuserItem.count = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbuserItem.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbuserItem.createDate;
}
- (PBUserItemBuilder*) setCreateDate:(SInt32) value {
  resultPbuserItem.hasCreateDate = YES;
  resultPbuserItem.createDate = value;
  return self;
}
- (PBUserItemBuilder*) clearCreateDate {
  resultPbuserItem.hasCreateDate = NO;
  resultPbuserItem.createDate = 0;
  return self;
}
- (BOOL) hasModifyDate {
  return resultPbuserItem.hasModifyDate;
}
- (SInt32) modifyDate {
  return resultPbuserItem.modifyDate;
}
- (PBUserItemBuilder*) setModifyDate:(SInt32) value {
  resultPbuserItem.hasModifyDate = YES;
  resultPbuserItem.modifyDate = value;
  return self;
}
- (PBUserItemBuilder*) clearModifyDate {
  resultPbuserItem.hasModifyDate = NO;
  resultPbuserItem.modifyDate = 0;
  return self;
}
- (BOOL) hasExpireDate {
  return resultPbuserItem.hasExpireDate;
}
- (SInt32) expireDate {
  return resultPbuserItem.expireDate;
}
- (PBUserItemBuilder*) setExpireDate:(SInt32) value {
  resultPbuserItem.hasExpireDate = YES;
  resultPbuserItem.expireDate = value;
  return self;
}
- (PBUserItemBuilder*) clearExpireDate {
  resultPbuserItem.hasExpireDate = NO;
  resultPbuserItem.expireDate = 0;
  return self;
}
@end

@interface PBUserItemList ()
@property (strong) NSMutableArray * userItemsArray;
@end

@implementation PBUserItemList

@synthesize userItemsArray;
@dynamic userItems;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBUserItemList* defaultPBUserItemListInstance = nil;
+ (void) initialize {
  if (self == [PBUserItemList class]) {
    defaultPBUserItemListInstance = [[PBUserItemList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserItemListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserItemListInstance;
}
- (NSArray *)userItems {
  return userItemsArray;
}
- (PBUserItem*)userItemsAtIndex:(NSUInteger)index {
  return [userItemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserItems = YES;
   [self.userItems enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserItems = NO;
      *stop = YES;
    }
  }];
  if (!isInituserItems) return isInituserItems;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userItemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userItemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserItemList*) parseFromData:(NSData*) data {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromData:data] build];
}
+ (PBUserItemList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromInputStream:input] build];
}
+ (PBUserItemList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserItemList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserItemList*)[[[PBUserItemList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserItemListBuilder*) builder {
  return [[PBUserItemListBuilder alloc] init];
}
+ (PBUserItemListBuilder*) builderWithPrototype:(PBUserItemList*) prototype {
  return [[PBUserItemList builder] mergeFrom:prototype];
}
- (PBUserItemListBuilder*) builder {
  return [PBUserItemList builder];
}
- (PBUserItemListBuilder*) toBuilder {
  return [PBUserItemList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userItemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userItems"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserItemList class]]) {
    return NO;
  }
  PBUserItemList *otherMessage = other;
  return
      [self.userItemsArray isEqualToArray:otherMessage.userItemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userItemsArray enumerateObjectsUsingBlock:^(PBUserItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserItemListBuilder()
@property (strong) PBUserItemList* resultPbuserItemList;
@end

@implementation PBUserItemListBuilder
@synthesize resultPbuserItemList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserItemList = [[PBUserItemList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserItemList;
}
- (PBUserItemListBuilder*) clear {
  self.resultPbuserItemList = [[PBUserItemList alloc] init];
  return self;
}
- (PBUserItemListBuilder*) clone {
  return [PBUserItemList builderWithPrototype:resultPbuserItemList];
}
- (PBUserItemList*) defaultInstance {
  return [PBUserItemList defaultInstance];
}
- (PBUserItemList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserItemList*) buildPartial {
  PBUserItemList* returnMe = resultPbuserItemList;
  self.resultPbuserItemList = nil;
  return returnMe;
}
- (PBUserItemListBuilder*) mergeFrom:(PBUserItemList*) other {
  if (other == [PBUserItemList defaultInstance]) {
    return self;
  }
  if (other.userItemsArray.count > 0) {
    if (resultPbuserItemList.userItemsArray == nil) {
      resultPbuserItemList.userItemsArray = [[NSMutableArray alloc] initWithArray:other.userItemsArray];
    } else {
      [resultPbuserItemList.userItemsArray addObjectsFromArray:other.userItemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserItemListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserItemListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PBUserItemBuilder* subBuilder = [PBUserItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userItems {
  return resultPbuserItemList.userItemsArray;
}
- (PBUserItem*)userItemsAtIndex:(NSUInteger)index {
  return [resultPbuserItemList userItemsAtIndex:index];
}
- (PBUserItemListBuilder *)addUserItems:(PBUserItem*)value {
  if (resultPbuserItemList.userItemsArray == nil) {
    resultPbuserItemList.userItemsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserItemList.userItemsArray addObject:value];
  return self;
}
- (PBUserItemListBuilder *)setUserItemsArray:(NSArray *)array {
  resultPbuserItemList.userItemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserItemListBuilder *)clearUserItems {
  resultPbuserItemList.userItemsArray = nil;
  return self;
}
@end

@interface PBLocalizeString ()
@property (strong) NSString* languageCode;
@property (strong) NSString* text;
@property (strong) NSString* localizedText;
@end

@implementation PBLocalizeString

- (BOOL) hasLanguageCode {
  return !!hasLanguageCode_;
}
- (void) setHasLanguageCode:(BOOL) _value_ {
  hasLanguageCode_ = !!_value_;
}
@synthesize languageCode;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasLocalizedText {
  return !!hasLocalizedText_;
}
- (void) setHasLocalizedText:(BOOL) _value_ {
  hasLocalizedText_ = !!_value_;
}
@synthesize localizedText;
- (instancetype) init {
  if ((self = [super init])) {
    self.languageCode = @"";
    self.text = @"";
    self.localizedText = @"";
  }
  return self;
}
static PBLocalizeString* defaultPBLocalizeStringInstance = nil;
+ (void) initialize {
  if (self == [PBLocalizeString class]) {
    defaultPBLocalizeStringInstance = [[PBLocalizeString alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBLocalizeStringInstance;
}
- (instancetype) defaultInstance {
  return defaultPBLocalizeStringInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLanguageCode) {
    return NO;
  }
  if (!self.hasLocalizedText) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLanguageCode) {
    [output writeString:1 value:self.languageCode];
  }
  if (self.hasText) {
    [output writeString:2 value:self.text];
  }
  if (self.hasLocalizedText) {
    [output writeString:3 value:self.localizedText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLanguageCode) {
    size_ += computeStringSize(1, self.languageCode);
  }
  if (self.hasText) {
    size_ += computeStringSize(2, self.text);
  }
  if (self.hasLocalizedText) {
    size_ += computeStringSize(3, self.localizedText);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBLocalizeString*) parseFromData:(NSData*) data {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromData:data] build];
}
+ (PBLocalizeString*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLocalizeString*) parseFromInputStream:(NSInputStream*) input {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromInputStream:input] build];
}
+ (PBLocalizeString*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLocalizeString*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromCodedInputStream:input] build];
}
+ (PBLocalizeString*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLocalizeString*)[[[PBLocalizeString builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLocalizeStringBuilder*) builder {
  return [[PBLocalizeStringBuilder alloc] init];
}
+ (PBLocalizeStringBuilder*) builderWithPrototype:(PBLocalizeString*) prototype {
  return [[PBLocalizeString builder] mergeFrom:prototype];
}
- (PBLocalizeStringBuilder*) builder {
  return [PBLocalizeString builder];
}
- (PBLocalizeStringBuilder*) toBuilder {
  return [PBLocalizeString builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLanguageCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"languageCode", self.languageCode];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasLocalizedText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localizedText", self.localizedText];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBLocalizeString class]]) {
    return NO;
  }
  PBLocalizeString *otherMessage = other;
  return
      self.hasLanguageCode == otherMessage.hasLanguageCode &&
      (!self.hasLanguageCode || [self.languageCode isEqual:otherMessage.languageCode]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasLocalizedText == otherMessage.hasLocalizedText &&
      (!self.hasLocalizedText || [self.localizedText isEqual:otherMessage.localizedText]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLanguageCode) {
    hashCode = hashCode * 31 + [self.languageCode hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasLocalizedText) {
    hashCode = hashCode * 31 + [self.localizedText hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBLocalizeStringBuilder()
@property (strong) PBLocalizeString* resultPblocalizeString;
@end

@implementation PBLocalizeStringBuilder
@synthesize resultPblocalizeString;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPblocalizeString = [[PBLocalizeString alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPblocalizeString;
}
- (PBLocalizeStringBuilder*) clear {
  self.resultPblocalizeString = [[PBLocalizeString alloc] init];
  return self;
}
- (PBLocalizeStringBuilder*) clone {
  return [PBLocalizeString builderWithPrototype:resultPblocalizeString];
}
- (PBLocalizeString*) defaultInstance {
  return [PBLocalizeString defaultInstance];
}
- (PBLocalizeString*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLocalizeString*) buildPartial {
  PBLocalizeString* returnMe = resultPblocalizeString;
  self.resultPblocalizeString = nil;
  return returnMe;
}
- (PBLocalizeStringBuilder*) mergeFrom:(PBLocalizeString*) other {
  if (other == [PBLocalizeString defaultInstance]) {
    return self;
  }
  if (other.hasLanguageCode) {
    [self setLanguageCode:other.languageCode];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasLocalizedText) {
    [self setLocalizedText:other.localizedText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLocalizeStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLocalizeStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLanguageCode:[input readString]];
        break;
      }
      case 18: {
        [self setText:[input readString]];
        break;
      }
      case 26: {
        [self setLocalizedText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLanguageCode {
  return resultPblocalizeString.hasLanguageCode;
}
- (NSString*) languageCode {
  return resultPblocalizeString.languageCode;
}
- (PBLocalizeStringBuilder*) setLanguageCode:(NSString*) value {
  resultPblocalizeString.hasLanguageCode = YES;
  resultPblocalizeString.languageCode = value;
  return self;
}
- (PBLocalizeStringBuilder*) clearLanguageCode {
  resultPblocalizeString.hasLanguageCode = NO;
  resultPblocalizeString.languageCode = @"";
  return self;
}
- (BOOL) hasText {
  return resultPblocalizeString.hasText;
}
- (NSString*) text {
  return resultPblocalizeString.text;
}
- (PBLocalizeStringBuilder*) setText:(NSString*) value {
  resultPblocalizeString.hasText = YES;
  resultPblocalizeString.text = value;
  return self;
}
- (PBLocalizeStringBuilder*) clearText {
  resultPblocalizeString.hasText = NO;
  resultPblocalizeString.text = @"";
  return self;
}
- (BOOL) hasLocalizedText {
  return resultPblocalizeString.hasLocalizedText;
}
- (NSString*) localizedText {
  return resultPblocalizeString.localizedText;
}
- (PBLocalizeStringBuilder*) setLocalizedText:(NSString*) value {
  resultPblocalizeString.hasLocalizedText = YES;
  resultPblocalizeString.localizedText = value;
  return self;
}
- (PBLocalizeStringBuilder*) clearLocalizedText {
  resultPblocalizeString.hasLocalizedText = NO;
  resultPblocalizeString.localizedText = @"";
  return self;
}
@end

@interface PBApp ()
@property (strong) NSMutableArray * nameArray;
@property (strong) NSString* appId;
@property (strong) NSMutableArray * descArray;
@property (strong) NSString* downloadUrl;
@property (strong) NSString* logo;
@end

@implementation PBApp

@synthesize nameArray;
@dynamic name;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
@synthesize descArray;
@dynamic desc;
- (BOOL) hasDownloadUrl {
  return !!hasDownloadUrl_;
}
- (void) setHasDownloadUrl:(BOOL) _value_ {
  hasDownloadUrl_ = !!_value_;
}
@synthesize downloadUrl;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) _value_ {
  hasLogo_ = !!_value_;
}
@synthesize logo;
- (instancetype) init {
  if ((self = [super init])) {
    self.appId = @"";
    self.downloadUrl = @"";
    self.logo = @"";
  }
  return self;
}
static PBApp* defaultPBAppInstance = nil;
+ (void) initialize {
  if (self == [PBApp class]) {
    defaultPBAppInstance = [[PBApp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBAppInstance;
}
- (instancetype) defaultInstance {
  return defaultPBAppInstance;
}
- (NSArray *)name {
  return nameArray;
}
- (PBLocalizeString*)nameAtIndex:(NSUInteger)index {
  return [nameArray objectAtIndex:index];
}
- (NSArray *)desc {
  return descArray;
}
- (PBLocalizeString*)descAtIndex:(NSUInteger)index {
  return [descArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasAppId) {
    return NO;
  }
  __block BOOL isInitname = YES;
   [self.name enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitname = NO;
      *stop = YES;
    }
  }];
  if (!isInitname) return isInitname;
  __block BOOL isInitdesc = YES;
   [self.desc enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdesc = NO;
      *stop = YES;
    }
  }];
  if (!isInitdesc) return isInitdesc;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasAppId) {
    [output writeString:2 value:self.appId];
  }
  [self.descArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasDownloadUrl) {
    [output writeString:4 value:self.downloadUrl];
  }
  if (self.hasLogo) {
    [output writeString:5 value:self.logo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasAppId) {
    size_ += computeStringSize(2, self.appId);
  }
  [self.descArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasDownloadUrl) {
    size_ += computeStringSize(4, self.downloadUrl);
  }
  if (self.hasLogo) {
    size_ += computeStringSize(5, self.logo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBApp*) parseFromData:(NSData*) data {
  return (PBApp*)[[[PBApp builder] mergeFromData:data] build];
}
+ (PBApp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBApp*)[[[PBApp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBApp*) parseFromInputStream:(NSInputStream*) input {
  return (PBApp*)[[[PBApp builder] mergeFromInputStream:input] build];
}
+ (PBApp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBApp*)[[[PBApp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBApp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBApp*)[[[PBApp builder] mergeFromCodedInputStream:input] build];
}
+ (PBApp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBApp*)[[[PBApp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAppBuilder*) builder {
  return [[PBAppBuilder alloc] init];
}
+ (PBAppBuilder*) builderWithPrototype:(PBApp*) prototype {
  return [[PBApp builder] mergeFrom:prototype];
}
- (PBAppBuilder*) builder {
  return [PBApp builder];
}
- (PBAppBuilder*) toBuilder {
  return [PBApp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"name"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  [self.descArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"desc"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDownloadUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downloadUrl", self.downloadUrl];
  }
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", self.logo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBApp class]]) {
    return NO;
  }
  PBApp *otherMessage = other;
  return
      [self.nameArray isEqualToArray:otherMessage.nameArray] &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      [self.descArray isEqualToArray:otherMessage.descArray] &&
      self.hasDownloadUrl == otherMessage.hasDownloadUrl &&
      (!self.hasDownloadUrl || [self.downloadUrl isEqual:otherMessage.downloadUrl]) &&
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || [self.logo isEqual:otherMessage.logo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  [self.descArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDownloadUrl) {
    hashCode = hashCode * 31 + [self.downloadUrl hash];
  }
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [self.logo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBAppBuilder()
@property (strong) PBApp* resultPbapp;
@end

@implementation PBAppBuilder
@synthesize resultPbapp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbapp = [[PBApp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbapp;
}
- (PBAppBuilder*) clear {
  self.resultPbapp = [[PBApp alloc] init];
  return self;
}
- (PBAppBuilder*) clone {
  return [PBApp builderWithPrototype:resultPbapp];
}
- (PBApp*) defaultInstance {
  return [PBApp defaultInstance];
}
- (PBApp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBApp*) buildPartial {
  PBApp* returnMe = resultPbapp;
  self.resultPbapp = nil;
  return returnMe;
}
- (PBAppBuilder*) mergeFrom:(PBApp*) other {
  if (other == [PBApp defaultInstance]) {
    return self;
  }
  if (other.nameArray.count > 0) {
    if (resultPbapp.nameArray == nil) {
      resultPbapp.nameArray = [[NSMutableArray alloc] initWithArray:other.nameArray];
    } else {
      [resultPbapp.nameArray addObjectsFromArray:other.nameArray];
    }
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.descArray.count > 0) {
    if (resultPbapp.descArray == nil) {
      resultPbapp.descArray = [[NSMutableArray alloc] initWithArray:other.descArray];
    } else {
      [resultPbapp.descArray addObjectsFromArray:other.descArray];
    }
  }
  if (other.hasDownloadUrl) {
    [self setDownloadUrl:other.downloadUrl];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBAppBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBAppBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBLocalizeStringBuilder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addName:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setAppId:[input readString]];
        break;
      }
      case 26: {
        PBLocalizeStringBuilder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDesc:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setDownloadUrl:[input readString]];
        break;
      }
      case 42: {
        [self setLogo:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)name {
  return resultPbapp.nameArray;
}
- (PBLocalizeString*)nameAtIndex:(NSUInteger)index {
  return [resultPbapp nameAtIndex:index];
}
- (PBAppBuilder *)addName:(PBLocalizeString*)value {
  if (resultPbapp.nameArray == nil) {
    resultPbapp.nameArray = [[NSMutableArray alloc]init];
  }
  [resultPbapp.nameArray addObject:value];
  return self;
}
- (PBAppBuilder *)setNameArray:(NSArray *)array {
  resultPbapp.nameArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBAppBuilder *)clearName {
  resultPbapp.nameArray = nil;
  return self;
}
- (BOOL) hasAppId {
  return resultPbapp.hasAppId;
}
- (NSString*) appId {
  return resultPbapp.appId;
}
- (PBAppBuilder*) setAppId:(NSString*) value {
  resultPbapp.hasAppId = YES;
  resultPbapp.appId = value;
  return self;
}
- (PBAppBuilder*) clearAppId {
  resultPbapp.hasAppId = NO;
  resultPbapp.appId = @"";
  return self;
}
- (NSMutableArray *)desc {
  return resultPbapp.descArray;
}
- (PBLocalizeString*)descAtIndex:(NSUInteger)index {
  return [resultPbapp descAtIndex:index];
}
- (PBAppBuilder *)addDesc:(PBLocalizeString*)value {
  if (resultPbapp.descArray == nil) {
    resultPbapp.descArray = [[NSMutableArray alloc]init];
  }
  [resultPbapp.descArray addObject:value];
  return self;
}
- (PBAppBuilder *)setDescArray:(NSArray *)array {
  resultPbapp.descArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBAppBuilder *)clearDesc {
  resultPbapp.descArray = nil;
  return self;
}
- (BOOL) hasDownloadUrl {
  return resultPbapp.hasDownloadUrl;
}
- (NSString*) downloadUrl {
  return resultPbapp.downloadUrl;
}
- (PBAppBuilder*) setDownloadUrl:(NSString*) value {
  resultPbapp.hasDownloadUrl = YES;
  resultPbapp.downloadUrl = value;
  return self;
}
- (PBAppBuilder*) clearDownloadUrl {
  resultPbapp.hasDownloadUrl = NO;
  resultPbapp.downloadUrl = @"";
  return self;
}
- (BOOL) hasLogo {
  return resultPbapp.hasLogo;
}
- (NSString*) logo {
  return resultPbapp.logo;
}
- (PBAppBuilder*) setLogo:(NSString*) value {
  resultPbapp.hasLogo = YES;
  resultPbapp.logo = value;
  return self;
}
- (PBAppBuilder*) clearLogo {
  resultPbapp.hasLogo = NO;
  resultPbapp.logo = @"";
  return self;
}
@end

@interface PBSize ()
@property Float32 width;
@property Float32 height;
@end

@implementation PBSize

- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (instancetype) init {
  if ((self = [super init])) {
    self.width = 304;
    self.height = 320;
  }
  return self;
}
static PBSize* defaultPBSizeInstance = nil;
+ (void) initialize {
  if (self == [PBSize class]) {
    defaultPBSizeInstance = [[PBSize alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSizeInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSizeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWidth) {
    [output writeFloat:1 value:self.width];
  }
  if (self.hasHeight) {
    [output writeFloat:2 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWidth) {
    size_ += computeFloatSize(1, self.width);
  }
  if (self.hasHeight) {
    size_ += computeFloatSize(2, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSize*) parseFromData:(NSData*) data {
  return (PBSize*)[[[PBSize builder] mergeFromData:data] build];
}
+ (PBSize*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSize*)[[[PBSize builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSize*) parseFromInputStream:(NSInputStream*) input {
  return (PBSize*)[[[PBSize builder] mergeFromInputStream:input] build];
}
+ (PBSize*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSize*)[[[PBSize builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSize*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSize*)[[[PBSize builder] mergeFromCodedInputStream:input] build];
}
+ (PBSize*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSize*)[[[PBSize builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSizeBuilder*) builder {
  return [[PBSizeBuilder alloc] init];
}
+ (PBSizeBuilder*) builderWithPrototype:(PBSize*) prototype {
  return [[PBSize builder] mergeFrom:prototype];
}
- (PBSizeBuilder*) builder {
  return [PBSize builder];
}
- (PBSizeBuilder*) toBuilder {
  return [PBSize builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithFloat:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSize class]]) {
    return NO;
  }
  PBSize *otherMessage = other;
  return
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSizeBuilder()
@property (strong) PBSize* resultPbsize;
@end

@implementation PBSizeBuilder
@synthesize resultPbsize;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbsize = [[PBSize alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbsize;
}
- (PBSizeBuilder*) clear {
  self.resultPbsize = [[PBSize alloc] init];
  return self;
}
- (PBSizeBuilder*) clone {
  return [PBSize builderWithPrototype:resultPbsize];
}
- (PBSize*) defaultInstance {
  return [PBSize defaultInstance];
}
- (PBSize*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSize*) buildPartial {
  PBSize* returnMe = resultPbsize;
  self.resultPbsize = nil;
  return returnMe;
}
- (PBSizeBuilder*) mergeFrom:(PBSize*) other {
  if (other == [PBSize defaultInstance]) {
    return self;
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSizeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSizeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 21: {
        [self setHeight:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasWidth {
  return resultPbsize.hasWidth;
}
- (Float32) width {
  return resultPbsize.width;
}
- (PBSizeBuilder*) setWidth:(Float32) value {
  resultPbsize.hasWidth = YES;
  resultPbsize.width = value;
  return self;
}
- (PBSizeBuilder*) clearWidth {
  resultPbsize.hasWidth = NO;
  resultPbsize.width = 304;
  return self;
}
- (BOOL) hasHeight {
  return resultPbsize.hasHeight;
}
- (Float32) height {
  return resultPbsize.height;
}
- (PBSizeBuilder*) setHeight:(Float32) value {
  resultPbsize.hasHeight = YES;
  resultPbsize.height = value;
  return self;
}
- (PBSizeBuilder*) clearHeight {
  resultPbsize.hasHeight = NO;
  resultPbsize.height = 320;
  return self;
}
@end

@interface PBOpusRank ()
@property SInt32 type;
@property SInt32 value;
@property (strong) NSString* userId;
@end

@implementation PBOpusRank

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 1;
    self.value = 0;
    self.userId = @"";
  }
  return self;
}
static PBOpusRank* defaultPBOpusRankInstance = nil;
+ (void) initialize {
  if (self == [PBOpusRank class]) {
    defaultPBOpusRankInstance = [[PBOpusRank alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBOpusRankInstance;
}
- (instancetype) defaultInstance {
  return defaultPBOpusRankInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasValue) {
    size_ += computeInt32Size(2, self.value);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(3, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBOpusRank*) parseFromData:(NSData*) data {
  return (PBOpusRank*)[[[PBOpusRank builder] mergeFromData:data] build];
}
+ (PBOpusRank*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusRank*)[[[PBOpusRank builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBOpusRank*) parseFromInputStream:(NSInputStream*) input {
  return (PBOpusRank*)[[[PBOpusRank builder] mergeFromInputStream:input] build];
}
+ (PBOpusRank*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusRank*)[[[PBOpusRank builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusRank*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBOpusRank*)[[[PBOpusRank builder] mergeFromCodedInputStream:input] build];
}
+ (PBOpusRank*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusRank*)[[[PBOpusRank builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusRankBuilder*) builder {
  return [[PBOpusRankBuilder alloc] init];
}
+ (PBOpusRankBuilder*) builderWithPrototype:(PBOpusRank*) prototype {
  return [[PBOpusRank builder] mergeFrom:prototype];
}
- (PBOpusRankBuilder*) builder {
  return [PBOpusRank builder];
}
- (PBOpusRankBuilder*) toBuilder {
  return [PBOpusRank builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBOpusRank class]]) {
    return NO;
  }
  PBOpusRank *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBOpusRankBuilder()
@property (strong) PBOpusRank* resultPbopusRank;
@end

@implementation PBOpusRankBuilder
@synthesize resultPbopusRank;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbopusRank = [[PBOpusRank alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbopusRank;
}
- (PBOpusRankBuilder*) clear {
  self.resultPbopusRank = [[PBOpusRank alloc] init];
  return self;
}
- (PBOpusRankBuilder*) clone {
  return [PBOpusRank builderWithPrototype:resultPbopusRank];
}
- (PBOpusRank*) defaultInstance {
  return [PBOpusRank defaultInstance];
}
- (PBOpusRank*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBOpusRank*) buildPartial {
  PBOpusRank* returnMe = resultPbopusRank;
  self.resultPbopusRank = nil;
  return returnMe;
}
- (PBOpusRankBuilder*) mergeFrom:(PBOpusRank*) other {
  if (other == [PBOpusRank defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBOpusRankBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBOpusRankBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbopusRank.hasType;
}
- (SInt32) type {
  return resultPbopusRank.type;
}
- (PBOpusRankBuilder*) setType:(SInt32) value {
  resultPbopusRank.hasType = YES;
  resultPbopusRank.type = value;
  return self;
}
- (PBOpusRankBuilder*) clearType {
  resultPbopusRank.hasType = NO;
  resultPbopusRank.type = 1;
  return self;
}
- (BOOL) hasValue {
  return resultPbopusRank.hasValue;
}
- (SInt32) value {
  return resultPbopusRank.value;
}
- (PBOpusRankBuilder*) setValue:(SInt32) value {
  resultPbopusRank.hasValue = YES;
  resultPbopusRank.value = value;
  return self;
}
- (PBOpusRankBuilder*) clearValue {
  resultPbopusRank.hasValue = NO;
  resultPbopusRank.value = 0;
  return self;
}
- (BOOL) hasUserId {
  return resultPbopusRank.hasUserId;
}
- (NSString*) userId {
  return resultPbopusRank.userId;
}
- (PBOpusRankBuilder*) setUserId:(NSString*) value {
  resultPbopusRank.hasUserId = YES;
  resultPbopusRank.userId = value;
  return self;
}
- (PBOpusRankBuilder*) clearUserId {
  resultPbopusRank.hasUserId = NO;
  resultPbopusRank.userId = @"";
  return self;
}
@end

@interface PBUserAward ()
@property (strong) PBIntKeyValue* awardType;
@property (strong) PBGameUser* user;
@property SInt32 rank;
@property Float32 score;
@property SInt32 coins;
@property (strong) NSString* opusId;
@property SInt32 createDate;
@property (strong) NSString* contestId;
@end

@implementation PBUserAward

- (BOOL) hasAwardType {
  return !!hasAwardType_;
}
- (void) setHasAwardType:(BOOL) _value_ {
  hasAwardType_ = !!_value_;
}
@synthesize awardType;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) _value_ {
  hasRank_ = !!_value_;
}
@synthesize rank;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (BOOL) hasCoins {
  return !!hasCoins_;
}
- (void) setHasCoins:(BOOL) _value_ {
  hasCoins_ = !!_value_;
}
@synthesize coins;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) _value_ {
  hasContestId_ = !!_value_;
}
@synthesize contestId;
- (instancetype) init {
  if ((self = [super init])) {
    self.awardType = [PBIntKeyValue defaultInstance];
    self.user = [PBGameUser defaultInstance];
    self.rank = 0;
    self.score = 0;
    self.coins = 0;
    self.opusId = @"";
    self.createDate = 0;
    self.contestId = @"";
  }
  return self;
}
static PBUserAward* defaultPBUserAwardInstance = nil;
+ (void) initialize {
  if (self == [PBUserAward class]) {
    defaultPBUserAwardInstance = [[PBUserAward alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserAwardInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserAwardInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAwardType) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.awardType.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAwardType) {
    [output writeMessage:1 value:self.awardType];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasRank) {
    [output writeInt32:3 value:self.rank];
  }
  if (self.hasScore) {
    [output writeFloat:4 value:self.score];
  }
  if (self.hasCoins) {
    [output writeInt32:5 value:self.coins];
  }
  if (self.hasOpusId) {
    [output writeString:6 value:self.opusId];
  }
  if (self.hasCreateDate) {
    [output writeInt32:11 value:self.createDate];
  }
  if (self.hasContestId) {
    [output writeString:20 value:self.contestId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAwardType) {
    size_ += computeMessageSize(1, self.awardType);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasRank) {
    size_ += computeInt32Size(3, self.rank);
  }
  if (self.hasScore) {
    size_ += computeFloatSize(4, self.score);
  }
  if (self.hasCoins) {
    size_ += computeInt32Size(5, self.coins);
  }
  if (self.hasOpusId) {
    size_ += computeStringSize(6, self.opusId);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(11, self.createDate);
  }
  if (self.hasContestId) {
    size_ += computeStringSize(20, self.contestId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserAward*) parseFromData:(NSData*) data {
  return (PBUserAward*)[[[PBUserAward builder] mergeFromData:data] build];
}
+ (PBUserAward*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserAward*)[[[PBUserAward builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserAward*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserAward*)[[[PBUserAward builder] mergeFromInputStream:input] build];
}
+ (PBUserAward*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserAward*)[[[PBUserAward builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserAward*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserAward*)[[[PBUserAward builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserAward*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserAward*)[[[PBUserAward builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserAwardBuilder*) builder {
  return [[PBUserAwardBuilder alloc] init];
}
+ (PBUserAwardBuilder*) builderWithPrototype:(PBUserAward*) prototype {
  return [[PBUserAward builder] mergeFrom:prototype];
}
- (PBUserAwardBuilder*) builder {
  return [PBUserAward builder];
}
- (PBUserAwardBuilder*) toBuilder {
  return [PBUserAward builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAwardType) {
    [output appendFormat:@"%@%@ {\n", indent, @"awardType"];
    [self.awardType writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInteger:self.rank]];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithFloat:self.score]];
  }
  if (self.hasCoins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coins", [NSNumber numberWithInteger:self.coins]];
  }
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasContestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestId", self.contestId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserAward class]]) {
    return NO;
  }
  PBUserAward *otherMessage = other;
  return
      self.hasAwardType == otherMessage.hasAwardType &&
      (!self.hasAwardType || [self.awardType isEqual:otherMessage.awardType]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasCoins == otherMessage.hasCoins &&
      (!self.hasCoins || self.coins == otherMessage.coins) &&
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasContestId == otherMessage.hasContestId &&
      (!self.hasContestId || [self.contestId isEqual:otherMessage.contestId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAwardType) {
    hashCode = hashCode * 31 + [self.awardType hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rank] hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.score] hash];
  }
  if (self.hasCoins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.coins] hash];
  }
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasContestId) {
    hashCode = hashCode * 31 + [self.contestId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserAwardBuilder()
@property (strong) PBUserAward* resultPbuserAward;
@end

@implementation PBUserAwardBuilder
@synthesize resultPbuserAward;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserAward = [[PBUserAward alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserAward;
}
- (PBUserAwardBuilder*) clear {
  self.resultPbuserAward = [[PBUserAward alloc] init];
  return self;
}
- (PBUserAwardBuilder*) clone {
  return [PBUserAward builderWithPrototype:resultPbuserAward];
}
- (PBUserAward*) defaultInstance {
  return [PBUserAward defaultInstance];
}
- (PBUserAward*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserAward*) buildPartial {
  PBUserAward* returnMe = resultPbuserAward;
  self.resultPbuserAward = nil;
  return returnMe;
}
- (PBUserAwardBuilder*) mergeFrom:(PBUserAward*) other {
  if (other == [PBUserAward defaultInstance]) {
    return self;
  }
  if (other.hasAwardType) {
    [self mergeAwardType:other.awardType];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasCoins) {
    [self setCoins:other.coins];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserAwardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserAwardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBIntKeyValueBuilder* subBuilder = [PBIntKeyValue builder];
        if (self.hasAwardType) {
          [subBuilder mergeFrom:self.awardType];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAwardType:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setRank:[input readInt32]];
        break;
      }
      case 37: {
        [self setScore:[input readFloat]];
        break;
      }
      case 40: {
        [self setCoins:[input readInt32]];
        break;
      }
      case 50: {
        [self setOpusId:[input readString]];
        break;
      }
      case 88: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 162: {
        [self setContestId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAwardType {
  return resultPbuserAward.hasAwardType;
}
- (PBIntKeyValue*) awardType {
  return resultPbuserAward.awardType;
}
- (PBUserAwardBuilder*) setAwardType:(PBIntKeyValue*) value {
  resultPbuserAward.hasAwardType = YES;
  resultPbuserAward.awardType = value;
  return self;
}
- (PBUserAwardBuilder*) setAwardTypeBuilder:(PBIntKeyValueBuilder*) builderForValue {
  return [self setAwardType:[builderForValue build]];
}
- (PBUserAwardBuilder*) mergeAwardType:(PBIntKeyValue*) value {
  if (resultPbuserAward.hasAwardType &&
      resultPbuserAward.awardType != [PBIntKeyValue defaultInstance]) {
    resultPbuserAward.awardType =
      [[[PBIntKeyValue builderWithPrototype:resultPbuserAward.awardType] mergeFrom:value] buildPartial];
  } else {
    resultPbuserAward.awardType = value;
  }
  resultPbuserAward.hasAwardType = YES;
  return self;
}
- (PBUserAwardBuilder*) clearAwardType {
  resultPbuserAward.hasAwardType = NO;
  resultPbuserAward.awardType = [PBIntKeyValue defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultPbuserAward.hasUser;
}
- (PBGameUser*) user {
  return resultPbuserAward.user;
}
- (PBUserAwardBuilder*) setUser:(PBGameUser*) value {
  resultPbuserAward.hasUser = YES;
  resultPbuserAward.user = value;
  return self;
}
- (PBUserAwardBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (PBUserAwardBuilder*) mergeUser:(PBGameUser*) value {
  if (resultPbuserAward.hasUser &&
      resultPbuserAward.user != [PBGameUser defaultInstance]) {
    resultPbuserAward.user =
      [[[PBGameUser builderWithPrototype:resultPbuserAward.user] mergeFrom:value] buildPartial];
  } else {
    resultPbuserAward.user = value;
  }
  resultPbuserAward.hasUser = YES;
  return self;
}
- (PBUserAwardBuilder*) clearUser {
  resultPbuserAward.hasUser = NO;
  resultPbuserAward.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasRank {
  return resultPbuserAward.hasRank;
}
- (SInt32) rank {
  return resultPbuserAward.rank;
}
- (PBUserAwardBuilder*) setRank:(SInt32) value {
  resultPbuserAward.hasRank = YES;
  resultPbuserAward.rank = value;
  return self;
}
- (PBUserAwardBuilder*) clearRank {
  resultPbuserAward.hasRank = NO;
  resultPbuserAward.rank = 0;
  return self;
}
- (BOOL) hasScore {
  return resultPbuserAward.hasScore;
}
- (Float32) score {
  return resultPbuserAward.score;
}
- (PBUserAwardBuilder*) setScore:(Float32) value {
  resultPbuserAward.hasScore = YES;
  resultPbuserAward.score = value;
  return self;
}
- (PBUserAwardBuilder*) clearScore {
  resultPbuserAward.hasScore = NO;
  resultPbuserAward.score = 0;
  return self;
}
- (BOOL) hasCoins {
  return resultPbuserAward.hasCoins;
}
- (SInt32) coins {
  return resultPbuserAward.coins;
}
- (PBUserAwardBuilder*) setCoins:(SInt32) value {
  resultPbuserAward.hasCoins = YES;
  resultPbuserAward.coins = value;
  return self;
}
- (PBUserAwardBuilder*) clearCoins {
  resultPbuserAward.hasCoins = NO;
  resultPbuserAward.coins = 0;
  return self;
}
- (BOOL) hasOpusId {
  return resultPbuserAward.hasOpusId;
}
- (NSString*) opusId {
  return resultPbuserAward.opusId;
}
- (PBUserAwardBuilder*) setOpusId:(NSString*) value {
  resultPbuserAward.hasOpusId = YES;
  resultPbuserAward.opusId = value;
  return self;
}
- (PBUserAwardBuilder*) clearOpusId {
  resultPbuserAward.hasOpusId = NO;
  resultPbuserAward.opusId = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbuserAward.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbuserAward.createDate;
}
- (PBUserAwardBuilder*) setCreateDate:(SInt32) value {
  resultPbuserAward.hasCreateDate = YES;
  resultPbuserAward.createDate = value;
  return self;
}
- (PBUserAwardBuilder*) clearCreateDate {
  resultPbuserAward.hasCreateDate = NO;
  resultPbuserAward.createDate = 0;
  return self;
}
- (BOOL) hasContestId {
  return resultPbuserAward.hasContestId;
}
- (NSString*) contestId {
  return resultPbuserAward.contestId;
}
- (PBUserAwardBuilder*) setContestId:(NSString*) value {
  resultPbuserAward.hasContestId = YES;
  resultPbuserAward.contestId = value;
  return self;
}
- (PBUserAwardBuilder*) clearContestId {
  resultPbuserAward.hasContestId = NO;
  resultPbuserAward.contestId = @"";
  return self;
}
@end

@interface PBTask ()
@property SInt32 taskId;
@property (strong) NSString* name;
@property (strong) NSString* desc;
@property PBTaskStatus status;
@property SInt32 badge;
@property SInt32 award;
@end

@implementation PBTask

- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) _value_ {
  hasTaskId_ = !!_value_;
}
@synthesize taskId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasBadge {
  return !!hasBadge_;
}
- (void) setHasBadge:(BOOL) _value_ {
  hasBadge_ = !!_value_;
}
@synthesize badge;
- (BOOL) hasAward {
  return !!hasAward_;
}
- (void) setHasAward:(BOOL) _value_ {
  hasAward_ = !!_value_;
}
@synthesize award;
- (instancetype) init {
  if ((self = [super init])) {
    self.taskId = 0;
    self.name = @"";
    self.desc = @"";
    self.status = PBTaskStatusTaskStatusCanTake;
    self.badge = 0;
    self.award = 0;
  }
  return self;
}
static PBTask* defaultPBTaskInstance = nil;
+ (void) initialize {
  if (self == [PBTask class]) {
    defaultPBTaskInstance = [[PBTask alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBTaskInstance;
}
- (instancetype) defaultInstance {
  return defaultPBTaskInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTaskId) {
    [output writeInt32:1 value:self.taskId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:3 value:self.desc];
  }
  if (self.hasStatus) {
    [output writeEnum:4 value:self.status];
  }
  if (self.hasBadge) {
    [output writeInt32:5 value:self.badge];
  }
  if (self.hasAward) {
    [output writeInt32:6 value:self.award];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTaskId) {
    size_ += computeInt32Size(1, self.taskId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(3, self.desc);
  }
  if (self.hasStatus) {
    size_ += computeEnumSize(4, self.status);
  }
  if (self.hasBadge) {
    size_ += computeInt32Size(5, self.badge);
  }
  if (self.hasAward) {
    size_ += computeInt32Size(6, self.award);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBTask*) parseFromData:(NSData*) data {
  return (PBTask*)[[[PBTask builder] mergeFromData:data] build];
}
+ (PBTask*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTask*)[[[PBTask builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBTask*) parseFromInputStream:(NSInputStream*) input {
  return (PBTask*)[[[PBTask builder] mergeFromInputStream:input] build];
}
+ (PBTask*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTask*)[[[PBTask builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTask*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBTask*)[[[PBTask builder] mergeFromCodedInputStream:input] build];
}
+ (PBTask*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTask*)[[[PBTask builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTaskBuilder*) builder {
  return [[PBTaskBuilder alloc] init];
}
+ (PBTaskBuilder*) builderWithPrototype:(PBTask*) prototype {
  return [[PBTask builder] mergeFrom:prototype];
}
- (PBTaskBuilder*) builder {
  return [PBTask builder];
}
- (PBTaskBuilder*) toBuilder {
  return [PBTask builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInteger:self.taskId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromPBTaskStatus(self.status)];
  }
  if (self.hasBadge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"badge", [NSNumber numberWithInteger:self.badge]];
  }
  if (self.hasAward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"award", [NSNumber numberWithInteger:self.award]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBTask class]]) {
    return NO;
  }
  PBTask *otherMessage = other;
  return
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasBadge == otherMessage.hasBadge &&
      (!self.hasBadge || self.badge == otherMessage.badge) &&
      self.hasAward == otherMessage.hasAward &&
      (!self.hasAward || self.award == otherMessage.award) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.taskId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasBadge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.badge] hash];
  }
  if (self.hasAward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.award] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBTaskBuilder()
@property (strong) PBTask* resultPbtask;
@end

@implementation PBTaskBuilder
@synthesize resultPbtask;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbtask = [[PBTask alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbtask;
}
- (PBTaskBuilder*) clear {
  self.resultPbtask = [[PBTask alloc] init];
  return self;
}
- (PBTaskBuilder*) clone {
  return [PBTask builderWithPrototype:resultPbtask];
}
- (PBTask*) defaultInstance {
  return [PBTask defaultInstance];
}
- (PBTask*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBTask*) buildPartial {
  PBTask* returnMe = resultPbtask;
  self.resultPbtask = nil;
  return returnMe;
}
- (PBTaskBuilder*) mergeFrom:(PBTask*) other {
  if (other == [PBTask defaultInstance]) {
    return self;
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasBadge) {
    [self setBadge:other.badge];
  }
  if (other.hasAward) {
    [self setAward:other.award];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBTaskBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBTaskBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDesc:[input readString]];
        break;
      }
      case 32: {
        PBTaskStatus value = (PBTaskStatus)[input readEnum];
        if (PBTaskStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setBadge:[input readInt32]];
        break;
      }
      case 48: {
        [self setAward:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTaskId {
  return resultPbtask.hasTaskId;
}
- (SInt32) taskId {
  return resultPbtask.taskId;
}
- (PBTaskBuilder*) setTaskId:(SInt32) value {
  resultPbtask.hasTaskId = YES;
  resultPbtask.taskId = value;
  return self;
}
- (PBTaskBuilder*) clearTaskId {
  resultPbtask.hasTaskId = NO;
  resultPbtask.taskId = 0;
  return self;
}
- (BOOL) hasName {
  return resultPbtask.hasName;
}
- (NSString*) name {
  return resultPbtask.name;
}
- (PBTaskBuilder*) setName:(NSString*) value {
  resultPbtask.hasName = YES;
  resultPbtask.name = value;
  return self;
}
- (PBTaskBuilder*) clearName {
  resultPbtask.hasName = NO;
  resultPbtask.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultPbtask.hasDesc;
}
- (NSString*) desc {
  return resultPbtask.desc;
}
- (PBTaskBuilder*) setDesc:(NSString*) value {
  resultPbtask.hasDesc = YES;
  resultPbtask.desc = value;
  return self;
}
- (PBTaskBuilder*) clearDesc {
  resultPbtask.hasDesc = NO;
  resultPbtask.desc = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultPbtask.hasStatus;
}
- (PBTaskStatus) status {
  return resultPbtask.status;
}
- (PBTaskBuilder*) setStatus:(PBTaskStatus) value {
  resultPbtask.hasStatus = YES;
  resultPbtask.status = value;
  return self;
}
- (PBTaskBuilder*) clearStatus {
  resultPbtask.hasStatus = NO;
  resultPbtask.status = PBTaskStatusTaskStatusCanTake;
  return self;
}
- (BOOL) hasBadge {
  return resultPbtask.hasBadge;
}
- (SInt32) badge {
  return resultPbtask.badge;
}
- (PBTaskBuilder*) setBadge:(SInt32) value {
  resultPbtask.hasBadge = YES;
  resultPbtask.badge = value;
  return self;
}
- (PBTaskBuilder*) clearBadge {
  resultPbtask.hasBadge = NO;
  resultPbtask.badge = 0;
  return self;
}
- (BOOL) hasAward {
  return resultPbtask.hasAward;
}
- (SInt32) award {
  return resultPbtask.award;
}
- (PBTaskBuilder*) setAward:(SInt32) value {
  resultPbtask.hasAward = YES;
  resultPbtask.award = value;
  return self;
}
- (PBTaskBuilder*) clearAward {
  resultPbtask.hasAward = NO;
  resultPbtask.award = 0;
  return self;
}
@end

@interface PBClass ()
@property (strong) NSString* classId;
@property (strong) NSMutableArray * subClassesArray;
@property (strong) NSMutableArray * keywordsArray;
@property (strong) NSString* desc;
@property BOOL isTopClass;
@property (strong) PBClass* parentClass;
@property (strong) NSString* cnName;
@property (strong) NSString* enName;
@property (strong) NSString* tcnName;
@end

@implementation PBClass

- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
@synthesize subClassesArray;
@dynamic subClasses;
@synthesize keywordsArray;
@dynamic keywords;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasIsTopClass {
  return !!hasIsTopClass_;
}
- (void) setHasIsTopClass:(BOOL) _value_ {
  hasIsTopClass_ = !!_value_;
}
- (BOOL) isTopClass {
  return !!isTopClass_;
}
- (void) setIsTopClass:(BOOL) _value_ {
  isTopClass_ = !!_value_;
}
- (BOOL) hasParentClass {
  return !!hasParentClass_;
}
- (void) setHasParentClass:(BOOL) _value_ {
  hasParentClass_ = !!_value_;
}
@synthesize parentClass;
- (BOOL) hasCnName {
  return !!hasCnName_;
}
- (void) setHasCnName:(BOOL) _value_ {
  hasCnName_ = !!_value_;
}
@synthesize cnName;
- (BOOL) hasEnName {
  return !!hasEnName_;
}
- (void) setHasEnName:(BOOL) _value_ {
  hasEnName_ = !!_value_;
}
@synthesize enName;
- (BOOL) hasTcnName {
  return !!hasTcnName_;
}
- (void) setHasTcnName:(BOOL) _value_ {
  hasTcnName_ = !!_value_;
}
@synthesize tcnName;
- (instancetype) init {
  if ((self = [super init])) {
    self.classId = @"";
    self.desc = @"";
    self.isTopClass = NO;
    self.parentClass = [PBClass defaultInstance];
    self.cnName = @"";
    self.enName = @"";
    self.tcnName = @"";
  }
  return self;
}
static PBClass* defaultPBClassInstance = nil;
+ (void) initialize {
  if (self == [PBClass class]) {
    defaultPBClassInstance = [[PBClass alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBClassInstance;
}
- (instancetype) defaultInstance {
  return defaultPBClassInstance;
}
- (NSArray *)subClasses {
  return subClassesArray;
}
- (PBClass*)subClassesAtIndex:(NSUInteger)index {
  return [subClassesArray objectAtIndex:index];
}
- (NSArray *)keywords {
  return keywordsArray;
}
- (NSString*)keywordsAtIndex:(NSUInteger)index {
  return [keywordsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasClassId) {
    return NO;
  }
  __block BOOL isInitsubClasses = YES;
   [self.subClasses enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsubClasses = NO;
      *stop = YES;
    }
  }];
  if (!isInitsubClasses) return isInitsubClasses;
  if (self.hasParentClass) {
    if (!self.parentClass.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClassId) {
    [output writeString:1 value:self.classId];
  }
  [self.subClassesArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.keywordsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  if (self.hasDesc) {
    [output writeString:5 value:self.desc];
  }
  if (self.hasIsTopClass) {
    [output writeBool:6 value:self.isTopClass];
  }
  if (self.hasParentClass) {
    [output writeMessage:7 value:self.parentClass];
  }
  if (self.hasCnName) {
    [output writeString:20 value:self.cnName];
  }
  if (self.hasEnName) {
    [output writeString:21 value:self.enName];
  }
  if (self.hasTcnName) {
    [output writeString:22 value:self.tcnName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasClassId) {
    size_ += computeStringSize(1, self.classId);
  }
  [self.subClassesArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.keywordsArray.count;
    [self.keywordsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(5, self.desc);
  }
  if (self.hasIsTopClass) {
    size_ += computeBoolSize(6, self.isTopClass);
  }
  if (self.hasParentClass) {
    size_ += computeMessageSize(7, self.parentClass);
  }
  if (self.hasCnName) {
    size_ += computeStringSize(20, self.cnName);
  }
  if (self.hasEnName) {
    size_ += computeStringSize(21, self.enName);
  }
  if (self.hasTcnName) {
    size_ += computeStringSize(22, self.tcnName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBClass*) parseFromData:(NSData*) data {
  return (PBClass*)[[[PBClass builder] mergeFromData:data] build];
}
+ (PBClass*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBClass*)[[[PBClass builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBClass*) parseFromInputStream:(NSInputStream*) input {
  return (PBClass*)[[[PBClass builder] mergeFromInputStream:input] build];
}
+ (PBClass*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBClass*)[[[PBClass builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBClass*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBClass*)[[[PBClass builder] mergeFromCodedInputStream:input] build];
}
+ (PBClass*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBClass*)[[[PBClass builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBClassBuilder*) builder {
  return [[PBClassBuilder alloc] init];
}
+ (PBClassBuilder*) builderWithPrototype:(PBClass*) prototype {
  return [[PBClass builder] mergeFrom:prototype];
}
- (PBClassBuilder*) builder {
  return [PBClass builder];
}
- (PBClassBuilder*) toBuilder {
  return [PBClass builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", self.classId];
  }
  [self.subClassesArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"subClasses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.keywordsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keywords", obj];
  }];
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasIsTopClass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isTopClass", [NSNumber numberWithBool:self.isTopClass]];
  }
  if (self.hasParentClass) {
    [output appendFormat:@"%@%@ {\n", indent, @"parentClass"];
    [self.parentClass writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnName", self.cnName];
  }
  if (self.hasEnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enName", self.enName];
  }
  if (self.hasTcnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnName", self.tcnName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBClass class]]) {
    return NO;
  }
  PBClass *otherMessage = other;
  return
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || [self.classId isEqual:otherMessage.classId]) &&
      [self.subClassesArray isEqualToArray:otherMessage.subClassesArray] &&
      [self.keywordsArray isEqualToArray:otherMessage.keywordsArray] &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasIsTopClass == otherMessage.hasIsTopClass &&
      (!self.hasIsTopClass || self.isTopClass == otherMessage.isTopClass) &&
      self.hasParentClass == otherMessage.hasParentClass &&
      (!self.hasParentClass || [self.parentClass isEqual:otherMessage.parentClass]) &&
      self.hasCnName == otherMessage.hasCnName &&
      (!self.hasCnName || [self.cnName isEqual:otherMessage.cnName]) &&
      self.hasEnName == otherMessage.hasEnName &&
      (!self.hasEnName || [self.enName isEqual:otherMessage.enName]) &&
      self.hasTcnName == otherMessage.hasTcnName &&
      (!self.hasTcnName || [self.tcnName isEqual:otherMessage.tcnName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [self.classId hash];
  }
  [self.subClassesArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.keywordsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasIsTopClass) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isTopClass] hash];
  }
  if (self.hasParentClass) {
    hashCode = hashCode * 31 + [self.parentClass hash];
  }
  if (self.hasCnName) {
    hashCode = hashCode * 31 + [self.cnName hash];
  }
  if (self.hasEnName) {
    hashCode = hashCode * 31 + [self.enName hash];
  }
  if (self.hasTcnName) {
    hashCode = hashCode * 31 + [self.tcnName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBClassBuilder()
@property (strong) PBClass* resultPbclass;
@end

@implementation PBClassBuilder
@synthesize resultPbclass;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbclass = [[PBClass alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbclass;
}
- (PBClassBuilder*) clear {
  self.resultPbclass = [[PBClass alloc] init];
  return self;
}
- (PBClassBuilder*) clone {
  return [PBClass builderWithPrototype:resultPbclass];
}
- (PBClass*) defaultInstance {
  return [PBClass defaultInstance];
}
- (PBClass*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBClass*) buildPartial {
  PBClass* returnMe = resultPbclass;
  self.resultPbclass = nil;
  return returnMe;
}
- (PBClassBuilder*) mergeFrom:(PBClass*) other {
  if (other == [PBClass defaultInstance]) {
    return self;
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  if (other.subClassesArray.count > 0) {
    if (resultPbclass.subClassesArray == nil) {
      resultPbclass.subClassesArray = [[NSMutableArray alloc] initWithArray:other.subClassesArray];
    } else {
      [resultPbclass.subClassesArray addObjectsFromArray:other.subClassesArray];
    }
  }
  if (other.keywordsArray.count > 0) {
    if (resultPbclass.keywordsArray == nil) {
      resultPbclass.keywordsArray = [[NSMutableArray alloc] initWithArray:other.keywordsArray];
    } else {
      [resultPbclass.keywordsArray addObjectsFromArray:other.keywordsArray];
    }
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasIsTopClass) {
    [self setIsTopClass:other.isTopClass];
  }
  if (other.hasParentClass) {
    [self mergeParentClass:other.parentClass];
  }
  if (other.hasCnName) {
    [self setCnName:other.cnName];
  }
  if (other.hasEnName) {
    [self setEnName:other.enName];
  }
  if (other.hasTcnName) {
    [self setTcnName:other.tcnName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBClassBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBClassBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClassId:[input readString]];
        break;
      }
      case 26: {
        PBClassBuilder* subBuilder = [PBClass builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSubClasses:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self addKeywords:[input readString]];
        break;
      }
      case 42: {
        [self setDesc:[input readString]];
        break;
      }
      case 48: {
        [self setIsTopClass:[input readBool]];
        break;
      }
      case 58: {
        PBClassBuilder* subBuilder = [PBClass builder];
        if (self.hasParentClass) {
          [subBuilder mergeFrom:self.parentClass];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setParentClass:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setCnName:[input readString]];
        break;
      }
      case 170: {
        [self setEnName:[input readString]];
        break;
      }
      case 178: {
        [self setTcnName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClassId {
  return resultPbclass.hasClassId;
}
- (NSString*) classId {
  return resultPbclass.classId;
}
- (PBClassBuilder*) setClassId:(NSString*) value {
  resultPbclass.hasClassId = YES;
  resultPbclass.classId = value;
  return self;
}
- (PBClassBuilder*) clearClassId {
  resultPbclass.hasClassId = NO;
  resultPbclass.classId = @"";
  return self;
}
- (NSMutableArray *)subClasses {
  return resultPbclass.subClassesArray;
}
- (PBClass*)subClassesAtIndex:(NSUInteger)index {
  return [resultPbclass subClassesAtIndex:index];
}
- (PBClassBuilder *)addSubClasses:(PBClass*)value {
  if (resultPbclass.subClassesArray == nil) {
    resultPbclass.subClassesArray = [[NSMutableArray alloc]init];
  }
  [resultPbclass.subClassesArray addObject:value];
  return self;
}
- (PBClassBuilder *)setSubClassesArray:(NSArray *)array {
  resultPbclass.subClassesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBClassBuilder *)clearSubClasses {
  resultPbclass.subClassesArray = nil;
  return self;
}
- (NSMutableArray *)keywords {
  return resultPbclass.keywordsArray;
}
- (NSString*)keywordsAtIndex:(NSUInteger)index {
  return [resultPbclass keywordsAtIndex:index];
}
- (PBClassBuilder *)addKeywords:(NSString*)value {
  if (resultPbclass.keywordsArray == nil) {
    resultPbclass.keywordsArray = [[NSMutableArray alloc]init];
  }
  [resultPbclass.keywordsArray addObject:value];
  return self;
}
- (PBClassBuilder *)setKeywordsArray:(NSArray *)array {
  resultPbclass.keywordsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBClassBuilder *)clearKeywords {
  resultPbclass.keywordsArray = nil;
  return self;
}
- (BOOL) hasDesc {
  return resultPbclass.hasDesc;
}
- (NSString*) desc {
  return resultPbclass.desc;
}
- (PBClassBuilder*) setDesc:(NSString*) value {
  resultPbclass.hasDesc = YES;
  resultPbclass.desc = value;
  return self;
}
- (PBClassBuilder*) clearDesc {
  resultPbclass.hasDesc = NO;
  resultPbclass.desc = @"";
  return self;
}
- (BOOL) hasIsTopClass {
  return resultPbclass.hasIsTopClass;
}
- (BOOL) isTopClass {
  return resultPbclass.isTopClass;
}
- (PBClassBuilder*) setIsTopClass:(BOOL) value {
  resultPbclass.hasIsTopClass = YES;
  resultPbclass.isTopClass = value;
  return self;
}
- (PBClassBuilder*) clearIsTopClass {
  resultPbclass.hasIsTopClass = NO;
  resultPbclass.isTopClass = NO;
  return self;
}
- (BOOL) hasParentClass {
  return resultPbclass.hasParentClass;
}
- (PBClass*) parentClass {
  return resultPbclass.parentClass;
}
- (PBClassBuilder*) setParentClass:(PBClass*) value {
  resultPbclass.hasParentClass = YES;
  resultPbclass.parentClass = value;
  return self;
}
- (PBClassBuilder*) setParentClassBuilder:(PBClassBuilder*) builderForValue {
  return [self setParentClass:[builderForValue build]];
}
- (PBClassBuilder*) mergeParentClass:(PBClass*) value {
  if (resultPbclass.hasParentClass &&
      resultPbclass.parentClass != [PBClass defaultInstance]) {
    resultPbclass.parentClass =
      [[[PBClass builderWithPrototype:resultPbclass.parentClass] mergeFrom:value] buildPartial];
  } else {
    resultPbclass.parentClass = value;
  }
  resultPbclass.hasParentClass = YES;
  return self;
}
- (PBClassBuilder*) clearParentClass {
  resultPbclass.hasParentClass = NO;
  resultPbclass.parentClass = [PBClass defaultInstance];
  return self;
}
- (BOOL) hasCnName {
  return resultPbclass.hasCnName;
}
- (NSString*) cnName {
  return resultPbclass.cnName;
}
- (PBClassBuilder*) setCnName:(NSString*) value {
  resultPbclass.hasCnName = YES;
  resultPbclass.cnName = value;
  return self;
}
- (PBClassBuilder*) clearCnName {
  resultPbclass.hasCnName = NO;
  resultPbclass.cnName = @"";
  return self;
}
- (BOOL) hasEnName {
  return resultPbclass.hasEnName;
}
- (NSString*) enName {
  return resultPbclass.enName;
}
- (PBClassBuilder*) setEnName:(NSString*) value {
  resultPbclass.hasEnName = YES;
  resultPbclass.enName = value;
  return self;
}
- (PBClassBuilder*) clearEnName {
  resultPbclass.hasEnName = NO;
  resultPbclass.enName = @"";
  return self;
}
- (BOOL) hasTcnName {
  return resultPbclass.hasTcnName;
}
- (NSString*) tcnName {
  return resultPbclass.tcnName;
}
- (PBClassBuilder*) setTcnName:(NSString*) value {
  resultPbclass.hasTcnName = YES;
  resultPbclass.tcnName = value;
  return self;
}
- (PBClassBuilder*) clearTcnName {
  resultPbclass.hasTcnName = NO;
  resultPbclass.tcnName = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
