// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Group.pb.h"
// @@protoc_insertion_point(imports)

@implementation GroupRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GroupRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [BbsRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBGroupUserTypeIsValidValue(PBGroupUserType value) {
  switch (value) {
    case PBGroupUserTypeGroupUserAdmin:
    case PBGroupUserTypeGroupUserMember:
    case PBGroupUserTypeGroupUserGuest:
    case PBGroupUserTypeGroupUserCreator:
    case PBGroupUserTypeGroupUserRequester:
    case PBGroupUserTypeGroupUserInvitee:
    case PBGroupUserTypeGroupGuestInvitee:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBGroupUserType(PBGroupUserType value) {
  switch (value) {
    case PBGroupUserTypeGroupUserAdmin:
      return @"PBGroupUserTypeGroupUserAdmin";
    case PBGroupUserTypeGroupUserMember:
      return @"PBGroupUserTypeGroupUserMember";
    case PBGroupUserTypeGroupUserGuest:
      return @"PBGroupUserTypeGroupUserGuest";
    case PBGroupUserTypeGroupUserCreator:
      return @"PBGroupUserTypeGroupUserCreator";
    case PBGroupUserTypeGroupUserRequester:
      return @"PBGroupUserTypeGroupUserRequester";
    case PBGroupUserTypeGroupUserInvitee:
      return @"PBGroupUserTypeGroupUserInvitee";
    case PBGroupUserTypeGroupGuestInvitee:
      return @"PBGroupUserTypeGroupGuestInvitee";
    default:
      return nil;
  }
}

@interface PBGroupUser ()
@property (strong) PBGameUser* user;
@property (strong) NSString* customeTitle;
@property SInt32 permission;
@property PBGroupUserType type;
@end

@implementation PBGroupUser

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasCustomeTitle {
  return !!hasCustomeTitle_;
}
- (void) setHasCustomeTitle:(BOOL) _value_ {
  hasCustomeTitle_ = !!_value_;
}
@synthesize customeTitle;
- (BOOL) hasPermission {
  return !!hasPermission_;
}
- (void) setHasPermission:(BOOL) _value_ {
  hasPermission_ = !!_value_;
}
@synthesize permission;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [PBGameUser defaultInstance];
    self.customeTitle = @"";
    self.permission = 0;
    self.type = PBGroupUserTypeGroupUserAdmin;
  }
  return self;
}
static PBGroupUser* defaultPBGroupUserInstance = nil;
+ (void) initialize {
  if (self == [PBGroupUser class]) {
    defaultPBGroupUserInstance = [[PBGroupUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGroupUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGroupUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasCustomeTitle) {
    [output writeString:2 value:self.customeTitle];
  }
  if (self.hasPermission) {
    [output writeInt32:3 value:self.permission];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasCustomeTitle) {
    size_ += computeStringSize(2, self.customeTitle);
  }
  if (self.hasPermission) {
    size_ += computeInt32Size(3, self.permission);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGroupUser*) parseFromData:(NSData*) data {
  return (PBGroupUser*)[[[PBGroupUser builder] mergeFromData:data] build];
}
+ (PBGroupUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUser*)[[[PBGroupUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBGroupUser*)[[[PBGroupUser builder] mergeFromInputStream:input] build];
}
+ (PBGroupUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUser*)[[[PBGroupUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGroupUser*)[[[PBGroupUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBGroupUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUser*)[[[PBGroupUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUserBuilder*) builder {
  return [[PBGroupUserBuilder alloc] init];
}
+ (PBGroupUserBuilder*) builderWithPrototype:(PBGroupUser*) prototype {
  return [[PBGroupUser builder] mergeFrom:prototype];
}
- (PBGroupUserBuilder*) builder {
  return [PBGroupUser builder];
}
- (PBGroupUserBuilder*) toBuilder {
  return [PBGroupUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCustomeTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"customeTitle", self.customeTitle];
  }
  if (self.hasPermission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permission", [NSNumber numberWithInteger:self.permission]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBGroupUserType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGroupUser class]]) {
    return NO;
  }
  PBGroupUser *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCustomeTitle == otherMessage.hasCustomeTitle &&
      (!self.hasCustomeTitle || [self.customeTitle isEqual:otherMessage.customeTitle]) &&
      self.hasPermission == otherMessage.hasPermission &&
      (!self.hasPermission || self.permission == otherMessage.permission) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCustomeTitle) {
    hashCode = hashCode * 31 + [self.customeTitle hash];
  }
  if (self.hasPermission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.permission] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGroupUserBuilder()
@property (strong) PBGroupUser* resultPbgroupUser;
@end

@implementation PBGroupUserBuilder
@synthesize resultPbgroupUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgroupUser = [[PBGroupUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgroupUser;
}
- (PBGroupUserBuilder*) clear {
  self.resultPbgroupUser = [[PBGroupUser alloc] init];
  return self;
}
- (PBGroupUserBuilder*) clone {
  return [PBGroupUser builderWithPrototype:resultPbgroupUser];
}
- (PBGroupUser*) defaultInstance {
  return [PBGroupUser defaultInstance];
}
- (PBGroupUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGroupUser*) buildPartial {
  PBGroupUser* returnMe = resultPbgroupUser;
  self.resultPbgroupUser = nil;
  return returnMe;
}
- (PBGroupUserBuilder*) mergeFrom:(PBGroupUser*) other {
  if (other == [PBGroupUser defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCustomeTitle) {
    [self setCustomeTitle:other.customeTitle];
  }
  if (other.hasPermission) {
    [self setPermission:other.permission];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGroupUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGroupUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setCustomeTitle:[input readString]];
        break;
      }
      case 24: {
        [self setPermission:[input readInt32]];
        break;
      }
      case 32: {
        PBGroupUserType value = (PBGroupUserType)[input readEnum];
        if (PBGroupUserTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultPbgroupUser.hasUser;
}
- (PBGameUser*) user {
  return resultPbgroupUser.user;
}
- (PBGroupUserBuilder*) setUser:(PBGameUser*) value {
  resultPbgroupUser.hasUser = YES;
  resultPbgroupUser.user = value;
  return self;
}
- (PBGroupUserBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (PBGroupUserBuilder*) mergeUser:(PBGameUser*) value {
  if (resultPbgroupUser.hasUser &&
      resultPbgroupUser.user != [PBGameUser defaultInstance]) {
    resultPbgroupUser.user =
      [[[PBGameUser builderWithPrototype:resultPbgroupUser.user] mergeFrom:value] buildPartial];
  } else {
    resultPbgroupUser.user = value;
  }
  resultPbgroupUser.hasUser = YES;
  return self;
}
- (PBGroupUserBuilder*) clearUser {
  resultPbgroupUser.hasUser = NO;
  resultPbgroupUser.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasCustomeTitle {
  return resultPbgroupUser.hasCustomeTitle;
}
- (NSString*) customeTitle {
  return resultPbgroupUser.customeTitle;
}
- (PBGroupUserBuilder*) setCustomeTitle:(NSString*) value {
  resultPbgroupUser.hasCustomeTitle = YES;
  resultPbgroupUser.customeTitle = value;
  return self;
}
- (PBGroupUserBuilder*) clearCustomeTitle {
  resultPbgroupUser.hasCustomeTitle = NO;
  resultPbgroupUser.customeTitle = @"";
  return self;
}
- (BOOL) hasPermission {
  return resultPbgroupUser.hasPermission;
}
- (SInt32) permission {
  return resultPbgroupUser.permission;
}
- (PBGroupUserBuilder*) setPermission:(SInt32) value {
  resultPbgroupUser.hasPermission = YES;
  resultPbgroupUser.permission = value;
  return self;
}
- (PBGroupUserBuilder*) clearPermission {
  resultPbgroupUser.hasPermission = NO;
  resultPbgroupUser.permission = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbgroupUser.hasType;
}
- (PBGroupUserType) type {
  return resultPbgroupUser.type;
}
- (PBGroupUserBuilder*) setType:(PBGroupUserType) value {
  resultPbgroupUser.hasType = YES;
  resultPbgroupUser.type = value;
  return self;
}
- (PBGroupUserBuilder*) clearType {
  resultPbgroupUser.hasType = NO;
  resultPbgroupUser.type = PBGroupUserTypeGroupUserAdmin;
  return self;
}
@end

@interface PBGroupTitle ()
@property SInt32 titleId;
@property (strong) NSString* title;
@end

@implementation PBGroupTitle

- (BOOL) hasTitleId {
  return !!hasTitleId_;
}
- (void) setHasTitleId:(BOOL) _value_ {
  hasTitleId_ = !!_value_;
}
@synthesize titleId;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (instancetype) init {
  if ((self = [super init])) {
    self.titleId = 0;
    self.title = @"";
  }
  return self;
}
static PBGroupTitle* defaultPBGroupTitleInstance = nil;
+ (void) initialize {
  if (self == [PBGroupTitle class]) {
    defaultPBGroupTitleInstance = [[PBGroupTitle alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGroupTitleInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGroupTitleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTitleId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitleId) {
    [output writeInt32:1 value:self.titleId];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitleId) {
    size_ += computeInt32Size(1, self.titleId);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGroupTitle*) parseFromData:(NSData*) data {
  return (PBGroupTitle*)[[[PBGroupTitle builder] mergeFromData:data] build];
}
+ (PBGroupTitle*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupTitle*)[[[PBGroupTitle builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGroupTitle*) parseFromInputStream:(NSInputStream*) input {
  return (PBGroupTitle*)[[[PBGroupTitle builder] mergeFromInputStream:input] build];
}
+ (PBGroupTitle*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupTitle*)[[[PBGroupTitle builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupTitle*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGroupTitle*)[[[PBGroupTitle builder] mergeFromCodedInputStream:input] build];
}
+ (PBGroupTitle*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupTitle*)[[[PBGroupTitle builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupTitleBuilder*) builder {
  return [[PBGroupTitleBuilder alloc] init];
}
+ (PBGroupTitleBuilder*) builderWithPrototype:(PBGroupTitle*) prototype {
  return [[PBGroupTitle builder] mergeFrom:prototype];
}
- (PBGroupTitleBuilder*) builder {
  return [PBGroupTitle builder];
}
- (PBGroupTitleBuilder*) toBuilder {
  return [PBGroupTitle builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"titleId", [NSNumber numberWithInteger:self.titleId]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGroupTitle class]]) {
    return NO;
  }
  PBGroupTitle *otherMessage = other;
  return
      self.hasTitleId == otherMessage.hasTitleId &&
      (!self.hasTitleId || self.titleId == otherMessage.titleId) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.titleId] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGroupTitleBuilder()
@property (strong) PBGroupTitle* resultPbgroupTitle;
@end

@implementation PBGroupTitleBuilder
@synthesize resultPbgroupTitle;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgroupTitle = [[PBGroupTitle alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgroupTitle;
}
- (PBGroupTitleBuilder*) clear {
  self.resultPbgroupTitle = [[PBGroupTitle alloc] init];
  return self;
}
- (PBGroupTitleBuilder*) clone {
  return [PBGroupTitle builderWithPrototype:resultPbgroupTitle];
}
- (PBGroupTitle*) defaultInstance {
  return [PBGroupTitle defaultInstance];
}
- (PBGroupTitle*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGroupTitle*) buildPartial {
  PBGroupTitle* returnMe = resultPbgroupTitle;
  self.resultPbgroupTitle = nil;
  return returnMe;
}
- (PBGroupTitleBuilder*) mergeFrom:(PBGroupTitle*) other {
  if (other == [PBGroupTitle defaultInstance]) {
    return self;
  }
  if (other.hasTitleId) {
    [self setTitleId:other.titleId];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGroupTitleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGroupTitleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTitleId:[input readInt32]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTitleId {
  return resultPbgroupTitle.hasTitleId;
}
- (SInt32) titleId {
  return resultPbgroupTitle.titleId;
}
- (PBGroupTitleBuilder*) setTitleId:(SInt32) value {
  resultPbgroupTitle.hasTitleId = YES;
  resultPbgroupTitle.titleId = value;
  return self;
}
- (PBGroupTitleBuilder*) clearTitleId {
  resultPbgroupTitle.hasTitleId = NO;
  resultPbgroupTitle.titleId = 0;
  return self;
}
- (BOOL) hasTitle {
  return resultPbgroupTitle.hasTitle;
}
- (NSString*) title {
  return resultPbgroupTitle.title;
}
- (PBGroupTitleBuilder*) setTitle:(NSString*) value {
  resultPbgroupTitle.hasTitle = YES;
  resultPbgroupTitle.title = value;
  return self;
}
- (PBGroupTitleBuilder*) clearTitle {
  resultPbgroupTitle.hasTitle = NO;
  resultPbgroupTitle.title = @"";
  return self;
}
@end

@interface PBGroupUsersByTitle ()
@property (strong) PBGroupTitle* title;
@property (strong) NSMutableArray * usersArray;
@end

@implementation PBGroupUsersByTitle

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
@synthesize usersArray;
@dynamic users;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = [PBGroupTitle defaultInstance];
  }
  return self;
}
static PBGroupUsersByTitle* defaultPBGroupUsersByTitleInstance = nil;
+ (void) initialize {
  if (self == [PBGroupUsersByTitle class]) {
    defaultPBGroupUsersByTitleInstance = [[PBGroupUsersByTitle alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGroupUsersByTitleInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGroupUsersByTitleInstance;
}
- (NSArray *)users {
  return usersArray;
}
- (PBGameUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasTitle) {
    if (!self.title.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeMessage:1 value:self.title];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitle) {
    size_ += computeMessageSize(1, self.title);
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGroupUsersByTitle*) parseFromData:(NSData*) data {
  return (PBGroupUsersByTitle*)[[[PBGroupUsersByTitle builder] mergeFromData:data] build];
}
+ (PBGroupUsersByTitle*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUsersByTitle*)[[[PBGroupUsersByTitle builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUsersByTitle*) parseFromInputStream:(NSInputStream*) input {
  return (PBGroupUsersByTitle*)[[[PBGroupUsersByTitle builder] mergeFromInputStream:input] build];
}
+ (PBGroupUsersByTitle*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUsersByTitle*)[[[PBGroupUsersByTitle builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUsersByTitle*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGroupUsersByTitle*)[[[PBGroupUsersByTitle builder] mergeFromCodedInputStream:input] build];
}
+ (PBGroupUsersByTitle*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUsersByTitle*)[[[PBGroupUsersByTitle builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUsersByTitleBuilder*) builder {
  return [[PBGroupUsersByTitleBuilder alloc] init];
}
+ (PBGroupUsersByTitleBuilder*) builderWithPrototype:(PBGroupUsersByTitle*) prototype {
  return [[PBGroupUsersByTitle builder] mergeFrom:prototype];
}
- (PBGroupUsersByTitleBuilder*) builder {
  return [PBGroupUsersByTitle builder];
}
- (PBGroupUsersByTitleBuilder*) toBuilder {
  return [PBGroupUsersByTitle builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitle) {
    [output appendFormat:@"%@%@ {\n", indent, @"title"];
    [self.title writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGroupUsersByTitle class]]) {
    return NO;
  }
  PBGroupUsersByTitle *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGroupUsersByTitleBuilder()
@property (strong) PBGroupUsersByTitle* resultPbgroupUsersByTitle;
@end

@implementation PBGroupUsersByTitleBuilder
@synthesize resultPbgroupUsersByTitle;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgroupUsersByTitle = [[PBGroupUsersByTitle alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgroupUsersByTitle;
}
- (PBGroupUsersByTitleBuilder*) clear {
  self.resultPbgroupUsersByTitle = [[PBGroupUsersByTitle alloc] init];
  return self;
}
- (PBGroupUsersByTitleBuilder*) clone {
  return [PBGroupUsersByTitle builderWithPrototype:resultPbgroupUsersByTitle];
}
- (PBGroupUsersByTitle*) defaultInstance {
  return [PBGroupUsersByTitle defaultInstance];
}
- (PBGroupUsersByTitle*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGroupUsersByTitle*) buildPartial {
  PBGroupUsersByTitle* returnMe = resultPbgroupUsersByTitle;
  self.resultPbgroupUsersByTitle = nil;
  return returnMe;
}
- (PBGroupUsersByTitleBuilder*) mergeFrom:(PBGroupUsersByTitle*) other {
  if (other == [PBGroupUsersByTitle defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self mergeTitle:other.title];
  }
  if (other.usersArray.count > 0) {
    if (resultPbgroupUsersByTitle.usersArray == nil) {
      resultPbgroupUsersByTitle.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultPbgroupUsersByTitle.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGroupUsersByTitleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGroupUsersByTitleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGroupTitleBuilder* subBuilder = [PBGroupTitle builder];
        if (self.hasTitle) {
          [subBuilder mergeFrom:self.title];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTitle:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return resultPbgroupUsersByTitle.hasTitle;
}
- (PBGroupTitle*) title {
  return resultPbgroupUsersByTitle.title;
}
- (PBGroupUsersByTitleBuilder*) setTitle:(PBGroupTitle*) value {
  resultPbgroupUsersByTitle.hasTitle = YES;
  resultPbgroupUsersByTitle.title = value;
  return self;
}
- (PBGroupUsersByTitleBuilder*) setTitleBuilder:(PBGroupTitleBuilder*) builderForValue {
  return [self setTitle:[builderForValue build]];
}
- (PBGroupUsersByTitleBuilder*) mergeTitle:(PBGroupTitle*) value {
  if (resultPbgroupUsersByTitle.hasTitle &&
      resultPbgroupUsersByTitle.title != [PBGroupTitle defaultInstance]) {
    resultPbgroupUsersByTitle.title =
      [[[PBGroupTitle builderWithPrototype:resultPbgroupUsersByTitle.title] mergeFrom:value] buildPartial];
  } else {
    resultPbgroupUsersByTitle.title = value;
  }
  resultPbgroupUsersByTitle.hasTitle = YES;
  return self;
}
- (PBGroupUsersByTitleBuilder*) clearTitle {
  resultPbgroupUsersByTitle.hasTitle = NO;
  resultPbgroupUsersByTitle.title = [PBGroupTitle defaultInstance];
  return self;
}
- (NSMutableArray *)users {
  return resultPbgroupUsersByTitle.usersArray;
}
- (PBGameUser*)usersAtIndex:(NSUInteger)index {
  return [resultPbgroupUsersByTitle usersAtIndex:index];
}
- (PBGroupUsersByTitleBuilder *)addUsers:(PBGameUser*)value {
  if (resultPbgroupUsersByTitle.usersArray == nil) {
    resultPbgroupUsersByTitle.usersArray = [[NSMutableArray alloc]init];
  }
  [resultPbgroupUsersByTitle.usersArray addObject:value];
  return self;
}
- (PBGroupUsersByTitleBuilder *)setUsersArray:(NSArray *)array {
  resultPbgroupUsersByTitle.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGroupUsersByTitleBuilder *)clearUsers {
  resultPbgroupUsersByTitle.usersArray = nil;
  return self;
}
@end

@interface PBGroup ()
@property (strong) NSString* groupId;
@property (strong) NSString* name;
@property SInt32 level;
@property SInt32 fame;
@property SInt64 balance;
@property SInt32 createDate;
@property SInt32 memberFee;
@property SInt32 capacity;
@property SInt32 size;
@property SInt32 guestSize;
@property SInt32 guestCapacity;
@property SInt32 topicCount;
@property SInt32 fanCount;
@property SInt32 titleCapacity;
@property (strong) NSString* desc;
@property (strong) NSString* signature;
@property SInt32 status;
@property (strong) NSString* statusDesc;
@property (strong) NSString* bgImage;
@property (strong) NSString* medalImage;
@property (strong) NSMutableArray * titlesArray;
@property (strong) PBGameUser* creator;
@property (strong) NSMutableArray * adminsArray;
@property (strong) NSMutableArray * usersArray;
@property (strong) NSMutableArray * guestsArray;
@property (strong) PBBBSPost* topic;
@end

@implementation PBGroup

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasFame {
  return !!hasFame_;
}
- (void) setHasFame:(BOOL) _value_ {
  hasFame_ = !!_value_;
}
@synthesize fame;
- (BOOL) hasBalance {
  return !!hasBalance_;
}
- (void) setHasBalance:(BOOL) _value_ {
  hasBalance_ = !!_value_;
}
@synthesize balance;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasMemberFee {
  return !!hasMemberFee_;
}
- (void) setHasMemberFee:(BOOL) _value_ {
  hasMemberFee_ = !!_value_;
}
@synthesize memberFee;
- (BOOL) hasCapacity {
  return !!hasCapacity_;
}
- (void) setHasCapacity:(BOOL) _value_ {
  hasCapacity_ = !!_value_;
}
@synthesize capacity;
- (BOOL) hasSize {
  return !!hasSize_;
}
- (void) setHasSize:(BOOL) _value_ {
  hasSize_ = !!_value_;
}
@synthesize size;
- (BOOL) hasGuestSize {
  return !!hasGuestSize_;
}
- (void) setHasGuestSize:(BOOL) _value_ {
  hasGuestSize_ = !!_value_;
}
@synthesize guestSize;
- (BOOL) hasGuestCapacity {
  return !!hasGuestCapacity_;
}
- (void) setHasGuestCapacity:(BOOL) _value_ {
  hasGuestCapacity_ = !!_value_;
}
@synthesize guestCapacity;
- (BOOL) hasTopicCount {
  return !!hasTopicCount_;
}
- (void) setHasTopicCount:(BOOL) _value_ {
  hasTopicCount_ = !!_value_;
}
@synthesize topicCount;
- (BOOL) hasFanCount {
  return !!hasFanCount_;
}
- (void) setHasFanCount:(BOOL) _value_ {
  hasFanCount_ = !!_value_;
}
@synthesize fanCount;
- (BOOL) hasTitleCapacity {
  return !!hasTitleCapacity_;
}
- (void) setHasTitleCapacity:(BOOL) _value_ {
  hasTitleCapacity_ = !!_value_;
}
@synthesize titleCapacity;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) _value_ {
  hasSignature_ = !!_value_;
}
@synthesize signature;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasStatusDesc {
  return !!hasStatusDesc_;
}
- (void) setHasStatusDesc:(BOOL) _value_ {
  hasStatusDesc_ = !!_value_;
}
@synthesize statusDesc;
- (BOOL) hasBgImage {
  return !!hasBgImage_;
}
- (void) setHasBgImage:(BOOL) _value_ {
  hasBgImage_ = !!_value_;
}
@synthesize bgImage;
- (BOOL) hasMedalImage {
  return !!hasMedalImage_;
}
- (void) setHasMedalImage:(BOOL) _value_ {
  hasMedalImage_ = !!_value_;
}
@synthesize medalImage;
@synthesize titlesArray;
@dynamic titles;
- (BOOL) hasCreator {
  return !!hasCreator_;
}
- (void) setHasCreator:(BOOL) _value_ {
  hasCreator_ = !!_value_;
}
@synthesize creator;
@synthesize adminsArray;
@dynamic admins;
@synthesize usersArray;
@dynamic users;
@synthesize guestsArray;
@dynamic guests;
- (BOOL) hasTopic {
  return !!hasTopic_;
}
- (void) setHasTopic:(BOOL) _value_ {
  hasTopic_ = !!_value_;
}
@synthesize topic;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.name = @"";
    self.level = 1;
    self.fame = 0;
    self.balance = 0L;
    self.createDate = 0;
    self.memberFee = 0;
    self.capacity = 0;
    self.size = 0;
    self.guestSize = 0;
    self.guestCapacity = 0;
    self.topicCount = 0;
    self.fanCount = 0;
    self.titleCapacity = 0;
    self.desc = @"";
    self.signature = @"";
    self.status = 0;
    self.statusDesc = @"";
    self.bgImage = @"";
    self.medalImage = @"";
    self.creator = [PBGameUser defaultInstance];
    self.topic = [PBBBSPost defaultInstance];
  }
  return self;
}
static PBGroup* defaultPBGroupInstance = nil;
+ (void) initialize {
  if (self == [PBGroup class]) {
    defaultPBGroupInstance = [[PBGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGroupInstance;
}
- (NSArray *)titles {
  return titlesArray;
}
- (PBGroupTitle*)titlesAtIndex:(NSUInteger)index {
  return [titlesArray objectAtIndex:index];
}
- (NSArray *)admins {
  return adminsArray;
}
- (PBGameUser*)adminsAtIndex:(NSUInteger)index {
  return [adminsArray objectAtIndex:index];
}
- (NSArray *)users {
  return usersArray;
}
- (PBGroupUsersByTitle*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (NSArray *)guests {
  return guestsArray;
}
- (PBGameUser*)guestsAtIndex:(NSUInteger)index {
  return [guestsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  __block BOOL isInittitles = YES;
   [self.titles enumerateObjectsUsingBlock:^(PBGroupTitle *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittitles = NO;
      *stop = YES;
    }
  }];
  if (!isInittitles) return isInittitles;
  if (self.hasCreator) {
    if (!self.creator.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitadmins = YES;
   [self.admins enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitadmins = NO;
      *stop = YES;
    }
  }];
  if (!isInitadmins) return isInitadmins;
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  __block BOOL isInitguests = YES;
   [self.guests enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitguests = NO;
      *stop = YES;
    }
  }];
  if (!isInitguests) return isInitguests;
  if (self.hasTopic) {
    if (!self.topic.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasLevel) {
    [output writeInt32:3 value:self.level];
  }
  if (self.hasFame) {
    [output writeInt32:4 value:self.fame];
  }
  if (self.hasBalance) {
    [output writeInt64:5 value:self.balance];
  }
  if (self.hasCreateDate) {
    [output writeInt32:6 value:self.createDate];
  }
  if (self.hasMemberFee) {
    [output writeInt32:7 value:self.memberFee];
  }
  if (self.hasCapacity) {
    [output writeInt32:8 value:self.capacity];
  }
  if (self.hasSize) {
    [output writeInt32:9 value:self.size];
  }
  if (self.hasGuestSize) {
    [output writeInt32:10 value:self.guestSize];
  }
  if (self.hasGuestCapacity) {
    [output writeInt32:11 value:self.guestCapacity];
  }
  if (self.hasTopicCount) {
    [output writeInt32:12 value:self.topicCount];
  }
  if (self.hasFanCount) {
    [output writeInt32:13 value:self.fanCount];
  }
  if (self.hasTitleCapacity) {
    [output writeInt32:14 value:self.titleCapacity];
  }
  if (self.hasDesc) {
    [output writeString:15 value:self.desc];
  }
  if (self.hasSignature) {
    [output writeString:16 value:self.signature];
  }
  if (self.hasStatus) {
    [output writeInt32:17 value:self.status];
  }
  if (self.hasStatusDesc) {
    [output writeString:18 value:self.statusDesc];
  }
  if (self.hasBgImage) {
    [output writeString:21 value:self.bgImage];
  }
  if (self.hasMedalImage) {
    [output writeString:22 value:self.medalImage];
  }
  [self.titlesArray enumerateObjectsUsingBlock:^(PBGroupTitle *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:31 value:element];
  }];
  if (self.hasCreator) {
    [output writeMessage:40 value:self.creator];
  }
  [self.adminsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:41 value:element];
  }];
  [self.usersArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:42 value:element];
  }];
  [self.guestsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:43 value:element];
  }];
  if (self.hasTopic) {
    [output writeMessage:60 value:self.topic];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeStringSize(1, self.groupId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(3, self.level);
  }
  if (self.hasFame) {
    size_ += computeInt32Size(4, self.fame);
  }
  if (self.hasBalance) {
    size_ += computeInt64Size(5, self.balance);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(6, self.createDate);
  }
  if (self.hasMemberFee) {
    size_ += computeInt32Size(7, self.memberFee);
  }
  if (self.hasCapacity) {
    size_ += computeInt32Size(8, self.capacity);
  }
  if (self.hasSize) {
    size_ += computeInt32Size(9, self.size);
  }
  if (self.hasGuestSize) {
    size_ += computeInt32Size(10, self.guestSize);
  }
  if (self.hasGuestCapacity) {
    size_ += computeInt32Size(11, self.guestCapacity);
  }
  if (self.hasTopicCount) {
    size_ += computeInt32Size(12, self.topicCount);
  }
  if (self.hasFanCount) {
    size_ += computeInt32Size(13, self.fanCount);
  }
  if (self.hasTitleCapacity) {
    size_ += computeInt32Size(14, self.titleCapacity);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(15, self.desc);
  }
  if (self.hasSignature) {
    size_ += computeStringSize(16, self.signature);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(17, self.status);
  }
  if (self.hasStatusDesc) {
    size_ += computeStringSize(18, self.statusDesc);
  }
  if (self.hasBgImage) {
    size_ += computeStringSize(21, self.bgImage);
  }
  if (self.hasMedalImage) {
    size_ += computeStringSize(22, self.medalImage);
  }
  [self.titlesArray enumerateObjectsUsingBlock:^(PBGroupTitle *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(31, element);
  }];
  if (self.hasCreator) {
    size_ += computeMessageSize(40, self.creator);
  }
  [self.adminsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(41, element);
  }];
  [self.usersArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(42, element);
  }];
  [self.guestsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(43, element);
  }];
  if (self.hasTopic) {
    size_ += computeMessageSize(60, self.topic);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGroup*) parseFromData:(NSData*) data {
  return (PBGroup*)[[[PBGroup builder] mergeFromData:data] build];
}
+ (PBGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroup*)[[[PBGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGroup*) parseFromInputStream:(NSInputStream*) input {
  return (PBGroup*)[[[PBGroup builder] mergeFromInputStream:input] build];
}
+ (PBGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroup*)[[[PBGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGroup*)[[[PBGroup builder] mergeFromCodedInputStream:input] build];
}
+ (PBGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroup*)[[[PBGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupBuilder*) builder {
  return [[PBGroupBuilder alloc] init];
}
+ (PBGroupBuilder*) builderWithPrototype:(PBGroup*) prototype {
  return [[PBGroup builder] mergeFrom:prototype];
}
- (PBGroupBuilder*) builder {
  return [PBGroup builder];
}
- (PBGroupBuilder*) toBuilder {
  return [PBGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasFame) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fame", [NSNumber numberWithInteger:self.fame]];
  }
  if (self.hasBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"balance", [NSNumber numberWithLongLong:self.balance]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasMemberFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberFee", [NSNumber numberWithInteger:self.memberFee]];
  }
  if (self.hasCapacity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"capacity", [NSNumber numberWithInteger:self.capacity]];
  }
  if (self.hasSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"size", [NSNumber numberWithInteger:self.size]];
  }
  if (self.hasGuestSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guestSize", [NSNumber numberWithInteger:self.guestSize]];
  }
  if (self.hasGuestCapacity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guestCapacity", [NSNumber numberWithInteger:self.guestCapacity]];
  }
  if (self.hasTopicCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topicCount", [NSNumber numberWithInteger:self.topicCount]];
  }
  if (self.hasFanCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fanCount", [NSNumber numberWithInteger:self.fanCount]];
  }
  if (self.hasTitleCapacity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"titleCapacity", [NSNumber numberWithInteger:self.titleCapacity]];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasStatusDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusDesc", self.statusDesc];
  }
  if (self.hasBgImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImage", self.bgImage];
  }
  if (self.hasMedalImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"medalImage", self.medalImage];
  }
  [self.titlesArray enumerateObjectsUsingBlock:^(PBGroupTitle *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"titles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCreator) {
    [output appendFormat:@"%@%@ {\n", indent, @"creator"];
    [self.creator writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.adminsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"admins"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.usersArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.guestsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"guests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTopic) {
    [output appendFormat:@"%@%@ {\n", indent, @"topic"];
    [self.topic writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGroup class]]) {
    return NO;
  }
  PBGroup *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasFame == otherMessage.hasFame &&
      (!self.hasFame || self.fame == otherMessage.fame) &&
      self.hasBalance == otherMessage.hasBalance &&
      (!self.hasBalance || self.balance == otherMessage.balance) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasMemberFee == otherMessage.hasMemberFee &&
      (!self.hasMemberFee || self.memberFee == otherMessage.memberFee) &&
      self.hasCapacity == otherMessage.hasCapacity &&
      (!self.hasCapacity || self.capacity == otherMessage.capacity) &&
      self.hasSize == otherMessage.hasSize &&
      (!self.hasSize || self.size == otherMessage.size) &&
      self.hasGuestSize == otherMessage.hasGuestSize &&
      (!self.hasGuestSize || self.guestSize == otherMessage.guestSize) &&
      self.hasGuestCapacity == otherMessage.hasGuestCapacity &&
      (!self.hasGuestCapacity || self.guestCapacity == otherMessage.guestCapacity) &&
      self.hasTopicCount == otherMessage.hasTopicCount &&
      (!self.hasTopicCount || self.topicCount == otherMessage.topicCount) &&
      self.hasFanCount == otherMessage.hasFanCount &&
      (!self.hasFanCount || self.fanCount == otherMessage.fanCount) &&
      self.hasTitleCapacity == otherMessage.hasTitleCapacity &&
      (!self.hasTitleCapacity || self.titleCapacity == otherMessage.titleCapacity) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasStatusDesc == otherMessage.hasStatusDesc &&
      (!self.hasStatusDesc || [self.statusDesc isEqual:otherMessage.statusDesc]) &&
      self.hasBgImage == otherMessage.hasBgImage &&
      (!self.hasBgImage || [self.bgImage isEqual:otherMessage.bgImage]) &&
      self.hasMedalImage == otherMessage.hasMedalImage &&
      (!self.hasMedalImage || [self.medalImage isEqual:otherMessage.medalImage]) &&
      [self.titlesArray isEqualToArray:otherMessage.titlesArray] &&
      self.hasCreator == otherMessage.hasCreator &&
      (!self.hasCreator || [self.creator isEqual:otherMessage.creator]) &&
      [self.adminsArray isEqualToArray:otherMessage.adminsArray] &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.guestsArray isEqualToArray:otherMessage.guestsArray] &&
      self.hasTopic == otherMessage.hasTopic &&
      (!self.hasTopic || [self.topic isEqual:otherMessage.topic]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasFame) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fame] hash];
  }
  if (self.hasBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.balance] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasMemberFee) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.memberFee] hash];
  }
  if (self.hasCapacity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.capacity] hash];
  }
  if (self.hasSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.size] hash];
  }
  if (self.hasGuestSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guestSize] hash];
  }
  if (self.hasGuestCapacity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guestCapacity] hash];
  }
  if (self.hasTopicCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.topicCount] hash];
  }
  if (self.hasFanCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fanCount] hash];
  }
  if (self.hasTitleCapacity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.titleCapacity] hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasStatusDesc) {
    hashCode = hashCode * 31 + [self.statusDesc hash];
  }
  if (self.hasBgImage) {
    hashCode = hashCode * 31 + [self.bgImage hash];
  }
  if (self.hasMedalImage) {
    hashCode = hashCode * 31 + [self.medalImage hash];
  }
  [self.titlesArray enumerateObjectsUsingBlock:^(PBGroupTitle *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCreator) {
    hashCode = hashCode * 31 + [self.creator hash];
  }
  [self.adminsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.usersArray enumerateObjectsUsingBlock:^(PBGroupUsersByTitle *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.guestsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTopic) {
    hashCode = hashCode * 31 + [self.topic hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGroupBuilder()
@property (strong) PBGroup* resultPbgroup;
@end

@implementation PBGroupBuilder
@synthesize resultPbgroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgroup = [[PBGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgroup;
}
- (PBGroupBuilder*) clear {
  self.resultPbgroup = [[PBGroup alloc] init];
  return self;
}
- (PBGroupBuilder*) clone {
  return [PBGroup builderWithPrototype:resultPbgroup];
}
- (PBGroup*) defaultInstance {
  return [PBGroup defaultInstance];
}
- (PBGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGroup*) buildPartial {
  PBGroup* returnMe = resultPbgroup;
  self.resultPbgroup = nil;
  return returnMe;
}
- (PBGroupBuilder*) mergeFrom:(PBGroup*) other {
  if (other == [PBGroup defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasFame) {
    [self setFame:other.fame];
  }
  if (other.hasBalance) {
    [self setBalance:other.balance];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasMemberFee) {
    [self setMemberFee:other.memberFee];
  }
  if (other.hasCapacity) {
    [self setCapacity:other.capacity];
  }
  if (other.hasSize) {
    [self setSize:other.size];
  }
  if (other.hasGuestSize) {
    [self setGuestSize:other.guestSize];
  }
  if (other.hasGuestCapacity) {
    [self setGuestCapacity:other.guestCapacity];
  }
  if (other.hasTopicCount) {
    [self setTopicCount:other.topicCount];
  }
  if (other.hasFanCount) {
    [self setFanCount:other.fanCount];
  }
  if (other.hasTitleCapacity) {
    [self setTitleCapacity:other.titleCapacity];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasStatusDesc) {
    [self setStatusDesc:other.statusDesc];
  }
  if (other.hasBgImage) {
    [self setBgImage:other.bgImage];
  }
  if (other.hasMedalImage) {
    [self setMedalImage:other.medalImage];
  }
  if (other.titlesArray.count > 0) {
    if (resultPbgroup.titlesArray == nil) {
      resultPbgroup.titlesArray = [[NSMutableArray alloc] initWithArray:other.titlesArray];
    } else {
      [resultPbgroup.titlesArray addObjectsFromArray:other.titlesArray];
    }
  }
  if (other.hasCreator) {
    [self mergeCreator:other.creator];
  }
  if (other.adminsArray.count > 0) {
    if (resultPbgroup.adminsArray == nil) {
      resultPbgroup.adminsArray = [[NSMutableArray alloc] initWithArray:other.adminsArray];
    } else {
      [resultPbgroup.adminsArray addObjectsFromArray:other.adminsArray];
    }
  }
  if (other.usersArray.count > 0) {
    if (resultPbgroup.usersArray == nil) {
      resultPbgroup.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultPbgroup.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  if (other.guestsArray.count > 0) {
    if (resultPbgroup.guestsArray == nil) {
      resultPbgroup.guestsArray = [[NSMutableArray alloc] initWithArray:other.guestsArray];
    } else {
      [resultPbgroup.guestsArray addObjectsFromArray:other.guestsArray];
    }
  }
  if (other.hasTopic) {
    [self mergeTopic:other.topic];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setFame:[input readInt32]];
        break;
      }
      case 40: {
        [self setBalance:[input readInt64]];
        break;
      }
      case 48: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 56: {
        [self setMemberFee:[input readInt32]];
        break;
      }
      case 64: {
        [self setCapacity:[input readInt32]];
        break;
      }
      case 72: {
        [self setSize:[input readInt32]];
        break;
      }
      case 80: {
        [self setGuestSize:[input readInt32]];
        break;
      }
      case 88: {
        [self setGuestCapacity:[input readInt32]];
        break;
      }
      case 96: {
        [self setTopicCount:[input readInt32]];
        break;
      }
      case 104: {
        [self setFanCount:[input readInt32]];
        break;
      }
      case 112: {
        [self setTitleCapacity:[input readInt32]];
        break;
      }
      case 122: {
        [self setDesc:[input readString]];
        break;
      }
      case 130: {
        [self setSignature:[input readString]];
        break;
      }
      case 136: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 146: {
        [self setStatusDesc:[input readString]];
        break;
      }
      case 170: {
        [self setBgImage:[input readString]];
        break;
      }
      case 178: {
        [self setMedalImage:[input readString]];
        break;
      }
      case 250: {
        PBGroupTitleBuilder* subBuilder = [PBGroupTitle builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTitles:[subBuilder buildPartial]];
        break;
      }
      case 322: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasCreator) {
          [subBuilder mergeFrom:self.creator];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreator:[subBuilder buildPartial]];
        break;
      }
      case 330: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAdmins:[subBuilder buildPartial]];
        break;
      }
      case 338: {
        PBGroupUsersByTitleBuilder* subBuilder = [PBGroupUsersByTitle builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 346: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGuests:[subBuilder buildPartial]];
        break;
      }
      case 482: {
        PBBBSPostBuilder* subBuilder = [PBBBSPost builder];
        if (self.hasTopic) {
          [subBuilder mergeFrom:self.topic];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTopic:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultPbgroup.hasGroupId;
}
- (NSString*) groupId {
  return resultPbgroup.groupId;
}
- (PBGroupBuilder*) setGroupId:(NSString*) value {
  resultPbgroup.hasGroupId = YES;
  resultPbgroup.groupId = value;
  return self;
}
- (PBGroupBuilder*) clearGroupId {
  resultPbgroup.hasGroupId = NO;
  resultPbgroup.groupId = @"";
  return self;
}
- (BOOL) hasName {
  return resultPbgroup.hasName;
}
- (NSString*) name {
  return resultPbgroup.name;
}
- (PBGroupBuilder*) setName:(NSString*) value {
  resultPbgroup.hasName = YES;
  resultPbgroup.name = value;
  return self;
}
- (PBGroupBuilder*) clearName {
  resultPbgroup.hasName = NO;
  resultPbgroup.name = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultPbgroup.hasLevel;
}
- (SInt32) level {
  return resultPbgroup.level;
}
- (PBGroupBuilder*) setLevel:(SInt32) value {
  resultPbgroup.hasLevel = YES;
  resultPbgroup.level = value;
  return self;
}
- (PBGroupBuilder*) clearLevel {
  resultPbgroup.hasLevel = NO;
  resultPbgroup.level = 1;
  return self;
}
- (BOOL) hasFame {
  return resultPbgroup.hasFame;
}
- (SInt32) fame {
  return resultPbgroup.fame;
}
- (PBGroupBuilder*) setFame:(SInt32) value {
  resultPbgroup.hasFame = YES;
  resultPbgroup.fame = value;
  return self;
}
- (PBGroupBuilder*) clearFame {
  resultPbgroup.hasFame = NO;
  resultPbgroup.fame = 0;
  return self;
}
- (BOOL) hasBalance {
  return resultPbgroup.hasBalance;
}
- (SInt64) balance {
  return resultPbgroup.balance;
}
- (PBGroupBuilder*) setBalance:(SInt64) value {
  resultPbgroup.hasBalance = YES;
  resultPbgroup.balance = value;
  return self;
}
- (PBGroupBuilder*) clearBalance {
  resultPbgroup.hasBalance = NO;
  resultPbgroup.balance = 0L;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbgroup.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbgroup.createDate;
}
- (PBGroupBuilder*) setCreateDate:(SInt32) value {
  resultPbgroup.hasCreateDate = YES;
  resultPbgroup.createDate = value;
  return self;
}
- (PBGroupBuilder*) clearCreateDate {
  resultPbgroup.hasCreateDate = NO;
  resultPbgroup.createDate = 0;
  return self;
}
- (BOOL) hasMemberFee {
  return resultPbgroup.hasMemberFee;
}
- (SInt32) memberFee {
  return resultPbgroup.memberFee;
}
- (PBGroupBuilder*) setMemberFee:(SInt32) value {
  resultPbgroup.hasMemberFee = YES;
  resultPbgroup.memberFee = value;
  return self;
}
- (PBGroupBuilder*) clearMemberFee {
  resultPbgroup.hasMemberFee = NO;
  resultPbgroup.memberFee = 0;
  return self;
}
- (BOOL) hasCapacity {
  return resultPbgroup.hasCapacity;
}
- (SInt32) capacity {
  return resultPbgroup.capacity;
}
- (PBGroupBuilder*) setCapacity:(SInt32) value {
  resultPbgroup.hasCapacity = YES;
  resultPbgroup.capacity = value;
  return self;
}
- (PBGroupBuilder*) clearCapacity {
  resultPbgroup.hasCapacity = NO;
  resultPbgroup.capacity = 0;
  return self;
}
- (BOOL) hasSize {
  return resultPbgroup.hasSize;
}
- (SInt32) size {
  return resultPbgroup.size;
}
- (PBGroupBuilder*) setSize:(SInt32) value {
  resultPbgroup.hasSize = YES;
  resultPbgroup.size = value;
  return self;
}
- (PBGroupBuilder*) clearSize {
  resultPbgroup.hasSize = NO;
  resultPbgroup.size = 0;
  return self;
}
- (BOOL) hasGuestSize {
  return resultPbgroup.hasGuestSize;
}
- (SInt32) guestSize {
  return resultPbgroup.guestSize;
}
- (PBGroupBuilder*) setGuestSize:(SInt32) value {
  resultPbgroup.hasGuestSize = YES;
  resultPbgroup.guestSize = value;
  return self;
}
- (PBGroupBuilder*) clearGuestSize {
  resultPbgroup.hasGuestSize = NO;
  resultPbgroup.guestSize = 0;
  return self;
}
- (BOOL) hasGuestCapacity {
  return resultPbgroup.hasGuestCapacity;
}
- (SInt32) guestCapacity {
  return resultPbgroup.guestCapacity;
}
- (PBGroupBuilder*) setGuestCapacity:(SInt32) value {
  resultPbgroup.hasGuestCapacity = YES;
  resultPbgroup.guestCapacity = value;
  return self;
}
- (PBGroupBuilder*) clearGuestCapacity {
  resultPbgroup.hasGuestCapacity = NO;
  resultPbgroup.guestCapacity = 0;
  return self;
}
- (BOOL) hasTopicCount {
  return resultPbgroup.hasTopicCount;
}
- (SInt32) topicCount {
  return resultPbgroup.topicCount;
}
- (PBGroupBuilder*) setTopicCount:(SInt32) value {
  resultPbgroup.hasTopicCount = YES;
  resultPbgroup.topicCount = value;
  return self;
}
- (PBGroupBuilder*) clearTopicCount {
  resultPbgroup.hasTopicCount = NO;
  resultPbgroup.topicCount = 0;
  return self;
}
- (BOOL) hasFanCount {
  return resultPbgroup.hasFanCount;
}
- (SInt32) fanCount {
  return resultPbgroup.fanCount;
}
- (PBGroupBuilder*) setFanCount:(SInt32) value {
  resultPbgroup.hasFanCount = YES;
  resultPbgroup.fanCount = value;
  return self;
}
- (PBGroupBuilder*) clearFanCount {
  resultPbgroup.hasFanCount = NO;
  resultPbgroup.fanCount = 0;
  return self;
}
- (BOOL) hasTitleCapacity {
  return resultPbgroup.hasTitleCapacity;
}
- (SInt32) titleCapacity {
  return resultPbgroup.titleCapacity;
}
- (PBGroupBuilder*) setTitleCapacity:(SInt32) value {
  resultPbgroup.hasTitleCapacity = YES;
  resultPbgroup.titleCapacity = value;
  return self;
}
- (PBGroupBuilder*) clearTitleCapacity {
  resultPbgroup.hasTitleCapacity = NO;
  resultPbgroup.titleCapacity = 0;
  return self;
}
- (BOOL) hasDesc {
  return resultPbgroup.hasDesc;
}
- (NSString*) desc {
  return resultPbgroup.desc;
}
- (PBGroupBuilder*) setDesc:(NSString*) value {
  resultPbgroup.hasDesc = YES;
  resultPbgroup.desc = value;
  return self;
}
- (PBGroupBuilder*) clearDesc {
  resultPbgroup.hasDesc = NO;
  resultPbgroup.desc = @"";
  return self;
}
- (BOOL) hasSignature {
  return resultPbgroup.hasSignature;
}
- (NSString*) signature {
  return resultPbgroup.signature;
}
- (PBGroupBuilder*) setSignature:(NSString*) value {
  resultPbgroup.hasSignature = YES;
  resultPbgroup.signature = value;
  return self;
}
- (PBGroupBuilder*) clearSignature {
  resultPbgroup.hasSignature = NO;
  resultPbgroup.signature = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultPbgroup.hasStatus;
}
- (SInt32) status {
  return resultPbgroup.status;
}
- (PBGroupBuilder*) setStatus:(SInt32) value {
  resultPbgroup.hasStatus = YES;
  resultPbgroup.status = value;
  return self;
}
- (PBGroupBuilder*) clearStatus {
  resultPbgroup.hasStatus = NO;
  resultPbgroup.status = 0;
  return self;
}
- (BOOL) hasStatusDesc {
  return resultPbgroup.hasStatusDesc;
}
- (NSString*) statusDesc {
  return resultPbgroup.statusDesc;
}
- (PBGroupBuilder*) setStatusDesc:(NSString*) value {
  resultPbgroup.hasStatusDesc = YES;
  resultPbgroup.statusDesc = value;
  return self;
}
- (PBGroupBuilder*) clearStatusDesc {
  resultPbgroup.hasStatusDesc = NO;
  resultPbgroup.statusDesc = @"";
  return self;
}
- (BOOL) hasBgImage {
  return resultPbgroup.hasBgImage;
}
- (NSString*) bgImage {
  return resultPbgroup.bgImage;
}
- (PBGroupBuilder*) setBgImage:(NSString*) value {
  resultPbgroup.hasBgImage = YES;
  resultPbgroup.bgImage = value;
  return self;
}
- (PBGroupBuilder*) clearBgImage {
  resultPbgroup.hasBgImage = NO;
  resultPbgroup.bgImage = @"";
  return self;
}
- (BOOL) hasMedalImage {
  return resultPbgroup.hasMedalImage;
}
- (NSString*) medalImage {
  return resultPbgroup.medalImage;
}
- (PBGroupBuilder*) setMedalImage:(NSString*) value {
  resultPbgroup.hasMedalImage = YES;
  resultPbgroup.medalImage = value;
  return self;
}
- (PBGroupBuilder*) clearMedalImage {
  resultPbgroup.hasMedalImage = NO;
  resultPbgroup.medalImage = @"";
  return self;
}
- (NSMutableArray *)titles {
  return resultPbgroup.titlesArray;
}
- (PBGroupTitle*)titlesAtIndex:(NSUInteger)index {
  return [resultPbgroup titlesAtIndex:index];
}
- (PBGroupBuilder *)addTitles:(PBGroupTitle*)value {
  if (resultPbgroup.titlesArray == nil) {
    resultPbgroup.titlesArray = [[NSMutableArray alloc]init];
  }
  [resultPbgroup.titlesArray addObject:value];
  return self;
}
- (PBGroupBuilder *)setTitlesArray:(NSArray *)array {
  resultPbgroup.titlesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGroupBuilder *)clearTitles {
  resultPbgroup.titlesArray = nil;
  return self;
}
- (BOOL) hasCreator {
  return resultPbgroup.hasCreator;
}
- (PBGameUser*) creator {
  return resultPbgroup.creator;
}
- (PBGroupBuilder*) setCreator:(PBGameUser*) value {
  resultPbgroup.hasCreator = YES;
  resultPbgroup.creator = value;
  return self;
}
- (PBGroupBuilder*) setCreatorBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setCreator:[builderForValue build]];
}
- (PBGroupBuilder*) mergeCreator:(PBGameUser*) value {
  if (resultPbgroup.hasCreator &&
      resultPbgroup.creator != [PBGameUser defaultInstance]) {
    resultPbgroup.creator =
      [[[PBGameUser builderWithPrototype:resultPbgroup.creator] mergeFrom:value] buildPartial];
  } else {
    resultPbgroup.creator = value;
  }
  resultPbgroup.hasCreator = YES;
  return self;
}
- (PBGroupBuilder*) clearCreator {
  resultPbgroup.hasCreator = NO;
  resultPbgroup.creator = [PBGameUser defaultInstance];
  return self;
}
- (NSMutableArray *)admins {
  return resultPbgroup.adminsArray;
}
- (PBGameUser*)adminsAtIndex:(NSUInteger)index {
  return [resultPbgroup adminsAtIndex:index];
}
- (PBGroupBuilder *)addAdmins:(PBGameUser*)value {
  if (resultPbgroup.adminsArray == nil) {
    resultPbgroup.adminsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgroup.adminsArray addObject:value];
  return self;
}
- (PBGroupBuilder *)setAdminsArray:(NSArray *)array {
  resultPbgroup.adminsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGroupBuilder *)clearAdmins {
  resultPbgroup.adminsArray = nil;
  return self;
}
- (NSMutableArray *)users {
  return resultPbgroup.usersArray;
}
- (PBGroupUsersByTitle*)usersAtIndex:(NSUInteger)index {
  return [resultPbgroup usersAtIndex:index];
}
- (PBGroupBuilder *)addUsers:(PBGroupUsersByTitle*)value {
  if (resultPbgroup.usersArray == nil) {
    resultPbgroup.usersArray = [[NSMutableArray alloc]init];
  }
  [resultPbgroup.usersArray addObject:value];
  return self;
}
- (PBGroupBuilder *)setUsersArray:(NSArray *)array {
  resultPbgroup.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGroupBuilder *)clearUsers {
  resultPbgroup.usersArray = nil;
  return self;
}
- (NSMutableArray *)guests {
  return resultPbgroup.guestsArray;
}
- (PBGameUser*)guestsAtIndex:(NSUInteger)index {
  return [resultPbgroup guestsAtIndex:index];
}
- (PBGroupBuilder *)addGuests:(PBGameUser*)value {
  if (resultPbgroup.guestsArray == nil) {
    resultPbgroup.guestsArray = [[NSMutableArray alloc]init];
  }
  [resultPbgroup.guestsArray addObject:value];
  return self;
}
- (PBGroupBuilder *)setGuestsArray:(NSArray *)array {
  resultPbgroup.guestsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBGroupBuilder *)clearGuests {
  resultPbgroup.guestsArray = nil;
  return self;
}
- (BOOL) hasTopic {
  return resultPbgroup.hasTopic;
}
- (PBBBSPost*) topic {
  return resultPbgroup.topic;
}
- (PBGroupBuilder*) setTopic:(PBBBSPost*) value {
  resultPbgroup.hasTopic = YES;
  resultPbgroup.topic = value;
  return self;
}
- (PBGroupBuilder*) setTopicBuilder:(PBBBSPostBuilder*) builderForValue {
  return [self setTopic:[builderForValue build]];
}
- (PBGroupBuilder*) mergeTopic:(PBBBSPost*) value {
  if (resultPbgroup.hasTopic &&
      resultPbgroup.topic != [PBBBSPost defaultInstance]) {
    resultPbgroup.topic =
      [[[PBBBSPost builderWithPrototype:resultPbgroup.topic] mergeFrom:value] buildPartial];
  } else {
    resultPbgroup.topic = value;
  }
  resultPbgroup.hasTopic = YES;
  return self;
}
- (PBGroupBuilder*) clearTopic {
  resultPbgroup.hasTopic = NO;
  resultPbgroup.topic = [PBBBSPost defaultInstance];
  return self;
}
@end

@interface PBGroupUserRole ()
@property (strong) NSString* groupId;
@property SInt32 role;
@property SInt32 permission;
@property (strong) NSString* groupName;
@end

@implementation PBGroupUserRole

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasRole {
  return !!hasRole_;
}
- (void) setHasRole:(BOOL) _value_ {
  hasRole_ = !!_value_;
}
@synthesize role;
- (BOOL) hasPermission {
  return !!hasPermission_;
}
- (void) setHasPermission:(BOOL) _value_ {
  hasPermission_ = !!_value_;
}
@synthesize permission;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) _value_ {
  hasGroupName_ = !!_value_;
}
@synthesize groupName;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.role = 0;
    self.permission = 0;
    self.groupName = @"";
  }
  return self;
}
static PBGroupUserRole* defaultPBGroupUserRoleInstance = nil;
+ (void) initialize {
  if (self == [PBGroupUserRole class]) {
    defaultPBGroupUserRoleInstance = [[PBGroupUserRole alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGroupUserRoleInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGroupUserRoleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasRole) {
    return NO;
  }
  if (!self.hasPermission) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasRole) {
    [output writeInt32:2 value:self.role];
  }
  if (self.hasPermission) {
    [output writeInt32:3 value:self.permission];
  }
  if (self.hasGroupName) {
    [output writeString:4 value:self.groupName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeStringSize(1, self.groupId);
  }
  if (self.hasRole) {
    size_ += computeInt32Size(2, self.role);
  }
  if (self.hasPermission) {
    size_ += computeInt32Size(3, self.permission);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(4, self.groupName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGroupUserRole*) parseFromData:(NSData*) data {
  return (PBGroupUserRole*)[[[PBGroupUserRole builder] mergeFromData:data] build];
}
+ (PBGroupUserRole*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUserRole*)[[[PBGroupUserRole builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUserRole*) parseFromInputStream:(NSInputStream*) input {
  return (PBGroupUserRole*)[[[PBGroupUserRole builder] mergeFromInputStream:input] build];
}
+ (PBGroupUserRole*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUserRole*)[[[PBGroupUserRole builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUserRole*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGroupUserRole*)[[[PBGroupUserRole builder] mergeFromCodedInputStream:input] build];
}
+ (PBGroupUserRole*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupUserRole*)[[[PBGroupUserRole builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupUserRoleBuilder*) builder {
  return [[PBGroupUserRoleBuilder alloc] init];
}
+ (PBGroupUserRoleBuilder*) builderWithPrototype:(PBGroupUserRole*) prototype {
  return [[PBGroupUserRole builder] mergeFrom:prototype];
}
- (PBGroupUserRoleBuilder*) builder {
  return [PBGroupUserRole builder];
}
- (PBGroupUserRoleBuilder*) toBuilder {
  return [PBGroupUserRole builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasRole) {
    [output appendFormat:@"%@%@: %@\n", indent, @"role", [NSNumber numberWithInteger:self.role]];
  }
  if (self.hasPermission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permission", [NSNumber numberWithInteger:self.permission]];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGroupUserRole class]]) {
    return NO;
  }
  PBGroupUserRole *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasRole == otherMessage.hasRole &&
      (!self.hasRole || self.role == otherMessage.role) &&
      self.hasPermission == otherMessage.hasPermission &&
      (!self.hasPermission || self.permission == otherMessage.permission) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasRole) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.role] hash];
  }
  if (self.hasPermission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.permission] hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGroupUserRoleBuilder()
@property (strong) PBGroupUserRole* resultPbgroupUserRole;
@end

@implementation PBGroupUserRoleBuilder
@synthesize resultPbgroupUserRole;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgroupUserRole = [[PBGroupUserRole alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgroupUserRole;
}
- (PBGroupUserRoleBuilder*) clear {
  self.resultPbgroupUserRole = [[PBGroupUserRole alloc] init];
  return self;
}
- (PBGroupUserRoleBuilder*) clone {
  return [PBGroupUserRole builderWithPrototype:resultPbgroupUserRole];
}
- (PBGroupUserRole*) defaultInstance {
  return [PBGroupUserRole defaultInstance];
}
- (PBGroupUserRole*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGroupUserRole*) buildPartial {
  PBGroupUserRole* returnMe = resultPbgroupUserRole;
  self.resultPbgroupUserRole = nil;
  return returnMe;
}
- (PBGroupUserRoleBuilder*) mergeFrom:(PBGroupUserRole*) other {
  if (other == [PBGroupUserRole defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasRole) {
    [self setRole:other.role];
  }
  if (other.hasPermission) {
    [self setPermission:other.permission];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGroupUserRoleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGroupUserRoleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 16: {
        [self setRole:[input readInt32]];
        break;
      }
      case 24: {
        [self setPermission:[input readInt32]];
        break;
      }
      case 34: {
        [self setGroupName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultPbgroupUserRole.hasGroupId;
}
- (NSString*) groupId {
  return resultPbgroupUserRole.groupId;
}
- (PBGroupUserRoleBuilder*) setGroupId:(NSString*) value {
  resultPbgroupUserRole.hasGroupId = YES;
  resultPbgroupUserRole.groupId = value;
  return self;
}
- (PBGroupUserRoleBuilder*) clearGroupId {
  resultPbgroupUserRole.hasGroupId = NO;
  resultPbgroupUserRole.groupId = @"";
  return self;
}
- (BOOL) hasRole {
  return resultPbgroupUserRole.hasRole;
}
- (SInt32) role {
  return resultPbgroupUserRole.role;
}
- (PBGroupUserRoleBuilder*) setRole:(SInt32) value {
  resultPbgroupUserRole.hasRole = YES;
  resultPbgroupUserRole.role = value;
  return self;
}
- (PBGroupUserRoleBuilder*) clearRole {
  resultPbgroupUserRole.hasRole = NO;
  resultPbgroupUserRole.role = 0;
  return self;
}
- (BOOL) hasPermission {
  return resultPbgroupUserRole.hasPermission;
}
- (SInt32) permission {
  return resultPbgroupUserRole.permission;
}
- (PBGroupUserRoleBuilder*) setPermission:(SInt32) value {
  resultPbgroupUserRole.hasPermission = YES;
  resultPbgroupUserRole.permission = value;
  return self;
}
- (PBGroupUserRoleBuilder*) clearPermission {
  resultPbgroupUserRole.hasPermission = NO;
  resultPbgroupUserRole.permission = 0;
  return self;
}
- (BOOL) hasGroupName {
  return resultPbgroupUserRole.hasGroupName;
}
- (NSString*) groupName {
  return resultPbgroupUserRole.groupName;
}
- (PBGroupUserRoleBuilder*) setGroupName:(NSString*) value {
  resultPbgroupUserRole.hasGroupName = YES;
  resultPbgroupUserRole.groupName = value;
  return self;
}
- (PBGroupUserRoleBuilder*) clearGroupName {
  resultPbgroupUserRole.hasGroupName = NO;
  resultPbgroupUserRole.groupName = @"";
  return self;
}
@end

@interface PBGroupNotice ()
@property (strong) NSString* noticeId;
@property SInt32 type;
@property SInt32 status;
@property (strong) NSString* groupId;
@property (strong) NSString* groupName;
@property (strong) NSString* message;
@property SInt32 createDate;
@property SInt32 amount;
@property (strong) PBGameUser* publisher;
@property (strong) PBGameUser* target;
@end

@implementation PBGroupNotice

- (BOOL) hasNoticeId {
  return !!hasNoticeId_;
}
- (void) setHasNoticeId:(BOOL) _value_ {
  hasNoticeId_ = !!_value_;
}
@synthesize noticeId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) _value_ {
  hasGroupName_ = !!_value_;
}
@synthesize groupName;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) _value_ {
  hasAmount_ = !!_value_;
}
@synthesize amount;
- (BOOL) hasPublisher {
  return !!hasPublisher_;
}
- (void) setHasPublisher:(BOOL) _value_ {
  hasPublisher_ = !!_value_;
}
@synthesize publisher;
- (BOOL) hasTarget {
  return !!hasTarget_;
}
- (void) setHasTarget:(BOOL) _value_ {
  hasTarget_ = !!_value_;
}
@synthesize target;
- (instancetype) init {
  if ((self = [super init])) {
    self.noticeId = @"";
    self.type = 0;
    self.status = 0;
    self.groupId = @"";
    self.groupName = @"";
    self.message = @"";
    self.createDate = 0;
    self.amount = 0;
    self.publisher = [PBGameUser defaultInstance];
    self.target = [PBGameUser defaultInstance];
  }
  return self;
}
static PBGroupNotice* defaultPBGroupNoticeInstance = nil;
+ (void) initialize {
  if (self == [PBGroupNotice class]) {
    defaultPBGroupNoticeInstance = [[PBGroupNotice alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGroupNoticeInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGroupNoticeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNoticeId) {
    return NO;
  }
  if (self.hasPublisher) {
    if (!self.publisher.isInitialized) {
      return NO;
    }
  }
  if (self.hasTarget) {
    if (!self.target.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNoticeId) {
    [output writeString:1 value:self.noticeId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasStatus) {
    [output writeInt32:3 value:self.status];
  }
  if (self.hasGroupId) {
    [output writeString:4 value:self.groupId];
  }
  if (self.hasGroupName) {
    [output writeString:5 value:self.groupName];
  }
  if (self.hasMessage) {
    [output writeString:6 value:self.message];
  }
  if (self.hasCreateDate) {
    [output writeInt32:7 value:self.createDate];
  }
  if (self.hasAmount) {
    [output writeInt32:8 value:self.amount];
  }
  if (self.hasPublisher) {
    [output writeMessage:10 value:self.publisher];
  }
  if (self.hasTarget) {
    [output writeMessage:11 value:self.target];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNoticeId) {
    size_ += computeStringSize(1, self.noticeId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(3, self.status);
  }
  if (self.hasGroupId) {
    size_ += computeStringSize(4, self.groupId);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(5, self.groupName);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(6, self.message);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(7, self.createDate);
  }
  if (self.hasAmount) {
    size_ += computeInt32Size(8, self.amount);
  }
  if (self.hasPublisher) {
    size_ += computeMessageSize(10, self.publisher);
  }
  if (self.hasTarget) {
    size_ += computeMessageSize(11, self.target);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGroupNotice*) parseFromData:(NSData*) data {
  return (PBGroupNotice*)[[[PBGroupNotice builder] mergeFromData:data] build];
}
+ (PBGroupNotice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupNotice*)[[[PBGroupNotice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGroupNotice*) parseFromInputStream:(NSInputStream*) input {
  return (PBGroupNotice*)[[[PBGroupNotice builder] mergeFromInputStream:input] build];
}
+ (PBGroupNotice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupNotice*)[[[PBGroupNotice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupNotice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGroupNotice*)[[[PBGroupNotice builder] mergeFromCodedInputStream:input] build];
}
+ (PBGroupNotice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGroupNotice*)[[[PBGroupNotice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGroupNoticeBuilder*) builder {
  return [[PBGroupNoticeBuilder alloc] init];
}
+ (PBGroupNoticeBuilder*) builderWithPrototype:(PBGroupNotice*) prototype {
  return [[PBGroupNotice builder] mergeFrom:prototype];
}
- (PBGroupNoticeBuilder*) builder {
  return [PBGroupNotice builder];
}
- (PBGroupNoticeBuilder*) toBuilder {
  return [PBGroupNotice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNoticeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"noticeId", self.noticeId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", [NSNumber numberWithInteger:self.amount]];
  }
  if (self.hasPublisher) {
    [output appendFormat:@"%@%@ {\n", indent, @"publisher"];
    [self.publisher writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTarget) {
    [output appendFormat:@"%@%@ {\n", indent, @"target"];
    [self.target writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGroupNotice class]]) {
    return NO;
  }
  PBGroupNotice *otherMessage = other;
  return
      self.hasNoticeId == otherMessage.hasNoticeId &&
      (!self.hasNoticeId || [self.noticeId isEqual:otherMessage.noticeId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || self.amount == otherMessage.amount) &&
      self.hasPublisher == otherMessage.hasPublisher &&
      (!self.hasPublisher || [self.publisher isEqual:otherMessage.publisher]) &&
      self.hasTarget == otherMessage.hasTarget &&
      (!self.hasTarget || [self.target isEqual:otherMessage.target]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNoticeId) {
    hashCode = hashCode * 31 + [self.noticeId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.amount] hash];
  }
  if (self.hasPublisher) {
    hashCode = hashCode * 31 + [self.publisher hash];
  }
  if (self.hasTarget) {
    hashCode = hashCode * 31 + [self.target hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGroupNoticeBuilder()
@property (strong) PBGroupNotice* resultPbgroupNotice;
@end

@implementation PBGroupNoticeBuilder
@synthesize resultPbgroupNotice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbgroupNotice = [[PBGroupNotice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbgroupNotice;
}
- (PBGroupNoticeBuilder*) clear {
  self.resultPbgroupNotice = [[PBGroupNotice alloc] init];
  return self;
}
- (PBGroupNoticeBuilder*) clone {
  return [PBGroupNotice builderWithPrototype:resultPbgroupNotice];
}
- (PBGroupNotice*) defaultInstance {
  return [PBGroupNotice defaultInstance];
}
- (PBGroupNotice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGroupNotice*) buildPartial {
  PBGroupNotice* returnMe = resultPbgroupNotice;
  self.resultPbgroupNotice = nil;
  return returnMe;
}
- (PBGroupNoticeBuilder*) mergeFrom:(PBGroupNotice*) other {
  if (other == [PBGroupNotice defaultInstance]) {
    return self;
  }
  if (other.hasNoticeId) {
    [self setNoticeId:other.noticeId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  if (other.hasPublisher) {
    [self mergePublisher:other.publisher];
  }
  if (other.hasTarget) {
    [self mergeTarget:other.target];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGroupNoticeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGroupNoticeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNoticeId:[input readString]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 24: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 34: {
        [self setGroupId:[input readString]];
        break;
      }
      case 42: {
        [self setGroupName:[input readString]];
        break;
      }
      case 50: {
        [self setMessage:[input readString]];
        break;
      }
      case 56: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 64: {
        [self setAmount:[input readInt32]];
        break;
      }
      case 82: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasPublisher) {
          [subBuilder mergeFrom:self.publisher];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPublisher:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasTarget) {
          [subBuilder mergeFrom:self.target];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTarget:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNoticeId {
  return resultPbgroupNotice.hasNoticeId;
}
- (NSString*) noticeId {
  return resultPbgroupNotice.noticeId;
}
- (PBGroupNoticeBuilder*) setNoticeId:(NSString*) value {
  resultPbgroupNotice.hasNoticeId = YES;
  resultPbgroupNotice.noticeId = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearNoticeId {
  resultPbgroupNotice.hasNoticeId = NO;
  resultPbgroupNotice.noticeId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbgroupNotice.hasType;
}
- (SInt32) type {
  return resultPbgroupNotice.type;
}
- (PBGroupNoticeBuilder*) setType:(SInt32) value {
  resultPbgroupNotice.hasType = YES;
  resultPbgroupNotice.type = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearType {
  resultPbgroupNotice.hasType = NO;
  resultPbgroupNotice.type = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultPbgroupNotice.hasStatus;
}
- (SInt32) status {
  return resultPbgroupNotice.status;
}
- (PBGroupNoticeBuilder*) setStatus:(SInt32) value {
  resultPbgroupNotice.hasStatus = YES;
  resultPbgroupNotice.status = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearStatus {
  resultPbgroupNotice.hasStatus = NO;
  resultPbgroupNotice.status = 0;
  return self;
}
- (BOOL) hasGroupId {
  return resultPbgroupNotice.hasGroupId;
}
- (NSString*) groupId {
  return resultPbgroupNotice.groupId;
}
- (PBGroupNoticeBuilder*) setGroupId:(NSString*) value {
  resultPbgroupNotice.hasGroupId = YES;
  resultPbgroupNotice.groupId = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearGroupId {
  resultPbgroupNotice.hasGroupId = NO;
  resultPbgroupNotice.groupId = @"";
  return self;
}
- (BOOL) hasGroupName {
  return resultPbgroupNotice.hasGroupName;
}
- (NSString*) groupName {
  return resultPbgroupNotice.groupName;
}
- (PBGroupNoticeBuilder*) setGroupName:(NSString*) value {
  resultPbgroupNotice.hasGroupName = YES;
  resultPbgroupNotice.groupName = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearGroupName {
  resultPbgroupNotice.hasGroupName = NO;
  resultPbgroupNotice.groupName = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultPbgroupNotice.hasMessage;
}
- (NSString*) message {
  return resultPbgroupNotice.message;
}
- (PBGroupNoticeBuilder*) setMessage:(NSString*) value {
  resultPbgroupNotice.hasMessage = YES;
  resultPbgroupNotice.message = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearMessage {
  resultPbgroupNotice.hasMessage = NO;
  resultPbgroupNotice.message = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbgroupNotice.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbgroupNotice.createDate;
}
- (PBGroupNoticeBuilder*) setCreateDate:(SInt32) value {
  resultPbgroupNotice.hasCreateDate = YES;
  resultPbgroupNotice.createDate = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearCreateDate {
  resultPbgroupNotice.hasCreateDate = NO;
  resultPbgroupNotice.createDate = 0;
  return self;
}
- (BOOL) hasAmount {
  return resultPbgroupNotice.hasAmount;
}
- (SInt32) amount {
  return resultPbgroupNotice.amount;
}
- (PBGroupNoticeBuilder*) setAmount:(SInt32) value {
  resultPbgroupNotice.hasAmount = YES;
  resultPbgroupNotice.amount = value;
  return self;
}
- (PBGroupNoticeBuilder*) clearAmount {
  resultPbgroupNotice.hasAmount = NO;
  resultPbgroupNotice.amount = 0;
  return self;
}
- (BOOL) hasPublisher {
  return resultPbgroupNotice.hasPublisher;
}
- (PBGameUser*) publisher {
  return resultPbgroupNotice.publisher;
}
- (PBGroupNoticeBuilder*) setPublisher:(PBGameUser*) value {
  resultPbgroupNotice.hasPublisher = YES;
  resultPbgroupNotice.publisher = value;
  return self;
}
- (PBGroupNoticeBuilder*) setPublisherBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setPublisher:[builderForValue build]];
}
- (PBGroupNoticeBuilder*) mergePublisher:(PBGameUser*) value {
  if (resultPbgroupNotice.hasPublisher &&
      resultPbgroupNotice.publisher != [PBGameUser defaultInstance]) {
    resultPbgroupNotice.publisher =
      [[[PBGameUser builderWithPrototype:resultPbgroupNotice.publisher] mergeFrom:value] buildPartial];
  } else {
    resultPbgroupNotice.publisher = value;
  }
  resultPbgroupNotice.hasPublisher = YES;
  return self;
}
- (PBGroupNoticeBuilder*) clearPublisher {
  resultPbgroupNotice.hasPublisher = NO;
  resultPbgroupNotice.publisher = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasTarget {
  return resultPbgroupNotice.hasTarget;
}
- (PBGameUser*) target {
  return resultPbgroupNotice.target;
}
- (PBGroupNoticeBuilder*) setTarget:(PBGameUser*) value {
  resultPbgroupNotice.hasTarget = YES;
  resultPbgroupNotice.target = value;
  return self;
}
- (PBGroupNoticeBuilder*) setTargetBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setTarget:[builderForValue build]];
}
- (PBGroupNoticeBuilder*) mergeTarget:(PBGameUser*) value {
  if (resultPbgroupNotice.hasTarget &&
      resultPbgroupNotice.target != [PBGameUser defaultInstance]) {
    resultPbgroupNotice.target =
      [[[PBGameUser builderWithPrototype:resultPbgroupNotice.target] mergeFrom:value] buildPartial];
  } else {
    resultPbgroupNotice.target = value;
  }
  resultPbgroupNotice.hasTarget = YES;
  return self;
}
- (PBGroupNoticeBuilder*) clearTarget {
  resultPbgroupNotice.hasTarget = NO;
  resultPbgroupNotice.target = [PBGameUser defaultInstance];
  return self;
}
@end

@interface PBContest ()
@property (strong) NSString* contestId;
@property SInt32 startDate;
@property SInt32 endDate;
@property SInt32 type;
@property SInt32 status;
@property SInt32 participantCount;
@property SInt32 opusCount;
@property (strong) NSString* title;
@property (strong) NSString* contestUrl;
@property (strong) NSString* statementUrl;
@property SInt32 voteStartDate;
@property SInt32 voteEndDate;
@property BOOL isAnounymous;
@property PBOpusCategoryType category;
@property SInt32 canSubmitCount;
@property SInt32 maxFlowerPerContest;
@property SInt32 maxFlowerPerOpus;
@property SInt32 judgeRankWeight;
@property BOOL canSubmit;
@property BOOL canVote;
@property BOOL contestantsOnly;
@property (strong) NSMutableArray * contestantsArray;
@property (strong) NSMutableArray * judgesArray;
@property (strong) NSMutableArray * reportersArray;
@property (strong) NSMutableArray * winnerUsersArray;
@property (strong) NSMutableArray * awardUsersArray;
@property (strong) NSMutableArray * rankTypesArray;
@property (strong) PBGroup* group;
@property SInt32 joinersType;
@property (strong) NSString* desc;
@property (strong) PBAppendableArray * awardRulesArray;
@end

@implementation PBContest

- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) _value_ {
  hasContestId_ = !!_value_;
}
@synthesize contestId;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) _value_ {
  hasStartDate_ = !!_value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) _value_ {
  hasEndDate_ = !!_value_;
}
@synthesize endDate;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasParticipantCount {
  return !!hasParticipantCount_;
}
- (void) setHasParticipantCount:(BOOL) _value_ {
  hasParticipantCount_ = !!_value_;
}
@synthesize participantCount;
- (BOOL) hasOpusCount {
  return !!hasOpusCount_;
}
- (void) setHasOpusCount:(BOOL) _value_ {
  hasOpusCount_ = !!_value_;
}
@synthesize opusCount;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasContestUrl {
  return !!hasContestUrl_;
}
- (void) setHasContestUrl:(BOOL) _value_ {
  hasContestUrl_ = !!_value_;
}
@synthesize contestUrl;
- (BOOL) hasStatementUrl {
  return !!hasStatementUrl_;
}
- (void) setHasStatementUrl:(BOOL) _value_ {
  hasStatementUrl_ = !!_value_;
}
@synthesize statementUrl;
- (BOOL) hasVoteStartDate {
  return !!hasVoteStartDate_;
}
- (void) setHasVoteStartDate:(BOOL) _value_ {
  hasVoteStartDate_ = !!_value_;
}
@synthesize voteStartDate;
- (BOOL) hasVoteEndDate {
  return !!hasVoteEndDate_;
}
- (void) setHasVoteEndDate:(BOOL) _value_ {
  hasVoteEndDate_ = !!_value_;
}
@synthesize voteEndDate;
- (BOOL) hasIsAnounymous {
  return !!hasIsAnounymous_;
}
- (void) setHasIsAnounymous:(BOOL) _value_ {
  hasIsAnounymous_ = !!_value_;
}
- (BOOL) isAnounymous {
  return !!isAnounymous_;
}
- (void) setIsAnounymous:(BOOL) _value_ {
  isAnounymous_ = !!_value_;
}
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasCanSubmitCount {
  return !!hasCanSubmitCount_;
}
- (void) setHasCanSubmitCount:(BOOL) _value_ {
  hasCanSubmitCount_ = !!_value_;
}
@synthesize canSubmitCount;
- (BOOL) hasMaxFlowerPerContest {
  return !!hasMaxFlowerPerContest_;
}
- (void) setHasMaxFlowerPerContest:(BOOL) _value_ {
  hasMaxFlowerPerContest_ = !!_value_;
}
@synthesize maxFlowerPerContest;
- (BOOL) hasMaxFlowerPerOpus {
  return !!hasMaxFlowerPerOpus_;
}
- (void) setHasMaxFlowerPerOpus:(BOOL) _value_ {
  hasMaxFlowerPerOpus_ = !!_value_;
}
@synthesize maxFlowerPerOpus;
- (BOOL) hasJudgeRankWeight {
  return !!hasJudgeRankWeight_;
}
- (void) setHasJudgeRankWeight:(BOOL) _value_ {
  hasJudgeRankWeight_ = !!_value_;
}
@synthesize judgeRankWeight;
- (BOOL) hasCanSubmit {
  return !!hasCanSubmit_;
}
- (void) setHasCanSubmit:(BOOL) _value_ {
  hasCanSubmit_ = !!_value_;
}
- (BOOL) canSubmit {
  return !!canSubmit_;
}
- (void) setCanSubmit:(BOOL) _value_ {
  canSubmit_ = !!_value_;
}
- (BOOL) hasCanVote {
  return !!hasCanVote_;
}
- (void) setHasCanVote:(BOOL) _value_ {
  hasCanVote_ = !!_value_;
}
- (BOOL) canVote {
  return !!canVote_;
}
- (void) setCanVote:(BOOL) _value_ {
  canVote_ = !!_value_;
}
- (BOOL) hasContestantsOnly {
  return !!hasContestantsOnly_;
}
- (void) setHasContestantsOnly:(BOOL) _value_ {
  hasContestantsOnly_ = !!_value_;
}
- (BOOL) contestantsOnly {
  return !!contestantsOnly_;
}
- (void) setContestantsOnly:(BOOL) _value_ {
  contestantsOnly_ = !!_value_;
}
@synthesize contestantsArray;
@dynamic contestants;
@synthesize judgesArray;
@dynamic judges;
@synthesize reportersArray;
@dynamic reporters;
@synthesize winnerUsersArray;
@dynamic winnerUsers;
@synthesize awardUsersArray;
@dynamic awardUsers;
@synthesize rankTypesArray;
@dynamic rankTypes;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) _value_ {
  hasGroup_ = !!_value_;
}
@synthesize group;
- (BOOL) hasJoinersType {
  return !!hasJoinersType_;
}
- (void) setHasJoinersType:(BOOL) _value_ {
  hasJoinersType_ = !!_value_;
}
@synthesize joinersType;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
@synthesize awardRulesArray;
@dynamic awardRules;
- (instancetype) init {
  if ((self = [super init])) {
    self.contestId = @"";
    self.startDate = 0;
    self.endDate = 0;
    self.type = 0;
    self.status = 0;
    self.participantCount = 0;
    self.opusCount = 0;
    self.title = @"";
    self.contestUrl = @"";
    self.statementUrl = @"";
    self.voteStartDate = 0;
    self.voteEndDate = 0;
    self.isAnounymous = NO;
    self.category = PBOpusCategoryTypeDrawCategory;
    self.canSubmitCount = 1;
    self.maxFlowerPerContest = 20;
    self.maxFlowerPerOpus = 3;
    self.judgeRankWeight = 0;
    self.canSubmit = NO;
    self.canVote = NO;
    self.contestantsOnly = NO;
    self.group = [PBGroup defaultInstance];
    self.joinersType = 0;
    self.desc = @"";
  }
  return self;
}
static PBContest* defaultPBContestInstance = nil;
+ (void) initialize {
  if (self == [PBContest class]) {
    defaultPBContestInstance = [[PBContest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBContestInstance;
}
- (instancetype) defaultInstance {
  return defaultPBContestInstance;
}
- (NSArray *)contestants {
  return contestantsArray;
}
- (PBGameUser*)contestantsAtIndex:(NSUInteger)index {
  return [contestantsArray objectAtIndex:index];
}
- (NSArray *)judges {
  return judgesArray;
}
- (PBGameUser*)judgesAtIndex:(NSUInteger)index {
  return [judgesArray objectAtIndex:index];
}
- (NSArray *)reporters {
  return reportersArray;
}
- (PBGameUser*)reportersAtIndex:(NSUInteger)index {
  return [reportersArray objectAtIndex:index];
}
- (NSArray *)winnerUsers {
  return winnerUsersArray;
}
- (PBUserAward*)winnerUsersAtIndex:(NSUInteger)index {
  return [winnerUsersArray objectAtIndex:index];
}
- (NSArray *)awardUsers {
  return awardUsersArray;
}
- (PBUserAward*)awardUsersAtIndex:(NSUInteger)index {
  return [awardUsersArray objectAtIndex:index];
}
- (NSArray *)rankTypes {
  return rankTypesArray;
}
- (PBIntKeyValue*)rankTypesAtIndex:(NSUInteger)index {
  return [rankTypesArray objectAtIndex:index];
}
- (PBArray *)awardRules {
  return awardRulesArray;
}
- (SInt32)awardRulesAtIndex:(NSUInteger)index {
  return [awardRulesArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasContestId) {
    return NO;
  }
  __block BOOL isInitcontestants = YES;
   [self.contestants enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontestants = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontestants) return isInitcontestants;
  __block BOOL isInitjudges = YES;
   [self.judges enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitjudges = NO;
      *stop = YES;
    }
  }];
  if (!isInitjudges) return isInitjudges;
  __block BOOL isInitreporters = YES;
   [self.reporters enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitreporters = NO;
      *stop = YES;
    }
  }];
  if (!isInitreporters) return isInitreporters;
  __block BOOL isInitwinnerUsers = YES;
   [self.winnerUsers enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitwinnerUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInitwinnerUsers) return isInitwinnerUsers;
  __block BOOL isInitawardUsers = YES;
   [self.awardUsers enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitawardUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInitawardUsers) return isInitawardUsers;
  __block BOOL isInitrankTypes = YES;
   [self.rankTypes enumerateObjectsUsingBlock:^(PBIntKeyValue *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrankTypes = NO;
      *stop = YES;
    }
  }];
  if (!isInitrankTypes) return isInitrankTypes;
  if (self.hasGroup) {
    if (!self.group.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasContestId) {
    [output writeString:1 value:self.contestId];
  }
  if (self.hasStartDate) {
    [output writeInt32:2 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeInt32:3 value:self.endDate];
  }
  if (self.hasType) {
    [output writeInt32:4 value:self.type];
  }
  if (self.hasStatus) {
    [output writeInt32:5 value:self.status];
  }
  if (self.hasParticipantCount) {
    [output writeInt32:6 value:self.participantCount];
  }
  if (self.hasOpusCount) {
    [output writeInt32:7 value:self.opusCount];
  }
  if (self.hasTitle) {
    [output writeString:8 value:self.title];
  }
  if (self.hasContestUrl) {
    [output writeString:9 value:self.contestUrl];
  }
  if (self.hasStatementUrl) {
    [output writeString:10 value:self.statementUrl];
  }
  if (self.hasVoteStartDate) {
    [output writeInt32:11 value:self.voteStartDate];
  }
  if (self.hasVoteEndDate) {
    [output writeInt32:12 value:self.voteEndDate];
  }
  if (self.hasIsAnounymous) {
    [output writeBool:13 value:self.isAnounymous];
  }
  if (self.hasCategory) {
    [output writeEnum:15 value:self.category];
  }
  if (self.hasCanSubmitCount) {
    [output writeInt32:31 value:self.canSubmitCount];
  }
  if (self.hasMaxFlowerPerContest) {
    [output writeInt32:32 value:self.maxFlowerPerContest];
  }
  if (self.hasMaxFlowerPerOpus) {
    [output writeInt32:33 value:self.maxFlowerPerOpus];
  }
  if (self.hasJudgeRankWeight) {
    [output writeInt32:34 value:self.judgeRankWeight];
  }
  if (self.hasCanSubmit) {
    [output writeBool:41 value:self.canSubmit];
  }
  if (self.hasCanVote) {
    [output writeBool:42 value:self.canVote];
  }
  if (self.hasContestantsOnly) {
    [output writeBool:49 value:self.contestantsOnly];
  }
  [self.contestantsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:50 value:element];
  }];
  [self.judgesArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:51 value:element];
  }];
  [self.reportersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:52 value:element];
  }];
  [self.winnerUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:53 value:element];
  }];
  [self.awardUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:54 value:element];
  }];
  [self.rankTypesArray enumerateObjectsUsingBlock:^(PBIntKeyValue *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:55 value:element];
  }];
  if (self.hasGroup) {
    [output writeMessage:60 value:self.group];
  }
  if (self.hasJoinersType) {
    [output writeInt32:61 value:self.joinersType];
  }
  if (self.hasDesc) {
    [output writeString:62 value:self.desc];
  }
  const NSUInteger awardRulesArrayCount = self.awardRulesArray.count;
  if (awardRulesArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.awardRulesArray.data;
    for (NSUInteger i = 0; i < awardRulesArrayCount; ++i) {
      [output writeInt32:63 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasContestId) {
    size_ += computeStringSize(1, self.contestId);
  }
  if (self.hasStartDate) {
    size_ += computeInt32Size(2, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeInt32Size(3, self.endDate);
  }
  if (self.hasType) {
    size_ += computeInt32Size(4, self.type);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(5, self.status);
  }
  if (self.hasParticipantCount) {
    size_ += computeInt32Size(6, self.participantCount);
  }
  if (self.hasOpusCount) {
    size_ += computeInt32Size(7, self.opusCount);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(8, self.title);
  }
  if (self.hasContestUrl) {
    size_ += computeStringSize(9, self.contestUrl);
  }
  if (self.hasStatementUrl) {
    size_ += computeStringSize(10, self.statementUrl);
  }
  if (self.hasVoteStartDate) {
    size_ += computeInt32Size(11, self.voteStartDate);
  }
  if (self.hasVoteEndDate) {
    size_ += computeInt32Size(12, self.voteEndDate);
  }
  if (self.hasIsAnounymous) {
    size_ += computeBoolSize(13, self.isAnounymous);
  }
  if (self.hasCategory) {
    size_ += computeEnumSize(15, self.category);
  }
  if (self.hasCanSubmitCount) {
    size_ += computeInt32Size(31, self.canSubmitCount);
  }
  if (self.hasMaxFlowerPerContest) {
    size_ += computeInt32Size(32, self.maxFlowerPerContest);
  }
  if (self.hasMaxFlowerPerOpus) {
    size_ += computeInt32Size(33, self.maxFlowerPerOpus);
  }
  if (self.hasJudgeRankWeight) {
    size_ += computeInt32Size(34, self.judgeRankWeight);
  }
  if (self.hasCanSubmit) {
    size_ += computeBoolSize(41, self.canSubmit);
  }
  if (self.hasCanVote) {
    size_ += computeBoolSize(42, self.canVote);
  }
  if (self.hasContestantsOnly) {
    size_ += computeBoolSize(49, self.contestantsOnly);
  }
  [self.contestantsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(50, element);
  }];
  [self.judgesArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(51, element);
  }];
  [self.reportersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(52, element);
  }];
  [self.winnerUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(53, element);
  }];
  [self.awardUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(54, element);
  }];
  [self.rankTypesArray enumerateObjectsUsingBlock:^(PBIntKeyValue *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(55, element);
  }];
  if (self.hasGroup) {
    size_ += computeMessageSize(60, self.group);
  }
  if (self.hasJoinersType) {
    size_ += computeInt32Size(61, self.joinersType);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(62, self.desc);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.awardRulesArray.count;
    const SInt32 *values = (const SInt32 *)self.awardRulesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBContest*) parseFromData:(NSData*) data {
  return (PBContest*)[[[PBContest builder] mergeFromData:data] build];
}
+ (PBContest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBContest*)[[[PBContest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBContest*) parseFromInputStream:(NSInputStream*) input {
  return (PBContest*)[[[PBContest builder] mergeFromInputStream:input] build];
}
+ (PBContest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBContest*)[[[PBContest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBContest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBContest*)[[[PBContest builder] mergeFromCodedInputStream:input] build];
}
+ (PBContest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBContest*)[[[PBContest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBContestBuilder*) builder {
  return [[PBContestBuilder alloc] init];
}
+ (PBContestBuilder*) builderWithPrototype:(PBContest*) prototype {
  return [[PBContest builder] mergeFrom:prototype];
}
- (PBContestBuilder*) builder {
  return [PBContest builder];
}
- (PBContestBuilder*) toBuilder {
  return [PBContest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasContestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestId", self.contestId];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", [NSNumber numberWithInteger:self.startDate]];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", [NSNumber numberWithInteger:self.endDate]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasParticipantCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"participantCount", [NSNumber numberWithInteger:self.participantCount]];
  }
  if (self.hasOpusCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCount", [NSNumber numberWithInteger:self.opusCount]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasContestUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestUrl", self.contestUrl];
  }
  if (self.hasStatementUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statementUrl", self.statementUrl];
  }
  if (self.hasVoteStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voteStartDate", [NSNumber numberWithInteger:self.voteStartDate]];
  }
  if (self.hasVoteEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voteEndDate", [NSNumber numberWithInteger:self.voteEndDate]];
  }
  if (self.hasIsAnounymous) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAnounymous", [NSNumber numberWithBool:self.isAnounymous]];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", NSStringFromPBOpusCategoryType(self.category)];
  }
  if (self.hasCanSubmitCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canSubmitCount", [NSNumber numberWithInteger:self.canSubmitCount]];
  }
  if (self.hasMaxFlowerPerContest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxFlowerPerContest", [NSNumber numberWithInteger:self.maxFlowerPerContest]];
  }
  if (self.hasMaxFlowerPerOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxFlowerPerOpus", [NSNumber numberWithInteger:self.maxFlowerPerOpus]];
  }
  if (self.hasJudgeRankWeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"judgeRankWeight", [NSNumber numberWithInteger:self.judgeRankWeight]];
  }
  if (self.hasCanSubmit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canSubmit", [NSNumber numberWithBool:self.canSubmit]];
  }
  if (self.hasCanVote) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canVote", [NSNumber numberWithBool:self.canVote]];
  }
  if (self.hasContestantsOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestantsOnly", [NSNumber numberWithBool:self.contestantsOnly]];
  }
  [self.contestantsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contestants"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.judgesArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"judges"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.reportersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"reporters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.winnerUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"winnerUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.awardUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"awardUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.rankTypesArray enumerateObjectsUsingBlock:^(PBIntKeyValue *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rankTypes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"group"];
    [self.group writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasJoinersType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"joinersType", [NSNumber numberWithInteger:self.joinersType]];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  [self.awardRulesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardRules", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBContest class]]) {
    return NO;
  }
  PBContest *otherMessage = other;
  return
      self.hasContestId == otherMessage.hasContestId &&
      (!self.hasContestId || [self.contestId isEqual:otherMessage.contestId]) &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || self.startDate == otherMessage.startDate) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || self.endDate == otherMessage.endDate) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasParticipantCount == otherMessage.hasParticipantCount &&
      (!self.hasParticipantCount || self.participantCount == otherMessage.participantCount) &&
      self.hasOpusCount == otherMessage.hasOpusCount &&
      (!self.hasOpusCount || self.opusCount == otherMessage.opusCount) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasContestUrl == otherMessage.hasContestUrl &&
      (!self.hasContestUrl || [self.contestUrl isEqual:otherMessage.contestUrl]) &&
      self.hasStatementUrl == otherMessage.hasStatementUrl &&
      (!self.hasStatementUrl || [self.statementUrl isEqual:otherMessage.statementUrl]) &&
      self.hasVoteStartDate == otherMessage.hasVoteStartDate &&
      (!self.hasVoteStartDate || self.voteStartDate == otherMessage.voteStartDate) &&
      self.hasVoteEndDate == otherMessage.hasVoteEndDate &&
      (!self.hasVoteEndDate || self.voteEndDate == otherMessage.voteEndDate) &&
      self.hasIsAnounymous == otherMessage.hasIsAnounymous &&
      (!self.hasIsAnounymous || self.isAnounymous == otherMessage.isAnounymous) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || self.category == otherMessage.category) &&
      self.hasCanSubmitCount == otherMessage.hasCanSubmitCount &&
      (!self.hasCanSubmitCount || self.canSubmitCount == otherMessage.canSubmitCount) &&
      self.hasMaxFlowerPerContest == otherMessage.hasMaxFlowerPerContest &&
      (!self.hasMaxFlowerPerContest || self.maxFlowerPerContest == otherMessage.maxFlowerPerContest) &&
      self.hasMaxFlowerPerOpus == otherMessage.hasMaxFlowerPerOpus &&
      (!self.hasMaxFlowerPerOpus || self.maxFlowerPerOpus == otherMessage.maxFlowerPerOpus) &&
      self.hasJudgeRankWeight == otherMessage.hasJudgeRankWeight &&
      (!self.hasJudgeRankWeight || self.judgeRankWeight == otherMessage.judgeRankWeight) &&
      self.hasCanSubmit == otherMessage.hasCanSubmit &&
      (!self.hasCanSubmit || self.canSubmit == otherMessage.canSubmit) &&
      self.hasCanVote == otherMessage.hasCanVote &&
      (!self.hasCanVote || self.canVote == otherMessage.canVote) &&
      self.hasContestantsOnly == otherMessage.hasContestantsOnly &&
      (!self.hasContestantsOnly || self.contestantsOnly == otherMessage.contestantsOnly) &&
      [self.contestantsArray isEqualToArray:otherMessage.contestantsArray] &&
      [self.judgesArray isEqualToArray:otherMessage.judgesArray] &&
      [self.reportersArray isEqualToArray:otherMessage.reportersArray] &&
      [self.winnerUsersArray isEqualToArray:otherMessage.winnerUsersArray] &&
      [self.awardUsersArray isEqualToArray:otherMessage.awardUsersArray] &&
      [self.rankTypesArray isEqualToArray:otherMessage.rankTypesArray] &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasJoinersType == otherMessage.hasJoinersType &&
      (!self.hasJoinersType || self.joinersType == otherMessage.joinersType) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      [self.awardRulesArray isEqualToArray:otherMessage.awardRulesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasContestId) {
    hashCode = hashCode * 31 + [self.contestId hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startDate] hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.endDate] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasParticipantCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.participantCount] hash];
  }
  if (self.hasOpusCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.opusCount] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasContestUrl) {
    hashCode = hashCode * 31 + [self.contestUrl hash];
  }
  if (self.hasStatementUrl) {
    hashCode = hashCode * 31 + [self.statementUrl hash];
  }
  if (self.hasVoteStartDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.voteStartDate] hash];
  }
  if (self.hasVoteEndDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.voteEndDate] hash];
  }
  if (self.hasIsAnounymous) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAnounymous] hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + self.category;
  }
  if (self.hasCanSubmitCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.canSubmitCount] hash];
  }
  if (self.hasMaxFlowerPerContest) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxFlowerPerContest] hash];
  }
  if (self.hasMaxFlowerPerOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxFlowerPerOpus] hash];
  }
  if (self.hasJudgeRankWeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.judgeRankWeight] hash];
  }
  if (self.hasCanSubmit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.canSubmit] hash];
  }
  if (self.hasCanVote) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.canVote] hash];
  }
  if (self.hasContestantsOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.contestantsOnly] hash];
  }
  [self.contestantsArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.judgesArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.reportersArray enumerateObjectsUsingBlock:^(PBGameUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.winnerUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.awardUsersArray enumerateObjectsUsingBlock:^(PBUserAward *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.rankTypesArray enumerateObjectsUsingBlock:^(PBIntKeyValue *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasJoinersType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.joinersType] hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  [self.awardRulesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBContestBuilder()
@property (strong) PBContest* resultPbcontest;
@end

@implementation PBContestBuilder
@synthesize resultPbcontest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcontest = [[PBContest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcontest;
}
- (PBContestBuilder*) clear {
  self.resultPbcontest = [[PBContest alloc] init];
  return self;
}
- (PBContestBuilder*) clone {
  return [PBContest builderWithPrototype:resultPbcontest];
}
- (PBContest*) defaultInstance {
  return [PBContest defaultInstance];
}
- (PBContest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBContest*) buildPartial {
  PBContest* returnMe = resultPbcontest;
  self.resultPbcontest = nil;
  return returnMe;
}
- (PBContestBuilder*) mergeFrom:(PBContest*) other {
  if (other == [PBContest defaultInstance]) {
    return self;
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasParticipantCount) {
    [self setParticipantCount:other.participantCount];
  }
  if (other.hasOpusCount) {
    [self setOpusCount:other.opusCount];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContestUrl) {
    [self setContestUrl:other.contestUrl];
  }
  if (other.hasStatementUrl) {
    [self setStatementUrl:other.statementUrl];
  }
  if (other.hasVoteStartDate) {
    [self setVoteStartDate:other.voteStartDate];
  }
  if (other.hasVoteEndDate) {
    [self setVoteEndDate:other.voteEndDate];
  }
  if (other.hasIsAnounymous) {
    [self setIsAnounymous:other.isAnounymous];
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasCanSubmitCount) {
    [self setCanSubmitCount:other.canSubmitCount];
  }
  if (other.hasMaxFlowerPerContest) {
    [self setMaxFlowerPerContest:other.maxFlowerPerContest];
  }
  if (other.hasMaxFlowerPerOpus) {
    [self setMaxFlowerPerOpus:other.maxFlowerPerOpus];
  }
  if (other.hasJudgeRankWeight) {
    [self setJudgeRankWeight:other.judgeRankWeight];
  }
  if (other.hasCanSubmit) {
    [self setCanSubmit:other.canSubmit];
  }
  if (other.hasCanVote) {
    [self setCanVote:other.canVote];
  }
  if (other.hasContestantsOnly) {
    [self setContestantsOnly:other.contestantsOnly];
  }
  if (other.contestantsArray.count > 0) {
    if (resultPbcontest.contestantsArray == nil) {
      resultPbcontest.contestantsArray = [[NSMutableArray alloc] initWithArray:other.contestantsArray];
    } else {
      [resultPbcontest.contestantsArray addObjectsFromArray:other.contestantsArray];
    }
  }
  if (other.judgesArray.count > 0) {
    if (resultPbcontest.judgesArray == nil) {
      resultPbcontest.judgesArray = [[NSMutableArray alloc] initWithArray:other.judgesArray];
    } else {
      [resultPbcontest.judgesArray addObjectsFromArray:other.judgesArray];
    }
  }
  if (other.reportersArray.count > 0) {
    if (resultPbcontest.reportersArray == nil) {
      resultPbcontest.reportersArray = [[NSMutableArray alloc] initWithArray:other.reportersArray];
    } else {
      [resultPbcontest.reportersArray addObjectsFromArray:other.reportersArray];
    }
  }
  if (other.winnerUsersArray.count > 0) {
    if (resultPbcontest.winnerUsersArray == nil) {
      resultPbcontest.winnerUsersArray = [[NSMutableArray alloc] initWithArray:other.winnerUsersArray];
    } else {
      [resultPbcontest.winnerUsersArray addObjectsFromArray:other.winnerUsersArray];
    }
  }
  if (other.awardUsersArray.count > 0) {
    if (resultPbcontest.awardUsersArray == nil) {
      resultPbcontest.awardUsersArray = [[NSMutableArray alloc] initWithArray:other.awardUsersArray];
    } else {
      [resultPbcontest.awardUsersArray addObjectsFromArray:other.awardUsersArray];
    }
  }
  if (other.rankTypesArray.count > 0) {
    if (resultPbcontest.rankTypesArray == nil) {
      resultPbcontest.rankTypesArray = [[NSMutableArray alloc] initWithArray:other.rankTypesArray];
    } else {
      [resultPbcontest.rankTypesArray addObjectsFromArray:other.rankTypesArray];
    }
  }
  if (other.hasGroup) {
    [self mergeGroup:other.group];
  }
  if (other.hasJoinersType) {
    [self setJoinersType:other.joinersType];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.awardRulesArray.count > 0) {
    if (resultPbcontest.awardRulesArray == nil) {
      resultPbcontest.awardRulesArray = [other.awardRulesArray copy];
    } else {
      [resultPbcontest.awardRulesArray appendArray:other.awardRulesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBContestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBContestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setContestId:[input readString]];
        break;
      }
      case 16: {
        [self setStartDate:[input readInt32]];
        break;
      }
      case 24: {
        [self setEndDate:[input readInt32]];
        break;
      }
      case 32: {
        [self setType:[input readInt32]];
        break;
      }
      case 40: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 48: {
        [self setParticipantCount:[input readInt32]];
        break;
      }
      case 56: {
        [self setOpusCount:[input readInt32]];
        break;
      }
      case 66: {
        [self setTitle:[input readString]];
        break;
      }
      case 74: {
        [self setContestUrl:[input readString]];
        break;
      }
      case 82: {
        [self setStatementUrl:[input readString]];
        break;
      }
      case 88: {
        [self setVoteStartDate:[input readInt32]];
        break;
      }
      case 96: {
        [self setVoteEndDate:[input readInt32]];
        break;
      }
      case 104: {
        [self setIsAnounymous:[input readBool]];
        break;
      }
      case 120: {
        PBOpusCategoryType value = (PBOpusCategoryType)[input readEnum];
        if (PBOpusCategoryTypeIsValidValue(value)) {
          [self setCategory:value];
        } else {
          [unknownFields mergeVarintField:15 value:value];
        }
        break;
      }
      case 248: {
        [self setCanSubmitCount:[input readInt32]];
        break;
      }
      case 256: {
        [self setMaxFlowerPerContest:[input readInt32]];
        break;
      }
      case 264: {
        [self setMaxFlowerPerOpus:[input readInt32]];
        break;
      }
      case 272: {
        [self setJudgeRankWeight:[input readInt32]];
        break;
      }
      case 328: {
        [self setCanSubmit:[input readBool]];
        break;
      }
      case 336: {
        [self setCanVote:[input readBool]];
        break;
      }
      case 392: {
        [self setContestantsOnly:[input readBool]];
        break;
      }
      case 402: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContestants:[subBuilder buildPartial]];
        break;
      }
      case 410: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addJudges:[subBuilder buildPartial]];
        break;
      }
      case 418: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReporters:[subBuilder buildPartial]];
        break;
      }
      case 426: {
        PBUserAwardBuilder* subBuilder = [PBUserAward builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWinnerUsers:[subBuilder buildPartial]];
        break;
      }
      case 434: {
        PBUserAwardBuilder* subBuilder = [PBUserAward builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAwardUsers:[subBuilder buildPartial]];
        break;
      }
      case 442: {
        PBIntKeyValueBuilder* subBuilder = [PBIntKeyValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRankTypes:[subBuilder buildPartial]];
        break;
      }
      case 482: {
        PBGroupBuilder* subBuilder = [PBGroup builder];
        if (self.hasGroup) {
          [subBuilder mergeFrom:self.group];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGroup:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setJoinersType:[input readInt32]];
        break;
      }
      case 498: {
        [self setDesc:[input readString]];
        break;
      }
      case 504: {
        [self addAwardRules:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasContestId {
  return resultPbcontest.hasContestId;
}
- (NSString*) contestId {
  return resultPbcontest.contestId;
}
- (PBContestBuilder*) setContestId:(NSString*) value {
  resultPbcontest.hasContestId = YES;
  resultPbcontest.contestId = value;
  return self;
}
- (PBContestBuilder*) clearContestId {
  resultPbcontest.hasContestId = NO;
  resultPbcontest.contestId = @"";
  return self;
}
- (BOOL) hasStartDate {
  return resultPbcontest.hasStartDate;
}
- (SInt32) startDate {
  return resultPbcontest.startDate;
}
- (PBContestBuilder*) setStartDate:(SInt32) value {
  resultPbcontest.hasStartDate = YES;
  resultPbcontest.startDate = value;
  return self;
}
- (PBContestBuilder*) clearStartDate {
  resultPbcontest.hasStartDate = NO;
  resultPbcontest.startDate = 0;
  return self;
}
- (BOOL) hasEndDate {
  return resultPbcontest.hasEndDate;
}
- (SInt32) endDate {
  return resultPbcontest.endDate;
}
- (PBContestBuilder*) setEndDate:(SInt32) value {
  resultPbcontest.hasEndDate = YES;
  resultPbcontest.endDate = value;
  return self;
}
- (PBContestBuilder*) clearEndDate {
  resultPbcontest.hasEndDate = NO;
  resultPbcontest.endDate = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbcontest.hasType;
}
- (SInt32) type {
  return resultPbcontest.type;
}
- (PBContestBuilder*) setType:(SInt32) value {
  resultPbcontest.hasType = YES;
  resultPbcontest.type = value;
  return self;
}
- (PBContestBuilder*) clearType {
  resultPbcontest.hasType = NO;
  resultPbcontest.type = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultPbcontest.hasStatus;
}
- (SInt32) status {
  return resultPbcontest.status;
}
- (PBContestBuilder*) setStatus:(SInt32) value {
  resultPbcontest.hasStatus = YES;
  resultPbcontest.status = value;
  return self;
}
- (PBContestBuilder*) clearStatus {
  resultPbcontest.hasStatus = NO;
  resultPbcontest.status = 0;
  return self;
}
- (BOOL) hasParticipantCount {
  return resultPbcontest.hasParticipantCount;
}
- (SInt32) participantCount {
  return resultPbcontest.participantCount;
}
- (PBContestBuilder*) setParticipantCount:(SInt32) value {
  resultPbcontest.hasParticipantCount = YES;
  resultPbcontest.participantCount = value;
  return self;
}
- (PBContestBuilder*) clearParticipantCount {
  resultPbcontest.hasParticipantCount = NO;
  resultPbcontest.participantCount = 0;
  return self;
}
- (BOOL) hasOpusCount {
  return resultPbcontest.hasOpusCount;
}
- (SInt32) opusCount {
  return resultPbcontest.opusCount;
}
- (PBContestBuilder*) setOpusCount:(SInt32) value {
  resultPbcontest.hasOpusCount = YES;
  resultPbcontest.opusCount = value;
  return self;
}
- (PBContestBuilder*) clearOpusCount {
  resultPbcontest.hasOpusCount = NO;
  resultPbcontest.opusCount = 0;
  return self;
}
- (BOOL) hasTitle {
  return resultPbcontest.hasTitle;
}
- (NSString*) title {
  return resultPbcontest.title;
}
- (PBContestBuilder*) setTitle:(NSString*) value {
  resultPbcontest.hasTitle = YES;
  resultPbcontest.title = value;
  return self;
}
- (PBContestBuilder*) clearTitle {
  resultPbcontest.hasTitle = NO;
  resultPbcontest.title = @"";
  return self;
}
- (BOOL) hasContestUrl {
  return resultPbcontest.hasContestUrl;
}
- (NSString*) contestUrl {
  return resultPbcontest.contestUrl;
}
- (PBContestBuilder*) setContestUrl:(NSString*) value {
  resultPbcontest.hasContestUrl = YES;
  resultPbcontest.contestUrl = value;
  return self;
}
- (PBContestBuilder*) clearContestUrl {
  resultPbcontest.hasContestUrl = NO;
  resultPbcontest.contestUrl = @"";
  return self;
}
- (BOOL) hasStatementUrl {
  return resultPbcontest.hasStatementUrl;
}
- (NSString*) statementUrl {
  return resultPbcontest.statementUrl;
}
- (PBContestBuilder*) setStatementUrl:(NSString*) value {
  resultPbcontest.hasStatementUrl = YES;
  resultPbcontest.statementUrl = value;
  return self;
}
- (PBContestBuilder*) clearStatementUrl {
  resultPbcontest.hasStatementUrl = NO;
  resultPbcontest.statementUrl = @"";
  return self;
}
- (BOOL) hasVoteStartDate {
  return resultPbcontest.hasVoteStartDate;
}
- (SInt32) voteStartDate {
  return resultPbcontest.voteStartDate;
}
- (PBContestBuilder*) setVoteStartDate:(SInt32) value {
  resultPbcontest.hasVoteStartDate = YES;
  resultPbcontest.voteStartDate = value;
  return self;
}
- (PBContestBuilder*) clearVoteStartDate {
  resultPbcontest.hasVoteStartDate = NO;
  resultPbcontest.voteStartDate = 0;
  return self;
}
- (BOOL) hasVoteEndDate {
  return resultPbcontest.hasVoteEndDate;
}
- (SInt32) voteEndDate {
  return resultPbcontest.voteEndDate;
}
- (PBContestBuilder*) setVoteEndDate:(SInt32) value {
  resultPbcontest.hasVoteEndDate = YES;
  resultPbcontest.voteEndDate = value;
  return self;
}
- (PBContestBuilder*) clearVoteEndDate {
  resultPbcontest.hasVoteEndDate = NO;
  resultPbcontest.voteEndDate = 0;
  return self;
}
- (BOOL) hasIsAnounymous {
  return resultPbcontest.hasIsAnounymous;
}
- (BOOL) isAnounymous {
  return resultPbcontest.isAnounymous;
}
- (PBContestBuilder*) setIsAnounymous:(BOOL) value {
  resultPbcontest.hasIsAnounymous = YES;
  resultPbcontest.isAnounymous = value;
  return self;
}
- (PBContestBuilder*) clearIsAnounymous {
  resultPbcontest.hasIsAnounymous = NO;
  resultPbcontest.isAnounymous = NO;
  return self;
}
- (BOOL) hasCategory {
  return resultPbcontest.hasCategory;
}
- (PBOpusCategoryType) category {
  return resultPbcontest.category;
}
- (PBContestBuilder*) setCategory:(PBOpusCategoryType) value {
  resultPbcontest.hasCategory = YES;
  resultPbcontest.category = value;
  return self;
}
- (PBContestBuilder*) clearCategory {
  resultPbcontest.hasCategory = NO;
  resultPbcontest.category = PBOpusCategoryTypeDrawCategory;
  return self;
}
- (BOOL) hasCanSubmitCount {
  return resultPbcontest.hasCanSubmitCount;
}
- (SInt32) canSubmitCount {
  return resultPbcontest.canSubmitCount;
}
- (PBContestBuilder*) setCanSubmitCount:(SInt32) value {
  resultPbcontest.hasCanSubmitCount = YES;
  resultPbcontest.canSubmitCount = value;
  return self;
}
- (PBContestBuilder*) clearCanSubmitCount {
  resultPbcontest.hasCanSubmitCount = NO;
  resultPbcontest.canSubmitCount = 1;
  return self;
}
- (BOOL) hasMaxFlowerPerContest {
  return resultPbcontest.hasMaxFlowerPerContest;
}
- (SInt32) maxFlowerPerContest {
  return resultPbcontest.maxFlowerPerContest;
}
- (PBContestBuilder*) setMaxFlowerPerContest:(SInt32) value {
  resultPbcontest.hasMaxFlowerPerContest = YES;
  resultPbcontest.maxFlowerPerContest = value;
  return self;
}
- (PBContestBuilder*) clearMaxFlowerPerContest {
  resultPbcontest.hasMaxFlowerPerContest = NO;
  resultPbcontest.maxFlowerPerContest = 20;
  return self;
}
- (BOOL) hasMaxFlowerPerOpus {
  return resultPbcontest.hasMaxFlowerPerOpus;
}
- (SInt32) maxFlowerPerOpus {
  return resultPbcontest.maxFlowerPerOpus;
}
- (PBContestBuilder*) setMaxFlowerPerOpus:(SInt32) value {
  resultPbcontest.hasMaxFlowerPerOpus = YES;
  resultPbcontest.maxFlowerPerOpus = value;
  return self;
}
- (PBContestBuilder*) clearMaxFlowerPerOpus {
  resultPbcontest.hasMaxFlowerPerOpus = NO;
  resultPbcontest.maxFlowerPerOpus = 3;
  return self;
}
- (BOOL) hasJudgeRankWeight {
  return resultPbcontest.hasJudgeRankWeight;
}
- (SInt32) judgeRankWeight {
  return resultPbcontest.judgeRankWeight;
}
- (PBContestBuilder*) setJudgeRankWeight:(SInt32) value {
  resultPbcontest.hasJudgeRankWeight = YES;
  resultPbcontest.judgeRankWeight = value;
  return self;
}
- (PBContestBuilder*) clearJudgeRankWeight {
  resultPbcontest.hasJudgeRankWeight = NO;
  resultPbcontest.judgeRankWeight = 0;
  return self;
}
- (BOOL) hasCanSubmit {
  return resultPbcontest.hasCanSubmit;
}
- (BOOL) canSubmit {
  return resultPbcontest.canSubmit;
}
- (PBContestBuilder*) setCanSubmit:(BOOL) value {
  resultPbcontest.hasCanSubmit = YES;
  resultPbcontest.canSubmit = value;
  return self;
}
- (PBContestBuilder*) clearCanSubmit {
  resultPbcontest.hasCanSubmit = NO;
  resultPbcontest.canSubmit = NO;
  return self;
}
- (BOOL) hasCanVote {
  return resultPbcontest.hasCanVote;
}
- (BOOL) canVote {
  return resultPbcontest.canVote;
}
- (PBContestBuilder*) setCanVote:(BOOL) value {
  resultPbcontest.hasCanVote = YES;
  resultPbcontest.canVote = value;
  return self;
}
- (PBContestBuilder*) clearCanVote {
  resultPbcontest.hasCanVote = NO;
  resultPbcontest.canVote = NO;
  return self;
}
- (BOOL) hasContestantsOnly {
  return resultPbcontest.hasContestantsOnly;
}
- (BOOL) contestantsOnly {
  return resultPbcontest.contestantsOnly;
}
- (PBContestBuilder*) setContestantsOnly:(BOOL) value {
  resultPbcontest.hasContestantsOnly = YES;
  resultPbcontest.contestantsOnly = value;
  return self;
}
- (PBContestBuilder*) clearContestantsOnly {
  resultPbcontest.hasContestantsOnly = NO;
  resultPbcontest.contestantsOnly = NO;
  return self;
}
- (NSMutableArray *)contestants {
  return resultPbcontest.contestantsArray;
}
- (PBGameUser*)contestantsAtIndex:(NSUInteger)index {
  return [resultPbcontest contestantsAtIndex:index];
}
- (PBContestBuilder *)addContestants:(PBGameUser*)value {
  if (resultPbcontest.contestantsArray == nil) {
    resultPbcontest.contestantsArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontest.contestantsArray addObject:value];
  return self;
}
- (PBContestBuilder *)setContestantsArray:(NSArray *)array {
  resultPbcontest.contestantsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestBuilder *)clearContestants {
  resultPbcontest.contestantsArray = nil;
  return self;
}
- (NSMutableArray *)judges {
  return resultPbcontest.judgesArray;
}
- (PBGameUser*)judgesAtIndex:(NSUInteger)index {
  return [resultPbcontest judgesAtIndex:index];
}
- (PBContestBuilder *)addJudges:(PBGameUser*)value {
  if (resultPbcontest.judgesArray == nil) {
    resultPbcontest.judgesArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontest.judgesArray addObject:value];
  return self;
}
- (PBContestBuilder *)setJudgesArray:(NSArray *)array {
  resultPbcontest.judgesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestBuilder *)clearJudges {
  resultPbcontest.judgesArray = nil;
  return self;
}
- (NSMutableArray *)reporters {
  return resultPbcontest.reportersArray;
}
- (PBGameUser*)reportersAtIndex:(NSUInteger)index {
  return [resultPbcontest reportersAtIndex:index];
}
- (PBContestBuilder *)addReporters:(PBGameUser*)value {
  if (resultPbcontest.reportersArray == nil) {
    resultPbcontest.reportersArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontest.reportersArray addObject:value];
  return self;
}
- (PBContestBuilder *)setReportersArray:(NSArray *)array {
  resultPbcontest.reportersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestBuilder *)clearReporters {
  resultPbcontest.reportersArray = nil;
  return self;
}
- (NSMutableArray *)winnerUsers {
  return resultPbcontest.winnerUsersArray;
}
- (PBUserAward*)winnerUsersAtIndex:(NSUInteger)index {
  return [resultPbcontest winnerUsersAtIndex:index];
}
- (PBContestBuilder *)addWinnerUsers:(PBUserAward*)value {
  if (resultPbcontest.winnerUsersArray == nil) {
    resultPbcontest.winnerUsersArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontest.winnerUsersArray addObject:value];
  return self;
}
- (PBContestBuilder *)setWinnerUsersArray:(NSArray *)array {
  resultPbcontest.winnerUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestBuilder *)clearWinnerUsers {
  resultPbcontest.winnerUsersArray = nil;
  return self;
}
- (NSMutableArray *)awardUsers {
  return resultPbcontest.awardUsersArray;
}
- (PBUserAward*)awardUsersAtIndex:(NSUInteger)index {
  return [resultPbcontest awardUsersAtIndex:index];
}
- (PBContestBuilder *)addAwardUsers:(PBUserAward*)value {
  if (resultPbcontest.awardUsersArray == nil) {
    resultPbcontest.awardUsersArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontest.awardUsersArray addObject:value];
  return self;
}
- (PBContestBuilder *)setAwardUsersArray:(NSArray *)array {
  resultPbcontest.awardUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestBuilder *)clearAwardUsers {
  resultPbcontest.awardUsersArray = nil;
  return self;
}
- (NSMutableArray *)rankTypes {
  return resultPbcontest.rankTypesArray;
}
- (PBIntKeyValue*)rankTypesAtIndex:(NSUInteger)index {
  return [resultPbcontest rankTypesAtIndex:index];
}
- (PBContestBuilder *)addRankTypes:(PBIntKeyValue*)value {
  if (resultPbcontest.rankTypesArray == nil) {
    resultPbcontest.rankTypesArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontest.rankTypesArray addObject:value];
  return self;
}
- (PBContestBuilder *)setRankTypesArray:(NSArray *)array {
  resultPbcontest.rankTypesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestBuilder *)clearRankTypes {
  resultPbcontest.rankTypesArray = nil;
  return self;
}
- (BOOL) hasGroup {
  return resultPbcontest.hasGroup;
}
- (PBGroup*) group {
  return resultPbcontest.group;
}
- (PBContestBuilder*) setGroup:(PBGroup*) value {
  resultPbcontest.hasGroup = YES;
  resultPbcontest.group = value;
  return self;
}
- (PBContestBuilder*) setGroupBuilder:(PBGroupBuilder*) builderForValue {
  return [self setGroup:[builderForValue build]];
}
- (PBContestBuilder*) mergeGroup:(PBGroup*) value {
  if (resultPbcontest.hasGroup &&
      resultPbcontest.group != [PBGroup defaultInstance]) {
    resultPbcontest.group =
      [[[PBGroup builderWithPrototype:resultPbcontest.group] mergeFrom:value] buildPartial];
  } else {
    resultPbcontest.group = value;
  }
  resultPbcontest.hasGroup = YES;
  return self;
}
- (PBContestBuilder*) clearGroup {
  resultPbcontest.hasGroup = NO;
  resultPbcontest.group = [PBGroup defaultInstance];
  return self;
}
- (BOOL) hasJoinersType {
  return resultPbcontest.hasJoinersType;
}
- (SInt32) joinersType {
  return resultPbcontest.joinersType;
}
- (PBContestBuilder*) setJoinersType:(SInt32) value {
  resultPbcontest.hasJoinersType = YES;
  resultPbcontest.joinersType = value;
  return self;
}
- (PBContestBuilder*) clearJoinersType {
  resultPbcontest.hasJoinersType = NO;
  resultPbcontest.joinersType = 0;
  return self;
}
- (BOOL) hasDesc {
  return resultPbcontest.hasDesc;
}
- (NSString*) desc {
  return resultPbcontest.desc;
}
- (PBContestBuilder*) setDesc:(NSString*) value {
  resultPbcontest.hasDesc = YES;
  resultPbcontest.desc = value;
  return self;
}
- (PBContestBuilder*) clearDesc {
  resultPbcontest.hasDesc = NO;
  resultPbcontest.desc = @"";
  return self;
}
- (PBAppendableArray *)awardRules {
  return resultPbcontest.awardRulesArray;
}
- (SInt32)awardRulesAtIndex:(NSUInteger)index {
  return [resultPbcontest awardRulesAtIndex:index];
}
- (PBContestBuilder *)addAwardRules:(SInt32)value {
  if (resultPbcontest.awardRulesArray == nil) {
    resultPbcontest.awardRulesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbcontest.awardRulesArray addInt32:value];
  return self;
}
- (PBContestBuilder *)setAwardRulesArray:(NSArray *)array {
  resultPbcontest.awardRulesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBContestBuilder *)setAwardRulesValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbcontest.awardRulesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBContestBuilder *)clearAwardRules {
  resultPbcontest.awardRulesArray = nil;
  return self;
}
@end

@interface PBContestList ()
@property (strong) NSMutableArray * contestsArray;
@end

@implementation PBContestList

@synthesize contestsArray;
@dynamic contests;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBContestList* defaultPBContestListInstance = nil;
+ (void) initialize {
  if (self == [PBContestList class]) {
    defaultPBContestListInstance = [[PBContestList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBContestListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBContestListInstance;
}
- (NSArray *)contests {
  return contestsArray;
}
- (PBContest*)contestsAtIndex:(NSUInteger)index {
  return [contestsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitcontests = YES;
   [self.contests enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontests = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontests) return isInitcontests;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.contestsArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.contestsArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBContestList*) parseFromData:(NSData*) data {
  return (PBContestList*)[[[PBContestList builder] mergeFromData:data] build];
}
+ (PBContestList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBContestList*)[[[PBContestList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBContestList*) parseFromInputStream:(NSInputStream*) input {
  return (PBContestList*)[[[PBContestList builder] mergeFromInputStream:input] build];
}
+ (PBContestList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBContestList*)[[[PBContestList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBContestList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBContestList*)[[[PBContestList builder] mergeFromCodedInputStream:input] build];
}
+ (PBContestList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBContestList*)[[[PBContestList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBContestListBuilder*) builder {
  return [[PBContestListBuilder alloc] init];
}
+ (PBContestListBuilder*) builderWithPrototype:(PBContestList*) prototype {
  return [[PBContestList builder] mergeFrom:prototype];
}
- (PBContestListBuilder*) builder {
  return [PBContestList builder];
}
- (PBContestListBuilder*) toBuilder {
  return [PBContestList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.contestsArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBContestList class]]) {
    return NO;
  }
  PBContestList *otherMessage = other;
  return
      [self.contestsArray isEqualToArray:otherMessage.contestsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.contestsArray enumerateObjectsUsingBlock:^(PBContest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBContestListBuilder()
@property (strong) PBContestList* resultPbcontestList;
@end

@implementation PBContestListBuilder
@synthesize resultPbcontestList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcontestList = [[PBContestList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcontestList;
}
- (PBContestListBuilder*) clear {
  self.resultPbcontestList = [[PBContestList alloc] init];
  return self;
}
- (PBContestListBuilder*) clone {
  return [PBContestList builderWithPrototype:resultPbcontestList];
}
- (PBContestList*) defaultInstance {
  return [PBContestList defaultInstance];
}
- (PBContestList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBContestList*) buildPartial {
  PBContestList* returnMe = resultPbcontestList;
  self.resultPbcontestList = nil;
  return returnMe;
}
- (PBContestListBuilder*) mergeFrom:(PBContestList*) other {
  if (other == [PBContestList defaultInstance]) {
    return self;
  }
  if (other.contestsArray.count > 0) {
    if (resultPbcontestList.contestsArray == nil) {
      resultPbcontestList.contestsArray = [[NSMutableArray alloc] initWithArray:other.contestsArray];
    } else {
      [resultPbcontestList.contestsArray addObjectsFromArray:other.contestsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBContestListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBContestListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBContestBuilder* subBuilder = [PBContest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContests:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)contests {
  return resultPbcontestList.contestsArray;
}
- (PBContest*)contestsAtIndex:(NSUInteger)index {
  return [resultPbcontestList contestsAtIndex:index];
}
- (PBContestListBuilder *)addContests:(PBContest*)value {
  if (resultPbcontestList.contestsArray == nil) {
    resultPbcontestList.contestsArray = [[NSMutableArray alloc]init];
  }
  [resultPbcontestList.contestsArray addObject:value];
  return self;
}
- (PBContestListBuilder *)setContestsArray:(NSArray *)array {
  resultPbcontestList.contestsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBContestListBuilder *)clearContests {
  resultPbcontestList.contestsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
