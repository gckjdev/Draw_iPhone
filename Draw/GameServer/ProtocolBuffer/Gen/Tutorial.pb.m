// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Tutorial.pb.h"
// @@protoc_insertion_point(imports)

@implementation TutorialRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TutorialRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [BbsRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBTutorialLevelIsValidValue(PBTutorialLevel value) {
  switch (value) {
    case PBTutorialLevelTutorialLevelEntry:
    case PBTutorialLevelTutorialLevelEasy:
    case PBTutorialLevelTutorialLevelNormal:
    case PBTutorialLevelTutorialLevelHard:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTutorialLevel(PBTutorialLevel value) {
  switch (value) {
    case PBTutorialLevelTutorialLevelEntry:
      return @"PBTutorialLevelTutorialLevelEntry";
    case PBTutorialLevelTutorialLevelEasy:
      return @"PBTutorialLevelTutorialLevelEasy";
    case PBTutorialLevelTutorialLevelNormal:
      return @"PBTutorialLevelTutorialLevelNormal";
    case PBTutorialLevelTutorialLevelHard:
      return @"PBTutorialLevelTutorialLevelHard";
    default:
      return nil;
  }
}

BOOL PBTutorialTypeIsValidValue(PBTutorialType value) {
  switch (value) {
    case PBTutorialTypeTutorialTypeOther:
    case PBTutorialTypeTutorialTypeLearn:
    case PBTutorialTypeTutorialTypeRelaxCopy:
    case PBTutorialTypeTutorialTypeRelaxDraw:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTutorialType(PBTutorialType value) {
  switch (value) {
    case PBTutorialTypeTutorialTypeOther:
      return @"PBTutorialTypeTutorialTypeOther";
    case PBTutorialTypeTutorialTypeLearn:
      return @"PBTutorialTypeTutorialTypeLearn";
    case PBTutorialTypeTutorialTypeRelaxCopy:
      return @"PBTutorialTypeTutorialTypeRelaxCopy";
    case PBTutorialTypeTutorialTypeRelaxDraw:
      return @"PBTutorialTypeTutorialTypeRelaxDraw";
    default:
      return nil;
  }
}

BOOL PBTutorialDrawLevelIsValidValue(PBTutorialDrawLevel value) {
  switch (value) {
    case PBTutorialDrawLevelTutorialDrawLevel1:
    case PBTutorialDrawLevelTutorialDrawLevel2:
    case PBTutorialDrawLevelTutorialDrawLevel3:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTutorialDrawLevel(PBTutorialDrawLevel value) {
  switch (value) {
    case PBTutorialDrawLevelTutorialDrawLevel1:
      return @"PBTutorialDrawLevelTutorialDrawLevel1";
    case PBTutorialDrawLevelTutorialDrawLevel2:
      return @"PBTutorialDrawLevelTutorialDrawLevel2";
    case PBTutorialDrawLevelTutorialDrawLevel3:
      return @"PBTutorialDrawLevelTutorialDrawLevel3";
    default:
      return nil;
  }
}

BOOL PBTutorialCategoryIsValidValue(PBTutorialCategory value) {
  switch (value) {
    case PBTutorialCategoryTutorialCategoryNew:
    case PBTutorialCategoryTutorialCategoryMedium:
    case PBTutorialCategoryTutorialCategoryAdvance:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTutorialCategory(PBTutorialCategory value) {
  switch (value) {
    case PBTutorialCategoryTutorialCategoryNew:
      return @"PBTutorialCategoryTutorialCategoryNew";
    case PBTutorialCategoryTutorialCategoryMedium:
      return @"PBTutorialCategoryTutorialCategoryMedium";
    case PBTutorialCategoryTutorialCategoryAdvance:
      return @"PBTutorialCategoryTutorialCategoryAdvance";
    default:
      return nil;
  }
}

BOOL PBTutorialImageStyleIsValidValue(PBTutorialImageStyle value) {
  switch (value) {
    case PBTutorialImageStyleTutorialImageColor:
    case PBTutorialImageStyleTutorialImageBlackWhite:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBTutorialImageStyle(PBTutorialImageStyle value) {
  switch (value) {
    case PBTutorialImageStyleTutorialImageColor:
      return @"PBTutorialImageStyleTutorialImageColor";
    case PBTutorialImageStyleTutorialImageBlackWhite:
      return @"PBTutorialImageStyleTutorialImageBlackWhite";
    default:
      return nil;
  }
}

BOOL PBScoreEngineTypeIsValidValue(PBScoreEngineType value) {
  switch (value) {
    case PBScoreEngineTypeScoreEngineNormal:
    case PBScoreEngineTypeScoreEngineStickPicture:
    case PBScoreEngineTypeScoreEngineFillColor:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBScoreEngineType(PBScoreEngineType value) {
  switch (value) {
    case PBScoreEngineTypeScoreEngineNormal:
      return @"PBScoreEngineTypeScoreEngineNormal";
    case PBScoreEngineTypeScoreEngineStickPicture:
      return @"PBScoreEngineTypeScoreEngineStickPicture";
    case PBScoreEngineTypeScoreEngineFillColor:
      return @"PBScoreEngineTypeScoreEngineFillColor";
    default:
      return nil;
  }
}

BOOL PBUserTutorialStatusIsValidValue(PBUserTutorialStatus value) {
  switch (value) {
    case PBUserTutorialStatusUtStatusNotStart:
    case PBUserTutorialStatusUtStatusStart:
    case PBUserTutorialStatusUtStatusComplete:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBUserTutorialStatus(PBUserTutorialStatus value) {
  switch (value) {
    case PBUserTutorialStatusUtStatusNotStart:
      return @"PBUserTutorialStatusUtStatusNotStart";
    case PBUserTutorialStatusUtStatusStart:
      return @"PBUserTutorialStatusUtStatusStart";
    case PBUserTutorialStatusUtStatusComplete:
      return @"PBUserTutorialStatusUtStatusComplete";
    default:
      return nil;
  }
}

@interface PBTip ()
@property SInt32 index;
@property (strong) NSString* cnName;
@property (strong) NSString* enName;
@property (strong) NSString* tcnName;
@property (strong) NSString* cnDesc;
@property (strong) NSString* enDesc;
@property (strong) NSString* tcnDesc;
@property (strong) NSString* image;
@property (strong) NSString* imageName;
@end

@implementation PBTip

- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) _value_ {
  hasIndex_ = !!_value_;
}
@synthesize index;
- (BOOL) hasCnName {
  return !!hasCnName_;
}
- (void) setHasCnName:(BOOL) _value_ {
  hasCnName_ = !!_value_;
}
@synthesize cnName;
- (BOOL) hasEnName {
  return !!hasEnName_;
}
- (void) setHasEnName:(BOOL) _value_ {
  hasEnName_ = !!_value_;
}
@synthesize enName;
- (BOOL) hasTcnName {
  return !!hasTcnName_;
}
- (void) setHasTcnName:(BOOL) _value_ {
  hasTcnName_ = !!_value_;
}
@synthesize tcnName;
- (BOOL) hasCnDesc {
  return !!hasCnDesc_;
}
- (void) setHasCnDesc:(BOOL) _value_ {
  hasCnDesc_ = !!_value_;
}
@synthesize cnDesc;
- (BOOL) hasEnDesc {
  return !!hasEnDesc_;
}
- (void) setHasEnDesc:(BOOL) _value_ {
  hasEnDesc_ = !!_value_;
}
@synthesize enDesc;
- (BOOL) hasTcnDesc {
  return !!hasTcnDesc_;
}
- (void) setHasTcnDesc:(BOOL) _value_ {
  hasTcnDesc_ = !!_value_;
}
@synthesize tcnDesc;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasImageName {
  return !!hasImageName_;
}
- (void) setHasImageName:(BOOL) _value_ {
  hasImageName_ = !!_value_;
}
@synthesize imageName;
- (instancetype) init {
  if ((self = [super init])) {
    self.index = 0;
    self.cnName = @"";
    self.enName = @"";
    self.tcnName = @"";
    self.cnDesc = @"";
    self.enDesc = @"";
    self.tcnDesc = @"";
    self.image = @"";
    self.imageName = @"";
  }
  return self;
}
static PBTip* defaultPBTipInstance = nil;
+ (void) initialize {
  if (self == [PBTip class]) {
    defaultPBTipInstance = [[PBTip alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBTipInstance;
}
- (instancetype) defaultInstance {
  return defaultPBTipInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIndex) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIndex) {
    [output writeInt32:1 value:self.index];
  }
  if (self.hasCnName) {
    [output writeString:2 value:self.cnName];
  }
  if (self.hasEnName) {
    [output writeString:3 value:self.enName];
  }
  if (self.hasTcnName) {
    [output writeString:4 value:self.tcnName];
  }
  if (self.hasCnDesc) {
    [output writeString:10 value:self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output writeString:11 value:self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output writeString:12 value:self.tcnDesc];
  }
  if (self.hasImage) {
    [output writeString:21 value:self.image];
  }
  if (self.hasImageName) {
    [output writeString:31 value:self.imageName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIndex) {
    size_ += computeInt32Size(1, self.index);
  }
  if (self.hasCnName) {
    size_ += computeStringSize(2, self.cnName);
  }
  if (self.hasEnName) {
    size_ += computeStringSize(3, self.enName);
  }
  if (self.hasTcnName) {
    size_ += computeStringSize(4, self.tcnName);
  }
  if (self.hasCnDesc) {
    size_ += computeStringSize(10, self.cnDesc);
  }
  if (self.hasEnDesc) {
    size_ += computeStringSize(11, self.enDesc);
  }
  if (self.hasTcnDesc) {
    size_ += computeStringSize(12, self.tcnDesc);
  }
  if (self.hasImage) {
    size_ += computeStringSize(21, self.image);
  }
  if (self.hasImageName) {
    size_ += computeStringSize(31, self.imageName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBTip*) parseFromData:(NSData*) data {
  return (PBTip*)[[[PBTip builder] mergeFromData:data] build];
}
+ (PBTip*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTip*)[[[PBTip builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBTip*) parseFromInputStream:(NSInputStream*) input {
  return (PBTip*)[[[PBTip builder] mergeFromInputStream:input] build];
}
+ (PBTip*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTip*)[[[PBTip builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTip*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBTip*)[[[PBTip builder] mergeFromCodedInputStream:input] build];
}
+ (PBTip*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTip*)[[[PBTip builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTipBuilder*) builder {
  return [[PBTipBuilder alloc] init];
}
+ (PBTipBuilder*) builderWithPrototype:(PBTip*) prototype {
  return [[PBTip builder] mergeFrom:prototype];
}
- (PBTipBuilder*) builder {
  return [PBTip builder];
}
- (PBTipBuilder*) toBuilder {
  return [PBTip builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"index", [NSNumber numberWithInteger:self.index]];
  }
  if (self.hasCnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnName", self.cnName];
  }
  if (self.hasEnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enName", self.enName];
  }
  if (self.hasTcnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnName", self.tcnName];
  }
  if (self.hasCnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnDesc", self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enDesc", self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnDesc", self.tcnDesc];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageName", self.imageName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBTip class]]) {
    return NO;
  }
  PBTip *otherMessage = other;
  return
      self.hasIndex == otherMessage.hasIndex &&
      (!self.hasIndex || self.index == otherMessage.index) &&
      self.hasCnName == otherMessage.hasCnName &&
      (!self.hasCnName || [self.cnName isEqual:otherMessage.cnName]) &&
      self.hasEnName == otherMessage.hasEnName &&
      (!self.hasEnName || [self.enName isEqual:otherMessage.enName]) &&
      self.hasTcnName == otherMessage.hasTcnName &&
      (!self.hasTcnName || [self.tcnName isEqual:otherMessage.tcnName]) &&
      self.hasCnDesc == otherMessage.hasCnDesc &&
      (!self.hasCnDesc || [self.cnDesc isEqual:otherMessage.cnDesc]) &&
      self.hasEnDesc == otherMessage.hasEnDesc &&
      (!self.hasEnDesc || [self.enDesc isEqual:otherMessage.enDesc]) &&
      self.hasTcnDesc == otherMessage.hasTcnDesc &&
      (!self.hasTcnDesc || [self.tcnDesc isEqual:otherMessage.tcnDesc]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasImageName == otherMessage.hasImageName &&
      (!self.hasImageName || [self.imageName isEqual:otherMessage.imageName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.index] hash];
  }
  if (self.hasCnName) {
    hashCode = hashCode * 31 + [self.cnName hash];
  }
  if (self.hasEnName) {
    hashCode = hashCode * 31 + [self.enName hash];
  }
  if (self.hasTcnName) {
    hashCode = hashCode * 31 + [self.tcnName hash];
  }
  if (self.hasCnDesc) {
    hashCode = hashCode * 31 + [self.cnDesc hash];
  }
  if (self.hasEnDesc) {
    hashCode = hashCode * 31 + [self.enDesc hash];
  }
  if (self.hasTcnDesc) {
    hashCode = hashCode * 31 + [self.tcnDesc hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasImageName) {
    hashCode = hashCode * 31 + [self.imageName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBTipBuilder()
@property (strong) PBTip* resultPbtip;
@end

@implementation PBTipBuilder
@synthesize resultPbtip;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbtip = [[PBTip alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbtip;
}
- (PBTipBuilder*) clear {
  self.resultPbtip = [[PBTip alloc] init];
  return self;
}
- (PBTipBuilder*) clone {
  return [PBTip builderWithPrototype:resultPbtip];
}
- (PBTip*) defaultInstance {
  return [PBTip defaultInstance];
}
- (PBTip*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBTip*) buildPartial {
  PBTip* returnMe = resultPbtip;
  self.resultPbtip = nil;
  return returnMe;
}
- (PBTipBuilder*) mergeFrom:(PBTip*) other {
  if (other == [PBTip defaultInstance]) {
    return self;
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  if (other.hasCnName) {
    [self setCnName:other.cnName];
  }
  if (other.hasEnName) {
    [self setEnName:other.enName];
  }
  if (other.hasTcnName) {
    [self setTcnName:other.tcnName];
  }
  if (other.hasCnDesc) {
    [self setCnDesc:other.cnDesc];
  }
  if (other.hasEnDesc) {
    [self setEnDesc:other.enDesc];
  }
  if (other.hasTcnDesc) {
    [self setTcnDesc:other.tcnDesc];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasImageName) {
    [self setImageName:other.imageName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBTipBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBTipBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIndex:[input readInt32]];
        break;
      }
      case 18: {
        [self setCnName:[input readString]];
        break;
      }
      case 26: {
        [self setEnName:[input readString]];
        break;
      }
      case 34: {
        [self setTcnName:[input readString]];
        break;
      }
      case 82: {
        [self setCnDesc:[input readString]];
        break;
      }
      case 90: {
        [self setEnDesc:[input readString]];
        break;
      }
      case 98: {
        [self setTcnDesc:[input readString]];
        break;
      }
      case 170: {
        [self setImage:[input readString]];
        break;
      }
      case 250: {
        [self setImageName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIndex {
  return resultPbtip.hasIndex;
}
- (SInt32) index {
  return resultPbtip.index;
}
- (PBTipBuilder*) setIndex:(SInt32) value {
  resultPbtip.hasIndex = YES;
  resultPbtip.index = value;
  return self;
}
- (PBTipBuilder*) clearIndex {
  resultPbtip.hasIndex = NO;
  resultPbtip.index = 0;
  return self;
}
- (BOOL) hasCnName {
  return resultPbtip.hasCnName;
}
- (NSString*) cnName {
  return resultPbtip.cnName;
}
- (PBTipBuilder*) setCnName:(NSString*) value {
  resultPbtip.hasCnName = YES;
  resultPbtip.cnName = value;
  return self;
}
- (PBTipBuilder*) clearCnName {
  resultPbtip.hasCnName = NO;
  resultPbtip.cnName = @"";
  return self;
}
- (BOOL) hasEnName {
  return resultPbtip.hasEnName;
}
- (NSString*) enName {
  return resultPbtip.enName;
}
- (PBTipBuilder*) setEnName:(NSString*) value {
  resultPbtip.hasEnName = YES;
  resultPbtip.enName = value;
  return self;
}
- (PBTipBuilder*) clearEnName {
  resultPbtip.hasEnName = NO;
  resultPbtip.enName = @"";
  return self;
}
- (BOOL) hasTcnName {
  return resultPbtip.hasTcnName;
}
- (NSString*) tcnName {
  return resultPbtip.tcnName;
}
- (PBTipBuilder*) setTcnName:(NSString*) value {
  resultPbtip.hasTcnName = YES;
  resultPbtip.tcnName = value;
  return self;
}
- (PBTipBuilder*) clearTcnName {
  resultPbtip.hasTcnName = NO;
  resultPbtip.tcnName = @"";
  return self;
}
- (BOOL) hasCnDesc {
  return resultPbtip.hasCnDesc;
}
- (NSString*) cnDesc {
  return resultPbtip.cnDesc;
}
- (PBTipBuilder*) setCnDesc:(NSString*) value {
  resultPbtip.hasCnDesc = YES;
  resultPbtip.cnDesc = value;
  return self;
}
- (PBTipBuilder*) clearCnDesc {
  resultPbtip.hasCnDesc = NO;
  resultPbtip.cnDesc = @"";
  return self;
}
- (BOOL) hasEnDesc {
  return resultPbtip.hasEnDesc;
}
- (NSString*) enDesc {
  return resultPbtip.enDesc;
}
- (PBTipBuilder*) setEnDesc:(NSString*) value {
  resultPbtip.hasEnDesc = YES;
  resultPbtip.enDesc = value;
  return self;
}
- (PBTipBuilder*) clearEnDesc {
  resultPbtip.hasEnDesc = NO;
  resultPbtip.enDesc = @"";
  return self;
}
- (BOOL) hasTcnDesc {
  return resultPbtip.hasTcnDesc;
}
- (NSString*) tcnDesc {
  return resultPbtip.tcnDesc;
}
- (PBTipBuilder*) setTcnDesc:(NSString*) value {
  resultPbtip.hasTcnDesc = YES;
  resultPbtip.tcnDesc = value;
  return self;
}
- (PBTipBuilder*) clearTcnDesc {
  resultPbtip.hasTcnDesc = NO;
  resultPbtip.tcnDesc = @"";
  return self;
}
- (BOOL) hasImage {
  return resultPbtip.hasImage;
}
- (NSString*) image {
  return resultPbtip.image;
}
- (PBTipBuilder*) setImage:(NSString*) value {
  resultPbtip.hasImage = YES;
  resultPbtip.image = value;
  return self;
}
- (PBTipBuilder*) clearImage {
  resultPbtip.hasImage = NO;
  resultPbtip.image = @"";
  return self;
}
- (BOOL) hasImageName {
  return resultPbtip.hasImageName;
}
- (NSString*) imageName {
  return resultPbtip.imageName;
}
- (PBTipBuilder*) setImageName:(NSString*) value {
  resultPbtip.hasImageName = YES;
  resultPbtip.imageName = value;
  return self;
}
- (PBTipBuilder*) clearImageName {
  resultPbtip.hasImageName = NO;
  resultPbtip.imageName = @"";
  return self;
}
@end

@interface PBChapter ()
@property SInt32 index;
@property (strong) NSString* cnName;
@property (strong) NSString* enName;
@property (strong) NSString* tcnName;
@property (strong) NSString* cnDesc;
@property (strong) NSString* enDesc;
@property (strong) NSString* tcnDesc;
@property (strong) NSString* opusId;
@property (strong) NSString* opusData;
@property (strong) NSString* image;
@property (strong) NSString* background;
@property (strong) NSString* opusName;
@property (strong) NSString* imageName;
@property (strong) NSString* backgroundName;
@property (strong) NSMutableArray * tipsArray;
@property SInt32 startIndex;
@property SInt32 endIndex;
@end

@implementation PBChapter

- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) _value_ {
  hasIndex_ = !!_value_;
}
@synthesize index;
- (BOOL) hasCnName {
  return !!hasCnName_;
}
- (void) setHasCnName:(BOOL) _value_ {
  hasCnName_ = !!_value_;
}
@synthesize cnName;
- (BOOL) hasEnName {
  return !!hasEnName_;
}
- (void) setHasEnName:(BOOL) _value_ {
  hasEnName_ = !!_value_;
}
@synthesize enName;
- (BOOL) hasTcnName {
  return !!hasTcnName_;
}
- (void) setHasTcnName:(BOOL) _value_ {
  hasTcnName_ = !!_value_;
}
@synthesize tcnName;
- (BOOL) hasCnDesc {
  return !!hasCnDesc_;
}
- (void) setHasCnDesc:(BOOL) _value_ {
  hasCnDesc_ = !!_value_;
}
@synthesize cnDesc;
- (BOOL) hasEnDesc {
  return !!hasEnDesc_;
}
- (void) setHasEnDesc:(BOOL) _value_ {
  hasEnDesc_ = !!_value_;
}
@synthesize enDesc;
- (BOOL) hasTcnDesc {
  return !!hasTcnDesc_;
}
- (void) setHasTcnDesc:(BOOL) _value_ {
  hasTcnDesc_ = !!_value_;
}
@synthesize tcnDesc;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasOpusData {
  return !!hasOpusData_;
}
- (void) setHasOpusData:(BOOL) _value_ {
  hasOpusData_ = !!_value_;
}
@synthesize opusData;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasBackground {
  return !!hasBackground_;
}
- (void) setHasBackground:(BOOL) _value_ {
  hasBackground_ = !!_value_;
}
@synthesize background;
- (BOOL) hasOpusName {
  return !!hasOpusName_;
}
- (void) setHasOpusName:(BOOL) _value_ {
  hasOpusName_ = !!_value_;
}
@synthesize opusName;
- (BOOL) hasImageName {
  return !!hasImageName_;
}
- (void) setHasImageName:(BOOL) _value_ {
  hasImageName_ = !!_value_;
}
@synthesize imageName;
- (BOOL) hasBackgroundName {
  return !!hasBackgroundName_;
}
- (void) setHasBackgroundName:(BOOL) _value_ {
  hasBackgroundName_ = !!_value_;
}
@synthesize backgroundName;
@synthesize tipsArray;
@dynamic tips;
- (BOOL) hasStartIndex {
  return !!hasStartIndex_;
}
- (void) setHasStartIndex:(BOOL) _value_ {
  hasStartIndex_ = !!_value_;
}
@synthesize startIndex;
- (BOOL) hasEndIndex {
  return !!hasEndIndex_;
}
- (void) setHasEndIndex:(BOOL) _value_ {
  hasEndIndex_ = !!_value_;
}
@synthesize endIndex;
- (instancetype) init {
  if ((self = [super init])) {
    self.index = 0;
    self.cnName = @"";
    self.enName = @"";
    self.tcnName = @"";
    self.cnDesc = @"";
    self.enDesc = @"";
    self.tcnDesc = @"";
    self.opusId = @"";
    self.opusData = @"";
    self.image = @"";
    self.background = @"";
    self.opusName = @"";
    self.imageName = @"";
    self.backgroundName = @"";
    self.startIndex = 0;
    self.endIndex = 0;
  }
  return self;
}
static PBChapter* defaultPBChapterInstance = nil;
+ (void) initialize {
  if (self == [PBChapter class]) {
    defaultPBChapterInstance = [[PBChapter alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBChapterInstance;
}
- (instancetype) defaultInstance {
  return defaultPBChapterInstance;
}
- (NSArray *)tips {
  return tipsArray;
}
- (PBTip*)tipsAtIndex:(NSUInteger)index {
  return [tipsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasIndex) {
    return NO;
  }
  __block BOOL isInittips = YES;
   [self.tips enumerateObjectsUsingBlock:^(PBTip *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittips = NO;
      *stop = YES;
    }
  }];
  if (!isInittips) return isInittips;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIndex) {
    [output writeInt32:1 value:self.index];
  }
  if (self.hasCnName) {
    [output writeString:2 value:self.cnName];
  }
  if (self.hasEnName) {
    [output writeString:3 value:self.enName];
  }
  if (self.hasTcnName) {
    [output writeString:4 value:self.tcnName];
  }
  if (self.hasCnDesc) {
    [output writeString:10 value:self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output writeString:11 value:self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output writeString:12 value:self.tcnDesc];
  }
  if (self.hasOpusId) {
    [output writeString:20 value:self.opusId];
  }
  if (self.hasOpusData) {
    [output writeString:21 value:self.opusData];
  }
  if (self.hasImage) {
    [output writeString:22 value:self.image];
  }
  if (self.hasBackground) {
    [output writeString:23 value:self.background];
  }
  if (self.hasOpusName) {
    [output writeString:30 value:self.opusName];
  }
  if (self.hasImageName) {
    [output writeString:31 value:self.imageName];
  }
  if (self.hasBackgroundName) {
    [output writeString:32 value:self.backgroundName];
  }
  [self.tipsArray enumerateObjectsUsingBlock:^(PBTip *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:33 value:element];
  }];
  if (self.hasStartIndex) {
    [output writeInt32:50 value:self.startIndex];
  }
  if (self.hasEndIndex) {
    [output writeInt32:51 value:self.endIndex];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIndex) {
    size_ += computeInt32Size(1, self.index);
  }
  if (self.hasCnName) {
    size_ += computeStringSize(2, self.cnName);
  }
  if (self.hasEnName) {
    size_ += computeStringSize(3, self.enName);
  }
  if (self.hasTcnName) {
    size_ += computeStringSize(4, self.tcnName);
  }
  if (self.hasCnDesc) {
    size_ += computeStringSize(10, self.cnDesc);
  }
  if (self.hasEnDesc) {
    size_ += computeStringSize(11, self.enDesc);
  }
  if (self.hasTcnDesc) {
    size_ += computeStringSize(12, self.tcnDesc);
  }
  if (self.hasOpusId) {
    size_ += computeStringSize(20, self.opusId);
  }
  if (self.hasOpusData) {
    size_ += computeStringSize(21, self.opusData);
  }
  if (self.hasImage) {
    size_ += computeStringSize(22, self.image);
  }
  if (self.hasBackground) {
    size_ += computeStringSize(23, self.background);
  }
  if (self.hasOpusName) {
    size_ += computeStringSize(30, self.opusName);
  }
  if (self.hasImageName) {
    size_ += computeStringSize(31, self.imageName);
  }
  if (self.hasBackgroundName) {
    size_ += computeStringSize(32, self.backgroundName);
  }
  [self.tipsArray enumerateObjectsUsingBlock:^(PBTip *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(33, element);
  }];
  if (self.hasStartIndex) {
    size_ += computeInt32Size(50, self.startIndex);
  }
  if (self.hasEndIndex) {
    size_ += computeInt32Size(51, self.endIndex);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBChapter*) parseFromData:(NSData*) data {
  return (PBChapter*)[[[PBChapter builder] mergeFromData:data] build];
}
+ (PBChapter*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBChapter*)[[[PBChapter builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBChapter*) parseFromInputStream:(NSInputStream*) input {
  return (PBChapter*)[[[PBChapter builder] mergeFromInputStream:input] build];
}
+ (PBChapter*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBChapter*)[[[PBChapter builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBChapter*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBChapter*)[[[PBChapter builder] mergeFromCodedInputStream:input] build];
}
+ (PBChapter*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBChapter*)[[[PBChapter builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBChapterBuilder*) builder {
  return [[PBChapterBuilder alloc] init];
}
+ (PBChapterBuilder*) builderWithPrototype:(PBChapter*) prototype {
  return [[PBChapter builder] mergeFrom:prototype];
}
- (PBChapterBuilder*) builder {
  return [PBChapter builder];
}
- (PBChapterBuilder*) toBuilder {
  return [PBChapter builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"index", [NSNumber numberWithInteger:self.index]];
  }
  if (self.hasCnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnName", self.cnName];
  }
  if (self.hasEnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enName", self.enName];
  }
  if (self.hasTcnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnName", self.tcnName];
  }
  if (self.hasCnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnDesc", self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enDesc", self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnDesc", self.tcnDesc];
  }
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasOpusData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusData", self.opusData];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasBackground) {
    [output appendFormat:@"%@%@: %@\n", indent, @"background", self.background];
  }
  if (self.hasOpusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusName", self.opusName];
  }
  if (self.hasImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageName", self.imageName];
  }
  if (self.hasBackgroundName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundName", self.backgroundName];
  }
  [self.tipsArray enumerateObjectsUsingBlock:^(PBTip *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tips"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasStartIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startIndex", [NSNumber numberWithInteger:self.startIndex]];
  }
  if (self.hasEndIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endIndex", [NSNumber numberWithInteger:self.endIndex]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBChapter class]]) {
    return NO;
  }
  PBChapter *otherMessage = other;
  return
      self.hasIndex == otherMessage.hasIndex &&
      (!self.hasIndex || self.index == otherMessage.index) &&
      self.hasCnName == otherMessage.hasCnName &&
      (!self.hasCnName || [self.cnName isEqual:otherMessage.cnName]) &&
      self.hasEnName == otherMessage.hasEnName &&
      (!self.hasEnName || [self.enName isEqual:otherMessage.enName]) &&
      self.hasTcnName == otherMessage.hasTcnName &&
      (!self.hasTcnName || [self.tcnName isEqual:otherMessage.tcnName]) &&
      self.hasCnDesc == otherMessage.hasCnDesc &&
      (!self.hasCnDesc || [self.cnDesc isEqual:otherMessage.cnDesc]) &&
      self.hasEnDesc == otherMessage.hasEnDesc &&
      (!self.hasEnDesc || [self.enDesc isEqual:otherMessage.enDesc]) &&
      self.hasTcnDesc == otherMessage.hasTcnDesc &&
      (!self.hasTcnDesc || [self.tcnDesc isEqual:otherMessage.tcnDesc]) &&
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasOpusData == otherMessage.hasOpusData &&
      (!self.hasOpusData || [self.opusData isEqual:otherMessage.opusData]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasBackground == otherMessage.hasBackground &&
      (!self.hasBackground || [self.background isEqual:otherMessage.background]) &&
      self.hasOpusName == otherMessage.hasOpusName &&
      (!self.hasOpusName || [self.opusName isEqual:otherMessage.opusName]) &&
      self.hasImageName == otherMessage.hasImageName &&
      (!self.hasImageName || [self.imageName isEqual:otherMessage.imageName]) &&
      self.hasBackgroundName == otherMessage.hasBackgroundName &&
      (!self.hasBackgroundName || [self.backgroundName isEqual:otherMessage.backgroundName]) &&
      [self.tipsArray isEqualToArray:otherMessage.tipsArray] &&
      self.hasStartIndex == otherMessage.hasStartIndex &&
      (!self.hasStartIndex || self.startIndex == otherMessage.startIndex) &&
      self.hasEndIndex == otherMessage.hasEndIndex &&
      (!self.hasEndIndex || self.endIndex == otherMessage.endIndex) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.index] hash];
  }
  if (self.hasCnName) {
    hashCode = hashCode * 31 + [self.cnName hash];
  }
  if (self.hasEnName) {
    hashCode = hashCode * 31 + [self.enName hash];
  }
  if (self.hasTcnName) {
    hashCode = hashCode * 31 + [self.tcnName hash];
  }
  if (self.hasCnDesc) {
    hashCode = hashCode * 31 + [self.cnDesc hash];
  }
  if (self.hasEnDesc) {
    hashCode = hashCode * 31 + [self.enDesc hash];
  }
  if (self.hasTcnDesc) {
    hashCode = hashCode * 31 + [self.tcnDesc hash];
  }
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasOpusData) {
    hashCode = hashCode * 31 + [self.opusData hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasBackground) {
    hashCode = hashCode * 31 + [self.background hash];
  }
  if (self.hasOpusName) {
    hashCode = hashCode * 31 + [self.opusName hash];
  }
  if (self.hasImageName) {
    hashCode = hashCode * 31 + [self.imageName hash];
  }
  if (self.hasBackgroundName) {
    hashCode = hashCode * 31 + [self.backgroundName hash];
  }
  [self.tipsArray enumerateObjectsUsingBlock:^(PBTip *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStartIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startIndex] hash];
  }
  if (self.hasEndIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.endIndex] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBChapterBuilder()
@property (strong) PBChapter* resultPbchapter;
@end

@implementation PBChapterBuilder
@synthesize resultPbchapter;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbchapter = [[PBChapter alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbchapter;
}
- (PBChapterBuilder*) clear {
  self.resultPbchapter = [[PBChapter alloc] init];
  return self;
}
- (PBChapterBuilder*) clone {
  return [PBChapter builderWithPrototype:resultPbchapter];
}
- (PBChapter*) defaultInstance {
  return [PBChapter defaultInstance];
}
- (PBChapter*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBChapter*) buildPartial {
  PBChapter* returnMe = resultPbchapter;
  self.resultPbchapter = nil;
  return returnMe;
}
- (PBChapterBuilder*) mergeFrom:(PBChapter*) other {
  if (other == [PBChapter defaultInstance]) {
    return self;
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  if (other.hasCnName) {
    [self setCnName:other.cnName];
  }
  if (other.hasEnName) {
    [self setEnName:other.enName];
  }
  if (other.hasTcnName) {
    [self setTcnName:other.tcnName];
  }
  if (other.hasCnDesc) {
    [self setCnDesc:other.cnDesc];
  }
  if (other.hasEnDesc) {
    [self setEnDesc:other.enDesc];
  }
  if (other.hasTcnDesc) {
    [self setTcnDesc:other.tcnDesc];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasOpusData) {
    [self setOpusData:other.opusData];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasBackground) {
    [self setBackground:other.background];
  }
  if (other.hasOpusName) {
    [self setOpusName:other.opusName];
  }
  if (other.hasImageName) {
    [self setImageName:other.imageName];
  }
  if (other.hasBackgroundName) {
    [self setBackgroundName:other.backgroundName];
  }
  if (other.tipsArray.count > 0) {
    if (resultPbchapter.tipsArray == nil) {
      resultPbchapter.tipsArray = [[NSMutableArray alloc] initWithArray:other.tipsArray];
    } else {
      [resultPbchapter.tipsArray addObjectsFromArray:other.tipsArray];
    }
  }
  if (other.hasStartIndex) {
    [self setStartIndex:other.startIndex];
  }
  if (other.hasEndIndex) {
    [self setEndIndex:other.endIndex];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBChapterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBChapterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIndex:[input readInt32]];
        break;
      }
      case 18: {
        [self setCnName:[input readString]];
        break;
      }
      case 26: {
        [self setEnName:[input readString]];
        break;
      }
      case 34: {
        [self setTcnName:[input readString]];
        break;
      }
      case 82: {
        [self setCnDesc:[input readString]];
        break;
      }
      case 90: {
        [self setEnDesc:[input readString]];
        break;
      }
      case 98: {
        [self setTcnDesc:[input readString]];
        break;
      }
      case 162: {
        [self setOpusId:[input readString]];
        break;
      }
      case 170: {
        [self setOpusData:[input readString]];
        break;
      }
      case 178: {
        [self setImage:[input readString]];
        break;
      }
      case 186: {
        [self setBackground:[input readString]];
        break;
      }
      case 242: {
        [self setOpusName:[input readString]];
        break;
      }
      case 250: {
        [self setImageName:[input readString]];
        break;
      }
      case 258: {
        [self setBackgroundName:[input readString]];
        break;
      }
      case 266: {
        PBTipBuilder* subBuilder = [PBTip builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTips:[subBuilder buildPartial]];
        break;
      }
      case 400: {
        [self setStartIndex:[input readInt32]];
        break;
      }
      case 408: {
        [self setEndIndex:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasIndex {
  return resultPbchapter.hasIndex;
}
- (SInt32) index {
  return resultPbchapter.index;
}
- (PBChapterBuilder*) setIndex:(SInt32) value {
  resultPbchapter.hasIndex = YES;
  resultPbchapter.index = value;
  return self;
}
- (PBChapterBuilder*) clearIndex {
  resultPbchapter.hasIndex = NO;
  resultPbchapter.index = 0;
  return self;
}
- (BOOL) hasCnName {
  return resultPbchapter.hasCnName;
}
- (NSString*) cnName {
  return resultPbchapter.cnName;
}
- (PBChapterBuilder*) setCnName:(NSString*) value {
  resultPbchapter.hasCnName = YES;
  resultPbchapter.cnName = value;
  return self;
}
- (PBChapterBuilder*) clearCnName {
  resultPbchapter.hasCnName = NO;
  resultPbchapter.cnName = @"";
  return self;
}
- (BOOL) hasEnName {
  return resultPbchapter.hasEnName;
}
- (NSString*) enName {
  return resultPbchapter.enName;
}
- (PBChapterBuilder*) setEnName:(NSString*) value {
  resultPbchapter.hasEnName = YES;
  resultPbchapter.enName = value;
  return self;
}
- (PBChapterBuilder*) clearEnName {
  resultPbchapter.hasEnName = NO;
  resultPbchapter.enName = @"";
  return self;
}
- (BOOL) hasTcnName {
  return resultPbchapter.hasTcnName;
}
- (NSString*) tcnName {
  return resultPbchapter.tcnName;
}
- (PBChapterBuilder*) setTcnName:(NSString*) value {
  resultPbchapter.hasTcnName = YES;
  resultPbchapter.tcnName = value;
  return self;
}
- (PBChapterBuilder*) clearTcnName {
  resultPbchapter.hasTcnName = NO;
  resultPbchapter.tcnName = @"";
  return self;
}
- (BOOL) hasCnDesc {
  return resultPbchapter.hasCnDesc;
}
- (NSString*) cnDesc {
  return resultPbchapter.cnDesc;
}
- (PBChapterBuilder*) setCnDesc:(NSString*) value {
  resultPbchapter.hasCnDesc = YES;
  resultPbchapter.cnDesc = value;
  return self;
}
- (PBChapterBuilder*) clearCnDesc {
  resultPbchapter.hasCnDesc = NO;
  resultPbchapter.cnDesc = @"";
  return self;
}
- (BOOL) hasEnDesc {
  return resultPbchapter.hasEnDesc;
}
- (NSString*) enDesc {
  return resultPbchapter.enDesc;
}
- (PBChapterBuilder*) setEnDesc:(NSString*) value {
  resultPbchapter.hasEnDesc = YES;
  resultPbchapter.enDesc = value;
  return self;
}
- (PBChapterBuilder*) clearEnDesc {
  resultPbchapter.hasEnDesc = NO;
  resultPbchapter.enDesc = @"";
  return self;
}
- (BOOL) hasTcnDesc {
  return resultPbchapter.hasTcnDesc;
}
- (NSString*) tcnDesc {
  return resultPbchapter.tcnDesc;
}
- (PBChapterBuilder*) setTcnDesc:(NSString*) value {
  resultPbchapter.hasTcnDesc = YES;
  resultPbchapter.tcnDesc = value;
  return self;
}
- (PBChapterBuilder*) clearTcnDesc {
  resultPbchapter.hasTcnDesc = NO;
  resultPbchapter.tcnDesc = @"";
  return self;
}
- (BOOL) hasOpusId {
  return resultPbchapter.hasOpusId;
}
- (NSString*) opusId {
  return resultPbchapter.opusId;
}
- (PBChapterBuilder*) setOpusId:(NSString*) value {
  resultPbchapter.hasOpusId = YES;
  resultPbchapter.opusId = value;
  return self;
}
- (PBChapterBuilder*) clearOpusId {
  resultPbchapter.hasOpusId = NO;
  resultPbchapter.opusId = @"";
  return self;
}
- (BOOL) hasOpusData {
  return resultPbchapter.hasOpusData;
}
- (NSString*) opusData {
  return resultPbchapter.opusData;
}
- (PBChapterBuilder*) setOpusData:(NSString*) value {
  resultPbchapter.hasOpusData = YES;
  resultPbchapter.opusData = value;
  return self;
}
- (PBChapterBuilder*) clearOpusData {
  resultPbchapter.hasOpusData = NO;
  resultPbchapter.opusData = @"";
  return self;
}
- (BOOL) hasImage {
  return resultPbchapter.hasImage;
}
- (NSString*) image {
  return resultPbchapter.image;
}
- (PBChapterBuilder*) setImage:(NSString*) value {
  resultPbchapter.hasImage = YES;
  resultPbchapter.image = value;
  return self;
}
- (PBChapterBuilder*) clearImage {
  resultPbchapter.hasImage = NO;
  resultPbchapter.image = @"";
  return self;
}
- (BOOL) hasBackground {
  return resultPbchapter.hasBackground;
}
- (NSString*) background {
  return resultPbchapter.background;
}
- (PBChapterBuilder*) setBackground:(NSString*) value {
  resultPbchapter.hasBackground = YES;
  resultPbchapter.background = value;
  return self;
}
- (PBChapterBuilder*) clearBackground {
  resultPbchapter.hasBackground = NO;
  resultPbchapter.background = @"";
  return self;
}
- (BOOL) hasOpusName {
  return resultPbchapter.hasOpusName;
}
- (NSString*) opusName {
  return resultPbchapter.opusName;
}
- (PBChapterBuilder*) setOpusName:(NSString*) value {
  resultPbchapter.hasOpusName = YES;
  resultPbchapter.opusName = value;
  return self;
}
- (PBChapterBuilder*) clearOpusName {
  resultPbchapter.hasOpusName = NO;
  resultPbchapter.opusName = @"";
  return self;
}
- (BOOL) hasImageName {
  return resultPbchapter.hasImageName;
}
- (NSString*) imageName {
  return resultPbchapter.imageName;
}
- (PBChapterBuilder*) setImageName:(NSString*) value {
  resultPbchapter.hasImageName = YES;
  resultPbchapter.imageName = value;
  return self;
}
- (PBChapterBuilder*) clearImageName {
  resultPbchapter.hasImageName = NO;
  resultPbchapter.imageName = @"";
  return self;
}
- (BOOL) hasBackgroundName {
  return resultPbchapter.hasBackgroundName;
}
- (NSString*) backgroundName {
  return resultPbchapter.backgroundName;
}
- (PBChapterBuilder*) setBackgroundName:(NSString*) value {
  resultPbchapter.hasBackgroundName = YES;
  resultPbchapter.backgroundName = value;
  return self;
}
- (PBChapterBuilder*) clearBackgroundName {
  resultPbchapter.hasBackgroundName = NO;
  resultPbchapter.backgroundName = @"";
  return self;
}
- (NSMutableArray *)tips {
  return resultPbchapter.tipsArray;
}
- (PBTip*)tipsAtIndex:(NSUInteger)index {
  return [resultPbchapter tipsAtIndex:index];
}
- (PBChapterBuilder *)addTips:(PBTip*)value {
  if (resultPbchapter.tipsArray == nil) {
    resultPbchapter.tipsArray = [[NSMutableArray alloc]init];
  }
  [resultPbchapter.tipsArray addObject:value];
  return self;
}
- (PBChapterBuilder *)setTipsArray:(NSArray *)array {
  resultPbchapter.tipsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBChapterBuilder *)clearTips {
  resultPbchapter.tipsArray = nil;
  return self;
}
- (BOOL) hasStartIndex {
  return resultPbchapter.hasStartIndex;
}
- (SInt32) startIndex {
  return resultPbchapter.startIndex;
}
- (PBChapterBuilder*) setStartIndex:(SInt32) value {
  resultPbchapter.hasStartIndex = YES;
  resultPbchapter.startIndex = value;
  return self;
}
- (PBChapterBuilder*) clearStartIndex {
  resultPbchapter.hasStartIndex = NO;
  resultPbchapter.startIndex = 0;
  return self;
}
- (BOOL) hasEndIndex {
  return resultPbchapter.hasEndIndex;
}
- (SInt32) endIndex {
  return resultPbchapter.endIndex;
}
- (PBChapterBuilder*) setEndIndex:(SInt32) value {
  resultPbchapter.hasEndIndex = YES;
  resultPbchapter.endIndex = value;
  return self;
}
- (PBChapterBuilder*) clearEndIndex {
  resultPbchapter.hasEndIndex = NO;
  resultPbchapter.endIndex = 0;
  return self;
}
@end

@interface PBStage ()
@property (strong) NSString* stageId;
@property (strong) NSString* cnName;
@property (strong) NSString* enName;
@property (strong) NSString* tcnName;
@property (strong) NSString* cnDesc;
@property (strong) NSString* enDesc;
@property (strong) NSString* tcnDesc;
@property (strong) NSString* opusId;
@property (strong) NSString* image;
@property (strong) NSString* thumbImage;
@property (strong) NSString* opusData;
@property (strong) NSString* bgImage;
@property (strong) NSString* dataUrl;
@property (strong) NSString* imageName;
@property (strong) NSString* opusName;
@property (strong) NSString* bgImageName;
@property (strong) NSMutableArray * chapterArray;
@property SInt32 imageStyle;
@property SInt32 scoreEngine;
@property Float32 difficulty;
@property BOOL useBgFromPrev;
@property BOOL useBgForFill;
@end

@implementation PBStage

- (BOOL) hasStageId {
  return !!hasStageId_;
}
- (void) setHasStageId:(BOOL) _value_ {
  hasStageId_ = !!_value_;
}
@synthesize stageId;
- (BOOL) hasCnName {
  return !!hasCnName_;
}
- (void) setHasCnName:(BOOL) _value_ {
  hasCnName_ = !!_value_;
}
@synthesize cnName;
- (BOOL) hasEnName {
  return !!hasEnName_;
}
- (void) setHasEnName:(BOOL) _value_ {
  hasEnName_ = !!_value_;
}
@synthesize enName;
- (BOOL) hasTcnName {
  return !!hasTcnName_;
}
- (void) setHasTcnName:(BOOL) _value_ {
  hasTcnName_ = !!_value_;
}
@synthesize tcnName;
- (BOOL) hasCnDesc {
  return !!hasCnDesc_;
}
- (void) setHasCnDesc:(BOOL) _value_ {
  hasCnDesc_ = !!_value_;
}
@synthesize cnDesc;
- (BOOL) hasEnDesc {
  return !!hasEnDesc_;
}
- (void) setHasEnDesc:(BOOL) _value_ {
  hasEnDesc_ = !!_value_;
}
@synthesize enDesc;
- (BOOL) hasTcnDesc {
  return !!hasTcnDesc_;
}
- (void) setHasTcnDesc:(BOOL) _value_ {
  hasTcnDesc_ = !!_value_;
}
@synthesize tcnDesc;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasThumbImage {
  return !!hasThumbImage_;
}
- (void) setHasThumbImage:(BOOL) _value_ {
  hasThumbImage_ = !!_value_;
}
@synthesize thumbImage;
- (BOOL) hasOpusData {
  return !!hasOpusData_;
}
- (void) setHasOpusData:(BOOL) _value_ {
  hasOpusData_ = !!_value_;
}
@synthesize opusData;
- (BOOL) hasBgImage {
  return !!hasBgImage_;
}
- (void) setHasBgImage:(BOOL) _value_ {
  hasBgImage_ = !!_value_;
}
@synthesize bgImage;
- (BOOL) hasDataUrl {
  return !!hasDataUrl_;
}
- (void) setHasDataUrl:(BOOL) _value_ {
  hasDataUrl_ = !!_value_;
}
@synthesize dataUrl;
- (BOOL) hasImageName {
  return !!hasImageName_;
}
- (void) setHasImageName:(BOOL) _value_ {
  hasImageName_ = !!_value_;
}
@synthesize imageName;
- (BOOL) hasOpusName {
  return !!hasOpusName_;
}
- (void) setHasOpusName:(BOOL) _value_ {
  hasOpusName_ = !!_value_;
}
@synthesize opusName;
- (BOOL) hasBgImageName {
  return !!hasBgImageName_;
}
- (void) setHasBgImageName:(BOOL) _value_ {
  hasBgImageName_ = !!_value_;
}
@synthesize bgImageName;
@synthesize chapterArray;
@dynamic chapter;
- (BOOL) hasImageStyle {
  return !!hasImageStyle_;
}
- (void) setHasImageStyle:(BOOL) _value_ {
  hasImageStyle_ = !!_value_;
}
@synthesize imageStyle;
- (BOOL) hasScoreEngine {
  return !!hasScoreEngine_;
}
- (void) setHasScoreEngine:(BOOL) _value_ {
  hasScoreEngine_ = !!_value_;
}
@synthesize scoreEngine;
- (BOOL) hasDifficulty {
  return !!hasDifficulty_;
}
- (void) setHasDifficulty:(BOOL) _value_ {
  hasDifficulty_ = !!_value_;
}
@synthesize difficulty;
- (BOOL) hasUseBgFromPrev {
  return !!hasUseBgFromPrev_;
}
- (void) setHasUseBgFromPrev:(BOOL) _value_ {
  hasUseBgFromPrev_ = !!_value_;
}
- (BOOL) useBgFromPrev {
  return !!useBgFromPrev_;
}
- (void) setUseBgFromPrev:(BOOL) _value_ {
  useBgFromPrev_ = !!_value_;
}
- (BOOL) hasUseBgForFill {
  return !!hasUseBgForFill_;
}
- (void) setHasUseBgForFill:(BOOL) _value_ {
  hasUseBgForFill_ = !!_value_;
}
- (BOOL) useBgForFill {
  return !!useBgForFill_;
}
- (void) setUseBgForFill:(BOOL) _value_ {
  useBgForFill_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.stageId = @"";
    self.cnName = @"";
    self.enName = @"";
    self.tcnName = @"";
    self.cnDesc = @"";
    self.enDesc = @"";
    self.tcnDesc = @"";
    self.opusId = @"";
    self.image = @"";
    self.thumbImage = @"";
    self.opusData = @"";
    self.bgImage = @"";
    self.dataUrl = @"";
    self.imageName = @"";
    self.opusName = @"";
    self.bgImageName = @"";
    self.imageStyle = 0;
    self.scoreEngine = 0;
    self.difficulty = 1;
    self.useBgFromPrev = NO;
    self.useBgForFill = YES;
  }
  return self;
}
static PBStage* defaultPBStageInstance = nil;
+ (void) initialize {
  if (self == [PBStage class]) {
    defaultPBStageInstance = [[PBStage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBStageInstance;
}
- (instancetype) defaultInstance {
  return defaultPBStageInstance;
}
- (NSArray *)chapter {
  return chapterArray;
}
- (PBChapter*)chapterAtIndex:(NSUInteger)index {
  return [chapterArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasStageId) {
    return NO;
  }
  __block BOOL isInitchapter = YES;
   [self.chapter enumerateObjectsUsingBlock:^(PBChapter *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitchapter = NO;
      *stop = YES;
    }
  }];
  if (!isInitchapter) return isInitchapter;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStageId) {
    [output writeString:1 value:self.stageId];
  }
  if (self.hasCnName) {
    [output writeString:2 value:self.cnName];
  }
  if (self.hasEnName) {
    [output writeString:3 value:self.enName];
  }
  if (self.hasTcnName) {
    [output writeString:4 value:self.tcnName];
  }
  if (self.hasCnDesc) {
    [output writeString:10 value:self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output writeString:11 value:self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output writeString:12 value:self.tcnDesc];
  }
  if (self.hasOpusId) {
    [output writeString:19 value:self.opusId];
  }
  if (self.hasImage) {
    [output writeString:20 value:self.image];
  }
  if (self.hasThumbImage) {
    [output writeString:21 value:self.thumbImage];
  }
  if (self.hasOpusData) {
    [output writeString:22 value:self.opusData];
  }
  if (self.hasBgImage) {
    [output writeString:23 value:self.bgImage];
  }
  if (self.hasDataUrl) {
    [output writeString:30 value:self.dataUrl];
  }
  if (self.hasImageName) {
    [output writeString:31 value:self.imageName];
  }
  if (self.hasOpusName) {
    [output writeString:32 value:self.opusName];
  }
  if (self.hasBgImageName) {
    [output writeString:33 value:self.bgImageName];
  }
  [self.chapterArray enumerateObjectsUsingBlock:^(PBChapter *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:40 value:element];
  }];
  if (self.hasImageStyle) {
    [output writeInt32:50 value:self.imageStyle];
  }
  if (self.hasScoreEngine) {
    [output writeInt32:51 value:self.scoreEngine];
  }
  if (self.hasDifficulty) {
    [output writeFloat:52 value:self.difficulty];
  }
  if (self.hasUseBgFromPrev) {
    [output writeBool:60 value:self.useBgFromPrev];
  }
  if (self.hasUseBgForFill) {
    [output writeBool:61 value:self.useBgForFill];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStageId) {
    size_ += computeStringSize(1, self.stageId);
  }
  if (self.hasCnName) {
    size_ += computeStringSize(2, self.cnName);
  }
  if (self.hasEnName) {
    size_ += computeStringSize(3, self.enName);
  }
  if (self.hasTcnName) {
    size_ += computeStringSize(4, self.tcnName);
  }
  if (self.hasCnDesc) {
    size_ += computeStringSize(10, self.cnDesc);
  }
  if (self.hasEnDesc) {
    size_ += computeStringSize(11, self.enDesc);
  }
  if (self.hasTcnDesc) {
    size_ += computeStringSize(12, self.tcnDesc);
  }
  if (self.hasOpusId) {
    size_ += computeStringSize(19, self.opusId);
  }
  if (self.hasImage) {
    size_ += computeStringSize(20, self.image);
  }
  if (self.hasThumbImage) {
    size_ += computeStringSize(21, self.thumbImage);
  }
  if (self.hasOpusData) {
    size_ += computeStringSize(22, self.opusData);
  }
  if (self.hasBgImage) {
    size_ += computeStringSize(23, self.bgImage);
  }
  if (self.hasDataUrl) {
    size_ += computeStringSize(30, self.dataUrl);
  }
  if (self.hasImageName) {
    size_ += computeStringSize(31, self.imageName);
  }
  if (self.hasOpusName) {
    size_ += computeStringSize(32, self.opusName);
  }
  if (self.hasBgImageName) {
    size_ += computeStringSize(33, self.bgImageName);
  }
  [self.chapterArray enumerateObjectsUsingBlock:^(PBChapter *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(40, element);
  }];
  if (self.hasImageStyle) {
    size_ += computeInt32Size(50, self.imageStyle);
  }
  if (self.hasScoreEngine) {
    size_ += computeInt32Size(51, self.scoreEngine);
  }
  if (self.hasDifficulty) {
    size_ += computeFloatSize(52, self.difficulty);
  }
  if (self.hasUseBgFromPrev) {
    size_ += computeBoolSize(60, self.useBgFromPrev);
  }
  if (self.hasUseBgForFill) {
    size_ += computeBoolSize(61, self.useBgForFill);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBStage*) parseFromData:(NSData*) data {
  return (PBStage*)[[[PBStage builder] mergeFromData:data] build];
}
+ (PBStage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBStage*)[[[PBStage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBStage*) parseFromInputStream:(NSInputStream*) input {
  return (PBStage*)[[[PBStage builder] mergeFromInputStream:input] build];
}
+ (PBStage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBStage*)[[[PBStage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBStage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBStage*)[[[PBStage builder] mergeFromCodedInputStream:input] build];
}
+ (PBStage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBStage*)[[[PBStage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBStageBuilder*) builder {
  return [[PBStageBuilder alloc] init];
}
+ (PBStageBuilder*) builderWithPrototype:(PBStage*) prototype {
  return [[PBStage builder] mergeFrom:prototype];
}
- (PBStageBuilder*) builder {
  return [PBStage builder];
}
- (PBStageBuilder*) toBuilder {
  return [PBStage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageId", self.stageId];
  }
  if (self.hasCnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnName", self.cnName];
  }
  if (self.hasEnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enName", self.enName];
  }
  if (self.hasTcnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnName", self.tcnName];
  }
  if (self.hasCnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnDesc", self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enDesc", self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnDesc", self.tcnDesc];
  }
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasThumbImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumbImage", self.thumbImage];
  }
  if (self.hasOpusData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusData", self.opusData];
  }
  if (self.hasBgImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImage", self.bgImage];
  }
  if (self.hasDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataUrl", self.dataUrl];
  }
  if (self.hasImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageName", self.imageName];
  }
  if (self.hasOpusName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusName", self.opusName];
  }
  if (self.hasBgImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImageName", self.bgImageName];
  }
  [self.chapterArray enumerateObjectsUsingBlock:^(PBChapter *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"chapter"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasImageStyle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageStyle", [NSNumber numberWithInteger:self.imageStyle]];
  }
  if (self.hasScoreEngine) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scoreEngine", [NSNumber numberWithInteger:self.scoreEngine]];
  }
  if (self.hasDifficulty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"difficulty", [NSNumber numberWithFloat:self.difficulty]];
  }
  if (self.hasUseBgFromPrev) {
    [output appendFormat:@"%@%@: %@\n", indent, @"useBgFromPrev", [NSNumber numberWithBool:self.useBgFromPrev]];
  }
  if (self.hasUseBgForFill) {
    [output appendFormat:@"%@%@: %@\n", indent, @"useBgForFill", [NSNumber numberWithBool:self.useBgForFill]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBStage class]]) {
    return NO;
  }
  PBStage *otherMessage = other;
  return
      self.hasStageId == otherMessage.hasStageId &&
      (!self.hasStageId || [self.stageId isEqual:otherMessage.stageId]) &&
      self.hasCnName == otherMessage.hasCnName &&
      (!self.hasCnName || [self.cnName isEqual:otherMessage.cnName]) &&
      self.hasEnName == otherMessage.hasEnName &&
      (!self.hasEnName || [self.enName isEqual:otherMessage.enName]) &&
      self.hasTcnName == otherMessage.hasTcnName &&
      (!self.hasTcnName || [self.tcnName isEqual:otherMessage.tcnName]) &&
      self.hasCnDesc == otherMessage.hasCnDesc &&
      (!self.hasCnDesc || [self.cnDesc isEqual:otherMessage.cnDesc]) &&
      self.hasEnDesc == otherMessage.hasEnDesc &&
      (!self.hasEnDesc || [self.enDesc isEqual:otherMessage.enDesc]) &&
      self.hasTcnDesc == otherMessage.hasTcnDesc &&
      (!self.hasTcnDesc || [self.tcnDesc isEqual:otherMessage.tcnDesc]) &&
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasThumbImage == otherMessage.hasThumbImage &&
      (!self.hasThumbImage || [self.thumbImage isEqual:otherMessage.thumbImage]) &&
      self.hasOpusData == otherMessage.hasOpusData &&
      (!self.hasOpusData || [self.opusData isEqual:otherMessage.opusData]) &&
      self.hasBgImage == otherMessage.hasBgImage &&
      (!self.hasBgImage || [self.bgImage isEqual:otherMessage.bgImage]) &&
      self.hasDataUrl == otherMessage.hasDataUrl &&
      (!self.hasDataUrl || [self.dataUrl isEqual:otherMessage.dataUrl]) &&
      self.hasImageName == otherMessage.hasImageName &&
      (!self.hasImageName || [self.imageName isEqual:otherMessage.imageName]) &&
      self.hasOpusName == otherMessage.hasOpusName &&
      (!self.hasOpusName || [self.opusName isEqual:otherMessage.opusName]) &&
      self.hasBgImageName == otherMessage.hasBgImageName &&
      (!self.hasBgImageName || [self.bgImageName isEqual:otherMessage.bgImageName]) &&
      [self.chapterArray isEqualToArray:otherMessage.chapterArray] &&
      self.hasImageStyle == otherMessage.hasImageStyle &&
      (!self.hasImageStyle || self.imageStyle == otherMessage.imageStyle) &&
      self.hasScoreEngine == otherMessage.hasScoreEngine &&
      (!self.hasScoreEngine || self.scoreEngine == otherMessage.scoreEngine) &&
      self.hasDifficulty == otherMessage.hasDifficulty &&
      (!self.hasDifficulty || self.difficulty == otherMessage.difficulty) &&
      self.hasUseBgFromPrev == otherMessage.hasUseBgFromPrev &&
      (!self.hasUseBgFromPrev || self.useBgFromPrev == otherMessage.useBgFromPrev) &&
      self.hasUseBgForFill == otherMessage.hasUseBgForFill &&
      (!self.hasUseBgForFill || self.useBgForFill == otherMessage.useBgForFill) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStageId) {
    hashCode = hashCode * 31 + [self.stageId hash];
  }
  if (self.hasCnName) {
    hashCode = hashCode * 31 + [self.cnName hash];
  }
  if (self.hasEnName) {
    hashCode = hashCode * 31 + [self.enName hash];
  }
  if (self.hasTcnName) {
    hashCode = hashCode * 31 + [self.tcnName hash];
  }
  if (self.hasCnDesc) {
    hashCode = hashCode * 31 + [self.cnDesc hash];
  }
  if (self.hasEnDesc) {
    hashCode = hashCode * 31 + [self.enDesc hash];
  }
  if (self.hasTcnDesc) {
    hashCode = hashCode * 31 + [self.tcnDesc hash];
  }
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasThumbImage) {
    hashCode = hashCode * 31 + [self.thumbImage hash];
  }
  if (self.hasOpusData) {
    hashCode = hashCode * 31 + [self.opusData hash];
  }
  if (self.hasBgImage) {
    hashCode = hashCode * 31 + [self.bgImage hash];
  }
  if (self.hasDataUrl) {
    hashCode = hashCode * 31 + [self.dataUrl hash];
  }
  if (self.hasImageName) {
    hashCode = hashCode * 31 + [self.imageName hash];
  }
  if (self.hasOpusName) {
    hashCode = hashCode * 31 + [self.opusName hash];
  }
  if (self.hasBgImageName) {
    hashCode = hashCode * 31 + [self.bgImageName hash];
  }
  [self.chapterArray enumerateObjectsUsingBlock:^(PBChapter *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasImageStyle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.imageStyle] hash];
  }
  if (self.hasScoreEngine) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.scoreEngine] hash];
  }
  if (self.hasDifficulty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.difficulty] hash];
  }
  if (self.hasUseBgFromPrev) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.useBgFromPrev] hash];
  }
  if (self.hasUseBgForFill) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.useBgForFill] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBStageBuilder()
@property (strong) PBStage* resultPbstage;
@end

@implementation PBStageBuilder
@synthesize resultPbstage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbstage = [[PBStage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbstage;
}
- (PBStageBuilder*) clear {
  self.resultPbstage = [[PBStage alloc] init];
  return self;
}
- (PBStageBuilder*) clone {
  return [PBStage builderWithPrototype:resultPbstage];
}
- (PBStage*) defaultInstance {
  return [PBStage defaultInstance];
}
- (PBStage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBStage*) buildPartial {
  PBStage* returnMe = resultPbstage;
  self.resultPbstage = nil;
  return returnMe;
}
- (PBStageBuilder*) mergeFrom:(PBStage*) other {
  if (other == [PBStage defaultInstance]) {
    return self;
  }
  if (other.hasStageId) {
    [self setStageId:other.stageId];
  }
  if (other.hasCnName) {
    [self setCnName:other.cnName];
  }
  if (other.hasEnName) {
    [self setEnName:other.enName];
  }
  if (other.hasTcnName) {
    [self setTcnName:other.tcnName];
  }
  if (other.hasCnDesc) {
    [self setCnDesc:other.cnDesc];
  }
  if (other.hasEnDesc) {
    [self setEnDesc:other.enDesc];
  }
  if (other.hasTcnDesc) {
    [self setTcnDesc:other.tcnDesc];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasThumbImage) {
    [self setThumbImage:other.thumbImage];
  }
  if (other.hasOpusData) {
    [self setOpusData:other.opusData];
  }
  if (other.hasBgImage) {
    [self setBgImage:other.bgImage];
  }
  if (other.hasDataUrl) {
    [self setDataUrl:other.dataUrl];
  }
  if (other.hasImageName) {
    [self setImageName:other.imageName];
  }
  if (other.hasOpusName) {
    [self setOpusName:other.opusName];
  }
  if (other.hasBgImageName) {
    [self setBgImageName:other.bgImageName];
  }
  if (other.chapterArray.count > 0) {
    if (resultPbstage.chapterArray == nil) {
      resultPbstage.chapterArray = [[NSMutableArray alloc] initWithArray:other.chapterArray];
    } else {
      [resultPbstage.chapterArray addObjectsFromArray:other.chapterArray];
    }
  }
  if (other.hasImageStyle) {
    [self setImageStyle:other.imageStyle];
  }
  if (other.hasScoreEngine) {
    [self setScoreEngine:other.scoreEngine];
  }
  if (other.hasDifficulty) {
    [self setDifficulty:other.difficulty];
  }
  if (other.hasUseBgFromPrev) {
    [self setUseBgFromPrev:other.useBgFromPrev];
  }
  if (other.hasUseBgForFill) {
    [self setUseBgForFill:other.useBgForFill];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBStageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBStageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setStageId:[input readString]];
        break;
      }
      case 18: {
        [self setCnName:[input readString]];
        break;
      }
      case 26: {
        [self setEnName:[input readString]];
        break;
      }
      case 34: {
        [self setTcnName:[input readString]];
        break;
      }
      case 82: {
        [self setCnDesc:[input readString]];
        break;
      }
      case 90: {
        [self setEnDesc:[input readString]];
        break;
      }
      case 98: {
        [self setTcnDesc:[input readString]];
        break;
      }
      case 154: {
        [self setOpusId:[input readString]];
        break;
      }
      case 162: {
        [self setImage:[input readString]];
        break;
      }
      case 170: {
        [self setThumbImage:[input readString]];
        break;
      }
      case 178: {
        [self setOpusData:[input readString]];
        break;
      }
      case 186: {
        [self setBgImage:[input readString]];
        break;
      }
      case 242: {
        [self setDataUrl:[input readString]];
        break;
      }
      case 250: {
        [self setImageName:[input readString]];
        break;
      }
      case 258: {
        [self setOpusName:[input readString]];
        break;
      }
      case 266: {
        [self setBgImageName:[input readString]];
        break;
      }
      case 322: {
        PBChapterBuilder* subBuilder = [PBChapter builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChapter:[subBuilder buildPartial]];
        break;
      }
      case 400: {
        [self setImageStyle:[input readInt32]];
        break;
      }
      case 408: {
        [self setScoreEngine:[input readInt32]];
        break;
      }
      case 421: {
        [self setDifficulty:[input readFloat]];
        break;
      }
      case 480: {
        [self setUseBgFromPrev:[input readBool]];
        break;
      }
      case 488: {
        [self setUseBgForFill:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasStageId {
  return resultPbstage.hasStageId;
}
- (NSString*) stageId {
  return resultPbstage.stageId;
}
- (PBStageBuilder*) setStageId:(NSString*) value {
  resultPbstage.hasStageId = YES;
  resultPbstage.stageId = value;
  return self;
}
- (PBStageBuilder*) clearStageId {
  resultPbstage.hasStageId = NO;
  resultPbstage.stageId = @"";
  return self;
}
- (BOOL) hasCnName {
  return resultPbstage.hasCnName;
}
- (NSString*) cnName {
  return resultPbstage.cnName;
}
- (PBStageBuilder*) setCnName:(NSString*) value {
  resultPbstage.hasCnName = YES;
  resultPbstage.cnName = value;
  return self;
}
- (PBStageBuilder*) clearCnName {
  resultPbstage.hasCnName = NO;
  resultPbstage.cnName = @"";
  return self;
}
- (BOOL) hasEnName {
  return resultPbstage.hasEnName;
}
- (NSString*) enName {
  return resultPbstage.enName;
}
- (PBStageBuilder*) setEnName:(NSString*) value {
  resultPbstage.hasEnName = YES;
  resultPbstage.enName = value;
  return self;
}
- (PBStageBuilder*) clearEnName {
  resultPbstage.hasEnName = NO;
  resultPbstage.enName = @"";
  return self;
}
- (BOOL) hasTcnName {
  return resultPbstage.hasTcnName;
}
- (NSString*) tcnName {
  return resultPbstage.tcnName;
}
- (PBStageBuilder*) setTcnName:(NSString*) value {
  resultPbstage.hasTcnName = YES;
  resultPbstage.tcnName = value;
  return self;
}
- (PBStageBuilder*) clearTcnName {
  resultPbstage.hasTcnName = NO;
  resultPbstage.tcnName = @"";
  return self;
}
- (BOOL) hasCnDesc {
  return resultPbstage.hasCnDesc;
}
- (NSString*) cnDesc {
  return resultPbstage.cnDesc;
}
- (PBStageBuilder*) setCnDesc:(NSString*) value {
  resultPbstage.hasCnDesc = YES;
  resultPbstage.cnDesc = value;
  return self;
}
- (PBStageBuilder*) clearCnDesc {
  resultPbstage.hasCnDesc = NO;
  resultPbstage.cnDesc = @"";
  return self;
}
- (BOOL) hasEnDesc {
  return resultPbstage.hasEnDesc;
}
- (NSString*) enDesc {
  return resultPbstage.enDesc;
}
- (PBStageBuilder*) setEnDesc:(NSString*) value {
  resultPbstage.hasEnDesc = YES;
  resultPbstage.enDesc = value;
  return self;
}
- (PBStageBuilder*) clearEnDesc {
  resultPbstage.hasEnDesc = NO;
  resultPbstage.enDesc = @"";
  return self;
}
- (BOOL) hasTcnDesc {
  return resultPbstage.hasTcnDesc;
}
- (NSString*) tcnDesc {
  return resultPbstage.tcnDesc;
}
- (PBStageBuilder*) setTcnDesc:(NSString*) value {
  resultPbstage.hasTcnDesc = YES;
  resultPbstage.tcnDesc = value;
  return self;
}
- (PBStageBuilder*) clearTcnDesc {
  resultPbstage.hasTcnDesc = NO;
  resultPbstage.tcnDesc = @"";
  return self;
}
- (BOOL) hasOpusId {
  return resultPbstage.hasOpusId;
}
- (NSString*) opusId {
  return resultPbstage.opusId;
}
- (PBStageBuilder*) setOpusId:(NSString*) value {
  resultPbstage.hasOpusId = YES;
  resultPbstage.opusId = value;
  return self;
}
- (PBStageBuilder*) clearOpusId {
  resultPbstage.hasOpusId = NO;
  resultPbstage.opusId = @"";
  return self;
}
- (BOOL) hasImage {
  return resultPbstage.hasImage;
}
- (NSString*) image {
  return resultPbstage.image;
}
- (PBStageBuilder*) setImage:(NSString*) value {
  resultPbstage.hasImage = YES;
  resultPbstage.image = value;
  return self;
}
- (PBStageBuilder*) clearImage {
  resultPbstage.hasImage = NO;
  resultPbstage.image = @"";
  return self;
}
- (BOOL) hasThumbImage {
  return resultPbstage.hasThumbImage;
}
- (NSString*) thumbImage {
  return resultPbstage.thumbImage;
}
- (PBStageBuilder*) setThumbImage:(NSString*) value {
  resultPbstage.hasThumbImage = YES;
  resultPbstage.thumbImage = value;
  return self;
}
- (PBStageBuilder*) clearThumbImage {
  resultPbstage.hasThumbImage = NO;
  resultPbstage.thumbImage = @"";
  return self;
}
- (BOOL) hasOpusData {
  return resultPbstage.hasOpusData;
}
- (NSString*) opusData {
  return resultPbstage.opusData;
}
- (PBStageBuilder*) setOpusData:(NSString*) value {
  resultPbstage.hasOpusData = YES;
  resultPbstage.opusData = value;
  return self;
}
- (PBStageBuilder*) clearOpusData {
  resultPbstage.hasOpusData = NO;
  resultPbstage.opusData = @"";
  return self;
}
- (BOOL) hasBgImage {
  return resultPbstage.hasBgImage;
}
- (NSString*) bgImage {
  return resultPbstage.bgImage;
}
- (PBStageBuilder*) setBgImage:(NSString*) value {
  resultPbstage.hasBgImage = YES;
  resultPbstage.bgImage = value;
  return self;
}
- (PBStageBuilder*) clearBgImage {
  resultPbstage.hasBgImage = NO;
  resultPbstage.bgImage = @"";
  return self;
}
- (BOOL) hasDataUrl {
  return resultPbstage.hasDataUrl;
}
- (NSString*) dataUrl {
  return resultPbstage.dataUrl;
}
- (PBStageBuilder*) setDataUrl:(NSString*) value {
  resultPbstage.hasDataUrl = YES;
  resultPbstage.dataUrl = value;
  return self;
}
- (PBStageBuilder*) clearDataUrl {
  resultPbstage.hasDataUrl = NO;
  resultPbstage.dataUrl = @"";
  return self;
}
- (BOOL) hasImageName {
  return resultPbstage.hasImageName;
}
- (NSString*) imageName {
  return resultPbstage.imageName;
}
- (PBStageBuilder*) setImageName:(NSString*) value {
  resultPbstage.hasImageName = YES;
  resultPbstage.imageName = value;
  return self;
}
- (PBStageBuilder*) clearImageName {
  resultPbstage.hasImageName = NO;
  resultPbstage.imageName = @"";
  return self;
}
- (BOOL) hasOpusName {
  return resultPbstage.hasOpusName;
}
- (NSString*) opusName {
  return resultPbstage.opusName;
}
- (PBStageBuilder*) setOpusName:(NSString*) value {
  resultPbstage.hasOpusName = YES;
  resultPbstage.opusName = value;
  return self;
}
- (PBStageBuilder*) clearOpusName {
  resultPbstage.hasOpusName = NO;
  resultPbstage.opusName = @"";
  return self;
}
- (BOOL) hasBgImageName {
  return resultPbstage.hasBgImageName;
}
- (NSString*) bgImageName {
  return resultPbstage.bgImageName;
}
- (PBStageBuilder*) setBgImageName:(NSString*) value {
  resultPbstage.hasBgImageName = YES;
  resultPbstage.bgImageName = value;
  return self;
}
- (PBStageBuilder*) clearBgImageName {
  resultPbstage.hasBgImageName = NO;
  resultPbstage.bgImageName = @"";
  return self;
}
- (NSMutableArray *)chapter {
  return resultPbstage.chapterArray;
}
- (PBChapter*)chapterAtIndex:(NSUInteger)index {
  return [resultPbstage chapterAtIndex:index];
}
- (PBStageBuilder *)addChapter:(PBChapter*)value {
  if (resultPbstage.chapterArray == nil) {
    resultPbstage.chapterArray = [[NSMutableArray alloc]init];
  }
  [resultPbstage.chapterArray addObject:value];
  return self;
}
- (PBStageBuilder *)setChapterArray:(NSArray *)array {
  resultPbstage.chapterArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBStageBuilder *)clearChapter {
  resultPbstage.chapterArray = nil;
  return self;
}
- (BOOL) hasImageStyle {
  return resultPbstage.hasImageStyle;
}
- (SInt32) imageStyle {
  return resultPbstage.imageStyle;
}
- (PBStageBuilder*) setImageStyle:(SInt32) value {
  resultPbstage.hasImageStyle = YES;
  resultPbstage.imageStyle = value;
  return self;
}
- (PBStageBuilder*) clearImageStyle {
  resultPbstage.hasImageStyle = NO;
  resultPbstage.imageStyle = 0;
  return self;
}
- (BOOL) hasScoreEngine {
  return resultPbstage.hasScoreEngine;
}
- (SInt32) scoreEngine {
  return resultPbstage.scoreEngine;
}
- (PBStageBuilder*) setScoreEngine:(SInt32) value {
  resultPbstage.hasScoreEngine = YES;
  resultPbstage.scoreEngine = value;
  return self;
}
- (PBStageBuilder*) clearScoreEngine {
  resultPbstage.hasScoreEngine = NO;
  resultPbstage.scoreEngine = 0;
  return self;
}
- (BOOL) hasDifficulty {
  return resultPbstage.hasDifficulty;
}
- (Float32) difficulty {
  return resultPbstage.difficulty;
}
- (PBStageBuilder*) setDifficulty:(Float32) value {
  resultPbstage.hasDifficulty = YES;
  resultPbstage.difficulty = value;
  return self;
}
- (PBStageBuilder*) clearDifficulty {
  resultPbstage.hasDifficulty = NO;
  resultPbstage.difficulty = 1;
  return self;
}
- (BOOL) hasUseBgFromPrev {
  return resultPbstage.hasUseBgFromPrev;
}
- (BOOL) useBgFromPrev {
  return resultPbstage.useBgFromPrev;
}
- (PBStageBuilder*) setUseBgFromPrev:(BOOL) value {
  resultPbstage.hasUseBgFromPrev = YES;
  resultPbstage.useBgFromPrev = value;
  return self;
}
- (PBStageBuilder*) clearUseBgFromPrev {
  resultPbstage.hasUseBgFromPrev = NO;
  resultPbstage.useBgFromPrev = NO;
  return self;
}
- (BOOL) hasUseBgForFill {
  return resultPbstage.hasUseBgForFill;
}
- (BOOL) useBgForFill {
  return resultPbstage.useBgForFill;
}
- (PBStageBuilder*) setUseBgForFill:(BOOL) value {
  resultPbstage.hasUseBgForFill = YES;
  resultPbstage.useBgForFill = value;
  return self;
}
- (PBStageBuilder*) clearUseBgForFill {
  resultPbstage.hasUseBgForFill = NO;
  resultPbstage.useBgForFill = YES;
  return self;
}
@end

@interface PBTutorial ()
@property (strong) NSString* tutorialId;
@property (strong) NSString* cnName;
@property (strong) NSString* enName;
@property (strong) NSString* tcnName;
@property (strong) NSString* cnDesc;
@property (strong) NSString* enDesc;
@property (strong) NSString* tcnDesc;
@property SInt32 level;
@property (strong) PBAppendableArray * categoriesArray;
@property BOOL isFeature;
@property (strong) NSString* image;
@property (strong) NSString* thumbImage;
@property (strong) NSString* dataUrl;
@property (strong) NSMutableArray * stagesArray;
@property SInt32 type;
@property SInt32 drawLevel;
@property BOOL isFree;
@property SInt32 price;
@property SInt32 priceUnit;
@property SInt32 createDate;
@property SInt32 modifyDate;
@property BOOL isNew;
@property BOOL disableScore;
@property BOOL disablePractice;
@property BOOL directPass;
@property SInt32 passScore;
@property SInt32 topRankType;
@property BOOL unlockAllStage;
@property BOOL skipReplay;
@property BOOL skipTips;
@property SInt32 version;
@end

@implementation PBTutorial

- (BOOL) hasTutorialId {
  return !!hasTutorialId_;
}
- (void) setHasTutorialId:(BOOL) _value_ {
  hasTutorialId_ = !!_value_;
}
@synthesize tutorialId;
- (BOOL) hasCnName {
  return !!hasCnName_;
}
- (void) setHasCnName:(BOOL) _value_ {
  hasCnName_ = !!_value_;
}
@synthesize cnName;
- (BOOL) hasEnName {
  return !!hasEnName_;
}
- (void) setHasEnName:(BOOL) _value_ {
  hasEnName_ = !!_value_;
}
@synthesize enName;
- (BOOL) hasTcnName {
  return !!hasTcnName_;
}
- (void) setHasTcnName:(BOOL) _value_ {
  hasTcnName_ = !!_value_;
}
@synthesize tcnName;
- (BOOL) hasCnDesc {
  return !!hasCnDesc_;
}
- (void) setHasCnDesc:(BOOL) _value_ {
  hasCnDesc_ = !!_value_;
}
@synthesize cnDesc;
- (BOOL) hasEnDesc {
  return !!hasEnDesc_;
}
- (void) setHasEnDesc:(BOOL) _value_ {
  hasEnDesc_ = !!_value_;
}
@synthesize enDesc;
- (BOOL) hasTcnDesc {
  return !!hasTcnDesc_;
}
- (void) setHasTcnDesc:(BOOL) _value_ {
  hasTcnDesc_ = !!_value_;
}
@synthesize tcnDesc;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
@synthesize categoriesArray;
@dynamic categories;
- (BOOL) hasIsFeature {
  return !!hasIsFeature_;
}
- (void) setHasIsFeature:(BOOL) _value_ {
  hasIsFeature_ = !!_value_;
}
- (BOOL) isFeature {
  return !!isFeature_;
}
- (void) setIsFeature:(BOOL) _value_ {
  isFeature_ = !!_value_;
}
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasThumbImage {
  return !!hasThumbImage_;
}
- (void) setHasThumbImage:(BOOL) _value_ {
  hasThumbImage_ = !!_value_;
}
@synthesize thumbImage;
- (BOOL) hasDataUrl {
  return !!hasDataUrl_;
}
- (void) setHasDataUrl:(BOOL) _value_ {
  hasDataUrl_ = !!_value_;
}
@synthesize dataUrl;
@synthesize stagesArray;
@dynamic stages;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasDrawLevel {
  return !!hasDrawLevel_;
}
- (void) setHasDrawLevel:(BOOL) _value_ {
  hasDrawLevel_ = !!_value_;
}
@synthesize drawLevel;
- (BOOL) hasIsFree {
  return !!hasIsFree_;
}
- (void) setHasIsFree:(BOOL) _value_ {
  hasIsFree_ = !!_value_;
}
- (BOOL) isFree {
  return !!isFree_;
}
- (void) setIsFree:(BOOL) _value_ {
  isFree_ = !!_value_;
}
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasPriceUnit {
  return !!hasPriceUnit_;
}
- (void) setHasPriceUnit:(BOOL) _value_ {
  hasPriceUnit_ = !!_value_;
}
@synthesize priceUnit;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasModifyDate {
  return !!hasModifyDate_;
}
- (void) setHasModifyDate:(BOOL) _value_ {
  hasModifyDate_ = !!_value_;
}
@synthesize modifyDate;
- (BOOL) hasIsNew {
  return !!hasIsNew_;
}
- (void) setHasIsNew:(BOOL) _value_ {
  hasIsNew_ = !!_value_;
}
- (BOOL) isNew {
  return !!isNew_;
}
- (void) setIsNew:(BOOL) _value_ {
  isNew_ = !!_value_;
}
- (BOOL) hasDisableScore {
  return !!hasDisableScore_;
}
- (void) setHasDisableScore:(BOOL) _value_ {
  hasDisableScore_ = !!_value_;
}
- (BOOL) disableScore {
  return !!disableScore_;
}
- (void) setDisableScore:(BOOL) _value_ {
  disableScore_ = !!_value_;
}
- (BOOL) hasDisablePractice {
  return !!hasDisablePractice_;
}
- (void) setHasDisablePractice:(BOOL) _value_ {
  hasDisablePractice_ = !!_value_;
}
- (BOOL) disablePractice {
  return !!disablePractice_;
}
- (void) setDisablePractice:(BOOL) _value_ {
  disablePractice_ = !!_value_;
}
- (BOOL) hasDirectPass {
  return !!hasDirectPass_;
}
- (void) setHasDirectPass:(BOOL) _value_ {
  hasDirectPass_ = !!_value_;
}
- (BOOL) directPass {
  return !!directPass_;
}
- (void) setDirectPass:(BOOL) _value_ {
  directPass_ = !!_value_;
}
- (BOOL) hasPassScore {
  return !!hasPassScore_;
}
- (void) setHasPassScore:(BOOL) _value_ {
  hasPassScore_ = !!_value_;
}
@synthesize passScore;
- (BOOL) hasTopRankType {
  return !!hasTopRankType_;
}
- (void) setHasTopRankType:(BOOL) _value_ {
  hasTopRankType_ = !!_value_;
}
@synthesize topRankType;
- (BOOL) hasUnlockAllStage {
  return !!hasUnlockAllStage_;
}
- (void) setHasUnlockAllStage:(BOOL) _value_ {
  hasUnlockAllStage_ = !!_value_;
}
- (BOOL) unlockAllStage {
  return !!unlockAllStage_;
}
- (void) setUnlockAllStage:(BOOL) _value_ {
  unlockAllStage_ = !!_value_;
}
- (BOOL) hasSkipReplay {
  return !!hasSkipReplay_;
}
- (void) setHasSkipReplay:(BOOL) _value_ {
  hasSkipReplay_ = !!_value_;
}
- (BOOL) skipReplay {
  return !!skipReplay_;
}
- (void) setSkipReplay:(BOOL) _value_ {
  skipReplay_ = !!_value_;
}
- (BOOL) hasSkipTips {
  return !!hasSkipTips_;
}
- (void) setHasSkipTips:(BOOL) _value_ {
  hasSkipTips_ = !!_value_;
}
- (BOOL) skipTips {
  return !!skipTips_;
}
- (void) setSkipTips:(BOOL) _value_ {
  skipTips_ = !!_value_;
}
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (instancetype) init {
  if ((self = [super init])) {
    self.tutorialId = @"";
    self.cnName = @"";
    self.enName = @"";
    self.tcnName = @"";
    self.cnDesc = @"";
    self.enDesc = @"";
    self.tcnDesc = @"";
    self.level = 0;
    self.isFeature = NO;
    self.image = @"";
    self.thumbImage = @"";
    self.dataUrl = @"";
    self.type = 0;
    self.drawLevel = 1;
    self.isFree = YES;
    self.price = 0;
    self.priceUnit = 0;
    self.createDate = 0;
    self.modifyDate = 0;
    self.isNew = NO;
    self.disableScore = NO;
    self.disablePractice = NO;
    self.directPass = NO;
    self.passScore = 60;
    self.topRankType = 0;
    self.unlockAllStage = NO;
    self.skipReplay = NO;
    self.skipTips = NO;
    self.version = 0;
  }
  return self;
}
static PBTutorial* defaultPBTutorialInstance = nil;
+ (void) initialize {
  if (self == [PBTutorial class]) {
    defaultPBTutorialInstance = [[PBTutorial alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBTutorialInstance;
}
- (instancetype) defaultInstance {
  return defaultPBTutorialInstance;
}
- (PBArray *)categories {
  return categoriesArray;
}
- (SInt32)categoriesAtIndex:(NSUInteger)index {
  return [categoriesArray int32AtIndex:index];
}
- (NSArray *)stages {
  return stagesArray;
}
- (PBStage*)stagesAtIndex:(NSUInteger)index {
  return [stagesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTutorialId) {
    return NO;
  }
  __block BOOL isInitstages = YES;
   [self.stages enumerateObjectsUsingBlock:^(PBStage *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitstages = NO;
      *stop = YES;
    }
  }];
  if (!isInitstages) return isInitstages;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTutorialId) {
    [output writeString:1 value:self.tutorialId];
  }
  if (self.hasCnName) {
    [output writeString:2 value:self.cnName];
  }
  if (self.hasEnName) {
    [output writeString:3 value:self.enName];
  }
  if (self.hasTcnName) {
    [output writeString:4 value:self.tcnName];
  }
  if (self.hasCnDesc) {
    [output writeString:10 value:self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output writeString:11 value:self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output writeString:12 value:self.tcnDesc];
  }
  if (self.hasLevel) {
    [output writeInt32:20 value:self.level];
  }
  const NSUInteger categoriesArrayCount = self.categoriesArray.count;
  if (categoriesArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.categoriesArray.data;
    for (NSUInteger i = 0; i < categoriesArrayCount; ++i) {
      [output writeInt32:21 value:values[i]];
    }
  }
  if (self.hasIsFeature) {
    [output writeBool:22 value:self.isFeature];
  }
  if (self.hasImage) {
    [output writeString:23 value:self.image];
  }
  if (self.hasThumbImage) {
    [output writeString:24 value:self.thumbImage];
  }
  if (self.hasDataUrl) {
    [output writeString:25 value:self.dataUrl];
  }
  [self.stagesArray enumerateObjectsUsingBlock:^(PBStage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:26 value:element];
  }];
  if (self.hasType) {
    [output writeInt32:27 value:self.type];
  }
  if (self.hasDrawLevel) {
    [output writeInt32:28 value:self.drawLevel];
  }
  if (self.hasIsFree) {
    [output writeBool:30 value:self.isFree];
  }
  if (self.hasPrice) {
    [output writeInt32:31 value:self.price];
  }
  if (self.hasPriceUnit) {
    [output writeInt32:32 value:self.priceUnit];
  }
  if (self.hasCreateDate) {
    [output writeInt32:40 value:self.createDate];
  }
  if (self.hasModifyDate) {
    [output writeInt32:41 value:self.modifyDate];
  }
  if (self.hasIsNew) {
    [output writeBool:50 value:self.isNew];
  }
  if (self.hasDisableScore) {
    [output writeBool:60 value:self.disableScore];
  }
  if (self.hasDisablePractice) {
    [output writeBool:61 value:self.disablePractice];
  }
  if (self.hasDirectPass) {
    [output writeBool:62 value:self.directPass];
  }
  if (self.hasPassScore) {
    [output writeInt32:63 value:self.passScore];
  }
  if (self.hasTopRankType) {
    [output writeInt32:64 value:self.topRankType];
  }
  if (self.hasUnlockAllStage) {
    [output writeBool:65 value:self.unlockAllStage];
  }
  if (self.hasSkipReplay) {
    [output writeBool:66 value:self.skipReplay];
  }
  if (self.hasSkipTips) {
    [output writeBool:67 value:self.skipTips];
  }
  if (self.hasVersion) {
    [output writeInt32:100 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTutorialId) {
    size_ += computeStringSize(1, self.tutorialId);
  }
  if (self.hasCnName) {
    size_ += computeStringSize(2, self.cnName);
  }
  if (self.hasEnName) {
    size_ += computeStringSize(3, self.enName);
  }
  if (self.hasTcnName) {
    size_ += computeStringSize(4, self.tcnName);
  }
  if (self.hasCnDesc) {
    size_ += computeStringSize(10, self.cnDesc);
  }
  if (self.hasEnDesc) {
    size_ += computeStringSize(11, self.enDesc);
  }
  if (self.hasTcnDesc) {
    size_ += computeStringSize(12, self.tcnDesc);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(20, self.level);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.categoriesArray.count;
    const SInt32 *values = (const SInt32 *)self.categoriesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasIsFeature) {
    size_ += computeBoolSize(22, self.isFeature);
  }
  if (self.hasImage) {
    size_ += computeStringSize(23, self.image);
  }
  if (self.hasThumbImage) {
    size_ += computeStringSize(24, self.thumbImage);
  }
  if (self.hasDataUrl) {
    size_ += computeStringSize(25, self.dataUrl);
  }
  [self.stagesArray enumerateObjectsUsingBlock:^(PBStage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(26, element);
  }];
  if (self.hasType) {
    size_ += computeInt32Size(27, self.type);
  }
  if (self.hasDrawLevel) {
    size_ += computeInt32Size(28, self.drawLevel);
  }
  if (self.hasIsFree) {
    size_ += computeBoolSize(30, self.isFree);
  }
  if (self.hasPrice) {
    size_ += computeInt32Size(31, self.price);
  }
  if (self.hasPriceUnit) {
    size_ += computeInt32Size(32, self.priceUnit);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(40, self.createDate);
  }
  if (self.hasModifyDate) {
    size_ += computeInt32Size(41, self.modifyDate);
  }
  if (self.hasIsNew) {
    size_ += computeBoolSize(50, self.isNew);
  }
  if (self.hasDisableScore) {
    size_ += computeBoolSize(60, self.disableScore);
  }
  if (self.hasDisablePractice) {
    size_ += computeBoolSize(61, self.disablePractice);
  }
  if (self.hasDirectPass) {
    size_ += computeBoolSize(62, self.directPass);
  }
  if (self.hasPassScore) {
    size_ += computeInt32Size(63, self.passScore);
  }
  if (self.hasTopRankType) {
    size_ += computeInt32Size(64, self.topRankType);
  }
  if (self.hasUnlockAllStage) {
    size_ += computeBoolSize(65, self.unlockAllStage);
  }
  if (self.hasSkipReplay) {
    size_ += computeBoolSize(66, self.skipReplay);
  }
  if (self.hasSkipTips) {
    size_ += computeBoolSize(67, self.skipTips);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(100, self.version);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBTutorial*) parseFromData:(NSData*) data {
  return (PBTutorial*)[[[PBTutorial builder] mergeFromData:data] build];
}
+ (PBTutorial*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTutorial*)[[[PBTutorial builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBTutorial*) parseFromInputStream:(NSInputStream*) input {
  return (PBTutorial*)[[[PBTutorial builder] mergeFromInputStream:input] build];
}
+ (PBTutorial*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTutorial*)[[[PBTutorial builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTutorial*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBTutorial*)[[[PBTutorial builder] mergeFromCodedInputStream:input] build];
}
+ (PBTutorial*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTutorial*)[[[PBTutorial builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTutorialBuilder*) builder {
  return [[PBTutorialBuilder alloc] init];
}
+ (PBTutorialBuilder*) builderWithPrototype:(PBTutorial*) prototype {
  return [[PBTutorial builder] mergeFrom:prototype];
}
- (PBTutorialBuilder*) builder {
  return [PBTutorial builder];
}
- (PBTutorialBuilder*) toBuilder {
  return [PBTutorial builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTutorialId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tutorialId", self.tutorialId];
  }
  if (self.hasCnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnName", self.cnName];
  }
  if (self.hasEnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enName", self.enName];
  }
  if (self.hasTcnName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnName", self.tcnName];
  }
  if (self.hasCnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cnDesc", self.cnDesc];
  }
  if (self.hasEnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enDesc", self.enDesc];
  }
  if (self.hasTcnDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcnDesc", self.tcnDesc];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  [self.categoriesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categories", obj];
  }];
  if (self.hasIsFeature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFeature", [NSNumber numberWithBool:self.isFeature]];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasThumbImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumbImage", self.thumbImage];
  }
  if (self.hasDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataUrl", self.dataUrl];
  }
  [self.stagesArray enumerateObjectsUsingBlock:^(PBStage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"stages"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasDrawLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"drawLevel", [NSNumber numberWithInteger:self.drawLevel]];
  }
  if (self.hasIsFree) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFree", [NSNumber numberWithBool:self.isFree]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  if (self.hasPriceUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priceUnit", [NSNumber numberWithInteger:self.priceUnit]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasModifyDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifyDate", [NSNumber numberWithInteger:self.modifyDate]];
  }
  if (self.hasIsNew) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isNew", [NSNumber numberWithBool:self.isNew]];
  }
  if (self.hasDisableScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disableScore", [NSNumber numberWithBool:self.disableScore]];
  }
  if (self.hasDisablePractice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disablePractice", [NSNumber numberWithBool:self.disablePractice]];
  }
  if (self.hasDirectPass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"directPass", [NSNumber numberWithBool:self.directPass]];
  }
  if (self.hasPassScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passScore", [NSNumber numberWithInteger:self.passScore]];
  }
  if (self.hasTopRankType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topRankType", [NSNumber numberWithInteger:self.topRankType]];
  }
  if (self.hasUnlockAllStage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unlockAllStage", [NSNumber numberWithBool:self.unlockAllStage]];
  }
  if (self.hasSkipReplay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skipReplay", [NSNumber numberWithBool:self.skipReplay]];
  }
  if (self.hasSkipTips) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skipTips", [NSNumber numberWithBool:self.skipTips]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBTutorial class]]) {
    return NO;
  }
  PBTutorial *otherMessage = other;
  return
      self.hasTutorialId == otherMessage.hasTutorialId &&
      (!self.hasTutorialId || [self.tutorialId isEqual:otherMessage.tutorialId]) &&
      self.hasCnName == otherMessage.hasCnName &&
      (!self.hasCnName || [self.cnName isEqual:otherMessage.cnName]) &&
      self.hasEnName == otherMessage.hasEnName &&
      (!self.hasEnName || [self.enName isEqual:otherMessage.enName]) &&
      self.hasTcnName == otherMessage.hasTcnName &&
      (!self.hasTcnName || [self.tcnName isEqual:otherMessage.tcnName]) &&
      self.hasCnDesc == otherMessage.hasCnDesc &&
      (!self.hasCnDesc || [self.cnDesc isEqual:otherMessage.cnDesc]) &&
      self.hasEnDesc == otherMessage.hasEnDesc &&
      (!self.hasEnDesc || [self.enDesc isEqual:otherMessage.enDesc]) &&
      self.hasTcnDesc == otherMessage.hasTcnDesc &&
      (!self.hasTcnDesc || [self.tcnDesc isEqual:otherMessage.tcnDesc]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      [self.categoriesArray isEqualToArray:otherMessage.categoriesArray] &&
      self.hasIsFeature == otherMessage.hasIsFeature &&
      (!self.hasIsFeature || self.isFeature == otherMessage.isFeature) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasThumbImage == otherMessage.hasThumbImage &&
      (!self.hasThumbImage || [self.thumbImage isEqual:otherMessage.thumbImage]) &&
      self.hasDataUrl == otherMessage.hasDataUrl &&
      (!self.hasDataUrl || [self.dataUrl isEqual:otherMessage.dataUrl]) &&
      [self.stagesArray isEqualToArray:otherMessage.stagesArray] &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasDrawLevel == otherMessage.hasDrawLevel &&
      (!self.hasDrawLevel || self.drawLevel == otherMessage.drawLevel) &&
      self.hasIsFree == otherMessage.hasIsFree &&
      (!self.hasIsFree || self.isFree == otherMessage.isFree) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasPriceUnit == otherMessage.hasPriceUnit &&
      (!self.hasPriceUnit || self.priceUnit == otherMessage.priceUnit) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasModifyDate == otherMessage.hasModifyDate &&
      (!self.hasModifyDate || self.modifyDate == otherMessage.modifyDate) &&
      self.hasIsNew == otherMessage.hasIsNew &&
      (!self.hasIsNew || self.isNew == otherMessage.isNew) &&
      self.hasDisableScore == otherMessage.hasDisableScore &&
      (!self.hasDisableScore || self.disableScore == otherMessage.disableScore) &&
      self.hasDisablePractice == otherMessage.hasDisablePractice &&
      (!self.hasDisablePractice || self.disablePractice == otherMessage.disablePractice) &&
      self.hasDirectPass == otherMessage.hasDirectPass &&
      (!self.hasDirectPass || self.directPass == otherMessage.directPass) &&
      self.hasPassScore == otherMessage.hasPassScore &&
      (!self.hasPassScore || self.passScore == otherMessage.passScore) &&
      self.hasTopRankType == otherMessage.hasTopRankType &&
      (!self.hasTopRankType || self.topRankType == otherMessage.topRankType) &&
      self.hasUnlockAllStage == otherMessage.hasUnlockAllStage &&
      (!self.hasUnlockAllStage || self.unlockAllStage == otherMessage.unlockAllStage) &&
      self.hasSkipReplay == otherMessage.hasSkipReplay &&
      (!self.hasSkipReplay || self.skipReplay == otherMessage.skipReplay) &&
      self.hasSkipTips == otherMessage.hasSkipTips &&
      (!self.hasSkipTips || self.skipTips == otherMessage.skipTips) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTutorialId) {
    hashCode = hashCode * 31 + [self.tutorialId hash];
  }
  if (self.hasCnName) {
    hashCode = hashCode * 31 + [self.cnName hash];
  }
  if (self.hasEnName) {
    hashCode = hashCode * 31 + [self.enName hash];
  }
  if (self.hasTcnName) {
    hashCode = hashCode * 31 + [self.tcnName hash];
  }
  if (self.hasCnDesc) {
    hashCode = hashCode * 31 + [self.cnDesc hash];
  }
  if (self.hasEnDesc) {
    hashCode = hashCode * 31 + [self.enDesc hash];
  }
  if (self.hasTcnDesc) {
    hashCode = hashCode * 31 + [self.tcnDesc hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  [self.categoriesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasIsFeature) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFeature] hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasThumbImage) {
    hashCode = hashCode * 31 + [self.thumbImage hash];
  }
  if (self.hasDataUrl) {
    hashCode = hashCode * 31 + [self.dataUrl hash];
  }
  [self.stagesArray enumerateObjectsUsingBlock:^(PBStage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasDrawLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.drawLevel] hash];
  }
  if (self.hasIsFree) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFree] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  if (self.hasPriceUnit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.priceUnit] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasModifyDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.modifyDate] hash];
  }
  if (self.hasIsNew) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isNew] hash];
  }
  if (self.hasDisableScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.disableScore] hash];
  }
  if (self.hasDisablePractice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.disablePractice] hash];
  }
  if (self.hasDirectPass) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.directPass] hash];
  }
  if (self.hasPassScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.passScore] hash];
  }
  if (self.hasTopRankType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.topRankType] hash];
  }
  if (self.hasUnlockAllStage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.unlockAllStage] hash];
  }
  if (self.hasSkipReplay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.skipReplay] hash];
  }
  if (self.hasSkipTips) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.skipTips] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBTutorialBuilder()
@property (strong) PBTutorial* resultPbtutorial;
@end

@implementation PBTutorialBuilder
@synthesize resultPbtutorial;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbtutorial = [[PBTutorial alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbtutorial;
}
- (PBTutorialBuilder*) clear {
  self.resultPbtutorial = [[PBTutorial alloc] init];
  return self;
}
- (PBTutorialBuilder*) clone {
  return [PBTutorial builderWithPrototype:resultPbtutorial];
}
- (PBTutorial*) defaultInstance {
  return [PBTutorial defaultInstance];
}
- (PBTutorial*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBTutorial*) buildPartial {
  PBTutorial* returnMe = resultPbtutorial;
  self.resultPbtutorial = nil;
  return returnMe;
}
- (PBTutorialBuilder*) mergeFrom:(PBTutorial*) other {
  if (other == [PBTutorial defaultInstance]) {
    return self;
  }
  if (other.hasTutorialId) {
    [self setTutorialId:other.tutorialId];
  }
  if (other.hasCnName) {
    [self setCnName:other.cnName];
  }
  if (other.hasEnName) {
    [self setEnName:other.enName];
  }
  if (other.hasTcnName) {
    [self setTcnName:other.tcnName];
  }
  if (other.hasCnDesc) {
    [self setCnDesc:other.cnDesc];
  }
  if (other.hasEnDesc) {
    [self setEnDesc:other.enDesc];
  }
  if (other.hasTcnDesc) {
    [self setTcnDesc:other.tcnDesc];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.categoriesArray.count > 0) {
    if (resultPbtutorial.categoriesArray == nil) {
      resultPbtutorial.categoriesArray = [other.categoriesArray copy];
    } else {
      [resultPbtutorial.categoriesArray appendArray:other.categoriesArray];
    }
  }
  if (other.hasIsFeature) {
    [self setIsFeature:other.isFeature];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasThumbImage) {
    [self setThumbImage:other.thumbImage];
  }
  if (other.hasDataUrl) {
    [self setDataUrl:other.dataUrl];
  }
  if (other.stagesArray.count > 0) {
    if (resultPbtutorial.stagesArray == nil) {
      resultPbtutorial.stagesArray = [[NSMutableArray alloc] initWithArray:other.stagesArray];
    } else {
      [resultPbtutorial.stagesArray addObjectsFromArray:other.stagesArray];
    }
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasDrawLevel) {
    [self setDrawLevel:other.drawLevel];
  }
  if (other.hasIsFree) {
    [self setIsFree:other.isFree];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasPriceUnit) {
    [self setPriceUnit:other.priceUnit];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasModifyDate) {
    [self setModifyDate:other.modifyDate];
  }
  if (other.hasIsNew) {
    [self setIsNew:other.isNew];
  }
  if (other.hasDisableScore) {
    [self setDisableScore:other.disableScore];
  }
  if (other.hasDisablePractice) {
    [self setDisablePractice:other.disablePractice];
  }
  if (other.hasDirectPass) {
    [self setDirectPass:other.directPass];
  }
  if (other.hasPassScore) {
    [self setPassScore:other.passScore];
  }
  if (other.hasTopRankType) {
    [self setTopRankType:other.topRankType];
  }
  if (other.hasUnlockAllStage) {
    [self setUnlockAllStage:other.unlockAllStage];
  }
  if (other.hasSkipReplay) {
    [self setSkipReplay:other.skipReplay];
  }
  if (other.hasSkipTips) {
    [self setSkipTips:other.skipTips];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBTutorialBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBTutorialBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTutorialId:[input readString]];
        break;
      }
      case 18: {
        [self setCnName:[input readString]];
        break;
      }
      case 26: {
        [self setEnName:[input readString]];
        break;
      }
      case 34: {
        [self setTcnName:[input readString]];
        break;
      }
      case 82: {
        [self setCnDesc:[input readString]];
        break;
      }
      case 90: {
        [self setEnDesc:[input readString]];
        break;
      }
      case 98: {
        [self setTcnDesc:[input readString]];
        break;
      }
      case 160: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 168: {
        [self addCategories:[input readInt32]];
        break;
      }
      case 176: {
        [self setIsFeature:[input readBool]];
        break;
      }
      case 186: {
        [self setImage:[input readString]];
        break;
      }
      case 194: {
        [self setThumbImage:[input readString]];
        break;
      }
      case 202: {
        [self setDataUrl:[input readString]];
        break;
      }
      case 210: {
        PBStageBuilder* subBuilder = [PBStage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStages:[subBuilder buildPartial]];
        break;
      }
      case 216: {
        [self setType:[input readInt32]];
        break;
      }
      case 224: {
        [self setDrawLevel:[input readInt32]];
        break;
      }
      case 240: {
        [self setIsFree:[input readBool]];
        break;
      }
      case 248: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 256: {
        [self setPriceUnit:[input readInt32]];
        break;
      }
      case 320: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 328: {
        [self setModifyDate:[input readInt32]];
        break;
      }
      case 400: {
        [self setIsNew:[input readBool]];
        break;
      }
      case 480: {
        [self setDisableScore:[input readBool]];
        break;
      }
      case 488: {
        [self setDisablePractice:[input readBool]];
        break;
      }
      case 496: {
        [self setDirectPass:[input readBool]];
        break;
      }
      case 504: {
        [self setPassScore:[input readInt32]];
        break;
      }
      case 512: {
        [self setTopRankType:[input readInt32]];
        break;
      }
      case 520: {
        [self setUnlockAllStage:[input readBool]];
        break;
      }
      case 528: {
        [self setSkipReplay:[input readBool]];
        break;
      }
      case 536: {
        [self setSkipTips:[input readBool]];
        break;
      }
      case 800: {
        [self setVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTutorialId {
  return resultPbtutorial.hasTutorialId;
}
- (NSString*) tutorialId {
  return resultPbtutorial.tutorialId;
}
- (PBTutorialBuilder*) setTutorialId:(NSString*) value {
  resultPbtutorial.hasTutorialId = YES;
  resultPbtutorial.tutorialId = value;
  return self;
}
- (PBTutorialBuilder*) clearTutorialId {
  resultPbtutorial.hasTutorialId = NO;
  resultPbtutorial.tutorialId = @"";
  return self;
}
- (BOOL) hasCnName {
  return resultPbtutorial.hasCnName;
}
- (NSString*) cnName {
  return resultPbtutorial.cnName;
}
- (PBTutorialBuilder*) setCnName:(NSString*) value {
  resultPbtutorial.hasCnName = YES;
  resultPbtutorial.cnName = value;
  return self;
}
- (PBTutorialBuilder*) clearCnName {
  resultPbtutorial.hasCnName = NO;
  resultPbtutorial.cnName = @"";
  return self;
}
- (BOOL) hasEnName {
  return resultPbtutorial.hasEnName;
}
- (NSString*) enName {
  return resultPbtutorial.enName;
}
- (PBTutorialBuilder*) setEnName:(NSString*) value {
  resultPbtutorial.hasEnName = YES;
  resultPbtutorial.enName = value;
  return self;
}
- (PBTutorialBuilder*) clearEnName {
  resultPbtutorial.hasEnName = NO;
  resultPbtutorial.enName = @"";
  return self;
}
- (BOOL) hasTcnName {
  return resultPbtutorial.hasTcnName;
}
- (NSString*) tcnName {
  return resultPbtutorial.tcnName;
}
- (PBTutorialBuilder*) setTcnName:(NSString*) value {
  resultPbtutorial.hasTcnName = YES;
  resultPbtutorial.tcnName = value;
  return self;
}
- (PBTutorialBuilder*) clearTcnName {
  resultPbtutorial.hasTcnName = NO;
  resultPbtutorial.tcnName = @"";
  return self;
}
- (BOOL) hasCnDesc {
  return resultPbtutorial.hasCnDesc;
}
- (NSString*) cnDesc {
  return resultPbtutorial.cnDesc;
}
- (PBTutorialBuilder*) setCnDesc:(NSString*) value {
  resultPbtutorial.hasCnDesc = YES;
  resultPbtutorial.cnDesc = value;
  return self;
}
- (PBTutorialBuilder*) clearCnDesc {
  resultPbtutorial.hasCnDesc = NO;
  resultPbtutorial.cnDesc = @"";
  return self;
}
- (BOOL) hasEnDesc {
  return resultPbtutorial.hasEnDesc;
}
- (NSString*) enDesc {
  return resultPbtutorial.enDesc;
}
- (PBTutorialBuilder*) setEnDesc:(NSString*) value {
  resultPbtutorial.hasEnDesc = YES;
  resultPbtutorial.enDesc = value;
  return self;
}
- (PBTutorialBuilder*) clearEnDesc {
  resultPbtutorial.hasEnDesc = NO;
  resultPbtutorial.enDesc = @"";
  return self;
}
- (BOOL) hasTcnDesc {
  return resultPbtutorial.hasTcnDesc;
}
- (NSString*) tcnDesc {
  return resultPbtutorial.tcnDesc;
}
- (PBTutorialBuilder*) setTcnDesc:(NSString*) value {
  resultPbtutorial.hasTcnDesc = YES;
  resultPbtutorial.tcnDesc = value;
  return self;
}
- (PBTutorialBuilder*) clearTcnDesc {
  resultPbtutorial.hasTcnDesc = NO;
  resultPbtutorial.tcnDesc = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultPbtutorial.hasLevel;
}
- (SInt32) level {
  return resultPbtutorial.level;
}
- (PBTutorialBuilder*) setLevel:(SInt32) value {
  resultPbtutorial.hasLevel = YES;
  resultPbtutorial.level = value;
  return self;
}
- (PBTutorialBuilder*) clearLevel {
  resultPbtutorial.hasLevel = NO;
  resultPbtutorial.level = 0;
  return self;
}
- (PBAppendableArray *)categories {
  return resultPbtutorial.categoriesArray;
}
- (SInt32)categoriesAtIndex:(NSUInteger)index {
  return [resultPbtutorial categoriesAtIndex:index];
}
- (PBTutorialBuilder *)addCategories:(SInt32)value {
  if (resultPbtutorial.categoriesArray == nil) {
    resultPbtutorial.categoriesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbtutorial.categoriesArray addInt32:value];
  return self;
}
- (PBTutorialBuilder *)setCategoriesArray:(NSArray *)array {
  resultPbtutorial.categoriesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBTutorialBuilder *)setCategoriesValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbtutorial.categoriesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBTutorialBuilder *)clearCategories {
  resultPbtutorial.categoriesArray = nil;
  return self;
}
- (BOOL) hasIsFeature {
  return resultPbtutorial.hasIsFeature;
}
- (BOOL) isFeature {
  return resultPbtutorial.isFeature;
}
- (PBTutorialBuilder*) setIsFeature:(BOOL) value {
  resultPbtutorial.hasIsFeature = YES;
  resultPbtutorial.isFeature = value;
  return self;
}
- (PBTutorialBuilder*) clearIsFeature {
  resultPbtutorial.hasIsFeature = NO;
  resultPbtutorial.isFeature = NO;
  return self;
}
- (BOOL) hasImage {
  return resultPbtutorial.hasImage;
}
- (NSString*) image {
  return resultPbtutorial.image;
}
- (PBTutorialBuilder*) setImage:(NSString*) value {
  resultPbtutorial.hasImage = YES;
  resultPbtutorial.image = value;
  return self;
}
- (PBTutorialBuilder*) clearImage {
  resultPbtutorial.hasImage = NO;
  resultPbtutorial.image = @"";
  return self;
}
- (BOOL) hasThumbImage {
  return resultPbtutorial.hasThumbImage;
}
- (NSString*) thumbImage {
  return resultPbtutorial.thumbImage;
}
- (PBTutorialBuilder*) setThumbImage:(NSString*) value {
  resultPbtutorial.hasThumbImage = YES;
  resultPbtutorial.thumbImage = value;
  return self;
}
- (PBTutorialBuilder*) clearThumbImage {
  resultPbtutorial.hasThumbImage = NO;
  resultPbtutorial.thumbImage = @"";
  return self;
}
- (BOOL) hasDataUrl {
  return resultPbtutorial.hasDataUrl;
}
- (NSString*) dataUrl {
  return resultPbtutorial.dataUrl;
}
- (PBTutorialBuilder*) setDataUrl:(NSString*) value {
  resultPbtutorial.hasDataUrl = YES;
  resultPbtutorial.dataUrl = value;
  return self;
}
- (PBTutorialBuilder*) clearDataUrl {
  resultPbtutorial.hasDataUrl = NO;
  resultPbtutorial.dataUrl = @"";
  return self;
}
- (NSMutableArray *)stages {
  return resultPbtutorial.stagesArray;
}
- (PBStage*)stagesAtIndex:(NSUInteger)index {
  return [resultPbtutorial stagesAtIndex:index];
}
- (PBTutorialBuilder *)addStages:(PBStage*)value {
  if (resultPbtutorial.stagesArray == nil) {
    resultPbtutorial.stagesArray = [[NSMutableArray alloc]init];
  }
  [resultPbtutorial.stagesArray addObject:value];
  return self;
}
- (PBTutorialBuilder *)setStagesArray:(NSArray *)array {
  resultPbtutorial.stagesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBTutorialBuilder *)clearStages {
  resultPbtutorial.stagesArray = nil;
  return self;
}
- (BOOL) hasType {
  return resultPbtutorial.hasType;
}
- (SInt32) type {
  return resultPbtutorial.type;
}
- (PBTutorialBuilder*) setType:(SInt32) value {
  resultPbtutorial.hasType = YES;
  resultPbtutorial.type = value;
  return self;
}
- (PBTutorialBuilder*) clearType {
  resultPbtutorial.hasType = NO;
  resultPbtutorial.type = 0;
  return self;
}
- (BOOL) hasDrawLevel {
  return resultPbtutorial.hasDrawLevel;
}
- (SInt32) drawLevel {
  return resultPbtutorial.drawLevel;
}
- (PBTutorialBuilder*) setDrawLevel:(SInt32) value {
  resultPbtutorial.hasDrawLevel = YES;
  resultPbtutorial.drawLevel = value;
  return self;
}
- (PBTutorialBuilder*) clearDrawLevel {
  resultPbtutorial.hasDrawLevel = NO;
  resultPbtutorial.drawLevel = 1;
  return self;
}
- (BOOL) hasIsFree {
  return resultPbtutorial.hasIsFree;
}
- (BOOL) isFree {
  return resultPbtutorial.isFree;
}
- (PBTutorialBuilder*) setIsFree:(BOOL) value {
  resultPbtutorial.hasIsFree = YES;
  resultPbtutorial.isFree = value;
  return self;
}
- (PBTutorialBuilder*) clearIsFree {
  resultPbtutorial.hasIsFree = NO;
  resultPbtutorial.isFree = YES;
  return self;
}
- (BOOL) hasPrice {
  return resultPbtutorial.hasPrice;
}
- (SInt32) price {
  return resultPbtutorial.price;
}
- (PBTutorialBuilder*) setPrice:(SInt32) value {
  resultPbtutorial.hasPrice = YES;
  resultPbtutorial.price = value;
  return self;
}
- (PBTutorialBuilder*) clearPrice {
  resultPbtutorial.hasPrice = NO;
  resultPbtutorial.price = 0;
  return self;
}
- (BOOL) hasPriceUnit {
  return resultPbtutorial.hasPriceUnit;
}
- (SInt32) priceUnit {
  return resultPbtutorial.priceUnit;
}
- (PBTutorialBuilder*) setPriceUnit:(SInt32) value {
  resultPbtutorial.hasPriceUnit = YES;
  resultPbtutorial.priceUnit = value;
  return self;
}
- (PBTutorialBuilder*) clearPriceUnit {
  resultPbtutorial.hasPriceUnit = NO;
  resultPbtutorial.priceUnit = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbtutorial.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbtutorial.createDate;
}
- (PBTutorialBuilder*) setCreateDate:(SInt32) value {
  resultPbtutorial.hasCreateDate = YES;
  resultPbtutorial.createDate = value;
  return self;
}
- (PBTutorialBuilder*) clearCreateDate {
  resultPbtutorial.hasCreateDate = NO;
  resultPbtutorial.createDate = 0;
  return self;
}
- (BOOL) hasModifyDate {
  return resultPbtutorial.hasModifyDate;
}
- (SInt32) modifyDate {
  return resultPbtutorial.modifyDate;
}
- (PBTutorialBuilder*) setModifyDate:(SInt32) value {
  resultPbtutorial.hasModifyDate = YES;
  resultPbtutorial.modifyDate = value;
  return self;
}
- (PBTutorialBuilder*) clearModifyDate {
  resultPbtutorial.hasModifyDate = NO;
  resultPbtutorial.modifyDate = 0;
  return self;
}
- (BOOL) hasIsNew {
  return resultPbtutorial.hasIsNew;
}
- (BOOL) isNew {
  return resultPbtutorial.isNew;
}
- (PBTutorialBuilder*) setIsNew:(BOOL) value {
  resultPbtutorial.hasIsNew = YES;
  resultPbtutorial.isNew = value;
  return self;
}
- (PBTutorialBuilder*) clearIsNew {
  resultPbtutorial.hasIsNew = NO;
  resultPbtutorial.isNew = NO;
  return self;
}
- (BOOL) hasDisableScore {
  return resultPbtutorial.hasDisableScore;
}
- (BOOL) disableScore {
  return resultPbtutorial.disableScore;
}
- (PBTutorialBuilder*) setDisableScore:(BOOL) value {
  resultPbtutorial.hasDisableScore = YES;
  resultPbtutorial.disableScore = value;
  return self;
}
- (PBTutorialBuilder*) clearDisableScore {
  resultPbtutorial.hasDisableScore = NO;
  resultPbtutorial.disableScore = NO;
  return self;
}
- (BOOL) hasDisablePractice {
  return resultPbtutorial.hasDisablePractice;
}
- (BOOL) disablePractice {
  return resultPbtutorial.disablePractice;
}
- (PBTutorialBuilder*) setDisablePractice:(BOOL) value {
  resultPbtutorial.hasDisablePractice = YES;
  resultPbtutorial.disablePractice = value;
  return self;
}
- (PBTutorialBuilder*) clearDisablePractice {
  resultPbtutorial.hasDisablePractice = NO;
  resultPbtutorial.disablePractice = NO;
  return self;
}
- (BOOL) hasDirectPass {
  return resultPbtutorial.hasDirectPass;
}
- (BOOL) directPass {
  return resultPbtutorial.directPass;
}
- (PBTutorialBuilder*) setDirectPass:(BOOL) value {
  resultPbtutorial.hasDirectPass = YES;
  resultPbtutorial.directPass = value;
  return self;
}
- (PBTutorialBuilder*) clearDirectPass {
  resultPbtutorial.hasDirectPass = NO;
  resultPbtutorial.directPass = NO;
  return self;
}
- (BOOL) hasPassScore {
  return resultPbtutorial.hasPassScore;
}
- (SInt32) passScore {
  return resultPbtutorial.passScore;
}
- (PBTutorialBuilder*) setPassScore:(SInt32) value {
  resultPbtutorial.hasPassScore = YES;
  resultPbtutorial.passScore = value;
  return self;
}
- (PBTutorialBuilder*) clearPassScore {
  resultPbtutorial.hasPassScore = NO;
  resultPbtutorial.passScore = 60;
  return self;
}
- (BOOL) hasTopRankType {
  return resultPbtutorial.hasTopRankType;
}
- (SInt32) topRankType {
  return resultPbtutorial.topRankType;
}
- (PBTutorialBuilder*) setTopRankType:(SInt32) value {
  resultPbtutorial.hasTopRankType = YES;
  resultPbtutorial.topRankType = value;
  return self;
}
- (PBTutorialBuilder*) clearTopRankType {
  resultPbtutorial.hasTopRankType = NO;
  resultPbtutorial.topRankType = 0;
  return self;
}
- (BOOL) hasUnlockAllStage {
  return resultPbtutorial.hasUnlockAllStage;
}
- (BOOL) unlockAllStage {
  return resultPbtutorial.unlockAllStage;
}
- (PBTutorialBuilder*) setUnlockAllStage:(BOOL) value {
  resultPbtutorial.hasUnlockAllStage = YES;
  resultPbtutorial.unlockAllStage = value;
  return self;
}
- (PBTutorialBuilder*) clearUnlockAllStage {
  resultPbtutorial.hasUnlockAllStage = NO;
  resultPbtutorial.unlockAllStage = NO;
  return self;
}
- (BOOL) hasSkipReplay {
  return resultPbtutorial.hasSkipReplay;
}
- (BOOL) skipReplay {
  return resultPbtutorial.skipReplay;
}
- (PBTutorialBuilder*) setSkipReplay:(BOOL) value {
  resultPbtutorial.hasSkipReplay = YES;
  resultPbtutorial.skipReplay = value;
  return self;
}
- (PBTutorialBuilder*) clearSkipReplay {
  resultPbtutorial.hasSkipReplay = NO;
  resultPbtutorial.skipReplay = NO;
  return self;
}
- (BOOL) hasSkipTips {
  return resultPbtutorial.hasSkipTips;
}
- (BOOL) skipTips {
  return resultPbtutorial.skipTips;
}
- (PBTutorialBuilder*) setSkipTips:(BOOL) value {
  resultPbtutorial.hasSkipTips = YES;
  resultPbtutorial.skipTips = value;
  return self;
}
- (PBTutorialBuilder*) clearSkipTips {
  resultPbtutorial.hasSkipTips = NO;
  resultPbtutorial.skipTips = NO;
  return self;
}
- (BOOL) hasVersion {
  return resultPbtutorial.hasVersion;
}
- (SInt32) version {
  return resultPbtutorial.version;
}
- (PBTutorialBuilder*) setVersion:(SInt32) value {
  resultPbtutorial.hasVersion = YES;
  resultPbtutorial.version = value;
  return self;
}
- (PBTutorialBuilder*) clearVersion {
  resultPbtutorial.hasVersion = NO;
  resultPbtutorial.version = 0;
  return self;
}
@end

@interface PBTutorialCore ()
@property (strong) NSMutableArray * tutorialsArray;
@property SInt32 version;
@property (strong) NSMutableArray * stepByStepTutorialIdArray;
@end

@implementation PBTutorialCore

@synthesize tutorialsArray;
@dynamic tutorials;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
@synthesize stepByStepTutorialIdArray;
@dynamic stepByStepTutorialId;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
  }
  return self;
}
static PBTutorialCore* defaultPBTutorialCoreInstance = nil;
+ (void) initialize {
  if (self == [PBTutorialCore class]) {
    defaultPBTutorialCoreInstance = [[PBTutorialCore alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBTutorialCoreInstance;
}
- (instancetype) defaultInstance {
  return defaultPBTutorialCoreInstance;
}
- (NSArray *)tutorials {
  return tutorialsArray;
}
- (PBTutorial*)tutorialsAtIndex:(NSUInteger)index {
  return [tutorialsArray objectAtIndex:index];
}
- (NSArray *)stepByStepTutorialId {
  return stepByStepTutorialIdArray;
}
- (NSString*)stepByStepTutorialIdAtIndex:(NSUInteger)index {
  return [stepByStepTutorialIdArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInittutorials = YES;
   [self.tutorials enumerateObjectsUsingBlock:^(PBTutorial *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittutorials = NO;
      *stop = YES;
    }
  }];
  if (!isInittutorials) return isInittutorials;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.tutorialsArray enumerateObjectsUsingBlock:^(PBTutorial *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasVersion) {
    [output writeInt32:2 value:self.version];
  }
  [self.stepByStepTutorialIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:10 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.tutorialsArray enumerateObjectsUsingBlock:^(PBTutorial *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasVersion) {
    size_ += computeInt32Size(2, self.version);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.stepByStepTutorialIdArray.count;
    [self.stepByStepTutorialIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBTutorialCore*) parseFromData:(NSData*) data {
  return (PBTutorialCore*)[[[PBTutorialCore builder] mergeFromData:data] build];
}
+ (PBTutorialCore*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTutorialCore*)[[[PBTutorialCore builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBTutorialCore*) parseFromInputStream:(NSInputStream*) input {
  return (PBTutorialCore*)[[[PBTutorialCore builder] mergeFromInputStream:input] build];
}
+ (PBTutorialCore*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTutorialCore*)[[[PBTutorialCore builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTutorialCore*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBTutorialCore*)[[[PBTutorialCore builder] mergeFromCodedInputStream:input] build];
}
+ (PBTutorialCore*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTutorialCore*)[[[PBTutorialCore builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTutorialCoreBuilder*) builder {
  return [[PBTutorialCoreBuilder alloc] init];
}
+ (PBTutorialCoreBuilder*) builderWithPrototype:(PBTutorialCore*) prototype {
  return [[PBTutorialCore builder] mergeFrom:prototype];
}
- (PBTutorialCoreBuilder*) builder {
  return [PBTutorialCore builder];
}
- (PBTutorialCoreBuilder*) toBuilder {
  return [PBTutorialCore builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.tutorialsArray enumerateObjectsUsingBlock:^(PBTutorial *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tutorials"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  [self.stepByStepTutorialIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stepByStepTutorialId", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBTutorialCore class]]) {
    return NO;
  }
  PBTutorialCore *otherMessage = other;
  return
      [self.tutorialsArray isEqualToArray:otherMessage.tutorialsArray] &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      [self.stepByStepTutorialIdArray isEqualToArray:otherMessage.stepByStepTutorialIdArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.tutorialsArray enumerateObjectsUsingBlock:^(PBTutorial *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  [self.stepByStepTutorialIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBTutorialCoreBuilder()
@property (strong) PBTutorialCore* resultPbtutorialCore;
@end

@implementation PBTutorialCoreBuilder
@synthesize resultPbtutorialCore;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbtutorialCore = [[PBTutorialCore alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbtutorialCore;
}
- (PBTutorialCoreBuilder*) clear {
  self.resultPbtutorialCore = [[PBTutorialCore alloc] init];
  return self;
}
- (PBTutorialCoreBuilder*) clone {
  return [PBTutorialCore builderWithPrototype:resultPbtutorialCore];
}
- (PBTutorialCore*) defaultInstance {
  return [PBTutorialCore defaultInstance];
}
- (PBTutorialCore*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBTutorialCore*) buildPartial {
  PBTutorialCore* returnMe = resultPbtutorialCore;
  self.resultPbtutorialCore = nil;
  return returnMe;
}
- (PBTutorialCoreBuilder*) mergeFrom:(PBTutorialCore*) other {
  if (other == [PBTutorialCore defaultInstance]) {
    return self;
  }
  if (other.tutorialsArray.count > 0) {
    if (resultPbtutorialCore.tutorialsArray == nil) {
      resultPbtutorialCore.tutorialsArray = [[NSMutableArray alloc] initWithArray:other.tutorialsArray];
    } else {
      [resultPbtutorialCore.tutorialsArray addObjectsFromArray:other.tutorialsArray];
    }
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.stepByStepTutorialIdArray.count > 0) {
    if (resultPbtutorialCore.stepByStepTutorialIdArray == nil) {
      resultPbtutorialCore.stepByStepTutorialIdArray = [[NSMutableArray alloc] initWithArray:other.stepByStepTutorialIdArray];
    } else {
      [resultPbtutorialCore.stepByStepTutorialIdArray addObjectsFromArray:other.stepByStepTutorialIdArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBTutorialCoreBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBTutorialCoreBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBTutorialBuilder* subBuilder = [PBTutorial builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTutorials:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 82: {
        [self addStepByStepTutorialId:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)tutorials {
  return resultPbtutorialCore.tutorialsArray;
}
- (PBTutorial*)tutorialsAtIndex:(NSUInteger)index {
  return [resultPbtutorialCore tutorialsAtIndex:index];
}
- (PBTutorialCoreBuilder *)addTutorials:(PBTutorial*)value {
  if (resultPbtutorialCore.tutorialsArray == nil) {
    resultPbtutorialCore.tutorialsArray = [[NSMutableArray alloc]init];
  }
  [resultPbtutorialCore.tutorialsArray addObject:value];
  return self;
}
- (PBTutorialCoreBuilder *)setTutorialsArray:(NSArray *)array {
  resultPbtutorialCore.tutorialsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBTutorialCoreBuilder *)clearTutorials {
  resultPbtutorialCore.tutorialsArray = nil;
  return self;
}
- (BOOL) hasVersion {
  return resultPbtutorialCore.hasVersion;
}
- (SInt32) version {
  return resultPbtutorialCore.version;
}
- (PBTutorialCoreBuilder*) setVersion:(SInt32) value {
  resultPbtutorialCore.hasVersion = YES;
  resultPbtutorialCore.version = value;
  return self;
}
- (PBTutorialCoreBuilder*) clearVersion {
  resultPbtutorialCore.hasVersion = NO;
  resultPbtutorialCore.version = 0;
  return self;
}
- (NSMutableArray *)stepByStepTutorialId {
  return resultPbtutorialCore.stepByStepTutorialIdArray;
}
- (NSString*)stepByStepTutorialIdAtIndex:(NSUInteger)index {
  return [resultPbtutorialCore stepByStepTutorialIdAtIndex:index];
}
- (PBTutorialCoreBuilder *)addStepByStepTutorialId:(NSString*)value {
  if (resultPbtutorialCore.stepByStepTutorialIdArray == nil) {
    resultPbtutorialCore.stepByStepTutorialIdArray = [[NSMutableArray alloc]init];
  }
  [resultPbtutorialCore.stepByStepTutorialIdArray addObject:value];
  return self;
}
- (PBTutorialCoreBuilder *)setStepByStepTutorialIdArray:(NSArray *)array {
  resultPbtutorialCore.stepByStepTutorialIdArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBTutorialCoreBuilder *)clearStepByStepTutorialId {
  resultPbtutorialCore.stepByStepTutorialIdArray = nil;
  return self;
}
@end

@interface PBUserStageOpus ()
@property (strong) NSString* localOpusId;
@property (strong) NSString* remoteOpusId;
@property SInt32 score;
@property SInt32 createDate;
@property (strong) NSString* localUrl;
@property (strong) NSString* remoteUrl;
@end

@implementation PBUserStageOpus

- (BOOL) hasLocalOpusId {
  return !!hasLocalOpusId_;
}
- (void) setHasLocalOpusId:(BOOL) _value_ {
  hasLocalOpusId_ = !!_value_;
}
@synthesize localOpusId;
- (BOOL) hasRemoteOpusId {
  return !!hasRemoteOpusId_;
}
- (void) setHasRemoteOpusId:(BOOL) _value_ {
  hasRemoteOpusId_ = !!_value_;
}
@synthesize remoteOpusId;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasLocalUrl {
  return !!hasLocalUrl_;
}
- (void) setHasLocalUrl:(BOOL) _value_ {
  hasLocalUrl_ = !!_value_;
}
@synthesize localUrl;
- (BOOL) hasRemoteUrl {
  return !!hasRemoteUrl_;
}
- (void) setHasRemoteUrl:(BOOL) _value_ {
  hasRemoteUrl_ = !!_value_;
}
@synthesize remoteUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.localOpusId = @"";
    self.remoteOpusId = @"";
    self.score = 0;
    self.createDate = 0;
    self.localUrl = @"";
    self.remoteUrl = @"";
  }
  return self;
}
static PBUserStageOpus* defaultPBUserStageOpusInstance = nil;
+ (void) initialize {
  if (self == [PBUserStageOpus class]) {
    defaultPBUserStageOpusInstance = [[PBUserStageOpus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserStageOpusInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserStageOpusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLocalOpusId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLocalOpusId) {
    [output writeString:1 value:self.localOpusId];
  }
  if (self.hasRemoteOpusId) {
    [output writeString:2 value:self.remoteOpusId];
  }
  if (self.hasScore) {
    [output writeInt32:4 value:self.score];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasLocalUrl) {
    [output writeString:6 value:self.localUrl];
  }
  if (self.hasRemoteUrl) {
    [output writeString:7 value:self.remoteUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLocalOpusId) {
    size_ += computeStringSize(1, self.localOpusId);
  }
  if (self.hasRemoteOpusId) {
    size_ += computeStringSize(2, self.remoteOpusId);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(4, self.score);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(5, self.createDate);
  }
  if (self.hasLocalUrl) {
    size_ += computeStringSize(6, self.localUrl);
  }
  if (self.hasRemoteUrl) {
    size_ += computeStringSize(7, self.remoteUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserStageOpus*) parseFromData:(NSData*) data {
  return (PBUserStageOpus*)[[[PBUserStageOpus builder] mergeFromData:data] build];
}
+ (PBUserStageOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserStageOpus*)[[[PBUserStageOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserStageOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserStageOpus*)[[[PBUserStageOpus builder] mergeFromInputStream:input] build];
}
+ (PBUserStageOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserStageOpus*)[[[PBUserStageOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserStageOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserStageOpus*)[[[PBUserStageOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserStageOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserStageOpus*)[[[PBUserStageOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserStageOpusBuilder*) builder {
  return [[PBUserStageOpusBuilder alloc] init];
}
+ (PBUserStageOpusBuilder*) builderWithPrototype:(PBUserStageOpus*) prototype {
  return [[PBUserStageOpus builder] mergeFrom:prototype];
}
- (PBUserStageOpusBuilder*) builder {
  return [PBUserStageOpus builder];
}
- (PBUserStageOpusBuilder*) toBuilder {
  return [PBUserStageOpus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLocalOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localOpusId", self.localOpusId];
  }
  if (self.hasRemoteOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remoteOpusId", self.remoteOpusId];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasLocalUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localUrl", self.localUrl];
  }
  if (self.hasRemoteUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remoteUrl", self.remoteUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserStageOpus class]]) {
    return NO;
  }
  PBUserStageOpus *otherMessage = other;
  return
      self.hasLocalOpusId == otherMessage.hasLocalOpusId &&
      (!self.hasLocalOpusId || [self.localOpusId isEqual:otherMessage.localOpusId]) &&
      self.hasRemoteOpusId == otherMessage.hasRemoteOpusId &&
      (!self.hasRemoteOpusId || [self.remoteOpusId isEqual:otherMessage.remoteOpusId]) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasLocalUrl == otherMessage.hasLocalUrl &&
      (!self.hasLocalUrl || [self.localUrl isEqual:otherMessage.localUrl]) &&
      self.hasRemoteUrl == otherMessage.hasRemoteUrl &&
      (!self.hasRemoteUrl || [self.remoteUrl isEqual:otherMessage.remoteUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLocalOpusId) {
    hashCode = hashCode * 31 + [self.localOpusId hash];
  }
  if (self.hasRemoteOpusId) {
    hashCode = hashCode * 31 + [self.remoteOpusId hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasLocalUrl) {
    hashCode = hashCode * 31 + [self.localUrl hash];
  }
  if (self.hasRemoteUrl) {
    hashCode = hashCode * 31 + [self.remoteUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserStageOpusBuilder()
@property (strong) PBUserStageOpus* resultPbuserStageOpus;
@end

@implementation PBUserStageOpusBuilder
@synthesize resultPbuserStageOpus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserStageOpus = [[PBUserStageOpus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserStageOpus;
}
- (PBUserStageOpusBuilder*) clear {
  self.resultPbuserStageOpus = [[PBUserStageOpus alloc] init];
  return self;
}
- (PBUserStageOpusBuilder*) clone {
  return [PBUserStageOpus builderWithPrototype:resultPbuserStageOpus];
}
- (PBUserStageOpus*) defaultInstance {
  return [PBUserStageOpus defaultInstance];
}
- (PBUserStageOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserStageOpus*) buildPartial {
  PBUserStageOpus* returnMe = resultPbuserStageOpus;
  self.resultPbuserStageOpus = nil;
  return returnMe;
}
- (PBUserStageOpusBuilder*) mergeFrom:(PBUserStageOpus*) other {
  if (other == [PBUserStageOpus defaultInstance]) {
    return self;
  }
  if (other.hasLocalOpusId) {
    [self setLocalOpusId:other.localOpusId];
  }
  if (other.hasRemoteOpusId) {
    [self setRemoteOpusId:other.remoteOpusId];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasLocalUrl) {
    [self setLocalUrl:other.localUrl];
  }
  if (other.hasRemoteUrl) {
    [self setRemoteUrl:other.remoteUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserStageOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserStageOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLocalOpusId:[input readString]];
        break;
      }
      case 18: {
        [self setRemoteOpusId:[input readString]];
        break;
      }
      case 32: {
        [self setScore:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 50: {
        [self setLocalUrl:[input readString]];
        break;
      }
      case 58: {
        [self setRemoteUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLocalOpusId {
  return resultPbuserStageOpus.hasLocalOpusId;
}
- (NSString*) localOpusId {
  return resultPbuserStageOpus.localOpusId;
}
- (PBUserStageOpusBuilder*) setLocalOpusId:(NSString*) value {
  resultPbuserStageOpus.hasLocalOpusId = YES;
  resultPbuserStageOpus.localOpusId = value;
  return self;
}
- (PBUserStageOpusBuilder*) clearLocalOpusId {
  resultPbuserStageOpus.hasLocalOpusId = NO;
  resultPbuserStageOpus.localOpusId = @"";
  return self;
}
- (BOOL) hasRemoteOpusId {
  return resultPbuserStageOpus.hasRemoteOpusId;
}
- (NSString*) remoteOpusId {
  return resultPbuserStageOpus.remoteOpusId;
}
- (PBUserStageOpusBuilder*) setRemoteOpusId:(NSString*) value {
  resultPbuserStageOpus.hasRemoteOpusId = YES;
  resultPbuserStageOpus.remoteOpusId = value;
  return self;
}
- (PBUserStageOpusBuilder*) clearRemoteOpusId {
  resultPbuserStageOpus.hasRemoteOpusId = NO;
  resultPbuserStageOpus.remoteOpusId = @"";
  return self;
}
- (BOOL) hasScore {
  return resultPbuserStageOpus.hasScore;
}
- (SInt32) score {
  return resultPbuserStageOpus.score;
}
- (PBUserStageOpusBuilder*) setScore:(SInt32) value {
  resultPbuserStageOpus.hasScore = YES;
  resultPbuserStageOpus.score = value;
  return self;
}
- (PBUserStageOpusBuilder*) clearScore {
  resultPbuserStageOpus.hasScore = NO;
  resultPbuserStageOpus.score = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbuserStageOpus.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbuserStageOpus.createDate;
}
- (PBUserStageOpusBuilder*) setCreateDate:(SInt32) value {
  resultPbuserStageOpus.hasCreateDate = YES;
  resultPbuserStageOpus.createDate = value;
  return self;
}
- (PBUserStageOpusBuilder*) clearCreateDate {
  resultPbuserStageOpus.hasCreateDate = NO;
  resultPbuserStageOpus.createDate = 0;
  return self;
}
- (BOOL) hasLocalUrl {
  return resultPbuserStageOpus.hasLocalUrl;
}
- (NSString*) localUrl {
  return resultPbuserStageOpus.localUrl;
}
- (PBUserStageOpusBuilder*) setLocalUrl:(NSString*) value {
  resultPbuserStageOpus.hasLocalUrl = YES;
  resultPbuserStageOpus.localUrl = value;
  return self;
}
- (PBUserStageOpusBuilder*) clearLocalUrl {
  resultPbuserStageOpus.hasLocalUrl = NO;
  resultPbuserStageOpus.localUrl = @"";
  return self;
}
- (BOOL) hasRemoteUrl {
  return resultPbuserStageOpus.hasRemoteUrl;
}
- (NSString*) remoteUrl {
  return resultPbuserStageOpus.remoteUrl;
}
- (PBUserStageOpusBuilder*) setRemoteUrl:(NSString*) value {
  resultPbuserStageOpus.hasRemoteUrl = YES;
  resultPbuserStageOpus.remoteUrl = value;
  return self;
}
- (PBUserStageOpusBuilder*) clearRemoteUrl {
  resultPbuserStageOpus.hasRemoteUrl = NO;
  resultPbuserStageOpus.remoteUrl = @"";
  return self;
}
@end

@interface PBUserStage ()
@property (strong) NSString* userId;
@property (strong) NSString* tutorialId;
@property (strong) NSString* stageId;
@property SInt32 stageIndex;
@property (strong) NSMutableArray * opusArray;
@property SInt32 currentChapterIndex;
@property (strong) NSString* practiceLocalOpusId;
@property (strong) NSString* conquerLocalOpusId;
@property (strong) NSString* conquerLocalImage;
@property (strong) NSString* bestOpusId;
@property SInt32 bestScore;
@property SInt32 bestScoreDate;
@property (strong) NSString* lastOpusId;
@property SInt32 lastScore;
@property SInt32 lastScoreDate;
@property SInt32 totalCount;
@property SInt32 defeatCount;
@end

@implementation PBUserStage

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTutorialId {
  return !!hasTutorialId_;
}
- (void) setHasTutorialId:(BOOL) _value_ {
  hasTutorialId_ = !!_value_;
}
@synthesize tutorialId;
- (BOOL) hasStageId {
  return !!hasStageId_;
}
- (void) setHasStageId:(BOOL) _value_ {
  hasStageId_ = !!_value_;
}
@synthesize stageId;
- (BOOL) hasStageIndex {
  return !!hasStageIndex_;
}
- (void) setHasStageIndex:(BOOL) _value_ {
  hasStageIndex_ = !!_value_;
}
@synthesize stageIndex;
@synthesize opusArray;
@dynamic opus;
- (BOOL) hasCurrentChapterIndex {
  return !!hasCurrentChapterIndex_;
}
- (void) setHasCurrentChapterIndex:(BOOL) _value_ {
  hasCurrentChapterIndex_ = !!_value_;
}
@synthesize currentChapterIndex;
- (BOOL) hasPracticeLocalOpusId {
  return !!hasPracticeLocalOpusId_;
}
- (void) setHasPracticeLocalOpusId:(BOOL) _value_ {
  hasPracticeLocalOpusId_ = !!_value_;
}
@synthesize practiceLocalOpusId;
- (BOOL) hasConquerLocalOpusId {
  return !!hasConquerLocalOpusId_;
}
- (void) setHasConquerLocalOpusId:(BOOL) _value_ {
  hasConquerLocalOpusId_ = !!_value_;
}
@synthesize conquerLocalOpusId;
- (BOOL) hasConquerLocalImage {
  return !!hasConquerLocalImage_;
}
- (void) setHasConquerLocalImage:(BOOL) _value_ {
  hasConquerLocalImage_ = !!_value_;
}
@synthesize conquerLocalImage;
- (BOOL) hasBestOpusId {
  return !!hasBestOpusId_;
}
- (void) setHasBestOpusId:(BOOL) _value_ {
  hasBestOpusId_ = !!_value_;
}
@synthesize bestOpusId;
- (BOOL) hasBestScore {
  return !!hasBestScore_;
}
- (void) setHasBestScore:(BOOL) _value_ {
  hasBestScore_ = !!_value_;
}
@synthesize bestScore;
- (BOOL) hasBestScoreDate {
  return !!hasBestScoreDate_;
}
- (void) setHasBestScoreDate:(BOOL) _value_ {
  hasBestScoreDate_ = !!_value_;
}
@synthesize bestScoreDate;
- (BOOL) hasLastOpusId {
  return !!hasLastOpusId_;
}
- (void) setHasLastOpusId:(BOOL) _value_ {
  hasLastOpusId_ = !!_value_;
}
@synthesize lastOpusId;
- (BOOL) hasLastScore {
  return !!hasLastScore_;
}
- (void) setHasLastScore:(BOOL) _value_ {
  hasLastScore_ = !!_value_;
}
@synthesize lastScore;
- (BOOL) hasLastScoreDate {
  return !!hasLastScoreDate_;
}
- (void) setHasLastScoreDate:(BOOL) _value_ {
  hasLastScoreDate_ = !!_value_;
}
@synthesize lastScoreDate;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) _value_ {
  hasTotalCount_ = !!_value_;
}
@synthesize totalCount;
- (BOOL) hasDefeatCount {
  return !!hasDefeatCount_;
}
- (void) setHasDefeatCount:(BOOL) _value_ {
  hasDefeatCount_ = !!_value_;
}
@synthesize defeatCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.tutorialId = @"";
    self.stageId = @"";
    self.stageIndex = 0;
    self.currentChapterIndex = 0;
    self.practiceLocalOpusId = @"";
    self.conquerLocalOpusId = @"";
    self.conquerLocalImage = @"";
    self.bestOpusId = @"";
    self.bestScore = 0;
    self.bestScoreDate = 0;
    self.lastOpusId = @"";
    self.lastScore = 0;
    self.lastScoreDate = 0;
    self.totalCount = 0;
    self.defeatCount = 0;
  }
  return self;
}
static PBUserStage* defaultPBUserStageInstance = nil;
+ (void) initialize {
  if (self == [PBUserStage class]) {
    defaultPBUserStageInstance = [[PBUserStage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserStageInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserStageInstance;
}
- (NSArray *)opus {
  return opusArray;
}
- (PBUserStageOpus*)opusAtIndex:(NSUInteger)index {
  return [opusArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTutorialId) {
    return NO;
  }
  if (!self.hasStageId) {
    return NO;
  }
  __block BOOL isInitopus = YES;
   [self.opus enumerateObjectsUsingBlock:^(PBUserStageOpus *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitopus = NO;
      *stop = YES;
    }
  }];
  if (!isInitopus) return isInitopus;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasTutorialId) {
    [output writeString:2 value:self.tutorialId];
  }
  if (self.hasStageId) {
    [output writeString:3 value:self.stageId];
  }
  if (self.hasStageIndex) {
    [output writeInt32:4 value:self.stageIndex];
  }
  [self.opusArray enumerateObjectsUsingBlock:^(PBUserStageOpus *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasCurrentChapterIndex) {
    [output writeInt32:10 value:self.currentChapterIndex];
  }
  if (self.hasPracticeLocalOpusId) {
    [output writeString:20 value:self.practiceLocalOpusId];
  }
  if (self.hasConquerLocalOpusId) {
    [output writeString:30 value:self.conquerLocalOpusId];
  }
  if (self.hasConquerLocalImage) {
    [output writeString:31 value:self.conquerLocalImage];
  }
  if (self.hasBestOpusId) {
    [output writeString:50 value:self.bestOpusId];
  }
  if (self.hasBestScore) {
    [output writeInt32:51 value:self.bestScore];
  }
  if (self.hasBestScoreDate) {
    [output writeInt32:52 value:self.bestScoreDate];
  }
  if (self.hasLastOpusId) {
    [output writeString:60 value:self.lastOpusId];
  }
  if (self.hasLastScore) {
    [output writeInt32:61 value:self.lastScore];
  }
  if (self.hasLastScoreDate) {
    [output writeInt32:62 value:self.lastScoreDate];
  }
  if (self.hasTotalCount) {
    [output writeInt32:63 value:self.totalCount];
  }
  if (self.hasDefeatCount) {
    [output writeInt32:64 value:self.defeatCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasTutorialId) {
    size_ += computeStringSize(2, self.tutorialId);
  }
  if (self.hasStageId) {
    size_ += computeStringSize(3, self.stageId);
  }
  if (self.hasStageIndex) {
    size_ += computeInt32Size(4, self.stageIndex);
  }
  [self.opusArray enumerateObjectsUsingBlock:^(PBUserStageOpus *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasCurrentChapterIndex) {
    size_ += computeInt32Size(10, self.currentChapterIndex);
  }
  if (self.hasPracticeLocalOpusId) {
    size_ += computeStringSize(20, self.practiceLocalOpusId);
  }
  if (self.hasConquerLocalOpusId) {
    size_ += computeStringSize(30, self.conquerLocalOpusId);
  }
  if (self.hasConquerLocalImage) {
    size_ += computeStringSize(31, self.conquerLocalImage);
  }
  if (self.hasBestOpusId) {
    size_ += computeStringSize(50, self.bestOpusId);
  }
  if (self.hasBestScore) {
    size_ += computeInt32Size(51, self.bestScore);
  }
  if (self.hasBestScoreDate) {
    size_ += computeInt32Size(52, self.bestScoreDate);
  }
  if (self.hasLastOpusId) {
    size_ += computeStringSize(60, self.lastOpusId);
  }
  if (self.hasLastScore) {
    size_ += computeInt32Size(61, self.lastScore);
  }
  if (self.hasLastScoreDate) {
    size_ += computeInt32Size(62, self.lastScoreDate);
  }
  if (self.hasTotalCount) {
    size_ += computeInt32Size(63, self.totalCount);
  }
  if (self.hasDefeatCount) {
    size_ += computeInt32Size(64, self.defeatCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserStage*) parseFromData:(NSData*) data {
  return (PBUserStage*)[[[PBUserStage builder] mergeFromData:data] build];
}
+ (PBUserStage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserStage*)[[[PBUserStage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserStage*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserStage*)[[[PBUserStage builder] mergeFromInputStream:input] build];
}
+ (PBUserStage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserStage*)[[[PBUserStage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserStage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserStage*)[[[PBUserStage builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserStage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserStage*)[[[PBUserStage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserStageBuilder*) builder {
  return [[PBUserStageBuilder alloc] init];
}
+ (PBUserStageBuilder*) builderWithPrototype:(PBUserStage*) prototype {
  return [[PBUserStage builder] mergeFrom:prototype];
}
- (PBUserStageBuilder*) builder {
  return [PBUserStage builder];
}
- (PBUserStageBuilder*) toBuilder {
  return [PBUserStage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasTutorialId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tutorialId", self.tutorialId];
  }
  if (self.hasStageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageId", self.stageId];
  }
  if (self.hasStageIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageIndex", [NSNumber numberWithInteger:self.stageIndex]];
  }
  [self.opusArray enumerateObjectsUsingBlock:^(PBUserStageOpus *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"opus"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCurrentChapterIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentChapterIndex", [NSNumber numberWithInteger:self.currentChapterIndex]];
  }
  if (self.hasPracticeLocalOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"practiceLocalOpusId", self.practiceLocalOpusId];
  }
  if (self.hasConquerLocalOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"conquerLocalOpusId", self.conquerLocalOpusId];
  }
  if (self.hasConquerLocalImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"conquerLocalImage", self.conquerLocalImage];
  }
  if (self.hasBestOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bestOpusId", self.bestOpusId];
  }
  if (self.hasBestScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bestScore", [NSNumber numberWithInteger:self.bestScore]];
  }
  if (self.hasBestScoreDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bestScoreDate", [NSNumber numberWithInteger:self.bestScoreDate]];
  }
  if (self.hasLastOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastOpusId", self.lastOpusId];
  }
  if (self.hasLastScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastScore", [NSNumber numberWithInteger:self.lastScore]];
  }
  if (self.hasLastScoreDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastScoreDate", [NSNumber numberWithInteger:self.lastScoreDate]];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithInteger:self.totalCount]];
  }
  if (self.hasDefeatCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defeatCount", [NSNumber numberWithInteger:self.defeatCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserStage class]]) {
    return NO;
  }
  PBUserStage *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasTutorialId == otherMessage.hasTutorialId &&
      (!self.hasTutorialId || [self.tutorialId isEqual:otherMessage.tutorialId]) &&
      self.hasStageId == otherMessage.hasStageId &&
      (!self.hasStageId || [self.stageId isEqual:otherMessage.stageId]) &&
      self.hasStageIndex == otherMessage.hasStageIndex &&
      (!self.hasStageIndex || self.stageIndex == otherMessage.stageIndex) &&
      [self.opusArray isEqualToArray:otherMessage.opusArray] &&
      self.hasCurrentChapterIndex == otherMessage.hasCurrentChapterIndex &&
      (!self.hasCurrentChapterIndex || self.currentChapterIndex == otherMessage.currentChapterIndex) &&
      self.hasPracticeLocalOpusId == otherMessage.hasPracticeLocalOpusId &&
      (!self.hasPracticeLocalOpusId || [self.practiceLocalOpusId isEqual:otherMessage.practiceLocalOpusId]) &&
      self.hasConquerLocalOpusId == otherMessage.hasConquerLocalOpusId &&
      (!self.hasConquerLocalOpusId || [self.conquerLocalOpusId isEqual:otherMessage.conquerLocalOpusId]) &&
      self.hasConquerLocalImage == otherMessage.hasConquerLocalImage &&
      (!self.hasConquerLocalImage || [self.conquerLocalImage isEqual:otherMessage.conquerLocalImage]) &&
      self.hasBestOpusId == otherMessage.hasBestOpusId &&
      (!self.hasBestOpusId || [self.bestOpusId isEqual:otherMessage.bestOpusId]) &&
      self.hasBestScore == otherMessage.hasBestScore &&
      (!self.hasBestScore || self.bestScore == otherMessage.bestScore) &&
      self.hasBestScoreDate == otherMessage.hasBestScoreDate &&
      (!self.hasBestScoreDate || self.bestScoreDate == otherMessage.bestScoreDate) &&
      self.hasLastOpusId == otherMessage.hasLastOpusId &&
      (!self.hasLastOpusId || [self.lastOpusId isEqual:otherMessage.lastOpusId]) &&
      self.hasLastScore == otherMessage.hasLastScore &&
      (!self.hasLastScore || self.lastScore == otherMessage.lastScore) &&
      self.hasLastScoreDate == otherMessage.hasLastScoreDate &&
      (!self.hasLastScoreDate || self.lastScoreDate == otherMessage.lastScoreDate) &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || self.totalCount == otherMessage.totalCount) &&
      self.hasDefeatCount == otherMessage.hasDefeatCount &&
      (!self.hasDefeatCount || self.defeatCount == otherMessage.defeatCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasTutorialId) {
    hashCode = hashCode * 31 + [self.tutorialId hash];
  }
  if (self.hasStageId) {
    hashCode = hashCode * 31 + [self.stageId hash];
  }
  if (self.hasStageIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stageIndex] hash];
  }
  [self.opusArray enumerateObjectsUsingBlock:^(PBUserStageOpus *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCurrentChapterIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentChapterIndex] hash];
  }
  if (self.hasPracticeLocalOpusId) {
    hashCode = hashCode * 31 + [self.practiceLocalOpusId hash];
  }
  if (self.hasConquerLocalOpusId) {
    hashCode = hashCode * 31 + [self.conquerLocalOpusId hash];
  }
  if (self.hasConquerLocalImage) {
    hashCode = hashCode * 31 + [self.conquerLocalImage hash];
  }
  if (self.hasBestOpusId) {
    hashCode = hashCode * 31 + [self.bestOpusId hash];
  }
  if (self.hasBestScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bestScore] hash];
  }
  if (self.hasBestScoreDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bestScoreDate] hash];
  }
  if (self.hasLastOpusId) {
    hashCode = hashCode * 31 + [self.lastOpusId hash];
  }
  if (self.hasLastScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastScore] hash];
  }
  if (self.hasLastScoreDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastScoreDate] hash];
  }
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalCount] hash];
  }
  if (self.hasDefeatCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defeatCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserStageBuilder()
@property (strong) PBUserStage* resultPbuserStage;
@end

@implementation PBUserStageBuilder
@synthesize resultPbuserStage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserStage = [[PBUserStage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserStage;
}
- (PBUserStageBuilder*) clear {
  self.resultPbuserStage = [[PBUserStage alloc] init];
  return self;
}
- (PBUserStageBuilder*) clone {
  return [PBUserStage builderWithPrototype:resultPbuserStage];
}
- (PBUserStage*) defaultInstance {
  return [PBUserStage defaultInstance];
}
- (PBUserStage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserStage*) buildPartial {
  PBUserStage* returnMe = resultPbuserStage;
  self.resultPbuserStage = nil;
  return returnMe;
}
- (PBUserStageBuilder*) mergeFrom:(PBUserStage*) other {
  if (other == [PBUserStage defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTutorialId) {
    [self setTutorialId:other.tutorialId];
  }
  if (other.hasStageId) {
    [self setStageId:other.stageId];
  }
  if (other.hasStageIndex) {
    [self setStageIndex:other.stageIndex];
  }
  if (other.opusArray.count > 0) {
    if (resultPbuserStage.opusArray == nil) {
      resultPbuserStage.opusArray = [[NSMutableArray alloc] initWithArray:other.opusArray];
    } else {
      [resultPbuserStage.opusArray addObjectsFromArray:other.opusArray];
    }
  }
  if (other.hasCurrentChapterIndex) {
    [self setCurrentChapterIndex:other.currentChapterIndex];
  }
  if (other.hasPracticeLocalOpusId) {
    [self setPracticeLocalOpusId:other.practiceLocalOpusId];
  }
  if (other.hasConquerLocalOpusId) {
    [self setConquerLocalOpusId:other.conquerLocalOpusId];
  }
  if (other.hasConquerLocalImage) {
    [self setConquerLocalImage:other.conquerLocalImage];
  }
  if (other.hasBestOpusId) {
    [self setBestOpusId:other.bestOpusId];
  }
  if (other.hasBestScore) {
    [self setBestScore:other.bestScore];
  }
  if (other.hasBestScoreDate) {
    [self setBestScoreDate:other.bestScoreDate];
  }
  if (other.hasLastOpusId) {
    [self setLastOpusId:other.lastOpusId];
  }
  if (other.hasLastScore) {
    [self setLastScore:other.lastScore];
  }
  if (other.hasLastScoreDate) {
    [self setLastScoreDate:other.lastScoreDate];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasDefeatCount) {
    [self setDefeatCount:other.defeatCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserStageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserStageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setTutorialId:[input readString]];
        break;
      }
      case 26: {
        [self setStageId:[input readString]];
        break;
      }
      case 32: {
        [self setStageIndex:[input readInt32]];
        break;
      }
      case 66: {
        PBUserStageOpusBuilder* subBuilder = [PBUserStageOpus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpus:[subBuilder buildPartial]];
        break;
      }
      case 80: {
        [self setCurrentChapterIndex:[input readInt32]];
        break;
      }
      case 162: {
        [self setPracticeLocalOpusId:[input readString]];
        break;
      }
      case 242: {
        [self setConquerLocalOpusId:[input readString]];
        break;
      }
      case 250: {
        [self setConquerLocalImage:[input readString]];
        break;
      }
      case 402: {
        [self setBestOpusId:[input readString]];
        break;
      }
      case 408: {
        [self setBestScore:[input readInt32]];
        break;
      }
      case 416: {
        [self setBestScoreDate:[input readInt32]];
        break;
      }
      case 482: {
        [self setLastOpusId:[input readString]];
        break;
      }
      case 488: {
        [self setLastScore:[input readInt32]];
        break;
      }
      case 496: {
        [self setLastScoreDate:[input readInt32]];
        break;
      }
      case 504: {
        [self setTotalCount:[input readInt32]];
        break;
      }
      case 512: {
        [self setDefeatCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserStage.hasUserId;
}
- (NSString*) userId {
  return resultPbuserStage.userId;
}
- (PBUserStageBuilder*) setUserId:(NSString*) value {
  resultPbuserStage.hasUserId = YES;
  resultPbuserStage.userId = value;
  return self;
}
- (PBUserStageBuilder*) clearUserId {
  resultPbuserStage.hasUserId = NO;
  resultPbuserStage.userId = @"";
  return self;
}
- (BOOL) hasTutorialId {
  return resultPbuserStage.hasTutorialId;
}
- (NSString*) tutorialId {
  return resultPbuserStage.tutorialId;
}
- (PBUserStageBuilder*) setTutorialId:(NSString*) value {
  resultPbuserStage.hasTutorialId = YES;
  resultPbuserStage.tutorialId = value;
  return self;
}
- (PBUserStageBuilder*) clearTutorialId {
  resultPbuserStage.hasTutorialId = NO;
  resultPbuserStage.tutorialId = @"";
  return self;
}
- (BOOL) hasStageId {
  return resultPbuserStage.hasStageId;
}
- (NSString*) stageId {
  return resultPbuserStage.stageId;
}
- (PBUserStageBuilder*) setStageId:(NSString*) value {
  resultPbuserStage.hasStageId = YES;
  resultPbuserStage.stageId = value;
  return self;
}
- (PBUserStageBuilder*) clearStageId {
  resultPbuserStage.hasStageId = NO;
  resultPbuserStage.stageId = @"";
  return self;
}
- (BOOL) hasStageIndex {
  return resultPbuserStage.hasStageIndex;
}
- (SInt32) stageIndex {
  return resultPbuserStage.stageIndex;
}
- (PBUserStageBuilder*) setStageIndex:(SInt32) value {
  resultPbuserStage.hasStageIndex = YES;
  resultPbuserStage.stageIndex = value;
  return self;
}
- (PBUserStageBuilder*) clearStageIndex {
  resultPbuserStage.hasStageIndex = NO;
  resultPbuserStage.stageIndex = 0;
  return self;
}
- (NSMutableArray *)opus {
  return resultPbuserStage.opusArray;
}
- (PBUserStageOpus*)opusAtIndex:(NSUInteger)index {
  return [resultPbuserStage opusAtIndex:index];
}
- (PBUserStageBuilder *)addOpus:(PBUserStageOpus*)value {
  if (resultPbuserStage.opusArray == nil) {
    resultPbuserStage.opusArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserStage.opusArray addObject:value];
  return self;
}
- (PBUserStageBuilder *)setOpusArray:(NSArray *)array {
  resultPbuserStage.opusArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserStageBuilder *)clearOpus {
  resultPbuserStage.opusArray = nil;
  return self;
}
- (BOOL) hasCurrentChapterIndex {
  return resultPbuserStage.hasCurrentChapterIndex;
}
- (SInt32) currentChapterIndex {
  return resultPbuserStage.currentChapterIndex;
}
- (PBUserStageBuilder*) setCurrentChapterIndex:(SInt32) value {
  resultPbuserStage.hasCurrentChapterIndex = YES;
  resultPbuserStage.currentChapterIndex = value;
  return self;
}
- (PBUserStageBuilder*) clearCurrentChapterIndex {
  resultPbuserStage.hasCurrentChapterIndex = NO;
  resultPbuserStage.currentChapterIndex = 0;
  return self;
}
- (BOOL) hasPracticeLocalOpusId {
  return resultPbuserStage.hasPracticeLocalOpusId;
}
- (NSString*) practiceLocalOpusId {
  return resultPbuserStage.practiceLocalOpusId;
}
- (PBUserStageBuilder*) setPracticeLocalOpusId:(NSString*) value {
  resultPbuserStage.hasPracticeLocalOpusId = YES;
  resultPbuserStage.practiceLocalOpusId = value;
  return self;
}
- (PBUserStageBuilder*) clearPracticeLocalOpusId {
  resultPbuserStage.hasPracticeLocalOpusId = NO;
  resultPbuserStage.practiceLocalOpusId = @"";
  return self;
}
- (BOOL) hasConquerLocalOpusId {
  return resultPbuserStage.hasConquerLocalOpusId;
}
- (NSString*) conquerLocalOpusId {
  return resultPbuserStage.conquerLocalOpusId;
}
- (PBUserStageBuilder*) setConquerLocalOpusId:(NSString*) value {
  resultPbuserStage.hasConquerLocalOpusId = YES;
  resultPbuserStage.conquerLocalOpusId = value;
  return self;
}
- (PBUserStageBuilder*) clearConquerLocalOpusId {
  resultPbuserStage.hasConquerLocalOpusId = NO;
  resultPbuserStage.conquerLocalOpusId = @"";
  return self;
}
- (BOOL) hasConquerLocalImage {
  return resultPbuserStage.hasConquerLocalImage;
}
- (NSString*) conquerLocalImage {
  return resultPbuserStage.conquerLocalImage;
}
- (PBUserStageBuilder*) setConquerLocalImage:(NSString*) value {
  resultPbuserStage.hasConquerLocalImage = YES;
  resultPbuserStage.conquerLocalImage = value;
  return self;
}
- (PBUserStageBuilder*) clearConquerLocalImage {
  resultPbuserStage.hasConquerLocalImage = NO;
  resultPbuserStage.conquerLocalImage = @"";
  return self;
}
- (BOOL) hasBestOpusId {
  return resultPbuserStage.hasBestOpusId;
}
- (NSString*) bestOpusId {
  return resultPbuserStage.bestOpusId;
}
- (PBUserStageBuilder*) setBestOpusId:(NSString*) value {
  resultPbuserStage.hasBestOpusId = YES;
  resultPbuserStage.bestOpusId = value;
  return self;
}
- (PBUserStageBuilder*) clearBestOpusId {
  resultPbuserStage.hasBestOpusId = NO;
  resultPbuserStage.bestOpusId = @"";
  return self;
}
- (BOOL) hasBestScore {
  return resultPbuserStage.hasBestScore;
}
- (SInt32) bestScore {
  return resultPbuserStage.bestScore;
}
- (PBUserStageBuilder*) setBestScore:(SInt32) value {
  resultPbuserStage.hasBestScore = YES;
  resultPbuserStage.bestScore = value;
  return self;
}
- (PBUserStageBuilder*) clearBestScore {
  resultPbuserStage.hasBestScore = NO;
  resultPbuserStage.bestScore = 0;
  return self;
}
- (BOOL) hasBestScoreDate {
  return resultPbuserStage.hasBestScoreDate;
}
- (SInt32) bestScoreDate {
  return resultPbuserStage.bestScoreDate;
}
- (PBUserStageBuilder*) setBestScoreDate:(SInt32) value {
  resultPbuserStage.hasBestScoreDate = YES;
  resultPbuserStage.bestScoreDate = value;
  return self;
}
- (PBUserStageBuilder*) clearBestScoreDate {
  resultPbuserStage.hasBestScoreDate = NO;
  resultPbuserStage.bestScoreDate = 0;
  return self;
}
- (BOOL) hasLastOpusId {
  return resultPbuserStage.hasLastOpusId;
}
- (NSString*) lastOpusId {
  return resultPbuserStage.lastOpusId;
}
- (PBUserStageBuilder*) setLastOpusId:(NSString*) value {
  resultPbuserStage.hasLastOpusId = YES;
  resultPbuserStage.lastOpusId = value;
  return self;
}
- (PBUserStageBuilder*) clearLastOpusId {
  resultPbuserStage.hasLastOpusId = NO;
  resultPbuserStage.lastOpusId = @"";
  return self;
}
- (BOOL) hasLastScore {
  return resultPbuserStage.hasLastScore;
}
- (SInt32) lastScore {
  return resultPbuserStage.lastScore;
}
- (PBUserStageBuilder*) setLastScore:(SInt32) value {
  resultPbuserStage.hasLastScore = YES;
  resultPbuserStage.lastScore = value;
  return self;
}
- (PBUserStageBuilder*) clearLastScore {
  resultPbuserStage.hasLastScore = NO;
  resultPbuserStage.lastScore = 0;
  return self;
}
- (BOOL) hasLastScoreDate {
  return resultPbuserStage.hasLastScoreDate;
}
- (SInt32) lastScoreDate {
  return resultPbuserStage.lastScoreDate;
}
- (PBUserStageBuilder*) setLastScoreDate:(SInt32) value {
  resultPbuserStage.hasLastScoreDate = YES;
  resultPbuserStage.lastScoreDate = value;
  return self;
}
- (PBUserStageBuilder*) clearLastScoreDate {
  resultPbuserStage.hasLastScoreDate = NO;
  resultPbuserStage.lastScoreDate = 0;
  return self;
}
- (BOOL) hasTotalCount {
  return resultPbuserStage.hasTotalCount;
}
- (SInt32) totalCount {
  return resultPbuserStage.totalCount;
}
- (PBUserStageBuilder*) setTotalCount:(SInt32) value {
  resultPbuserStage.hasTotalCount = YES;
  resultPbuserStage.totalCount = value;
  return self;
}
- (PBUserStageBuilder*) clearTotalCount {
  resultPbuserStage.hasTotalCount = NO;
  resultPbuserStage.totalCount = 0;
  return self;
}
- (BOOL) hasDefeatCount {
  return resultPbuserStage.hasDefeatCount;
}
- (SInt32) defeatCount {
  return resultPbuserStage.defeatCount;
}
- (PBUserStageBuilder*) setDefeatCount:(SInt32) value {
  resultPbuserStage.hasDefeatCount = YES;
  resultPbuserStage.defeatCount = value;
  return self;
}
- (PBUserStageBuilder*) clearDefeatCount {
  resultPbuserStage.hasDefeatCount = NO;
  resultPbuserStage.defeatCount = 0;
  return self;
}
@end

@interface PBUserTutorial ()
@property (strong) NSString* userId;
@property (strong) PBTutorial* tutorial;
@property SInt32 status;
@property BOOL isDownload;
@property BOOL isPurchase;
@property SInt32 createDate;
@property SInt32 lastPlayDate;
@property SInt32 modifyDate;
@property SInt32 currentStageIndex;
@property (strong) NSString* currentStageId;
@property (strong) NSMutableArray * userStagesArray;
@property BOOL syncServer;
@property (strong) NSString* localId;
@property (strong) NSString* remoteId;
@end

@implementation PBUserTutorial

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTutorial {
  return !!hasTutorial_;
}
- (void) setHasTutorial:(BOOL) _value_ {
  hasTutorial_ = !!_value_;
}
@synthesize tutorial;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasIsDownload {
  return !!hasIsDownload_;
}
- (void) setHasIsDownload:(BOOL) _value_ {
  hasIsDownload_ = !!_value_;
}
- (BOOL) isDownload {
  return !!isDownload_;
}
- (void) setIsDownload:(BOOL) _value_ {
  isDownload_ = !!_value_;
}
- (BOOL) hasIsPurchase {
  return !!hasIsPurchase_;
}
- (void) setHasIsPurchase:(BOOL) _value_ {
  hasIsPurchase_ = !!_value_;
}
- (BOOL) isPurchase {
  return !!isPurchase_;
}
- (void) setIsPurchase:(BOOL) _value_ {
  isPurchase_ = !!_value_;
}
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasLastPlayDate {
  return !!hasLastPlayDate_;
}
- (void) setHasLastPlayDate:(BOOL) _value_ {
  hasLastPlayDate_ = !!_value_;
}
@synthesize lastPlayDate;
- (BOOL) hasModifyDate {
  return !!hasModifyDate_;
}
- (void) setHasModifyDate:(BOOL) _value_ {
  hasModifyDate_ = !!_value_;
}
@synthesize modifyDate;
- (BOOL) hasCurrentStageIndex {
  return !!hasCurrentStageIndex_;
}
- (void) setHasCurrentStageIndex:(BOOL) _value_ {
  hasCurrentStageIndex_ = !!_value_;
}
@synthesize currentStageIndex;
- (BOOL) hasCurrentStageId {
  return !!hasCurrentStageId_;
}
- (void) setHasCurrentStageId:(BOOL) _value_ {
  hasCurrentStageId_ = !!_value_;
}
@synthesize currentStageId;
@synthesize userStagesArray;
@dynamic userStages;
- (BOOL) hasSyncServer {
  return !!hasSyncServer_;
}
- (void) setHasSyncServer:(BOOL) _value_ {
  hasSyncServer_ = !!_value_;
}
- (BOOL) syncServer {
  return !!syncServer_;
}
- (void) setSyncServer:(BOOL) _value_ {
  syncServer_ = !!_value_;
}
- (BOOL) hasLocalId {
  return !!hasLocalId_;
}
- (void) setHasLocalId:(BOOL) _value_ {
  hasLocalId_ = !!_value_;
}
@synthesize localId;
- (BOOL) hasRemoteId {
  return !!hasRemoteId_;
}
- (void) setHasRemoteId:(BOOL) _value_ {
  hasRemoteId_ = !!_value_;
}
@synthesize remoteId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.tutorial = [PBTutorial defaultInstance];
    self.status = 0;
    self.isDownload = NO;
    self.isPurchase = NO;
    self.createDate = 0;
    self.lastPlayDate = 0;
    self.modifyDate = 0;
    self.currentStageIndex = 0;
    self.currentStageId = @"";
    self.syncServer = NO;
    self.localId = @"";
    self.remoteId = @"";
  }
  return self;
}
static PBUserTutorial* defaultPBUserTutorialInstance = nil;
+ (void) initialize {
  if (self == [PBUserTutorial class]) {
    defaultPBUserTutorialInstance = [[PBUserTutorial alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserTutorialInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserTutorialInstance;
}
- (NSArray *)userStages {
  return userStagesArray;
}
- (PBUserStage*)userStagesAtIndex:(NSUInteger)index {
  return [userStagesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTutorial) {
    return NO;
  }
  if (!self.tutorial.isInitialized) {
    return NO;
  }
  __block BOOL isInituserStages = YES;
   [self.userStages enumerateObjectsUsingBlock:^(PBUserStage *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStages = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStages) return isInituserStages;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasTutorial) {
    [output writeMessage:2 value:self.tutorial];
  }
  if (self.hasStatus) {
    [output writeInt32:3 value:self.status];
  }
  if (self.hasIsDownload) {
    [output writeBool:4 value:self.isDownload];
  }
  if (self.hasIsPurchase) {
    [output writeBool:5 value:self.isPurchase];
  }
  if (self.hasCreateDate) {
    [output writeInt32:10 value:self.createDate];
  }
  if (self.hasLastPlayDate) {
    [output writeInt32:11 value:self.lastPlayDate];
  }
  if (self.hasModifyDate) {
    [output writeInt32:12 value:self.modifyDate];
  }
  if (self.hasCurrentStageIndex) {
    [output writeInt32:20 value:self.currentStageIndex];
  }
  if (self.hasCurrentStageId) {
    [output writeString:21 value:self.currentStageId];
  }
  [self.userStagesArray enumerateObjectsUsingBlock:^(PBUserStage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:22 value:element];
  }];
  if (self.hasSyncServer) {
    [output writeBool:30 value:self.syncServer];
  }
  if (self.hasLocalId) {
    [output writeString:31 value:self.localId];
  }
  if (self.hasRemoteId) {
    [output writeString:32 value:self.remoteId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasTutorial) {
    size_ += computeMessageSize(2, self.tutorial);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(3, self.status);
  }
  if (self.hasIsDownload) {
    size_ += computeBoolSize(4, self.isDownload);
  }
  if (self.hasIsPurchase) {
    size_ += computeBoolSize(5, self.isPurchase);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(10, self.createDate);
  }
  if (self.hasLastPlayDate) {
    size_ += computeInt32Size(11, self.lastPlayDate);
  }
  if (self.hasModifyDate) {
    size_ += computeInt32Size(12, self.modifyDate);
  }
  if (self.hasCurrentStageIndex) {
    size_ += computeInt32Size(20, self.currentStageIndex);
  }
  if (self.hasCurrentStageId) {
    size_ += computeStringSize(21, self.currentStageId);
  }
  [self.userStagesArray enumerateObjectsUsingBlock:^(PBUserStage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(22, element);
  }];
  if (self.hasSyncServer) {
    size_ += computeBoolSize(30, self.syncServer);
  }
  if (self.hasLocalId) {
    size_ += computeStringSize(31, self.localId);
  }
  if (self.hasRemoteId) {
    size_ += computeStringSize(32, self.remoteId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserTutorial*) parseFromData:(NSData*) data {
  return (PBUserTutorial*)[[[PBUserTutorial builder] mergeFromData:data] build];
}
+ (PBUserTutorial*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTutorial*)[[[PBUserTutorial builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserTutorial*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserTutorial*)[[[PBUserTutorial builder] mergeFromInputStream:input] build];
}
+ (PBUserTutorial*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTutorial*)[[[PBUserTutorial builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserTutorial*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserTutorial*)[[[PBUserTutorial builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserTutorial*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserTutorial*)[[[PBUserTutorial builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserTutorialBuilder*) builder {
  return [[PBUserTutorialBuilder alloc] init];
}
+ (PBUserTutorialBuilder*) builderWithPrototype:(PBUserTutorial*) prototype {
  return [[PBUserTutorial builder] mergeFrom:prototype];
}
- (PBUserTutorialBuilder*) builder {
  return [PBUserTutorial builder];
}
- (PBUserTutorialBuilder*) toBuilder {
  return [PBUserTutorial builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasTutorial) {
    [output appendFormat:@"%@%@ {\n", indent, @"tutorial"];
    [self.tutorial writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasIsDownload) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDownload", [NSNumber numberWithBool:self.isDownload]];
  }
  if (self.hasIsPurchase) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isPurchase", [NSNumber numberWithBool:self.isPurchase]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasLastPlayDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastPlayDate", [NSNumber numberWithInteger:self.lastPlayDate]];
  }
  if (self.hasModifyDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifyDate", [NSNumber numberWithInteger:self.modifyDate]];
  }
  if (self.hasCurrentStageIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentStageIndex", [NSNumber numberWithInteger:self.currentStageIndex]];
  }
  if (self.hasCurrentStageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentStageId", self.currentStageId];
  }
  [self.userStagesArray enumerateObjectsUsingBlock:^(PBUserStage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStages"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSyncServer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syncServer", [NSNumber numberWithBool:self.syncServer]];
  }
  if (self.hasLocalId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localId", self.localId];
  }
  if (self.hasRemoteId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remoteId", self.remoteId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserTutorial class]]) {
    return NO;
  }
  PBUserTutorial *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasTutorial == otherMessage.hasTutorial &&
      (!self.hasTutorial || [self.tutorial isEqual:otherMessage.tutorial]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasIsDownload == otherMessage.hasIsDownload &&
      (!self.hasIsDownload || self.isDownload == otherMessage.isDownload) &&
      self.hasIsPurchase == otherMessage.hasIsPurchase &&
      (!self.hasIsPurchase || self.isPurchase == otherMessage.isPurchase) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasLastPlayDate == otherMessage.hasLastPlayDate &&
      (!self.hasLastPlayDate || self.lastPlayDate == otherMessage.lastPlayDate) &&
      self.hasModifyDate == otherMessage.hasModifyDate &&
      (!self.hasModifyDate || self.modifyDate == otherMessage.modifyDate) &&
      self.hasCurrentStageIndex == otherMessage.hasCurrentStageIndex &&
      (!self.hasCurrentStageIndex || self.currentStageIndex == otherMessage.currentStageIndex) &&
      self.hasCurrentStageId == otherMessage.hasCurrentStageId &&
      (!self.hasCurrentStageId || [self.currentStageId isEqual:otherMessage.currentStageId]) &&
      [self.userStagesArray isEqualToArray:otherMessage.userStagesArray] &&
      self.hasSyncServer == otherMessage.hasSyncServer &&
      (!self.hasSyncServer || self.syncServer == otherMessage.syncServer) &&
      self.hasLocalId == otherMessage.hasLocalId &&
      (!self.hasLocalId || [self.localId isEqual:otherMessage.localId]) &&
      self.hasRemoteId == otherMessage.hasRemoteId &&
      (!self.hasRemoteId || [self.remoteId isEqual:otherMessage.remoteId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasTutorial) {
    hashCode = hashCode * 31 + [self.tutorial hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasIsDownload) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isDownload] hash];
  }
  if (self.hasIsPurchase) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isPurchase] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasLastPlayDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastPlayDate] hash];
  }
  if (self.hasModifyDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.modifyDate] hash];
  }
  if (self.hasCurrentStageIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentStageIndex] hash];
  }
  if (self.hasCurrentStageId) {
    hashCode = hashCode * 31 + [self.currentStageId hash];
  }
  [self.userStagesArray enumerateObjectsUsingBlock:^(PBUserStage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSyncServer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.syncServer] hash];
  }
  if (self.hasLocalId) {
    hashCode = hashCode * 31 + [self.localId hash];
  }
  if (self.hasRemoteId) {
    hashCode = hashCode * 31 + [self.remoteId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserTutorialBuilder()
@property (strong) PBUserTutorial* resultPbuserTutorial;
@end

@implementation PBUserTutorialBuilder
@synthesize resultPbuserTutorial;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserTutorial = [[PBUserTutorial alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserTutorial;
}
- (PBUserTutorialBuilder*) clear {
  self.resultPbuserTutorial = [[PBUserTutorial alloc] init];
  return self;
}
- (PBUserTutorialBuilder*) clone {
  return [PBUserTutorial builderWithPrototype:resultPbuserTutorial];
}
- (PBUserTutorial*) defaultInstance {
  return [PBUserTutorial defaultInstance];
}
- (PBUserTutorial*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserTutorial*) buildPartial {
  PBUserTutorial* returnMe = resultPbuserTutorial;
  self.resultPbuserTutorial = nil;
  return returnMe;
}
- (PBUserTutorialBuilder*) mergeFrom:(PBUserTutorial*) other {
  if (other == [PBUserTutorial defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTutorial) {
    [self mergeTutorial:other.tutorial];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasIsDownload) {
    [self setIsDownload:other.isDownload];
  }
  if (other.hasIsPurchase) {
    [self setIsPurchase:other.isPurchase];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasLastPlayDate) {
    [self setLastPlayDate:other.lastPlayDate];
  }
  if (other.hasModifyDate) {
    [self setModifyDate:other.modifyDate];
  }
  if (other.hasCurrentStageIndex) {
    [self setCurrentStageIndex:other.currentStageIndex];
  }
  if (other.hasCurrentStageId) {
    [self setCurrentStageId:other.currentStageId];
  }
  if (other.userStagesArray.count > 0) {
    if (resultPbuserTutorial.userStagesArray == nil) {
      resultPbuserTutorial.userStagesArray = [[NSMutableArray alloc] initWithArray:other.userStagesArray];
    } else {
      [resultPbuserTutorial.userStagesArray addObjectsFromArray:other.userStagesArray];
    }
  }
  if (other.hasSyncServer) {
    [self setSyncServer:other.syncServer];
  }
  if (other.hasLocalId) {
    [self setLocalId:other.localId];
  }
  if (other.hasRemoteId) {
    [self setRemoteId:other.remoteId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserTutorialBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserTutorialBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBTutorialBuilder* subBuilder = [PBTutorial builder];
        if (self.hasTutorial) {
          [subBuilder mergeFrom:self.tutorial];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTutorial:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 32: {
        [self setIsDownload:[input readBool]];
        break;
      }
      case 40: {
        [self setIsPurchase:[input readBool]];
        break;
      }
      case 80: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 88: {
        [self setLastPlayDate:[input readInt32]];
        break;
      }
      case 96: {
        [self setModifyDate:[input readInt32]];
        break;
      }
      case 160: {
        [self setCurrentStageIndex:[input readInt32]];
        break;
      }
      case 170: {
        [self setCurrentStageId:[input readString]];
        break;
      }
      case 178: {
        PBUserStageBuilder* subBuilder = [PBUserStage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStages:[subBuilder buildPartial]];
        break;
      }
      case 240: {
        [self setSyncServer:[input readBool]];
        break;
      }
      case 250: {
        [self setLocalId:[input readString]];
        break;
      }
      case 258: {
        [self setRemoteId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserTutorial.hasUserId;
}
- (NSString*) userId {
  return resultPbuserTutorial.userId;
}
- (PBUserTutorialBuilder*) setUserId:(NSString*) value {
  resultPbuserTutorial.hasUserId = YES;
  resultPbuserTutorial.userId = value;
  return self;
}
- (PBUserTutorialBuilder*) clearUserId {
  resultPbuserTutorial.hasUserId = NO;
  resultPbuserTutorial.userId = @"";
  return self;
}
- (BOOL) hasTutorial {
  return resultPbuserTutorial.hasTutorial;
}
- (PBTutorial*) tutorial {
  return resultPbuserTutorial.tutorial;
}
- (PBUserTutorialBuilder*) setTutorial:(PBTutorial*) value {
  resultPbuserTutorial.hasTutorial = YES;
  resultPbuserTutorial.tutorial = value;
  return self;
}
- (PBUserTutorialBuilder*) setTutorialBuilder:(PBTutorialBuilder*) builderForValue {
  return [self setTutorial:[builderForValue build]];
}
- (PBUserTutorialBuilder*) mergeTutorial:(PBTutorial*) value {
  if (resultPbuserTutorial.hasTutorial &&
      resultPbuserTutorial.tutorial != [PBTutorial defaultInstance]) {
    resultPbuserTutorial.tutorial =
      [[[PBTutorial builderWithPrototype:resultPbuserTutorial.tutorial] mergeFrom:value] buildPartial];
  } else {
    resultPbuserTutorial.tutorial = value;
  }
  resultPbuserTutorial.hasTutorial = YES;
  return self;
}
- (PBUserTutorialBuilder*) clearTutorial {
  resultPbuserTutorial.hasTutorial = NO;
  resultPbuserTutorial.tutorial = [PBTutorial defaultInstance];
  return self;
}
- (BOOL) hasStatus {
  return resultPbuserTutorial.hasStatus;
}
- (SInt32) status {
  return resultPbuserTutorial.status;
}
- (PBUserTutorialBuilder*) setStatus:(SInt32) value {
  resultPbuserTutorial.hasStatus = YES;
  resultPbuserTutorial.status = value;
  return self;
}
- (PBUserTutorialBuilder*) clearStatus {
  resultPbuserTutorial.hasStatus = NO;
  resultPbuserTutorial.status = 0;
  return self;
}
- (BOOL) hasIsDownload {
  return resultPbuserTutorial.hasIsDownload;
}
- (BOOL) isDownload {
  return resultPbuserTutorial.isDownload;
}
- (PBUserTutorialBuilder*) setIsDownload:(BOOL) value {
  resultPbuserTutorial.hasIsDownload = YES;
  resultPbuserTutorial.isDownload = value;
  return self;
}
- (PBUserTutorialBuilder*) clearIsDownload {
  resultPbuserTutorial.hasIsDownload = NO;
  resultPbuserTutorial.isDownload = NO;
  return self;
}
- (BOOL) hasIsPurchase {
  return resultPbuserTutorial.hasIsPurchase;
}
- (BOOL) isPurchase {
  return resultPbuserTutorial.isPurchase;
}
- (PBUserTutorialBuilder*) setIsPurchase:(BOOL) value {
  resultPbuserTutorial.hasIsPurchase = YES;
  resultPbuserTutorial.isPurchase = value;
  return self;
}
- (PBUserTutorialBuilder*) clearIsPurchase {
  resultPbuserTutorial.hasIsPurchase = NO;
  resultPbuserTutorial.isPurchase = NO;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbuserTutorial.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbuserTutorial.createDate;
}
- (PBUserTutorialBuilder*) setCreateDate:(SInt32) value {
  resultPbuserTutorial.hasCreateDate = YES;
  resultPbuserTutorial.createDate = value;
  return self;
}
- (PBUserTutorialBuilder*) clearCreateDate {
  resultPbuserTutorial.hasCreateDate = NO;
  resultPbuserTutorial.createDate = 0;
  return self;
}
- (BOOL) hasLastPlayDate {
  return resultPbuserTutorial.hasLastPlayDate;
}
- (SInt32) lastPlayDate {
  return resultPbuserTutorial.lastPlayDate;
}
- (PBUserTutorialBuilder*) setLastPlayDate:(SInt32) value {
  resultPbuserTutorial.hasLastPlayDate = YES;
  resultPbuserTutorial.lastPlayDate = value;
  return self;
}
- (PBUserTutorialBuilder*) clearLastPlayDate {
  resultPbuserTutorial.hasLastPlayDate = NO;
  resultPbuserTutorial.lastPlayDate = 0;
  return self;
}
- (BOOL) hasModifyDate {
  return resultPbuserTutorial.hasModifyDate;
}
- (SInt32) modifyDate {
  return resultPbuserTutorial.modifyDate;
}
- (PBUserTutorialBuilder*) setModifyDate:(SInt32) value {
  resultPbuserTutorial.hasModifyDate = YES;
  resultPbuserTutorial.modifyDate = value;
  return self;
}
- (PBUserTutorialBuilder*) clearModifyDate {
  resultPbuserTutorial.hasModifyDate = NO;
  resultPbuserTutorial.modifyDate = 0;
  return self;
}
- (BOOL) hasCurrentStageIndex {
  return resultPbuserTutorial.hasCurrentStageIndex;
}
- (SInt32) currentStageIndex {
  return resultPbuserTutorial.currentStageIndex;
}
- (PBUserTutorialBuilder*) setCurrentStageIndex:(SInt32) value {
  resultPbuserTutorial.hasCurrentStageIndex = YES;
  resultPbuserTutorial.currentStageIndex = value;
  return self;
}
- (PBUserTutorialBuilder*) clearCurrentStageIndex {
  resultPbuserTutorial.hasCurrentStageIndex = NO;
  resultPbuserTutorial.currentStageIndex = 0;
  return self;
}
- (BOOL) hasCurrentStageId {
  return resultPbuserTutorial.hasCurrentStageId;
}
- (NSString*) currentStageId {
  return resultPbuserTutorial.currentStageId;
}
- (PBUserTutorialBuilder*) setCurrentStageId:(NSString*) value {
  resultPbuserTutorial.hasCurrentStageId = YES;
  resultPbuserTutorial.currentStageId = value;
  return self;
}
- (PBUserTutorialBuilder*) clearCurrentStageId {
  resultPbuserTutorial.hasCurrentStageId = NO;
  resultPbuserTutorial.currentStageId = @"";
  return self;
}
- (NSMutableArray *)userStages {
  return resultPbuserTutorial.userStagesArray;
}
- (PBUserStage*)userStagesAtIndex:(NSUInteger)index {
  return [resultPbuserTutorial userStagesAtIndex:index];
}
- (PBUserTutorialBuilder *)addUserStages:(PBUserStage*)value {
  if (resultPbuserTutorial.userStagesArray == nil) {
    resultPbuserTutorial.userStagesArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserTutorial.userStagesArray addObject:value];
  return self;
}
- (PBUserTutorialBuilder *)setUserStagesArray:(NSArray *)array {
  resultPbuserTutorial.userStagesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserTutorialBuilder *)clearUserStages {
  resultPbuserTutorial.userStagesArray = nil;
  return self;
}
- (BOOL) hasSyncServer {
  return resultPbuserTutorial.hasSyncServer;
}
- (BOOL) syncServer {
  return resultPbuserTutorial.syncServer;
}
- (PBUserTutorialBuilder*) setSyncServer:(BOOL) value {
  resultPbuserTutorial.hasSyncServer = YES;
  resultPbuserTutorial.syncServer = value;
  return self;
}
- (PBUserTutorialBuilder*) clearSyncServer {
  resultPbuserTutorial.hasSyncServer = NO;
  resultPbuserTutorial.syncServer = NO;
  return self;
}
- (BOOL) hasLocalId {
  return resultPbuserTutorial.hasLocalId;
}
- (NSString*) localId {
  return resultPbuserTutorial.localId;
}
- (PBUserTutorialBuilder*) setLocalId:(NSString*) value {
  resultPbuserTutorial.hasLocalId = YES;
  resultPbuserTutorial.localId = value;
  return self;
}
- (PBUserTutorialBuilder*) clearLocalId {
  resultPbuserTutorial.hasLocalId = NO;
  resultPbuserTutorial.localId = @"";
  return self;
}
- (BOOL) hasRemoteId {
  return resultPbuserTutorial.hasRemoteId;
}
- (NSString*) remoteId {
  return resultPbuserTutorial.remoteId;
}
- (PBUserTutorialBuilder*) setRemoteId:(NSString*) value {
  resultPbuserTutorial.hasRemoteId = YES;
  resultPbuserTutorial.remoteId = value;
  return self;
}
- (PBUserTutorialBuilder*) clearRemoteId {
  resultPbuserTutorial.hasRemoteId = NO;
  resultPbuserTutorial.remoteId = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
