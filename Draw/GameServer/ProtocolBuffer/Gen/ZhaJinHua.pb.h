// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "GameBasic.pb.h"

@class PBDrawAction;
@class PBDrawAction_Builder;
@class PBGameSession;
@class PBGameSessionChanged;
@class PBGameSessionChanged_Builder;
@class PBGameSession_Builder;
@class PBGameUser;
@class PBGameUser_Builder;
@class PBKeyValue;
@class PBKeyValue_Builder;
@class PBMessage;
@class PBMessageStat;
@class PBMessageStat_Builder;
@class PBMessage_Builder;
@class PBPoker;
@class PBPoker_Builder;
@class PBSNSUser;
@class PBSNSUser_Builder;
@class PBUserPoker;
@class PBUserPoker_Builder;
@class PBUserResult;
@class PBUserResult_Builder;
@class ZJHGameResult;
@class ZJHGameResult_Builder;
@class ZJHGameState;
@class ZJHGameState_Builder;
@class ZJHUserInfo;
@class ZJHUserInfo_Builder;
typedef enum {
  ZJHCardTypeZjhCardTypeHighCard = 1,
  ZJHCardTypeZjhCardTypePair = 2,
  ZJHCardTypeZjhCardTypeStraight = 3,
  ZJHCardTypeZjhCardTypeFlush = 4,
  ZJHCardTypeZjhCardTypeStraightFlush = 5,
  ZJHCardTypeZjhCardTypeThreeOfAKind = 6,
  ZJHCardTypeZjhCardTypeSpecial = 7,
} ZJHCardType;

BOOL ZJHCardTypeIsValidValue(ZJHCardType value);

typedef enum {
  ZJHUserStateZjhActionDefault = 0,
  ZJHUserStateZjhActionCompairLose = 1,
  ZJHUserStateZjhActionCompairCheckCard = 2,
  ZJHUserStateZjhActionCompairFold = 3,
} ZJHUserState;

BOOL ZJHUserStateIsValidValue(ZJHUserState value);

typedef enum {
  PBPokerRankPokerRank2 = 2,
  PBPokerRankPokerRank3 = 3,
  PBPokerRankPokerRank4 = 4,
  PBPokerRankPokerRank5 = 5,
  PBPokerRankPokerRank6 = 6,
  PBPokerRankPokerRank7 = 7,
  PBPokerRankPokerRank8 = 8,
  PBPokerRankPokerRank9 = 9,
  PBPokerRankPokerRank10 = 10,
  PBPokerRankPokerRankJ = 11,
  PBPokerRankPokerRankQ = 12,
  PBPokerRankPokerRankK = 13,
  PBPokerRankPokerRankA = 14,
  PBPokerRankPokerRankBlackJoker = 15,
  PBPokerRankPokerRankRedJoker = 16,
} PBPokerRank;

BOOL PBPokerRankIsValidValue(PBPokerRank value);

typedef enum {
  PBPokerSuitPokerSuitDiamond = 1,
  PBPokerSuitPokerSuitClub = 2,
  PBPokerSuitPokerSuitHeart = 3,
  PBPokerSuitPokerSuitSpade = 4,
} PBPokerSuit;

BOOL PBPokerSuitIsValidValue(PBPokerSuit value);


@interface ZhaJinHuaRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface PBPoker : PBGeneratedMessage {
@private
  BOOL hasFaceUp_:1;
  BOOL hasPokerId_:1;
  BOOL hasRank_:1;
  BOOL hasSuit_:1;
  BOOL faceUp_:1;
  int32_t pokerId;
  PBPokerRank rank;
  PBPokerSuit suit;
}
- (BOOL) hasPokerId;
- (BOOL) hasRank;
- (BOOL) hasSuit;
- (BOOL) hasFaceUp;
@property (readonly) int32_t pokerId;
@property (readonly) PBPokerRank rank;
@property (readonly) PBPokerSuit suit;
- (BOOL) faceUp;

+ (PBPoker*) defaultInstance;
- (PBPoker*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBPoker_Builder*) builder;
+ (PBPoker_Builder*) builder;
+ (PBPoker_Builder*) builderWithPrototype:(PBPoker*) prototype;

+ (PBPoker*) parseFromData:(NSData*) data;
+ (PBPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBPoker_Builder : PBGeneratedMessage_Builder {
@private
  PBPoker* result;
}

- (PBPoker*) defaultInstance;

- (PBPoker_Builder*) clear;
- (PBPoker_Builder*) clone;

- (PBPoker*) build;
- (PBPoker*) buildPartial;

- (PBPoker_Builder*) mergeFrom:(PBPoker*) other;
- (PBPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasPokerId;
- (int32_t) pokerId;
- (PBPoker_Builder*) setPokerId:(int32_t) value;
- (PBPoker_Builder*) clearPokerId;

- (BOOL) hasRank;
- (PBPokerRank) rank;
- (PBPoker_Builder*) setRank:(PBPokerRank) value;
- (PBPoker_Builder*) clearRank;

- (BOOL) hasSuit;
- (PBPokerSuit) suit;
- (PBPoker_Builder*) setSuit:(PBPokerSuit) value;
- (PBPoker_Builder*) clearSuit;

- (BOOL) hasFaceUp;
- (BOOL) faceUp;
- (PBPoker_Builder*) setFaceUp:(BOOL) value;
- (PBPoker_Builder*) clearFaceUp;
@end

@interface ZJHGameState : PBGeneratedMessage {
@private
  BOOL hasTotalBet_:1;
  BOOL hasSingleBet_:1;
  BOOL hasUserInfo_:1;
  int32_t totalBet;
  int32_t singleBet;
  ZJHUserInfo* userInfo;
}
- (BOOL) hasTotalBet;
- (BOOL) hasSingleBet;
- (BOOL) hasUserInfo;
@property (readonly) int32_t totalBet;
@property (readonly) int32_t singleBet;
@property (readonly, retain) ZJHUserInfo* userInfo;

+ (ZJHGameState*) defaultInstance;
- (ZJHGameState*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (ZJHGameState_Builder*) builder;
+ (ZJHGameState_Builder*) builder;
+ (ZJHGameState_Builder*) builderWithPrototype:(ZJHGameState*) prototype;

+ (ZJHGameState*) parseFromData:(NSData*) data;
+ (ZJHGameState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ZJHGameState*) parseFromInputStream:(NSInputStream*) input;
+ (ZJHGameState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (ZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface ZJHGameState_Builder : PBGeneratedMessage_Builder {
@private
  ZJHGameState* result;
}

- (ZJHGameState*) defaultInstance;

- (ZJHGameState_Builder*) clear;
- (ZJHGameState_Builder*) clone;

- (ZJHGameState*) build;
- (ZJHGameState*) buildPartial;

- (ZJHGameState_Builder*) mergeFrom:(ZJHGameState*) other;
- (ZJHGameState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (ZJHGameState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasTotalBet;
- (int32_t) totalBet;
- (ZJHGameState_Builder*) setTotalBet:(int32_t) value;
- (ZJHGameState_Builder*) clearTotalBet;

- (BOOL) hasSingleBet;
- (int32_t) singleBet;
- (ZJHGameState_Builder*) setSingleBet:(int32_t) value;
- (ZJHGameState_Builder*) clearSingleBet;

- (BOOL) hasUserInfo;
- (ZJHUserInfo*) userInfo;
- (ZJHGameState_Builder*) setUserInfo:(ZJHUserInfo*) value;
- (ZJHGameState_Builder*) setUserInfoBuilder:(ZJHUserInfo_Builder*) builderForValue;
- (ZJHGameState_Builder*) mergeUserInfo:(ZJHUserInfo*) value;
- (ZJHGameState_Builder*) clearUserInfo;
@end

@interface PBUserPoker : PBGeneratedMessage {
@private
  BOOL hasUserId_:1;
  BOOL hasType_:1;
  NSString* userId;
  ZJHCardType type;
  NSMutableArray* mutablePokersList;
}
- (BOOL) hasUserId;
- (BOOL) hasType;
@property (readonly, retain) NSString* userId;
@property (readonly) ZJHCardType type;
- (NSArray*) pokersList;
- (PBPoker*) pokersAtIndex:(int32_t) index;

+ (PBUserPoker*) defaultInstance;
- (PBUserPoker*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBUserPoker_Builder*) builder;
+ (PBUserPoker_Builder*) builder;
+ (PBUserPoker_Builder*) builderWithPrototype:(PBUserPoker*) prototype;

+ (PBUserPoker*) parseFromData:(NSData*) data;
+ (PBUserPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBUserPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBUserPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBUserPoker_Builder : PBGeneratedMessage_Builder {
@private
  PBUserPoker* result;
}

- (PBUserPoker*) defaultInstance;

- (PBUserPoker_Builder*) clear;
- (PBUserPoker_Builder*) clone;

- (PBUserPoker*) build;
- (PBUserPoker*) buildPartial;

- (PBUserPoker_Builder*) mergeFrom:(PBUserPoker*) other;
- (PBUserPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBUserPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (NSString*) userId;
- (PBUserPoker_Builder*) setUserId:(NSString*) value;
- (PBUserPoker_Builder*) clearUserId;

- (NSArray*) pokersList;
- (PBPoker*) pokersAtIndex:(int32_t) index;
- (PBUserPoker_Builder*) replacePokersAtIndex:(int32_t) index with:(PBPoker*) value;
- (PBUserPoker_Builder*) addPokers:(PBPoker*) value;
- (PBUserPoker_Builder*) addAllPokers:(NSArray*) values;
- (PBUserPoker_Builder*) clearPokersList;

- (BOOL) hasType;
- (ZJHCardType) type;
- (PBUserPoker_Builder*) setType:(ZJHCardType) value;
- (PBUserPoker_Builder*) clearType;
@end

@interface ZJHUserInfo : PBGeneratedMessage {
@private
  BOOL hasIsCallingStation_:1;
  BOOL hasCanBeCompared_:1;
  BOOL hasUserBet_:1;
  BOOL hasState_:1;
  BOOL isCallingStation_:1;
  BOOL canBeCompared_:1;
  int32_t userBet;
  ZJHUserState state;
  NSMutableArray* mutableUserPokersList;
}
- (BOOL) hasUserBet;
- (BOOL) hasIsCallingStation;
- (BOOL) hasState;
- (BOOL) hasCanBeCompared;
@property (readonly) int32_t userBet;
- (BOOL) isCallingStation;
@property (readonly) ZJHUserState state;
- (BOOL) canBeCompared;
- (NSArray*) userPokersList;
- (PBUserPoker*) userPokersAtIndex:(int32_t) index;

+ (ZJHUserInfo*) defaultInstance;
- (ZJHUserInfo*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (ZJHUserInfo_Builder*) builder;
+ (ZJHUserInfo_Builder*) builder;
+ (ZJHUserInfo_Builder*) builderWithPrototype:(ZJHUserInfo*) prototype;

+ (ZJHUserInfo*) parseFromData:(NSData*) data;
+ (ZJHUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ZJHUserInfo*) parseFromInputStream:(NSInputStream*) input;
+ (ZJHUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ZJHUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (ZJHUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface ZJHUserInfo_Builder : PBGeneratedMessage_Builder {
@private
  ZJHUserInfo* result;
}

- (ZJHUserInfo*) defaultInstance;

- (ZJHUserInfo_Builder*) clear;
- (ZJHUserInfo_Builder*) clone;

- (ZJHUserInfo*) build;
- (ZJHUserInfo*) buildPartial;

- (ZJHUserInfo_Builder*) mergeFrom:(ZJHUserInfo*) other;
- (ZJHUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (ZJHUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSArray*) userPokersList;
- (PBUserPoker*) userPokersAtIndex:(int32_t) index;
- (ZJHUserInfo_Builder*) replaceUserPokersAtIndex:(int32_t) index with:(PBUserPoker*) value;
- (ZJHUserInfo_Builder*) addUserPokers:(PBUserPoker*) value;
- (ZJHUserInfo_Builder*) addAllUserPokers:(NSArray*) values;
- (ZJHUserInfo_Builder*) clearUserPokersList;

- (BOOL) hasUserBet;
- (int32_t) userBet;
- (ZJHUserInfo_Builder*) setUserBet:(int32_t) value;
- (ZJHUserInfo_Builder*) clearUserBet;

- (BOOL) hasIsCallingStation;
- (BOOL) isCallingStation;
- (ZJHUserInfo_Builder*) setIsCallingStation:(BOOL) value;
- (ZJHUserInfo_Builder*) clearIsCallingStation;

- (BOOL) hasState;
- (ZJHUserState) state;
- (ZJHUserInfo_Builder*) setState:(ZJHUserState) value;
- (ZJHUserInfo_Builder*) clearState;

- (BOOL) hasCanBeCompared;
- (BOOL) canBeCompared;
- (ZJHUserInfo_Builder*) setCanBeCompared:(BOOL) value;
- (ZJHUserInfo_Builder*) clearCanBeCompared;
@end

@interface ZJHGameResult : PBGeneratedMessage {
@private
  NSMutableArray* mutableUserResultList;
}
- (NSArray*) userResultList;
- (PBUserResult*) userResultAtIndex:(int32_t) index;

+ (ZJHGameResult*) defaultInstance;
- (ZJHGameResult*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (ZJHGameResult_Builder*) builder;
+ (ZJHGameResult_Builder*) builder;
+ (ZJHGameResult_Builder*) builderWithPrototype:(ZJHGameResult*) prototype;

+ (ZJHGameResult*) parseFromData:(NSData*) data;
+ (ZJHGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ZJHGameResult*) parseFromInputStream:(NSInputStream*) input;
+ (ZJHGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (ZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface ZJHGameResult_Builder : PBGeneratedMessage_Builder {
@private
  ZJHGameResult* result;
}

- (ZJHGameResult*) defaultInstance;

- (ZJHGameResult_Builder*) clear;
- (ZJHGameResult_Builder*) clone;

- (ZJHGameResult*) build;
- (ZJHGameResult*) buildPartial;

- (ZJHGameResult_Builder*) mergeFrom:(ZJHGameResult*) other;
- (ZJHGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (ZJHGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSArray*) userResultList;
- (PBUserResult*) userResultAtIndex:(int32_t) index;
- (ZJHGameResult_Builder*) replaceUserResultAtIndex:(int32_t) index with:(PBUserResult*) value;
- (ZJHGameResult_Builder*) addUserResult:(PBUserResult*) value;
- (ZJHGameResult_Builder*) addAllUserResult:(NSArray*) values;
- (ZJHGameResult_Builder*) clearUserResultList;
@end

