// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "GameBasic.pb.h"
// @@protoc_insertion_point(imports)

@class PBApp;
@class PBAppBuilder;
@class PBClass;
@class PBClassBuilder;
@class PBDrawAction;
@class PBDrawActionBuilder;
@class PBDrawBg;
@class PBDrawBgBuilder;
@class PBGameItem;
@class PBGameItemBuilder;
@class PBGameItemList;
@class PBGameItemListBuilder;
@class PBGameSession;
@class PBGameSessionBuilder;
@class PBGameSessionChanged;
@class PBGameSessionChangedBuilder;
@class PBGameUser;
@class PBGameUserBuilder;
@class PBGradient;
@class PBGradientBuilder;
@class PBIAPProduct;
@class PBIAPProductBuilder;
@class PBIAPProductList;
@class PBIAPProductListBuilder;
@class PBIAPProductPrice;
@class PBIAPProductPriceBuilder;
@class PBIntKeyIntValue;
@class PBIntKeyIntValueBuilder;
@class PBIntKeyValue;
@class PBIntKeyValueBuilder;
@class PBItemPriceInfo;
@class PBItemPriceInfoBuilder;
@class PBKeyValue;
@class PBKeyValueBuilder;
@class PBLayer;
@class PBLayerBuilder;
@class PBLocalizeString;
@class PBLocalizeStringBuilder;
@class PBMessage;
@class PBMessageBuilder;
@class PBMessageStat;
@class PBMessageStatBuilder;
@class PBOpusRank;
@class PBOpusRankBuilder;
@class PBPoker;
@class PBPokerBuilder;
@class PBPromotionInfo;
@class PBPromotionInfoBuilder;
@class PBSNSUser;
@class PBSNSUserBuilder;
@class PBSNSUserCredential;
@class PBSNSUserCredentialBuilder;
@class PBSimpleGroup;
@class PBSimpleGroupBuilder;
@class PBSize;
@class PBSizeBuilder;
@class PBTask;
@class PBTaskBuilder;
@class PBUserAward;
@class PBUserAwardBuilder;
@class PBUserBasicInfo;
@class PBUserBasicInfoBuilder;
@class PBUserItem;
@class PBUserItemBuilder;
@class PBUserItemList;
@class PBUserItemListBuilder;
@class PBUserLevel;
@class PBUserLevelBuilder;
@class PBUserResult;
@class PBUserResultBuilder;
@class PBZJHGameResult;
@class PBZJHGameResultBuilder;
@class PBZJHGameState;
@class PBZJHGameStateBuilder;
@class PBZJHPoker;
@class PBZJHPokerBuilder;
@class PBZJHUserPlayInfo;
@class PBZJHUserPlayInfoBuilder;
@class PBZJHUserPoker;
@class PBZJHUserPokerBuilder;
#ifndef __has_feature
  #define __has_feature(x) 0 // Compatibility with non-clang compilers.
#endif // __has_feature

#ifndef NS_RETURNS_NOT_RETAINED
  #if __has_feature(attribute_ns_returns_not_retained)
    #define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
  #else
    #define NS_RETURNS_NOT_RETAINED
  #endif
#endif

typedef NS_ENUM(SInt32, PBZJHRuleType) {
  PBZJHRuleTypeBeginer = 0,
  PBZJHRuleTypeNormal = 1,
  PBZJHRuleTypeRich = 2,
  PBZJHRuleTypeDual = 3,
};

BOOL PBZJHRuleTypeIsValidValue(PBZJHRuleType value);
NSString *NSStringFromPBZJHRuleType(PBZJHRuleType value);

typedef NS_ENUM(SInt32, PBZJHCardType) {
  PBZJHCardTypeUnknow = 0,
  PBZJHCardTypeHighCard = 1,
  PBZJHCardTypePair = 2,
  PBZJHCardTypeStraight = 3,
  PBZJHCardTypeFlush = 4,
  PBZJHCardTypeStraightFlush = 5,
  PBZJHCardTypeThreeOfAKind = 6,
  PBZJHCardTypeSpecial = 7,
};

BOOL PBZJHCardTypeIsValidValue(PBZJHCardType value);
NSString *NSStringFromPBZJHCardType(PBZJHCardType value);

typedef NS_ENUM(SInt32, PBZJHUserAction) {
  PBZJHUserActionNone = 0,
  PBZJHUserActionBet = 1,
  PBZJHUserActionRaiseBet = 2,
  PBZJHUserActionAutoBet = 3,
  PBZJHUserActionCheckCard = 4,
  PBZJHUserActionFoldCard = 5,
  PBZJHUserActionCompareCard = 6,
  PBZJHUserActionShowCard = 7,
  PBZJHUserActionChangeCard = 8,
};

BOOL PBZJHUserActionIsValidValue(PBZJHUserAction value);
NSString *NSStringFromPBZJHUserAction(PBZJHUserAction value);

typedef NS_ENUM(SInt32, PBPokerRank) {
  PBPokerRankPokerRank2 = 2,
  PBPokerRankPokerRank3 = 3,
  PBPokerRankPokerRank4 = 4,
  PBPokerRankPokerRank5 = 5,
  PBPokerRankPokerRank6 = 6,
  PBPokerRankPokerRank7 = 7,
  PBPokerRankPokerRank8 = 8,
  PBPokerRankPokerRank9 = 9,
  PBPokerRankPokerRank10 = 10,
  PBPokerRankPokerRankJ = 11,
  PBPokerRankPokerRankQ = 12,
  PBPokerRankPokerRankK = 13,
  PBPokerRankPokerRankA = 14,
  PBPokerRankPokerRankBlackJoker = 15,
  PBPokerRankPokerRankRedJoker = 16,
};

BOOL PBPokerRankIsValidValue(PBPokerRank value);
NSString *NSStringFromPBPokerRank(PBPokerRank value);

typedef NS_ENUM(SInt32, PBPokerSuit) {
  PBPokerSuitPokerSuitDiamond = 1,
  PBPokerSuitPokerSuitClub = 2,
  PBPokerSuitPokerSuitHeart = 3,
  PBPokerSuitPokerSuitSpade = 4,
};

BOOL PBPokerSuitIsValidValue(PBPokerSuit value);
NSString *NSStringFromPBPokerSuit(PBPokerSuit value);


@interface ZhaJinHuaRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface PBPoker : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasFaceUp_:1;
  BOOL hasPokerId_:1;
  BOOL hasRank_:1;
  BOOL hasSuit_:1;
  BOOL faceUp_:1;
  SInt32 pokerId;
  PBPokerRank rank;
  PBPokerSuit suit;
}
- (BOOL) hasPokerId;
- (BOOL) hasRank;
- (BOOL) hasSuit;
- (BOOL) hasFaceUp;
@property (readonly) SInt32 pokerId;
@property (readonly) PBPokerRank rank;
@property (readonly) PBPokerSuit suit;
- (BOOL) faceUp;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBPokerBuilder*) builder;
+ (PBPokerBuilder*) builder;
+ (PBPokerBuilder*) builderWithPrototype:(PBPoker*) prototype;
- (PBPokerBuilder*) toBuilder;

+ (PBPoker*) parseFromData:(NSData*) data;
+ (PBPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBPokerBuilder : PBGeneratedMessageBuilder {
@private
  PBPoker* resultPbpoker;
}

- (PBPoker*) defaultInstance;

- (PBPokerBuilder*) clear;
- (PBPokerBuilder*) clone;

- (PBPoker*) build;
- (PBPoker*) buildPartial;

- (PBPokerBuilder*) mergeFrom:(PBPoker*) other;
- (PBPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasPokerId;
- (SInt32) pokerId;
- (PBPokerBuilder*) setPokerId:(SInt32) value;
- (PBPokerBuilder*) clearPokerId;

- (BOOL) hasRank;
- (PBPokerRank) rank;
- (PBPokerBuilder*) setRank:(PBPokerRank) value;
- (PBPokerBuilder*) clearRank;

- (BOOL) hasSuit;
- (PBPokerSuit) suit;
- (PBPokerBuilder*) setSuit:(PBPokerSuit) value;
- (PBPokerBuilder*) clearSuit;

- (BOOL) hasFaceUp;
- (BOOL) faceUp;
- (PBPokerBuilder*) setFaceUp:(BOOL) value;
- (PBPokerBuilder*) clearFaceUp;
@end

@interface PBZJHGameState : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasTotalBet_:1;
  BOOL hasSingleBet_:1;
  SInt32 totalBet;
  SInt32 singleBet;
  NSMutableArray * usersInfoArray;
}
- (BOOL) hasTotalBet;
- (BOOL) hasSingleBet;
@property (readonly) SInt32 totalBet;
@property (readonly) SInt32 singleBet;
@property (readonly, strong) NSArray * usersInfo;
- (PBZJHUserPlayInfo*)usersInfoAtIndex:(NSUInteger)index;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHGameStateBuilder*) builder;
+ (PBZJHGameStateBuilder*) builder;
+ (PBZJHGameStateBuilder*) builderWithPrototype:(PBZJHGameState*) prototype;
- (PBZJHGameStateBuilder*) toBuilder;

+ (PBZJHGameState*) parseFromData:(NSData*) data;
+ (PBZJHGameState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHGameStateBuilder : PBGeneratedMessageBuilder {
@private
  PBZJHGameState* resultPbzjhgameState;
}

- (PBZJHGameState*) defaultInstance;

- (PBZJHGameStateBuilder*) clear;
- (PBZJHGameStateBuilder*) clone;

- (PBZJHGameState*) build;
- (PBZJHGameState*) buildPartial;

- (PBZJHGameStateBuilder*) mergeFrom:(PBZJHGameState*) other;
- (PBZJHGameStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHGameStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasTotalBet;
- (SInt32) totalBet;
- (PBZJHGameStateBuilder*) setTotalBet:(SInt32) value;
- (PBZJHGameStateBuilder*) clearTotalBet;

- (BOOL) hasSingleBet;
- (SInt32) singleBet;
- (PBZJHGameStateBuilder*) setSingleBet:(SInt32) value;
- (PBZJHGameStateBuilder*) clearSingleBet;

- (NSMutableArray *)usersInfo;
- (PBZJHUserPlayInfo*)usersInfoAtIndex:(NSUInteger)index;
- (PBZJHGameStateBuilder *)addUsersInfo:(PBZJHUserPlayInfo*)value;
- (PBZJHGameStateBuilder *)setUsersInfoArray:(NSArray *)array;
- (PBZJHGameStateBuilder *)clearUsersInfo;
@end

@interface PBZJHPoker : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasCardType_:1;
  PBZJHCardType cardType;
  NSMutableArray * pokersArray;
}
- (BOOL) hasCardType;
@property (readonly, strong) NSArray * pokers;
@property (readonly) PBZJHCardType cardType;
- (PBPoker*)pokersAtIndex:(NSUInteger)index;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHPokerBuilder*) builder;
+ (PBZJHPokerBuilder*) builder;
+ (PBZJHPokerBuilder*) builderWithPrototype:(PBZJHPoker*) prototype;
- (PBZJHPokerBuilder*) toBuilder;

+ (PBZJHPoker*) parseFromData:(NSData*) data;
+ (PBZJHPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHPokerBuilder : PBGeneratedMessageBuilder {
@private
  PBZJHPoker* resultPbzjhpoker;
}

- (PBZJHPoker*) defaultInstance;

- (PBZJHPokerBuilder*) clear;
- (PBZJHPokerBuilder*) clone;

- (PBZJHPoker*) build;
- (PBZJHPoker*) buildPartial;

- (PBZJHPokerBuilder*) mergeFrom:(PBZJHPoker*) other;
- (PBZJHPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSMutableArray *)pokers;
- (PBPoker*)pokersAtIndex:(NSUInteger)index;
- (PBZJHPokerBuilder *)addPokers:(PBPoker*)value;
- (PBZJHPokerBuilder *)setPokersArray:(NSArray *)array;
- (PBZJHPokerBuilder *)clearPokers;

- (BOOL) hasCardType;
- (PBZJHCardType) cardType;
- (PBZJHPokerBuilder*) setCardType:(PBZJHCardType) value;
- (PBZJHPokerBuilder*) clearCardType;
@end

@interface PBZJHUserPoker : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasUserId_:1;
  BOOL hasPokers_:1;
  NSString* userId;
  PBZJHPoker* pokers;
}
- (BOOL) hasUserId;
- (BOOL) hasPokers;
@property (readonly, strong) NSString* userId;
@property (readonly, strong) PBZJHPoker* pokers;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHUserPokerBuilder*) builder;
+ (PBZJHUserPokerBuilder*) builder;
+ (PBZJHUserPokerBuilder*) builderWithPrototype:(PBZJHUserPoker*) prototype;
- (PBZJHUserPokerBuilder*) toBuilder;

+ (PBZJHUserPoker*) parseFromData:(NSData*) data;
+ (PBZJHUserPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHUserPokerBuilder : PBGeneratedMessageBuilder {
@private
  PBZJHUserPoker* resultPbzjhuserPoker;
}

- (PBZJHUserPoker*) defaultInstance;

- (PBZJHUserPokerBuilder*) clear;
- (PBZJHUserPokerBuilder*) clone;

- (PBZJHUserPoker*) build;
- (PBZJHUserPoker*) buildPartial;

- (PBZJHUserPokerBuilder*) mergeFrom:(PBZJHUserPoker*) other;
- (PBZJHUserPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHUserPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (NSString*) userId;
- (PBZJHUserPokerBuilder*) setUserId:(NSString*) value;
- (PBZJHUserPokerBuilder*) clearUserId;

- (BOOL) hasPokers;
- (PBZJHPoker*) pokers;
- (PBZJHUserPokerBuilder*) setPokers:(PBZJHPoker*) value;
- (PBZJHUserPokerBuilder*) setPokersBuilder:(PBZJHPokerBuilder*) builderForValue;
- (PBZJHUserPokerBuilder*) mergePokers:(PBZJHPoker*) value;
- (PBZJHUserPokerBuilder*) clearPokers;
@end

@interface PBZJHUserPlayInfo : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasIsAutoBet_:1;
  BOOL hasAlreadCheckCard_:1;
  BOOL hasAlreadFoldCard_:1;
  BOOL hasAlreadShowCard_:1;
  BOOL hasAlreadCompareLose_:1;
  BOOL hasTotalBet_:1;
  BOOL hasUserId_:1;
  BOOL hasPokers_:1;
  BOOL hasLastAction_:1;
  BOOL isAutoBet_:1;
  BOOL alreadCheckCard_:1;
  BOOL alreadFoldCard_:1;
  BOOL alreadShowCard_:1;
  BOOL alreadCompareLose_:1;
  SInt32 totalBet;
  NSString* userId;
  PBZJHPoker* pokers;
  PBZJHUserAction lastAction;
}
- (BOOL) hasUserId;
- (BOOL) hasPokers;
- (BOOL) hasTotalBet;
- (BOOL) hasIsAutoBet;
- (BOOL) hasLastAction;
- (BOOL) hasAlreadCheckCard;
- (BOOL) hasAlreadFoldCard;
- (BOOL) hasAlreadShowCard;
- (BOOL) hasAlreadCompareLose;
@property (readonly, strong) NSString* userId;
@property (readonly, strong) PBZJHPoker* pokers;
@property (readonly) SInt32 totalBet;
- (BOOL) isAutoBet;
@property (readonly) PBZJHUserAction lastAction;
- (BOOL) alreadCheckCard;
- (BOOL) alreadFoldCard;
- (BOOL) alreadShowCard;
- (BOOL) alreadCompareLose;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHUserPlayInfoBuilder*) builder;
+ (PBZJHUserPlayInfoBuilder*) builder;
+ (PBZJHUserPlayInfoBuilder*) builderWithPrototype:(PBZJHUserPlayInfo*) prototype;
- (PBZJHUserPlayInfoBuilder*) toBuilder;

+ (PBZJHUserPlayInfo*) parseFromData:(NSData*) data;
+ (PBZJHUserPlayInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPlayInfo*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHUserPlayInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPlayInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHUserPlayInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHUserPlayInfoBuilder : PBGeneratedMessageBuilder {
@private
  PBZJHUserPlayInfo* resultPbzjhuserPlayInfo;
}

- (PBZJHUserPlayInfo*) defaultInstance;

- (PBZJHUserPlayInfoBuilder*) clear;
- (PBZJHUserPlayInfoBuilder*) clone;

- (PBZJHUserPlayInfo*) build;
- (PBZJHUserPlayInfo*) buildPartial;

- (PBZJHUserPlayInfoBuilder*) mergeFrom:(PBZJHUserPlayInfo*) other;
- (PBZJHUserPlayInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHUserPlayInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (NSString*) userId;
- (PBZJHUserPlayInfoBuilder*) setUserId:(NSString*) value;
- (PBZJHUserPlayInfoBuilder*) clearUserId;

- (BOOL) hasPokers;
- (PBZJHPoker*) pokers;
- (PBZJHUserPlayInfoBuilder*) setPokers:(PBZJHPoker*) value;
- (PBZJHUserPlayInfoBuilder*) setPokersBuilder:(PBZJHPokerBuilder*) builderForValue;
- (PBZJHUserPlayInfoBuilder*) mergePokers:(PBZJHPoker*) value;
- (PBZJHUserPlayInfoBuilder*) clearPokers;

- (BOOL) hasTotalBet;
- (SInt32) totalBet;
- (PBZJHUserPlayInfoBuilder*) setTotalBet:(SInt32) value;
- (PBZJHUserPlayInfoBuilder*) clearTotalBet;

- (BOOL) hasIsAutoBet;
- (BOOL) isAutoBet;
- (PBZJHUserPlayInfoBuilder*) setIsAutoBet:(BOOL) value;
- (PBZJHUserPlayInfoBuilder*) clearIsAutoBet;

- (BOOL) hasLastAction;
- (PBZJHUserAction) lastAction;
- (PBZJHUserPlayInfoBuilder*) setLastAction:(PBZJHUserAction) value;
- (PBZJHUserPlayInfoBuilder*) clearLastAction;

- (BOOL) hasAlreadCheckCard;
- (BOOL) alreadCheckCard;
- (PBZJHUserPlayInfoBuilder*) setAlreadCheckCard:(BOOL) value;
- (PBZJHUserPlayInfoBuilder*) clearAlreadCheckCard;

- (BOOL) hasAlreadFoldCard;
- (BOOL) alreadFoldCard;
- (PBZJHUserPlayInfoBuilder*) setAlreadFoldCard:(BOOL) value;
- (PBZJHUserPlayInfoBuilder*) clearAlreadFoldCard;

- (BOOL) hasAlreadShowCard;
- (BOOL) alreadShowCard;
- (PBZJHUserPlayInfoBuilder*) setAlreadShowCard:(BOOL) value;
- (PBZJHUserPlayInfoBuilder*) clearAlreadShowCard;

- (BOOL) hasAlreadCompareLose;
- (BOOL) alreadCompareLose;
- (PBZJHUserPlayInfoBuilder*) setAlreadCompareLose:(BOOL) value;
- (PBZJHUserPlayInfoBuilder*) clearAlreadCompareLose;
@end

@interface PBZJHGameResult : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  NSMutableArray * userResultArray;
}
@property (readonly, strong) NSArray * userResult;
- (PBUserResult*)userResultAtIndex:(NSUInteger)index;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHGameResultBuilder*) builder;
+ (PBZJHGameResultBuilder*) builder;
+ (PBZJHGameResultBuilder*) builderWithPrototype:(PBZJHGameResult*) prototype;
- (PBZJHGameResultBuilder*) toBuilder;

+ (PBZJHGameResult*) parseFromData:(NSData*) data;
+ (PBZJHGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHGameResultBuilder : PBGeneratedMessageBuilder {
@private
  PBZJHGameResult* resultPbzjhgameResult;
}

- (PBZJHGameResult*) defaultInstance;

- (PBZJHGameResultBuilder*) clear;
- (PBZJHGameResultBuilder*) clone;

- (PBZJHGameResult*) build;
- (PBZJHGameResult*) buildPartial;

- (PBZJHGameResultBuilder*) mergeFrom:(PBZJHGameResult*) other;
- (PBZJHGameResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHGameResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSMutableArray *)userResult;
- (PBUserResult*)userResultAtIndex:(NSUInteger)index;
- (PBZJHGameResultBuilder *)addUserResult:(PBUserResult*)value;
- (PBZJHGameResultBuilder *)setUserResultArray:(NSArray *)array;
- (PBZJHGameResultBuilder *)clearUserResult;
@end


// @@protoc_insertion_point(global_scope)
