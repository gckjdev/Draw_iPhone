// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "GameBasic.pb.h"

@class PBDrawAction;
@class PBDrawAction_Builder;
@class PBGameItem;
@class PBGameItemList;
@class PBGameItemList_Builder;
@class PBGameItem_Builder;
@class PBGameSession;
@class PBGameSessionChanged;
@class PBGameSessionChanged_Builder;
@class PBGameSession_Builder;
@class PBGameUser;
@class PBGameUser_Builder;
@class PBItemPriceInfo;
@class PBItemPriceInfo_Builder;
@class PBKeyValue;
@class PBKeyValue_Builder;
@class PBMessage;
@class PBMessageStat;
@class PBMessageStat_Builder;
@class PBMessage_Builder;
@class PBPoker;
@class PBPoker_Builder;
@class PBPromotionInfo;
@class PBPromotionInfo_Builder;
@class PBSNSUser;
@class PBSNSUser_Builder;
@class PBSaleIngot;
@class PBSaleIngotList;
@class PBSaleIngotList_Builder;
@class PBSaleIngot_Builder;
@class PBUserItem;
@class PBUserItemList;
@class PBUserItemList_Builder;
@class PBUserItem_Builder;
@class PBUserResult;
@class PBUserResult_Builder;
@class PBZJHGameResult;
@class PBZJHGameResult_Builder;
@class PBZJHGameState;
@class PBZJHGameState_Builder;
@class PBZJHPoker;
@class PBZJHPoker_Builder;
@class PBZJHUserPlayInfo;
@class PBZJHUserPlayInfo_Builder;
@class PBZJHUserPoker;
@class PBZJHUserPoker_Builder;
typedef enum {
  PBZJHRuleTypeBeginer = 0,
  PBZJHRuleTypeNormal = 1,
  PBZJHRuleTypeRich = 2,
  PBZJHRuleTypeDual = 3,
} PBZJHRuleType;

BOOL PBZJHRuleTypeIsValidValue(PBZJHRuleType value);

typedef enum {
  PBZJHCardTypeUnknow = 0,
  PBZJHCardTypeHighCard = 1,
  PBZJHCardTypePair = 2,
  PBZJHCardTypeStraight = 3,
  PBZJHCardTypeFlush = 4,
  PBZJHCardTypeStraightFlush = 5,
  PBZJHCardTypeThreeOfAKind = 6,
  PBZJHCardTypeSpecial = 7,
} PBZJHCardType;

BOOL PBZJHCardTypeIsValidValue(PBZJHCardType value);

typedef enum {
  PBZJHUserActionNone = 0,
  PBZJHUserActionBet = 1,
  PBZJHUserActionRaiseBet = 2,
  PBZJHUserActionAutoBet = 3,
  PBZJHUserActionCheckCard = 4,
  PBZJHUserActionFoldCard = 5,
  PBZJHUserActionCompareCard = 6,
  PBZJHUserActionShowCard = 7,
  PBZJHUserActionChangeCard = 8,
} PBZJHUserAction;

BOOL PBZJHUserActionIsValidValue(PBZJHUserAction value);

typedef enum {
  PBPokerRankPokerRank2 = 2,
  PBPokerRankPokerRank3 = 3,
  PBPokerRankPokerRank4 = 4,
  PBPokerRankPokerRank5 = 5,
  PBPokerRankPokerRank6 = 6,
  PBPokerRankPokerRank7 = 7,
  PBPokerRankPokerRank8 = 8,
  PBPokerRankPokerRank9 = 9,
  PBPokerRankPokerRank10 = 10,
  PBPokerRankPokerRankJ = 11,
  PBPokerRankPokerRankQ = 12,
  PBPokerRankPokerRankK = 13,
  PBPokerRankPokerRankA = 14,
  PBPokerRankPokerRankBlackJoker = 15,
  PBPokerRankPokerRankRedJoker = 16,
} PBPokerRank;

BOOL PBPokerRankIsValidValue(PBPokerRank value);

typedef enum {
  PBPokerSuitPokerSuitDiamond = 1,
  PBPokerSuitPokerSuitClub = 2,
  PBPokerSuitPokerSuitHeart = 3,
  PBPokerSuitPokerSuitSpade = 4,
} PBPokerSuit;

BOOL PBPokerSuitIsValidValue(PBPokerSuit value);


@interface ZhaJinHuaRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface PBPoker : PBGeneratedMessage {
@private
  BOOL hasFaceUp_:1;
  BOOL hasPokerId_:1;
  BOOL hasRank_:1;
  BOOL hasSuit_:1;
  BOOL faceUp_:1;
  int32_t pokerId;
  PBPokerRank rank;
  PBPokerSuit suit;
}
- (BOOL) hasPokerId;
- (BOOL) hasRank;
- (BOOL) hasSuit;
- (BOOL) hasFaceUp;
@property (readonly) int32_t pokerId;
@property (readonly) PBPokerRank rank;
@property (readonly) PBPokerSuit suit;
- (BOOL) faceUp;

+ (PBPoker*) defaultInstance;
- (PBPoker*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBPoker_Builder*) builder;
+ (PBPoker_Builder*) builder;
+ (PBPoker_Builder*) builderWithPrototype:(PBPoker*) prototype;

+ (PBPoker*) parseFromData:(NSData*) data;
+ (PBPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBPoker_Builder : PBGeneratedMessage_Builder {
@private
  PBPoker* result;
}

- (PBPoker*) defaultInstance;

- (PBPoker_Builder*) clear;
- (PBPoker_Builder*) clone;

- (PBPoker*) build;
- (PBPoker*) buildPartial;

- (PBPoker_Builder*) mergeFrom:(PBPoker*) other;
- (PBPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasPokerId;
- (int32_t) pokerId;
- (PBPoker_Builder*) setPokerId:(int32_t) value;
- (PBPoker_Builder*) clearPokerId;

- (BOOL) hasRank;
- (PBPokerRank) rank;
- (PBPoker_Builder*) setRank:(PBPokerRank) value;
- (PBPoker_Builder*) clearRank;

- (BOOL) hasSuit;
- (PBPokerSuit) suit;
- (PBPoker_Builder*) setSuit:(PBPokerSuit) value;
- (PBPoker_Builder*) clearSuit;

- (BOOL) hasFaceUp;
- (BOOL) faceUp;
- (PBPoker_Builder*) setFaceUp:(BOOL) value;
- (PBPoker_Builder*) clearFaceUp;
@end

@interface PBZJHGameState : PBGeneratedMessage {
@private
  BOOL hasTotalBet_:1;
  BOOL hasSingleBet_:1;
  int32_t totalBet;
  int32_t singleBet;
  NSMutableArray* mutableUsersInfoList;
}
- (BOOL) hasTotalBet;
- (BOOL) hasSingleBet;
@property (readonly) int32_t totalBet;
@property (readonly) int32_t singleBet;
- (NSArray*) usersInfoList;
- (PBZJHUserPlayInfo*) usersInfoAtIndex:(int32_t) index;

+ (PBZJHGameState*) defaultInstance;
- (PBZJHGameState*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHGameState_Builder*) builder;
+ (PBZJHGameState_Builder*) builder;
+ (PBZJHGameState_Builder*) builderWithPrototype:(PBZJHGameState*) prototype;

+ (PBZJHGameState*) parseFromData:(NSData*) data;
+ (PBZJHGameState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHGameState_Builder : PBGeneratedMessage_Builder {
@private
  PBZJHGameState* result;
}

- (PBZJHGameState*) defaultInstance;

- (PBZJHGameState_Builder*) clear;
- (PBZJHGameState_Builder*) clone;

- (PBZJHGameState*) build;
- (PBZJHGameState*) buildPartial;

- (PBZJHGameState_Builder*) mergeFrom:(PBZJHGameState*) other;
- (PBZJHGameState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHGameState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasTotalBet;
- (int32_t) totalBet;
- (PBZJHGameState_Builder*) setTotalBet:(int32_t) value;
- (PBZJHGameState_Builder*) clearTotalBet;

- (BOOL) hasSingleBet;
- (int32_t) singleBet;
- (PBZJHGameState_Builder*) setSingleBet:(int32_t) value;
- (PBZJHGameState_Builder*) clearSingleBet;

- (NSArray*) usersInfoList;
- (PBZJHUserPlayInfo*) usersInfoAtIndex:(int32_t) index;
- (PBZJHGameState_Builder*) replaceUsersInfoAtIndex:(int32_t) index with:(PBZJHUserPlayInfo*) value;
- (PBZJHGameState_Builder*) addUsersInfo:(PBZJHUserPlayInfo*) value;
- (PBZJHGameState_Builder*) addAllUsersInfo:(NSArray*) values;
- (PBZJHGameState_Builder*) clearUsersInfoList;
@end

@interface PBZJHPoker : PBGeneratedMessage {
@private
  BOOL hasCardType_:1;
  PBZJHCardType cardType;
  NSMutableArray* mutablePokersList;
}
- (BOOL) hasCardType;
@property (readonly) PBZJHCardType cardType;
- (NSArray*) pokersList;
- (PBPoker*) pokersAtIndex:(int32_t) index;

+ (PBZJHPoker*) defaultInstance;
- (PBZJHPoker*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHPoker_Builder*) builder;
+ (PBZJHPoker_Builder*) builder;
+ (PBZJHPoker_Builder*) builderWithPrototype:(PBZJHPoker*) prototype;

+ (PBZJHPoker*) parseFromData:(NSData*) data;
+ (PBZJHPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHPoker_Builder : PBGeneratedMessage_Builder {
@private
  PBZJHPoker* result;
}

- (PBZJHPoker*) defaultInstance;

- (PBZJHPoker_Builder*) clear;
- (PBZJHPoker_Builder*) clone;

- (PBZJHPoker*) build;
- (PBZJHPoker*) buildPartial;

- (PBZJHPoker_Builder*) mergeFrom:(PBZJHPoker*) other;
- (PBZJHPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSArray*) pokersList;
- (PBPoker*) pokersAtIndex:(int32_t) index;
- (PBZJHPoker_Builder*) replacePokersAtIndex:(int32_t) index with:(PBPoker*) value;
- (PBZJHPoker_Builder*) addPokers:(PBPoker*) value;
- (PBZJHPoker_Builder*) addAllPokers:(NSArray*) values;
- (PBZJHPoker_Builder*) clearPokersList;

- (BOOL) hasCardType;
- (PBZJHCardType) cardType;
- (PBZJHPoker_Builder*) setCardType:(PBZJHCardType) value;
- (PBZJHPoker_Builder*) clearCardType;
@end

@interface PBZJHUserPoker : PBGeneratedMessage {
@private
  BOOL hasUserId_:1;
  BOOL hasPokers_:1;
  NSString* userId;
  PBZJHPoker* pokers;
}
- (BOOL) hasUserId;
- (BOOL) hasPokers;
@property (readonly, retain) NSString* userId;
@property (readonly, retain) PBZJHPoker* pokers;

+ (PBZJHUserPoker*) defaultInstance;
- (PBZJHUserPoker*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHUserPoker_Builder*) builder;
+ (PBZJHUserPoker_Builder*) builder;
+ (PBZJHUserPoker_Builder*) builderWithPrototype:(PBZJHUserPoker*) prototype;

+ (PBZJHUserPoker*) parseFromData:(NSData*) data;
+ (PBZJHUserPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHUserPoker_Builder : PBGeneratedMessage_Builder {
@private
  PBZJHUserPoker* result;
}

- (PBZJHUserPoker*) defaultInstance;

- (PBZJHUserPoker_Builder*) clear;
- (PBZJHUserPoker_Builder*) clone;

- (PBZJHUserPoker*) build;
- (PBZJHUserPoker*) buildPartial;

- (PBZJHUserPoker_Builder*) mergeFrom:(PBZJHUserPoker*) other;
- (PBZJHUserPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHUserPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (NSString*) userId;
- (PBZJHUserPoker_Builder*) setUserId:(NSString*) value;
- (PBZJHUserPoker_Builder*) clearUserId;

- (BOOL) hasPokers;
- (PBZJHPoker*) pokers;
- (PBZJHUserPoker_Builder*) setPokers:(PBZJHPoker*) value;
- (PBZJHUserPoker_Builder*) setPokersBuilder:(PBZJHPoker_Builder*) builderForValue;
- (PBZJHUserPoker_Builder*) mergePokers:(PBZJHPoker*) value;
- (PBZJHUserPoker_Builder*) clearPokers;
@end

@interface PBZJHUserPlayInfo : PBGeneratedMessage {
@private
  BOOL hasIsAutoBet_:1;
  BOOL hasAlreadCheckCard_:1;
  BOOL hasAlreadFoldCard_:1;
  BOOL hasAlreadShowCard_:1;
  BOOL hasAlreadCompareLose_:1;
  BOOL hasTotalBet_:1;
  BOOL hasUserId_:1;
  BOOL hasPokers_:1;
  BOOL hasLastAction_:1;
  BOOL isAutoBet_:1;
  BOOL alreadCheckCard_:1;
  BOOL alreadFoldCard_:1;
  BOOL alreadShowCard_:1;
  BOOL alreadCompareLose_:1;
  int32_t totalBet;
  NSString* userId;
  PBZJHPoker* pokers;
  PBZJHUserAction lastAction;
}
- (BOOL) hasUserId;
- (BOOL) hasPokers;
- (BOOL) hasTotalBet;
- (BOOL) hasIsAutoBet;
- (BOOL) hasLastAction;
- (BOOL) hasAlreadCheckCard;
- (BOOL) hasAlreadFoldCard;
- (BOOL) hasAlreadShowCard;
- (BOOL) hasAlreadCompareLose;
@property (readonly, retain) NSString* userId;
@property (readonly, retain) PBZJHPoker* pokers;
@property (readonly) int32_t totalBet;
- (BOOL) isAutoBet;
@property (readonly) PBZJHUserAction lastAction;
- (BOOL) alreadCheckCard;
- (BOOL) alreadFoldCard;
- (BOOL) alreadShowCard;
- (BOOL) alreadCompareLose;

+ (PBZJHUserPlayInfo*) defaultInstance;
- (PBZJHUserPlayInfo*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHUserPlayInfo_Builder*) builder;
+ (PBZJHUserPlayInfo_Builder*) builder;
+ (PBZJHUserPlayInfo_Builder*) builderWithPrototype:(PBZJHUserPlayInfo*) prototype;

+ (PBZJHUserPlayInfo*) parseFromData:(NSData*) data;
+ (PBZJHUserPlayInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPlayInfo*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHUserPlayInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHUserPlayInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHUserPlayInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHUserPlayInfo_Builder : PBGeneratedMessage_Builder {
@private
  PBZJHUserPlayInfo* result;
}

- (PBZJHUserPlayInfo*) defaultInstance;

- (PBZJHUserPlayInfo_Builder*) clear;
- (PBZJHUserPlayInfo_Builder*) clone;

- (PBZJHUserPlayInfo*) build;
- (PBZJHUserPlayInfo*) buildPartial;

- (PBZJHUserPlayInfo_Builder*) mergeFrom:(PBZJHUserPlayInfo*) other;
- (PBZJHUserPlayInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHUserPlayInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (NSString*) userId;
- (PBZJHUserPlayInfo_Builder*) setUserId:(NSString*) value;
- (PBZJHUserPlayInfo_Builder*) clearUserId;

- (BOOL) hasPokers;
- (PBZJHPoker*) pokers;
- (PBZJHUserPlayInfo_Builder*) setPokers:(PBZJHPoker*) value;
- (PBZJHUserPlayInfo_Builder*) setPokersBuilder:(PBZJHPoker_Builder*) builderForValue;
- (PBZJHUserPlayInfo_Builder*) mergePokers:(PBZJHPoker*) value;
- (PBZJHUserPlayInfo_Builder*) clearPokers;

- (BOOL) hasTotalBet;
- (int32_t) totalBet;
- (PBZJHUserPlayInfo_Builder*) setTotalBet:(int32_t) value;
- (PBZJHUserPlayInfo_Builder*) clearTotalBet;

- (BOOL) hasIsAutoBet;
- (BOOL) isAutoBet;
- (PBZJHUserPlayInfo_Builder*) setIsAutoBet:(BOOL) value;
- (PBZJHUserPlayInfo_Builder*) clearIsAutoBet;

- (BOOL) hasLastAction;
- (PBZJHUserAction) lastAction;
- (PBZJHUserPlayInfo_Builder*) setLastAction:(PBZJHUserAction) value;
- (PBZJHUserPlayInfo_Builder*) clearLastAction;

- (BOOL) hasAlreadCheckCard;
- (BOOL) alreadCheckCard;
- (PBZJHUserPlayInfo_Builder*) setAlreadCheckCard:(BOOL) value;
- (PBZJHUserPlayInfo_Builder*) clearAlreadCheckCard;

- (BOOL) hasAlreadFoldCard;
- (BOOL) alreadFoldCard;
- (PBZJHUserPlayInfo_Builder*) setAlreadFoldCard:(BOOL) value;
- (PBZJHUserPlayInfo_Builder*) clearAlreadFoldCard;

- (BOOL) hasAlreadShowCard;
- (BOOL) alreadShowCard;
- (PBZJHUserPlayInfo_Builder*) setAlreadShowCard:(BOOL) value;
- (PBZJHUserPlayInfo_Builder*) clearAlreadShowCard;

- (BOOL) hasAlreadCompareLose;
- (BOOL) alreadCompareLose;
- (PBZJHUserPlayInfo_Builder*) setAlreadCompareLose:(BOOL) value;
- (PBZJHUserPlayInfo_Builder*) clearAlreadCompareLose;
@end

@interface PBZJHGameResult : PBGeneratedMessage {
@private
  NSMutableArray* mutableUserResultList;
}
- (NSArray*) userResultList;
- (PBUserResult*) userResultAtIndex:(int32_t) index;

+ (PBZJHGameResult*) defaultInstance;
- (PBZJHGameResult*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PBZJHGameResult_Builder*) builder;
+ (PBZJHGameResult_Builder*) builder;
+ (PBZJHGameResult_Builder*) builderWithPrototype:(PBZJHGameResult*) prototype;

+ (PBZJHGameResult*) parseFromData:(NSData*) data;
+ (PBZJHGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input;
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PBZJHGameResult_Builder : PBGeneratedMessage_Builder {
@private
  PBZJHGameResult* result;
}

- (PBZJHGameResult*) defaultInstance;

- (PBZJHGameResult_Builder*) clear;
- (PBZJHGameResult_Builder*) clone;

- (PBZJHGameResult*) build;
- (PBZJHGameResult*) buildPartial;

- (PBZJHGameResult_Builder*) mergeFrom:(PBZJHGameResult*) other;
- (PBZJHGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PBZJHGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSArray*) userResultList;
- (PBUserResult*) userResultAtIndex:(int32_t) index;
- (PBZJHGameResult_Builder*) replaceUserResultAtIndex:(int32_t) index with:(PBUserResult*) value;
- (PBZJHGameResult_Builder*) addUserResult:(PBUserResult*) value;
- (PBZJHGameResult_Builder*) addAllUserResult:(NSArray*) values;
- (PBZJHGameResult_Builder*) clearUserResultList;
@end

