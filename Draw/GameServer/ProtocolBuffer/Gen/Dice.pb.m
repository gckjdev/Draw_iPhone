// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Dice.pb.h"
// @@protoc_insertion_point(imports)

@implementation DiceRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [DiceRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBDiceTypeIsValidValue(PBDiceType value) {
  switch (value) {
    case PBDiceTypeDiceNormal:
    case PBDiceTypeDiceSnake:
    case PBDiceTypeDiceNet:
    case PBDiceTypeDiceWai:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBDiceType(PBDiceType value) {
  switch (value) {
    case PBDiceTypeDiceNormal:
      return @"PBDiceTypeDiceNormal";
    case PBDiceTypeDiceSnake:
      return @"PBDiceTypeDiceSnake";
    case PBDiceTypeDiceNet:
      return @"PBDiceTypeDiceNet";
    case PBDiceTypeDiceWai:
      return @"PBDiceTypeDiceWai";
    default:
      return nil;
  }
}

@interface PBDice ()
@property SInt32 diceId;
@property SInt32 dice;
@end

@implementation PBDice

- (BOOL) hasDiceId {
  return !!hasDiceId_;
}
- (void) setHasDiceId:(BOOL) _value_ {
  hasDiceId_ = !!_value_;
}
@synthesize diceId;
- (BOOL) hasDice {
  return !!hasDice_;
}
- (void) setHasDice:(BOOL) _value_ {
  hasDice_ = !!_value_;
}
@synthesize dice;
- (instancetype) init {
  if ((self = [super init])) {
    self.diceId = 0;
    self.dice = 0;
  }
  return self;
}
static PBDice* defaultPBDiceInstance = nil;
+ (void) initialize {
  if (self == [PBDice class]) {
    defaultPBDiceInstance = [[PBDice alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDiceInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDiceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDiceId) {
    [output writeInt32:1 value:self.diceId];
  }
  if (self.hasDice) {
    [output writeInt32:2 value:self.dice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDiceId) {
    size_ += computeInt32Size(1, self.diceId);
  }
  if (self.hasDice) {
    size_ += computeInt32Size(2, self.dice);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDice*) parseFromData:(NSData*) data {
  return (PBDice*)[[[PBDice builder] mergeFromData:data] build];
}
+ (PBDice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDice*)[[[PBDice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDice*) parseFromInputStream:(NSInputStream*) input {
  return (PBDice*)[[[PBDice builder] mergeFromInputStream:input] build];
}
+ (PBDice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDice*)[[[PBDice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDice*)[[[PBDice builder] mergeFromCodedInputStream:input] build];
}
+ (PBDice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDice*)[[[PBDice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceBuilder*) builder {
  return [[PBDiceBuilder alloc] init];
}
+ (PBDiceBuilder*) builderWithPrototype:(PBDice*) prototype {
  return [[PBDice builder] mergeFrom:prototype];
}
- (PBDiceBuilder*) builder {
  return [PBDice builder];
}
- (PBDiceBuilder*) toBuilder {
  return [PBDice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDiceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diceId", [NSNumber numberWithInteger:self.diceId]];
  }
  if (self.hasDice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dice", [NSNumber numberWithInteger:self.dice]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDice class]]) {
    return NO;
  }
  PBDice *otherMessage = other;
  return
      self.hasDiceId == otherMessage.hasDiceId &&
      (!self.hasDiceId || self.diceId == otherMessage.diceId) &&
      self.hasDice == otherMessage.hasDice &&
      (!self.hasDice || self.dice == otherMessage.dice) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDiceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.diceId] hash];
  }
  if (self.hasDice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dice] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDiceBuilder()
@property (strong) PBDice* resultPbdice;
@end

@implementation PBDiceBuilder
@synthesize resultPbdice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdice = [[PBDice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdice;
}
- (PBDiceBuilder*) clear {
  self.resultPbdice = [[PBDice alloc] init];
  return self;
}
- (PBDiceBuilder*) clone {
  return [PBDice builderWithPrototype:resultPbdice];
}
- (PBDice*) defaultInstance {
  return [PBDice defaultInstance];
}
- (PBDice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDice*) buildPartial {
  PBDice* returnMe = resultPbdice;
  self.resultPbdice = nil;
  return returnMe;
}
- (PBDiceBuilder*) mergeFrom:(PBDice*) other {
  if (other == [PBDice defaultInstance]) {
    return self;
  }
  if (other.hasDiceId) {
    [self setDiceId:other.diceId];
  }
  if (other.hasDice) {
    [self setDice:other.dice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDiceId:[input readInt32]];
        break;
      }
      case 16: {
        [self setDice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDiceId {
  return resultPbdice.hasDiceId;
}
- (SInt32) diceId {
  return resultPbdice.diceId;
}
- (PBDiceBuilder*) setDiceId:(SInt32) value {
  resultPbdice.hasDiceId = YES;
  resultPbdice.diceId = value;
  return self;
}
- (PBDiceBuilder*) clearDiceId {
  resultPbdice.hasDiceId = NO;
  resultPbdice.diceId = 0;
  return self;
}
- (BOOL) hasDice {
  return resultPbdice.hasDice;
}
- (SInt32) dice {
  return resultPbdice.dice;
}
- (PBDiceBuilder*) setDice:(SInt32) value {
  resultPbdice.hasDice = YES;
  resultPbdice.dice = value;
  return self;
}
- (PBDiceBuilder*) clearDice {
  resultPbdice.hasDice = NO;
  resultPbdice.dice = 0;
  return self;
}
@end

@interface PBUserDice ()
@property (strong) NSString* userId;
@property (strong) NSMutableArray * dicesArray;
@property PBDiceType type;
@end

@implementation PBUserDice

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize dicesArray;
@dynamic dices;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.type = PBDiceTypeDiceNormal;
  }
  return self;
}
static PBUserDice* defaultPBUserDiceInstance = nil;
+ (void) initialize {
  if (self == [PBUserDice class]) {
    defaultPBUserDiceInstance = [[PBUserDice alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserDiceInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserDiceInstance;
}
- (NSArray *)dices {
  return dicesArray;
}
- (PBDice*)dicesAtIndex:(NSUInteger)index {
  return [dicesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitdices = YES;
   [self.dices enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdices = NO;
      *stop = YES;
    }
  }];
  if (!isInitdices) return isInitdices;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserDice*) parseFromData:(NSData*) data {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromData:data] build];
}
+ (PBUserDice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserDice*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromInputStream:input] build];
}
+ (PBUserDice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserDice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserDice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserDiceBuilder*) builder {
  return [[PBUserDiceBuilder alloc] init];
}
+ (PBUserDiceBuilder*) builderWithPrototype:(PBUserDice*) prototype {
  return [[PBUserDice builder] mergeFrom:prototype];
}
- (PBUserDiceBuilder*) builder {
  return [PBUserDice builder];
}
- (PBUserDiceBuilder*) toBuilder {
  return [PBUserDice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"dices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBDiceType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserDice class]]) {
    return NO;
  }
  PBUserDice *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      [self.dicesArray isEqualToArray:otherMessage.dicesArray] &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  [self.dicesArray enumerateObjectsUsingBlock:^(PBDice *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserDiceBuilder()
@property (strong) PBUserDice* resultPbuserDice;
@end

@implementation PBUserDiceBuilder
@synthesize resultPbuserDice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserDice = [[PBUserDice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserDice;
}
- (PBUserDiceBuilder*) clear {
  self.resultPbuserDice = [[PBUserDice alloc] init];
  return self;
}
- (PBUserDiceBuilder*) clone {
  return [PBUserDice builderWithPrototype:resultPbuserDice];
}
- (PBUserDice*) defaultInstance {
  return [PBUserDice defaultInstance];
}
- (PBUserDice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserDice*) buildPartial {
  PBUserDice* returnMe = resultPbuserDice;
  self.resultPbuserDice = nil;
  return returnMe;
}
- (PBUserDiceBuilder*) mergeFrom:(PBUserDice*) other {
  if (other == [PBUserDice defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.dicesArray.count > 0) {
    if (resultPbuserDice.dicesArray == nil) {
      resultPbuserDice.dicesArray = [[NSMutableArray alloc] initWithArray:other.dicesArray];
    } else {
      [resultPbuserDice.dicesArray addObjectsFromArray:other.dicesArray];
    }
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserDiceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserDiceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBDiceBuilder* subBuilder = [PBDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDices:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        PBDiceType value = (PBDiceType)[input readEnum];
        if (PBDiceTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserDice.hasUserId;
}
- (NSString*) userId {
  return resultPbuserDice.userId;
}
- (PBUserDiceBuilder*) setUserId:(NSString*) value {
  resultPbuserDice.hasUserId = YES;
  resultPbuserDice.userId = value;
  return self;
}
- (PBUserDiceBuilder*) clearUserId {
  resultPbuserDice.hasUserId = NO;
  resultPbuserDice.userId = @"";
  return self;
}
- (NSMutableArray *)dices {
  return resultPbuserDice.dicesArray;
}
- (PBDice*)dicesAtIndex:(NSUInteger)index {
  return [resultPbuserDice dicesAtIndex:index];
}
- (PBUserDiceBuilder *)addDices:(PBDice*)value {
  if (resultPbuserDice.dicesArray == nil) {
    resultPbuserDice.dicesArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserDice.dicesArray addObject:value];
  return self;
}
- (PBUserDiceBuilder *)setDicesArray:(NSArray *)array {
  resultPbuserDice.dicesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserDiceBuilder *)clearDices {
  resultPbuserDice.dicesArray = nil;
  return self;
}
- (BOOL) hasType {
  return resultPbuserDice.hasType;
}
- (PBDiceType) type {
  return resultPbuserDice.type;
}
- (PBUserDiceBuilder*) setType:(PBDiceType) value {
  resultPbuserDice.hasType = YES;
  resultPbuserDice.type = value;
  return self;
}
- (PBUserDiceBuilder*) clearType {
  resultPbuserDice.hasType = NO;
  resultPbuserDice.type = PBDiceTypeDiceNormal;
  return self;
}
@end

@interface PBDiceFinalCount ()
@property (strong) NSString* userId;
@property PBDiceType type;
@property SInt32 finalDiceCount;
@end

@implementation PBDiceFinalCount

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasFinalDiceCount {
  return !!hasFinalDiceCount_;
}
- (void) setHasFinalDiceCount:(BOOL) _value_ {
  hasFinalDiceCount_ = !!_value_;
}
@synthesize finalDiceCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.type = PBDiceTypeDiceNormal;
    self.finalDiceCount = 0;
  }
  return self;
}
static PBDiceFinalCount* defaultPBDiceFinalCountInstance = nil;
+ (void) initialize {
  if (self == [PBDiceFinalCount class]) {
    defaultPBDiceFinalCountInstance = [[PBDiceFinalCount alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDiceFinalCountInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDiceFinalCountInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasFinalDiceCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasFinalDiceCount) {
    [output writeInt32:3 value:self.finalDiceCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasFinalDiceCount) {
    size_ += computeInt32Size(3, self.finalDiceCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDiceFinalCount*) parseFromData:(NSData*) data {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromData:data] build];
}
+ (PBDiceFinalCount*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDiceFinalCount*) parseFromInputStream:(NSInputStream*) input {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromInputStream:input] build];
}
+ (PBDiceFinalCount*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceFinalCount*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromCodedInputStream:input] build];
}
+ (PBDiceFinalCount*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceFinalCountBuilder*) builder {
  return [[PBDiceFinalCountBuilder alloc] init];
}
+ (PBDiceFinalCountBuilder*) builderWithPrototype:(PBDiceFinalCount*) prototype {
  return [[PBDiceFinalCount builder] mergeFrom:prototype];
}
- (PBDiceFinalCountBuilder*) builder {
  return [PBDiceFinalCount builder];
}
- (PBDiceFinalCountBuilder*) toBuilder {
  return [PBDiceFinalCount builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBDiceType(self.type)];
  }
  if (self.hasFinalDiceCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finalDiceCount", [NSNumber numberWithInteger:self.finalDiceCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDiceFinalCount class]]) {
    return NO;
  }
  PBDiceFinalCount *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasFinalDiceCount == otherMessage.hasFinalDiceCount &&
      (!self.hasFinalDiceCount || self.finalDiceCount == otherMessage.finalDiceCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasFinalDiceCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.finalDiceCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDiceFinalCountBuilder()
@property (strong) PBDiceFinalCount* resultPbdiceFinalCount;
@end

@implementation PBDiceFinalCountBuilder
@synthesize resultPbdiceFinalCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdiceFinalCount = [[PBDiceFinalCount alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdiceFinalCount;
}
- (PBDiceFinalCountBuilder*) clear {
  self.resultPbdiceFinalCount = [[PBDiceFinalCount alloc] init];
  return self;
}
- (PBDiceFinalCountBuilder*) clone {
  return [PBDiceFinalCount builderWithPrototype:resultPbdiceFinalCount];
}
- (PBDiceFinalCount*) defaultInstance {
  return [PBDiceFinalCount defaultInstance];
}
- (PBDiceFinalCount*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDiceFinalCount*) buildPartial {
  PBDiceFinalCount* returnMe = resultPbdiceFinalCount;
  self.resultPbdiceFinalCount = nil;
  return returnMe;
}
- (PBDiceFinalCountBuilder*) mergeFrom:(PBDiceFinalCount*) other {
  if (other == [PBDiceFinalCount defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFinalDiceCount) {
    [self setFinalDiceCount:other.finalDiceCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceFinalCountBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceFinalCountBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        PBDiceType value = (PBDiceType)[input readEnum];
        if (PBDiceTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setFinalDiceCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbdiceFinalCount.hasUserId;
}
- (NSString*) userId {
  return resultPbdiceFinalCount.userId;
}
- (PBDiceFinalCountBuilder*) setUserId:(NSString*) value {
  resultPbdiceFinalCount.hasUserId = YES;
  resultPbdiceFinalCount.userId = value;
  return self;
}
- (PBDiceFinalCountBuilder*) clearUserId {
  resultPbdiceFinalCount.hasUserId = NO;
  resultPbdiceFinalCount.userId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbdiceFinalCount.hasType;
}
- (PBDiceType) type {
  return resultPbdiceFinalCount.type;
}
- (PBDiceFinalCountBuilder*) setType:(PBDiceType) value {
  resultPbdiceFinalCount.hasType = YES;
  resultPbdiceFinalCount.type = value;
  return self;
}
- (PBDiceFinalCountBuilder*) clearType {
  resultPbdiceFinalCount.hasType = NO;
  resultPbdiceFinalCount.type = PBDiceTypeDiceNormal;
  return self;
}
- (BOOL) hasFinalDiceCount {
  return resultPbdiceFinalCount.hasFinalDiceCount;
}
- (SInt32) finalDiceCount {
  return resultPbdiceFinalCount.finalDiceCount;
}
- (PBDiceFinalCountBuilder*) setFinalDiceCount:(SInt32) value {
  resultPbdiceFinalCount.hasFinalDiceCount = YES;
  resultPbdiceFinalCount.finalDiceCount = value;
  return self;
}
- (PBDiceFinalCountBuilder*) clearFinalDiceCount {
  resultPbdiceFinalCount.hasFinalDiceCount = NO;
  resultPbdiceFinalCount.finalDiceCount = 0;
  return self;
}
@end

@interface PBDiceGameResult ()
@property (strong) NSMutableArray * userResultArray;
@property SInt32 openType;
@property (strong) NSMutableArray * finalCountArray;
@end

@implementation PBDiceGameResult

@synthesize userResultArray;
@dynamic userResult;
- (BOOL) hasOpenType {
  return !!hasOpenType_;
}
- (void) setHasOpenType:(BOOL) _value_ {
  hasOpenType_ = !!_value_;
}
@synthesize openType;
@synthesize finalCountArray;
@dynamic finalCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.openType = 0;
  }
  return self;
}
static PBDiceGameResult* defaultPBDiceGameResultInstance = nil;
+ (void) initialize {
  if (self == [PBDiceGameResult class]) {
    defaultPBDiceGameResultInstance = [[PBDiceGameResult alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDiceGameResultInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDiceGameResultInstance;
}
- (NSArray *)userResult {
  return userResultArray;
}
- (PBUserResult*)userResultAtIndex:(NSUInteger)index {
  return [userResultArray objectAtIndex:index];
}
- (NSArray *)finalCount {
  return finalCountArray;
}
- (PBDiceFinalCount*)finalCountAtIndex:(NSUInteger)index {
  return [finalCountArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserResult = YES;
   [self.userResult enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserResult = NO;
      *stop = YES;
    }
  }];
  if (!isInituserResult) return isInituserResult;
  __block BOOL isInitfinalCount = YES;
   [self.finalCount enumerateObjectsUsingBlock:^(PBDiceFinalCount *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfinalCount = NO;
      *stop = YES;
    }
  }];
  if (!isInitfinalCount) return isInitfinalCount;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasOpenType) {
    [output writeInt32:2 value:self.openType];
  }
  [self.finalCountArray enumerateObjectsUsingBlock:^(PBDiceFinalCount *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasOpenType) {
    size_ += computeInt32Size(2, self.openType);
  }
  [self.finalCountArray enumerateObjectsUsingBlock:^(PBDiceFinalCount *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDiceGameResult*) parseFromData:(NSData*) data {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromData:data] build];
}
+ (PBDiceGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDiceGameResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromInputStream:input] build];
}
+ (PBDiceGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBDiceGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceGameResultBuilder*) builder {
  return [[PBDiceGameResultBuilder alloc] init];
}
+ (PBDiceGameResultBuilder*) builderWithPrototype:(PBDiceGameResult*) prototype {
  return [[PBDiceGameResult builder] mergeFrom:prototype];
}
- (PBDiceGameResultBuilder*) builder {
  return [PBDiceGameResult builder];
}
- (PBDiceGameResultBuilder*) toBuilder {
  return [PBDiceGameResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userResult"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOpenType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openType", [NSNumber numberWithInteger:self.openType]];
  }
  [self.finalCountArray enumerateObjectsUsingBlock:^(PBDiceFinalCount *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"finalCount"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDiceGameResult class]]) {
    return NO;
  }
  PBDiceGameResult *otherMessage = other;
  return
      [self.userResultArray isEqualToArray:otherMessage.userResultArray] &&
      self.hasOpenType == otherMessage.hasOpenType &&
      (!self.hasOpenType || self.openType == otherMessage.openType) &&
      [self.finalCountArray isEqualToArray:otherMessage.finalCountArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOpenType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.openType] hash];
  }
  [self.finalCountArray enumerateObjectsUsingBlock:^(PBDiceFinalCount *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDiceGameResultBuilder()
@property (strong) PBDiceGameResult* resultPbdiceGameResult;
@end

@implementation PBDiceGameResultBuilder
@synthesize resultPbdiceGameResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdiceGameResult = [[PBDiceGameResult alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdiceGameResult;
}
- (PBDiceGameResultBuilder*) clear {
  self.resultPbdiceGameResult = [[PBDiceGameResult alloc] init];
  return self;
}
- (PBDiceGameResultBuilder*) clone {
  return [PBDiceGameResult builderWithPrototype:resultPbdiceGameResult];
}
- (PBDiceGameResult*) defaultInstance {
  return [PBDiceGameResult defaultInstance];
}
- (PBDiceGameResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDiceGameResult*) buildPartial {
  PBDiceGameResult* returnMe = resultPbdiceGameResult;
  self.resultPbdiceGameResult = nil;
  return returnMe;
}
- (PBDiceGameResultBuilder*) mergeFrom:(PBDiceGameResult*) other {
  if (other == [PBDiceGameResult defaultInstance]) {
    return self;
  }
  if (other.userResultArray.count > 0) {
    if (resultPbdiceGameResult.userResultArray == nil) {
      resultPbdiceGameResult.userResultArray = [[NSMutableArray alloc] initWithArray:other.userResultArray];
    } else {
      [resultPbdiceGameResult.userResultArray addObjectsFromArray:other.userResultArray];
    }
  }
  if (other.hasOpenType) {
    [self setOpenType:other.openType];
  }
  if (other.finalCountArray.count > 0) {
    if (resultPbdiceGameResult.finalCountArray == nil) {
      resultPbdiceGameResult.finalCountArray = [[NSMutableArray alloc] initWithArray:other.finalCountArray];
    } else {
      [resultPbdiceGameResult.finalCountArray addObjectsFromArray:other.finalCountArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceGameResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceGameResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserResultBuilder* subBuilder = [PBUserResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResult:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setOpenType:[input readInt32]];
        break;
      }
      case 26: {
        PBDiceFinalCountBuilder* subBuilder = [PBDiceFinalCount builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFinalCount:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userResult {
  return resultPbdiceGameResult.userResultArray;
}
- (PBUserResult*)userResultAtIndex:(NSUInteger)index {
  return [resultPbdiceGameResult userResultAtIndex:index];
}
- (PBDiceGameResultBuilder *)addUserResult:(PBUserResult*)value {
  if (resultPbdiceGameResult.userResultArray == nil) {
    resultPbdiceGameResult.userResultArray = [[NSMutableArray alloc]init];
  }
  [resultPbdiceGameResult.userResultArray addObject:value];
  return self;
}
- (PBDiceGameResultBuilder *)setUserResultArray:(NSArray *)array {
  resultPbdiceGameResult.userResultArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDiceGameResultBuilder *)clearUserResult {
  resultPbdiceGameResult.userResultArray = nil;
  return self;
}
- (BOOL) hasOpenType {
  return resultPbdiceGameResult.hasOpenType;
}
- (SInt32) openType {
  return resultPbdiceGameResult.openType;
}
- (PBDiceGameResultBuilder*) setOpenType:(SInt32) value {
  resultPbdiceGameResult.hasOpenType = YES;
  resultPbdiceGameResult.openType = value;
  return self;
}
- (PBDiceGameResultBuilder*) clearOpenType {
  resultPbdiceGameResult.hasOpenType = NO;
  resultPbdiceGameResult.openType = 0;
  return self;
}
- (NSMutableArray *)finalCount {
  return resultPbdiceGameResult.finalCountArray;
}
- (PBDiceFinalCount*)finalCountAtIndex:(NSUInteger)index {
  return [resultPbdiceGameResult finalCountAtIndex:index];
}
- (PBDiceGameResultBuilder *)addFinalCount:(PBDiceFinalCount*)value {
  if (resultPbdiceGameResult.finalCountArray == nil) {
    resultPbdiceGameResult.finalCountArray = [[NSMutableArray alloc]init];
  }
  [resultPbdiceGameResult.finalCountArray addObject:value];
  return self;
}
- (PBDiceGameResultBuilder *)setFinalCountArray:(NSArray *)array {
  resultPbdiceGameResult.finalCountArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDiceGameResultBuilder *)clearFinalCount {
  resultPbdiceGameResult.finalCountArray = nil;
  return self;
}
@end

@interface PBDiceAction ()
@property SInt32 type;
@property SInt32 num;
@property SInt32 dice;
@property BOOL wilds;
@end

@implementation PBDiceAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) _value_ {
  hasNum_ = !!_value_;
}
@synthesize num;
- (BOOL) hasDice {
  return !!hasDice_;
}
- (void) setHasDice:(BOOL) _value_ {
  hasDice_ = !!_value_;
}
@synthesize dice;
- (BOOL) hasWilds {
  return !!hasWilds_;
}
- (void) setHasWilds:(BOOL) _value_ {
  hasWilds_ = !!_value_;
}
- (BOOL) wilds {
  return !!wilds_;
}
- (void) setWilds:(BOOL) _value_ {
  wilds_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.num = 0;
    self.dice = 0;
    self.wilds = NO;
  }
  return self;
}
static PBDiceAction* defaultPBDiceActionInstance = nil;
+ (void) initialize {
  if (self == [PBDiceAction class]) {
    defaultPBDiceActionInstance = [[PBDiceAction alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDiceActionInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDiceActionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasNum) {
    [output writeInt32:2 value:self.num];
  }
  if (self.hasDice) {
    [output writeInt32:3 value:self.dice];
  }
  if (self.hasWilds) {
    [output writeBool:4 value:self.wilds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasNum) {
    size_ += computeInt32Size(2, self.num);
  }
  if (self.hasDice) {
    size_ += computeInt32Size(3, self.dice);
  }
  if (self.hasWilds) {
    size_ += computeBoolSize(4, self.wilds);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDiceAction*) parseFromData:(NSData*) data {
  return (PBDiceAction*)[[[PBDiceAction builder] mergeFromData:data] build];
}
+ (PBDiceAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceAction*)[[[PBDiceAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDiceAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBDiceAction*)[[[PBDiceAction builder] mergeFromInputStream:input] build];
}
+ (PBDiceAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceAction*)[[[PBDiceAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDiceAction*)[[[PBDiceAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBDiceAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceAction*)[[[PBDiceAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceActionBuilder*) builder {
  return [[PBDiceActionBuilder alloc] init];
}
+ (PBDiceActionBuilder*) builderWithPrototype:(PBDiceAction*) prototype {
  return [[PBDiceAction builder] mergeFrom:prototype];
}
- (PBDiceActionBuilder*) builder {
  return [PBDiceAction builder];
}
- (PBDiceActionBuilder*) toBuilder {
  return [PBDiceAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithInteger:self.num]];
  }
  if (self.hasDice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dice", [NSNumber numberWithInteger:self.dice]];
  }
  if (self.hasWilds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wilds", [NSNumber numberWithBool:self.wilds]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDiceAction class]]) {
    return NO;
  }
  PBDiceAction *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      self.hasDice == otherMessage.hasDice &&
      (!self.hasDice || self.dice == otherMessage.dice) &&
      self.hasWilds == otherMessage.hasWilds &&
      (!self.hasWilds || self.wilds == otherMessage.wilds) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.num] hash];
  }
  if (self.hasDice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dice] hash];
  }
  if (self.hasWilds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.wilds] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDiceActionBuilder()
@property (strong) PBDiceAction* resultPbdiceAction;
@end

@implementation PBDiceActionBuilder
@synthesize resultPbdiceAction;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdiceAction = [[PBDiceAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdiceAction;
}
- (PBDiceActionBuilder*) clear {
  self.resultPbdiceAction = [[PBDiceAction alloc] init];
  return self;
}
- (PBDiceActionBuilder*) clone {
  return [PBDiceAction builderWithPrototype:resultPbdiceAction];
}
- (PBDiceAction*) defaultInstance {
  return [PBDiceAction defaultInstance];
}
- (PBDiceAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDiceAction*) buildPartial {
  PBDiceAction* returnMe = resultPbdiceAction;
  self.resultPbdiceAction = nil;
  return returnMe;
}
- (PBDiceActionBuilder*) mergeFrom:(PBDiceAction*) other {
  if (other == [PBDiceAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasDice) {
    [self setDice:other.dice];
  }
  if (other.hasWilds) {
    [self setWilds:other.wilds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 16: {
        [self setNum:[input readInt32]];
        break;
      }
      case 24: {
        [self setDice:[input readInt32]];
        break;
      }
      case 32: {
        [self setWilds:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbdiceAction.hasType;
}
- (SInt32) type {
  return resultPbdiceAction.type;
}
- (PBDiceActionBuilder*) setType:(SInt32) value {
  resultPbdiceAction.hasType = YES;
  resultPbdiceAction.type = value;
  return self;
}
- (PBDiceActionBuilder*) clearType {
  resultPbdiceAction.hasType = NO;
  resultPbdiceAction.type = 0;
  return self;
}
- (BOOL) hasNum {
  return resultPbdiceAction.hasNum;
}
- (SInt32) num {
  return resultPbdiceAction.num;
}
- (PBDiceActionBuilder*) setNum:(SInt32) value {
  resultPbdiceAction.hasNum = YES;
  resultPbdiceAction.num = value;
  return self;
}
- (PBDiceActionBuilder*) clearNum {
  resultPbdiceAction.hasNum = NO;
  resultPbdiceAction.num = 0;
  return self;
}
- (BOOL) hasDice {
  return resultPbdiceAction.hasDice;
}
- (SInt32) dice {
  return resultPbdiceAction.dice;
}
- (PBDiceActionBuilder*) setDice:(SInt32) value {
  resultPbdiceAction.hasDice = YES;
  resultPbdiceAction.dice = value;
  return self;
}
- (PBDiceActionBuilder*) clearDice {
  resultPbdiceAction.hasDice = NO;
  resultPbdiceAction.dice = 0;
  return self;
}
- (BOOL) hasWilds {
  return resultPbdiceAction.hasWilds;
}
- (BOOL) wilds {
  return resultPbdiceAction.wilds;
}
- (PBDiceActionBuilder*) setWilds:(BOOL) value {
  resultPbdiceAction.hasWilds = YES;
  resultPbdiceAction.wilds = value;
  return self;
}
- (PBDiceActionBuilder*) clearWilds {
  resultPbdiceAction.hasWilds = NO;
  resultPbdiceAction.wilds = NO;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
