// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Dice.pb.h"

@implementation DiceRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [DiceRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBDiceTypeIsValidValue(PBDiceType value) {
  switch (value) {
    case PBDiceTypeDiceNormal:
    case PBDiceTypeDiceSnake:
    case PBDiceTypeDiceNet:
    case PBDiceTypeDiceWai:
      return YES;
    default:
      return NO;
  }
}
@interface PBDice ()
@property int32_t diceId;
@property int32_t dice;
@end

@implementation PBDice

- (BOOL) hasDiceId {
  return !!hasDiceId_;
}
- (void) setHasDiceId:(BOOL) value {
  hasDiceId_ = !!value;
}
@synthesize diceId;
- (BOOL) hasDice {
  return !!hasDice_;
}
- (void) setHasDice:(BOOL) value {
  hasDice_ = !!value;
}
@synthesize dice;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.diceId = 0;
    self.dice = 0;
  }
  return self;
}
static PBDice* defaultPBDiceInstance = nil;
+ (void) initialize {
  if (self == [PBDice class]) {
    defaultPBDiceInstance = [[PBDice alloc] init];
  }
}
+ (PBDice*) defaultInstance {
  return defaultPBDiceInstance;
}
- (PBDice*) defaultInstance {
  return defaultPBDiceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDiceId) {
    [output writeInt32:1 value:self.diceId];
  }
  if (self.hasDice) {
    [output writeInt32:2 value:self.dice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDiceId) {
    size += computeInt32Size(1, self.diceId);
  }
  if (self.hasDice) {
    size += computeInt32Size(2, self.dice);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDice*) parseFromData:(NSData*) data {
  return (PBDice*)[[[PBDice builder] mergeFromData:data] build];
}
+ (PBDice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDice*)[[[PBDice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDice*) parseFromInputStream:(NSInputStream*) input {
  return (PBDice*)[[[PBDice builder] mergeFromInputStream:input] build];
}
+ (PBDice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDice*)[[[PBDice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDice*)[[[PBDice builder] mergeFromCodedInputStream:input] build];
}
+ (PBDice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDice*)[[[PBDice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDice_Builder*) builder {
  return [[[PBDice_Builder alloc] init] autorelease];
}
+ (PBDice_Builder*) builderWithPrototype:(PBDice*) prototype {
  return [[PBDice builder] mergeFrom:prototype];
}
- (PBDice_Builder*) builder {
  return [PBDice builder];
}
@end

@interface PBDice_Builder()
@property (retain) PBDice* result;
@end

@implementation PBDice_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDice alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDice_Builder*) clear {
  self.result = [[[PBDice alloc] init] autorelease];
  return self;
}
- (PBDice_Builder*) clone {
  return [PBDice builderWithPrototype:result];
}
- (PBDice*) defaultInstance {
  return [PBDice defaultInstance];
}
- (PBDice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDice*) buildPartial {
  PBDice* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDice_Builder*) mergeFrom:(PBDice*) other {
  if (other == [PBDice defaultInstance]) {
    return self;
  }
  if (other.hasDiceId) {
    [self setDiceId:other.diceId];
  }
  if (other.hasDice) {
    [self setDice:other.dice];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDiceId:[input readInt32]];
        break;
      }
      case 16: {
        [self setDice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDiceId {
  return result.hasDiceId;
}
- (int32_t) diceId {
  return result.diceId;
}
- (PBDice_Builder*) setDiceId:(int32_t) value {
  result.hasDiceId = YES;
  result.diceId = value;
  return self;
}
- (PBDice_Builder*) clearDiceId {
  result.hasDiceId = NO;
  result.diceId = 0;
  return self;
}
- (BOOL) hasDice {
  return result.hasDice;
}
- (int32_t) dice {
  return result.dice;
}
- (PBDice_Builder*) setDice:(int32_t) value {
  result.hasDice = YES;
  result.dice = value;
  return self;
}
- (PBDice_Builder*) clearDice {
  result.hasDice = NO;
  result.dice = 0;
  return self;
}
@end

@interface PBUserDice ()
@property (retain) NSString* userId;
@property (retain) NSMutableArray* mutableDicesList;
@property PBDiceType type;
@end

@implementation PBUserDice

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
@synthesize mutableDicesList;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (void) dealloc {
  self.userId = nil;
  self.mutableDicesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.type = PBDiceTypeDiceNormal;
  }
  return self;
}
static PBUserDice* defaultPBUserDiceInstance = nil;
+ (void) initialize {
  if (self == [PBUserDice class]) {
    defaultPBUserDiceInstance = [[PBUserDice alloc] init];
  }
}
+ (PBUserDice*) defaultInstance {
  return defaultPBUserDiceInstance;
}
- (PBUserDice*) defaultInstance {
  return defaultPBUserDiceInstance;
}
- (NSArray*) dicesList {
  return mutableDicesList;
}
- (PBDice*) dicesAtIndex:(int32_t) index {
  id value = [mutableDicesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  for (PBDice* element in self.dicesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  for (PBDice* element in self.dicesList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  for (PBDice* element in self.dicesList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasType) {
    size += computeEnumSize(3, self.type);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserDice*) parseFromData:(NSData*) data {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromData:data] build];
}
+ (PBUserDice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserDice*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromInputStream:input] build];
}
+ (PBUserDice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserDice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserDice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserDice*)[[[PBUserDice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserDice_Builder*) builder {
  return [[[PBUserDice_Builder alloc] init] autorelease];
}
+ (PBUserDice_Builder*) builderWithPrototype:(PBUserDice*) prototype {
  return [[PBUserDice builder] mergeFrom:prototype];
}
- (PBUserDice_Builder*) builder {
  return [PBUserDice builder];
}
@end

@interface PBUserDice_Builder()
@property (retain) PBUserDice* result;
@end

@implementation PBUserDice_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserDice alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserDice_Builder*) clear {
  self.result = [[[PBUserDice alloc] init] autorelease];
  return self;
}
- (PBUserDice_Builder*) clone {
  return [PBUserDice builderWithPrototype:result];
}
- (PBUserDice*) defaultInstance {
  return [PBUserDice defaultInstance];
}
- (PBUserDice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserDice*) buildPartial {
  PBUserDice* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserDice_Builder*) mergeFrom:(PBUserDice*) other {
  if (other == [PBUserDice defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.mutableDicesList.count > 0) {
    if (result.mutableDicesList == nil) {
      result.mutableDicesList = [NSMutableArray array];
    }
    [result.mutableDicesList addObjectsFromArray:other.mutableDicesList];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserDice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserDice_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBDice_Builder* subBuilder = [PBDice builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDices:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (PBDiceTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserDice_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserDice_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (NSArray*) dicesList {
  if (result.mutableDicesList == nil) { return [NSArray array]; }
  return result.mutableDicesList;
}
- (PBDice*) dicesAtIndex:(int32_t) index {
  return [result dicesAtIndex:index];
}
- (PBUserDice_Builder*) replaceDicesAtIndex:(int32_t) index with:(PBDice*) value {
  [result.mutableDicesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBUserDice_Builder*) addAllDices:(NSArray*) values {
  if (result.mutableDicesList == nil) {
    result.mutableDicesList = [NSMutableArray array];
  }
  [result.mutableDicesList addObjectsFromArray:values];
  return self;
}
- (PBUserDice_Builder*) clearDicesList {
  result.mutableDicesList = nil;
  return self;
}
- (PBUserDice_Builder*) addDices:(PBDice*) value {
  if (result.mutableDicesList == nil) {
    result.mutableDicesList = [NSMutableArray array];
  }
  [result.mutableDicesList addObject:value];
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBDiceType) type {
  return result.type;
}
- (PBUserDice_Builder*) setType:(PBDiceType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBUserDice_Builder*) clearType {
  result.hasType = NO;
  result.type = PBDiceTypeDiceNormal;
  return self;
}
@end

@interface PBUserResult ()
@property (retain) NSString* userId;
@property BOOL win;
@property int32_t gainCoins;
@end

@implementation PBUserResult

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasWin {
  return !!hasWin_;
}
- (void) setHasWin:(BOOL) value {
  hasWin_ = !!value;
}
- (BOOL) win {
  return !!win_;
}
- (void) setWin:(BOOL) value {
  win_ = !!value;
}
- (BOOL) hasGainCoins {
  return !!hasGainCoins_;
}
- (void) setHasGainCoins:(BOOL) value {
  hasGainCoins_ = !!value;
}
@synthesize gainCoins;
- (void) dealloc {
  self.userId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.win = NO;
    self.gainCoins = 0;
  }
  return self;
}
static PBUserResult* defaultPBUserResultInstance = nil;
+ (void) initialize {
  if (self == [PBUserResult class]) {
    defaultPBUserResultInstance = [[PBUserResult alloc] init];
  }
}
+ (PBUserResult*) defaultInstance {
  return defaultPBUserResultInstance;
}
- (PBUserResult*) defaultInstance {
  return defaultPBUserResultInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWin) {
    return NO;
  }
  if (!self.hasGainCoins) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWin) {
    [output writeBool:2 value:self.win];
  }
  if (self.hasGainCoins) {
    [output writeInt32:5 value:self.gainCoins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasWin) {
    size += computeBoolSize(2, self.win);
  }
  if (self.hasGainCoins) {
    size += computeInt32Size(5, self.gainCoins);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserResult*) parseFromData:(NSData*) data {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data] build];
}
+ (PBUserResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input] build];
}
+ (PBUserResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserResult*)[[[PBUserResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserResult_Builder*) builder {
  return [[[PBUserResult_Builder alloc] init] autorelease];
}
+ (PBUserResult_Builder*) builderWithPrototype:(PBUserResult*) prototype {
  return [[PBUserResult builder] mergeFrom:prototype];
}
- (PBUserResult_Builder*) builder {
  return [PBUserResult builder];
}
@end

@interface PBUserResult_Builder()
@property (retain) PBUserResult* result;
@end

@implementation PBUserResult_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserResult_Builder*) clear {
  self.result = [[[PBUserResult alloc] init] autorelease];
  return self;
}
- (PBUserResult_Builder*) clone {
  return [PBUserResult builderWithPrototype:result];
}
- (PBUserResult*) defaultInstance {
  return [PBUserResult defaultInstance];
}
- (PBUserResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserResult*) buildPartial {
  PBUserResult* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserResult_Builder*) mergeFrom:(PBUserResult*) other {
  if (other == [PBUserResult defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWin) {
    [self setWin:other.win];
  }
  if (other.hasGainCoins) {
    [self setGainCoins:other.gainCoins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        [self setWin:[input readBool]];
        break;
      }
      case 40: {
        [self setGainCoins:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserResult_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserResult_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasWin {
  return result.hasWin;
}
- (BOOL) win {
  return result.win;
}
- (PBUserResult_Builder*) setWin:(BOOL) value {
  result.hasWin = YES;
  result.win = value;
  return self;
}
- (PBUserResult_Builder*) clearWin {
  result.hasWin = NO;
  result.win = NO;
  return self;
}
- (BOOL) hasGainCoins {
  return result.hasGainCoins;
}
- (int32_t) gainCoins {
  return result.gainCoins;
}
- (PBUserResult_Builder*) setGainCoins:(int32_t) value {
  result.hasGainCoins = YES;
  result.gainCoins = value;
  return self;
}
- (PBUserResult_Builder*) clearGainCoins {
  result.hasGainCoins = NO;
  result.gainCoins = 0;
  return self;
}
@end

@interface PBDiceFinalCount ()
@property (retain) NSString* userId;
@property PBDiceType type;
@property int32_t finalDiceCount;
@end

@implementation PBDiceFinalCount

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasFinalDiceCount {
  return !!hasFinalDiceCount_;
}
- (void) setHasFinalDiceCount:(BOOL) value {
  hasFinalDiceCount_ = !!value;
}
@synthesize finalDiceCount;
- (void) dealloc {
  self.userId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.type = PBDiceTypeDiceNormal;
    self.finalDiceCount = 0;
  }
  return self;
}
static PBDiceFinalCount* defaultPBDiceFinalCountInstance = nil;
+ (void) initialize {
  if (self == [PBDiceFinalCount class]) {
    defaultPBDiceFinalCountInstance = [[PBDiceFinalCount alloc] init];
  }
}
+ (PBDiceFinalCount*) defaultInstance {
  return defaultPBDiceFinalCountInstance;
}
- (PBDiceFinalCount*) defaultInstance {
  return defaultPBDiceFinalCountInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasFinalDiceCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasFinalDiceCount) {
    [output writeInt32:3 value:self.finalDiceCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasType) {
    size += computeEnumSize(2, self.type);
  }
  if (self.hasFinalDiceCount) {
    size += computeInt32Size(3, self.finalDiceCount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDiceFinalCount*) parseFromData:(NSData*) data {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromData:data] build];
}
+ (PBDiceFinalCount*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDiceFinalCount*) parseFromInputStream:(NSInputStream*) input {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromInputStream:input] build];
}
+ (PBDiceFinalCount*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceFinalCount*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromCodedInputStream:input] build];
}
+ (PBDiceFinalCount*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceFinalCount*)[[[PBDiceFinalCount builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceFinalCount_Builder*) builder {
  return [[[PBDiceFinalCount_Builder alloc] init] autorelease];
}
+ (PBDiceFinalCount_Builder*) builderWithPrototype:(PBDiceFinalCount*) prototype {
  return [[PBDiceFinalCount builder] mergeFrom:prototype];
}
- (PBDiceFinalCount_Builder*) builder {
  return [PBDiceFinalCount builder];
}
@end

@interface PBDiceFinalCount_Builder()
@property (retain) PBDiceFinalCount* result;
@end

@implementation PBDiceFinalCount_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDiceFinalCount alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDiceFinalCount_Builder*) clear {
  self.result = [[[PBDiceFinalCount alloc] init] autorelease];
  return self;
}
- (PBDiceFinalCount_Builder*) clone {
  return [PBDiceFinalCount builderWithPrototype:result];
}
- (PBDiceFinalCount*) defaultInstance {
  return [PBDiceFinalCount defaultInstance];
}
- (PBDiceFinalCount*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDiceFinalCount*) buildPartial {
  PBDiceFinalCount* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDiceFinalCount_Builder*) mergeFrom:(PBDiceFinalCount*) other {
  if (other == [PBDiceFinalCount defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFinalDiceCount) {
    [self setFinalDiceCount:other.finalDiceCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceFinalCount_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceFinalCount_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (PBDiceTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setFinalDiceCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBDiceFinalCount_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBDiceFinalCount_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBDiceType) type {
  return result.type;
}
- (PBDiceFinalCount_Builder*) setType:(PBDiceType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBDiceFinalCount_Builder*) clearType {
  result.hasType = NO;
  result.type = PBDiceTypeDiceNormal;
  return self;
}
- (BOOL) hasFinalDiceCount {
  return result.hasFinalDiceCount;
}
- (int32_t) finalDiceCount {
  return result.finalDiceCount;
}
- (PBDiceFinalCount_Builder*) setFinalDiceCount:(int32_t) value {
  result.hasFinalDiceCount = YES;
  result.finalDiceCount = value;
  return self;
}
- (PBDiceFinalCount_Builder*) clearFinalDiceCount {
  result.hasFinalDiceCount = NO;
  result.finalDiceCount = 0;
  return self;
}
@end

@interface PBDiceGameResult ()
@property (retain) NSMutableArray* mutableUserResultList;
@property int32_t openType;
@property (retain) NSMutableArray* mutableFinalCountList;
@end

@implementation PBDiceGameResult

@synthesize mutableUserResultList;
- (BOOL) hasOpenType {
  return !!hasOpenType_;
}
- (void) setHasOpenType:(BOOL) value {
  hasOpenType_ = !!value;
}
@synthesize openType;
@synthesize mutableFinalCountList;
- (void) dealloc {
  self.mutableUserResultList = nil;
  self.mutableFinalCountList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.openType = 0;
  }
  return self;
}
static PBDiceGameResult* defaultPBDiceGameResultInstance = nil;
+ (void) initialize {
  if (self == [PBDiceGameResult class]) {
    defaultPBDiceGameResultInstance = [[PBDiceGameResult alloc] init];
  }
}
+ (PBDiceGameResult*) defaultInstance {
  return defaultPBDiceGameResultInstance;
}
- (PBDiceGameResult*) defaultInstance {
  return defaultPBDiceGameResultInstance;
}
- (NSArray*) userResultList {
  return mutableUserResultList;
}
- (PBUserResult*) userResultAtIndex:(int32_t) index {
  id value = [mutableUserResultList objectAtIndex:index];
  return value;
}
- (NSArray*) finalCountList {
  return mutableFinalCountList;
}
- (PBDiceFinalCount*) finalCountAtIndex:(int32_t) index {
  id value = [mutableFinalCountList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBUserResult* element in self.userResultList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (PBDiceFinalCount* element in self.finalCountList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBUserResult* element in self.userResultList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasOpenType) {
    [output writeInt32:2 value:self.openType];
  }
  for (PBDiceFinalCount* element in self.finalCountList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBUserResult* element in self.userResultList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasOpenType) {
    size += computeInt32Size(2, self.openType);
  }
  for (PBDiceFinalCount* element in self.finalCountList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDiceGameResult*) parseFromData:(NSData*) data {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromData:data] build];
}
+ (PBDiceGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDiceGameResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromInputStream:input] build];
}
+ (PBDiceGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBDiceGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDiceGameResult*)[[[PBDiceGameResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDiceGameResult_Builder*) builder {
  return [[[PBDiceGameResult_Builder alloc] init] autorelease];
}
+ (PBDiceGameResult_Builder*) builderWithPrototype:(PBDiceGameResult*) prototype {
  return [[PBDiceGameResult builder] mergeFrom:prototype];
}
- (PBDiceGameResult_Builder*) builder {
  return [PBDiceGameResult builder];
}
@end

@interface PBDiceGameResult_Builder()
@property (retain) PBDiceGameResult* result;
@end

@implementation PBDiceGameResult_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDiceGameResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDiceGameResult_Builder*) clear {
  self.result = [[[PBDiceGameResult alloc] init] autorelease];
  return self;
}
- (PBDiceGameResult_Builder*) clone {
  return [PBDiceGameResult builderWithPrototype:result];
}
- (PBDiceGameResult*) defaultInstance {
  return [PBDiceGameResult defaultInstance];
}
- (PBDiceGameResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDiceGameResult*) buildPartial {
  PBDiceGameResult* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDiceGameResult_Builder*) mergeFrom:(PBDiceGameResult*) other {
  if (other == [PBDiceGameResult defaultInstance]) {
    return self;
  }
  if (other.mutableUserResultList.count > 0) {
    if (result.mutableUserResultList == nil) {
      result.mutableUserResultList = [NSMutableArray array];
    }
    [result.mutableUserResultList addObjectsFromArray:other.mutableUserResultList];
  }
  if (other.hasOpenType) {
    [self setOpenType:other.openType];
  }
  if (other.mutableFinalCountList.count > 0) {
    if (result.mutableFinalCountList == nil) {
      result.mutableFinalCountList = [NSMutableArray array];
    }
    [result.mutableFinalCountList addObjectsFromArray:other.mutableFinalCountList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDiceGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDiceGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBUserResult_Builder* subBuilder = [PBUserResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResult:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setOpenType:[input readInt32]];
        break;
      }
      case 26: {
        PBDiceFinalCount_Builder* subBuilder = [PBDiceFinalCount builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFinalCount:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) userResultList {
  if (result.mutableUserResultList == nil) { return [NSArray array]; }
  return result.mutableUserResultList;
}
- (PBUserResult*) userResultAtIndex:(int32_t) index {
  return [result userResultAtIndex:index];
}
- (PBDiceGameResult_Builder*) replaceUserResultAtIndex:(int32_t) index with:(PBUserResult*) value {
  [result.mutableUserResultList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBDiceGameResult_Builder*) addAllUserResult:(NSArray*) values {
  if (result.mutableUserResultList == nil) {
    result.mutableUserResultList = [NSMutableArray array];
  }
  [result.mutableUserResultList addObjectsFromArray:values];
  return self;
}
- (PBDiceGameResult_Builder*) clearUserResultList {
  result.mutableUserResultList = nil;
  return self;
}
- (PBDiceGameResult_Builder*) addUserResult:(PBUserResult*) value {
  if (result.mutableUserResultList == nil) {
    result.mutableUserResultList = [NSMutableArray array];
  }
  [result.mutableUserResultList addObject:value];
  return self;
}
- (BOOL) hasOpenType {
  return result.hasOpenType;
}
- (int32_t) openType {
  return result.openType;
}
- (PBDiceGameResult_Builder*) setOpenType:(int32_t) value {
  result.hasOpenType = YES;
  result.openType = value;
  return self;
}
- (PBDiceGameResult_Builder*) clearOpenType {
  result.hasOpenType = NO;
  result.openType = 0;
  return self;
}
- (NSArray*) finalCountList {
  if (result.mutableFinalCountList == nil) { return [NSArray array]; }
  return result.mutableFinalCountList;
}
- (PBDiceFinalCount*) finalCountAtIndex:(int32_t) index {
  return [result finalCountAtIndex:index];
}
- (PBDiceGameResult_Builder*) replaceFinalCountAtIndex:(int32_t) index with:(PBDiceFinalCount*) value {
  [result.mutableFinalCountList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBDiceGameResult_Builder*) addAllFinalCount:(NSArray*) values {
  if (result.mutableFinalCountList == nil) {
    result.mutableFinalCountList = [NSMutableArray array];
  }
  [result.mutableFinalCountList addObjectsFromArray:values];
  return self;
}
- (PBDiceGameResult_Builder*) clearFinalCountList {
  result.mutableFinalCountList = nil;
  return self;
}
- (PBDiceGameResult_Builder*) addFinalCount:(PBDiceFinalCount*) value {
  if (result.mutableFinalCountList == nil) {
    result.mutableFinalCountList = [NSMutableArray array];
  }
  [result.mutableFinalCountList addObject:value];
  return self;
}
@end

