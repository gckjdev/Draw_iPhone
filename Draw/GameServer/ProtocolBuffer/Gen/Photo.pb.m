// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Photo.pb.h"
// @@protoc_insertion_point(imports)

@implementation PhotoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PhotoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBPhotoUsageIsValidValue(PBPhotoUsage value) {
  switch (value) {
    case PBPhotoUsageBegin:
    case PBPhotoUsageForDraw:
    case PBPhotoUsageForPs:
    case PBPhotoUsageEnd:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBPhotoUsage(PBPhotoUsage value) {
  switch (value) {
    case PBPhotoUsageBegin:
      return @"PBPhotoUsageBegin";
    case PBPhotoUsageForDraw:
      return @"PBPhotoUsageForDraw";
    case PBPhotoUsageForPs:
      return @"PBPhotoUsageForPs";
    case PBPhotoUsageEnd:
      return @"PBPhotoUsageEnd";
    default:
      return nil;
  }
}

@interface PBUserPhoto ()
@property (strong) NSString* userId;
@property (strong) NSString* photoId;
@property (strong) NSString* userPhotoId;
@property (strong) NSString* url;
@property (strong) NSString* name;
@property SInt32 createDate;
@property (strong) NSMutableArray * tagsArray;
@property SInt32 usage;
@property Float32 width;
@property Float32 height;
@end

@implementation PBUserPhoto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasPhotoId {
  return !!hasPhotoId_;
}
- (void) setHasPhotoId:(BOOL) _value_ {
  hasPhotoId_ = !!_value_;
}
@synthesize photoId;
- (BOOL) hasUserPhotoId {
  return !!hasUserPhotoId_;
}
- (void) setHasUserPhotoId:(BOOL) _value_ {
  hasUserPhotoId_ = !!_value_;
}
@synthesize userPhotoId;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
@synthesize tagsArray;
@dynamic tags;
- (BOOL) hasUsage {
  return !!hasUsage_;
}
- (void) setHasUsage:(BOOL) _value_ {
  hasUsage_ = !!_value_;
}
@synthesize usage;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.photoId = @"";
    self.userPhotoId = @"";
    self.url = @"";
    self.name = @"";
    self.createDate = 0;
    self.usage = 0;
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static PBUserPhoto* defaultPBUserPhotoInstance = nil;
+ (void) initialize {
  if (self == [PBUserPhoto class]) {
    defaultPBUserPhotoInstance = [[PBUserPhoto alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserPhotoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserPhotoInstance;
}
- (NSArray *)tags {
  return tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasPhotoId) {
    [output writeString:2 value:self.photoId];
  }
  if (self.hasUserPhotoId) {
    [output writeString:3 value:self.userPhotoId];
  }
  if (self.hasUrl) {
    [output writeString:4 value:self.url];
  }
  if (self.hasName) {
    [output writeString:5 value:self.name];
  }
  if (self.hasCreateDate) {
    [output writeInt32:6 value:self.createDate];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:7 value:element];
  }];
  if (self.hasUsage) {
    [output writeInt32:8 value:self.usage];
  }
  if (self.hasWidth) {
    [output writeFloat:9 value:self.width];
  }
  if (self.hasHeight) {
    [output writeFloat:10 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasPhotoId) {
    size_ += computeStringSize(2, self.photoId);
  }
  if (self.hasUserPhotoId) {
    size_ += computeStringSize(3, self.userPhotoId);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(4, self.url);
  }
  if (self.hasName) {
    size_ += computeStringSize(5, self.name);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(6, self.createDate);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tagsArray.count;
    [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasUsage) {
    size_ += computeInt32Size(8, self.usage);
  }
  if (self.hasWidth) {
    size_ += computeFloatSize(9, self.width);
  }
  if (self.hasHeight) {
    size_ += computeFloatSize(10, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserPhoto*) parseFromData:(NSData*) data {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromData:data] build];
}
+ (PBUserPhoto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhoto*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromInputStream:input] build];
}
+ (PBUserPhoto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoBuilder*) builder {
  return [[PBUserPhotoBuilder alloc] init];
}
+ (PBUserPhotoBuilder*) builderWithPrototype:(PBUserPhoto*) prototype {
  return [[PBUserPhoto builder] mergeFrom:prototype];
}
- (PBUserPhotoBuilder*) builder {
  return [PBUserPhoto builder];
}
- (PBUserPhotoBuilder*) toBuilder {
  return [PBUserPhoto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasPhotoId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"photoId", self.photoId];
  }
  if (self.hasUserPhotoId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userPhotoId", self.userPhotoId];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tags", obj];
  }];
  if (self.hasUsage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"usage", [NSNumber numberWithInteger:self.usage]];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithFloat:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserPhoto class]]) {
    return NO;
  }
  PBUserPhoto *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasPhotoId == otherMessage.hasPhotoId &&
      (!self.hasPhotoId || [self.photoId isEqual:otherMessage.photoId]) &&
      self.hasUserPhotoId == otherMessage.hasUserPhotoId &&
      (!self.hasUserPhotoId || [self.userPhotoId isEqual:otherMessage.userPhotoId]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      self.hasUsage == otherMessage.hasUsage &&
      (!self.hasUsage || self.usage == otherMessage.usage) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasPhotoId) {
    hashCode = hashCode * 31 + [self.photoId hash];
  }
  if (self.hasUserPhotoId) {
    hashCode = hashCode * 31 + [self.userPhotoId hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUsage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.usage] hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserPhotoBuilder()
@property (strong) PBUserPhoto* resultPbuserPhoto;
@end

@implementation PBUserPhotoBuilder
@synthesize resultPbuserPhoto;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserPhoto = [[PBUserPhoto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserPhoto;
}
- (PBUserPhotoBuilder*) clear {
  self.resultPbuserPhoto = [[PBUserPhoto alloc] init];
  return self;
}
- (PBUserPhotoBuilder*) clone {
  return [PBUserPhoto builderWithPrototype:resultPbuserPhoto];
}
- (PBUserPhoto*) defaultInstance {
  return [PBUserPhoto defaultInstance];
}
- (PBUserPhoto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserPhoto*) buildPartial {
  PBUserPhoto* returnMe = resultPbuserPhoto;
  self.resultPbuserPhoto = nil;
  return returnMe;
}
- (PBUserPhotoBuilder*) mergeFrom:(PBUserPhoto*) other {
  if (other == [PBUserPhoto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasPhotoId) {
    [self setPhotoId:other.photoId];
  }
  if (other.hasUserPhotoId) {
    [self setUserPhotoId:other.userPhotoId];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.tagsArray.count > 0) {
    if (resultPbuserPhoto.tagsArray == nil) {
      resultPbuserPhoto.tagsArray = [[NSMutableArray alloc] initWithArray:other.tagsArray];
    } else {
      [resultPbuserPhoto.tagsArray addObjectsFromArray:other.tagsArray];
    }
  }
  if (other.hasUsage) {
    [self setUsage:other.usage];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserPhotoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserPhotoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setPhotoId:[input readString]];
        break;
      }
      case 26: {
        [self setUserPhotoId:[input readString]];
        break;
      }
      case 34: {
        [self setUrl:[input readString]];
        break;
      }
      case 42: {
        [self setName:[input readString]];
        break;
      }
      case 48: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 58: {
        [self addTags:[input readString]];
        break;
      }
      case 64: {
        [self setUsage:[input readInt32]];
        break;
      }
      case 77: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 85: {
        [self setHeight:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserPhoto.hasUserId;
}
- (NSString*) userId {
  return resultPbuserPhoto.userId;
}
- (PBUserPhotoBuilder*) setUserId:(NSString*) value {
  resultPbuserPhoto.hasUserId = YES;
  resultPbuserPhoto.userId = value;
  return self;
}
- (PBUserPhotoBuilder*) clearUserId {
  resultPbuserPhoto.hasUserId = NO;
  resultPbuserPhoto.userId = @"";
  return self;
}
- (BOOL) hasPhotoId {
  return resultPbuserPhoto.hasPhotoId;
}
- (NSString*) photoId {
  return resultPbuserPhoto.photoId;
}
- (PBUserPhotoBuilder*) setPhotoId:(NSString*) value {
  resultPbuserPhoto.hasPhotoId = YES;
  resultPbuserPhoto.photoId = value;
  return self;
}
- (PBUserPhotoBuilder*) clearPhotoId {
  resultPbuserPhoto.hasPhotoId = NO;
  resultPbuserPhoto.photoId = @"";
  return self;
}
- (BOOL) hasUserPhotoId {
  return resultPbuserPhoto.hasUserPhotoId;
}
- (NSString*) userPhotoId {
  return resultPbuserPhoto.userPhotoId;
}
- (PBUserPhotoBuilder*) setUserPhotoId:(NSString*) value {
  resultPbuserPhoto.hasUserPhotoId = YES;
  resultPbuserPhoto.userPhotoId = value;
  return self;
}
- (PBUserPhotoBuilder*) clearUserPhotoId {
  resultPbuserPhoto.hasUserPhotoId = NO;
  resultPbuserPhoto.userPhotoId = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultPbuserPhoto.hasUrl;
}
- (NSString*) url {
  return resultPbuserPhoto.url;
}
- (PBUserPhotoBuilder*) setUrl:(NSString*) value {
  resultPbuserPhoto.hasUrl = YES;
  resultPbuserPhoto.url = value;
  return self;
}
- (PBUserPhotoBuilder*) clearUrl {
  resultPbuserPhoto.hasUrl = NO;
  resultPbuserPhoto.url = @"";
  return self;
}
- (BOOL) hasName {
  return resultPbuserPhoto.hasName;
}
- (NSString*) name {
  return resultPbuserPhoto.name;
}
- (PBUserPhotoBuilder*) setName:(NSString*) value {
  resultPbuserPhoto.hasName = YES;
  resultPbuserPhoto.name = value;
  return self;
}
- (PBUserPhotoBuilder*) clearName {
  resultPbuserPhoto.hasName = NO;
  resultPbuserPhoto.name = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbuserPhoto.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbuserPhoto.createDate;
}
- (PBUserPhotoBuilder*) setCreateDate:(SInt32) value {
  resultPbuserPhoto.hasCreateDate = YES;
  resultPbuserPhoto.createDate = value;
  return self;
}
- (PBUserPhotoBuilder*) clearCreateDate {
  resultPbuserPhoto.hasCreateDate = NO;
  resultPbuserPhoto.createDate = 0;
  return self;
}
- (NSMutableArray *)tags {
  return resultPbuserPhoto.tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [resultPbuserPhoto tagsAtIndex:index];
}
- (PBUserPhotoBuilder *)addTags:(NSString*)value {
  if (resultPbuserPhoto.tagsArray == nil) {
    resultPbuserPhoto.tagsArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserPhoto.tagsArray addObject:value];
  return self;
}
- (PBUserPhotoBuilder *)setTagsArray:(NSArray *)array {
  resultPbuserPhoto.tagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBUserPhotoBuilder *)clearTags {
  resultPbuserPhoto.tagsArray = nil;
  return self;
}
- (BOOL) hasUsage {
  return resultPbuserPhoto.hasUsage;
}
- (SInt32) usage {
  return resultPbuserPhoto.usage;
}
- (PBUserPhotoBuilder*) setUsage:(SInt32) value {
  resultPbuserPhoto.hasUsage = YES;
  resultPbuserPhoto.usage = value;
  return self;
}
- (PBUserPhotoBuilder*) clearUsage {
  resultPbuserPhoto.hasUsage = NO;
  resultPbuserPhoto.usage = 0;
  return self;
}
- (BOOL) hasWidth {
  return resultPbuserPhoto.hasWidth;
}
- (Float32) width {
  return resultPbuserPhoto.width;
}
- (PBUserPhotoBuilder*) setWidth:(Float32) value {
  resultPbuserPhoto.hasWidth = YES;
  resultPbuserPhoto.width = value;
  return self;
}
- (PBUserPhotoBuilder*) clearWidth {
  resultPbuserPhoto.hasWidth = NO;
  resultPbuserPhoto.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultPbuserPhoto.hasHeight;
}
- (Float32) height {
  return resultPbuserPhoto.height;
}
- (PBUserPhotoBuilder*) setHeight:(Float32) value {
  resultPbuserPhoto.hasHeight = YES;
  resultPbuserPhoto.height = value;
  return self;
}
- (PBUserPhotoBuilder*) clearHeight {
  resultPbuserPhoto.hasHeight = NO;
  resultPbuserPhoto.height = 0;
  return self;
}
@end

@interface PBUserPhotoList ()
@property (strong) NSString* userId;
@property (strong) NSMutableArray * photoListArray;
@end

@implementation PBUserPhotoList

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize photoListArray;
@dynamic photoList;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
  }
  return self;
}
static PBUserPhotoList* defaultPBUserPhotoListInstance = nil;
+ (void) initialize {
  if (self == [PBUserPhotoList class]) {
    defaultPBUserPhotoListInstance = [[PBUserPhotoList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBUserPhotoListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBUserPhotoListInstance;
}
- (NSArray *)photoList {
  return photoListArray;
}
- (PBUserPhoto*)photoListAtIndex:(NSUInteger)index {
  return [photoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitphotoList = YES;
   [self.photoList enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitphotoList = NO;
      *stop = YES;
    }
  }];
  if (!isInitphotoList) return isInitphotoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  [self.photoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  [self.photoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserPhotoList*) parseFromData:(NSData*) data {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromData:data] build];
}
+ (PBUserPhotoList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromInputStream:input] build];
}
+ (PBUserPhotoList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserPhotoList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoListBuilder*) builder {
  return [[PBUserPhotoListBuilder alloc] init];
}
+ (PBUserPhotoListBuilder*) builderWithPrototype:(PBUserPhotoList*) prototype {
  return [[PBUserPhotoList builder] mergeFrom:prototype];
}
- (PBUserPhotoListBuilder*) builder {
  return [PBUserPhotoList builder];
}
- (PBUserPhotoListBuilder*) toBuilder {
  return [PBUserPhotoList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.photoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"photoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserPhotoList class]]) {
    return NO;
  }
  PBUserPhotoList *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      [self.photoListArray isEqualToArray:otherMessage.photoListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  [self.photoListArray enumerateObjectsUsingBlock:^(PBUserPhoto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserPhotoListBuilder()
@property (strong) PBUserPhotoList* resultPbuserPhotoList;
@end

@implementation PBUserPhotoListBuilder
@synthesize resultPbuserPhotoList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbuserPhotoList = [[PBUserPhotoList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbuserPhotoList;
}
- (PBUserPhotoListBuilder*) clear {
  self.resultPbuserPhotoList = [[PBUserPhotoList alloc] init];
  return self;
}
- (PBUserPhotoListBuilder*) clone {
  return [PBUserPhotoList builderWithPrototype:resultPbuserPhotoList];
}
- (PBUserPhotoList*) defaultInstance {
  return [PBUserPhotoList defaultInstance];
}
- (PBUserPhotoList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserPhotoList*) buildPartial {
  PBUserPhotoList* returnMe = resultPbuserPhotoList;
  self.resultPbuserPhotoList = nil;
  return returnMe;
}
- (PBUserPhotoListBuilder*) mergeFrom:(PBUserPhotoList*) other {
  if (other == [PBUserPhotoList defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.photoListArray.count > 0) {
    if (resultPbuserPhotoList.photoListArray == nil) {
      resultPbuserPhotoList.photoListArray = [[NSMutableArray alloc] initWithArray:other.photoListArray];
    } else {
      [resultPbuserPhotoList.photoListArray addObjectsFromArray:other.photoListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserPhotoListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserPhotoListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBUserPhotoBuilder* subBuilder = [PBUserPhoto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPhotoList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbuserPhotoList.hasUserId;
}
- (NSString*) userId {
  return resultPbuserPhotoList.userId;
}
- (PBUserPhotoListBuilder*) setUserId:(NSString*) value {
  resultPbuserPhotoList.hasUserId = YES;
  resultPbuserPhotoList.userId = value;
  return self;
}
- (PBUserPhotoListBuilder*) clearUserId {
  resultPbuserPhotoList.hasUserId = NO;
  resultPbuserPhotoList.userId = @"";
  return self;
}
- (NSMutableArray *)photoList {
  return resultPbuserPhotoList.photoListArray;
}
- (PBUserPhoto*)photoListAtIndex:(NSUInteger)index {
  return [resultPbuserPhotoList photoListAtIndex:index];
}
- (PBUserPhotoListBuilder *)addPhotoList:(PBUserPhoto*)value {
  if (resultPbuserPhotoList.photoListArray == nil) {
    resultPbuserPhotoList.photoListArray = [[NSMutableArray alloc]init];
  }
  [resultPbuserPhotoList.photoListArray addObject:value];
  return self;
}
- (PBUserPhotoListBuilder *)setPhotoListArray:(NSArray *)array {
  resultPbuserPhotoList.photoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBUserPhotoListBuilder *)clearPhotoList {
  resultPbuserPhotoList.photoListArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
