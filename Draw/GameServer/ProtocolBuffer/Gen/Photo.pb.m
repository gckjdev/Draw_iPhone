// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Photo.pb.h"

@implementation PhotoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PhotoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBPhoto ()
@property (retain) NSString* photoId;
@property (retain) NSString* url;
@property (retain) NSString* name;
@property int32_t createDate;
@property (retain) NSMutableArray* mutableTagsList;
@property (retain) NSMutableArray* mutableKeywordsList;
@end

@implementation PBPhoto

- (BOOL) hasPhotoId {
  return !!hasPhotoId_;
}
- (void) setHasPhotoId:(BOOL) value {
  hasPhotoId_ = !!value;
}
@synthesize photoId;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
@synthesize mutableTagsList;
@synthesize mutableKeywordsList;
- (void) dealloc {
  self.photoId = nil;
  self.url = nil;
  self.name = nil;
  self.mutableTagsList = nil;
  self.mutableKeywordsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.photoId = @"";
    self.url = @"";
    self.name = @"";
    self.createDate = 0;
  }
  return self;
}
static PBPhoto* defaultPBPhotoInstance = nil;
+ (void) initialize {
  if (self == [PBPhoto class]) {
    defaultPBPhotoInstance = [[PBPhoto alloc] init];
  }
}
+ (PBPhoto*) defaultInstance {
  return defaultPBPhotoInstance;
}
- (PBPhoto*) defaultInstance {
  return defaultPBPhotoInstance;
}
- (NSArray*) tagsList {
  return mutableTagsList;
}
- (NSString*) tagsAtIndex:(int32_t) index {
  id value = [mutableTagsList objectAtIndex:index];
  return value;
}
- (NSArray*) keywordsList {
  return mutableKeywordsList;
}
- (NSString*) keywordsAtIndex:(int32_t) index {
  id value = [mutableKeywordsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasPhotoId) {
    return NO;
  }
  if (!self.hasUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhotoId) {
    [output writeString:1 value:self.photoId];
  }
  if (self.hasUrl) {
    [output writeString:2 value:self.url];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCreateDate) {
    [output writeInt32:4 value:self.createDate];
  }
  for (NSString* element in self.mutableTagsList) {
    [output writeString:5 value:element];
  }
  for (NSString* element in self.mutableKeywordsList) {
    [output writeString:6 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPhotoId) {
    size += computeStringSize(1, self.photoId);
  }
  if (self.hasUrl) {
    size += computeStringSize(2, self.url);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(4, self.createDate);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableTagsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableTagsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableKeywordsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableKeywordsList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBPhoto*) parseFromData:(NSData*) data {
  return (PBPhoto*)[[[PBPhoto builder] mergeFromData:data] build];
}
+ (PBPhoto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPhoto*)[[[PBPhoto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPhoto*) parseFromInputStream:(NSInputStream*) input {
  return (PBPhoto*)[[[PBPhoto builder] mergeFromInputStream:input] build];
}
+ (PBPhoto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPhoto*)[[[PBPhoto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPhoto*)[[[PBPhoto builder] mergeFromCodedInputStream:input] build];
}
+ (PBPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPhoto*)[[[PBPhoto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPhoto_Builder*) builder {
  return [[[PBPhoto_Builder alloc] init] autorelease];
}
+ (PBPhoto_Builder*) builderWithPrototype:(PBPhoto*) prototype {
  return [[PBPhoto builder] mergeFrom:prototype];
}
- (PBPhoto_Builder*) builder {
  return [PBPhoto builder];
}
@end

@interface PBPhoto_Builder()
@property (retain) PBPhoto* result;
@end

@implementation PBPhoto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBPhoto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPhoto_Builder*) clear {
  self.result = [[[PBPhoto alloc] init] autorelease];
  return self;
}
- (PBPhoto_Builder*) clone {
  return [PBPhoto builderWithPrototype:result];
}
- (PBPhoto*) defaultInstance {
  return [PBPhoto defaultInstance];
}
- (PBPhoto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPhoto*) buildPartial {
  PBPhoto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBPhoto_Builder*) mergeFrom:(PBPhoto*) other {
  if (other == [PBPhoto defaultInstance]) {
    return self;
  }
  if (other.hasPhotoId) {
    [self setPhotoId:other.photoId];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.mutableTagsList.count > 0) {
    if (result.mutableTagsList == nil) {
      result.mutableTagsList = [NSMutableArray array];
    }
    [result.mutableTagsList addObjectsFromArray:other.mutableTagsList];
  }
  if (other.mutableKeywordsList.count > 0) {
    if (result.mutableKeywordsList == nil) {
      result.mutableKeywordsList = [NSMutableArray array];
    }
    [result.mutableKeywordsList addObjectsFromArray:other.mutableKeywordsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPhoto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPhoto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhotoId:[input readString]];
        break;
      }
      case 18: {
        [self setUrl:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 42: {
        [self addTags:[input readString]];
        break;
      }
      case 50: {
        [self addKeywords:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPhotoId {
  return result.hasPhotoId;
}
- (NSString*) photoId {
  return result.photoId;
}
- (PBPhoto_Builder*) setPhotoId:(NSString*) value {
  result.hasPhotoId = YES;
  result.photoId = value;
  return self;
}
- (PBPhoto_Builder*) clearPhotoId {
  result.hasPhotoId = NO;
  result.photoId = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (PBPhoto_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (PBPhoto_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBPhoto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBPhoto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBPhoto_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBPhoto_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (NSArray*) tagsList {
  if (result.mutableTagsList == nil) {
    return [NSArray array];
  }
  return result.mutableTagsList;
}
- (NSString*) tagsAtIndex:(int32_t) index {
  return [result tagsAtIndex:index];
}
- (PBPhoto_Builder*) replaceTagsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableTagsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBPhoto_Builder*) addTags:(NSString*) value {
  if (result.mutableTagsList == nil) {
    result.mutableTagsList = [NSMutableArray array];
  }
  [result.mutableTagsList addObject:value];
  return self;
}
- (PBPhoto_Builder*) addAllTags:(NSArray*) values {
  if (result.mutableTagsList == nil) {
    result.mutableTagsList = [NSMutableArray array];
  }
  [result.mutableTagsList addObjectsFromArray:values];
  return self;
}
- (PBPhoto_Builder*) clearTagsList {
  result.mutableTagsList = nil;
  return self;
}
- (NSArray*) keywordsList {
  if (result.mutableKeywordsList == nil) {
    return [NSArray array];
  }
  return result.mutableKeywordsList;
}
- (NSString*) keywordsAtIndex:(int32_t) index {
  return [result keywordsAtIndex:index];
}
- (PBPhoto_Builder*) replaceKeywordsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableKeywordsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBPhoto_Builder*) addKeywords:(NSString*) value {
  if (result.mutableKeywordsList == nil) {
    result.mutableKeywordsList = [NSMutableArray array];
  }
  [result.mutableKeywordsList addObject:value];
  return self;
}
- (PBPhoto_Builder*) addAllKeywords:(NSArray*) values {
  if (result.mutableKeywordsList == nil) {
    result.mutableKeywordsList = [NSMutableArray array];
  }
  [result.mutableKeywordsList addObjectsFromArray:values];
  return self;
}
- (PBPhoto_Builder*) clearKeywordsList {
  result.mutableKeywordsList = nil;
  return self;
}
@end

@interface PBUserPhoto ()
@property (retain) NSString* userId;
@property (retain) NSString* photoId;
@property (retain) NSString* url;
@property (retain) NSString* name;
@property int32_t createDate;
@property (retain) NSMutableArray* mutableTagsList;
@end

@implementation PBUserPhoto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasPhotoId {
  return !!hasPhotoId_;
}
- (void) setHasPhotoId:(BOOL) value {
  hasPhotoId_ = !!value;
}
@synthesize photoId;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
@synthesize mutableTagsList;
- (void) dealloc {
  self.userId = nil;
  self.photoId = nil;
  self.url = nil;
  self.name = nil;
  self.mutableTagsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.photoId = @"";
    self.url = @"";
    self.name = @"";
    self.createDate = 0;
  }
  return self;
}
static PBUserPhoto* defaultPBUserPhotoInstance = nil;
+ (void) initialize {
  if (self == [PBUserPhoto class]) {
    defaultPBUserPhotoInstance = [[PBUserPhoto alloc] init];
  }
}
+ (PBUserPhoto*) defaultInstance {
  return defaultPBUserPhotoInstance;
}
- (PBUserPhoto*) defaultInstance {
  return defaultPBUserPhotoInstance;
}
- (NSArray*) tagsList {
  return mutableTagsList;
}
- (NSString*) tagsAtIndex:(int32_t) index {
  id value = [mutableTagsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasPhotoId) {
    [output writeString:2 value:self.photoId];
  }
  if (self.hasUrl) {
    [output writeString:3 value:self.url];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  for (NSString* element in self.mutableTagsList) {
    [output writeString:6 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasPhotoId) {
    size += computeStringSize(2, self.photoId);
  }
  if (self.hasUrl) {
    size += computeStringSize(3, self.url);
  }
  if (self.hasName) {
    size += computeStringSize(4, self.name);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(5, self.createDate);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableTagsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableTagsList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserPhoto*) parseFromData:(NSData*) data {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromData:data] build];
}
+ (PBUserPhoto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhoto*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromInputStream:input] build];
}
+ (PBUserPhoto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserPhoto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhoto*)[[[PBUserPhoto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhoto_Builder*) builder {
  return [[[PBUserPhoto_Builder alloc] init] autorelease];
}
+ (PBUserPhoto_Builder*) builderWithPrototype:(PBUserPhoto*) prototype {
  return [[PBUserPhoto builder] mergeFrom:prototype];
}
- (PBUserPhoto_Builder*) builder {
  return [PBUserPhoto builder];
}
@end

@interface PBUserPhoto_Builder()
@property (retain) PBUserPhoto* result;
@end

@implementation PBUserPhoto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserPhoto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserPhoto_Builder*) clear {
  self.result = [[[PBUserPhoto alloc] init] autorelease];
  return self;
}
- (PBUserPhoto_Builder*) clone {
  return [PBUserPhoto builderWithPrototype:result];
}
- (PBUserPhoto*) defaultInstance {
  return [PBUserPhoto defaultInstance];
}
- (PBUserPhoto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserPhoto*) buildPartial {
  PBUserPhoto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserPhoto_Builder*) mergeFrom:(PBUserPhoto*) other {
  if (other == [PBUserPhoto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasPhotoId) {
    [self setPhotoId:other.photoId];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.mutableTagsList.count > 0) {
    if (result.mutableTagsList == nil) {
      result.mutableTagsList = [NSMutableArray array];
    }
    [result.mutableTagsList addObjectsFromArray:other.mutableTagsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserPhoto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserPhoto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setPhotoId:[input readString]];
        break;
      }
      case 26: {
        [self setUrl:[input readString]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 50: {
        [self addTags:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserPhoto_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserPhoto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasPhotoId {
  return result.hasPhotoId;
}
- (NSString*) photoId {
  return result.photoId;
}
- (PBUserPhoto_Builder*) setPhotoId:(NSString*) value {
  result.hasPhotoId = YES;
  result.photoId = value;
  return self;
}
- (PBUserPhoto_Builder*) clearPhotoId {
  result.hasPhotoId = NO;
  result.photoId = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (PBUserPhoto_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (PBUserPhoto_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBUserPhoto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBUserPhoto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBUserPhoto_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBUserPhoto_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (NSArray*) tagsList {
  if (result.mutableTagsList == nil) {
    return [NSArray array];
  }
  return result.mutableTagsList;
}
- (NSString*) tagsAtIndex:(int32_t) index {
  return [result tagsAtIndex:index];
}
- (PBUserPhoto_Builder*) replaceTagsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableTagsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBUserPhoto_Builder*) addTags:(NSString*) value {
  if (result.mutableTagsList == nil) {
    result.mutableTagsList = [NSMutableArray array];
  }
  [result.mutableTagsList addObject:value];
  return self;
}
- (PBUserPhoto_Builder*) addAllTags:(NSArray*) values {
  if (result.mutableTagsList == nil) {
    result.mutableTagsList = [NSMutableArray array];
  }
  [result.mutableTagsList addObjectsFromArray:values];
  return self;
}
- (PBUserPhoto_Builder*) clearTagsList {
  result.mutableTagsList = nil;
  return self;
}
@end

@interface PBUserPhotoList ()
@property (retain) NSString* userId;
@property (retain) NSMutableArray* mutablePhotoListList;
@end

@implementation PBUserPhotoList

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
@synthesize mutablePhotoListList;
- (void) dealloc {
  self.userId = nil;
  self.mutablePhotoListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
  }
  return self;
}
static PBUserPhotoList* defaultPBUserPhotoListInstance = nil;
+ (void) initialize {
  if (self == [PBUserPhotoList class]) {
    defaultPBUserPhotoListInstance = [[PBUserPhotoList alloc] init];
  }
}
+ (PBUserPhotoList*) defaultInstance {
  return defaultPBUserPhotoListInstance;
}
- (PBUserPhotoList*) defaultInstance {
  return defaultPBUserPhotoListInstance;
}
- (NSArray*) photoListList {
  return mutablePhotoListList;
}
- (PBUserPhoto*) photoListAtIndex:(int32_t) index {
  id value = [mutablePhotoListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  for (PBUserPhoto* element in self.photoListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  for (PBUserPhoto* element in self.photoListList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  for (PBUserPhoto* element in self.photoListList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBUserPhotoList*) parseFromData:(NSData*) data {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromData:data] build];
}
+ (PBUserPhotoList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoList*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromInputStream:input] build];
}
+ (PBUserPhotoList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserPhotoList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserPhotoList*)[[[PBUserPhotoList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserPhotoList_Builder*) builder {
  return [[[PBUserPhotoList_Builder alloc] init] autorelease];
}
+ (PBUserPhotoList_Builder*) builderWithPrototype:(PBUserPhotoList*) prototype {
  return [[PBUserPhotoList builder] mergeFrom:prototype];
}
- (PBUserPhotoList_Builder*) builder {
  return [PBUserPhotoList builder];
}
@end

@interface PBUserPhotoList_Builder()
@property (retain) PBUserPhotoList* result;
@end

@implementation PBUserPhotoList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBUserPhotoList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserPhotoList_Builder*) clear {
  self.result = [[[PBUserPhotoList alloc] init] autorelease];
  return self;
}
- (PBUserPhotoList_Builder*) clone {
  return [PBUserPhotoList builderWithPrototype:result];
}
- (PBUserPhotoList*) defaultInstance {
  return [PBUserPhotoList defaultInstance];
}
- (PBUserPhotoList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserPhotoList*) buildPartial {
  PBUserPhotoList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBUserPhotoList_Builder*) mergeFrom:(PBUserPhotoList*) other {
  if (other == [PBUserPhotoList defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.mutablePhotoListList.count > 0) {
    if (result.mutablePhotoListList == nil) {
      result.mutablePhotoListList = [NSMutableArray array];
    }
    [result.mutablePhotoListList addObjectsFromArray:other.mutablePhotoListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserPhotoList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserPhotoList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBUserPhoto_Builder* subBuilder = [PBUserPhoto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPhotoList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBUserPhotoList_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBUserPhotoList_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (NSArray*) photoListList {
  if (result.mutablePhotoListList == nil) { return [NSArray array]; }
  return result.mutablePhotoListList;
}
- (PBUserPhoto*) photoListAtIndex:(int32_t) index {
  return [result photoListAtIndex:index];
}
- (PBUserPhotoList_Builder*) replacePhotoListAtIndex:(int32_t) index with:(PBUserPhoto*) value {
  [result.mutablePhotoListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBUserPhotoList_Builder*) addAllPhotoList:(NSArray*) values {
  if (result.mutablePhotoListList == nil) {
    result.mutablePhotoListList = [NSMutableArray array];
  }
  [result.mutablePhotoListList addObjectsFromArray:values];
  return self;
}
- (PBUserPhotoList_Builder*) clearPhotoListList {
  result.mutablePhotoListList = nil;
  return self;
}
- (PBUserPhotoList_Builder*) addPhotoList:(PBUserPhoto*) value {
  if (result.mutablePhotoListList == nil) {
    result.mutablePhotoListList = [NSMutableArray array];
  }
  [result.mutablePhotoListList addObject:value];
  return self;
}
@end

