// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Draw.pb.h"

@implementation DrawRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [DrawRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBDraw ()
@property (retain) NSString* userId;
@property (retain) NSString* word;
@property int32_t level;
@property int32_t language;
@property int32_t createDate;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@property int32_t version;
@property (retain) NSMutableArray* mutableDrawDataList;
@property (retain) NSString* opusId;
@property int32_t score;
@property (retain) PBDrawBg* drawBg;
@end

@implementation PBDraw

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
@synthesize mutableDrawDataList;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) value {
  hasOpusId_ = !!value;
}
@synthesize opusId;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value {
  hasScore_ = !!value;
}
@synthesize score;
- (BOOL) hasDrawBg {
  return !!hasDrawBg_;
}
- (void) setHasDrawBg:(BOOL) value {
  hasDrawBg_ = !!value;
}
@synthesize drawBg;
- (void) dealloc {
  self.userId = nil;
  self.word = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.mutableDrawDataList = nil;
  self.opusId = nil;
  self.drawBg = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.createDate = 0;
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.version = 0;
    self.opusId = @"";
    self.score = 0;
    self.drawBg = [PBDrawBg defaultInstance];
  }
  return self;
}
static PBDraw* defaultPBDrawInstance = nil;
+ (void) initialize {
  if (self == [PBDraw class]) {
    defaultPBDrawInstance = [[PBDraw alloc] init];
  }
}
+ (PBDraw*) defaultInstance {
  return defaultPBDrawInstance;
}
- (PBDraw*) defaultInstance {
  return defaultPBDrawInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWord) {
    return NO;
  }
  if (!self.hasLevel) {
    return NO;
  }
  if (!self.hasLanguage) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasDrawBg) {
    if (!self.drawBg.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWord) {
    [output writeString:2 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:3 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:4 value:self.language];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasNickName) {
    [output writeString:6 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:7 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:8 value:self.gender];
  }
  if (self.hasVersion) {
    [output writeInt32:9 value:self.version];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:10 value:element];
  }
  if (self.hasOpusId) {
    [output writeString:11 value:self.opusId];
  }
  if (self.hasScore) {
    [output writeInt32:12 value:self.score];
  }
  if (self.hasDrawBg) {
    [output writeMessage:20 value:self.drawBg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasWord) {
    size += computeStringSize(2, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(3, self.level);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(4, self.language);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(5, self.createDate);
  }
  if (self.hasNickName) {
    size += computeStringSize(6, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(7, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(8, self.gender);
  }
  if (self.hasVersion) {
    size += computeInt32Size(9, self.version);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(10, element);
  }
  if (self.hasOpusId) {
    size += computeStringSize(11, self.opusId);
  }
  if (self.hasScore) {
    size += computeInt32Size(12, self.score);
  }
  if (self.hasDrawBg) {
    size += computeMessageSize(20, self.drawBg);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDraw*) parseFromData:(NSData*) data {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data] build];
}
+ (PBDraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw_Builder*) builder {
  return [[[PBDraw_Builder alloc] init] autorelease];
}
+ (PBDraw_Builder*) builderWithPrototype:(PBDraw*) prototype {
  return [[PBDraw builder] mergeFrom:prototype];
}
- (PBDraw_Builder*) builder {
  return [PBDraw builder];
}
@end

@interface PBDraw_Builder()
@property (retain) PBDraw* result;
@end

@implementation PBDraw_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDraw alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDraw_Builder*) clear {
  self.result = [[[PBDraw alloc] init] autorelease];
  return self;
}
- (PBDraw_Builder*) clone {
  return [PBDraw builderWithPrototype:result];
}
- (PBDraw*) defaultInstance {
  return [PBDraw defaultInstance];
}
- (PBDraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDraw*) buildPartial {
  PBDraw* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDraw_Builder*) mergeFrom:(PBDraw*) other {
  if (other == [PBDraw defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasDrawBg) {
    [self mergeDrawBg:other.drawBg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setWord:[input readString]];
        break;
      }
      case 24: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 50: {
        [self setNickName:[input readString]];
        break;
      }
      case 58: {
        [self setAvatar:[input readString]];
        break;
      }
      case 64: {
        [self setGender:[input readBool]];
        break;
      }
      case 72: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 82: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setOpusId:[input readString]];
        break;
      }
      case 96: {
        [self setScore:[input readInt32]];
        break;
      }
      case 162: {
        PBDrawBg_Builder* subBuilder = [PBDrawBg builder];
        if (self.hasDrawBg) {
          [subBuilder mergeFrom:self.drawBg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawBg:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBDraw_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBDraw_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (PBDraw_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (PBDraw_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (PBDraw_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (PBDraw_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (PBDraw_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (PBDraw_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBDraw_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBDraw_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBDraw_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBDraw_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBDraw_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBDraw_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBDraw_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBDraw_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (PBDraw_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (PBDraw_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBDraw_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBDraw_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBDraw_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBDraw_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (BOOL) hasOpusId {
  return result.hasOpusId;
}
- (NSString*) opusId {
  return result.opusId;
}
- (PBDraw_Builder*) setOpusId:(NSString*) value {
  result.hasOpusId = YES;
  result.opusId = value;
  return self;
}
- (PBDraw_Builder*) clearOpusId {
  result.hasOpusId = NO;
  result.opusId = @"";
  return self;
}
- (BOOL) hasScore {
  return result.hasScore;
}
- (int32_t) score {
  return result.score;
}
- (PBDraw_Builder*) setScore:(int32_t) value {
  result.hasScore = YES;
  result.score = value;
  return self;
}
- (PBDraw_Builder*) clearScore {
  result.hasScore = NO;
  result.score = 0;
  return self;
}
- (BOOL) hasDrawBg {
  return result.hasDrawBg;
}
- (PBDrawBg*) drawBg {
  return result.drawBg;
}
- (PBDraw_Builder*) setDrawBg:(PBDrawBg*) value {
  result.hasDrawBg = YES;
  result.drawBg = value;
  return self;
}
- (PBDraw_Builder*) setDrawBgBuilder:(PBDrawBg_Builder*) builderForValue {
  return [self setDrawBg:[builderForValue build]];
}
- (PBDraw_Builder*) mergeDrawBg:(PBDrawBg*) value {
  if (result.hasDrawBg &&
      result.drawBg != [PBDrawBg defaultInstance]) {
    result.drawBg =
      [[[PBDrawBg builderWithPrototype:result.drawBg] mergeFrom:value] buildPartial];
  } else {
    result.drawBg = value;
  }
  result.hasDrawBg = YES;
  return self;
}
- (PBDraw_Builder*) clearDrawBg {
  result.hasDrawBg = NO;
  result.drawBg = [PBDrawBg defaultInstance];
  return self;
}
@end

@interface PBFeedTimes ()
@property int32_t type;
@property int32_t value;
@end

@implementation PBFeedTimes

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value {
  hasValue_ = !!value;
}
@synthesize value;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.value = 0;
  }
  return self;
}
static PBFeedTimes* defaultPBFeedTimesInstance = nil;
+ (void) initialize {
  if (self == [PBFeedTimes class]) {
    defaultPBFeedTimesInstance = [[PBFeedTimes alloc] init];
  }
}
+ (PBFeedTimes*) defaultInstance {
  return defaultPBFeedTimesInstance;
}
- (PBFeedTimes*) defaultInstance {
  return defaultPBFeedTimesInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  if (self.hasValue) {
    size += computeInt32Size(2, self.value);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBFeedTimes*) parseFromData:(NSData*) data {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromData:data] build];
}
+ (PBFeedTimes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromInputStream:input] build];
}
+ (PBFeedTimes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeedTimes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes_Builder*) builder {
  return [[[PBFeedTimes_Builder alloc] init] autorelease];
}
+ (PBFeedTimes_Builder*) builderWithPrototype:(PBFeedTimes*) prototype {
  return [[PBFeedTimes builder] mergeFrom:prototype];
}
- (PBFeedTimes_Builder*) builder {
  return [PBFeedTimes builder];
}
@end

@interface PBFeedTimes_Builder()
@property (retain) PBFeedTimes* result;
@end

@implementation PBFeedTimes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBFeedTimes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFeedTimes_Builder*) clear {
  self.result = [[[PBFeedTimes alloc] init] autorelease];
  return self;
}
- (PBFeedTimes_Builder*) clone {
  return [PBFeedTimes builderWithPrototype:result];
}
- (PBFeedTimes*) defaultInstance {
  return [PBFeedTimes defaultInstance];
}
- (PBFeedTimes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeedTimes*) buildPartial {
  PBFeedTimes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBFeedTimes_Builder*) mergeFrom:(PBFeedTimes*) other {
  if (other == [PBFeedTimes defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedTimes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedTimes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBFeedTimes_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBFeedTimes_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (int32_t) value {
  return result.value;
}
- (PBFeedTimes_Builder*) setValue:(int32_t) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (PBFeedTimes_Builder*) clearValue {
  result.hasValue = NO;
  result.value = 0;
  return self;
}
@end

@interface PBCommentInfo ()
@property int32_t type;
@property (retain) NSString* comment;
@property (retain) NSString* actionId;
@property (retain) NSString* actionUserId;
@property (retain) NSString* actionNickName;
@property (retain) NSString* actionSummary;
@end

@implementation PBCommentInfo

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) value {
  hasActionId_ = !!value;
}
@synthesize actionId;
- (BOOL) hasActionUserId {
  return !!hasActionUserId_;
}
- (void) setHasActionUserId:(BOOL) value {
  hasActionUserId_ = !!value;
}
@synthesize actionUserId;
- (BOOL) hasActionNickName {
  return !!hasActionNickName_;
}
- (void) setHasActionNickName:(BOOL) value {
  hasActionNickName_ = !!value;
}
@synthesize actionNickName;
- (BOOL) hasActionSummary {
  return !!hasActionSummary_;
}
- (void) setHasActionSummary:(BOOL) value {
  hasActionSummary_ = !!value;
}
@synthesize actionSummary;
- (void) dealloc {
  self.comment = nil;
  self.actionId = nil;
  self.actionUserId = nil;
  self.actionNickName = nil;
  self.actionSummary = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.comment = @"";
    self.actionId = @"";
    self.actionUserId = @"";
    self.actionNickName = @"";
    self.actionSummary = @"";
  }
  return self;
}
static PBCommentInfo* defaultPBCommentInfoInstance = nil;
+ (void) initialize {
  if (self == [PBCommentInfo class]) {
    defaultPBCommentInfoInstance = [[PBCommentInfo alloc] init];
  }
}
+ (PBCommentInfo*) defaultInstance {
  return defaultPBCommentInfoInstance;
}
- (PBCommentInfo*) defaultInstance {
  return defaultPBCommentInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasActionId) {
    return NO;
  }
  if (!self.hasActionUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasComment) {
    [output writeString:2 value:self.comment];
  }
  if (self.hasActionId) {
    [output writeString:3 value:self.actionId];
  }
  if (self.hasActionUserId) {
    [output writeString:4 value:self.actionUserId];
  }
  if (self.hasActionNickName) {
    [output writeString:5 value:self.actionNickName];
  }
  if (self.hasActionSummary) {
    [output writeString:6 value:self.actionSummary];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  if (self.hasComment) {
    size += computeStringSize(2, self.comment);
  }
  if (self.hasActionId) {
    size += computeStringSize(3, self.actionId);
  }
  if (self.hasActionUserId) {
    size += computeStringSize(4, self.actionUserId);
  }
  if (self.hasActionNickName) {
    size += computeStringSize(5, self.actionNickName);
  }
  if (self.hasActionSummary) {
    size += computeStringSize(6, self.actionSummary);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBCommentInfo*) parseFromData:(NSData*) data {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromData:data] build];
}
+ (PBCommentInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromInputStream:input] build];
}
+ (PBCommentInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBCommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo_Builder*) builder {
  return [[[PBCommentInfo_Builder alloc] init] autorelease];
}
+ (PBCommentInfo_Builder*) builderWithPrototype:(PBCommentInfo*) prototype {
  return [[PBCommentInfo builder] mergeFrom:prototype];
}
- (PBCommentInfo_Builder*) builder {
  return [PBCommentInfo builder];
}
@end

@interface PBCommentInfo_Builder()
@property (retain) PBCommentInfo* result;
@end

@implementation PBCommentInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBCommentInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBCommentInfo_Builder*) clear {
  self.result = [[[PBCommentInfo alloc] init] autorelease];
  return self;
}
- (PBCommentInfo_Builder*) clone {
  return [PBCommentInfo builderWithPrototype:result];
}
- (PBCommentInfo*) defaultInstance {
  return [PBCommentInfo defaultInstance];
}
- (PBCommentInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCommentInfo*) buildPartial {
  PBCommentInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBCommentInfo_Builder*) mergeFrom:(PBCommentInfo*) other {
  if (other == [PBCommentInfo defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasActionUserId) {
    [self setActionUserId:other.actionUserId];
  }
  if (other.hasActionNickName) {
    [self setActionNickName:other.actionNickName];
  }
  if (other.hasActionSummary) {
    [self setActionSummary:other.actionSummary];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCommentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCommentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setComment:[input readString]];
        break;
      }
      case 26: {
        [self setActionId:[input readString]];
        break;
      }
      case 34: {
        [self setActionUserId:[input readString]];
        break;
      }
      case 42: {
        [self setActionNickName:[input readString]];
        break;
      }
      case 50: {
        [self setActionSummary:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBCommentInfo_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBCommentInfo_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (PBCommentInfo_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (PBCommentInfo_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasActionId {
  return result.hasActionId;
}
- (NSString*) actionId {
  return result.actionId;
}
- (PBCommentInfo_Builder*) setActionId:(NSString*) value {
  result.hasActionId = YES;
  result.actionId = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionId {
  result.hasActionId = NO;
  result.actionId = @"";
  return self;
}
- (BOOL) hasActionUserId {
  return result.hasActionUserId;
}
- (NSString*) actionUserId {
  return result.actionUserId;
}
- (PBCommentInfo_Builder*) setActionUserId:(NSString*) value {
  result.hasActionUserId = YES;
  result.actionUserId = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionUserId {
  result.hasActionUserId = NO;
  result.actionUserId = @"";
  return self;
}
- (BOOL) hasActionNickName {
  return result.hasActionNickName;
}
- (NSString*) actionNickName {
  return result.actionNickName;
}
- (PBCommentInfo_Builder*) setActionNickName:(NSString*) value {
  result.hasActionNickName = YES;
  result.actionNickName = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionNickName {
  result.hasActionNickName = NO;
  result.actionNickName = @"";
  return self;
}
- (BOOL) hasActionSummary {
  return result.hasActionSummary;
}
- (NSString*) actionSummary {
  return result.actionSummary;
}
- (PBCommentInfo_Builder*) setActionSummary:(NSString*) value {
  result.hasActionSummary = YES;
  result.actionSummary = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionSummary {
  result.hasActionSummary = NO;
  result.actionSummary = @"";
  return self;
}
@end

@interface PBFeed ()
@property (retain) NSString* feedId;
@property (retain) NSString* userId;
@property int32_t actionType;
@property int32_t createDate;
@property int32_t deviceType;
@property (retain) NSString* deviceName;
@property (retain) NSString* gameId;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@property (retain) PBDraw* drawData;
@property (retain) NSString* targetUserId;
@property (retain) NSString* targetUserNickName;
@property Float64 historyScore;
@property (retain) NSString* opusDesc;
@property (retain) NSString* opusId;
@property BOOL isCorrect;
@property int32_t score;
@property (retain) NSMutableArray* mutableGuessWordsList;
@property int32_t opusStatus;
@property (retain) NSString* comment;
@property (retain) PBCommentInfo* commentInfo;
@property int32_t matchTimes;
@property int32_t correctTimes;
@property int32_t guessTimes;
@property int32_t commentTimes;
@property (retain) NSMutableArray* mutableFeedTimesList;
@property (retain) NSString* opusCreatorUserId;
@property (retain) NSString* opusCreatorNickName;
@property BOOL opusCreatorGender;
@property (retain) NSString* opusCreatorAvatar;
@property (retain) NSString* opusWord;
@property (retain) NSString* opusImage;
@property (retain) NSString* contestId;
@property Float64 contestScore;
@end

@implementation PBFeed

- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) value {
  hasFeedId_ = !!value;
}
@synthesize feedId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasActionType {
  return !!hasActionType_;
}
- (void) setHasActionType:(BOOL) value {
  hasActionType_ = !!value;
}
@synthesize actionType;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value {
  hasDeviceType_ = !!value;
}
@synthesize deviceType;
- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) value {
  hasDeviceName_ = !!value;
}
@synthesize deviceName;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
- (BOOL) hasDrawData {
  return !!hasDrawData_;
}
- (void) setHasDrawData:(BOOL) value {
  hasDrawData_ = !!value;
}
@synthesize drawData;
- (BOOL) hasTargetUserId {
  return !!hasTargetUserId_;
}
- (void) setHasTargetUserId:(BOOL) value {
  hasTargetUserId_ = !!value;
}
@synthesize targetUserId;
- (BOOL) hasTargetUserNickName {
  return !!hasTargetUserNickName_;
}
- (void) setHasTargetUserNickName:(BOOL) value {
  hasTargetUserNickName_ = !!value;
}
@synthesize targetUserNickName;
- (BOOL) hasHistoryScore {
  return !!hasHistoryScore_;
}
- (void) setHasHistoryScore:(BOOL) value {
  hasHistoryScore_ = !!value;
}
@synthesize historyScore;
- (BOOL) hasOpusDesc {
  return !!hasOpusDesc_;
}
- (void) setHasOpusDesc:(BOOL) value {
  hasOpusDesc_ = !!value;
}
@synthesize opusDesc;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) value {
  hasOpusId_ = !!value;
}
@synthesize opusId;
- (BOOL) hasIsCorrect {
  return !!hasIsCorrect_;
}
- (void) setHasIsCorrect:(BOOL) value {
  hasIsCorrect_ = !!value;
}
- (BOOL) isCorrect {
  return !!isCorrect_;
}
- (void) setIsCorrect:(BOOL) value {
  isCorrect_ = !!value;
}
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value {
  hasScore_ = !!value;
}
@synthesize score;
@synthesize mutableGuessWordsList;
- (BOOL) hasOpusStatus {
  return !!hasOpusStatus_;
}
- (void) setHasOpusStatus:(BOOL) value {
  hasOpusStatus_ = !!value;
}
@synthesize opusStatus;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (BOOL) hasCommentInfo {
  return !!hasCommentInfo_;
}
- (void) setHasCommentInfo:(BOOL) value {
  hasCommentInfo_ = !!value;
}
@synthesize commentInfo;
- (BOOL) hasMatchTimes {
  return !!hasMatchTimes_;
}
- (void) setHasMatchTimes:(BOOL) value {
  hasMatchTimes_ = !!value;
}
@synthesize matchTimes;
- (BOOL) hasCorrectTimes {
  return !!hasCorrectTimes_;
}
- (void) setHasCorrectTimes:(BOOL) value {
  hasCorrectTimes_ = !!value;
}
@synthesize correctTimes;
- (BOOL) hasGuessTimes {
  return !!hasGuessTimes_;
}
- (void) setHasGuessTimes:(BOOL) value {
  hasGuessTimes_ = !!value;
}
@synthesize guessTimes;
- (BOOL) hasCommentTimes {
  return !!hasCommentTimes_;
}
- (void) setHasCommentTimes:(BOOL) value {
  hasCommentTimes_ = !!value;
}
@synthesize commentTimes;
@synthesize mutableFeedTimesList;
- (BOOL) hasOpusCreatorUserId {
  return !!hasOpusCreatorUserId_;
}
- (void) setHasOpusCreatorUserId:(BOOL) value {
  hasOpusCreatorUserId_ = !!value;
}
@synthesize opusCreatorUserId;
- (BOOL) hasOpusCreatorNickName {
  return !!hasOpusCreatorNickName_;
}
- (void) setHasOpusCreatorNickName:(BOOL) value {
  hasOpusCreatorNickName_ = !!value;
}
@synthesize opusCreatorNickName;
- (BOOL) hasOpusCreatorGender {
  return !!hasOpusCreatorGender_;
}
- (void) setHasOpusCreatorGender:(BOOL) value {
  hasOpusCreatorGender_ = !!value;
}
- (BOOL) opusCreatorGender {
  return !!opusCreatorGender_;
}
- (void) setOpusCreatorGender:(BOOL) value {
  opusCreatorGender_ = !!value;
}
- (BOOL) hasOpusCreatorAvatar {
  return !!hasOpusCreatorAvatar_;
}
- (void) setHasOpusCreatorAvatar:(BOOL) value {
  hasOpusCreatorAvatar_ = !!value;
}
@synthesize opusCreatorAvatar;
- (BOOL) hasOpusWord {
  return !!hasOpusWord_;
}
- (void) setHasOpusWord:(BOOL) value {
  hasOpusWord_ = !!value;
}
@synthesize opusWord;
- (BOOL) hasOpusImage {
  return !!hasOpusImage_;
}
- (void) setHasOpusImage:(BOOL) value {
  hasOpusImage_ = !!value;
}
@synthesize opusImage;
- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) value {
  hasContestId_ = !!value;
}
@synthesize contestId;
- (BOOL) hasContestScore {
  return !!hasContestScore_;
}
- (void) setHasContestScore:(BOOL) value {
  hasContestScore_ = !!value;
}
@synthesize contestScore;
- (void) dealloc {
  self.feedId = nil;
  self.userId = nil;
  self.deviceName = nil;
  self.gameId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.drawData = nil;
  self.targetUserId = nil;
  self.targetUserNickName = nil;
  self.opusDesc = nil;
  self.opusId = nil;
  self.mutableGuessWordsList = nil;
  self.comment = nil;
  self.commentInfo = nil;
  self.mutableFeedTimesList = nil;
  self.opusCreatorUserId = nil;
  self.opusCreatorNickName = nil;
  self.opusCreatorAvatar = nil;
  self.opusWord = nil;
  self.opusImage = nil;
  self.contestId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.feedId = @"";
    self.userId = @"";
    self.actionType = 0;
    self.createDate = 0;
    self.deviceType = 0;
    self.deviceName = @"";
    self.gameId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.drawData = [PBDraw defaultInstance];
    self.targetUserId = @"";
    self.targetUserNickName = @"";
    self.historyScore = 0;
    self.opusDesc = @"";
    self.opusId = @"";
    self.isCorrect = NO;
    self.score = 0;
    self.opusStatus = 0;
    self.comment = @"";
    self.commentInfo = [PBCommentInfo defaultInstance];
    self.matchTimes = 0;
    self.correctTimes = 0;
    self.guessTimes = 0;
    self.commentTimes = 0;
    self.opusCreatorUserId = @"";
    self.opusCreatorNickName = @"";
    self.opusCreatorGender = NO;
    self.opusCreatorAvatar = @"";
    self.opusWord = @"";
    self.opusImage = @"";
    self.contestId = @"";
    self.contestScore = 0;
  }
  return self;
}
static PBFeed* defaultPBFeedInstance = nil;
+ (void) initialize {
  if (self == [PBFeed class]) {
    defaultPBFeedInstance = [[PBFeed alloc] init];
  }
}
+ (PBFeed*) defaultInstance {
  return defaultPBFeedInstance;
}
- (PBFeed*) defaultInstance {
  return defaultPBFeedInstance;
}
- (NSArray*) guessWordsList {
  return mutableGuessWordsList;
}
- (NSString*) guessWordsAtIndex:(int32_t) index {
  id value = [mutableGuessWordsList objectAtIndex:index];
  return value;
}
- (NSArray*) feedTimesList {
  return mutableFeedTimesList;
}
- (PBFeedTimes*) feedTimesAtIndex:(int32_t) index {
  id value = [mutableFeedTimesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasFeedId) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasActionType) {
    return NO;
  }
  if (!self.hasCreateDate) {
    return NO;
  }
  if (self.hasDrawData) {
    if (!self.drawData.isInitialized) {
      return NO;
    }
  }
  if (self.hasCommentInfo) {
    if (!self.commentInfo.isInitialized) {
      return NO;
    }
  }
  for (PBFeedTimes* element in self.feedTimesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFeedId) {
    [output writeString:1 value:self.feedId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasActionType) {
    [output writeInt32:3 value:self.actionType];
  }
  if (self.hasCreateDate) {
    [output writeInt32:4 value:self.createDate];
  }
  if (self.hasDeviceType) {
    [output writeInt32:5 value:self.deviceType];
  }
  if (self.hasDeviceName) {
    [output writeString:6 value:self.deviceName];
  }
  if (self.hasGameId) {
    [output writeString:7 value:self.gameId];
  }
  if (self.hasNickName) {
    [output writeString:21 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:22 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:23 value:self.gender];
  }
  if (self.hasDrawData) {
    [output writeMessage:31 value:self.drawData];
  }
  if (self.hasTargetUserId) {
    [output writeString:32 value:self.targetUserId];
  }
  if (self.hasTargetUserNickName) {
    [output writeString:33 value:self.targetUserNickName];
  }
  if (self.hasHistoryScore) {
    [output writeDouble:34 value:self.historyScore];
  }
  if (self.hasOpusDesc) {
    [output writeString:35 value:self.opusDesc];
  }
  if (self.hasOpusId) {
    [output writeString:41 value:self.opusId];
  }
  if (self.hasIsCorrect) {
    [output writeBool:42 value:self.isCorrect];
  }
  if (self.hasScore) {
    [output writeInt32:43 value:self.score];
  }
  for (NSString* element in self.mutableGuessWordsList) {
    [output writeString:44 value:element];
  }
  if (self.hasOpusStatus) {
    [output writeInt32:45 value:self.opusStatus];
  }
  if (self.hasComment) {
    [output writeString:51 value:self.comment];
  }
  if (self.hasCommentInfo) {
    [output writeMessage:52 value:self.commentInfo];
  }
  if (self.hasMatchTimes) {
    [output writeInt32:61 value:self.matchTimes];
  }
  if (self.hasCorrectTimes) {
    [output writeInt32:62 value:self.correctTimes];
  }
  if (self.hasGuessTimes) {
    [output writeInt32:63 value:self.guessTimes];
  }
  if (self.hasCommentTimes) {
    [output writeInt32:64 value:self.commentTimes];
  }
  for (PBFeedTimes* element in self.feedTimesList) {
    [output writeMessage:65 value:element];
  }
  if (self.hasOpusCreatorUserId) {
    [output writeString:71 value:self.opusCreatorUserId];
  }
  if (self.hasOpusCreatorNickName) {
    [output writeString:72 value:self.opusCreatorNickName];
  }
  if (self.hasOpusCreatorGender) {
    [output writeBool:73 value:self.opusCreatorGender];
  }
  if (self.hasOpusCreatorAvatar) {
    [output writeString:74 value:self.opusCreatorAvatar];
  }
  if (self.hasOpusWord) {
    [output writeString:81 value:self.opusWord];
  }
  if (self.hasOpusImage) {
    [output writeString:82 value:self.opusImage];
  }
  if (self.hasContestId) {
    [output writeString:91 value:self.contestId];
  }
  if (self.hasContestScore) {
    [output writeDouble:92 value:self.contestScore];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFeedId) {
    size += computeStringSize(1, self.feedId);
  }
  if (self.hasUserId) {
    size += computeStringSize(2, self.userId);
  }
  if (self.hasActionType) {
    size += computeInt32Size(3, self.actionType);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(4, self.createDate);
  }
  if (self.hasDeviceType) {
    size += computeInt32Size(5, self.deviceType);
  }
  if (self.hasDeviceName) {
    size += computeStringSize(6, self.deviceName);
  }
  if (self.hasGameId) {
    size += computeStringSize(7, self.gameId);
  }
  if (self.hasNickName) {
    size += computeStringSize(21, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(22, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(23, self.gender);
  }
  if (self.hasDrawData) {
    size += computeMessageSize(31, self.drawData);
  }
  if (self.hasTargetUserId) {
    size += computeStringSize(32, self.targetUserId);
  }
  if (self.hasTargetUserNickName) {
    size += computeStringSize(33, self.targetUserNickName);
  }
  if (self.hasHistoryScore) {
    size += computeDoubleSize(34, self.historyScore);
  }
  if (self.hasOpusDesc) {
    size += computeStringSize(35, self.opusDesc);
  }
  if (self.hasOpusId) {
    size += computeStringSize(41, self.opusId);
  }
  if (self.hasIsCorrect) {
    size += computeBoolSize(42, self.isCorrect);
  }
  if (self.hasScore) {
    size += computeInt32Size(43, self.score);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableGuessWordsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 2 * self.mutableGuessWordsList.count;
  }
  if (self.hasOpusStatus) {
    size += computeInt32Size(45, self.opusStatus);
  }
  if (self.hasComment) {
    size += computeStringSize(51, self.comment);
  }
  if (self.hasCommentInfo) {
    size += computeMessageSize(52, self.commentInfo);
  }
  if (self.hasMatchTimes) {
    size += computeInt32Size(61, self.matchTimes);
  }
  if (self.hasCorrectTimes) {
    size += computeInt32Size(62, self.correctTimes);
  }
  if (self.hasGuessTimes) {
    size += computeInt32Size(63, self.guessTimes);
  }
  if (self.hasCommentTimes) {
    size += computeInt32Size(64, self.commentTimes);
  }
  for (PBFeedTimes* element in self.feedTimesList) {
    size += computeMessageSize(65, element);
  }
  if (self.hasOpusCreatorUserId) {
    size += computeStringSize(71, self.opusCreatorUserId);
  }
  if (self.hasOpusCreatorNickName) {
    size += computeStringSize(72, self.opusCreatorNickName);
  }
  if (self.hasOpusCreatorGender) {
    size += computeBoolSize(73, self.opusCreatorGender);
  }
  if (self.hasOpusCreatorAvatar) {
    size += computeStringSize(74, self.opusCreatorAvatar);
  }
  if (self.hasOpusWord) {
    size += computeStringSize(81, self.opusWord);
  }
  if (self.hasOpusImage) {
    size += computeStringSize(82, self.opusImage);
  }
  if (self.hasContestId) {
    size += computeStringSize(91, self.contestId);
  }
  if (self.hasContestScore) {
    size += computeDoubleSize(92, self.contestScore);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBFeed*) parseFromData:(NSData*) data {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data] build];
}
+ (PBFeed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed_Builder*) builder {
  return [[[PBFeed_Builder alloc] init] autorelease];
}
+ (PBFeed_Builder*) builderWithPrototype:(PBFeed*) prototype {
  return [[PBFeed builder] mergeFrom:prototype];
}
- (PBFeed_Builder*) builder {
  return [PBFeed builder];
}
@end

@interface PBFeed_Builder()
@property (retain) PBFeed* result;
@end

@implementation PBFeed_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBFeed alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFeed_Builder*) clear {
  self.result = [[[PBFeed alloc] init] autorelease];
  return self;
}
- (PBFeed_Builder*) clone {
  return [PBFeed builderWithPrototype:result];
}
- (PBFeed*) defaultInstance {
  return [PBFeed defaultInstance];
}
- (PBFeed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeed*) buildPartial {
  PBFeed* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBFeed_Builder*) mergeFrom:(PBFeed*) other {
  if (other == [PBFeed defaultInstance]) {
    return self;
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasActionType) {
    [self setActionType:other.actionType];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasDrawData) {
    [self mergeDrawData:other.drawData];
  }
  if (other.hasTargetUserId) {
    [self setTargetUserId:other.targetUserId];
  }
  if (other.hasTargetUserNickName) {
    [self setTargetUserNickName:other.targetUserNickName];
  }
  if (other.hasHistoryScore) {
    [self setHistoryScore:other.historyScore];
  }
  if (other.hasOpusDesc) {
    [self setOpusDesc:other.opusDesc];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasIsCorrect) {
    [self setIsCorrect:other.isCorrect];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.mutableGuessWordsList.count > 0) {
    if (result.mutableGuessWordsList == nil) {
      result.mutableGuessWordsList = [NSMutableArray array];
    }
    [result.mutableGuessWordsList addObjectsFromArray:other.mutableGuessWordsList];
  }
  if (other.hasOpusStatus) {
    [self setOpusStatus:other.opusStatus];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCommentInfo) {
    [self mergeCommentInfo:other.commentInfo];
  }
  if (other.hasMatchTimes) {
    [self setMatchTimes:other.matchTimes];
  }
  if (other.hasCorrectTimes) {
    [self setCorrectTimes:other.correctTimes];
  }
  if (other.hasGuessTimes) {
    [self setGuessTimes:other.guessTimes];
  }
  if (other.hasCommentTimes) {
    [self setCommentTimes:other.commentTimes];
  }
  if (other.mutableFeedTimesList.count > 0) {
    if (result.mutableFeedTimesList == nil) {
      result.mutableFeedTimesList = [NSMutableArray array];
    }
    [result.mutableFeedTimesList addObjectsFromArray:other.mutableFeedTimesList];
  }
  if (other.hasOpusCreatorUserId) {
    [self setOpusCreatorUserId:other.opusCreatorUserId];
  }
  if (other.hasOpusCreatorNickName) {
    [self setOpusCreatorNickName:other.opusCreatorNickName];
  }
  if (other.hasOpusCreatorGender) {
    [self setOpusCreatorGender:other.opusCreatorGender];
  }
  if (other.hasOpusCreatorAvatar) {
    [self setOpusCreatorAvatar:other.opusCreatorAvatar];
  }
  if (other.hasOpusWord) {
    [self setOpusWord:other.opusWord];
  }
  if (other.hasOpusImage) {
    [self setOpusImage:other.opusImage];
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  if (other.hasContestScore) {
    [self setContestScore:other.contestScore];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeed_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeed_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFeedId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 24: {
        [self setActionType:[input readInt32]];
        break;
      }
      case 32: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 40: {
        [self setDeviceType:[input readInt32]];
        break;
      }
      case 50: {
        [self setDeviceName:[input readString]];
        break;
      }
      case 58: {
        [self setGameId:[input readString]];
        break;
      }
      case 170: {
        [self setNickName:[input readString]];
        break;
      }
      case 178: {
        [self setAvatar:[input readString]];
        break;
      }
      case 184: {
        [self setGender:[input readBool]];
        break;
      }
      case 250: {
        PBDraw_Builder* subBuilder = [PBDraw builder];
        if (self.hasDrawData) {
          [subBuilder mergeFrom:self.drawData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawData:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        [self setTargetUserId:[input readString]];
        break;
      }
      case 266: {
        [self setTargetUserNickName:[input readString]];
        break;
      }
      case 273: {
        [self setHistoryScore:[input readDouble]];
        break;
      }
      case 282: {
        [self setOpusDesc:[input readString]];
        break;
      }
      case 330: {
        [self setOpusId:[input readString]];
        break;
      }
      case 336: {
        [self setIsCorrect:[input readBool]];
        break;
      }
      case 344: {
        [self setScore:[input readInt32]];
        break;
      }
      case 354: {
        [self addGuessWords:[input readString]];
        break;
      }
      case 360: {
        [self setOpusStatus:[input readInt32]];
        break;
      }
      case 410: {
        [self setComment:[input readString]];
        break;
      }
      case 418: {
        PBCommentInfo_Builder* subBuilder = [PBCommentInfo builder];
        if (self.hasCommentInfo) {
          [subBuilder mergeFrom:self.commentInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommentInfo:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setMatchTimes:[input readInt32]];
        break;
      }
      case 496: {
        [self setCorrectTimes:[input readInt32]];
        break;
      }
      case 504: {
        [self setGuessTimes:[input readInt32]];
        break;
      }
      case 512: {
        [self setCommentTimes:[input readInt32]];
        break;
      }
      case 522: {
        PBFeedTimes_Builder* subBuilder = [PBFeedTimes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeedTimes:[subBuilder buildPartial]];
        break;
      }
      case 570: {
        [self setOpusCreatorUserId:[input readString]];
        break;
      }
      case 578: {
        [self setOpusCreatorNickName:[input readString]];
        break;
      }
      case 584: {
        [self setOpusCreatorGender:[input readBool]];
        break;
      }
      case 594: {
        [self setOpusCreatorAvatar:[input readString]];
        break;
      }
      case 650: {
        [self setOpusWord:[input readString]];
        break;
      }
      case 658: {
        [self setOpusImage:[input readString]];
        break;
      }
      case 730: {
        [self setContestId:[input readString]];
        break;
      }
      case 737: {
        [self setContestScore:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasFeedId {
  return result.hasFeedId;
}
- (NSString*) feedId {
  return result.feedId;
}
- (PBFeed_Builder*) setFeedId:(NSString*) value {
  result.hasFeedId = YES;
  result.feedId = value;
  return self;
}
- (PBFeed_Builder*) clearFeedId {
  result.hasFeedId = NO;
  result.feedId = @"";
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBFeed_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBFeed_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasActionType {
  return result.hasActionType;
}
- (int32_t) actionType {
  return result.actionType;
}
- (PBFeed_Builder*) setActionType:(int32_t) value {
  result.hasActionType = YES;
  result.actionType = value;
  return self;
}
- (PBFeed_Builder*) clearActionType {
  result.hasActionType = NO;
  result.actionType = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBFeed_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBFeed_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (int32_t) deviceType {
  return result.deviceType;
}
- (PBFeed_Builder*) setDeviceType:(int32_t) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (PBFeed_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = 0;
  return self;
}
- (BOOL) hasDeviceName {
  return result.hasDeviceName;
}
- (NSString*) deviceName {
  return result.deviceName;
}
- (PBFeed_Builder*) setDeviceName:(NSString*) value {
  result.hasDeviceName = YES;
  result.deviceName = value;
  return self;
}
- (PBFeed_Builder*) clearDeviceName {
  result.hasDeviceName = NO;
  result.deviceName = @"";
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (PBFeed_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (PBFeed_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBFeed_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBFeed_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBFeed_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBFeed_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBFeed_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBFeed_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (BOOL) hasDrawData {
  return result.hasDrawData;
}
- (PBDraw*) drawData {
  return result.drawData;
}
- (PBFeed_Builder*) setDrawData:(PBDraw*) value {
  result.hasDrawData = YES;
  result.drawData = value;
  return self;
}
- (PBFeed_Builder*) setDrawDataBuilder:(PBDraw_Builder*) builderForValue {
  return [self setDrawData:[builderForValue build]];
}
- (PBFeed_Builder*) mergeDrawData:(PBDraw*) value {
  if (result.hasDrawData &&
      result.drawData != [PBDraw defaultInstance]) {
    result.drawData =
      [[[PBDraw builderWithPrototype:result.drawData] mergeFrom:value] buildPartial];
  } else {
    result.drawData = value;
  }
  result.hasDrawData = YES;
  return self;
}
- (PBFeed_Builder*) clearDrawData {
  result.hasDrawData = NO;
  result.drawData = [PBDraw defaultInstance];
  return self;
}
- (BOOL) hasTargetUserId {
  return result.hasTargetUserId;
}
- (NSString*) targetUserId {
  return result.targetUserId;
}
- (PBFeed_Builder*) setTargetUserId:(NSString*) value {
  result.hasTargetUserId = YES;
  result.targetUserId = value;
  return self;
}
- (PBFeed_Builder*) clearTargetUserId {
  result.hasTargetUserId = NO;
  result.targetUserId = @"";
  return self;
}
- (BOOL) hasTargetUserNickName {
  return result.hasTargetUserNickName;
}
- (NSString*) targetUserNickName {
  return result.targetUserNickName;
}
- (PBFeed_Builder*) setTargetUserNickName:(NSString*) value {
  result.hasTargetUserNickName = YES;
  result.targetUserNickName = value;
  return self;
}
- (PBFeed_Builder*) clearTargetUserNickName {
  result.hasTargetUserNickName = NO;
  result.targetUserNickName = @"";
  return self;
}
- (BOOL) hasHistoryScore {
  return result.hasHistoryScore;
}
- (Float64) historyScore {
  return result.historyScore;
}
- (PBFeed_Builder*) setHistoryScore:(Float64) value {
  result.hasHistoryScore = YES;
  result.historyScore = value;
  return self;
}
- (PBFeed_Builder*) clearHistoryScore {
  result.hasHistoryScore = NO;
  result.historyScore = 0;
  return self;
}
- (BOOL) hasOpusDesc {
  return result.hasOpusDesc;
}
- (NSString*) opusDesc {
  return result.opusDesc;
}
- (PBFeed_Builder*) setOpusDesc:(NSString*) value {
  result.hasOpusDesc = YES;
  result.opusDesc = value;
  return self;
}
- (PBFeed_Builder*) clearOpusDesc {
  result.hasOpusDesc = NO;
  result.opusDesc = @"";
  return self;
}
- (BOOL) hasOpusId {
  return result.hasOpusId;
}
- (NSString*) opusId {
  return result.opusId;
}
- (PBFeed_Builder*) setOpusId:(NSString*) value {
  result.hasOpusId = YES;
  result.opusId = value;
  return self;
}
- (PBFeed_Builder*) clearOpusId {
  result.hasOpusId = NO;
  result.opusId = @"";
  return self;
}
- (BOOL) hasIsCorrect {
  return result.hasIsCorrect;
}
- (BOOL) isCorrect {
  return result.isCorrect;
}
- (PBFeed_Builder*) setIsCorrect:(BOOL) value {
  result.hasIsCorrect = YES;
  result.isCorrect = value;
  return self;
}
- (PBFeed_Builder*) clearIsCorrect {
  result.hasIsCorrect = NO;
  result.isCorrect = NO;
  return self;
}
- (BOOL) hasScore {
  return result.hasScore;
}
- (int32_t) score {
  return result.score;
}
- (PBFeed_Builder*) setScore:(int32_t) value {
  result.hasScore = YES;
  result.score = value;
  return self;
}
- (PBFeed_Builder*) clearScore {
  result.hasScore = NO;
  result.score = 0;
  return self;
}
- (NSArray*) guessWordsList {
  if (result.mutableGuessWordsList == nil) {
    return [NSArray array];
  }
  return result.mutableGuessWordsList;
}
- (NSString*) guessWordsAtIndex:(int32_t) index {
  return [result guessWordsAtIndex:index];
}
- (PBFeed_Builder*) replaceGuessWordsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableGuessWordsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBFeed_Builder*) addGuessWords:(NSString*) value {
  if (result.mutableGuessWordsList == nil) {
    result.mutableGuessWordsList = [NSMutableArray array];
  }
  [result.mutableGuessWordsList addObject:value];
  return self;
}
- (PBFeed_Builder*) addAllGuessWords:(NSArray*) values {
  if (result.mutableGuessWordsList == nil) {
    result.mutableGuessWordsList = [NSMutableArray array];
  }
  [result.mutableGuessWordsList addObjectsFromArray:values];
  return self;
}
- (PBFeed_Builder*) clearGuessWordsList {
  result.mutableGuessWordsList = nil;
  return self;
}
- (BOOL) hasOpusStatus {
  return result.hasOpusStatus;
}
- (int32_t) opusStatus {
  return result.opusStatus;
}
- (PBFeed_Builder*) setOpusStatus:(int32_t) value {
  result.hasOpusStatus = YES;
  result.opusStatus = value;
  return self;
}
- (PBFeed_Builder*) clearOpusStatus {
  result.hasOpusStatus = NO;
  result.opusStatus = 0;
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (PBFeed_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (PBFeed_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCommentInfo {
  return result.hasCommentInfo;
}
- (PBCommentInfo*) commentInfo {
  return result.commentInfo;
}
- (PBFeed_Builder*) setCommentInfo:(PBCommentInfo*) value {
  result.hasCommentInfo = YES;
  result.commentInfo = value;
  return self;
}
- (PBFeed_Builder*) setCommentInfoBuilder:(PBCommentInfo_Builder*) builderForValue {
  return [self setCommentInfo:[builderForValue build]];
}
- (PBFeed_Builder*) mergeCommentInfo:(PBCommentInfo*) value {
  if (result.hasCommentInfo &&
      result.commentInfo != [PBCommentInfo defaultInstance]) {
    result.commentInfo =
      [[[PBCommentInfo builderWithPrototype:result.commentInfo] mergeFrom:value] buildPartial];
  } else {
    result.commentInfo = value;
  }
  result.hasCommentInfo = YES;
  return self;
}
- (PBFeed_Builder*) clearCommentInfo {
  result.hasCommentInfo = NO;
  result.commentInfo = [PBCommentInfo defaultInstance];
  return self;
}
- (BOOL) hasMatchTimes {
  return result.hasMatchTimes;
}
- (int32_t) matchTimes {
  return result.matchTimes;
}
- (PBFeed_Builder*) setMatchTimes:(int32_t) value {
  result.hasMatchTimes = YES;
  result.matchTimes = value;
  return self;
}
- (PBFeed_Builder*) clearMatchTimes {
  result.hasMatchTimes = NO;
  result.matchTimes = 0;
  return self;
}
- (BOOL) hasCorrectTimes {
  return result.hasCorrectTimes;
}
- (int32_t) correctTimes {
  return result.correctTimes;
}
- (PBFeed_Builder*) setCorrectTimes:(int32_t) value {
  result.hasCorrectTimes = YES;
  result.correctTimes = value;
  return self;
}
- (PBFeed_Builder*) clearCorrectTimes {
  result.hasCorrectTimes = NO;
  result.correctTimes = 0;
  return self;
}
- (BOOL) hasGuessTimes {
  return result.hasGuessTimes;
}
- (int32_t) guessTimes {
  return result.guessTimes;
}
- (PBFeed_Builder*) setGuessTimes:(int32_t) value {
  result.hasGuessTimes = YES;
  result.guessTimes = value;
  return self;
}
- (PBFeed_Builder*) clearGuessTimes {
  result.hasGuessTimes = NO;
  result.guessTimes = 0;
  return self;
}
- (BOOL) hasCommentTimes {
  return result.hasCommentTimes;
}
- (int32_t) commentTimes {
  return result.commentTimes;
}
- (PBFeed_Builder*) setCommentTimes:(int32_t) value {
  result.hasCommentTimes = YES;
  result.commentTimes = value;
  return self;
}
- (PBFeed_Builder*) clearCommentTimes {
  result.hasCommentTimes = NO;
  result.commentTimes = 0;
  return self;
}
- (NSArray*) feedTimesList {
  if (result.mutableFeedTimesList == nil) { return [NSArray array]; }
  return result.mutableFeedTimesList;
}
- (PBFeedTimes*) feedTimesAtIndex:(int32_t) index {
  return [result feedTimesAtIndex:index];
}
- (PBFeed_Builder*) replaceFeedTimesAtIndex:(int32_t) index with:(PBFeedTimes*) value {
  [result.mutableFeedTimesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBFeed_Builder*) addAllFeedTimes:(NSArray*) values {
  if (result.mutableFeedTimesList == nil) {
    result.mutableFeedTimesList = [NSMutableArray array];
  }
  [result.mutableFeedTimesList addObjectsFromArray:values];
  return self;
}
- (PBFeed_Builder*) clearFeedTimesList {
  result.mutableFeedTimesList = nil;
  return self;
}
- (PBFeed_Builder*) addFeedTimes:(PBFeedTimes*) value {
  if (result.mutableFeedTimesList == nil) {
    result.mutableFeedTimesList = [NSMutableArray array];
  }
  [result.mutableFeedTimesList addObject:value];
  return self;
}
- (BOOL) hasOpusCreatorUserId {
  return result.hasOpusCreatorUserId;
}
- (NSString*) opusCreatorUserId {
  return result.opusCreatorUserId;
}
- (PBFeed_Builder*) setOpusCreatorUserId:(NSString*) value {
  result.hasOpusCreatorUserId = YES;
  result.opusCreatorUserId = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorUserId {
  result.hasOpusCreatorUserId = NO;
  result.opusCreatorUserId = @"";
  return self;
}
- (BOOL) hasOpusCreatorNickName {
  return result.hasOpusCreatorNickName;
}
- (NSString*) opusCreatorNickName {
  return result.opusCreatorNickName;
}
- (PBFeed_Builder*) setOpusCreatorNickName:(NSString*) value {
  result.hasOpusCreatorNickName = YES;
  result.opusCreatorNickName = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorNickName {
  result.hasOpusCreatorNickName = NO;
  result.opusCreatorNickName = @"";
  return self;
}
- (BOOL) hasOpusCreatorGender {
  return result.hasOpusCreatorGender;
}
- (BOOL) opusCreatorGender {
  return result.opusCreatorGender;
}
- (PBFeed_Builder*) setOpusCreatorGender:(BOOL) value {
  result.hasOpusCreatorGender = YES;
  result.opusCreatorGender = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorGender {
  result.hasOpusCreatorGender = NO;
  result.opusCreatorGender = NO;
  return self;
}
- (BOOL) hasOpusCreatorAvatar {
  return result.hasOpusCreatorAvatar;
}
- (NSString*) opusCreatorAvatar {
  return result.opusCreatorAvatar;
}
- (PBFeed_Builder*) setOpusCreatorAvatar:(NSString*) value {
  result.hasOpusCreatorAvatar = YES;
  result.opusCreatorAvatar = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorAvatar {
  result.hasOpusCreatorAvatar = NO;
  result.opusCreatorAvatar = @"";
  return self;
}
- (BOOL) hasOpusWord {
  return result.hasOpusWord;
}
- (NSString*) opusWord {
  return result.opusWord;
}
- (PBFeed_Builder*) setOpusWord:(NSString*) value {
  result.hasOpusWord = YES;
  result.opusWord = value;
  return self;
}
- (PBFeed_Builder*) clearOpusWord {
  result.hasOpusWord = NO;
  result.opusWord = @"";
  return self;
}
- (BOOL) hasOpusImage {
  return result.hasOpusImage;
}
- (NSString*) opusImage {
  return result.opusImage;
}
- (PBFeed_Builder*) setOpusImage:(NSString*) value {
  result.hasOpusImage = YES;
  result.opusImage = value;
  return self;
}
- (PBFeed_Builder*) clearOpusImage {
  result.hasOpusImage = NO;
  result.opusImage = @"";
  return self;
}
- (BOOL) hasContestId {
  return result.hasContestId;
}
- (NSString*) contestId {
  return result.contestId;
}
- (PBFeed_Builder*) setContestId:(NSString*) value {
  result.hasContestId = YES;
  result.contestId = value;
  return self;
}
- (PBFeed_Builder*) clearContestId {
  result.hasContestId = NO;
  result.contestId = @"";
  return self;
}
- (BOOL) hasContestScore {
  return result.hasContestScore;
}
- (Float64) contestScore {
  return result.contestScore;
}
- (PBFeed_Builder*) setContestScore:(Float64) value {
  result.hasContestScore = YES;
  result.contestScore = value;
  return self;
}
- (PBFeed_Builder*) clearContestScore {
  result.hasContestScore = NO;
  result.contestScore = 0;
  return self;
}
@end

@interface PBPoint ()
@property Float32 x;
@property Float32 y;
@end

@implementation PBPoint

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) value {
  hasX_ = !!value;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) value {
  hasY_ = !!value;
}
@synthesize y;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
  }
  return self;
}
static PBPoint* defaultPBPointInstance = nil;
+ (void) initialize {
  if (self == [PBPoint class]) {
    defaultPBPointInstance = [[PBPoint alloc] init];
  }
}
+ (PBPoint*) defaultInstance {
  return defaultPBPointInstance;
}
- (PBPoint*) defaultInstance {
  return defaultPBPointInstance;
}
- (BOOL) isInitialized {
  if (!self.hasX) {
    return NO;
  }
  if (!self.hasY) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeFloat:1 value:self.x];
  }
  if (self.hasY) {
    [output writeFloat:2 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasX) {
    size += computeFloatSize(1, self.x);
  }
  if (self.hasY) {
    size += computeFloatSize(2, self.y);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBPoint*) parseFromData:(NSData*) data {
  return (PBPoint*)[[[PBPoint builder] mergeFromData:data] build];
}
+ (PBPoint*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPoint*) parseFromInputStream:(NSInputStream*) input {
  return (PBPoint*)[[[PBPoint builder] mergeFromInputStream:input] build];
}
+ (PBPoint*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPoint*)[[[PBPoint builder] mergeFromCodedInputStream:input] build];
}
+ (PBPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoint_Builder*) builder {
  return [[[PBPoint_Builder alloc] init] autorelease];
}
+ (PBPoint_Builder*) builderWithPrototype:(PBPoint*) prototype {
  return [[PBPoint builder] mergeFrom:prototype];
}
- (PBPoint_Builder*) builder {
  return [PBPoint builder];
}
@end

@interface PBPoint_Builder()
@property (retain) PBPoint* result;
@end

@implementation PBPoint_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBPoint alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPoint_Builder*) clear {
  self.result = [[[PBPoint alloc] init] autorelease];
  return self;
}
- (PBPoint_Builder*) clone {
  return [PBPoint builderWithPrototype:result];
}
- (PBPoint*) defaultInstance {
  return [PBPoint defaultInstance];
}
- (PBPoint*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPoint*) buildPartial {
  PBPoint* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBPoint_Builder*) mergeFrom:(PBPoint*) other {
  if (other == [PBPoint defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPoint_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPoint_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setX:[input readFloat]];
        break;
      }
      case 21: {
        [self setY:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return result.hasX;
}
- (Float32) x {
  return result.x;
}
- (PBPoint_Builder*) setX:(Float32) value {
  result.hasX = YES;
  result.x = value;
  return self;
}
- (PBPoint_Builder*) clearX {
  result.hasX = NO;
  result.x = 0;
  return self;
}
- (BOOL) hasY {
  return result.hasY;
}
- (Float32) y {
  return result.y;
}
- (PBPoint_Builder*) setY:(Float32) value {
  result.hasY = YES;
  result.y = value;
  return self;
}
- (PBPoint_Builder*) clearY {
  result.hasY = NO;
  result.y = 0;
  return self;
}
@end

@interface PBColor ()
@property Float32 red;
@property Float32 blue;
@property Float32 green;
@property Float32 alpha;
@end

@implementation PBColor

- (BOOL) hasRed {
  return !!hasRed_;
}
- (void) setHasRed:(BOOL) value {
  hasRed_ = !!value;
}
@synthesize red;
- (BOOL) hasBlue {
  return !!hasBlue_;
}
- (void) setHasBlue:(BOOL) value {
  hasBlue_ = !!value;
}
@synthesize blue;
- (BOOL) hasGreen {
  return !!hasGreen_;
}
- (void) setHasGreen:(BOOL) value {
  hasGreen_ = !!value;
}
@synthesize green;
- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) value {
  hasAlpha_ = !!value;
}
@synthesize alpha;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.red = 0;
    self.blue = 0;
    self.green = 0;
    self.alpha = 0;
  }
  return self;
}
static PBColor* defaultPBColorInstance = nil;
+ (void) initialize {
  if (self == [PBColor class]) {
    defaultPBColorInstance = [[PBColor alloc] init];
  }
}
+ (PBColor*) defaultInstance {
  return defaultPBColorInstance;
}
- (PBColor*) defaultInstance {
  return defaultPBColorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRed) {
    return NO;
  }
  if (!self.hasBlue) {
    return NO;
  }
  if (!self.hasGreen) {
    return NO;
  }
  if (!self.hasAlpha) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRed) {
    [output writeFloat:1 value:self.red];
  }
  if (self.hasBlue) {
    [output writeFloat:2 value:self.blue];
  }
  if (self.hasGreen) {
    [output writeFloat:3 value:self.green];
  }
  if (self.hasAlpha) {
    [output writeFloat:4 value:self.alpha];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRed) {
    size += computeFloatSize(1, self.red);
  }
  if (self.hasBlue) {
    size += computeFloatSize(2, self.blue);
  }
  if (self.hasGreen) {
    size += computeFloatSize(3, self.green);
  }
  if (self.hasAlpha) {
    size += computeFloatSize(4, self.alpha);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBColor*) parseFromData:(NSData*) data {
  return (PBColor*)[[[PBColor builder] mergeFromData:data] build];
}
+ (PBColor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBColor*) parseFromInputStream:(NSInputStream*) input {
  return (PBColor*)[[[PBColor builder] mergeFromInputStream:input] build];
}
+ (PBColor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBColor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBColor*)[[[PBColor builder] mergeFromCodedInputStream:input] build];
}
+ (PBColor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBColor_Builder*) builder {
  return [[[PBColor_Builder alloc] init] autorelease];
}
+ (PBColor_Builder*) builderWithPrototype:(PBColor*) prototype {
  return [[PBColor builder] mergeFrom:prototype];
}
- (PBColor_Builder*) builder {
  return [PBColor builder];
}
@end

@interface PBColor_Builder()
@property (retain) PBColor* result;
@end

@implementation PBColor_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBColor alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBColor_Builder*) clear {
  self.result = [[[PBColor alloc] init] autorelease];
  return self;
}
- (PBColor_Builder*) clone {
  return [PBColor builderWithPrototype:result];
}
- (PBColor*) defaultInstance {
  return [PBColor defaultInstance];
}
- (PBColor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBColor*) buildPartial {
  PBColor* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBColor_Builder*) mergeFrom:(PBColor*) other {
  if (other == [PBColor defaultInstance]) {
    return self;
  }
  if (other.hasRed) {
    [self setRed:other.red];
  }
  if (other.hasBlue) {
    [self setBlue:other.blue];
  }
  if (other.hasGreen) {
    [self setGreen:other.green];
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBColor_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBColor_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setRed:[input readFloat]];
        break;
      }
      case 21: {
        [self setBlue:[input readFloat]];
        break;
      }
      case 29: {
        [self setGreen:[input readFloat]];
        break;
      }
      case 37: {
        [self setAlpha:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasRed {
  return result.hasRed;
}
- (Float32) red {
  return result.red;
}
- (PBColor_Builder*) setRed:(Float32) value {
  result.hasRed = YES;
  result.red = value;
  return self;
}
- (PBColor_Builder*) clearRed {
  result.hasRed = NO;
  result.red = 0;
  return self;
}
- (BOOL) hasBlue {
  return result.hasBlue;
}
- (Float32) blue {
  return result.blue;
}
- (PBColor_Builder*) setBlue:(Float32) value {
  result.hasBlue = YES;
  result.blue = value;
  return self;
}
- (PBColor_Builder*) clearBlue {
  result.hasBlue = NO;
  result.blue = 0;
  return self;
}
- (BOOL) hasGreen {
  return result.hasGreen;
}
- (Float32) green {
  return result.green;
}
- (PBColor_Builder*) setGreen:(Float32) value {
  result.hasGreen = YES;
  result.green = value;
  return self;
}
- (PBColor_Builder*) clearGreen {
  result.hasGreen = NO;
  result.green = 0;
  return self;
}
- (BOOL) hasAlpha {
  return result.hasAlpha;
}
- (Float32) alpha {
  return result.alpha;
}
- (PBColor_Builder*) setAlpha:(Float32) value {
  result.hasAlpha = YES;
  result.alpha = value;
  return self;
}
- (PBColor_Builder*) clearAlpha {
  result.hasAlpha = NO;
  result.alpha = 0;
  return self;
}
@end

@interface PBNoCompressDrawAction ()
@property int32_t type;
@property (retain) NSMutableArray* mutablePointList;
@property (retain) PBColor* color;
@property Float32 width;
@property int32_t penType;
@property int32_t shapeType;
@property (retain) NSMutableArray* mutableRectComponentList;
@property (retain) NSMutableArray* mutablePointXList;
@property (retain) NSMutableArray* mutablePointYList;
@property int32_t rgbColor;
@property Float32 red;
@property Float32 blue;
@property Float32 green;
@property Float32 alpha;
@end

@implementation PBNoCompressDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
@synthesize mutablePointList;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) value {
  hasPenType_ = !!value;
}
@synthesize penType;
- (BOOL) hasShapeType {
  return !!hasShapeType_;
}
- (void) setHasShapeType:(BOOL) value {
  hasShapeType_ = !!value;
}
@synthesize shapeType;
@synthesize mutableRectComponentList;
@synthesize mutablePointXList;
@synthesize mutablePointYList;
- (BOOL) hasRgbColor {
  return !!hasRgbColor_;
}
- (void) setHasRgbColor:(BOOL) value {
  hasRgbColor_ = !!value;
}
@synthesize rgbColor;
- (BOOL) hasRed {
  return !!hasRed_;
}
- (void) setHasRed:(BOOL) value {
  hasRed_ = !!value;
}
@synthesize red;
- (BOOL) hasBlue {
  return !!hasBlue_;
}
- (void) setHasBlue:(BOOL) value {
  hasBlue_ = !!value;
}
@synthesize blue;
- (BOOL) hasGreen {
  return !!hasGreen_;
}
- (void) setHasGreen:(BOOL) value {
  hasGreen_ = !!value;
}
@synthesize green;
- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) value {
  hasAlpha_ = !!value;
}
@synthesize alpha;
- (void) dealloc {
  self.mutablePointList = nil;
  self.color = nil;
  self.mutableRectComponentList = nil;
  self.mutablePointXList = nil;
  self.mutablePointYList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.color = [PBColor defaultInstance];
    self.width = 0;
    self.penType = 0;
    self.shapeType = 0;
    self.rgbColor = 0;
    self.red = 0;
    self.blue = 0;
    self.green = 0;
    self.alpha = 0;
  }
  return self;
}
static PBNoCompressDrawAction* defaultPBNoCompressDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBNoCompressDrawAction class]) {
    defaultPBNoCompressDrawActionInstance = [[PBNoCompressDrawAction alloc] init];
  }
}
+ (PBNoCompressDrawAction*) defaultInstance {
  return defaultPBNoCompressDrawActionInstance;
}
- (PBNoCompressDrawAction*) defaultInstance {
  return defaultPBNoCompressDrawActionInstance;
}
- (NSArray*) pointList {
  return mutablePointList;
}
- (PBPoint*) pointAtIndex:(int32_t) index {
  id value = [mutablePointList objectAtIndex:index];
  return value;
}
- (NSArray*) rectComponentList {
  return mutableRectComponentList;
}
- (Float32) rectComponentAtIndex:(int32_t) index {
  id value = [mutableRectComponentList objectAtIndex:index];
  return [value floatValue];
}
- (NSArray*) pointXList {
  return mutablePointXList;
}
- (Float32) pointXAtIndex:(int32_t) index {
  id value = [mutablePointXList objectAtIndex:index];
  return [value floatValue];
}
- (NSArray*) pointYList {
  return mutablePointYList;
}
- (Float32) pointYAtIndex:(int32_t) index {
  id value = [mutablePointYList objectAtIndex:index];
  return [value floatValue];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  for (PBPoint* element in self.pointList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasColor) {
    if (!self.color.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  for (PBPoint* element in self.pointList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasColor) {
    [output writeMessage:3 value:self.color];
  }
  if (self.hasWidth) {
    [output writeFloat:4 value:self.width];
  }
  if (self.hasPenType) {
    [output writeInt32:5 value:self.penType];
  }
  if (self.hasShapeType) {
    [output writeInt32:6 value:self.shapeType];
  }
  for (NSNumber* value in self.mutableRectComponentList) {
    [output writeFloat:7 value:[value floatValue]];
  }
  for (NSNumber* value in self.mutablePointXList) {
    [output writeFloat:11 value:[value floatValue]];
  }
  for (NSNumber* value in self.mutablePointYList) {
    [output writeFloat:12 value:[value floatValue]];
  }
  if (self.hasRgbColor) {
    [output writeUInt32:20 value:self.rgbColor];
  }
  if (self.hasRed) {
    [output writeFloat:21 value:self.red];
  }
  if (self.hasBlue) {
    [output writeFloat:22 value:self.blue];
  }
  if (self.hasGreen) {
    [output writeFloat:23 value:self.green];
  }
  if (self.hasAlpha) {
    [output writeFloat:24 value:self.alpha];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  for (PBPoint* element in self.pointList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasColor) {
    size += computeMessageSize(3, self.color);
  }
  if (self.hasWidth) {
    size += computeFloatSize(4, self.width);
  }
  if (self.hasPenType) {
    size += computeInt32Size(5, self.penType);
  }
  if (self.hasShapeType) {
    size += computeInt32Size(6, self.shapeType);
  }
  {
    int32_t dataSize = 0;
    dataSize = 4 * self.mutableRectComponentList.count;
    size += dataSize;
    size += 1 * self.mutableRectComponentList.count;
  }
  {
    int32_t dataSize = 0;
    dataSize = 4 * self.mutablePointXList.count;
    size += dataSize;
    size += 1 * self.mutablePointXList.count;
  }
  {
    int32_t dataSize = 0;
    dataSize = 4 * self.mutablePointYList.count;
    size += dataSize;
    size += 1 * self.mutablePointYList.count;
  }
  if (self.hasRgbColor) {
    size += computeUInt32Size(20, self.rgbColor);
  }
  if (self.hasRed) {
    size += computeFloatSize(21, self.red);
  }
  if (self.hasBlue) {
    size += computeFloatSize(22, self.blue);
  }
  if (self.hasGreen) {
    size += computeFloatSize(23, self.green);
  }
  if (self.hasAlpha) {
    size += computeFloatSize(24, self.alpha);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBNoCompressDrawAction*) parseFromData:(NSData*) data {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromData:data] build];
}
+ (PBNoCompressDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBNoCompressDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBNoCompressDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction_Builder*) builder {
  return [[[PBNoCompressDrawAction_Builder alloc] init] autorelease];
}
+ (PBNoCompressDrawAction_Builder*) builderWithPrototype:(PBNoCompressDrawAction*) prototype {
  return [[PBNoCompressDrawAction builder] mergeFrom:prototype];
}
- (PBNoCompressDrawAction_Builder*) builder {
  return [PBNoCompressDrawAction builder];
}
@end

@interface PBNoCompressDrawAction_Builder()
@property (retain) PBNoCompressDrawAction* result;
@end

@implementation PBNoCompressDrawAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBNoCompressDrawAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBNoCompressDrawAction_Builder*) clear {
  self.result = [[[PBNoCompressDrawAction alloc] init] autorelease];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clone {
  return [PBNoCompressDrawAction builderWithPrototype:result];
}
- (PBNoCompressDrawAction*) defaultInstance {
  return [PBNoCompressDrawAction defaultInstance];
}
- (PBNoCompressDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBNoCompressDrawAction*) buildPartial {
  PBNoCompressDrawAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBNoCompressDrawAction_Builder*) mergeFrom:(PBNoCompressDrawAction*) other {
  if (other == [PBNoCompressDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.mutablePointList.count > 0) {
    if (result.mutablePointList == nil) {
      result.mutablePointList = [NSMutableArray array];
    }
    [result.mutablePointList addObjectsFromArray:other.mutablePointList];
  }
  if (other.hasColor) {
    [self mergeColor:other.color];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasShapeType) {
    [self setShapeType:other.shapeType];
  }
  if (other.mutableRectComponentList.count > 0) {
    if (result.mutableRectComponentList == nil) {
      result.mutableRectComponentList = [NSMutableArray array];
    }
    [result.mutableRectComponentList addObjectsFromArray:other.mutableRectComponentList];
  }
  if (other.mutablePointXList.count > 0) {
    if (result.mutablePointXList == nil) {
      result.mutablePointXList = [NSMutableArray array];
    }
    [result.mutablePointXList addObjectsFromArray:other.mutablePointXList];
  }
  if (other.mutablePointYList.count > 0) {
    if (result.mutablePointYList == nil) {
      result.mutablePointYList = [NSMutableArray array];
    }
    [result.mutablePointYList addObjectsFromArray:other.mutablePointYList];
  }
  if (other.hasRgbColor) {
    [self setRgbColor:other.rgbColor];
  }
  if (other.hasRed) {
    [self setRed:other.red];
  }
  if (other.hasBlue) {
    [self setBlue:other.blue];
  }
  if (other.hasGreen) {
    [self setGreen:other.green];
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBNoCompressDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBNoCompressDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        PBPoint_Builder* subBuilder = [PBPoint builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPoint:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBColor_Builder* subBuilder = [PBColor builder];
        if (self.hasColor) {
          [subBuilder mergeFrom:self.color];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setColor:[subBuilder buildPartial]];
        break;
      }
      case 37: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 40: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 48: {
        [self setShapeType:[input readInt32]];
        break;
      }
      case 61: {
        [self addRectComponent:[input readFloat]];
        break;
      }
      case 93: {
        [self addPointX:[input readFloat]];
        break;
      }
      case 101: {
        [self addPointY:[input readFloat]];
        break;
      }
      case 160: {
        [self setRgbColor:[input readUInt32]];
        break;
      }
      case 173: {
        [self setRed:[input readFloat]];
        break;
      }
      case 181: {
        [self setBlue:[input readFloat]];
        break;
      }
      case 189: {
        [self setGreen:[input readFloat]];
        break;
      }
      case 197: {
        [self setAlpha:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBNoCompressDrawAction_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (NSArray*) pointList {
  if (result.mutablePointList == nil) { return [NSArray array]; }
  return result.mutablePointList;
}
- (PBPoint*) pointAtIndex:(int32_t) index {
  return [result pointAtIndex:index];
}
- (PBNoCompressDrawAction_Builder*) replacePointAtIndex:(int32_t) index with:(PBPoint*) value {
  [result.mutablePointList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addAllPoint:(NSArray*) values {
  if (result.mutablePointList == nil) {
    result.mutablePointList = [NSMutableArray array];
  }
  [result.mutablePointList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearPointList {
  result.mutablePointList = nil;
  return self;
}
- (PBNoCompressDrawAction_Builder*) addPoint:(PBPoint*) value {
  if (result.mutablePointList == nil) {
    result.mutablePointList = [NSMutableArray array];
  }
  [result.mutablePointList addObject:value];
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (PBColor*) color {
  return result.color;
}
- (PBNoCompressDrawAction_Builder*) setColor:(PBColor*) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) setColorBuilder:(PBColor_Builder*) builderForValue {
  return [self setColor:[builderForValue build]];
}
- (PBNoCompressDrawAction_Builder*) mergeColor:(PBColor*) value {
  if (result.hasColor &&
      result.color != [PBColor defaultInstance]) {
    result.color =
      [[[PBColor builderWithPrototype:result.color] mergeFrom:value] buildPartial];
  } else {
    result.color = value;
  }
  result.hasColor = YES;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearColor {
  result.hasColor = NO;
  result.color = [PBColor defaultInstance];
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (PBNoCompressDrawAction_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasPenType {
  return result.hasPenType;
}
- (int32_t) penType {
  return result.penType;
}
- (PBNoCompressDrawAction_Builder*) setPenType:(int32_t) value {
  result.hasPenType = YES;
  result.penType = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearPenType {
  result.hasPenType = NO;
  result.penType = 0;
  return self;
}
- (BOOL) hasShapeType {
  return result.hasShapeType;
}
- (int32_t) shapeType {
  return result.shapeType;
}
- (PBNoCompressDrawAction_Builder*) setShapeType:(int32_t) value {
  result.hasShapeType = YES;
  result.shapeType = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearShapeType {
  result.hasShapeType = NO;
  result.shapeType = 0;
  return self;
}
- (NSArray*) rectComponentList {
  if (result.mutableRectComponentList == nil) {
    return [NSArray array];
  }
  return result.mutableRectComponentList;
}
- (Float32) rectComponentAtIndex:(int32_t) index {
  return [result rectComponentAtIndex:index];
}
- (PBNoCompressDrawAction_Builder*) replaceRectComponentAtIndex:(int32_t) index with:(Float32) value {
  [result.mutableRectComponentList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addRectComponent:(Float32) value {
  if (result.mutableRectComponentList == nil) {
    result.mutableRectComponentList = [NSMutableArray array];
  }
  [result.mutableRectComponentList addObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addAllRectComponent:(NSArray*) values {
  if (result.mutableRectComponentList == nil) {
    result.mutableRectComponentList = [NSMutableArray array];
  }
  [result.mutableRectComponentList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearRectComponentList {
  result.mutableRectComponentList = nil;
  return self;
}
- (NSArray*) pointXList {
  if (result.mutablePointXList == nil) {
    return [NSArray array];
  }
  return result.mutablePointXList;
}
- (Float32) pointXAtIndex:(int32_t) index {
  return [result pointXAtIndex:index];
}
- (PBNoCompressDrawAction_Builder*) replacePointXAtIndex:(int32_t) index with:(Float32) value {
  [result.mutablePointXList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addPointX:(Float32) value {
  if (result.mutablePointXList == nil) {
    result.mutablePointXList = [NSMutableArray array];
  }
  [result.mutablePointXList addObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addAllPointX:(NSArray*) values {
  if (result.mutablePointXList == nil) {
    result.mutablePointXList = [NSMutableArray array];
  }
  [result.mutablePointXList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearPointXList {
  result.mutablePointXList = nil;
  return self;
}
- (NSArray*) pointYList {
  if (result.mutablePointYList == nil) {
    return [NSArray array];
  }
  return result.mutablePointYList;
}
- (Float32) pointYAtIndex:(int32_t) index {
  return [result pointYAtIndex:index];
}
- (PBNoCompressDrawAction_Builder*) replacePointYAtIndex:(int32_t) index with:(Float32) value {
  [result.mutablePointYList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addPointY:(Float32) value {
  if (result.mutablePointYList == nil) {
    result.mutablePointYList = [NSMutableArray array];
  }
  [result.mutablePointYList addObject:[NSNumber numberWithFloat:value]];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addAllPointY:(NSArray*) values {
  if (result.mutablePointYList == nil) {
    result.mutablePointYList = [NSMutableArray array];
  }
  [result.mutablePointYList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearPointYList {
  result.mutablePointYList = nil;
  return self;
}
- (BOOL) hasRgbColor {
  return result.hasRgbColor;
}
- (int32_t) rgbColor {
  return result.rgbColor;
}
- (PBNoCompressDrawAction_Builder*) setRgbColor:(int32_t) value {
  result.hasRgbColor = YES;
  result.rgbColor = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearRgbColor {
  result.hasRgbColor = NO;
  result.rgbColor = 0;
  return self;
}
- (BOOL) hasRed {
  return result.hasRed;
}
- (Float32) red {
  return result.red;
}
- (PBNoCompressDrawAction_Builder*) setRed:(Float32) value {
  result.hasRed = YES;
  result.red = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearRed {
  result.hasRed = NO;
  result.red = 0;
  return self;
}
- (BOOL) hasBlue {
  return result.hasBlue;
}
- (Float32) blue {
  return result.blue;
}
- (PBNoCompressDrawAction_Builder*) setBlue:(Float32) value {
  result.hasBlue = YES;
  result.blue = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearBlue {
  result.hasBlue = NO;
  result.blue = 0;
  return self;
}
- (BOOL) hasGreen {
  return result.hasGreen;
}
- (Float32) green {
  return result.green;
}
- (PBNoCompressDrawAction_Builder*) setGreen:(Float32) value {
  result.hasGreen = YES;
  result.green = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearGreen {
  result.hasGreen = NO;
  result.green = 0;
  return self;
}
- (BOOL) hasAlpha {
  return result.hasAlpha;
}
- (Float32) alpha {
  return result.alpha;
}
- (PBNoCompressDrawAction_Builder*) setAlpha:(Float32) value {
  result.hasAlpha = YES;
  result.alpha = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearAlpha {
  result.hasAlpha = NO;
  result.alpha = 0;
  return self;
}
@end

@interface PBNoCompressDrawData ()
@property (retain) NSMutableArray* mutableDrawActionListList;
@property int32_t version;
@property (retain) PBDrawBg* drawBg;
@end

@implementation PBNoCompressDrawData

@synthesize mutableDrawActionListList;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasDrawBg {
  return !!hasDrawBg_;
}
- (void) setHasDrawBg:(BOOL) value {
  hasDrawBg_ = !!value;
}
@synthesize drawBg;
- (void) dealloc {
  self.mutableDrawActionListList = nil;
  self.drawBg = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = 0;
    self.drawBg = [PBDrawBg defaultInstance];
  }
  return self;
}
static PBNoCompressDrawData* defaultPBNoCompressDrawDataInstance = nil;
+ (void) initialize {
  if (self == [PBNoCompressDrawData class]) {
    defaultPBNoCompressDrawDataInstance = [[PBNoCompressDrawData alloc] init];
  }
}
+ (PBNoCompressDrawData*) defaultInstance {
  return defaultPBNoCompressDrawDataInstance;
}
- (PBNoCompressDrawData*) defaultInstance {
  return defaultPBNoCompressDrawDataInstance;
}
- (NSArray*) drawActionListList {
  return mutableDrawActionListList;
}
- (PBNoCompressDrawAction*) drawActionListAtIndex:(int32_t) index {
  id value = [mutableDrawActionListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBNoCompressDrawAction* element in self.drawActionListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasDrawBg) {
    if (!self.drawBg.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBNoCompressDrawAction* element in self.drawActionListList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasVersion) {
    [output writeInt32:2 value:self.version];
  }
  if (self.hasDrawBg) {
    [output writeMessage:3 value:self.drawBg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBNoCompressDrawAction* element in self.drawActionListList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasVersion) {
    size += computeInt32Size(2, self.version);
  }
  if (self.hasDrawBg) {
    size += computeMessageSize(3, self.drawBg);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBNoCompressDrawData*) parseFromData:(NSData*) data {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromData:data] build];
}
+ (PBNoCompressDrawData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData*) parseFromInputStream:(NSInputStream*) input {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromInputStream:input] build];
}
+ (PBNoCompressDrawData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromCodedInputStream:input] build];
}
+ (PBNoCompressDrawData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData_Builder*) builder {
  return [[[PBNoCompressDrawData_Builder alloc] init] autorelease];
}
+ (PBNoCompressDrawData_Builder*) builderWithPrototype:(PBNoCompressDrawData*) prototype {
  return [[PBNoCompressDrawData builder] mergeFrom:prototype];
}
- (PBNoCompressDrawData_Builder*) builder {
  return [PBNoCompressDrawData builder];
}
@end

@interface PBNoCompressDrawData_Builder()
@property (retain) PBNoCompressDrawData* result;
@end

@implementation PBNoCompressDrawData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBNoCompressDrawData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBNoCompressDrawData_Builder*) clear {
  self.result = [[[PBNoCompressDrawData alloc] init] autorelease];
  return self;
}
- (PBNoCompressDrawData_Builder*) clone {
  return [PBNoCompressDrawData builderWithPrototype:result];
}
- (PBNoCompressDrawData*) defaultInstance {
  return [PBNoCompressDrawData defaultInstance];
}
- (PBNoCompressDrawData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBNoCompressDrawData*) buildPartial {
  PBNoCompressDrawData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBNoCompressDrawData_Builder*) mergeFrom:(PBNoCompressDrawData*) other {
  if (other == [PBNoCompressDrawData defaultInstance]) {
    return self;
  }
  if (other.mutableDrawActionListList.count > 0) {
    if (result.mutableDrawActionListList == nil) {
      result.mutableDrawActionListList = [NSMutableArray array];
    }
    [result.mutableDrawActionListList addObjectsFromArray:other.mutableDrawActionListList];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasDrawBg) {
    [self mergeDrawBg:other.drawBg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBNoCompressDrawData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBNoCompressDrawData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBNoCompressDrawAction_Builder* subBuilder = [PBNoCompressDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawActionList:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 26: {
        PBDrawBg_Builder* subBuilder = [PBDrawBg builder];
        if (self.hasDrawBg) {
          [subBuilder mergeFrom:self.drawBg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawBg:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) drawActionListList {
  if (result.mutableDrawActionListList == nil) { return [NSArray array]; }
  return result.mutableDrawActionListList;
}
- (PBNoCompressDrawAction*) drawActionListAtIndex:(int32_t) index {
  return [result drawActionListAtIndex:index];
}
- (PBNoCompressDrawData_Builder*) replaceDrawActionListAtIndex:(int32_t) index with:(PBNoCompressDrawAction*) value {
  [result.mutableDrawActionListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBNoCompressDrawData_Builder*) addAllDrawActionList:(NSArray*) values {
  if (result.mutableDrawActionListList == nil) {
    result.mutableDrawActionListList = [NSMutableArray array];
  }
  [result.mutableDrawActionListList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawData_Builder*) clearDrawActionListList {
  result.mutableDrawActionListList = nil;
  return self;
}
- (PBNoCompressDrawData_Builder*) addDrawActionList:(PBNoCompressDrawAction*) value {
  if (result.mutableDrawActionListList == nil) {
    result.mutableDrawActionListList = [NSMutableArray array];
  }
  [result.mutableDrawActionListList addObject:value];
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (PBNoCompressDrawData_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (PBNoCompressDrawData_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (BOOL) hasDrawBg {
  return result.hasDrawBg;
}
- (PBDrawBg*) drawBg {
  return result.drawBg;
}
- (PBNoCompressDrawData_Builder*) setDrawBg:(PBDrawBg*) value {
  result.hasDrawBg = YES;
  result.drawBg = value;
  return self;
}
- (PBNoCompressDrawData_Builder*) setDrawBgBuilder:(PBDrawBg_Builder*) builderForValue {
  return [self setDrawBg:[builderForValue build]];
}
- (PBNoCompressDrawData_Builder*) mergeDrawBg:(PBDrawBg*) value {
  if (result.hasDrawBg &&
      result.drawBg != [PBDrawBg defaultInstance]) {
    result.drawBg =
      [[[PBDrawBg builderWithPrototype:result.drawBg] mergeFrom:value] buildPartial];
  } else {
    result.drawBg = value;
  }
  result.hasDrawBg = YES;
  return self;
}
- (PBNoCompressDrawData_Builder*) clearDrawBg {
  result.hasDrawBg = NO;
  result.drawBg = [PBDrawBg defaultInstance];
  return self;
}
@end

@interface PBDrawBg ()
@property (retain) NSString* bgId;
@property (retain) NSString* localUrl;
@property (retain) NSString* remoteUrl;
@end

@implementation PBDrawBg

- (BOOL) hasBgId {
  return !!hasBgId_;
}
- (void) setHasBgId:(BOOL) value {
  hasBgId_ = !!value;
}
@synthesize bgId;
- (BOOL) hasLocalUrl {
  return !!hasLocalUrl_;
}
- (void) setHasLocalUrl:(BOOL) value {
  hasLocalUrl_ = !!value;
}
@synthesize localUrl;
- (BOOL) hasRemoteUrl {
  return !!hasRemoteUrl_;
}
- (void) setHasRemoteUrl:(BOOL) value {
  hasRemoteUrl_ = !!value;
}
@synthesize remoteUrl;
- (void) dealloc {
  self.bgId = nil;
  self.localUrl = nil;
  self.remoteUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.bgId = @"";
    self.localUrl = @"";
    self.remoteUrl = @"";
  }
  return self;
}
static PBDrawBg* defaultPBDrawBgInstance = nil;
+ (void) initialize {
  if (self == [PBDrawBg class]) {
    defaultPBDrawBgInstance = [[PBDrawBg alloc] init];
  }
}
+ (PBDrawBg*) defaultInstance {
  return defaultPBDrawBgInstance;
}
- (PBDrawBg*) defaultInstance {
  return defaultPBDrawBgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBgId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBgId) {
    [output writeString:1 value:self.bgId];
  }
  if (self.hasLocalUrl) {
    [output writeString:2 value:self.localUrl];
  }
  if (self.hasRemoteUrl) {
    [output writeString:3 value:self.remoteUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBgId) {
    size += computeStringSize(1, self.bgId);
  }
  if (self.hasLocalUrl) {
    size += computeStringSize(2, self.localUrl);
  }
  if (self.hasRemoteUrl) {
    size += computeStringSize(3, self.remoteUrl);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDrawBg*) parseFromData:(NSData*) data {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromData:data] build];
}
+ (PBDrawBg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBg*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromInputStream:input] build];
}
+ (PBDrawBg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawBg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBg*)[[[PBDrawBg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBg_Builder*) builder {
  return [[[PBDrawBg_Builder alloc] init] autorelease];
}
+ (PBDrawBg_Builder*) builderWithPrototype:(PBDrawBg*) prototype {
  return [[PBDrawBg builder] mergeFrom:prototype];
}
- (PBDrawBg_Builder*) builder {
  return [PBDrawBg builder];
}
@end

@interface PBDrawBg_Builder()
@property (retain) PBDrawBg* result;
@end

@implementation PBDrawBg_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDrawBg alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDrawBg_Builder*) clear {
  self.result = [[[PBDrawBg alloc] init] autorelease];
  return self;
}
- (PBDrawBg_Builder*) clone {
  return [PBDrawBg builderWithPrototype:result];
}
- (PBDrawBg*) defaultInstance {
  return [PBDrawBg defaultInstance];
}
- (PBDrawBg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawBg*) buildPartial {
  PBDrawBg* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDrawBg_Builder*) mergeFrom:(PBDrawBg*) other {
  if (other == [PBDrawBg defaultInstance]) {
    return self;
  }
  if (other.hasBgId) {
    [self setBgId:other.bgId];
  }
  if (other.hasLocalUrl) {
    [self setLocalUrl:other.localUrl];
  }
  if (other.hasRemoteUrl) {
    [self setRemoteUrl:other.remoteUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawBg_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawBg_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBgId:[input readString]];
        break;
      }
      case 18: {
        [self setLocalUrl:[input readString]];
        break;
      }
      case 26: {
        [self setRemoteUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBgId {
  return result.hasBgId;
}
- (NSString*) bgId {
  return result.bgId;
}
- (PBDrawBg_Builder*) setBgId:(NSString*) value {
  result.hasBgId = YES;
  result.bgId = value;
  return self;
}
- (PBDrawBg_Builder*) clearBgId {
  result.hasBgId = NO;
  result.bgId = @"";
  return self;
}
- (BOOL) hasLocalUrl {
  return result.hasLocalUrl;
}
- (NSString*) localUrl {
  return result.localUrl;
}
- (PBDrawBg_Builder*) setLocalUrl:(NSString*) value {
  result.hasLocalUrl = YES;
  result.localUrl = value;
  return self;
}
- (PBDrawBg_Builder*) clearLocalUrl {
  result.hasLocalUrl = NO;
  result.localUrl = @"";
  return self;
}
- (BOOL) hasRemoteUrl {
  return result.hasRemoteUrl;
}
- (NSString*) remoteUrl {
  return result.remoteUrl;
}
- (PBDrawBg_Builder*) setRemoteUrl:(NSString*) value {
  result.hasRemoteUrl = YES;
  result.remoteUrl = value;
  return self;
}
- (PBDrawBg_Builder*) clearRemoteUrl {
  result.hasRemoteUrl = NO;
  result.remoteUrl = @"";
  return self;
}
@end

@interface PBDrawBgList ()
@property (retain) NSMutableArray* mutableDrawBgsList;
@end

@implementation PBDrawBgList

@synthesize mutableDrawBgsList;
- (void) dealloc {
  self.mutableDrawBgsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBDrawBgList* defaultPBDrawBgListInstance = nil;
+ (void) initialize {
  if (self == [PBDrawBgList class]) {
    defaultPBDrawBgListInstance = [[PBDrawBgList alloc] init];
  }
}
+ (PBDrawBgList*) defaultInstance {
  return defaultPBDrawBgListInstance;
}
- (PBDrawBgList*) defaultInstance {
  return defaultPBDrawBgListInstance;
}
- (NSArray*) drawBgsList {
  return mutableDrawBgsList;
}
- (PBDrawBg*) drawBgsAtIndex:(int32_t) index {
  id value = [mutableDrawBgsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBDrawBg* element in self.drawBgsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBDrawBg* element in self.drawBgsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBDrawBg* element in self.drawBgsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDrawBgList*) parseFromData:(NSData*) data {
  return (PBDrawBgList*)[[[PBDrawBgList builder] mergeFromData:data] build];
}
+ (PBDrawBgList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgList*)[[[PBDrawBgList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgList*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawBgList*)[[[PBDrawBgList builder] mergeFromInputStream:input] build];
}
+ (PBDrawBgList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgList*)[[[PBDrawBgList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawBgList*)[[[PBDrawBgList builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawBgList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgList*)[[[PBDrawBgList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgList_Builder*) builder {
  return [[[PBDrawBgList_Builder alloc] init] autorelease];
}
+ (PBDrawBgList_Builder*) builderWithPrototype:(PBDrawBgList*) prototype {
  return [[PBDrawBgList builder] mergeFrom:prototype];
}
- (PBDrawBgList_Builder*) builder {
  return [PBDrawBgList builder];
}
@end

@interface PBDrawBgList_Builder()
@property (retain) PBDrawBgList* result;
@end

@implementation PBDrawBgList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDrawBgList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDrawBgList_Builder*) clear {
  self.result = [[[PBDrawBgList alloc] init] autorelease];
  return self;
}
- (PBDrawBgList_Builder*) clone {
  return [PBDrawBgList builderWithPrototype:result];
}
- (PBDrawBgList*) defaultInstance {
  return [PBDrawBgList defaultInstance];
}
- (PBDrawBgList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawBgList*) buildPartial {
  PBDrawBgList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDrawBgList_Builder*) mergeFrom:(PBDrawBgList*) other {
  if (other == [PBDrawBgList defaultInstance]) {
    return self;
  }
  if (other.mutableDrawBgsList.count > 0) {
    if (result.mutableDrawBgsList == nil) {
      result.mutableDrawBgsList = [NSMutableArray array];
    }
    [result.mutableDrawBgsList addObjectsFromArray:other.mutableDrawBgsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawBgList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawBgList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBDrawBg_Builder* subBuilder = [PBDrawBg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawBgs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) drawBgsList {
  if (result.mutableDrawBgsList == nil) { return [NSArray array]; }
  return result.mutableDrawBgsList;
}
- (PBDrawBg*) drawBgsAtIndex:(int32_t) index {
  return [result drawBgsAtIndex:index];
}
- (PBDrawBgList_Builder*) replaceDrawBgsAtIndex:(int32_t) index with:(PBDrawBg*) value {
  [result.mutableDrawBgsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBDrawBgList_Builder*) addAllDrawBgs:(NSArray*) values {
  if (result.mutableDrawBgsList == nil) {
    result.mutableDrawBgsList = [NSMutableArray array];
  }
  [result.mutableDrawBgsList addObjectsFromArray:values];
  return self;
}
- (PBDrawBgList_Builder*) clearDrawBgsList {
  result.mutableDrawBgsList = nil;
  return self;
}
- (PBDrawBgList_Builder*) addDrawBgs:(PBDrawBg*) value {
  if (result.mutableDrawBgsList == nil) {
    result.mutableDrawBgsList = [NSMutableArray array];
  }
  [result.mutableDrawBgsList addObject:value];
  return self;
}
@end

@interface PBHotWord ()
@property (retain) NSString* wordId;
@property (retain) NSString* word;
@property int32_t coins;
@property (retain) NSString* source;
@end

@implementation PBHotWord

- (BOOL) hasWordId {
  return !!hasWordId_;
}
- (void) setHasWordId:(BOOL) value {
  hasWordId_ = !!value;
}
@synthesize wordId;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasCoins {
  return !!hasCoins_;
}
- (void) setHasCoins:(BOOL) value {
  hasCoins_ = !!value;
}
@synthesize coins;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value {
  hasSource_ = !!value;
}
@synthesize source;
- (void) dealloc {
  self.wordId = nil;
  self.word = nil;
  self.source = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.wordId = @"";
    self.word = @"";
    self.coins = 0;
    self.source = @"";
  }
  return self;
}
static PBHotWord* defaultPBHotWordInstance = nil;
+ (void) initialize {
  if (self == [PBHotWord class]) {
    defaultPBHotWordInstance = [[PBHotWord alloc] init];
  }
}
+ (PBHotWord*) defaultInstance {
  return defaultPBHotWordInstance;
}
- (PBHotWord*) defaultInstance {
  return defaultPBHotWordInstance;
}
- (BOOL) isInitialized {
  if (!self.hasWordId) {
    return NO;
  }
  if (!self.hasWord) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWordId) {
    [output writeString:1 value:self.wordId];
  }
  if (self.hasWord) {
    [output writeString:2 value:self.word];
  }
  if (self.hasCoins) {
    [output writeInt32:3 value:self.coins];
  }
  if (self.hasSource) {
    [output writeString:10 value:self.source];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasWordId) {
    size += computeStringSize(1, self.wordId);
  }
  if (self.hasWord) {
    size += computeStringSize(2, self.word);
  }
  if (self.hasCoins) {
    size += computeInt32Size(3, self.coins);
  }
  if (self.hasSource) {
    size += computeStringSize(10, self.source);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBHotWord*) parseFromData:(NSData*) data {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromData:data] build];
}
+ (PBHotWord*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBHotWord*) parseFromInputStream:(NSInputStream*) input {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromInputStream:input] build];
}
+ (PBHotWord*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWord*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromCodedInputStream:input] build];
}
+ (PBHotWord*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWord_Builder*) builder {
  return [[[PBHotWord_Builder alloc] init] autorelease];
}
+ (PBHotWord_Builder*) builderWithPrototype:(PBHotWord*) prototype {
  return [[PBHotWord builder] mergeFrom:prototype];
}
- (PBHotWord_Builder*) builder {
  return [PBHotWord builder];
}
@end

@interface PBHotWord_Builder()
@property (retain) PBHotWord* result;
@end

@implementation PBHotWord_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBHotWord alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBHotWord_Builder*) clear {
  self.result = [[[PBHotWord alloc] init] autorelease];
  return self;
}
- (PBHotWord_Builder*) clone {
  return [PBHotWord builderWithPrototype:result];
}
- (PBHotWord*) defaultInstance {
  return [PBHotWord defaultInstance];
}
- (PBHotWord*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBHotWord*) buildPartial {
  PBHotWord* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBHotWord_Builder*) mergeFrom:(PBHotWord*) other {
  if (other == [PBHotWord defaultInstance]) {
    return self;
  }
  if (other.hasWordId) {
    [self setWordId:other.wordId];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasCoins) {
    [self setCoins:other.coins];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBHotWord_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBHotWord_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setWordId:[input readString]];
        break;
      }
      case 18: {
        [self setWord:[input readString]];
        break;
      }
      case 24: {
        [self setCoins:[input readInt32]];
        break;
      }
      case 82: {
        [self setSource:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasWordId {
  return result.hasWordId;
}
- (NSString*) wordId {
  return result.wordId;
}
- (PBHotWord_Builder*) setWordId:(NSString*) value {
  result.hasWordId = YES;
  result.wordId = value;
  return self;
}
- (PBHotWord_Builder*) clearWordId {
  result.hasWordId = NO;
  result.wordId = @"";
  return self;
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (PBHotWord_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (PBHotWord_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasCoins {
  return result.hasCoins;
}
- (int32_t) coins {
  return result.coins;
}
- (PBHotWord_Builder*) setCoins:(int32_t) value {
  result.hasCoins = YES;
  result.coins = value;
  return self;
}
- (PBHotWord_Builder*) clearCoins {
  result.hasCoins = NO;
  result.coins = 0;
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (NSString*) source {
  return result.source;
}
- (PBHotWord_Builder*) setSource:(NSString*) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (PBHotWord_Builder*) clearSource {
  result.hasSource = NO;
  result.source = @"";
  return self;
}
@end

@interface PBHotWordList ()
@property (retain) NSMutableArray* mutableWordsList;
@end

@implementation PBHotWordList

@synthesize mutableWordsList;
- (void) dealloc {
  self.mutableWordsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBHotWordList* defaultPBHotWordListInstance = nil;
+ (void) initialize {
  if (self == [PBHotWordList class]) {
    defaultPBHotWordListInstance = [[PBHotWordList alloc] init];
  }
}
+ (PBHotWordList*) defaultInstance {
  return defaultPBHotWordListInstance;
}
- (PBHotWordList*) defaultInstance {
  return defaultPBHotWordListInstance;
}
- (NSArray*) wordsList {
  return mutableWordsList;
}
- (PBHotWord*) wordsAtIndex:(int32_t) index {
  id value = [mutableWordsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBHotWord* element in self.wordsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBHotWord* element in self.wordsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBHotWord* element in self.wordsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBHotWordList*) parseFromData:(NSData*) data {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromData:data] build];
}
+ (PBHotWordList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordList*) parseFromInputStream:(NSInputStream*) input {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromInputStream:input] build];
}
+ (PBHotWordList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromCodedInputStream:input] build];
}
+ (PBHotWordList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordList_Builder*) builder {
  return [[[PBHotWordList_Builder alloc] init] autorelease];
}
+ (PBHotWordList_Builder*) builderWithPrototype:(PBHotWordList*) prototype {
  return [[PBHotWordList builder] mergeFrom:prototype];
}
- (PBHotWordList_Builder*) builder {
  return [PBHotWordList builder];
}
@end

@interface PBHotWordList_Builder()
@property (retain) PBHotWordList* result;
@end

@implementation PBHotWordList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBHotWordList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBHotWordList_Builder*) clear {
  self.result = [[[PBHotWordList alloc] init] autorelease];
  return self;
}
- (PBHotWordList_Builder*) clone {
  return [PBHotWordList builderWithPrototype:result];
}
- (PBHotWordList*) defaultInstance {
  return [PBHotWordList defaultInstance];
}
- (PBHotWordList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBHotWordList*) buildPartial {
  PBHotWordList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBHotWordList_Builder*) mergeFrom:(PBHotWordList*) other {
  if (other == [PBHotWordList defaultInstance]) {
    return self;
  }
  if (other.mutableWordsList.count > 0) {
    if (result.mutableWordsList == nil) {
      result.mutableWordsList = [NSMutableArray array];
    }
    [result.mutableWordsList addObjectsFromArray:other.mutableWordsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBHotWordList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBHotWordList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBHotWord_Builder* subBuilder = [PBHotWord builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWords:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) wordsList {
  if (result.mutableWordsList == nil) { return [NSArray array]; }
  return result.mutableWordsList;
}
- (PBHotWord*) wordsAtIndex:(int32_t) index {
  return [result wordsAtIndex:index];
}
- (PBHotWordList_Builder*) replaceWordsAtIndex:(int32_t) index with:(PBHotWord*) value {
  [result.mutableWordsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBHotWordList_Builder*) addAllWords:(NSArray*) values {
  if (result.mutableWordsList == nil) {
    result.mutableWordsList = [NSMutableArray array];
  }
  [result.mutableWordsList addObjectsFromArray:values];
  return self;
}
- (PBHotWordList_Builder*) clearWordsList {
  result.mutableWordsList = nil;
  return self;
}
- (PBHotWordList_Builder*) addWords:(PBHotWord*) value {
  if (result.mutableWordsList == nil) {
    result.mutableWordsList = [NSMutableArray array];
  }
  [result.mutableWordsList addObject:value];
  return self;
}
@end

@interface PBWallOpus ()
@property int32_t idOnWall;
@property (retain) PBFeed* opus;
@property (retain) PBFrame* frame;
@end

@implementation PBWallOpus

- (BOOL) hasIdOnWall {
  return !!hasIdOnWall_;
}
- (void) setHasIdOnWall:(BOOL) value {
  hasIdOnWall_ = !!value;
}
@synthesize idOnWall;
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) value {
  hasOpus_ = !!value;
}
@synthesize opus;
- (BOOL) hasFrame {
  return !!hasFrame_;
}
- (void) setHasFrame:(BOOL) value {
  hasFrame_ = !!value;
}
@synthesize frame;
- (void) dealloc {
  self.opus = nil;
  self.frame = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.idOnWall = 0;
    self.opus = [PBFeed defaultInstance];
    self.frame = [PBFrame defaultInstance];
  }
  return self;
}
static PBWallOpus* defaultPBWallOpusInstance = nil;
+ (void) initialize {
  if (self == [PBWallOpus class]) {
    defaultPBWallOpusInstance = [[PBWallOpus alloc] init];
  }
}
+ (PBWallOpus*) defaultInstance {
  return defaultPBWallOpusInstance;
}
- (PBWallOpus*) defaultInstance {
  return defaultPBWallOpusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIdOnWall) {
    return NO;
  }
  if (self.hasOpus) {
    if (!self.opus.isInitialized) {
      return NO;
    }
  }
  if (self.hasFrame) {
    if (!self.frame.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIdOnWall) {
    [output writeInt32:1 value:self.idOnWall];
  }
  if (self.hasOpus) {
    [output writeMessage:2 value:self.opus];
  }
  if (self.hasFrame) {
    [output writeMessage:3 value:self.frame];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasIdOnWall) {
    size += computeInt32Size(1, self.idOnWall);
  }
  if (self.hasOpus) {
    size += computeMessageSize(2, self.opus);
  }
  if (self.hasFrame) {
    size += computeMessageSize(3, self.frame);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBWallOpus*) parseFromData:(NSData*) data {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromData:data] build];
}
+ (PBWallOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWallOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromInputStream:input] build];
}
+ (PBWallOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWallOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBWallOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWallOpus_Builder*) builder {
  return [[[PBWallOpus_Builder alloc] init] autorelease];
}
+ (PBWallOpus_Builder*) builderWithPrototype:(PBWallOpus*) prototype {
  return [[PBWallOpus builder] mergeFrom:prototype];
}
- (PBWallOpus_Builder*) builder {
  return [PBWallOpus builder];
}
@end

@interface PBWallOpus_Builder()
@property (retain) PBWallOpus* result;
@end

@implementation PBWallOpus_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBWallOpus alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWallOpus_Builder*) clear {
  self.result = [[[PBWallOpus alloc] init] autorelease];
  return self;
}
- (PBWallOpus_Builder*) clone {
  return [PBWallOpus builderWithPrototype:result];
}
- (PBWallOpus*) defaultInstance {
  return [PBWallOpus defaultInstance];
}
- (PBWallOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWallOpus*) buildPartial {
  PBWallOpus* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBWallOpus_Builder*) mergeFrom:(PBWallOpus*) other {
  if (other == [PBWallOpus defaultInstance]) {
    return self;
  }
  if (other.hasIdOnWall) {
    [self setIdOnWall:other.idOnWall];
  }
  if (other.hasOpus) {
    [self mergeOpus:other.opus];
  }
  if (other.hasFrame) {
    [self mergeFrame:other.frame];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWallOpus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWallOpus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIdOnWall:[input readInt32]];
        break;
      }
      case 18: {
        PBFeed_Builder* subBuilder = [PBFeed builder];
        if (self.hasOpus) {
          [subBuilder mergeFrom:self.opus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpus:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBFrame_Builder* subBuilder = [PBFrame builder];
        if (self.hasFrame) {
          [subBuilder mergeFrom:self.frame];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFrame:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasIdOnWall {
  return result.hasIdOnWall;
}
- (int32_t) idOnWall {
  return result.idOnWall;
}
- (PBWallOpus_Builder*) setIdOnWall:(int32_t) value {
  result.hasIdOnWall = YES;
  result.idOnWall = value;
  return self;
}
- (PBWallOpus_Builder*) clearIdOnWall {
  result.hasIdOnWall = NO;
  result.idOnWall = 0;
  return self;
}
- (BOOL) hasOpus {
  return result.hasOpus;
}
- (PBFeed*) opus {
  return result.opus;
}
- (PBWallOpus_Builder*) setOpus:(PBFeed*) value {
  result.hasOpus = YES;
  result.opus = value;
  return self;
}
- (PBWallOpus_Builder*) setOpusBuilder:(PBFeed_Builder*) builderForValue {
  return [self setOpus:[builderForValue build]];
}
- (PBWallOpus_Builder*) mergeOpus:(PBFeed*) value {
  if (result.hasOpus &&
      result.opus != [PBFeed defaultInstance]) {
    result.opus =
      [[[PBFeed builderWithPrototype:result.opus] mergeFrom:value] buildPartial];
  } else {
    result.opus = value;
  }
  result.hasOpus = YES;
  return self;
}
- (PBWallOpus_Builder*) clearOpus {
  result.hasOpus = NO;
  result.opus = [PBFeed defaultInstance];
  return self;
}
- (BOOL) hasFrame {
  return result.hasFrame;
}
- (PBFrame*) frame {
  return result.frame;
}
- (PBWallOpus_Builder*) setFrame:(PBFrame*) value {
  result.hasFrame = YES;
  result.frame = value;
  return self;
}
- (PBWallOpus_Builder*) setFrameBuilder:(PBFrame_Builder*) builderForValue {
  return [self setFrame:[builderForValue build]];
}
- (PBWallOpus_Builder*) mergeFrame:(PBFrame*) value {
  if (result.hasFrame &&
      result.frame != [PBFrame defaultInstance]) {
    result.frame =
      [[[PBFrame builderWithPrototype:result.frame] mergeFrom:value] buildPartial];
  } else {
    result.frame = value;
  }
  result.hasFrame = YES;
  return self;
}
- (PBWallOpus_Builder*) clearFrame {
  result.hasFrame = NO;
  result.frame = [PBFrame defaultInstance];
  return self;
}
@end

@interface PBWall ()
@property (retain) NSString* wallId;
@property PBWallType type;
@property (retain) NSString* userId;
@property (retain) NSString* name;
@property (retain) PBLayout* content;
@property (retain) NSString* musicUrl;
@end

@implementation PBWall

- (BOOL) hasWallId {
  return !!hasWallId_;
}
- (void) setHasWallId:(BOOL) value {
  hasWallId_ = !!value;
}
@synthesize wallId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasMusicUrl {
  return !!hasMusicUrl_;
}
- (void) setHasMusicUrl:(BOOL) value {
  hasMusicUrl_ = !!value;
}
@synthesize musicUrl;
- (void) dealloc {
  self.wallId = nil;
  self.userId = nil;
  self.name = nil;
  self.content = nil;
  self.musicUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.wallId = @"";
    self.type = PBWallTypeOpuses;
    self.userId = @"";
    self.name = @"";
    self.content = [PBLayout defaultInstance];
    self.musicUrl = @"";
  }
  return self;
}
static PBWall* defaultPBWallInstance = nil;
+ (void) initialize {
  if (self == [PBWall class]) {
    defaultPBWallInstance = [[PBWall alloc] init];
  }
}
+ (PBWall*) defaultInstance {
  return defaultPBWallInstance;
}
- (PBWall*) defaultInstance {
  return defaultPBWallInstance;
}
- (BOOL) isInitialized {
  if (!self.hasWallId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (self.hasContent) {
    if (!self.content.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWallId) {
    [output writeString:1 value:self.wallId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  if (self.hasName) {
    [output writeString:6 value:self.name];
  }
  if (self.hasContent) {
    [output writeMessage:7 value:self.content];
  }
  if (self.hasMusicUrl) {
    [output writeString:10 value:self.musicUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasWallId) {
    size += computeStringSize(1, self.wallId);
  }
  if (self.hasType) {
    size += computeEnumSize(2, self.type);
  }
  if (self.hasUserId) {
    size += computeStringSize(3, self.userId);
  }
  if (self.hasName) {
    size += computeStringSize(6, self.name);
  }
  if (self.hasContent) {
    size += computeMessageSize(7, self.content);
  }
  if (self.hasMusicUrl) {
    size += computeStringSize(10, self.musicUrl);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBWall*) parseFromData:(NSData*) data {
  return (PBWall*)[[[PBWall builder] mergeFromData:data] build];
}
+ (PBWall*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWall*)[[[PBWall builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWall*) parseFromInputStream:(NSInputStream*) input {
  return (PBWall*)[[[PBWall builder] mergeFromInputStream:input] build];
}
+ (PBWall*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWall*)[[[PBWall builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWall*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWall*)[[[PBWall builder] mergeFromCodedInputStream:input] build];
}
+ (PBWall*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWall*)[[[PBWall builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWall_Builder*) builder {
  return [[[PBWall_Builder alloc] init] autorelease];
}
+ (PBWall_Builder*) builderWithPrototype:(PBWall*) prototype {
  return [[PBWall builder] mergeFrom:prototype];
}
- (PBWall_Builder*) builder {
  return [PBWall builder];
}
@end

@interface PBWall_Builder()
@property (retain) PBWall* result;
@end

@implementation PBWall_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBWall alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWall_Builder*) clear {
  self.result = [[[PBWall alloc] init] autorelease];
  return self;
}
- (PBWall_Builder*) clone {
  return [PBWall builderWithPrototype:result];
}
- (PBWall*) defaultInstance {
  return [PBWall defaultInstance];
}
- (PBWall*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWall*) buildPartial {
  PBWall* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBWall_Builder*) mergeFrom:(PBWall*) other {
  if (other == [PBWall defaultInstance]) {
    return self;
  }
  if (other.hasWallId) {
    [self setWallId:other.wallId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasContent) {
    [self mergeContent:other.content];
  }
  if (other.hasMusicUrl) {
    [self setMusicUrl:other.musicUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWall_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWall_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setWallId:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (PBWallTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
      case 50: {
        [self setName:[input readString]];
        break;
      }
      case 58: {
        PBLayout_Builder* subBuilder = [PBLayout builder];
        if (self.hasContent) {
          [subBuilder mergeFrom:self.content];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContent:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        [self setMusicUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasWallId {
  return result.hasWallId;
}
- (NSString*) wallId {
  return result.wallId;
}
- (PBWall_Builder*) setWallId:(NSString*) value {
  result.hasWallId = YES;
  result.wallId = value;
  return self;
}
- (PBWall_Builder*) clearWallId {
  result.hasWallId = NO;
  result.wallId = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBWallType) type {
  return result.type;
}
- (PBWall_Builder*) setType:(PBWallType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBWall_Builder*) clearType {
  result.hasType = NO;
  result.type = PBWallTypeOpuses;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBWall_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBWall_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBWall_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBWall_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (PBLayout*) content {
  return result.content;
}
- (PBWall_Builder*) setContent:(PBLayout*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (PBWall_Builder*) setContentBuilder:(PBLayout_Builder*) builderForValue {
  return [self setContent:[builderForValue build]];
}
- (PBWall_Builder*) mergeContent:(PBLayout*) value {
  if (result.hasContent &&
      result.content != [PBLayout defaultInstance]) {
    result.content =
      [[[PBLayout builderWithPrototype:result.content] mergeFrom:value] buildPartial];
  } else {
    result.content = value;
  }
  result.hasContent = YES;
  return self;
}
- (PBWall_Builder*) clearContent {
  result.hasContent = NO;
  result.content = [PBLayout defaultInstance];
  return self;
}
- (BOOL) hasMusicUrl {
  return result.hasMusicUrl;
}
- (NSString*) musicUrl {
  return result.musicUrl;
}
- (PBWall_Builder*) setMusicUrl:(NSString*) value {
  result.hasMusicUrl = YES;
  result.musicUrl = value;
  return self;
}
- (PBWall_Builder*) clearMusicUrl {
  result.hasMusicUrl = NO;
  result.musicUrl = @"";
  return self;
}
@end

@interface PBRect ()
@property int32_t x;
@property int32_t y;
@property int32_t width;
@property int32_t height;
@end

@implementation PBRect

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) value {
  hasX_ = !!value;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) value {
  hasY_ = !!value;
}
@synthesize y;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) value {
  hasHeight_ = !!value;
}
@synthesize height;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static PBRect* defaultPBRectInstance = nil;
+ (void) initialize {
  if (self == [PBRect class]) {
    defaultPBRectInstance = [[PBRect alloc] init];
  }
}
+ (PBRect*) defaultInstance {
  return defaultPBRectInstance;
}
- (PBRect*) defaultInstance {
  return defaultPBRectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeInt32:11 value:self.x];
  }
  if (self.hasY) {
    [output writeInt32:12 value:self.y];
  }
  if (self.hasWidth) {
    [output writeInt32:13 value:self.width];
  }
  if (self.hasHeight) {
    [output writeInt32:14 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasX) {
    size += computeInt32Size(11, self.x);
  }
  if (self.hasY) {
    size += computeInt32Size(12, self.y);
  }
  if (self.hasWidth) {
    size += computeInt32Size(13, self.width);
  }
  if (self.hasHeight) {
    size += computeInt32Size(14, self.height);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBRect*) parseFromData:(NSData*) data {
  return (PBRect*)[[[PBRect builder] mergeFromData:data] build];
}
+ (PBRect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRect*)[[[PBRect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRect*) parseFromInputStream:(NSInputStream*) input {
  return (PBRect*)[[[PBRect builder] mergeFromInputStream:input] build];
}
+ (PBRect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRect*)[[[PBRect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRect*)[[[PBRect builder] mergeFromCodedInputStream:input] build];
}
+ (PBRect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRect*)[[[PBRect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRect_Builder*) builder {
  return [[[PBRect_Builder alloc] init] autorelease];
}
+ (PBRect_Builder*) builderWithPrototype:(PBRect*) prototype {
  return [[PBRect builder] mergeFrom:prototype];
}
- (PBRect_Builder*) builder {
  return [PBRect builder];
}
@end

@interface PBRect_Builder()
@property (retain) PBRect* result;
@end

@implementation PBRect_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBRect alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRect_Builder*) clear {
  self.result = [[[PBRect alloc] init] autorelease];
  return self;
}
- (PBRect_Builder*) clone {
  return [PBRect builderWithPrototype:result];
}
- (PBRect*) defaultInstance {
  return [PBRect defaultInstance];
}
- (PBRect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRect*) buildPartial {
  PBRect* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBRect_Builder*) mergeFrom:(PBRect*) other {
  if (other == [PBRect defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 88: {
        [self setX:[input readInt32]];
        break;
      }
      case 96: {
        [self setY:[input readInt32]];
        break;
      }
      case 104: {
        [self setWidth:[input readInt32]];
        break;
      }
      case 112: {
        [self setHeight:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return result.hasX;
}
- (int32_t) x {
  return result.x;
}
- (PBRect_Builder*) setX:(int32_t) value {
  result.hasX = YES;
  result.x = value;
  return self;
}
- (PBRect_Builder*) clearX {
  result.hasX = NO;
  result.x = 0;
  return self;
}
- (BOOL) hasY {
  return result.hasY;
}
- (int32_t) y {
  return result.y;
}
- (PBRect_Builder*) setY:(int32_t) value {
  result.hasY = YES;
  result.y = value;
  return self;
}
- (PBRect_Builder*) clearY {
  result.hasY = NO;
  result.y = 0;
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (int32_t) width {
  return result.width;
}
- (PBRect_Builder*) setWidth:(int32_t) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBRect_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return result.hasHeight;
}
- (int32_t) height {
  return result.height;
}
- (PBRect_Builder*) setHeight:(int32_t) value {
  result.hasHeight = YES;
  result.height = value;
  return self;
}
- (PBRect_Builder*) clearHeight {
  result.hasHeight = NO;
  result.height = 0;
  return self;
}
@end

@interface PBFrame ()
@property int32_t frameId;
@property int32_t type;
@property (retain) NSString* imageUrl;
@property (retain) PBRect* opusIphoneRect;
@property (retain) PBRect* opusIpadRect;
@property int32_t price;
@end

@implementation PBFrame

- (BOOL) hasFrameId {
  return !!hasFrameId_;
}
- (void) setHasFrameId:(BOOL) value {
  hasFrameId_ = !!value;
}
@synthesize frameId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) value {
  hasImageUrl_ = !!value;
}
@synthesize imageUrl;
- (BOOL) hasOpusIphoneRect {
  return !!hasOpusIphoneRect_;
}
- (void) setHasOpusIphoneRect:(BOOL) value {
  hasOpusIphoneRect_ = !!value;
}
@synthesize opusIphoneRect;
- (BOOL) hasOpusIpadRect {
  return !!hasOpusIpadRect_;
}
- (void) setHasOpusIpadRect:(BOOL) value {
  hasOpusIpadRect_ = !!value;
}
@synthesize opusIpadRect;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (void) dealloc {
  self.imageUrl = nil;
  self.opusIphoneRect = nil;
  self.opusIpadRect = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.frameId = 0;
    self.type = 0;
    self.imageUrl = @"";
    self.opusIphoneRect = [PBRect defaultInstance];
    self.opusIpadRect = [PBRect defaultInstance];
    self.price = 0;
  }
  return self;
}
static PBFrame* defaultPBFrameInstance = nil;
+ (void) initialize {
  if (self == [PBFrame class]) {
    defaultPBFrameInstance = [[PBFrame alloc] init];
  }
}
+ (PBFrame*) defaultInstance {
  return defaultPBFrameInstance;
}
- (PBFrame*) defaultInstance {
  return defaultPBFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFrameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFrameId) {
    [output writeInt32:1 value:self.frameId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasImageUrl) {
    [output writeString:10 value:self.imageUrl];
  }
  if (self.hasOpusIphoneRect) {
    [output writeMessage:13 value:self.opusIphoneRect];
  }
  if (self.hasOpusIpadRect) {
    [output writeMessage:14 value:self.opusIpadRect];
  }
  if (self.hasPrice) {
    [output writeInt32:18 value:self.price];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFrameId) {
    size += computeInt32Size(1, self.frameId);
  }
  if (self.hasType) {
    size += computeInt32Size(2, self.type);
  }
  if (self.hasImageUrl) {
    size += computeStringSize(10, self.imageUrl);
  }
  if (self.hasOpusIphoneRect) {
    size += computeMessageSize(13, self.opusIphoneRect);
  }
  if (self.hasOpusIpadRect) {
    size += computeMessageSize(14, self.opusIpadRect);
  }
  if (self.hasPrice) {
    size += computeInt32Size(18, self.price);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBFrame*) parseFromData:(NSData*) data {
  return (PBFrame*)[[[PBFrame builder] mergeFromData:data] build];
}
+ (PBFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFrame*) parseFromInputStream:(NSInputStream*) input {
  return (PBFrame*)[[[PBFrame builder] mergeFromInputStream:input] build];
}
+ (PBFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFrame*)[[[PBFrame builder] mergeFromCodedInputStream:input] build];
}
+ (PBFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrame_Builder*) builder {
  return [[[PBFrame_Builder alloc] init] autorelease];
}
+ (PBFrame_Builder*) builderWithPrototype:(PBFrame*) prototype {
  return [[PBFrame builder] mergeFrom:prototype];
}
- (PBFrame_Builder*) builder {
  return [PBFrame builder];
}
@end

@interface PBFrame_Builder()
@property (retain) PBFrame* result;
@end

@implementation PBFrame_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBFrame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFrame_Builder*) clear {
  self.result = [[[PBFrame alloc] init] autorelease];
  return self;
}
- (PBFrame_Builder*) clone {
  return [PBFrame builderWithPrototype:result];
}
- (PBFrame*) defaultInstance {
  return [PBFrame defaultInstance];
}
- (PBFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFrame*) buildPartial {
  PBFrame* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBFrame_Builder*) mergeFrom:(PBFrame*) other {
  if (other == [PBFrame defaultInstance]) {
    return self;
  }
  if (other.hasFrameId) {
    [self setFrameId:other.frameId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  if (other.hasOpusIphoneRect) {
    [self mergeOpusIphoneRect:other.opusIphoneRect];
  }
  if (other.hasOpusIpadRect) {
    [self mergeOpusIpadRect:other.opusIpadRect];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFrame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFrame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFrameId:[input readInt32]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 82: {
        [self setImageUrl:[input readString]];
        break;
      }
      case 106: {
        PBRect_Builder* subBuilder = [PBRect builder];
        if (self.hasOpusIphoneRect) {
          [subBuilder mergeFrom:self.opusIphoneRect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpusIphoneRect:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        PBRect_Builder* subBuilder = [PBRect builder];
        if (self.hasOpusIpadRect) {
          [subBuilder mergeFrom:self.opusIpadRect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpusIpadRect:[subBuilder buildPartial]];
        break;
      }
      case 144: {
        [self setPrice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFrameId {
  return result.hasFrameId;
}
- (int32_t) frameId {
  return result.frameId;
}
- (PBFrame_Builder*) setFrameId:(int32_t) value {
  result.hasFrameId = YES;
  result.frameId = value;
  return self;
}
- (PBFrame_Builder*) clearFrameId {
  result.hasFrameId = NO;
  result.frameId = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBFrame_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBFrame_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasImageUrl {
  return result.hasImageUrl;
}
- (NSString*) imageUrl {
  return result.imageUrl;
}
- (PBFrame_Builder*) setImageUrl:(NSString*) value {
  result.hasImageUrl = YES;
  result.imageUrl = value;
  return self;
}
- (PBFrame_Builder*) clearImageUrl {
  result.hasImageUrl = NO;
  result.imageUrl = @"";
  return self;
}
- (BOOL) hasOpusIphoneRect {
  return result.hasOpusIphoneRect;
}
- (PBRect*) opusIphoneRect {
  return result.opusIphoneRect;
}
- (PBFrame_Builder*) setOpusIphoneRect:(PBRect*) value {
  result.hasOpusIphoneRect = YES;
  result.opusIphoneRect = value;
  return self;
}
- (PBFrame_Builder*) setOpusIphoneRectBuilder:(PBRect_Builder*) builderForValue {
  return [self setOpusIphoneRect:[builderForValue build]];
}
- (PBFrame_Builder*) mergeOpusIphoneRect:(PBRect*) value {
  if (result.hasOpusIphoneRect &&
      result.opusIphoneRect != [PBRect defaultInstance]) {
    result.opusIphoneRect =
      [[[PBRect builderWithPrototype:result.opusIphoneRect] mergeFrom:value] buildPartial];
  } else {
    result.opusIphoneRect = value;
  }
  result.hasOpusIphoneRect = YES;
  return self;
}
- (PBFrame_Builder*) clearOpusIphoneRect {
  result.hasOpusIphoneRect = NO;
  result.opusIphoneRect = [PBRect defaultInstance];
  return self;
}
- (BOOL) hasOpusIpadRect {
  return result.hasOpusIpadRect;
}
- (PBRect*) opusIpadRect {
  return result.opusIpadRect;
}
- (PBFrame_Builder*) setOpusIpadRect:(PBRect*) value {
  result.hasOpusIpadRect = YES;
  result.opusIpadRect = value;
  return self;
}
- (PBFrame_Builder*) setOpusIpadRectBuilder:(PBRect_Builder*) builderForValue {
  return [self setOpusIpadRect:[builderForValue build]];
}
- (PBFrame_Builder*) mergeOpusIpadRect:(PBRect*) value {
  if (result.hasOpusIpadRect &&
      result.opusIpadRect != [PBRect defaultInstance]) {
    result.opusIpadRect =
      [[[PBRect builderWithPrototype:result.opusIpadRect] mergeFrom:value] buildPartial];
  } else {
    result.opusIpadRect = value;
  }
  result.hasOpusIpadRect = YES;
  return self;
}
- (PBFrame_Builder*) clearOpusIpadRect {
  result.hasOpusIpadRect = NO;
  result.opusIpadRect = [PBRect defaultInstance];
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (PBFrame_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (PBFrame_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
@end

@interface PBFrameList ()
@property (retain) NSMutableArray* mutableFramesList;
@end

@implementation PBFrameList

@synthesize mutableFramesList;
- (void) dealloc {
  self.mutableFramesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFrameList* defaultPBFrameListInstance = nil;
+ (void) initialize {
  if (self == [PBFrameList class]) {
    defaultPBFrameListInstance = [[PBFrameList alloc] init];
  }
}
+ (PBFrameList*) defaultInstance {
  return defaultPBFrameListInstance;
}
- (PBFrameList*) defaultInstance {
  return defaultPBFrameListInstance;
}
- (NSArray*) framesList {
  return mutableFramesList;
}
- (PBFrame*) framesAtIndex:(int32_t) index {
  id value = [mutableFramesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBFrame* element in self.framesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBFrame* element in self.framesList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBFrame* element in self.framesList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBFrameList*) parseFromData:(NSData*) data {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromData:data] build];
}
+ (PBFrameList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFrameList*) parseFromInputStream:(NSInputStream*) input {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromInputStream:input] build];
}
+ (PBFrameList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrameList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromCodedInputStream:input] build];
}
+ (PBFrameList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrameList_Builder*) builder {
  return [[[PBFrameList_Builder alloc] init] autorelease];
}
+ (PBFrameList_Builder*) builderWithPrototype:(PBFrameList*) prototype {
  return [[PBFrameList builder] mergeFrom:prototype];
}
- (PBFrameList_Builder*) builder {
  return [PBFrameList builder];
}
@end

@interface PBFrameList_Builder()
@property (retain) PBFrameList* result;
@end

@implementation PBFrameList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBFrameList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFrameList_Builder*) clear {
  self.result = [[[PBFrameList alloc] init] autorelease];
  return self;
}
- (PBFrameList_Builder*) clone {
  return [PBFrameList builderWithPrototype:result];
}
- (PBFrameList*) defaultInstance {
  return [PBFrameList defaultInstance];
}
- (PBFrameList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFrameList*) buildPartial {
  PBFrameList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBFrameList_Builder*) mergeFrom:(PBFrameList*) other {
  if (other == [PBFrameList defaultInstance]) {
    return self;
  }
  if (other.mutableFramesList.count > 0) {
    if (result.mutableFramesList == nil) {
      result.mutableFramesList = [NSMutableArray array];
    }
    [result.mutableFramesList addObjectsFromArray:other.mutableFramesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFrameList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFrameList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBFrame_Builder* subBuilder = [PBFrame builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFrames:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) framesList {
  if (result.mutableFramesList == nil) { return [NSArray array]; }
  return result.mutableFramesList;
}
- (PBFrame*) framesAtIndex:(int32_t) index {
  return [result framesAtIndex:index];
}
- (PBFrameList_Builder*) replaceFramesAtIndex:(int32_t) index with:(PBFrame*) value {
  [result.mutableFramesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBFrameList_Builder*) addAllFrames:(NSArray*) values {
  if (result.mutableFramesList == nil) {
    result.mutableFramesList = [NSMutableArray array];
  }
  [result.mutableFramesList addObjectsFromArray:values];
  return self;
}
- (PBFrameList_Builder*) clearFramesList {
  result.mutableFramesList = nil;
  return self;
}
- (PBFrameList_Builder*) addFrames:(PBFrame*) value {
  if (result.mutableFramesList == nil) {
    result.mutableFramesList = [NSMutableArray array];
  }
  [result.mutableFramesList addObject:value];
  return self;
}
@end

@interface PBLayout ()
@property int32_t layoutId;
@property (retain) NSString* name;
@property int32_t displayMode;
@property (retain) NSMutableArray* mutableWallOpusesList;
@property (retain) NSString* imageUrl;
@property int32_t price;
@end

@implementation PBLayout

- (BOOL) hasLayoutId {
  return !!hasLayoutId_;
}
- (void) setHasLayoutId:(BOOL) value {
  hasLayoutId_ = !!value;
}
@synthesize layoutId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDisplayMode {
  return !!hasDisplayMode_;
}
- (void) setHasDisplayMode:(BOOL) value {
  hasDisplayMode_ = !!value;
}
@synthesize displayMode;
@synthesize mutableWallOpusesList;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) value {
  hasImageUrl_ = !!value;
}
@synthesize imageUrl;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value {
  hasPrice_ = !!value;
}
@synthesize price;
- (void) dealloc {
  self.name = nil;
  self.mutableWallOpusesList = nil;
  self.imageUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.layoutId = 0;
    self.name = @"";
    self.displayMode = 0;
    self.imageUrl = @"";
    self.price = 0;
  }
  return self;
}
static PBLayout* defaultPBLayoutInstance = nil;
+ (void) initialize {
  if (self == [PBLayout class]) {
    defaultPBLayoutInstance = [[PBLayout alloc] init];
  }
}
+ (PBLayout*) defaultInstance {
  return defaultPBLayoutInstance;
}
- (PBLayout*) defaultInstance {
  return defaultPBLayoutInstance;
}
- (NSArray*) wallOpusesList {
  return mutableWallOpusesList;
}
- (PBWallOpus*) wallOpusesAtIndex:(int32_t) index {
  id value = [mutableWallOpusesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasLayoutId) {
    return NO;
  }
  for (PBWallOpus* element in self.wallOpusesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLayoutId) {
    [output writeInt32:1 value:self.layoutId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDisplayMode) {
    [output writeInt32:3 value:self.displayMode];
  }
  for (PBWallOpus* element in self.wallOpusesList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasImageUrl) {
    [output writeString:7 value:self.imageUrl];
  }
  if (self.hasPrice) {
    [output writeInt32:18 value:self.price];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLayoutId) {
    size += computeInt32Size(1, self.layoutId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasDisplayMode) {
    size += computeInt32Size(3, self.displayMode);
  }
  for (PBWallOpus* element in self.wallOpusesList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasImageUrl) {
    size += computeStringSize(7, self.imageUrl);
  }
  if (self.hasPrice) {
    size += computeInt32Size(18, self.price);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBLayout*) parseFromData:(NSData*) data {
  return (PBLayout*)[[[PBLayout builder] mergeFromData:data] build];
}
+ (PBLayout*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayout*)[[[PBLayout builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLayout*) parseFromInputStream:(NSInputStream*) input {
  return (PBLayout*)[[[PBLayout builder] mergeFromInputStream:input] build];
}
+ (PBLayout*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayout*)[[[PBLayout builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayout*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLayout*)[[[PBLayout builder] mergeFromCodedInputStream:input] build];
}
+ (PBLayout*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayout*)[[[PBLayout builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayout_Builder*) builder {
  return [[[PBLayout_Builder alloc] init] autorelease];
}
+ (PBLayout_Builder*) builderWithPrototype:(PBLayout*) prototype {
  return [[PBLayout builder] mergeFrom:prototype];
}
- (PBLayout_Builder*) builder {
  return [PBLayout builder];
}
@end

@interface PBLayout_Builder()
@property (retain) PBLayout* result;
@end

@implementation PBLayout_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBLayout alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBLayout_Builder*) clear {
  self.result = [[[PBLayout alloc] init] autorelease];
  return self;
}
- (PBLayout_Builder*) clone {
  return [PBLayout builderWithPrototype:result];
}
- (PBLayout*) defaultInstance {
  return [PBLayout defaultInstance];
}
- (PBLayout*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLayout*) buildPartial {
  PBLayout* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBLayout_Builder*) mergeFrom:(PBLayout*) other {
  if (other == [PBLayout defaultInstance]) {
    return self;
  }
  if (other.hasLayoutId) {
    [self setLayoutId:other.layoutId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDisplayMode) {
    [self setDisplayMode:other.displayMode];
  }
  if (other.mutableWallOpusesList.count > 0) {
    if (result.mutableWallOpusesList == nil) {
      result.mutableWallOpusesList = [NSMutableArray array];
    }
    [result.mutableWallOpusesList addObjectsFromArray:other.mutableWallOpusesList];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLayout_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLayout_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLayoutId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setDisplayMode:[input readInt32]];
        break;
      }
      case 42: {
        PBWallOpus_Builder* subBuilder = [PBWallOpus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWallOpuses:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setImageUrl:[input readString]];
        break;
      }
      case 144: {
        [self setPrice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLayoutId {
  return result.hasLayoutId;
}
- (int32_t) layoutId {
  return result.layoutId;
}
- (PBLayout_Builder*) setLayoutId:(int32_t) value {
  result.hasLayoutId = YES;
  result.layoutId = value;
  return self;
}
- (PBLayout_Builder*) clearLayoutId {
  result.hasLayoutId = NO;
  result.layoutId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBLayout_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBLayout_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDisplayMode {
  return result.hasDisplayMode;
}
- (int32_t) displayMode {
  return result.displayMode;
}
- (PBLayout_Builder*) setDisplayMode:(int32_t) value {
  result.hasDisplayMode = YES;
  result.displayMode = value;
  return self;
}
- (PBLayout_Builder*) clearDisplayMode {
  result.hasDisplayMode = NO;
  result.displayMode = 0;
  return self;
}
- (NSArray*) wallOpusesList {
  if (result.mutableWallOpusesList == nil) { return [NSArray array]; }
  return result.mutableWallOpusesList;
}
- (PBWallOpus*) wallOpusesAtIndex:(int32_t) index {
  return [result wallOpusesAtIndex:index];
}
- (PBLayout_Builder*) replaceWallOpusesAtIndex:(int32_t) index with:(PBWallOpus*) value {
  [result.mutableWallOpusesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBLayout_Builder*) addAllWallOpuses:(NSArray*) values {
  if (result.mutableWallOpusesList == nil) {
    result.mutableWallOpusesList = [NSMutableArray array];
  }
  [result.mutableWallOpusesList addObjectsFromArray:values];
  return self;
}
- (PBLayout_Builder*) clearWallOpusesList {
  result.mutableWallOpusesList = nil;
  return self;
}
- (PBLayout_Builder*) addWallOpuses:(PBWallOpus*) value {
  if (result.mutableWallOpusesList == nil) {
    result.mutableWallOpusesList = [NSMutableArray array];
  }
  [result.mutableWallOpusesList addObject:value];
  return self;
}
- (BOOL) hasImageUrl {
  return result.hasImageUrl;
}
- (NSString*) imageUrl {
  return result.imageUrl;
}
- (PBLayout_Builder*) setImageUrl:(NSString*) value {
  result.hasImageUrl = YES;
  result.imageUrl = value;
  return self;
}
- (PBLayout_Builder*) clearImageUrl {
  result.hasImageUrl = NO;
  result.imageUrl = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (int32_t) price {
  return result.price;
}
- (PBLayout_Builder*) setPrice:(int32_t) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (PBLayout_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
@end

@interface PBLayoutList ()
@property (retain) NSMutableArray* mutableLayoutsList;
@end

@implementation PBLayoutList

@synthesize mutableLayoutsList;
- (void) dealloc {
  self.mutableLayoutsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBLayoutList* defaultPBLayoutListInstance = nil;
+ (void) initialize {
  if (self == [PBLayoutList class]) {
    defaultPBLayoutListInstance = [[PBLayoutList alloc] init];
  }
}
+ (PBLayoutList*) defaultInstance {
  return defaultPBLayoutListInstance;
}
- (PBLayoutList*) defaultInstance {
  return defaultPBLayoutListInstance;
}
- (NSArray*) layoutsList {
  return mutableLayoutsList;
}
- (PBLayout*) layoutsAtIndex:(int32_t) index {
  id value = [mutableLayoutsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBLayout* element in self.layoutsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBLayout* element in self.layoutsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBLayout* element in self.layoutsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBLayoutList*) parseFromData:(NSData*) data {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromData:data] build];
}
+ (PBLayoutList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutList*) parseFromInputStream:(NSInputStream*) input {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromInputStream:input] build];
}
+ (PBLayoutList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromCodedInputStream:input] build];
}
+ (PBLayoutList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutList_Builder*) builder {
  return [[[PBLayoutList_Builder alloc] init] autorelease];
}
+ (PBLayoutList_Builder*) builderWithPrototype:(PBLayoutList*) prototype {
  return [[PBLayoutList builder] mergeFrom:prototype];
}
- (PBLayoutList_Builder*) builder {
  return [PBLayoutList builder];
}
@end

@interface PBLayoutList_Builder()
@property (retain) PBLayoutList* result;
@end

@implementation PBLayoutList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBLayoutList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBLayoutList_Builder*) clear {
  self.result = [[[PBLayoutList alloc] init] autorelease];
  return self;
}
- (PBLayoutList_Builder*) clone {
  return [PBLayoutList builderWithPrototype:result];
}
- (PBLayoutList*) defaultInstance {
  return [PBLayoutList defaultInstance];
}
- (PBLayoutList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLayoutList*) buildPartial {
  PBLayoutList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBLayoutList_Builder*) mergeFrom:(PBLayoutList*) other {
  if (other == [PBLayoutList defaultInstance]) {
    return self;
  }
  if (other.mutableLayoutsList.count > 0) {
    if (result.mutableLayoutsList == nil) {
      result.mutableLayoutsList = [NSMutableArray array];
    }
    [result.mutableLayoutsList addObjectsFromArray:other.mutableLayoutsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLayoutList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLayoutList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBLayout_Builder* subBuilder = [PBLayout builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLayouts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) layoutsList {
  if (result.mutableLayoutsList == nil) { return [NSArray array]; }
  return result.mutableLayoutsList;
}
- (PBLayout*) layoutsAtIndex:(int32_t) index {
  return [result layoutsAtIndex:index];
}
- (PBLayoutList_Builder*) replaceLayoutsAtIndex:(int32_t) index with:(PBLayout*) value {
  [result.mutableLayoutsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBLayoutList_Builder*) addAllLayouts:(NSArray*) values {
  if (result.mutableLayoutsList == nil) {
    result.mutableLayoutsList = [NSMutableArray array];
  }
  [result.mutableLayoutsList addObjectsFromArray:values];
  return self;
}
- (PBLayoutList_Builder*) clearLayoutsList {
  result.mutableLayoutsList = nil;
  return self;
}
- (PBLayoutList_Builder*) addLayouts:(PBLayout*) value {
  if (result.mutableLayoutsList == nil) {
    result.mutableLayoutsList = [NSMutableArray array];
  }
  [result.mutableLayoutsList addObject:value];
  return self;
}
@end

