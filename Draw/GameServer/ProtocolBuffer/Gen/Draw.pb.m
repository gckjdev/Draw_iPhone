// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Draw.pb.h"

@implementation DrawRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [DrawRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBDraw ()
@property (retain) NSString* userId;
@property (retain) NSString* word;
@property int32_t level;
@property int32_t language;
@property int32_t createDate;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@property (retain) NSMutableArray* mutableDrawDataList;
@property (retain) NSString* opusId;
@end

@implementation PBDraw

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) value {
  hasWord_ = !!value;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
@synthesize mutableDrawDataList;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) value {
  hasOpusId_ = !!value;
}
@synthesize opusId;
- (void) dealloc {
  self.userId = nil;
  self.word = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.mutableDrawDataList = nil;
  self.opusId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.createDate = 0;
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.opusId = @"";
  }
  return self;
}
static PBDraw* defaultPBDrawInstance = nil;
+ (void) initialize {
  if (self == [PBDraw class]) {
    defaultPBDrawInstance = [[PBDraw alloc] init];
  }
}
+ (PBDraw*) defaultInstance {
  return defaultPBDrawInstance;
}
- (PBDraw*) defaultInstance {
  return defaultPBDrawInstance;
}
- (NSArray*) drawDataList {
  return mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  id value = [mutableDrawDataList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWord) {
    return NO;
  }
  if (!self.hasLevel) {
    return NO;
  }
  if (!self.hasLanguage) {
    return NO;
  }
  for (PBDrawAction* element in self.drawDataList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWord) {
    [output writeString:2 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:3 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:4 value:self.language];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasNickName) {
    [output writeString:6 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:7 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:8 value:self.gender];
  }
  for (PBDrawAction* element in self.drawDataList) {
    [output writeMessage:10 value:element];
  }
  if (self.hasOpusId) {
    [output writeString:11 value:self.opusId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasWord) {
    size += computeStringSize(2, self.word);
  }
  if (self.hasLevel) {
    size += computeInt32Size(3, self.level);
  }
  if (self.hasLanguage) {
    size += computeInt32Size(4, self.language);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(5, self.createDate);
  }
  if (self.hasNickName) {
    size += computeStringSize(6, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(7, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(8, self.gender);
  }
  for (PBDrawAction* element in self.drawDataList) {
    size += computeMessageSize(10, element);
  }
  if (self.hasOpusId) {
    size += computeStringSize(11, self.opusId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBDraw*) parseFromData:(NSData*) data {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data] build];
}
+ (PBDraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw_Builder*) builder {
  return [[[PBDraw_Builder alloc] init] autorelease];
}
+ (PBDraw_Builder*) builderWithPrototype:(PBDraw*) prototype {
  return [[PBDraw builder] mergeFrom:prototype];
}
- (PBDraw_Builder*) builder {
  return [PBDraw builder];
}
@end

@interface PBDraw_Builder()
@property (retain) PBDraw* result;
@end

@implementation PBDraw_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBDraw alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDraw_Builder*) clear {
  self.result = [[[PBDraw alloc] init] autorelease];
  return self;
}
- (PBDraw_Builder*) clone {
  return [PBDraw builderWithPrototype:result];
}
- (PBDraw*) defaultInstance {
  return [PBDraw defaultInstance];
}
- (PBDraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDraw*) buildPartial {
  PBDraw* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBDraw_Builder*) mergeFrom:(PBDraw*) other {
  if (other == [PBDraw defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.mutableDrawDataList.count > 0) {
    if (result.mutableDrawDataList == nil) {
      result.mutableDrawDataList = [NSMutableArray array];
    }
    [result.mutableDrawDataList addObjectsFromArray:other.mutableDrawDataList];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDraw_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setWord:[input readString]];
        break;
      }
      case 24: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 50: {
        [self setNickName:[input readString]];
        break;
      }
      case 58: {
        [self setAvatar:[input readString]];
        break;
      }
      case 64: {
        [self setGender:[input readBool]];
        break;
      }
      case 82: {
        PBDrawAction_Builder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setOpusId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBDraw_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBDraw_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasWord {
  return result.hasWord;
}
- (NSString*) word {
  return result.word;
}
- (PBDraw_Builder*) setWord:(NSString*) value {
  result.hasWord = YES;
  result.word = value;
  return self;
}
- (PBDraw_Builder*) clearWord {
  result.hasWord = NO;
  result.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (PBDraw_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (PBDraw_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (int32_t) language {
  return result.language;
}
- (PBDraw_Builder*) setLanguage:(int32_t) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (PBDraw_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBDraw_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBDraw_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBDraw_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBDraw_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBDraw_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBDraw_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBDraw_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBDraw_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (NSArray*) drawDataList {
  if (result.mutableDrawDataList == nil) { return [NSArray array]; }
  return result.mutableDrawDataList;
}
- (PBDrawAction*) drawDataAtIndex:(int32_t) index {
  return [result drawDataAtIndex:index];
}
- (PBDraw_Builder*) replaceDrawDataAtIndex:(int32_t) index with:(PBDrawAction*) value {
  [result.mutableDrawDataList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBDraw_Builder*) addAllDrawData:(NSArray*) values {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObjectsFromArray:values];
  return self;
}
- (PBDraw_Builder*) clearDrawDataList {
  result.mutableDrawDataList = nil;
  return self;
}
- (PBDraw_Builder*) addDrawData:(PBDrawAction*) value {
  if (result.mutableDrawDataList == nil) {
    result.mutableDrawDataList = [NSMutableArray array];
  }
  [result.mutableDrawDataList addObject:value];
  return self;
}
- (BOOL) hasOpusId {
  return result.hasOpusId;
}
- (NSString*) opusId {
  return result.opusId;
}
- (PBDraw_Builder*) setOpusId:(NSString*) value {
  result.hasOpusId = YES;
  result.opusId = value;
  return self;
}
- (PBDraw_Builder*) clearOpusId {
  result.hasOpusId = NO;
  result.opusId = @"";
  return self;
}
@end

@interface PBFeedTimes ()
@property int32_t type;
@property int32_t value;
@end

@implementation PBFeedTimes

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value {
  hasValue_ = !!value;
}
@synthesize value;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.value = 0;
  }
  return self;
}
static PBFeedTimes* defaultPBFeedTimesInstance = nil;
+ (void) initialize {
  if (self == [PBFeedTimes class]) {
    defaultPBFeedTimesInstance = [[PBFeedTimes alloc] init];
  }
}
+ (PBFeedTimes*) defaultInstance {
  return defaultPBFeedTimesInstance;
}
- (PBFeedTimes*) defaultInstance {
  return defaultPBFeedTimesInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  if (self.hasValue) {
    size += computeInt32Size(2, self.value);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBFeedTimes*) parseFromData:(NSData*) data {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromData:data] build];
}
+ (PBFeedTimes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromInputStream:input] build];
}
+ (PBFeedTimes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeedTimes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes_Builder*) builder {
  return [[[PBFeedTimes_Builder alloc] init] autorelease];
}
+ (PBFeedTimes_Builder*) builderWithPrototype:(PBFeedTimes*) prototype {
  return [[PBFeedTimes builder] mergeFrom:prototype];
}
- (PBFeedTimes_Builder*) builder {
  return [PBFeedTimes builder];
}
@end

@interface PBFeedTimes_Builder()
@property (retain) PBFeedTimes* result;
@end

@implementation PBFeedTimes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBFeedTimes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFeedTimes_Builder*) clear {
  self.result = [[[PBFeedTimes alloc] init] autorelease];
  return self;
}
- (PBFeedTimes_Builder*) clone {
  return [PBFeedTimes builderWithPrototype:result];
}
- (PBFeedTimes*) defaultInstance {
  return [PBFeedTimes defaultInstance];
}
- (PBFeedTimes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeedTimes*) buildPartial {
  PBFeedTimes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBFeedTimes_Builder*) mergeFrom:(PBFeedTimes*) other {
  if (other == [PBFeedTimes defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedTimes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedTimes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBFeedTimes_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBFeedTimes_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (int32_t) value {
  return result.value;
}
- (PBFeedTimes_Builder*) setValue:(int32_t) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (PBFeedTimes_Builder*) clearValue {
  result.hasValue = NO;
  result.value = 0;
  return self;
}
@end

@interface PBCommentInfo ()
@property int32_t type;
@property (retain) NSString* comment;
@property (retain) NSString* actionId;
@property (retain) NSString* actionUserId;
@property (retain) NSString* actionNickName;
@property (retain) NSString* actionSummary;
@end

@implementation PBCommentInfo

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) value {
  hasActionId_ = !!value;
}
@synthesize actionId;
- (BOOL) hasActionUserId {
  return !!hasActionUserId_;
}
- (void) setHasActionUserId:(BOOL) value {
  hasActionUserId_ = !!value;
}
@synthesize actionUserId;
- (BOOL) hasActionNickName {
  return !!hasActionNickName_;
}
- (void) setHasActionNickName:(BOOL) value {
  hasActionNickName_ = !!value;
}
@synthesize actionNickName;
- (BOOL) hasActionSummary {
  return !!hasActionSummary_;
}
- (void) setHasActionSummary:(BOOL) value {
  hasActionSummary_ = !!value;
}
@synthesize actionSummary;
- (void) dealloc {
  self.comment = nil;
  self.actionId = nil;
  self.actionUserId = nil;
  self.actionNickName = nil;
  self.actionSummary = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.comment = @"";
    self.actionId = @"";
    self.actionUserId = @"";
    self.actionNickName = @"";
    self.actionSummary = @"";
  }
  return self;
}
static PBCommentInfo* defaultPBCommentInfoInstance = nil;
+ (void) initialize {
  if (self == [PBCommentInfo class]) {
    defaultPBCommentInfoInstance = [[PBCommentInfo alloc] init];
  }
}
+ (PBCommentInfo*) defaultInstance {
  return defaultPBCommentInfoInstance;
}
- (PBCommentInfo*) defaultInstance {
  return defaultPBCommentInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasActionId) {
    return NO;
  }
  if (!self.hasActionUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasComment) {
    [output writeString:2 value:self.comment];
  }
  if (self.hasActionId) {
    [output writeString:3 value:self.actionId];
  }
  if (self.hasActionUserId) {
    [output writeString:4 value:self.actionUserId];
  }
  if (self.hasActionNickName) {
    [output writeString:5 value:self.actionNickName];
  }
  if (self.hasActionSummary) {
    [output writeString:6 value:self.actionSummary];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  if (self.hasComment) {
    size += computeStringSize(2, self.comment);
  }
  if (self.hasActionId) {
    size += computeStringSize(3, self.actionId);
  }
  if (self.hasActionUserId) {
    size += computeStringSize(4, self.actionUserId);
  }
  if (self.hasActionNickName) {
    size += computeStringSize(5, self.actionNickName);
  }
  if (self.hasActionSummary) {
    size += computeStringSize(6, self.actionSummary);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBCommentInfo*) parseFromData:(NSData*) data {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromData:data] build];
}
+ (PBCommentInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromInputStream:input] build];
}
+ (PBCommentInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBCommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo_Builder*) builder {
  return [[[PBCommentInfo_Builder alloc] init] autorelease];
}
+ (PBCommentInfo_Builder*) builderWithPrototype:(PBCommentInfo*) prototype {
  return [[PBCommentInfo builder] mergeFrom:prototype];
}
- (PBCommentInfo_Builder*) builder {
  return [PBCommentInfo builder];
}
@end

@interface PBCommentInfo_Builder()
@property (retain) PBCommentInfo* result;
@end

@implementation PBCommentInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBCommentInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBCommentInfo_Builder*) clear {
  self.result = [[[PBCommentInfo alloc] init] autorelease];
  return self;
}
- (PBCommentInfo_Builder*) clone {
  return [PBCommentInfo builderWithPrototype:result];
}
- (PBCommentInfo*) defaultInstance {
  return [PBCommentInfo defaultInstance];
}
- (PBCommentInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCommentInfo*) buildPartial {
  PBCommentInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBCommentInfo_Builder*) mergeFrom:(PBCommentInfo*) other {
  if (other == [PBCommentInfo defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasActionUserId) {
    [self setActionUserId:other.actionUserId];
  }
  if (other.hasActionNickName) {
    [self setActionNickName:other.actionNickName];
  }
  if (other.hasActionSummary) {
    [self setActionSummary:other.actionSummary];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCommentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCommentInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setComment:[input readString]];
        break;
      }
      case 26: {
        [self setActionId:[input readString]];
        break;
      }
      case 34: {
        [self setActionUserId:[input readString]];
        break;
      }
      case 42: {
        [self setActionNickName:[input readString]];
        break;
      }
      case 50: {
        [self setActionSummary:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBCommentInfo_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBCommentInfo_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (PBCommentInfo_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (PBCommentInfo_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasActionId {
  return result.hasActionId;
}
- (NSString*) actionId {
  return result.actionId;
}
- (PBCommentInfo_Builder*) setActionId:(NSString*) value {
  result.hasActionId = YES;
  result.actionId = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionId {
  result.hasActionId = NO;
  result.actionId = @"";
  return self;
}
- (BOOL) hasActionUserId {
  return result.hasActionUserId;
}
- (NSString*) actionUserId {
  return result.actionUserId;
}
- (PBCommentInfo_Builder*) setActionUserId:(NSString*) value {
  result.hasActionUserId = YES;
  result.actionUserId = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionUserId {
  result.hasActionUserId = NO;
  result.actionUserId = @"";
  return self;
}
- (BOOL) hasActionNickName {
  return result.hasActionNickName;
}
- (NSString*) actionNickName {
  return result.actionNickName;
}
- (PBCommentInfo_Builder*) setActionNickName:(NSString*) value {
  result.hasActionNickName = YES;
  result.actionNickName = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionNickName {
  result.hasActionNickName = NO;
  result.actionNickName = @"";
  return self;
}
- (BOOL) hasActionSummary {
  return result.hasActionSummary;
}
- (NSString*) actionSummary {
  return result.actionSummary;
}
- (PBCommentInfo_Builder*) setActionSummary:(NSString*) value {
  result.hasActionSummary = YES;
  result.actionSummary = value;
  return self;
}
- (PBCommentInfo_Builder*) clearActionSummary {
  result.hasActionSummary = NO;
  result.actionSummary = @"";
  return self;
}
@end

@interface PBFeed ()
@property (retain) NSString* feedId;
@property (retain) NSString* userId;
@property int32_t actionType;
@property int32_t createDate;
@property int32_t deviceType;
@property (retain) NSString* deviceName;
@property (retain) NSString* gameId;
@property (retain) NSString* nickName;
@property (retain) NSString* avatar;
@property BOOL gender;
@property (retain) PBDraw* drawData;
@property (retain) NSString* targetUserId;
@property (retain) NSString* targetUserNickName;
@property Float64 historyScore;
@property (retain) NSString* desc;
@property (retain) NSString* opusId;
@property BOOL isCorrect;
@property int32_t score;
@property (retain) NSMutableArray* mutableGuessWordsList;
@property int32_t opusStatus;
@property (retain) NSString* comment;
@property (retain) PBCommentInfo* commentInfo;
@property int32_t matchTimes;
@property int32_t correctTimes;
@property int32_t guessTimes;
@property int32_t commentTimes;
@property (retain) NSMutableArray* mutableFeedTimesList;
@property (retain) NSString* opusCreatorUserId;
@property (retain) NSString* opusCreatorNickName;
@property BOOL opusCreatorGender;
@property (retain) NSString* opusCreatorAvatar;
@property (retain) NSString* opusWord;
@property (retain) NSString* opusImage;
@property (retain) NSString* contestId;
@property Float64 contestScore;
@end

@implementation PBFeed

- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) value {
  hasFeedId_ = !!value;
}
@synthesize feedId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasActionType {
  return !!hasActionType_;
}
- (void) setHasActionType:(BOOL) value {
  hasActionType_ = !!value;
}
@synthesize actionType;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value {
  hasCreateDate_ = !!value;
}
@synthesize createDate;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value {
  hasDeviceType_ = !!value;
}
@synthesize deviceType;
- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) value {
  hasDeviceName_ = !!value;
}
@synthesize deviceName;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value {
  hasNickName_ = !!value;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value {
  hasAvatar_ = !!value;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) value {
  gender_ = !!value;
}
- (BOOL) hasDrawData {
  return !!hasDrawData_;
}
- (void) setHasDrawData:(BOOL) value {
  hasDrawData_ = !!value;
}
@synthesize drawData;
- (BOOL) hasTargetUserId {
  return !!hasTargetUserId_;
}
- (void) setHasTargetUserId:(BOOL) value {
  hasTargetUserId_ = !!value;
}
@synthesize targetUserId;
- (BOOL) hasTargetUserNickName {
  return !!hasTargetUserNickName_;
}
- (void) setHasTargetUserNickName:(BOOL) value {
  hasTargetUserNickName_ = !!value;
}
@synthesize targetUserNickName;
- (BOOL) hasHistoryScore {
  return !!hasHistoryScore_;
}
- (void) setHasHistoryScore:(BOOL) value {
  hasHistoryScore_ = !!value;
}
@synthesize historyScore;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value {
  hasDesc_ = !!value;
}
@synthesize desc;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) value {
  hasOpusId_ = !!value;
}
@synthesize opusId;
- (BOOL) hasIsCorrect {
  return !!hasIsCorrect_;
}
- (void) setHasIsCorrect:(BOOL) value {
  hasIsCorrect_ = !!value;
}
- (BOOL) isCorrect {
  return !!isCorrect_;
}
- (void) setIsCorrect:(BOOL) value {
  isCorrect_ = !!value;
}
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value {
  hasScore_ = !!value;
}
@synthesize score;
@synthesize mutableGuessWordsList;
- (BOOL) hasOpusStatus {
  return !!hasOpusStatus_;
}
- (void) setHasOpusStatus:(BOOL) value {
  hasOpusStatus_ = !!value;
}
@synthesize opusStatus;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (BOOL) hasCommentInfo {
  return !!hasCommentInfo_;
}
- (void) setHasCommentInfo:(BOOL) value {
  hasCommentInfo_ = !!value;
}
@synthesize commentInfo;
- (BOOL) hasMatchTimes {
  return !!hasMatchTimes_;
}
- (void) setHasMatchTimes:(BOOL) value {
  hasMatchTimes_ = !!value;
}
@synthesize matchTimes;
- (BOOL) hasCorrectTimes {
  return !!hasCorrectTimes_;
}
- (void) setHasCorrectTimes:(BOOL) value {
  hasCorrectTimes_ = !!value;
}
@synthesize correctTimes;
- (BOOL) hasGuessTimes {
  return !!hasGuessTimes_;
}
- (void) setHasGuessTimes:(BOOL) value {
  hasGuessTimes_ = !!value;
}
@synthesize guessTimes;
- (BOOL) hasCommentTimes {
  return !!hasCommentTimes_;
}
- (void) setHasCommentTimes:(BOOL) value {
  hasCommentTimes_ = !!value;
}
@synthesize commentTimes;
@synthesize mutableFeedTimesList;
- (BOOL) hasOpusCreatorUserId {
  return !!hasOpusCreatorUserId_;
}
- (void) setHasOpusCreatorUserId:(BOOL) value {
  hasOpusCreatorUserId_ = !!value;
}
@synthesize opusCreatorUserId;
- (BOOL) hasOpusCreatorNickName {
  return !!hasOpusCreatorNickName_;
}
- (void) setHasOpusCreatorNickName:(BOOL) value {
  hasOpusCreatorNickName_ = !!value;
}
@synthesize opusCreatorNickName;
- (BOOL) hasOpusCreatorGender {
  return !!hasOpusCreatorGender_;
}
- (void) setHasOpusCreatorGender:(BOOL) value {
  hasOpusCreatorGender_ = !!value;
}
- (BOOL) opusCreatorGender {
  return !!opusCreatorGender_;
}
- (void) setOpusCreatorGender:(BOOL) value {
  opusCreatorGender_ = !!value;
}
- (BOOL) hasOpusCreatorAvatar {
  return !!hasOpusCreatorAvatar_;
}
- (void) setHasOpusCreatorAvatar:(BOOL) value {
  hasOpusCreatorAvatar_ = !!value;
}
@synthesize opusCreatorAvatar;
- (BOOL) hasOpusWord {
  return !!hasOpusWord_;
}
- (void) setHasOpusWord:(BOOL) value {
  hasOpusWord_ = !!value;
}
@synthesize opusWord;
- (BOOL) hasOpusImage {
  return !!hasOpusImage_;
}
- (void) setHasOpusImage:(BOOL) value {
  hasOpusImage_ = !!value;
}
@synthesize opusImage;
- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) value {
  hasContestId_ = !!value;
}
@synthesize contestId;
- (BOOL) hasContestScore {
  return !!hasContestScore_;
}
- (void) setHasContestScore:(BOOL) value {
  hasContestScore_ = !!value;
}
@synthesize contestScore;
- (void) dealloc {
  self.feedId = nil;
  self.userId = nil;
  self.deviceName = nil;
  self.gameId = nil;
  self.nickName = nil;
  self.avatar = nil;
  self.drawData = nil;
  self.targetUserId = nil;
  self.targetUserNickName = nil;
  self.desc = nil;
  self.opusId = nil;
  self.mutableGuessWordsList = nil;
  self.comment = nil;
  self.commentInfo = nil;
  self.mutableFeedTimesList = nil;
  self.opusCreatorUserId = nil;
  self.opusCreatorNickName = nil;
  self.opusCreatorAvatar = nil;
  self.opusWord = nil;
  self.opusImage = nil;
  self.contestId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.feedId = @"";
    self.userId = @"";
    self.actionType = 0;
    self.createDate = 0;
    self.deviceType = 0;
    self.deviceName = @"";
    self.gameId = @"";
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.drawData = [PBDraw defaultInstance];
    self.targetUserId = @"";
    self.targetUserNickName = @"";
    self.historyScore = 0;
    self.desc = @"";
    self.opusId = @"";
    self.isCorrect = NO;
    self.score = 0;
    self.opusStatus = 0;
    self.comment = @"";
    self.commentInfo = [PBCommentInfo defaultInstance];
    self.matchTimes = 0;
    self.correctTimes = 0;
    self.guessTimes = 0;
    self.commentTimes = 0;
    self.opusCreatorUserId = @"";
    self.opusCreatorNickName = @"";
    self.opusCreatorGender = NO;
    self.opusCreatorAvatar = @"";
    self.opusWord = @"";
    self.opusImage = @"";
    self.contestId = @"";
    self.contestScore = 0;
  }
  return self;
}
static PBFeed* defaultPBFeedInstance = nil;
+ (void) initialize {
  if (self == [PBFeed class]) {
    defaultPBFeedInstance = [[PBFeed alloc] init];
  }
}
+ (PBFeed*) defaultInstance {
  return defaultPBFeedInstance;
}
- (PBFeed*) defaultInstance {
  return defaultPBFeedInstance;
}
- (NSArray*) guessWordsList {
  return mutableGuessWordsList;
}
- (NSString*) guessWordsAtIndex:(int32_t) index {
  id value = [mutableGuessWordsList objectAtIndex:index];
  return value;
}
- (NSArray*) feedTimesList {
  return mutableFeedTimesList;
}
- (PBFeedTimes*) feedTimesAtIndex:(int32_t) index {
  id value = [mutableFeedTimesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasFeedId) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasActionType) {
    return NO;
  }
  if (!self.hasCreateDate) {
    return NO;
  }
  if (self.hasDrawData) {
    if (!self.drawData.isInitialized) {
      return NO;
    }
  }
  if (self.hasCommentInfo) {
    if (!self.commentInfo.isInitialized) {
      return NO;
    }
  }
  for (PBFeedTimes* element in self.feedTimesList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFeedId) {
    [output writeString:1 value:self.feedId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasActionType) {
    [output writeInt32:3 value:self.actionType];
  }
  if (self.hasCreateDate) {
    [output writeInt32:4 value:self.createDate];
  }
  if (self.hasDeviceType) {
    [output writeInt32:5 value:self.deviceType];
  }
  if (self.hasDeviceName) {
    [output writeString:6 value:self.deviceName];
  }
  if (self.hasGameId) {
    [output writeString:7 value:self.gameId];
  }
  if (self.hasNickName) {
    [output writeString:21 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:22 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:23 value:self.gender];
  }
  if (self.hasDrawData) {
    [output writeMessage:31 value:self.drawData];
  }
  if (self.hasTargetUserId) {
    [output writeString:32 value:self.targetUserId];
  }
  if (self.hasTargetUserNickName) {
    [output writeString:33 value:self.targetUserNickName];
  }
  if (self.hasHistoryScore) {
    [output writeDouble:34 value:self.historyScore];
  }
  if (self.hasDesc) {
    [output writeString:35 value:self.desc];
  }
  if (self.hasOpusId) {
    [output writeString:41 value:self.opusId];
  }
  if (self.hasIsCorrect) {
    [output writeBool:42 value:self.isCorrect];
  }
  if (self.hasScore) {
    [output writeInt32:43 value:self.score];
  }
  for (NSString* element in self.mutableGuessWordsList) {
    [output writeString:44 value:element];
  }
  if (self.hasOpusStatus) {
    [output writeInt32:45 value:self.opusStatus];
  }
  if (self.hasComment) {
    [output writeString:51 value:self.comment];
  }
  if (self.hasCommentInfo) {
    [output writeMessage:52 value:self.commentInfo];
  }
  if (self.hasMatchTimes) {
    [output writeInt32:61 value:self.matchTimes];
  }
  if (self.hasCorrectTimes) {
    [output writeInt32:62 value:self.correctTimes];
  }
  if (self.hasGuessTimes) {
    [output writeInt32:63 value:self.guessTimes];
  }
  if (self.hasCommentTimes) {
    [output writeInt32:64 value:self.commentTimes];
  }
  for (PBFeedTimes* element in self.feedTimesList) {
    [output writeMessage:65 value:element];
  }
  if (self.hasOpusCreatorUserId) {
    [output writeString:71 value:self.opusCreatorUserId];
  }
  if (self.hasOpusCreatorNickName) {
    [output writeString:72 value:self.opusCreatorNickName];
  }
  if (self.hasOpusCreatorGender) {
    [output writeBool:73 value:self.opusCreatorGender];
  }
  if (self.hasOpusCreatorAvatar) {
    [output writeString:74 value:self.opusCreatorAvatar];
  }
  if (self.hasOpusWord) {
    [output writeString:81 value:self.opusWord];
  }
  if (self.hasOpusImage) {
    [output writeString:82 value:self.opusImage];
  }
  if (self.hasContestId) {
    [output writeString:91 value:self.contestId];
  }
  if (self.hasContestScore) {
    [output writeDouble:92 value:self.contestScore];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFeedId) {
    size += computeStringSize(1, self.feedId);
  }
  if (self.hasUserId) {
    size += computeStringSize(2, self.userId);
  }
  if (self.hasActionType) {
    size += computeInt32Size(3, self.actionType);
  }
  if (self.hasCreateDate) {
    size += computeInt32Size(4, self.createDate);
  }
  if (self.hasDeviceType) {
    size += computeInt32Size(5, self.deviceType);
  }
  if (self.hasDeviceName) {
    size += computeStringSize(6, self.deviceName);
  }
  if (self.hasGameId) {
    size += computeStringSize(7, self.gameId);
  }
  if (self.hasNickName) {
    size += computeStringSize(21, self.nickName);
  }
  if (self.hasAvatar) {
    size += computeStringSize(22, self.avatar);
  }
  if (self.hasGender) {
    size += computeBoolSize(23, self.gender);
  }
  if (self.hasDrawData) {
    size += computeMessageSize(31, self.drawData);
  }
  if (self.hasTargetUserId) {
    size += computeStringSize(32, self.targetUserId);
  }
  if (self.hasTargetUserNickName) {
    size += computeStringSize(33, self.targetUserNickName);
  }
  if (self.hasHistoryScore) {
    size += computeDoubleSize(34, self.historyScore);
  }
  if (self.hasDesc) {
    size += computeStringSize(35, self.desc);
  }
  if (self.hasOpusId) {
    size += computeStringSize(41, self.opusId);
  }
  if (self.hasIsCorrect) {
    size += computeBoolSize(42, self.isCorrect);
  }
  if (self.hasScore) {
    size += computeInt32Size(43, self.score);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableGuessWordsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 2 * self.mutableGuessWordsList.count;
  }
  if (self.hasOpusStatus) {
    size += computeInt32Size(45, self.opusStatus);
  }
  if (self.hasComment) {
    size += computeStringSize(51, self.comment);
  }
  if (self.hasCommentInfo) {
    size += computeMessageSize(52, self.commentInfo);
  }
  if (self.hasMatchTimes) {
    size += computeInt32Size(61, self.matchTimes);
  }
  if (self.hasCorrectTimes) {
    size += computeInt32Size(62, self.correctTimes);
  }
  if (self.hasGuessTimes) {
    size += computeInt32Size(63, self.guessTimes);
  }
  if (self.hasCommentTimes) {
    size += computeInt32Size(64, self.commentTimes);
  }
  for (PBFeedTimes* element in self.feedTimesList) {
    size += computeMessageSize(65, element);
  }
  if (self.hasOpusCreatorUserId) {
    size += computeStringSize(71, self.opusCreatorUserId);
  }
  if (self.hasOpusCreatorNickName) {
    size += computeStringSize(72, self.opusCreatorNickName);
  }
  if (self.hasOpusCreatorGender) {
    size += computeBoolSize(73, self.opusCreatorGender);
  }
  if (self.hasOpusCreatorAvatar) {
    size += computeStringSize(74, self.opusCreatorAvatar);
  }
  if (self.hasOpusWord) {
    size += computeStringSize(81, self.opusWord);
  }
  if (self.hasOpusImage) {
    size += computeStringSize(82, self.opusImage);
  }
  if (self.hasContestId) {
    size += computeStringSize(91, self.contestId);
  }
  if (self.hasContestScore) {
    size += computeDoubleSize(92, self.contestScore);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBFeed*) parseFromData:(NSData*) data {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data] build];
}
+ (PBFeed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed_Builder*) builder {
  return [[[PBFeed_Builder alloc] init] autorelease];
}
+ (PBFeed_Builder*) builderWithPrototype:(PBFeed*) prototype {
  return [[PBFeed builder] mergeFrom:prototype];
}
- (PBFeed_Builder*) builder {
  return [PBFeed builder];
}
@end

@interface PBFeed_Builder()
@property (retain) PBFeed* result;
@end

@implementation PBFeed_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBFeed alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFeed_Builder*) clear {
  self.result = [[[PBFeed alloc] init] autorelease];
  return self;
}
- (PBFeed_Builder*) clone {
  return [PBFeed builderWithPrototype:result];
}
- (PBFeed*) defaultInstance {
  return [PBFeed defaultInstance];
}
- (PBFeed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeed*) buildPartial {
  PBFeed* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBFeed_Builder*) mergeFrom:(PBFeed*) other {
  if (other == [PBFeed defaultInstance]) {
    return self;
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasActionType) {
    [self setActionType:other.actionType];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasDrawData) {
    [self mergeDrawData:other.drawData];
  }
  if (other.hasTargetUserId) {
    [self setTargetUserId:other.targetUserId];
  }
  if (other.hasTargetUserNickName) {
    [self setTargetUserNickName:other.targetUserNickName];
  }
  if (other.hasHistoryScore) {
    [self setHistoryScore:other.historyScore];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasIsCorrect) {
    [self setIsCorrect:other.isCorrect];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.mutableGuessWordsList.count > 0) {
    if (result.mutableGuessWordsList == nil) {
      result.mutableGuessWordsList = [NSMutableArray array];
    }
    [result.mutableGuessWordsList addObjectsFromArray:other.mutableGuessWordsList];
  }
  if (other.hasOpusStatus) {
    [self setOpusStatus:other.opusStatus];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCommentInfo) {
    [self mergeCommentInfo:other.commentInfo];
  }
  if (other.hasMatchTimes) {
    [self setMatchTimes:other.matchTimes];
  }
  if (other.hasCorrectTimes) {
    [self setCorrectTimes:other.correctTimes];
  }
  if (other.hasGuessTimes) {
    [self setGuessTimes:other.guessTimes];
  }
  if (other.hasCommentTimes) {
    [self setCommentTimes:other.commentTimes];
  }
  if (other.mutableFeedTimesList.count > 0) {
    if (result.mutableFeedTimesList == nil) {
      result.mutableFeedTimesList = [NSMutableArray array];
    }
    [result.mutableFeedTimesList addObjectsFromArray:other.mutableFeedTimesList];
  }
  if (other.hasOpusCreatorUserId) {
    [self setOpusCreatorUserId:other.opusCreatorUserId];
  }
  if (other.hasOpusCreatorNickName) {
    [self setOpusCreatorNickName:other.opusCreatorNickName];
  }
  if (other.hasOpusCreatorGender) {
    [self setOpusCreatorGender:other.opusCreatorGender];
  }
  if (other.hasOpusCreatorAvatar) {
    [self setOpusCreatorAvatar:other.opusCreatorAvatar];
  }
  if (other.hasOpusWord) {
    [self setOpusWord:other.opusWord];
  }
  if (other.hasOpusImage) {
    [self setOpusImage:other.opusImage];
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  if (other.hasContestScore) {
    [self setContestScore:other.contestScore];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeed_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeed_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFeedId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 24: {
        [self setActionType:[input readInt32]];
        break;
      }
      case 32: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 40: {
        [self setDeviceType:[input readInt32]];
        break;
      }
      case 50: {
        [self setDeviceName:[input readString]];
        break;
      }
      case 58: {
        [self setGameId:[input readString]];
        break;
      }
      case 170: {
        [self setNickName:[input readString]];
        break;
      }
      case 178: {
        [self setAvatar:[input readString]];
        break;
      }
      case 184: {
        [self setGender:[input readBool]];
        break;
      }
      case 250: {
        PBDraw_Builder* subBuilder = [PBDraw builder];
        if (self.hasDrawData) {
          [subBuilder mergeFrom:self.drawData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawData:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        [self setTargetUserId:[input readString]];
        break;
      }
      case 266: {
        [self setTargetUserNickName:[input readString]];
        break;
      }
      case 273: {
        [self setHistoryScore:[input readDouble]];
        break;
      }
      case 282: {
        [self setDesc:[input readString]];
        break;
      }
      case 330: {
        [self setOpusId:[input readString]];
        break;
      }
      case 336: {
        [self setIsCorrect:[input readBool]];
        break;
      }
      case 344: {
        [self setScore:[input readInt32]];
        break;
      }
      case 354: {
        [self addGuessWords:[input readString]];
        break;
      }
      case 360: {
        [self setOpusStatus:[input readInt32]];
        break;
      }
      case 410: {
        [self setComment:[input readString]];
        break;
      }
      case 418: {
        PBCommentInfo_Builder* subBuilder = [PBCommentInfo builder];
        if (self.hasCommentInfo) {
          [subBuilder mergeFrom:self.commentInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommentInfo:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setMatchTimes:[input readInt32]];
        break;
      }
      case 496: {
        [self setCorrectTimes:[input readInt32]];
        break;
      }
      case 504: {
        [self setGuessTimes:[input readInt32]];
        break;
      }
      case 512: {
        [self setCommentTimes:[input readInt32]];
        break;
      }
      case 522: {
        PBFeedTimes_Builder* subBuilder = [PBFeedTimes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeedTimes:[subBuilder buildPartial]];
        break;
      }
      case 570: {
        [self setOpusCreatorUserId:[input readString]];
        break;
      }
      case 578: {
        [self setOpusCreatorNickName:[input readString]];
        break;
      }
      case 584: {
        [self setOpusCreatorGender:[input readBool]];
        break;
      }
      case 594: {
        [self setOpusCreatorAvatar:[input readString]];
        break;
      }
      case 650: {
        [self setOpusWord:[input readString]];
        break;
      }
      case 658: {
        [self setOpusImage:[input readString]];
        break;
      }
      case 730: {
        [self setContestId:[input readString]];
        break;
      }
      case 737: {
        [self setContestScore:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasFeedId {
  return result.hasFeedId;
}
- (NSString*) feedId {
  return result.feedId;
}
- (PBFeed_Builder*) setFeedId:(NSString*) value {
  result.hasFeedId = YES;
  result.feedId = value;
  return self;
}
- (PBFeed_Builder*) clearFeedId {
  result.hasFeedId = NO;
  result.feedId = @"";
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBFeed_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBFeed_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasActionType {
  return result.hasActionType;
}
- (int32_t) actionType {
  return result.actionType;
}
- (PBFeed_Builder*) setActionType:(int32_t) value {
  result.hasActionType = YES;
  result.actionType = value;
  return self;
}
- (PBFeed_Builder*) clearActionType {
  result.hasActionType = NO;
  result.actionType = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (int32_t) createDate {
  return result.createDate;
}
- (PBFeed_Builder*) setCreateDate:(int32_t) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PBFeed_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (int32_t) deviceType {
  return result.deviceType;
}
- (PBFeed_Builder*) setDeviceType:(int32_t) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (PBFeed_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = 0;
  return self;
}
- (BOOL) hasDeviceName {
  return result.hasDeviceName;
}
- (NSString*) deviceName {
  return result.deviceName;
}
- (PBFeed_Builder*) setDeviceName:(NSString*) value {
  result.hasDeviceName = YES;
  result.deviceName = value;
  return self;
}
- (PBFeed_Builder*) clearDeviceName {
  result.hasDeviceName = NO;
  result.deviceName = @"";
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (PBFeed_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (PBFeed_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBFeed_Builder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBFeed_Builder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBFeed_Builder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBFeed_Builder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (BOOL) gender {
  return result.gender;
}
- (PBFeed_Builder*) setGender:(BOOL) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBFeed_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = NO;
  return self;
}
- (BOOL) hasDrawData {
  return result.hasDrawData;
}
- (PBDraw*) drawData {
  return result.drawData;
}
- (PBFeed_Builder*) setDrawData:(PBDraw*) value {
  result.hasDrawData = YES;
  result.drawData = value;
  return self;
}
- (PBFeed_Builder*) setDrawDataBuilder:(PBDraw_Builder*) builderForValue {
  return [self setDrawData:[builderForValue build]];
}
- (PBFeed_Builder*) mergeDrawData:(PBDraw*) value {
  if (result.hasDrawData &&
      result.drawData != [PBDraw defaultInstance]) {
    result.drawData =
      [[[PBDraw builderWithPrototype:result.drawData] mergeFrom:value] buildPartial];
  } else {
    result.drawData = value;
  }
  result.hasDrawData = YES;
  return self;
}
- (PBFeed_Builder*) clearDrawData {
  result.hasDrawData = NO;
  result.drawData = [PBDraw defaultInstance];
  return self;
}
- (BOOL) hasTargetUserId {
  return result.hasTargetUserId;
}
- (NSString*) targetUserId {
  return result.targetUserId;
}
- (PBFeed_Builder*) setTargetUserId:(NSString*) value {
  result.hasTargetUserId = YES;
  result.targetUserId = value;
  return self;
}
- (PBFeed_Builder*) clearTargetUserId {
  result.hasTargetUserId = NO;
  result.targetUserId = @"";
  return self;
}
- (BOOL) hasTargetUserNickName {
  return result.hasTargetUserNickName;
}
- (NSString*) targetUserNickName {
  return result.targetUserNickName;
}
- (PBFeed_Builder*) setTargetUserNickName:(NSString*) value {
  result.hasTargetUserNickName = YES;
  result.targetUserNickName = value;
  return self;
}
- (PBFeed_Builder*) clearTargetUserNickName {
  result.hasTargetUserNickName = NO;
  result.targetUserNickName = @"";
  return self;
}
- (BOOL) hasHistoryScore {
  return result.hasHistoryScore;
}
- (Float64) historyScore {
  return result.historyScore;
}
- (PBFeed_Builder*) setHistoryScore:(Float64) value {
  result.hasHistoryScore = YES;
  result.historyScore = value;
  return self;
}
- (PBFeed_Builder*) clearHistoryScore {
  result.hasHistoryScore = NO;
  result.historyScore = 0;
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (PBFeed_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (PBFeed_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasOpusId {
  return result.hasOpusId;
}
- (NSString*) opusId {
  return result.opusId;
}
- (PBFeed_Builder*) setOpusId:(NSString*) value {
  result.hasOpusId = YES;
  result.opusId = value;
  return self;
}
- (PBFeed_Builder*) clearOpusId {
  result.hasOpusId = NO;
  result.opusId = @"";
  return self;
}
- (BOOL) hasIsCorrect {
  return result.hasIsCorrect;
}
- (BOOL) isCorrect {
  return result.isCorrect;
}
- (PBFeed_Builder*) setIsCorrect:(BOOL) value {
  result.hasIsCorrect = YES;
  result.isCorrect = value;
  return self;
}
- (PBFeed_Builder*) clearIsCorrect {
  result.hasIsCorrect = NO;
  result.isCorrect = NO;
  return self;
}
- (BOOL) hasScore {
  return result.hasScore;
}
- (int32_t) score {
  return result.score;
}
- (PBFeed_Builder*) setScore:(int32_t) value {
  result.hasScore = YES;
  result.score = value;
  return self;
}
- (PBFeed_Builder*) clearScore {
  result.hasScore = NO;
  result.score = 0;
  return self;
}
- (NSArray*) guessWordsList {
  if (result.mutableGuessWordsList == nil) {
    return [NSArray array];
  }
  return result.mutableGuessWordsList;
}
- (NSString*) guessWordsAtIndex:(int32_t) index {
  return [result guessWordsAtIndex:index];
}
- (PBFeed_Builder*) replaceGuessWordsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableGuessWordsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBFeed_Builder*) addGuessWords:(NSString*) value {
  if (result.mutableGuessWordsList == nil) {
    result.mutableGuessWordsList = [NSMutableArray array];
  }
  [result.mutableGuessWordsList addObject:value];
  return self;
}
- (PBFeed_Builder*) addAllGuessWords:(NSArray*) values {
  if (result.mutableGuessWordsList == nil) {
    result.mutableGuessWordsList = [NSMutableArray array];
  }
  [result.mutableGuessWordsList addObjectsFromArray:values];
  return self;
}
- (PBFeed_Builder*) clearGuessWordsList {
  result.mutableGuessWordsList = nil;
  return self;
}
- (BOOL) hasOpusStatus {
  return result.hasOpusStatus;
}
- (int32_t) opusStatus {
  return result.opusStatus;
}
- (PBFeed_Builder*) setOpusStatus:(int32_t) value {
  result.hasOpusStatus = YES;
  result.opusStatus = value;
  return self;
}
- (PBFeed_Builder*) clearOpusStatus {
  result.hasOpusStatus = NO;
  result.opusStatus = 0;
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (PBFeed_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (PBFeed_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCommentInfo {
  return result.hasCommentInfo;
}
- (PBCommentInfo*) commentInfo {
  return result.commentInfo;
}
- (PBFeed_Builder*) setCommentInfo:(PBCommentInfo*) value {
  result.hasCommentInfo = YES;
  result.commentInfo = value;
  return self;
}
- (PBFeed_Builder*) setCommentInfoBuilder:(PBCommentInfo_Builder*) builderForValue {
  return [self setCommentInfo:[builderForValue build]];
}
- (PBFeed_Builder*) mergeCommentInfo:(PBCommentInfo*) value {
  if (result.hasCommentInfo &&
      result.commentInfo != [PBCommentInfo defaultInstance]) {
    result.commentInfo =
      [[[PBCommentInfo builderWithPrototype:result.commentInfo] mergeFrom:value] buildPartial];
  } else {
    result.commentInfo = value;
  }
  result.hasCommentInfo = YES;
  return self;
}
- (PBFeed_Builder*) clearCommentInfo {
  result.hasCommentInfo = NO;
  result.commentInfo = [PBCommentInfo defaultInstance];
  return self;
}
- (BOOL) hasMatchTimes {
  return result.hasMatchTimes;
}
- (int32_t) matchTimes {
  return result.matchTimes;
}
- (PBFeed_Builder*) setMatchTimes:(int32_t) value {
  result.hasMatchTimes = YES;
  result.matchTimes = value;
  return self;
}
- (PBFeed_Builder*) clearMatchTimes {
  result.hasMatchTimes = NO;
  result.matchTimes = 0;
  return self;
}
- (BOOL) hasCorrectTimes {
  return result.hasCorrectTimes;
}
- (int32_t) correctTimes {
  return result.correctTimes;
}
- (PBFeed_Builder*) setCorrectTimes:(int32_t) value {
  result.hasCorrectTimes = YES;
  result.correctTimes = value;
  return self;
}
- (PBFeed_Builder*) clearCorrectTimes {
  result.hasCorrectTimes = NO;
  result.correctTimes = 0;
  return self;
}
- (BOOL) hasGuessTimes {
  return result.hasGuessTimes;
}
- (int32_t) guessTimes {
  return result.guessTimes;
}
- (PBFeed_Builder*) setGuessTimes:(int32_t) value {
  result.hasGuessTimes = YES;
  result.guessTimes = value;
  return self;
}
- (PBFeed_Builder*) clearGuessTimes {
  result.hasGuessTimes = NO;
  result.guessTimes = 0;
  return self;
}
- (BOOL) hasCommentTimes {
  return result.hasCommentTimes;
}
- (int32_t) commentTimes {
  return result.commentTimes;
}
- (PBFeed_Builder*) setCommentTimes:(int32_t) value {
  result.hasCommentTimes = YES;
  result.commentTimes = value;
  return self;
}
- (PBFeed_Builder*) clearCommentTimes {
  result.hasCommentTimes = NO;
  result.commentTimes = 0;
  return self;
}
- (NSArray*) feedTimesList {
  if (result.mutableFeedTimesList == nil) { return [NSArray array]; }
  return result.mutableFeedTimesList;
}
- (PBFeedTimes*) feedTimesAtIndex:(int32_t) index {
  return [result feedTimesAtIndex:index];
}
- (PBFeed_Builder*) replaceFeedTimesAtIndex:(int32_t) index with:(PBFeedTimes*) value {
  [result.mutableFeedTimesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBFeed_Builder*) addAllFeedTimes:(NSArray*) values {
  if (result.mutableFeedTimesList == nil) {
    result.mutableFeedTimesList = [NSMutableArray array];
  }
  [result.mutableFeedTimesList addObjectsFromArray:values];
  return self;
}
- (PBFeed_Builder*) clearFeedTimesList {
  result.mutableFeedTimesList = nil;
  return self;
}
- (PBFeed_Builder*) addFeedTimes:(PBFeedTimes*) value {
  if (result.mutableFeedTimesList == nil) {
    result.mutableFeedTimesList = [NSMutableArray array];
  }
  [result.mutableFeedTimesList addObject:value];
  return self;
}
- (BOOL) hasOpusCreatorUserId {
  return result.hasOpusCreatorUserId;
}
- (NSString*) opusCreatorUserId {
  return result.opusCreatorUserId;
}
- (PBFeed_Builder*) setOpusCreatorUserId:(NSString*) value {
  result.hasOpusCreatorUserId = YES;
  result.opusCreatorUserId = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorUserId {
  result.hasOpusCreatorUserId = NO;
  result.opusCreatorUserId = @"";
  return self;
}
- (BOOL) hasOpusCreatorNickName {
  return result.hasOpusCreatorNickName;
}
- (NSString*) opusCreatorNickName {
  return result.opusCreatorNickName;
}
- (PBFeed_Builder*) setOpusCreatorNickName:(NSString*) value {
  result.hasOpusCreatorNickName = YES;
  result.opusCreatorNickName = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorNickName {
  result.hasOpusCreatorNickName = NO;
  result.opusCreatorNickName = @"";
  return self;
}
- (BOOL) hasOpusCreatorGender {
  return result.hasOpusCreatorGender;
}
- (BOOL) opusCreatorGender {
  return result.opusCreatorGender;
}
- (PBFeed_Builder*) setOpusCreatorGender:(BOOL) value {
  result.hasOpusCreatorGender = YES;
  result.opusCreatorGender = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorGender {
  result.hasOpusCreatorGender = NO;
  result.opusCreatorGender = NO;
  return self;
}
- (BOOL) hasOpusCreatorAvatar {
  return result.hasOpusCreatorAvatar;
}
- (NSString*) opusCreatorAvatar {
  return result.opusCreatorAvatar;
}
- (PBFeed_Builder*) setOpusCreatorAvatar:(NSString*) value {
  result.hasOpusCreatorAvatar = YES;
  result.opusCreatorAvatar = value;
  return self;
}
- (PBFeed_Builder*) clearOpusCreatorAvatar {
  result.hasOpusCreatorAvatar = NO;
  result.opusCreatorAvatar = @"";
  return self;
}
- (BOOL) hasOpusWord {
  return result.hasOpusWord;
}
- (NSString*) opusWord {
  return result.opusWord;
}
- (PBFeed_Builder*) setOpusWord:(NSString*) value {
  result.hasOpusWord = YES;
  result.opusWord = value;
  return self;
}
- (PBFeed_Builder*) clearOpusWord {
  result.hasOpusWord = NO;
  result.opusWord = @"";
  return self;
}
- (BOOL) hasOpusImage {
  return result.hasOpusImage;
}
- (NSString*) opusImage {
  return result.opusImage;
}
- (PBFeed_Builder*) setOpusImage:(NSString*) value {
  result.hasOpusImage = YES;
  result.opusImage = value;
  return self;
}
- (PBFeed_Builder*) clearOpusImage {
  result.hasOpusImage = NO;
  result.opusImage = @"";
  return self;
}
- (BOOL) hasContestId {
  return result.hasContestId;
}
- (NSString*) contestId {
  return result.contestId;
}
- (PBFeed_Builder*) setContestId:(NSString*) value {
  result.hasContestId = YES;
  result.contestId = value;
  return self;
}
- (PBFeed_Builder*) clearContestId {
  result.hasContestId = NO;
  result.contestId = @"";
  return self;
}
- (BOOL) hasContestScore {
  return result.hasContestScore;
}
- (Float64) contestScore {
  return result.contestScore;
}
- (PBFeed_Builder*) setContestScore:(Float64) value {
  result.hasContestScore = YES;
  result.contestScore = value;
  return self;
}
- (PBFeed_Builder*) clearContestScore {
  result.hasContestScore = NO;
  result.contestScore = 0;
  return self;
}
@end

@interface PBPoint ()
@property Float32 x;
@property Float32 y;
@end

@implementation PBPoint

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) value {
  hasX_ = !!value;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) value {
  hasY_ = !!value;
}
@synthesize y;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
  }
  return self;
}
static PBPoint* defaultPBPointInstance = nil;
+ (void) initialize {
  if (self == [PBPoint class]) {
    defaultPBPointInstance = [[PBPoint alloc] init];
  }
}
+ (PBPoint*) defaultInstance {
  return defaultPBPointInstance;
}
- (PBPoint*) defaultInstance {
  return defaultPBPointInstance;
}
- (BOOL) isInitialized {
  if (!self.hasX) {
    return NO;
  }
  if (!self.hasY) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeFloat:1 value:self.x];
  }
  if (self.hasY) {
    [output writeFloat:2 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasX) {
    size += computeFloatSize(1, self.x);
  }
  if (self.hasY) {
    size += computeFloatSize(2, self.y);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBPoint*) parseFromData:(NSData*) data {
  return (PBPoint*)[[[PBPoint builder] mergeFromData:data] build];
}
+ (PBPoint*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPoint*) parseFromInputStream:(NSInputStream*) input {
  return (PBPoint*)[[[PBPoint builder] mergeFromInputStream:input] build];
}
+ (PBPoint*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPoint*)[[[PBPoint builder] mergeFromCodedInputStream:input] build];
}
+ (PBPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoint_Builder*) builder {
  return [[[PBPoint_Builder alloc] init] autorelease];
}
+ (PBPoint_Builder*) builderWithPrototype:(PBPoint*) prototype {
  return [[PBPoint builder] mergeFrom:prototype];
}
- (PBPoint_Builder*) builder {
  return [PBPoint builder];
}
@end

@interface PBPoint_Builder()
@property (retain) PBPoint* result;
@end

@implementation PBPoint_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBPoint alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPoint_Builder*) clear {
  self.result = [[[PBPoint alloc] init] autorelease];
  return self;
}
- (PBPoint_Builder*) clone {
  return [PBPoint builderWithPrototype:result];
}
- (PBPoint*) defaultInstance {
  return [PBPoint defaultInstance];
}
- (PBPoint*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPoint*) buildPartial {
  PBPoint* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBPoint_Builder*) mergeFrom:(PBPoint*) other {
  if (other == [PBPoint defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPoint_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPoint_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setX:[input readFloat]];
        break;
      }
      case 21: {
        [self setY:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return result.hasX;
}
- (Float32) x {
  return result.x;
}
- (PBPoint_Builder*) setX:(Float32) value {
  result.hasX = YES;
  result.x = value;
  return self;
}
- (PBPoint_Builder*) clearX {
  result.hasX = NO;
  result.x = 0;
  return self;
}
- (BOOL) hasY {
  return result.hasY;
}
- (Float32) y {
  return result.y;
}
- (PBPoint_Builder*) setY:(Float32) value {
  result.hasY = YES;
  result.y = value;
  return self;
}
- (PBPoint_Builder*) clearY {
  result.hasY = NO;
  result.y = 0;
  return self;
}
@end

@interface PBColor ()
@property Float32 red;
@property Float32 blue;
@property Float32 green;
@property Float32 alpha;
@end

@implementation PBColor

- (BOOL) hasRed {
  return !!hasRed_;
}
- (void) setHasRed:(BOOL) value {
  hasRed_ = !!value;
}
@synthesize red;
- (BOOL) hasBlue {
  return !!hasBlue_;
}
- (void) setHasBlue:(BOOL) value {
  hasBlue_ = !!value;
}
@synthesize blue;
- (BOOL) hasGreen {
  return !!hasGreen_;
}
- (void) setHasGreen:(BOOL) value {
  hasGreen_ = !!value;
}
@synthesize green;
- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) value {
  hasAlpha_ = !!value;
}
@synthesize alpha;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.red = 0;
    self.blue = 0;
    self.green = 0;
    self.alpha = 0;
  }
  return self;
}
static PBColor* defaultPBColorInstance = nil;
+ (void) initialize {
  if (self == [PBColor class]) {
    defaultPBColorInstance = [[PBColor alloc] init];
  }
}
+ (PBColor*) defaultInstance {
  return defaultPBColorInstance;
}
- (PBColor*) defaultInstance {
  return defaultPBColorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRed) {
    return NO;
  }
  if (!self.hasBlue) {
    return NO;
  }
  if (!self.hasGreen) {
    return NO;
  }
  if (!self.hasAlpha) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRed) {
    [output writeFloat:1 value:self.red];
  }
  if (self.hasBlue) {
    [output writeFloat:2 value:self.blue];
  }
  if (self.hasGreen) {
    [output writeFloat:3 value:self.green];
  }
  if (self.hasAlpha) {
    [output writeFloat:4 value:self.alpha];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRed) {
    size += computeFloatSize(1, self.red);
  }
  if (self.hasBlue) {
    size += computeFloatSize(2, self.blue);
  }
  if (self.hasGreen) {
    size += computeFloatSize(3, self.green);
  }
  if (self.hasAlpha) {
    size += computeFloatSize(4, self.alpha);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBColor*) parseFromData:(NSData*) data {
  return (PBColor*)[[[PBColor builder] mergeFromData:data] build];
}
+ (PBColor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBColor*) parseFromInputStream:(NSInputStream*) input {
  return (PBColor*)[[[PBColor builder] mergeFromInputStream:input] build];
}
+ (PBColor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBColor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBColor*)[[[PBColor builder] mergeFromCodedInputStream:input] build];
}
+ (PBColor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBColor_Builder*) builder {
  return [[[PBColor_Builder alloc] init] autorelease];
}
+ (PBColor_Builder*) builderWithPrototype:(PBColor*) prototype {
  return [[PBColor builder] mergeFrom:prototype];
}
- (PBColor_Builder*) builder {
  return [PBColor builder];
}
@end

@interface PBColor_Builder()
@property (retain) PBColor* result;
@end

@implementation PBColor_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBColor alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBColor_Builder*) clear {
  self.result = [[[PBColor alloc] init] autorelease];
  return self;
}
- (PBColor_Builder*) clone {
  return [PBColor builderWithPrototype:result];
}
- (PBColor*) defaultInstance {
  return [PBColor defaultInstance];
}
- (PBColor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBColor*) buildPartial {
  PBColor* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBColor_Builder*) mergeFrom:(PBColor*) other {
  if (other == [PBColor defaultInstance]) {
    return self;
  }
  if (other.hasRed) {
    [self setRed:other.red];
  }
  if (other.hasBlue) {
    [self setBlue:other.blue];
  }
  if (other.hasGreen) {
    [self setGreen:other.green];
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBColor_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBColor_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setRed:[input readFloat]];
        break;
      }
      case 21: {
        [self setBlue:[input readFloat]];
        break;
      }
      case 29: {
        [self setGreen:[input readFloat]];
        break;
      }
      case 37: {
        [self setAlpha:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasRed {
  return result.hasRed;
}
- (Float32) red {
  return result.red;
}
- (PBColor_Builder*) setRed:(Float32) value {
  result.hasRed = YES;
  result.red = value;
  return self;
}
- (PBColor_Builder*) clearRed {
  result.hasRed = NO;
  result.red = 0;
  return self;
}
- (BOOL) hasBlue {
  return result.hasBlue;
}
- (Float32) blue {
  return result.blue;
}
- (PBColor_Builder*) setBlue:(Float32) value {
  result.hasBlue = YES;
  result.blue = value;
  return self;
}
- (PBColor_Builder*) clearBlue {
  result.hasBlue = NO;
  result.blue = 0;
  return self;
}
- (BOOL) hasGreen {
  return result.hasGreen;
}
- (Float32) green {
  return result.green;
}
- (PBColor_Builder*) setGreen:(Float32) value {
  result.hasGreen = YES;
  result.green = value;
  return self;
}
- (PBColor_Builder*) clearGreen {
  result.hasGreen = NO;
  result.green = 0;
  return self;
}
- (BOOL) hasAlpha {
  return result.hasAlpha;
}
- (Float32) alpha {
  return result.alpha;
}
- (PBColor_Builder*) setAlpha:(Float32) value {
  result.hasAlpha = YES;
  result.alpha = value;
  return self;
}
- (PBColor_Builder*) clearAlpha {
  result.hasAlpha = NO;
  result.alpha = 0;
  return self;
}
@end

@interface PBNoCompressDrawAction ()
@property int32_t type;
@property (retain) NSMutableArray* mutablePointList;
@property (retain) PBColor* color;
@property Float32 width;
@property int32_t penType;
@end

@implementation PBNoCompressDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
@synthesize mutablePointList;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value {
  hasWidth_ = !!value;
}
@synthesize width;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) value {
  hasPenType_ = !!value;
}
@synthesize penType;
- (void) dealloc {
  self.mutablePointList = nil;
  self.color = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = 0;
    self.color = [PBColor defaultInstance];
    self.width = 0;
    self.penType = 0;
  }
  return self;
}
static PBNoCompressDrawAction* defaultPBNoCompressDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBNoCompressDrawAction class]) {
    defaultPBNoCompressDrawActionInstance = [[PBNoCompressDrawAction alloc] init];
  }
}
+ (PBNoCompressDrawAction*) defaultInstance {
  return defaultPBNoCompressDrawActionInstance;
}
- (PBNoCompressDrawAction*) defaultInstance {
  return defaultPBNoCompressDrawActionInstance;
}
- (NSArray*) pointList {
  return mutablePointList;
}
- (PBPoint*) pointAtIndex:(int32_t) index {
  id value = [mutablePointList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  for (PBPoint* element in self.pointList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasColor) {
    if (!self.color.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  for (PBPoint* element in self.pointList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasColor) {
    [output writeMessage:3 value:self.color];
  }
  if (self.hasWidth) {
    [output writeFloat:4 value:self.width];
  }
  if (self.hasPenType) {
    [output writeInt32:5 value:self.penType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeInt32Size(1, self.type);
  }
  for (PBPoint* element in self.pointList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasColor) {
    size += computeMessageSize(3, self.color);
  }
  if (self.hasWidth) {
    size += computeFloatSize(4, self.width);
  }
  if (self.hasPenType) {
    size += computeInt32Size(5, self.penType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBNoCompressDrawAction*) parseFromData:(NSData*) data {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromData:data] build];
}
+ (PBNoCompressDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBNoCompressDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBNoCompressDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction_Builder*) builder {
  return [[[PBNoCompressDrawAction_Builder alloc] init] autorelease];
}
+ (PBNoCompressDrawAction_Builder*) builderWithPrototype:(PBNoCompressDrawAction*) prototype {
  return [[PBNoCompressDrawAction builder] mergeFrom:prototype];
}
- (PBNoCompressDrawAction_Builder*) builder {
  return [PBNoCompressDrawAction builder];
}
@end

@interface PBNoCompressDrawAction_Builder()
@property (retain) PBNoCompressDrawAction* result;
@end

@implementation PBNoCompressDrawAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBNoCompressDrawAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBNoCompressDrawAction_Builder*) clear {
  self.result = [[[PBNoCompressDrawAction alloc] init] autorelease];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clone {
  return [PBNoCompressDrawAction builderWithPrototype:result];
}
- (PBNoCompressDrawAction*) defaultInstance {
  return [PBNoCompressDrawAction defaultInstance];
}
- (PBNoCompressDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBNoCompressDrawAction*) buildPartial {
  PBNoCompressDrawAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBNoCompressDrawAction_Builder*) mergeFrom:(PBNoCompressDrawAction*) other {
  if (other == [PBNoCompressDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.mutablePointList.count > 0) {
    if (result.mutablePointList == nil) {
      result.mutablePointList = [NSMutableArray array];
    }
    [result.mutablePointList addObjectsFromArray:other.mutablePointList];
  }
  if (other.hasColor) {
    [self mergeColor:other.color];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBNoCompressDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBNoCompressDrawAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        PBPoint_Builder* subBuilder = [PBPoint builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPoint:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBColor_Builder* subBuilder = [PBColor builder];
        if (self.hasColor) {
          [subBuilder mergeFrom:self.color];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setColor:[subBuilder buildPartial]];
        break;
      }
      case 37: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 40: {
        [self setPenType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (PBNoCompressDrawAction_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (NSArray*) pointList {
  if (result.mutablePointList == nil) { return [NSArray array]; }
  return result.mutablePointList;
}
- (PBPoint*) pointAtIndex:(int32_t) index {
  return [result pointAtIndex:index];
}
- (PBNoCompressDrawAction_Builder*) replacePointAtIndex:(int32_t) index with:(PBPoint*) value {
  [result.mutablePointList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBNoCompressDrawAction_Builder*) addAllPoint:(NSArray*) values {
  if (result.mutablePointList == nil) {
    result.mutablePointList = [NSMutableArray array];
  }
  [result.mutablePointList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearPointList {
  result.mutablePointList = nil;
  return self;
}
- (PBNoCompressDrawAction_Builder*) addPoint:(PBPoint*) value {
  if (result.mutablePointList == nil) {
    result.mutablePointList = [NSMutableArray array];
  }
  [result.mutablePointList addObject:value];
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (PBColor*) color {
  return result.color;
}
- (PBNoCompressDrawAction_Builder*) setColor:(PBColor*) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) setColorBuilder:(PBColor_Builder*) builderForValue {
  return [self setColor:[builderForValue build]];
}
- (PBNoCompressDrawAction_Builder*) mergeColor:(PBColor*) value {
  if (result.hasColor &&
      result.color != [PBColor defaultInstance]) {
    result.color =
      [[[PBColor builderWithPrototype:result.color] mergeFrom:value] buildPartial];
  } else {
    result.color = value;
  }
  result.hasColor = YES;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearColor {
  result.hasColor = NO;
  result.color = [PBColor defaultInstance];
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (Float32) width {
  return result.width;
}
- (PBNoCompressDrawAction_Builder*) setWidth:(Float32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasPenType {
  return result.hasPenType;
}
- (int32_t) penType {
  return result.penType;
}
- (PBNoCompressDrawAction_Builder*) setPenType:(int32_t) value {
  result.hasPenType = YES;
  result.penType = value;
  return self;
}
- (PBNoCompressDrawAction_Builder*) clearPenType {
  result.hasPenType = NO;
  result.penType = 0;
  return self;
}
@end

@interface PBNoCompressDrawData ()
@property (retain) NSMutableArray* mutableDrawActionListList;
@end

@implementation PBNoCompressDrawData

@synthesize mutableDrawActionListList;
- (void) dealloc {
  self.mutableDrawActionListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBNoCompressDrawData* defaultPBNoCompressDrawDataInstance = nil;
+ (void) initialize {
  if (self == [PBNoCompressDrawData class]) {
    defaultPBNoCompressDrawDataInstance = [[PBNoCompressDrawData alloc] init];
  }
}
+ (PBNoCompressDrawData*) defaultInstance {
  return defaultPBNoCompressDrawDataInstance;
}
- (PBNoCompressDrawData*) defaultInstance {
  return defaultPBNoCompressDrawDataInstance;
}
- (NSArray*) drawActionListList {
  return mutableDrawActionListList;
}
- (PBNoCompressDrawAction*) drawActionListAtIndex:(int32_t) index {
  id value = [mutableDrawActionListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBNoCompressDrawAction* element in self.drawActionListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBNoCompressDrawAction* element in self.drawActionListList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBNoCompressDrawAction* element in self.drawActionListList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBNoCompressDrawData*) parseFromData:(NSData*) data {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromData:data] build];
}
+ (PBNoCompressDrawData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData*) parseFromInputStream:(NSInputStream*) input {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromInputStream:input] build];
}
+ (PBNoCompressDrawData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromCodedInputStream:input] build];
}
+ (PBNoCompressDrawData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData_Builder*) builder {
  return [[[PBNoCompressDrawData_Builder alloc] init] autorelease];
}
+ (PBNoCompressDrawData_Builder*) builderWithPrototype:(PBNoCompressDrawData*) prototype {
  return [[PBNoCompressDrawData builder] mergeFrom:prototype];
}
- (PBNoCompressDrawData_Builder*) builder {
  return [PBNoCompressDrawData builder];
}
@end

@interface PBNoCompressDrawData_Builder()
@property (retain) PBNoCompressDrawData* result;
@end

@implementation PBNoCompressDrawData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBNoCompressDrawData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBNoCompressDrawData_Builder*) clear {
  self.result = [[[PBNoCompressDrawData alloc] init] autorelease];
  return self;
}
- (PBNoCompressDrawData_Builder*) clone {
  return [PBNoCompressDrawData builderWithPrototype:result];
}
- (PBNoCompressDrawData*) defaultInstance {
  return [PBNoCompressDrawData defaultInstance];
}
- (PBNoCompressDrawData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBNoCompressDrawData*) buildPartial {
  PBNoCompressDrawData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBNoCompressDrawData_Builder*) mergeFrom:(PBNoCompressDrawData*) other {
  if (other == [PBNoCompressDrawData defaultInstance]) {
    return self;
  }
  if (other.mutableDrawActionListList.count > 0) {
    if (result.mutableDrawActionListList == nil) {
      result.mutableDrawActionListList = [NSMutableArray array];
    }
    [result.mutableDrawActionListList addObjectsFromArray:other.mutableDrawActionListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBNoCompressDrawData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBNoCompressDrawData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBNoCompressDrawAction_Builder* subBuilder = [PBNoCompressDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawActionList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) drawActionListList {
  if (result.mutableDrawActionListList == nil) { return [NSArray array]; }
  return result.mutableDrawActionListList;
}
- (PBNoCompressDrawAction*) drawActionListAtIndex:(int32_t) index {
  return [result drawActionListAtIndex:index];
}
- (PBNoCompressDrawData_Builder*) replaceDrawActionListAtIndex:(int32_t) index with:(PBNoCompressDrawAction*) value {
  [result.mutableDrawActionListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBNoCompressDrawData_Builder*) addAllDrawActionList:(NSArray*) values {
  if (result.mutableDrawActionListList == nil) {
    result.mutableDrawActionListList = [NSMutableArray array];
  }
  [result.mutableDrawActionListList addObjectsFromArray:values];
  return self;
}
- (PBNoCompressDrawData_Builder*) clearDrawActionListList {
  result.mutableDrawActionListList = nil;
  return self;
}
- (PBNoCompressDrawData_Builder*) addDrawActionList:(PBNoCompressDrawAction*) value {
  if (result.mutableDrawActionListList == nil) {
    result.mutableDrawActionListList = [NSMutableArray array];
  }
  [result.mutableDrawActionListList addObject:value];
  return self;
}
@end

