// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Draw.pb.h"
// @@protoc_insertion_point(imports)

@implementation DrawRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [DrawRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    [SingRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBDraw ()
@property (strong) NSString* userId;
@property (strong) NSString* word;
@property SInt32 level;
@property SInt32 language;
@property SInt32 createDate;
@property (strong) NSString* nickName;
@property (strong) NSString* avatar;
@property BOOL gender;
@property SInt32 version;
@property (strong) NSMutableArray * drawDataArray;
@property (strong) NSString* opusId;
@property SInt32 score;
@property BOOL isCompressed;
@property (strong) PBSize* canvasSize;
@property (strong) NSMutableArray * layerArray;
@property SInt64 strokes;
@property SInt32 spendTime;
@property SInt32 completeDate;
@end

@implementation PBDraw

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) _value_ {
  hasWord_ = !!_value_;
}
@synthesize word;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) _value_ {
  gender_ = !!_value_;
}
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
@synthesize drawDataArray;
@dynamic drawData;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (BOOL) hasIsCompressed {
  return !!hasIsCompressed_;
}
- (void) setHasIsCompressed:(BOOL) _value_ {
  hasIsCompressed_ = !!_value_;
}
- (BOOL) isCompressed {
  return !!isCompressed_;
}
- (void) setIsCompressed:(BOOL) _value_ {
  isCompressed_ = !!_value_;
}
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
@synthesize layerArray;
@dynamic layer;
- (BOOL) hasStrokes {
  return !!hasStrokes_;
}
- (void) setHasStrokes:(BOOL) _value_ {
  hasStrokes_ = !!_value_;
}
@synthesize strokes;
- (BOOL) hasSpendTime {
  return !!hasSpendTime_;
}
- (void) setHasSpendTime:(BOOL) _value_ {
  hasSpendTime_ = !!_value_;
}
@synthesize spendTime;
- (BOOL) hasCompleteDate {
  return !!hasCompleteDate_;
}
- (void) setHasCompleteDate:(BOOL) _value_ {
  hasCompleteDate_ = !!_value_;
}
@synthesize completeDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.word = @"";
    self.level = 0;
    self.language = 0;
    self.createDate = 0;
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.version = 0;
    self.opusId = @"";
    self.score = 0;
    self.isCompressed = YES;
    self.canvasSize = [PBSize defaultInstance];
    self.strokes = 0L;
    self.spendTime = 0;
    self.completeDate = 0;
  }
  return self;
}
static PBDraw* defaultPBDrawInstance = nil;
+ (void) initialize {
  if (self == [PBDraw class]) {
    defaultPBDrawInstance = [[PBDraw alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawInstance;
}
- (NSArray *)drawData {
  return drawDataArray;
}
- (PBDrawAction*)drawDataAtIndex:(NSUInteger)index {
  return [drawDataArray objectAtIndex:index];
}
- (NSArray *)layer {
  return layerArray;
}
- (PBLayer*)layerAtIndex:(NSUInteger)index {
  return [layerArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasWord) {
    return NO;
  }
  if (!self.hasLevel) {
    return NO;
  }
  if (!self.hasLanguage) {
    return NO;
  }
  __block BOOL isInitdrawData = YES;
   [self.drawData enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawData = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawData) return isInitdrawData;
  __block BOOL isInitlayer = YES;
   [self.layer enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlayer = NO;
      *stop = YES;
    }
  }];
  if (!isInitlayer) return isInitlayer;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasWord) {
    [output writeString:2 value:self.word];
  }
  if (self.hasLevel) {
    [output writeInt32:3 value:self.level];
  }
  if (self.hasLanguage) {
    [output writeInt32:4 value:self.language];
  }
  if (self.hasCreateDate) {
    [output writeInt32:5 value:self.createDate];
  }
  if (self.hasNickName) {
    [output writeString:6 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:7 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:8 value:self.gender];
  }
  if (self.hasVersion) {
    [output writeInt32:9 value:self.version];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasOpusId) {
    [output writeString:11 value:self.opusId];
  }
  if (self.hasScore) {
    [output writeInt32:12 value:self.score];
  }
  if (self.hasIsCompressed) {
    [output writeBool:19 value:self.isCompressed];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:21 value:self.canvasSize];
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:22 value:element];
  }];
  if (self.hasStrokes) {
    [output writeInt64:23 value:self.strokes];
  }
  if (self.hasSpendTime) {
    [output writeInt32:24 value:self.spendTime];
  }
  if (self.hasCompleteDate) {
    [output writeInt32:25 value:self.completeDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasWord) {
    size_ += computeStringSize(2, self.word);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(3, self.level);
  }
  if (self.hasLanguage) {
    size_ += computeInt32Size(4, self.language);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(5, self.createDate);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(6, self.nickName);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(7, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeBoolSize(8, self.gender);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(9, self.version);
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasOpusId) {
    size_ += computeStringSize(11, self.opusId);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(12, self.score);
  }
  if (self.hasIsCompressed) {
    size_ += computeBoolSize(19, self.isCompressed);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(21, self.canvasSize);
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(22, element);
  }];
  if (self.hasStrokes) {
    size_ += computeInt64Size(23, self.strokes);
  }
  if (self.hasSpendTime) {
    size_ += computeInt32Size(24, self.spendTime);
  }
  if (self.hasCompleteDate) {
    size_ += computeInt32Size(25, self.completeDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDraw*) parseFromData:(NSData*) data {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data] build];
}
+ (PBDraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input] build];
}
+ (PBDraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input] build];
}
+ (PBDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDraw*)[[[PBDraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBuilder*) builder {
  return [[PBDrawBuilder alloc] init];
}
+ (PBDrawBuilder*) builderWithPrototype:(PBDraw*) prototype {
  return [[PBDraw builder] mergeFrom:prototype];
}
- (PBDrawBuilder*) builder {
  return [PBDraw builder];
}
- (PBDrawBuilder*) toBuilder {
  return [PBDraw builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"word", self.word];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", [NSNumber numberWithInteger:self.language]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithBool:self.gender]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  if (self.hasIsCompressed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCompressed", [NSNumber numberWithBool:self.isCompressed]];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"layer"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasStrokes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strokes", [NSNumber numberWithLongLong:self.strokes]];
  }
  if (self.hasSpendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spendTime", [NSNumber numberWithInteger:self.spendTime]];
  }
  if (self.hasCompleteDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completeDate", [NSNumber numberWithInteger:self.completeDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDraw class]]) {
    return NO;
  }
  PBDraw *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasWord == otherMessage.hasWord &&
      (!self.hasWord || [self.word isEqual:otherMessage.word]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || self.language == otherMessage.language) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      [self.drawDataArray isEqualToArray:otherMessage.drawDataArray] &&
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasIsCompressed == otherMessage.hasIsCompressed &&
      (!self.hasIsCompressed || self.isCompressed == otherMessage.isCompressed) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      [self.layerArray isEqualToArray:otherMessage.layerArray] &&
      self.hasStrokes == otherMessage.hasStrokes &&
      (!self.hasStrokes || self.strokes == otherMessage.strokes) &&
      self.hasSpendTime == otherMessage.hasSpendTime &&
      (!self.hasSpendTime || self.spendTime == otherMessage.spendTime) &&
      self.hasCompleteDate == otherMessage.hasCompleteDate &&
      (!self.hasCompleteDate || self.completeDate == otherMessage.completeDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasWord) {
    hashCode = hashCode * 31 + [self.word hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.language] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gender] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  [self.drawDataArray enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  if (self.hasIsCompressed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isCompressed] hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStrokes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.strokes] hash];
  }
  if (self.hasSpendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spendTime] hash];
  }
  if (self.hasCompleteDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.completeDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawBuilder()
@property (strong) PBDraw* resultPbdraw;
@end

@implementation PBDrawBuilder
@synthesize resultPbdraw;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdraw = [[PBDraw alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdraw;
}
- (PBDrawBuilder*) clear {
  self.resultPbdraw = [[PBDraw alloc] init];
  return self;
}
- (PBDrawBuilder*) clone {
  return [PBDraw builderWithPrototype:resultPbdraw];
}
- (PBDraw*) defaultInstance {
  return [PBDraw defaultInstance];
}
- (PBDraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDraw*) buildPartial {
  PBDraw* returnMe = resultPbdraw;
  self.resultPbdraw = nil;
  return returnMe;
}
- (PBDrawBuilder*) mergeFrom:(PBDraw*) other {
  if (other == [PBDraw defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.drawDataArray.count > 0) {
    if (resultPbdraw.drawDataArray == nil) {
      resultPbdraw.drawDataArray = [[NSMutableArray alloc] initWithArray:other.drawDataArray];
    } else {
      [resultPbdraw.drawDataArray addObjectsFromArray:other.drawDataArray];
    }
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasIsCompressed) {
    [self setIsCompressed:other.isCompressed];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.layerArray.count > 0) {
    if (resultPbdraw.layerArray == nil) {
      resultPbdraw.layerArray = [[NSMutableArray alloc] initWithArray:other.layerArray];
    } else {
      [resultPbdraw.layerArray addObjectsFromArray:other.layerArray];
    }
  }
  if (other.hasStrokes) {
    [self setStrokes:other.strokes];
  }
  if (other.hasSpendTime) {
    [self setSpendTime:other.spendTime];
  }
  if (other.hasCompleteDate) {
    [self setCompleteDate:other.completeDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setWord:[input readString]];
        break;
      }
      case 24: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setLanguage:[input readInt32]];
        break;
      }
      case 40: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 50: {
        [self setNickName:[input readString]];
        break;
      }
      case 58: {
        [self setAvatar:[input readString]];
        break;
      }
      case 64: {
        [self setGender:[input readBool]];
        break;
      }
      case 72: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 82: {
        PBDrawActionBuilder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawData:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setOpusId:[input readString]];
        break;
      }
      case 96: {
        [self setScore:[input readInt32]];
        break;
      }
      case 152: {
        [self setIsCompressed:[input readBool]];
        break;
      }
      case 170: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        PBLayerBuilder* subBuilder = [PBLayer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLayer:[subBuilder buildPartial]];
        break;
      }
      case 184: {
        [self setStrokes:[input readInt64]];
        break;
      }
      case 192: {
        [self setSpendTime:[input readInt32]];
        break;
      }
      case 200: {
        [self setCompleteDate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbdraw.hasUserId;
}
- (NSString*) userId {
  return resultPbdraw.userId;
}
- (PBDrawBuilder*) setUserId:(NSString*) value {
  resultPbdraw.hasUserId = YES;
  resultPbdraw.userId = value;
  return self;
}
- (PBDrawBuilder*) clearUserId {
  resultPbdraw.hasUserId = NO;
  resultPbdraw.userId = @"";
  return self;
}
- (BOOL) hasWord {
  return resultPbdraw.hasWord;
}
- (NSString*) word {
  return resultPbdraw.word;
}
- (PBDrawBuilder*) setWord:(NSString*) value {
  resultPbdraw.hasWord = YES;
  resultPbdraw.word = value;
  return self;
}
- (PBDrawBuilder*) clearWord {
  resultPbdraw.hasWord = NO;
  resultPbdraw.word = @"";
  return self;
}
- (BOOL) hasLevel {
  return resultPbdraw.hasLevel;
}
- (SInt32) level {
  return resultPbdraw.level;
}
- (PBDrawBuilder*) setLevel:(SInt32) value {
  resultPbdraw.hasLevel = YES;
  resultPbdraw.level = value;
  return self;
}
- (PBDrawBuilder*) clearLevel {
  resultPbdraw.hasLevel = NO;
  resultPbdraw.level = 0;
  return self;
}
- (BOOL) hasLanguage {
  return resultPbdraw.hasLanguage;
}
- (SInt32) language {
  return resultPbdraw.language;
}
- (PBDrawBuilder*) setLanguage:(SInt32) value {
  resultPbdraw.hasLanguage = YES;
  resultPbdraw.language = value;
  return self;
}
- (PBDrawBuilder*) clearLanguage {
  resultPbdraw.hasLanguage = NO;
  resultPbdraw.language = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbdraw.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbdraw.createDate;
}
- (PBDrawBuilder*) setCreateDate:(SInt32) value {
  resultPbdraw.hasCreateDate = YES;
  resultPbdraw.createDate = value;
  return self;
}
- (PBDrawBuilder*) clearCreateDate {
  resultPbdraw.hasCreateDate = NO;
  resultPbdraw.createDate = 0;
  return self;
}
- (BOOL) hasNickName {
  return resultPbdraw.hasNickName;
}
- (NSString*) nickName {
  return resultPbdraw.nickName;
}
- (PBDrawBuilder*) setNickName:(NSString*) value {
  resultPbdraw.hasNickName = YES;
  resultPbdraw.nickName = value;
  return self;
}
- (PBDrawBuilder*) clearNickName {
  resultPbdraw.hasNickName = NO;
  resultPbdraw.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbdraw.hasAvatar;
}
- (NSString*) avatar {
  return resultPbdraw.avatar;
}
- (PBDrawBuilder*) setAvatar:(NSString*) value {
  resultPbdraw.hasAvatar = YES;
  resultPbdraw.avatar = value;
  return self;
}
- (PBDrawBuilder*) clearAvatar {
  resultPbdraw.hasAvatar = NO;
  resultPbdraw.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultPbdraw.hasGender;
}
- (BOOL) gender {
  return resultPbdraw.gender;
}
- (PBDrawBuilder*) setGender:(BOOL) value {
  resultPbdraw.hasGender = YES;
  resultPbdraw.gender = value;
  return self;
}
- (PBDrawBuilder*) clearGender {
  resultPbdraw.hasGender = NO;
  resultPbdraw.gender = NO;
  return self;
}
- (BOOL) hasVersion {
  return resultPbdraw.hasVersion;
}
- (SInt32) version {
  return resultPbdraw.version;
}
- (PBDrawBuilder*) setVersion:(SInt32) value {
  resultPbdraw.hasVersion = YES;
  resultPbdraw.version = value;
  return self;
}
- (PBDrawBuilder*) clearVersion {
  resultPbdraw.hasVersion = NO;
  resultPbdraw.version = 0;
  return self;
}
- (NSMutableArray *)drawData {
  return resultPbdraw.drawDataArray;
}
- (PBDrawAction*)drawDataAtIndex:(NSUInteger)index {
  return [resultPbdraw drawDataAtIndex:index];
}
- (PBDrawBuilder *)addDrawData:(PBDrawAction*)value {
  if (resultPbdraw.drawDataArray == nil) {
    resultPbdraw.drawDataArray = [[NSMutableArray alloc]init];
  }
  [resultPbdraw.drawDataArray addObject:value];
  return self;
}
- (PBDrawBuilder *)setDrawDataArray:(NSArray *)array {
  resultPbdraw.drawDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDrawBuilder *)clearDrawData {
  resultPbdraw.drawDataArray = nil;
  return self;
}
- (BOOL) hasOpusId {
  return resultPbdraw.hasOpusId;
}
- (NSString*) opusId {
  return resultPbdraw.opusId;
}
- (PBDrawBuilder*) setOpusId:(NSString*) value {
  resultPbdraw.hasOpusId = YES;
  resultPbdraw.opusId = value;
  return self;
}
- (PBDrawBuilder*) clearOpusId {
  resultPbdraw.hasOpusId = NO;
  resultPbdraw.opusId = @"";
  return self;
}
- (BOOL) hasScore {
  return resultPbdraw.hasScore;
}
- (SInt32) score {
  return resultPbdraw.score;
}
- (PBDrawBuilder*) setScore:(SInt32) value {
  resultPbdraw.hasScore = YES;
  resultPbdraw.score = value;
  return self;
}
- (PBDrawBuilder*) clearScore {
  resultPbdraw.hasScore = NO;
  resultPbdraw.score = 0;
  return self;
}
- (BOOL) hasIsCompressed {
  return resultPbdraw.hasIsCompressed;
}
- (BOOL) isCompressed {
  return resultPbdraw.isCompressed;
}
- (PBDrawBuilder*) setIsCompressed:(BOOL) value {
  resultPbdraw.hasIsCompressed = YES;
  resultPbdraw.isCompressed = value;
  return self;
}
- (PBDrawBuilder*) clearIsCompressed {
  resultPbdraw.hasIsCompressed = NO;
  resultPbdraw.isCompressed = YES;
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbdraw.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbdraw.canvasSize;
}
- (PBDrawBuilder*) setCanvasSize:(PBSize*) value {
  resultPbdraw.hasCanvasSize = YES;
  resultPbdraw.canvasSize = value;
  return self;
}
- (PBDrawBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBDrawBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbdraw.hasCanvasSize &&
      resultPbdraw.canvasSize != [PBSize defaultInstance]) {
    resultPbdraw.canvasSize =
      [[[PBSize builderWithPrototype:resultPbdraw.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbdraw.canvasSize = value;
  }
  resultPbdraw.hasCanvasSize = YES;
  return self;
}
- (PBDrawBuilder*) clearCanvasSize {
  resultPbdraw.hasCanvasSize = NO;
  resultPbdraw.canvasSize = [PBSize defaultInstance];
  return self;
}
- (NSMutableArray *)layer {
  return resultPbdraw.layerArray;
}
- (PBLayer*)layerAtIndex:(NSUInteger)index {
  return [resultPbdraw layerAtIndex:index];
}
- (PBDrawBuilder *)addLayer:(PBLayer*)value {
  if (resultPbdraw.layerArray == nil) {
    resultPbdraw.layerArray = [[NSMutableArray alloc]init];
  }
  [resultPbdraw.layerArray addObject:value];
  return self;
}
- (PBDrawBuilder *)setLayerArray:(NSArray *)array {
  resultPbdraw.layerArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDrawBuilder *)clearLayer {
  resultPbdraw.layerArray = nil;
  return self;
}
- (BOOL) hasStrokes {
  return resultPbdraw.hasStrokes;
}
- (SInt64) strokes {
  return resultPbdraw.strokes;
}
- (PBDrawBuilder*) setStrokes:(SInt64) value {
  resultPbdraw.hasStrokes = YES;
  resultPbdraw.strokes = value;
  return self;
}
- (PBDrawBuilder*) clearStrokes {
  resultPbdraw.hasStrokes = NO;
  resultPbdraw.strokes = 0L;
  return self;
}
- (BOOL) hasSpendTime {
  return resultPbdraw.hasSpendTime;
}
- (SInt32) spendTime {
  return resultPbdraw.spendTime;
}
- (PBDrawBuilder*) setSpendTime:(SInt32) value {
  resultPbdraw.hasSpendTime = YES;
  resultPbdraw.spendTime = value;
  return self;
}
- (PBDrawBuilder*) clearSpendTime {
  resultPbdraw.hasSpendTime = NO;
  resultPbdraw.spendTime = 0;
  return self;
}
- (BOOL) hasCompleteDate {
  return resultPbdraw.hasCompleteDate;
}
- (SInt32) completeDate {
  return resultPbdraw.completeDate;
}
- (PBDrawBuilder*) setCompleteDate:(SInt32) value {
  resultPbdraw.hasCompleteDate = YES;
  resultPbdraw.completeDate = value;
  return self;
}
- (PBDrawBuilder*) clearCompleteDate {
  resultPbdraw.hasCompleteDate = NO;
  resultPbdraw.completeDate = 0;
  return self;
}
@end

@interface PBFeedTimes ()
@property SInt32 type;
@property SInt32 value;
@end

@implementation PBFeedTimes

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.value = 0;
  }
  return self;
}
static PBFeedTimes* defaultPBFeedTimesInstance = nil;
+ (void) initialize {
  if (self == [PBFeedTimes class]) {
    defaultPBFeedTimesInstance = [[PBFeedTimes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFeedTimesInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFeedTimesInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasValue) {
    size_ += computeInt32Size(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFeedTimes*) parseFromData:(NSData*) data {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromData:data] build];
}
+ (PBFeedTimes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromInputStream:input] build];
}
+ (PBFeedTimes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeedTimes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeedTimes*)[[[PBFeedTimes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedTimesBuilder*) builder {
  return [[PBFeedTimesBuilder alloc] init];
}
+ (PBFeedTimesBuilder*) builderWithPrototype:(PBFeedTimes*) prototype {
  return [[PBFeedTimes builder] mergeFrom:prototype];
}
- (PBFeedTimesBuilder*) builder {
  return [PBFeedTimes builder];
}
- (PBFeedTimesBuilder*) toBuilder {
  return [PBFeedTimes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFeedTimes class]]) {
    return NO;
  }
  PBFeedTimes *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFeedTimesBuilder()
@property (strong) PBFeedTimes* resultPbfeedTimes;
@end

@implementation PBFeedTimesBuilder
@synthesize resultPbfeedTimes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbfeedTimes = [[PBFeedTimes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbfeedTimes;
}
- (PBFeedTimesBuilder*) clear {
  self.resultPbfeedTimes = [[PBFeedTimes alloc] init];
  return self;
}
- (PBFeedTimesBuilder*) clone {
  return [PBFeedTimes builderWithPrototype:resultPbfeedTimes];
}
- (PBFeedTimes*) defaultInstance {
  return [PBFeedTimes defaultInstance];
}
- (PBFeedTimes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeedTimes*) buildPartial {
  PBFeedTimes* returnMe = resultPbfeedTimes;
  self.resultPbfeedTimes = nil;
  return returnMe;
}
- (PBFeedTimesBuilder*) mergeFrom:(PBFeedTimes*) other {
  if (other == [PBFeedTimes defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedTimesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedTimesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbfeedTimes.hasType;
}
- (SInt32) type {
  return resultPbfeedTimes.type;
}
- (PBFeedTimesBuilder*) setType:(SInt32) value {
  resultPbfeedTimes.hasType = YES;
  resultPbfeedTimes.type = value;
  return self;
}
- (PBFeedTimesBuilder*) clearType {
  resultPbfeedTimes.hasType = NO;
  resultPbfeedTimes.type = 0;
  return self;
}
- (BOOL) hasValue {
  return resultPbfeedTimes.hasValue;
}
- (SInt32) value {
  return resultPbfeedTimes.value;
}
- (PBFeedTimesBuilder*) setValue:(SInt32) value {
  resultPbfeedTimes.hasValue = YES;
  resultPbfeedTimes.value = value;
  return self;
}
- (PBFeedTimesBuilder*) clearValue {
  resultPbfeedTimes.hasValue = NO;
  resultPbfeedTimes.value = 0;
  return self;
}
@end

@interface PBCommentInfo ()
@property SInt32 type;
@property (strong) NSString* comment;
@property (strong) NSString* actionId;
@property (strong) NSString* actionUserId;
@property (strong) NSString* actionNickName;
@property (strong) NSString* actionSummary;
@end

@implementation PBCommentInfo

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) _value_ {
  hasComment_ = !!_value_;
}
@synthesize comment;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) _value_ {
  hasActionId_ = !!_value_;
}
@synthesize actionId;
- (BOOL) hasActionUserId {
  return !!hasActionUserId_;
}
- (void) setHasActionUserId:(BOOL) _value_ {
  hasActionUserId_ = !!_value_;
}
@synthesize actionUserId;
- (BOOL) hasActionNickName {
  return !!hasActionNickName_;
}
- (void) setHasActionNickName:(BOOL) _value_ {
  hasActionNickName_ = !!_value_;
}
@synthesize actionNickName;
- (BOOL) hasActionSummary {
  return !!hasActionSummary_;
}
- (void) setHasActionSummary:(BOOL) _value_ {
  hasActionSummary_ = !!_value_;
}
@synthesize actionSummary;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.comment = @"";
    self.actionId = @"";
    self.actionUserId = @"";
    self.actionNickName = @"";
    self.actionSummary = @"";
  }
  return self;
}
static PBCommentInfo* defaultPBCommentInfoInstance = nil;
+ (void) initialize {
  if (self == [PBCommentInfo class]) {
    defaultPBCommentInfoInstance = [[PBCommentInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCommentInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCommentInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasActionId) {
    return NO;
  }
  if (!self.hasActionUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasComment) {
    [output writeString:2 value:self.comment];
  }
  if (self.hasActionId) {
    [output writeString:3 value:self.actionId];
  }
  if (self.hasActionUserId) {
    [output writeString:4 value:self.actionUserId];
  }
  if (self.hasActionNickName) {
    [output writeString:5 value:self.actionNickName];
  }
  if (self.hasActionSummary) {
    [output writeString:6 value:self.actionSummary];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasComment) {
    size_ += computeStringSize(2, self.comment);
  }
  if (self.hasActionId) {
    size_ += computeStringSize(3, self.actionId);
  }
  if (self.hasActionUserId) {
    size_ += computeStringSize(4, self.actionUserId);
  }
  if (self.hasActionNickName) {
    size_ += computeStringSize(5, self.actionNickName);
  }
  if (self.hasActionSummary) {
    size_ += computeStringSize(6, self.actionSummary);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCommentInfo*) parseFromData:(NSData*) data {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromData:data] build];
}
+ (PBCommentInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromInputStream:input] build];
}
+ (PBCommentInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBCommentInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCommentInfo*)[[[PBCommentInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentInfoBuilder*) builder {
  return [[PBCommentInfoBuilder alloc] init];
}
+ (PBCommentInfoBuilder*) builderWithPrototype:(PBCommentInfo*) prototype {
  return [[PBCommentInfo builder] mergeFrom:prototype];
}
- (PBCommentInfoBuilder*) builder {
  return [PBCommentInfo builder];
}
- (PBCommentInfoBuilder*) toBuilder {
  return [PBCommentInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", self.actionId];
  }
  if (self.hasActionUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionUserId", self.actionUserId];
  }
  if (self.hasActionNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionNickName", self.actionNickName];
  }
  if (self.hasActionSummary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionSummary", self.actionSummary];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCommentInfo class]]) {
    return NO;
  }
  PBCommentInfo *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || [self.actionId isEqual:otherMessage.actionId]) &&
      self.hasActionUserId == otherMessage.hasActionUserId &&
      (!self.hasActionUserId || [self.actionUserId isEqual:otherMessage.actionUserId]) &&
      self.hasActionNickName == otherMessage.hasActionNickName &&
      (!self.hasActionNickName || [self.actionNickName isEqual:otherMessage.actionNickName]) &&
      self.hasActionSummary == otherMessage.hasActionSummary &&
      (!self.hasActionSummary || [self.actionSummary isEqual:otherMessage.actionSummary]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [self.actionId hash];
  }
  if (self.hasActionUserId) {
    hashCode = hashCode * 31 + [self.actionUserId hash];
  }
  if (self.hasActionNickName) {
    hashCode = hashCode * 31 + [self.actionNickName hash];
  }
  if (self.hasActionSummary) {
    hashCode = hashCode * 31 + [self.actionSummary hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCommentInfoBuilder()
@property (strong) PBCommentInfo* resultPbcommentInfo;
@end

@implementation PBCommentInfoBuilder
@synthesize resultPbcommentInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcommentInfo = [[PBCommentInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcommentInfo;
}
- (PBCommentInfoBuilder*) clear {
  self.resultPbcommentInfo = [[PBCommentInfo alloc] init];
  return self;
}
- (PBCommentInfoBuilder*) clone {
  return [PBCommentInfo builderWithPrototype:resultPbcommentInfo];
}
- (PBCommentInfo*) defaultInstance {
  return [PBCommentInfo defaultInstance];
}
- (PBCommentInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCommentInfo*) buildPartial {
  PBCommentInfo* returnMe = resultPbcommentInfo;
  self.resultPbcommentInfo = nil;
  return returnMe;
}
- (PBCommentInfoBuilder*) mergeFrom:(PBCommentInfo*) other {
  if (other == [PBCommentInfo defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasActionUserId) {
    [self setActionUserId:other.actionUserId];
  }
  if (other.hasActionNickName) {
    [self setActionNickName:other.actionNickName];
  }
  if (other.hasActionSummary) {
    [self setActionSummary:other.actionSummary];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCommentInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCommentInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setComment:[input readString]];
        break;
      }
      case 26: {
        [self setActionId:[input readString]];
        break;
      }
      case 34: {
        [self setActionUserId:[input readString]];
        break;
      }
      case 42: {
        [self setActionNickName:[input readString]];
        break;
      }
      case 50: {
        [self setActionSummary:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbcommentInfo.hasType;
}
- (SInt32) type {
  return resultPbcommentInfo.type;
}
- (PBCommentInfoBuilder*) setType:(SInt32) value {
  resultPbcommentInfo.hasType = YES;
  resultPbcommentInfo.type = value;
  return self;
}
- (PBCommentInfoBuilder*) clearType {
  resultPbcommentInfo.hasType = NO;
  resultPbcommentInfo.type = 0;
  return self;
}
- (BOOL) hasComment {
  return resultPbcommentInfo.hasComment;
}
- (NSString*) comment {
  return resultPbcommentInfo.comment;
}
- (PBCommentInfoBuilder*) setComment:(NSString*) value {
  resultPbcommentInfo.hasComment = YES;
  resultPbcommentInfo.comment = value;
  return self;
}
- (PBCommentInfoBuilder*) clearComment {
  resultPbcommentInfo.hasComment = NO;
  resultPbcommentInfo.comment = @"";
  return self;
}
- (BOOL) hasActionId {
  return resultPbcommentInfo.hasActionId;
}
- (NSString*) actionId {
  return resultPbcommentInfo.actionId;
}
- (PBCommentInfoBuilder*) setActionId:(NSString*) value {
  resultPbcommentInfo.hasActionId = YES;
  resultPbcommentInfo.actionId = value;
  return self;
}
- (PBCommentInfoBuilder*) clearActionId {
  resultPbcommentInfo.hasActionId = NO;
  resultPbcommentInfo.actionId = @"";
  return self;
}
- (BOOL) hasActionUserId {
  return resultPbcommentInfo.hasActionUserId;
}
- (NSString*) actionUserId {
  return resultPbcommentInfo.actionUserId;
}
- (PBCommentInfoBuilder*) setActionUserId:(NSString*) value {
  resultPbcommentInfo.hasActionUserId = YES;
  resultPbcommentInfo.actionUserId = value;
  return self;
}
- (PBCommentInfoBuilder*) clearActionUserId {
  resultPbcommentInfo.hasActionUserId = NO;
  resultPbcommentInfo.actionUserId = @"";
  return self;
}
- (BOOL) hasActionNickName {
  return resultPbcommentInfo.hasActionNickName;
}
- (NSString*) actionNickName {
  return resultPbcommentInfo.actionNickName;
}
- (PBCommentInfoBuilder*) setActionNickName:(NSString*) value {
  resultPbcommentInfo.hasActionNickName = YES;
  resultPbcommentInfo.actionNickName = value;
  return self;
}
- (PBCommentInfoBuilder*) clearActionNickName {
  resultPbcommentInfo.hasActionNickName = NO;
  resultPbcommentInfo.actionNickName = @"";
  return self;
}
- (BOOL) hasActionSummary {
  return resultPbcommentInfo.hasActionSummary;
}
- (NSString*) actionSummary {
  return resultPbcommentInfo.actionSummary;
}
- (PBCommentInfoBuilder*) setActionSummary:(NSString*) value {
  resultPbcommentInfo.hasActionSummary = YES;
  resultPbcommentInfo.actionSummary = value;
  return self;
}
- (PBCommentInfoBuilder*) clearActionSummary {
  resultPbcommentInfo.hasActionSummary = NO;
  resultPbcommentInfo.actionSummary = @"";
  return self;
}
@end

@interface PBLearnDraw ()
@property (strong) NSString* opusId;
@property SInt32 type;
@property SInt32 price;
@property SInt32 boughtCount;
@end

@implementation PBLearnDraw

- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasBoughtCount {
  return !!hasBoughtCount_;
}
- (void) setHasBoughtCount:(BOOL) _value_ {
  hasBoughtCount_ = !!_value_;
}
@synthesize boughtCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.opusId = @"";
    self.type = 0;
    self.price = 0;
    self.boughtCount = 0;
  }
  return self;
}
static PBLearnDraw* defaultPBLearnDrawInstance = nil;
+ (void) initialize {
  if (self == [PBLearnDraw class]) {
    defaultPBLearnDrawInstance = [[PBLearnDraw alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBLearnDrawInstance;
}
- (instancetype) defaultInstance {
  return defaultPBLearnDrawInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOpusId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOpusId) {
    [output writeString:1 value:self.opusId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasPrice) {
    [output writeInt32:3 value:self.price];
  }
  if (self.hasBoughtCount) {
    [output writeInt32:4 value:self.boughtCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOpusId) {
    size_ += computeStringSize(1, self.opusId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasPrice) {
    size_ += computeInt32Size(3, self.price);
  }
  if (self.hasBoughtCount) {
    size_ += computeInt32Size(4, self.boughtCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBLearnDraw*) parseFromData:(NSData*) data {
  return (PBLearnDraw*)[[[PBLearnDraw builder] mergeFromData:data] build];
}
+ (PBLearnDraw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLearnDraw*)[[[PBLearnDraw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLearnDraw*) parseFromInputStream:(NSInputStream*) input {
  return (PBLearnDraw*)[[[PBLearnDraw builder] mergeFromInputStream:input] build];
}
+ (PBLearnDraw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLearnDraw*)[[[PBLearnDraw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLearnDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLearnDraw*)[[[PBLearnDraw builder] mergeFromCodedInputStream:input] build];
}
+ (PBLearnDraw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLearnDraw*)[[[PBLearnDraw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLearnDrawBuilder*) builder {
  return [[PBLearnDrawBuilder alloc] init];
}
+ (PBLearnDrawBuilder*) builderWithPrototype:(PBLearnDraw*) prototype {
  return [[PBLearnDraw builder] mergeFrom:prototype];
}
- (PBLearnDrawBuilder*) builder {
  return [PBLearnDraw builder];
}
- (PBLearnDrawBuilder*) toBuilder {
  return [PBLearnDraw builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  if (self.hasBoughtCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boughtCount", [NSNumber numberWithInteger:self.boughtCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBLearnDraw class]]) {
    return NO;
  }
  PBLearnDraw *otherMessage = other;
  return
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasBoughtCount == otherMessage.hasBoughtCount &&
      (!self.hasBoughtCount || self.boughtCount == otherMessage.boughtCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  if (self.hasBoughtCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.boughtCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBLearnDrawBuilder()
@property (strong) PBLearnDraw* resultPblearnDraw;
@end

@implementation PBLearnDrawBuilder
@synthesize resultPblearnDraw;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPblearnDraw = [[PBLearnDraw alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPblearnDraw;
}
- (PBLearnDrawBuilder*) clear {
  self.resultPblearnDraw = [[PBLearnDraw alloc] init];
  return self;
}
- (PBLearnDrawBuilder*) clone {
  return [PBLearnDraw builderWithPrototype:resultPblearnDraw];
}
- (PBLearnDraw*) defaultInstance {
  return [PBLearnDraw defaultInstance];
}
- (PBLearnDraw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLearnDraw*) buildPartial {
  PBLearnDraw* returnMe = resultPblearnDraw;
  self.resultPblearnDraw = nil;
  return returnMe;
}
- (PBLearnDrawBuilder*) mergeFrom:(PBLearnDraw*) other {
  if (other == [PBLearnDraw defaultInstance]) {
    return self;
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasBoughtCount) {
    [self setBoughtCount:other.boughtCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLearnDrawBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLearnDrawBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setOpusId:[input readString]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 24: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 32: {
        [self setBoughtCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOpusId {
  return resultPblearnDraw.hasOpusId;
}
- (NSString*) opusId {
  return resultPblearnDraw.opusId;
}
- (PBLearnDrawBuilder*) setOpusId:(NSString*) value {
  resultPblearnDraw.hasOpusId = YES;
  resultPblearnDraw.opusId = value;
  return self;
}
- (PBLearnDrawBuilder*) clearOpusId {
  resultPblearnDraw.hasOpusId = NO;
  resultPblearnDraw.opusId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPblearnDraw.hasType;
}
- (SInt32) type {
  return resultPblearnDraw.type;
}
- (PBLearnDrawBuilder*) setType:(SInt32) value {
  resultPblearnDraw.hasType = YES;
  resultPblearnDraw.type = value;
  return self;
}
- (PBLearnDrawBuilder*) clearType {
  resultPblearnDraw.hasType = NO;
  resultPblearnDraw.type = 0;
  return self;
}
- (BOOL) hasPrice {
  return resultPblearnDraw.hasPrice;
}
- (SInt32) price {
  return resultPblearnDraw.price;
}
- (PBLearnDrawBuilder*) setPrice:(SInt32) value {
  resultPblearnDraw.hasPrice = YES;
  resultPblearnDraw.price = value;
  return self;
}
- (PBLearnDrawBuilder*) clearPrice {
  resultPblearnDraw.hasPrice = NO;
  resultPblearnDraw.price = 0;
  return self;
}
- (BOOL) hasBoughtCount {
  return resultPblearnDraw.hasBoughtCount;
}
- (SInt32) boughtCount {
  return resultPblearnDraw.boughtCount;
}
- (PBLearnDrawBuilder*) setBoughtCount:(SInt32) value {
  resultPblearnDraw.hasBoughtCount = YES;
  resultPblearnDraw.boughtCount = value;
  return self;
}
- (PBLearnDrawBuilder*) clearBoughtCount {
  resultPblearnDraw.hasBoughtCount = NO;
  resultPblearnDraw.boughtCount = 0;
  return self;
}
@end

@interface PBLabelInfo ()
@property (strong) PBRect* frame;
@property SInt32 textColor;
@property Float32 textFont;
@property SInt32 style;
@property SInt32 textStrokeColor;
@end

@implementation PBLabelInfo

- (BOOL) hasFrame {
  return !!hasFrame_;
}
- (void) setHasFrame:(BOOL) _value_ {
  hasFrame_ = !!_value_;
}
@synthesize frame;
- (BOOL) hasTextColor {
  return !!hasTextColor_;
}
- (void) setHasTextColor:(BOOL) _value_ {
  hasTextColor_ = !!_value_;
}
@synthesize textColor;
- (BOOL) hasTextFont {
  return !!hasTextFont_;
}
- (void) setHasTextFont:(BOOL) _value_ {
  hasTextFont_ = !!_value_;
}
@synthesize textFont;
- (BOOL) hasStyle {
  return !!hasStyle_;
}
- (void) setHasStyle:(BOOL) _value_ {
  hasStyle_ = !!_value_;
}
@synthesize style;
- (BOOL) hasTextStrokeColor {
  return !!hasTextStrokeColor_;
}
- (void) setHasTextStrokeColor:(BOOL) _value_ {
  hasTextStrokeColor_ = !!_value_;
}
@synthesize textStrokeColor;
- (instancetype) init {
  if ((self = [super init])) {
    self.frame = [PBRect defaultInstance];
    self.textColor = 0;
    self.textFont = 0;
    self.style = 0;
    self.textStrokeColor = 0;
  }
  return self;
}
static PBLabelInfo* defaultPBLabelInfoInstance = nil;
+ (void) initialize {
  if (self == [PBLabelInfo class]) {
    defaultPBLabelInfoInstance = [[PBLabelInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBLabelInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBLabelInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFrame) {
    [output writeMessage:1 value:self.frame];
  }
  if (self.hasTextColor) {
    [output writeInt32:4 value:self.textColor];
  }
  if (self.hasTextFont) {
    [output writeFloat:5 value:self.textFont];
  }
  if (self.hasStyle) {
    [output writeInt32:20 value:self.style];
  }
  if (self.hasTextStrokeColor) {
    [output writeInt32:21 value:self.textStrokeColor];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFrame) {
    size_ += computeMessageSize(1, self.frame);
  }
  if (self.hasTextColor) {
    size_ += computeInt32Size(4, self.textColor);
  }
  if (self.hasTextFont) {
    size_ += computeFloatSize(5, self.textFont);
  }
  if (self.hasStyle) {
    size_ += computeInt32Size(20, self.style);
  }
  if (self.hasTextStrokeColor) {
    size_ += computeInt32Size(21, self.textStrokeColor);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBLabelInfo*) parseFromData:(NSData*) data {
  return (PBLabelInfo*)[[[PBLabelInfo builder] mergeFromData:data] build];
}
+ (PBLabelInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLabelInfo*)[[[PBLabelInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLabelInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBLabelInfo*)[[[PBLabelInfo builder] mergeFromInputStream:input] build];
}
+ (PBLabelInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLabelInfo*)[[[PBLabelInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLabelInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLabelInfo*)[[[PBLabelInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBLabelInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLabelInfo*)[[[PBLabelInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLabelInfoBuilder*) builder {
  return [[PBLabelInfoBuilder alloc] init];
}
+ (PBLabelInfoBuilder*) builderWithPrototype:(PBLabelInfo*) prototype {
  return [[PBLabelInfo builder] mergeFrom:prototype];
}
- (PBLabelInfoBuilder*) builder {
  return [PBLabelInfo builder];
}
- (PBLabelInfoBuilder*) toBuilder {
  return [PBLabelInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFrame) {
    [output appendFormat:@"%@%@ {\n", indent, @"frame"];
    [self.frame writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTextColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textColor", [NSNumber numberWithInteger:self.textColor]];
  }
  if (self.hasTextFont) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textFont", [NSNumber numberWithFloat:self.textFont]];
  }
  if (self.hasStyle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"style", [NSNumber numberWithInteger:self.style]];
  }
  if (self.hasTextStrokeColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textStrokeColor", [NSNumber numberWithInteger:self.textStrokeColor]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBLabelInfo class]]) {
    return NO;
  }
  PBLabelInfo *otherMessage = other;
  return
      self.hasFrame == otherMessage.hasFrame &&
      (!self.hasFrame || [self.frame isEqual:otherMessage.frame]) &&
      self.hasTextColor == otherMessage.hasTextColor &&
      (!self.hasTextColor || self.textColor == otherMessage.textColor) &&
      self.hasTextFont == otherMessage.hasTextFont &&
      (!self.hasTextFont || self.textFont == otherMessage.textFont) &&
      self.hasStyle == otherMessage.hasStyle &&
      (!self.hasStyle || self.style == otherMessage.style) &&
      self.hasTextStrokeColor == otherMessage.hasTextStrokeColor &&
      (!self.hasTextStrokeColor || self.textStrokeColor == otherMessage.textStrokeColor) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFrame) {
    hashCode = hashCode * 31 + [self.frame hash];
  }
  if (self.hasTextColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.textColor] hash];
  }
  if (self.hasTextFont) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.textFont] hash];
  }
  if (self.hasStyle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.style] hash];
  }
  if (self.hasTextStrokeColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.textStrokeColor] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBLabelInfoBuilder()
@property (strong) PBLabelInfo* resultPblabelInfo;
@end

@implementation PBLabelInfoBuilder
@synthesize resultPblabelInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPblabelInfo = [[PBLabelInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPblabelInfo;
}
- (PBLabelInfoBuilder*) clear {
  self.resultPblabelInfo = [[PBLabelInfo alloc] init];
  return self;
}
- (PBLabelInfoBuilder*) clone {
  return [PBLabelInfo builderWithPrototype:resultPblabelInfo];
}
- (PBLabelInfo*) defaultInstance {
  return [PBLabelInfo defaultInstance];
}
- (PBLabelInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLabelInfo*) buildPartial {
  PBLabelInfo* returnMe = resultPblabelInfo;
  self.resultPblabelInfo = nil;
  return returnMe;
}
- (PBLabelInfoBuilder*) mergeFrom:(PBLabelInfo*) other {
  if (other == [PBLabelInfo defaultInstance]) {
    return self;
  }
  if (other.hasFrame) {
    [self mergeFrame:other.frame];
  }
  if (other.hasTextColor) {
    [self setTextColor:other.textColor];
  }
  if (other.hasTextFont) {
    [self setTextFont:other.textFont];
  }
  if (other.hasStyle) {
    [self setStyle:other.style];
  }
  if (other.hasTextStrokeColor) {
    [self setTextStrokeColor:other.textStrokeColor];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLabelInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLabelInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRectBuilder* subBuilder = [PBRect builder];
        if (self.hasFrame) {
          [subBuilder mergeFrom:self.frame];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFrame:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setTextColor:[input readInt32]];
        break;
      }
      case 45: {
        [self setTextFont:[input readFloat]];
        break;
      }
      case 160: {
        [self setStyle:[input readInt32]];
        break;
      }
      case 168: {
        [self setTextStrokeColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFrame {
  return resultPblabelInfo.hasFrame;
}
- (PBRect*) frame {
  return resultPblabelInfo.frame;
}
- (PBLabelInfoBuilder*) setFrame:(PBRect*) value {
  resultPblabelInfo.hasFrame = YES;
  resultPblabelInfo.frame = value;
  return self;
}
- (PBLabelInfoBuilder*) setFrameBuilder:(PBRectBuilder*) builderForValue {
  return [self setFrame:[builderForValue build]];
}
- (PBLabelInfoBuilder*) mergeFrame:(PBRect*) value {
  if (resultPblabelInfo.hasFrame &&
      resultPblabelInfo.frame != [PBRect defaultInstance]) {
    resultPblabelInfo.frame =
      [[[PBRect builderWithPrototype:resultPblabelInfo.frame] mergeFrom:value] buildPartial];
  } else {
    resultPblabelInfo.frame = value;
  }
  resultPblabelInfo.hasFrame = YES;
  return self;
}
- (PBLabelInfoBuilder*) clearFrame {
  resultPblabelInfo.hasFrame = NO;
  resultPblabelInfo.frame = [PBRect defaultInstance];
  return self;
}
- (BOOL) hasTextColor {
  return resultPblabelInfo.hasTextColor;
}
- (SInt32) textColor {
  return resultPblabelInfo.textColor;
}
- (PBLabelInfoBuilder*) setTextColor:(SInt32) value {
  resultPblabelInfo.hasTextColor = YES;
  resultPblabelInfo.textColor = value;
  return self;
}
- (PBLabelInfoBuilder*) clearTextColor {
  resultPblabelInfo.hasTextColor = NO;
  resultPblabelInfo.textColor = 0;
  return self;
}
- (BOOL) hasTextFont {
  return resultPblabelInfo.hasTextFont;
}
- (Float32) textFont {
  return resultPblabelInfo.textFont;
}
- (PBLabelInfoBuilder*) setTextFont:(Float32) value {
  resultPblabelInfo.hasTextFont = YES;
  resultPblabelInfo.textFont = value;
  return self;
}
- (PBLabelInfoBuilder*) clearTextFont {
  resultPblabelInfo.hasTextFont = NO;
  resultPblabelInfo.textFont = 0;
  return self;
}
- (BOOL) hasStyle {
  return resultPblabelInfo.hasStyle;
}
- (SInt32) style {
  return resultPblabelInfo.style;
}
- (PBLabelInfoBuilder*) setStyle:(SInt32) value {
  resultPblabelInfo.hasStyle = YES;
  resultPblabelInfo.style = value;
  return self;
}
- (PBLabelInfoBuilder*) clearStyle {
  resultPblabelInfo.hasStyle = NO;
  resultPblabelInfo.style = 0;
  return self;
}
- (BOOL) hasTextStrokeColor {
  return resultPblabelInfo.hasTextStrokeColor;
}
- (SInt32) textStrokeColor {
  return resultPblabelInfo.textStrokeColor;
}
- (PBLabelInfoBuilder*) setTextStrokeColor:(SInt32) value {
  resultPblabelInfo.hasTextStrokeColor = YES;
  resultPblabelInfo.textStrokeColor = value;
  return self;
}
- (PBLabelInfoBuilder*) clearTextStrokeColor {
  resultPblabelInfo.hasTextStrokeColor = NO;
  resultPblabelInfo.textStrokeColor = 0;
  return self;
}
@end

@interface PBFeed ()
@property (strong) NSString* feedId;
@property (strong) NSString* userId;
@property SInt32 actionType;
@property SInt32 createDate;
@property SInt32 deviceType;
@property (strong) NSString* deviceName;
@property (strong) NSString* gameId;
@property PBOpusCategoryType category;
@property (strong) NSString* nickName;
@property (strong) NSString* avatar;
@property BOOL gender;
@property (strong) NSString* signature;
@property SInt32 vip;
@property (strong) PBDraw* drawData;
@property (strong) NSString* targetUserId;
@property (strong) NSString* targetUserNickName;
@property Float64 historyScore;
@property (strong) NSString* opusDesc;
@property (strong) NSString* drawDataUrl;
@property (strong) NSMutableArray * tagsArray;
@property SInt32 spendTime;
@property (strong) NSString* opusId;
@property BOOL isCorrect;
@property SInt32 score;
@property (strong) NSMutableArray * guessWordsArray;
@property SInt32 opusStatus;
@property (strong) NSString* comment;
@property (strong) PBCommentInfo* commentInfo;
@property SInt32 matchTimes;
@property SInt32 correctTimes;
@property SInt32 guessTimes;
@property SInt32 commentTimes;
@property (strong) NSMutableArray * feedTimesArray;
@property (strong) NSString* opusCreatorUserId;
@property (strong) NSString* opusCreatorNickName;
@property BOOL opusCreatorGender;
@property (strong) NSString* opusCreatorAvatar;
@property (strong) NSString* opusWord;
@property (strong) NSString* opusImage;
@property (strong) NSString* opusThumbImage;
@property (strong) NSString* dataUrl;
@property (strong) NSString* bgImageUrl;
@property (strong) NSString* bgImageName;
@property (strong) NSString* contestId;
@property Float64 contestScore;
@property (strong) NSMutableArray * rankInfoArray;
@property SInt32 rankInTop;
@property (strong) PBLearnDraw* learnDraw;
@property (strong) PBSingOpus* sing;
@property (strong) PBLabelInfo* descLabelInfo;
@property (strong) PBSize* canvasSize;
@property Float32 bgImageWidth;
@property Float32 bgImageHeight;
@property SInt64 strokes;
@property SInt32 draftCompleteDate;
@property SInt32 draftCreateDate;
@property (strong) NSMutableArray * opusClassArray;
@property (strong) NSMutableArray * opusClassIdsArray;
@property SInt32 stageScore;
@property SInt32 stageRank;
@end

@implementation PBFeed

- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) _value_ {
  hasFeedId_ = !!_value_;
}
@synthesize feedId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasActionType {
  return !!hasActionType_;
}
- (void) setHasActionType:(BOOL) _value_ {
  hasActionType_ = !!_value_;
}
@synthesize actionType;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) _value_ {
  hasDeviceName_ = !!_value_;
}
@synthesize deviceName;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
- (BOOL) gender {
  return !!gender_;
}
- (void) setGender:(BOOL) _value_ {
  gender_ = !!_value_;
}
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) _value_ {
  hasSignature_ = !!_value_;
}
@synthesize signature;
- (BOOL) hasVip {
  return !!hasVip_;
}
- (void) setHasVip:(BOOL) _value_ {
  hasVip_ = !!_value_;
}
@synthesize vip;
- (BOOL) hasDrawData {
  return !!hasDrawData_;
}
- (void) setHasDrawData:(BOOL) _value_ {
  hasDrawData_ = !!_value_;
}
@synthesize drawData;
- (BOOL) hasTargetUserId {
  return !!hasTargetUserId_;
}
- (void) setHasTargetUserId:(BOOL) _value_ {
  hasTargetUserId_ = !!_value_;
}
@synthesize targetUserId;
- (BOOL) hasTargetUserNickName {
  return !!hasTargetUserNickName_;
}
- (void) setHasTargetUserNickName:(BOOL) _value_ {
  hasTargetUserNickName_ = !!_value_;
}
@synthesize targetUserNickName;
- (BOOL) hasHistoryScore {
  return !!hasHistoryScore_;
}
- (void) setHasHistoryScore:(BOOL) _value_ {
  hasHistoryScore_ = !!_value_;
}
@synthesize historyScore;
- (BOOL) hasOpusDesc {
  return !!hasOpusDesc_;
}
- (void) setHasOpusDesc:(BOOL) _value_ {
  hasOpusDesc_ = !!_value_;
}
@synthesize opusDesc;
- (BOOL) hasDrawDataUrl {
  return !!hasDrawDataUrl_;
}
- (void) setHasDrawDataUrl:(BOOL) _value_ {
  hasDrawDataUrl_ = !!_value_;
}
@synthesize drawDataUrl;
@synthesize tagsArray;
@dynamic tags;
- (BOOL) hasSpendTime {
  return !!hasSpendTime_;
}
- (void) setHasSpendTime:(BOOL) _value_ {
  hasSpendTime_ = !!_value_;
}
@synthesize spendTime;
- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasIsCorrect {
  return !!hasIsCorrect_;
}
- (void) setHasIsCorrect:(BOOL) _value_ {
  hasIsCorrect_ = !!_value_;
}
- (BOOL) isCorrect {
  return !!isCorrect_;
}
- (void) setIsCorrect:(BOOL) _value_ {
  isCorrect_ = !!_value_;
}
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
@synthesize guessWordsArray;
@dynamic guessWords;
- (BOOL) hasOpusStatus {
  return !!hasOpusStatus_;
}
- (void) setHasOpusStatus:(BOOL) _value_ {
  hasOpusStatus_ = !!_value_;
}
@synthesize opusStatus;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) _value_ {
  hasComment_ = !!_value_;
}
@synthesize comment;
- (BOOL) hasCommentInfo {
  return !!hasCommentInfo_;
}
- (void) setHasCommentInfo:(BOOL) _value_ {
  hasCommentInfo_ = !!_value_;
}
@synthesize commentInfo;
- (BOOL) hasMatchTimes {
  return !!hasMatchTimes_;
}
- (void) setHasMatchTimes:(BOOL) _value_ {
  hasMatchTimes_ = !!_value_;
}
@synthesize matchTimes;
- (BOOL) hasCorrectTimes {
  return !!hasCorrectTimes_;
}
- (void) setHasCorrectTimes:(BOOL) _value_ {
  hasCorrectTimes_ = !!_value_;
}
@synthesize correctTimes;
- (BOOL) hasGuessTimes {
  return !!hasGuessTimes_;
}
- (void) setHasGuessTimes:(BOOL) _value_ {
  hasGuessTimes_ = !!_value_;
}
@synthesize guessTimes;
- (BOOL) hasCommentTimes {
  return !!hasCommentTimes_;
}
- (void) setHasCommentTimes:(BOOL) _value_ {
  hasCommentTimes_ = !!_value_;
}
@synthesize commentTimes;
@synthesize feedTimesArray;
@dynamic feedTimes;
- (BOOL) hasOpusCreatorUserId {
  return !!hasOpusCreatorUserId_;
}
- (void) setHasOpusCreatorUserId:(BOOL) _value_ {
  hasOpusCreatorUserId_ = !!_value_;
}
@synthesize opusCreatorUserId;
- (BOOL) hasOpusCreatorNickName {
  return !!hasOpusCreatorNickName_;
}
- (void) setHasOpusCreatorNickName:(BOOL) _value_ {
  hasOpusCreatorNickName_ = !!_value_;
}
@synthesize opusCreatorNickName;
- (BOOL) hasOpusCreatorGender {
  return !!hasOpusCreatorGender_;
}
- (void) setHasOpusCreatorGender:(BOOL) _value_ {
  hasOpusCreatorGender_ = !!_value_;
}
- (BOOL) opusCreatorGender {
  return !!opusCreatorGender_;
}
- (void) setOpusCreatorGender:(BOOL) _value_ {
  opusCreatorGender_ = !!_value_;
}
- (BOOL) hasOpusCreatorAvatar {
  return !!hasOpusCreatorAvatar_;
}
- (void) setHasOpusCreatorAvatar:(BOOL) _value_ {
  hasOpusCreatorAvatar_ = !!_value_;
}
@synthesize opusCreatorAvatar;
- (BOOL) hasOpusWord {
  return !!hasOpusWord_;
}
- (void) setHasOpusWord:(BOOL) _value_ {
  hasOpusWord_ = !!_value_;
}
@synthesize opusWord;
- (BOOL) hasOpusImage {
  return !!hasOpusImage_;
}
- (void) setHasOpusImage:(BOOL) _value_ {
  hasOpusImage_ = !!_value_;
}
@synthesize opusImage;
- (BOOL) hasOpusThumbImage {
  return !!hasOpusThumbImage_;
}
- (void) setHasOpusThumbImage:(BOOL) _value_ {
  hasOpusThumbImage_ = !!_value_;
}
@synthesize opusThumbImage;
- (BOOL) hasDataUrl {
  return !!hasDataUrl_;
}
- (void) setHasDataUrl:(BOOL) _value_ {
  hasDataUrl_ = !!_value_;
}
@synthesize dataUrl;
- (BOOL) hasBgImageUrl {
  return !!hasBgImageUrl_;
}
- (void) setHasBgImageUrl:(BOOL) _value_ {
  hasBgImageUrl_ = !!_value_;
}
@synthesize bgImageUrl;
- (BOOL) hasBgImageName {
  return !!hasBgImageName_;
}
- (void) setHasBgImageName:(BOOL) _value_ {
  hasBgImageName_ = !!_value_;
}
@synthesize bgImageName;
- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) _value_ {
  hasContestId_ = !!_value_;
}
@synthesize contestId;
- (BOOL) hasContestScore {
  return !!hasContestScore_;
}
- (void) setHasContestScore:(BOOL) _value_ {
  hasContestScore_ = !!_value_;
}
@synthesize contestScore;
@synthesize rankInfoArray;
@dynamic rankInfo;
- (BOOL) hasRankInTop {
  return !!hasRankInTop_;
}
- (void) setHasRankInTop:(BOOL) _value_ {
  hasRankInTop_ = !!_value_;
}
@synthesize rankInTop;
- (BOOL) hasLearnDraw {
  return !!hasLearnDraw_;
}
- (void) setHasLearnDraw:(BOOL) _value_ {
  hasLearnDraw_ = !!_value_;
}
@synthesize learnDraw;
- (BOOL) hasSing {
  return !!hasSing_;
}
- (void) setHasSing:(BOOL) _value_ {
  hasSing_ = !!_value_;
}
@synthesize sing;
- (BOOL) hasDescLabelInfo {
  return !!hasDescLabelInfo_;
}
- (void) setHasDescLabelInfo:(BOOL) _value_ {
  hasDescLabelInfo_ = !!_value_;
}
@synthesize descLabelInfo;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
- (BOOL) hasBgImageWidth {
  return !!hasBgImageWidth_;
}
- (void) setHasBgImageWidth:(BOOL) _value_ {
  hasBgImageWidth_ = !!_value_;
}
@synthesize bgImageWidth;
- (BOOL) hasBgImageHeight {
  return !!hasBgImageHeight_;
}
- (void) setHasBgImageHeight:(BOOL) _value_ {
  hasBgImageHeight_ = !!_value_;
}
@synthesize bgImageHeight;
- (BOOL) hasStrokes {
  return !!hasStrokes_;
}
- (void) setHasStrokes:(BOOL) _value_ {
  hasStrokes_ = !!_value_;
}
@synthesize strokes;
- (BOOL) hasDraftCompleteDate {
  return !!hasDraftCompleteDate_;
}
- (void) setHasDraftCompleteDate:(BOOL) _value_ {
  hasDraftCompleteDate_ = !!_value_;
}
@synthesize draftCompleteDate;
- (BOOL) hasDraftCreateDate {
  return !!hasDraftCreateDate_;
}
- (void) setHasDraftCreateDate:(BOOL) _value_ {
  hasDraftCreateDate_ = !!_value_;
}
@synthesize draftCreateDate;
@synthesize opusClassArray;
@dynamic opusClass;
@synthesize opusClassIdsArray;
@dynamic opusClassIds;
- (BOOL) hasStageScore {
  return !!hasStageScore_;
}
- (void) setHasStageScore:(BOOL) _value_ {
  hasStageScore_ = !!_value_;
}
@synthesize stageScore;
- (BOOL) hasStageRank {
  return !!hasStageRank_;
}
- (void) setHasStageRank:(BOOL) _value_ {
  hasStageRank_ = !!_value_;
}
@synthesize stageRank;
- (instancetype) init {
  if ((self = [super init])) {
    self.feedId = @"";
    self.userId = @"";
    self.actionType = 0;
    self.createDate = 0;
    self.deviceType = 0;
    self.deviceName = @"";
    self.gameId = @"";
    self.category = PBOpusCategoryTypeDrawCategory;
    self.nickName = @"";
    self.avatar = @"";
    self.gender = NO;
    self.signature = @"";
    self.vip = 0;
    self.drawData = [PBDraw defaultInstance];
    self.targetUserId = @"";
    self.targetUserNickName = @"";
    self.historyScore = 0;
    self.opusDesc = @"";
    self.drawDataUrl = @"";
    self.spendTime = 0;
    self.opusId = @"";
    self.isCorrect = NO;
    self.score = 0;
    self.opusStatus = 0;
    self.comment = @"";
    self.commentInfo = [PBCommentInfo defaultInstance];
    self.matchTimes = 0;
    self.correctTimes = 0;
    self.guessTimes = 0;
    self.commentTimes = 0;
    self.opusCreatorUserId = @"";
    self.opusCreatorNickName = @"";
    self.opusCreatorGender = NO;
    self.opusCreatorAvatar = @"";
    self.opusWord = @"";
    self.opusImage = @"";
    self.opusThumbImage = @"";
    self.dataUrl = @"";
    self.bgImageUrl = @"";
    self.bgImageName = @"";
    self.contestId = @"";
    self.contestScore = 0;
    self.rankInTop = 0;
    self.learnDraw = [PBLearnDraw defaultInstance];
    self.sing = [PBSingOpus defaultInstance];
    self.descLabelInfo = [PBLabelInfo defaultInstance];
    self.canvasSize = [PBSize defaultInstance];
    self.bgImageWidth = 0;
    self.bgImageHeight = 0;
    self.strokes = 0L;
    self.draftCompleteDate = 0;
    self.draftCreateDate = 0;
    self.stageScore = 0;
    self.stageRank = 0;
  }
  return self;
}
static PBFeed* defaultPBFeedInstance = nil;
+ (void) initialize {
  if (self == [PBFeed class]) {
    defaultPBFeedInstance = [[PBFeed alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFeedInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFeedInstance;
}
- (NSArray *)tags {
  return tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (NSArray *)guessWords {
  return guessWordsArray;
}
- (NSString*)guessWordsAtIndex:(NSUInteger)index {
  return [guessWordsArray objectAtIndex:index];
}
- (NSArray *)feedTimes {
  return feedTimesArray;
}
- (PBFeedTimes*)feedTimesAtIndex:(NSUInteger)index {
  return [feedTimesArray objectAtIndex:index];
}
- (NSArray *)rankInfo {
  return rankInfoArray;
}
- (PBOpusRank*)rankInfoAtIndex:(NSUInteger)index {
  return [rankInfoArray objectAtIndex:index];
}
- (NSArray *)opusClass {
  return opusClassArray;
}
- (PBClass*)opusClassAtIndex:(NSUInteger)index {
  return [opusClassArray objectAtIndex:index];
}
- (NSArray *)opusClassIds {
  return opusClassIdsArray;
}
- (NSString*)opusClassIdsAtIndex:(NSUInteger)index {
  return [opusClassIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasFeedId) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasActionType) {
    return NO;
  }
  if (!self.hasCreateDate) {
    return NO;
  }
  if (self.hasDrawData) {
    if (!self.drawData.isInitialized) {
      return NO;
    }
  }
  if (self.hasCommentInfo) {
    if (!self.commentInfo.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitfeedTimes = YES;
   [self.feedTimes enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfeedTimes = NO;
      *stop = YES;
    }
  }];
  if (!isInitfeedTimes) return isInitfeedTimes;
  __block BOOL isInitrankInfo = YES;
   [self.rankInfo enumerateObjectsUsingBlock:^(PBOpusRank *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrankInfo = NO;
      *stop = YES;
    }
  }];
  if (!isInitrankInfo) return isInitrankInfo;
  if (self.hasLearnDraw) {
    if (!self.learnDraw.isInitialized) {
      return NO;
    }
  }
  if (self.hasSing) {
    if (!self.sing.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitopusClass = YES;
   [self.opusClass enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitopusClass = NO;
      *stop = YES;
    }
  }];
  if (!isInitopusClass) return isInitopusClass;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFeedId) {
    [output writeString:1 value:self.feedId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasActionType) {
    [output writeInt32:3 value:self.actionType];
  }
  if (self.hasCreateDate) {
    [output writeInt32:4 value:self.createDate];
  }
  if (self.hasDeviceType) {
    [output writeInt32:5 value:self.deviceType];
  }
  if (self.hasDeviceName) {
    [output writeString:6 value:self.deviceName];
  }
  if (self.hasGameId) {
    [output writeString:7 value:self.gameId];
  }
  if (self.hasCategory) {
    [output writeEnum:8 value:self.category];
  }
  if (self.hasNickName) {
    [output writeString:21 value:self.nickName];
  }
  if (self.hasAvatar) {
    [output writeString:22 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeBool:23 value:self.gender];
  }
  if (self.hasSignature) {
    [output writeString:24 value:self.signature];
  }
  if (self.hasVip) {
    [output writeInt32:25 value:self.vip];
  }
  if (self.hasDrawData) {
    [output writeMessage:31 value:self.drawData];
  }
  if (self.hasTargetUserId) {
    [output writeString:32 value:self.targetUserId];
  }
  if (self.hasTargetUserNickName) {
    [output writeString:33 value:self.targetUserNickName];
  }
  if (self.hasHistoryScore) {
    [output writeDouble:34 value:self.historyScore];
  }
  if (self.hasOpusDesc) {
    [output writeString:35 value:self.opusDesc];
  }
  if (self.hasDrawDataUrl) {
    [output writeString:36 value:self.drawDataUrl];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:37 value:element];
  }];
  if (self.hasSpendTime) {
    [output writeInt32:38 value:self.spendTime];
  }
  if (self.hasOpusId) {
    [output writeString:41 value:self.opusId];
  }
  if (self.hasIsCorrect) {
    [output writeBool:42 value:self.isCorrect];
  }
  if (self.hasScore) {
    [output writeInt32:43 value:self.score];
  }
  [self.guessWordsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:44 value:element];
  }];
  if (self.hasOpusStatus) {
    [output writeInt32:45 value:self.opusStatus];
  }
  if (self.hasComment) {
    [output writeString:51 value:self.comment];
  }
  if (self.hasCommentInfo) {
    [output writeMessage:52 value:self.commentInfo];
  }
  if (self.hasMatchTimes) {
    [output writeInt32:61 value:self.matchTimes];
  }
  if (self.hasCorrectTimes) {
    [output writeInt32:62 value:self.correctTimes];
  }
  if (self.hasGuessTimes) {
    [output writeInt32:63 value:self.guessTimes];
  }
  if (self.hasCommentTimes) {
    [output writeInt32:64 value:self.commentTimes];
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:65 value:element];
  }];
  if (self.hasOpusCreatorUserId) {
    [output writeString:71 value:self.opusCreatorUserId];
  }
  if (self.hasOpusCreatorNickName) {
    [output writeString:72 value:self.opusCreatorNickName];
  }
  if (self.hasOpusCreatorGender) {
    [output writeBool:73 value:self.opusCreatorGender];
  }
  if (self.hasOpusCreatorAvatar) {
    [output writeString:74 value:self.opusCreatorAvatar];
  }
  if (self.hasOpusWord) {
    [output writeString:81 value:self.opusWord];
  }
  if (self.hasOpusImage) {
    [output writeString:82 value:self.opusImage];
  }
  if (self.hasOpusThumbImage) {
    [output writeString:83 value:self.opusThumbImage];
  }
  if (self.hasDataUrl) {
    [output writeString:84 value:self.dataUrl];
  }
  if (self.hasBgImageUrl) {
    [output writeString:85 value:self.bgImageUrl];
  }
  if (self.hasBgImageName) {
    [output writeString:86 value:self.bgImageName];
  }
  if (self.hasContestId) {
    [output writeString:91 value:self.contestId];
  }
  if (self.hasContestScore) {
    [output writeDouble:92 value:self.contestScore];
  }
  [self.rankInfoArray enumerateObjectsUsingBlock:^(PBOpusRank *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:93 value:element];
  }];
  if (self.hasRankInTop) {
    [output writeInt32:94 value:self.rankInTop];
  }
  if (self.hasLearnDraw) {
    [output writeMessage:100 value:self.learnDraw];
  }
  if (self.hasSing) {
    [output writeMessage:101 value:self.sing];
  }
  if (self.hasDescLabelInfo) {
    [output writeMessage:200 value:self.descLabelInfo];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:201 value:self.canvasSize];
  }
  if (self.hasBgImageWidth) {
    [output writeFloat:202 value:self.bgImageWidth];
  }
  if (self.hasBgImageHeight) {
    [output writeFloat:203 value:self.bgImageHeight];
  }
  if (self.hasStrokes) {
    [output writeInt64:211 value:self.strokes];
  }
  if (self.hasDraftCompleteDate) {
    [output writeInt32:212 value:self.draftCompleteDate];
  }
  if (self.hasDraftCreateDate) {
    [output writeInt32:213 value:self.draftCreateDate];
  }
  [self.opusClassArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:214 value:element];
  }];
  [self.opusClassIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:215 value:element];
  }];
  if (self.hasStageScore) {
    [output writeInt32:216 value:self.stageScore];
  }
  if (self.hasStageRank) {
    [output writeInt32:217 value:self.stageRank];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFeedId) {
    size_ += computeStringSize(1, self.feedId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  if (self.hasActionType) {
    size_ += computeInt32Size(3, self.actionType);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(4, self.createDate);
  }
  if (self.hasDeviceType) {
    size_ += computeInt32Size(5, self.deviceType);
  }
  if (self.hasDeviceName) {
    size_ += computeStringSize(6, self.deviceName);
  }
  if (self.hasGameId) {
    size_ += computeStringSize(7, self.gameId);
  }
  if (self.hasCategory) {
    size_ += computeEnumSize(8, self.category);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(21, self.nickName);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(22, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeBoolSize(23, self.gender);
  }
  if (self.hasSignature) {
    size_ += computeStringSize(24, self.signature);
  }
  if (self.hasVip) {
    size_ += computeInt32Size(25, self.vip);
  }
  if (self.hasDrawData) {
    size_ += computeMessageSize(31, self.drawData);
  }
  if (self.hasTargetUserId) {
    size_ += computeStringSize(32, self.targetUserId);
  }
  if (self.hasTargetUserNickName) {
    size_ += computeStringSize(33, self.targetUserNickName);
  }
  if (self.hasHistoryScore) {
    size_ += computeDoubleSize(34, self.historyScore);
  }
  if (self.hasOpusDesc) {
    size_ += computeStringSize(35, self.opusDesc);
  }
  if (self.hasDrawDataUrl) {
    size_ += computeStringSize(36, self.drawDataUrl);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tagsArray.count;
    [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasSpendTime) {
    size_ += computeInt32Size(38, self.spendTime);
  }
  if (self.hasOpusId) {
    size_ += computeStringSize(41, self.opusId);
  }
  if (self.hasIsCorrect) {
    size_ += computeBoolSize(42, self.isCorrect);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(43, self.score);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.guessWordsArray.count;
    [self.guessWordsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasOpusStatus) {
    size_ += computeInt32Size(45, self.opusStatus);
  }
  if (self.hasComment) {
    size_ += computeStringSize(51, self.comment);
  }
  if (self.hasCommentInfo) {
    size_ += computeMessageSize(52, self.commentInfo);
  }
  if (self.hasMatchTimes) {
    size_ += computeInt32Size(61, self.matchTimes);
  }
  if (self.hasCorrectTimes) {
    size_ += computeInt32Size(62, self.correctTimes);
  }
  if (self.hasGuessTimes) {
    size_ += computeInt32Size(63, self.guessTimes);
  }
  if (self.hasCommentTimes) {
    size_ += computeInt32Size(64, self.commentTimes);
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(65, element);
  }];
  if (self.hasOpusCreatorUserId) {
    size_ += computeStringSize(71, self.opusCreatorUserId);
  }
  if (self.hasOpusCreatorNickName) {
    size_ += computeStringSize(72, self.opusCreatorNickName);
  }
  if (self.hasOpusCreatorGender) {
    size_ += computeBoolSize(73, self.opusCreatorGender);
  }
  if (self.hasOpusCreatorAvatar) {
    size_ += computeStringSize(74, self.opusCreatorAvatar);
  }
  if (self.hasOpusWord) {
    size_ += computeStringSize(81, self.opusWord);
  }
  if (self.hasOpusImage) {
    size_ += computeStringSize(82, self.opusImage);
  }
  if (self.hasOpusThumbImage) {
    size_ += computeStringSize(83, self.opusThumbImage);
  }
  if (self.hasDataUrl) {
    size_ += computeStringSize(84, self.dataUrl);
  }
  if (self.hasBgImageUrl) {
    size_ += computeStringSize(85, self.bgImageUrl);
  }
  if (self.hasBgImageName) {
    size_ += computeStringSize(86, self.bgImageName);
  }
  if (self.hasContestId) {
    size_ += computeStringSize(91, self.contestId);
  }
  if (self.hasContestScore) {
    size_ += computeDoubleSize(92, self.contestScore);
  }
  [self.rankInfoArray enumerateObjectsUsingBlock:^(PBOpusRank *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(93, element);
  }];
  if (self.hasRankInTop) {
    size_ += computeInt32Size(94, self.rankInTop);
  }
  if (self.hasLearnDraw) {
    size_ += computeMessageSize(100, self.learnDraw);
  }
  if (self.hasSing) {
    size_ += computeMessageSize(101, self.sing);
  }
  if (self.hasDescLabelInfo) {
    size_ += computeMessageSize(200, self.descLabelInfo);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(201, self.canvasSize);
  }
  if (self.hasBgImageWidth) {
    size_ += computeFloatSize(202, self.bgImageWidth);
  }
  if (self.hasBgImageHeight) {
    size_ += computeFloatSize(203, self.bgImageHeight);
  }
  if (self.hasStrokes) {
    size_ += computeInt64Size(211, self.strokes);
  }
  if (self.hasDraftCompleteDate) {
    size_ += computeInt32Size(212, self.draftCompleteDate);
  }
  if (self.hasDraftCreateDate) {
    size_ += computeInt32Size(213, self.draftCreateDate);
  }
  [self.opusClassArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(214, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.opusClassIdsArray.count;
    [self.opusClassIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasStageScore) {
    size_ += computeInt32Size(216, self.stageScore);
  }
  if (self.hasStageRank) {
    size_ += computeInt32Size(217, self.stageRank);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFeed*) parseFromData:(NSData*) data {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data] build];
}
+ (PBFeed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedBuilder*) builder {
  return [[PBFeedBuilder alloc] init];
}
+ (PBFeedBuilder*) builderWithPrototype:(PBFeed*) prototype {
  return [[PBFeed builder] mergeFrom:prototype];
}
- (PBFeedBuilder*) builder {
  return [PBFeed builder];
}
- (PBFeedBuilder*) toBuilder {
  return [PBFeed builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFeedId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedId", self.feedId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasActionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionType", [NSNumber numberWithInteger:self.actionType]];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", [NSNumber numberWithInteger:self.deviceType]];
  }
  if (self.hasDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceName", self.deviceName];
  }
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", self.gameId];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", NSStringFromPBOpusCategoryType(self.category)];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithBool:self.gender]];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasVip) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vip", [NSNumber numberWithInteger:self.vip]];
  }
  if (self.hasDrawData) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawData"];
    [self.drawData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTargetUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetUserId", self.targetUserId];
  }
  if (self.hasTargetUserNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetUserNickName", self.targetUserNickName];
  }
  if (self.hasHistoryScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"historyScore", [NSNumber numberWithDouble:self.historyScore]];
  }
  if (self.hasOpusDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusDesc", self.opusDesc];
  }
  if (self.hasDrawDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"drawDataUrl", self.drawDataUrl];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tags", obj];
  }];
  if (self.hasSpendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spendTime", [NSNumber numberWithInteger:self.spendTime]];
  }
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasIsCorrect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCorrect", [NSNumber numberWithBool:self.isCorrect]];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  [self.guessWordsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessWords", obj];
  }];
  if (self.hasOpusStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusStatus", [NSNumber numberWithInteger:self.opusStatus]];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasCommentInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"commentInfo"];
    [self.commentInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMatchTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchTimes", [NSNumber numberWithInteger:self.matchTimes]];
  }
  if (self.hasCorrectTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"correctTimes", [NSNumber numberWithInteger:self.correctTimes]];
  }
  if (self.hasGuessTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guessTimes", [NSNumber numberWithInteger:self.guessTimes]];
  }
  if (self.hasCommentTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentTimes", [NSNumber numberWithInteger:self.commentTimes]];
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedTimes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOpusCreatorUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCreatorUserId", self.opusCreatorUserId];
  }
  if (self.hasOpusCreatorNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCreatorNickName", self.opusCreatorNickName];
  }
  if (self.hasOpusCreatorGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCreatorGender", [NSNumber numberWithBool:self.opusCreatorGender]];
  }
  if (self.hasOpusCreatorAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusCreatorAvatar", self.opusCreatorAvatar];
  }
  if (self.hasOpusWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusWord", self.opusWord];
  }
  if (self.hasOpusImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusImage", self.opusImage];
  }
  if (self.hasOpusThumbImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusThumbImage", self.opusThumbImage];
  }
  if (self.hasDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataUrl", self.dataUrl];
  }
  if (self.hasBgImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImageUrl", self.bgImageUrl];
  }
  if (self.hasBgImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImageName", self.bgImageName];
  }
  if (self.hasContestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestId", self.contestId];
  }
  if (self.hasContestScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestScore", [NSNumber numberWithDouble:self.contestScore]];
  }
  [self.rankInfoArray enumerateObjectsUsingBlock:^(PBOpusRank *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rankInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasRankInTop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rankInTop", [NSNumber numberWithInteger:self.rankInTop]];
  }
  if (self.hasLearnDraw) {
    [output appendFormat:@"%@%@ {\n", indent, @"learnDraw"];
    [self.learnDraw writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSing) {
    [output appendFormat:@"%@%@ {\n", indent, @"sing"];
    [self.sing writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDescLabelInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"descLabelInfo"];
    [self.descLabelInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBgImageWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImageWidth", [NSNumber numberWithFloat:self.bgImageWidth]];
  }
  if (self.hasBgImageHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImageHeight", [NSNumber numberWithFloat:self.bgImageHeight]];
  }
  if (self.hasStrokes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strokes", [NSNumber numberWithLongLong:self.strokes]];
  }
  if (self.hasDraftCompleteDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"draftCompleteDate", [NSNumber numberWithInteger:self.draftCompleteDate]];
  }
  if (self.hasDraftCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"draftCreateDate", [NSNumber numberWithInteger:self.draftCreateDate]];
  }
  [self.opusClassArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"opusClass"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.opusClassIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusClassIds", obj];
  }];
  if (self.hasStageScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageScore", [NSNumber numberWithInteger:self.stageScore]];
  }
  if (self.hasStageRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageRank", [NSNumber numberWithInteger:self.stageRank]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFeed class]]) {
    return NO;
  }
  PBFeed *otherMessage = other;
  return
      self.hasFeedId == otherMessage.hasFeedId &&
      (!self.hasFeedId || [self.feedId isEqual:otherMessage.feedId]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasActionType == otherMessage.hasActionType &&
      (!self.hasActionType || self.actionType == otherMessage.actionType) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasDeviceName == otherMessage.hasDeviceName &&
      (!self.hasDeviceName || [self.deviceName isEqual:otherMessage.deviceName]) &&
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || [self.gameId isEqual:otherMessage.gameId]) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || self.category == otherMessage.category) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasVip == otherMessage.hasVip &&
      (!self.hasVip || self.vip == otherMessage.vip) &&
      self.hasDrawData == otherMessage.hasDrawData &&
      (!self.hasDrawData || [self.drawData isEqual:otherMessage.drawData]) &&
      self.hasTargetUserId == otherMessage.hasTargetUserId &&
      (!self.hasTargetUserId || [self.targetUserId isEqual:otherMessage.targetUserId]) &&
      self.hasTargetUserNickName == otherMessage.hasTargetUserNickName &&
      (!self.hasTargetUserNickName || [self.targetUserNickName isEqual:otherMessage.targetUserNickName]) &&
      self.hasHistoryScore == otherMessage.hasHistoryScore &&
      (!self.hasHistoryScore || self.historyScore == otherMessage.historyScore) &&
      self.hasOpusDesc == otherMessage.hasOpusDesc &&
      (!self.hasOpusDesc || [self.opusDesc isEqual:otherMessage.opusDesc]) &&
      self.hasDrawDataUrl == otherMessage.hasDrawDataUrl &&
      (!self.hasDrawDataUrl || [self.drawDataUrl isEqual:otherMessage.drawDataUrl]) &&
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      self.hasSpendTime == otherMessage.hasSpendTime &&
      (!self.hasSpendTime || self.spendTime == otherMessage.spendTime) &&
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasIsCorrect == otherMessage.hasIsCorrect &&
      (!self.hasIsCorrect || self.isCorrect == otherMessage.isCorrect) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      [self.guessWordsArray isEqualToArray:otherMessage.guessWordsArray] &&
      self.hasOpusStatus == otherMessage.hasOpusStatus &&
      (!self.hasOpusStatus || self.opusStatus == otherMessage.opusStatus) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasCommentInfo == otherMessage.hasCommentInfo &&
      (!self.hasCommentInfo || [self.commentInfo isEqual:otherMessage.commentInfo]) &&
      self.hasMatchTimes == otherMessage.hasMatchTimes &&
      (!self.hasMatchTimes || self.matchTimes == otherMessage.matchTimes) &&
      self.hasCorrectTimes == otherMessage.hasCorrectTimes &&
      (!self.hasCorrectTimes || self.correctTimes == otherMessage.correctTimes) &&
      self.hasGuessTimes == otherMessage.hasGuessTimes &&
      (!self.hasGuessTimes || self.guessTimes == otherMessage.guessTimes) &&
      self.hasCommentTimes == otherMessage.hasCommentTimes &&
      (!self.hasCommentTimes || self.commentTimes == otherMessage.commentTimes) &&
      [self.feedTimesArray isEqualToArray:otherMessage.feedTimesArray] &&
      self.hasOpusCreatorUserId == otherMessage.hasOpusCreatorUserId &&
      (!self.hasOpusCreatorUserId || [self.opusCreatorUserId isEqual:otherMessage.opusCreatorUserId]) &&
      self.hasOpusCreatorNickName == otherMessage.hasOpusCreatorNickName &&
      (!self.hasOpusCreatorNickName || [self.opusCreatorNickName isEqual:otherMessage.opusCreatorNickName]) &&
      self.hasOpusCreatorGender == otherMessage.hasOpusCreatorGender &&
      (!self.hasOpusCreatorGender || self.opusCreatorGender == otherMessage.opusCreatorGender) &&
      self.hasOpusCreatorAvatar == otherMessage.hasOpusCreatorAvatar &&
      (!self.hasOpusCreatorAvatar || [self.opusCreatorAvatar isEqual:otherMessage.opusCreatorAvatar]) &&
      self.hasOpusWord == otherMessage.hasOpusWord &&
      (!self.hasOpusWord || [self.opusWord isEqual:otherMessage.opusWord]) &&
      self.hasOpusImage == otherMessage.hasOpusImage &&
      (!self.hasOpusImage || [self.opusImage isEqual:otherMessage.opusImage]) &&
      self.hasOpusThumbImage == otherMessage.hasOpusThumbImage &&
      (!self.hasOpusThumbImage || [self.opusThumbImage isEqual:otherMessage.opusThumbImage]) &&
      self.hasDataUrl == otherMessage.hasDataUrl &&
      (!self.hasDataUrl || [self.dataUrl isEqual:otherMessage.dataUrl]) &&
      self.hasBgImageUrl == otherMessage.hasBgImageUrl &&
      (!self.hasBgImageUrl || [self.bgImageUrl isEqual:otherMessage.bgImageUrl]) &&
      self.hasBgImageName == otherMessage.hasBgImageName &&
      (!self.hasBgImageName || [self.bgImageName isEqual:otherMessage.bgImageName]) &&
      self.hasContestId == otherMessage.hasContestId &&
      (!self.hasContestId || [self.contestId isEqual:otherMessage.contestId]) &&
      self.hasContestScore == otherMessage.hasContestScore &&
      (!self.hasContestScore || self.contestScore == otherMessage.contestScore) &&
      [self.rankInfoArray isEqualToArray:otherMessage.rankInfoArray] &&
      self.hasRankInTop == otherMessage.hasRankInTop &&
      (!self.hasRankInTop || self.rankInTop == otherMessage.rankInTop) &&
      self.hasLearnDraw == otherMessage.hasLearnDraw &&
      (!self.hasLearnDraw || [self.learnDraw isEqual:otherMessage.learnDraw]) &&
      self.hasSing == otherMessage.hasSing &&
      (!self.hasSing || [self.sing isEqual:otherMessage.sing]) &&
      self.hasDescLabelInfo == otherMessage.hasDescLabelInfo &&
      (!self.hasDescLabelInfo || [self.descLabelInfo isEqual:otherMessage.descLabelInfo]) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      self.hasBgImageWidth == otherMessage.hasBgImageWidth &&
      (!self.hasBgImageWidth || self.bgImageWidth == otherMessage.bgImageWidth) &&
      self.hasBgImageHeight == otherMessage.hasBgImageHeight &&
      (!self.hasBgImageHeight || self.bgImageHeight == otherMessage.bgImageHeight) &&
      self.hasStrokes == otherMessage.hasStrokes &&
      (!self.hasStrokes || self.strokes == otherMessage.strokes) &&
      self.hasDraftCompleteDate == otherMessage.hasDraftCompleteDate &&
      (!self.hasDraftCompleteDate || self.draftCompleteDate == otherMessage.draftCompleteDate) &&
      self.hasDraftCreateDate == otherMessage.hasDraftCreateDate &&
      (!self.hasDraftCreateDate || self.draftCreateDate == otherMessage.draftCreateDate) &&
      [self.opusClassArray isEqualToArray:otherMessage.opusClassArray] &&
      [self.opusClassIdsArray isEqualToArray:otherMessage.opusClassIdsArray] &&
      self.hasStageScore == otherMessage.hasStageScore &&
      (!self.hasStageScore || self.stageScore == otherMessage.stageScore) &&
      self.hasStageRank == otherMessage.hasStageRank &&
      (!self.hasStageRank || self.stageRank == otherMessage.stageRank) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFeedId) {
    hashCode = hashCode * 31 + [self.feedId hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasActionType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actionType] hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deviceType] hash];
  }
  if (self.hasDeviceName) {
    hashCode = hashCode * 31 + [self.deviceName hash];
  }
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [self.gameId hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + self.category;
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gender] hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasVip) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.vip] hash];
  }
  if (self.hasDrawData) {
    hashCode = hashCode * 31 + [self.drawData hash];
  }
  if (self.hasTargetUserId) {
    hashCode = hashCode * 31 + [self.targetUserId hash];
  }
  if (self.hasTargetUserNickName) {
    hashCode = hashCode * 31 + [self.targetUserNickName hash];
  }
  if (self.hasHistoryScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.historyScore] hash];
  }
  if (self.hasOpusDesc) {
    hashCode = hashCode * 31 + [self.opusDesc hash];
  }
  if (self.hasDrawDataUrl) {
    hashCode = hashCode * 31 + [self.drawDataUrl hash];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSpendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spendTime] hash];
  }
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasIsCorrect) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isCorrect] hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  [self.guessWordsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOpusStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.opusStatus] hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasCommentInfo) {
    hashCode = hashCode * 31 + [self.commentInfo hash];
  }
  if (self.hasMatchTimes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.matchTimes] hash];
  }
  if (self.hasCorrectTimes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.correctTimes] hash];
  }
  if (self.hasGuessTimes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guessTimes] hash];
  }
  if (self.hasCommentTimes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.commentTimes] hash];
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOpusCreatorUserId) {
    hashCode = hashCode * 31 + [self.opusCreatorUserId hash];
  }
  if (self.hasOpusCreatorNickName) {
    hashCode = hashCode * 31 + [self.opusCreatorNickName hash];
  }
  if (self.hasOpusCreatorGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opusCreatorGender] hash];
  }
  if (self.hasOpusCreatorAvatar) {
    hashCode = hashCode * 31 + [self.opusCreatorAvatar hash];
  }
  if (self.hasOpusWord) {
    hashCode = hashCode * 31 + [self.opusWord hash];
  }
  if (self.hasOpusImage) {
    hashCode = hashCode * 31 + [self.opusImage hash];
  }
  if (self.hasOpusThumbImage) {
    hashCode = hashCode * 31 + [self.opusThumbImage hash];
  }
  if (self.hasDataUrl) {
    hashCode = hashCode * 31 + [self.dataUrl hash];
  }
  if (self.hasBgImageUrl) {
    hashCode = hashCode * 31 + [self.bgImageUrl hash];
  }
  if (self.hasBgImageName) {
    hashCode = hashCode * 31 + [self.bgImageName hash];
  }
  if (self.hasContestId) {
    hashCode = hashCode * 31 + [self.contestId hash];
  }
  if (self.hasContestScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.contestScore] hash];
  }
  [self.rankInfoArray enumerateObjectsUsingBlock:^(PBOpusRank *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasRankInTop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rankInTop] hash];
  }
  if (self.hasLearnDraw) {
    hashCode = hashCode * 31 + [self.learnDraw hash];
  }
  if (self.hasSing) {
    hashCode = hashCode * 31 + [self.sing hash];
  }
  if (self.hasDescLabelInfo) {
    hashCode = hashCode * 31 + [self.descLabelInfo hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  if (self.hasBgImageWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bgImageWidth] hash];
  }
  if (self.hasBgImageHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bgImageHeight] hash];
  }
  if (self.hasStrokes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.strokes] hash];
  }
  if (self.hasDraftCompleteDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.draftCompleteDate] hash];
  }
  if (self.hasDraftCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.draftCreateDate] hash];
  }
  [self.opusClassArray enumerateObjectsUsingBlock:^(PBClass *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.opusClassIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStageScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stageScore] hash];
  }
  if (self.hasStageRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stageRank] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFeedBuilder()
@property (strong) PBFeed* resultPbfeed;
@end

@implementation PBFeedBuilder
@synthesize resultPbfeed;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbfeed = [[PBFeed alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbfeed;
}
- (PBFeedBuilder*) clear {
  self.resultPbfeed = [[PBFeed alloc] init];
  return self;
}
- (PBFeedBuilder*) clone {
  return [PBFeed builderWithPrototype:resultPbfeed];
}
- (PBFeed*) defaultInstance {
  return [PBFeed defaultInstance];
}
- (PBFeed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeed*) buildPartial {
  PBFeed* returnMe = resultPbfeed;
  self.resultPbfeed = nil;
  return returnMe;
}
- (PBFeedBuilder*) mergeFrom:(PBFeed*) other {
  if (other == [PBFeed defaultInstance]) {
    return self;
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasActionType) {
    [self setActionType:other.actionType];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasVip) {
    [self setVip:other.vip];
  }
  if (other.hasDrawData) {
    [self mergeDrawData:other.drawData];
  }
  if (other.hasTargetUserId) {
    [self setTargetUserId:other.targetUserId];
  }
  if (other.hasTargetUserNickName) {
    [self setTargetUserNickName:other.targetUserNickName];
  }
  if (other.hasHistoryScore) {
    [self setHistoryScore:other.historyScore];
  }
  if (other.hasOpusDesc) {
    [self setOpusDesc:other.opusDesc];
  }
  if (other.hasDrawDataUrl) {
    [self setDrawDataUrl:other.drawDataUrl];
  }
  if (other.tagsArray.count > 0) {
    if (resultPbfeed.tagsArray == nil) {
      resultPbfeed.tagsArray = [[NSMutableArray alloc] initWithArray:other.tagsArray];
    } else {
      [resultPbfeed.tagsArray addObjectsFromArray:other.tagsArray];
    }
  }
  if (other.hasSpendTime) {
    [self setSpendTime:other.spendTime];
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasIsCorrect) {
    [self setIsCorrect:other.isCorrect];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.guessWordsArray.count > 0) {
    if (resultPbfeed.guessWordsArray == nil) {
      resultPbfeed.guessWordsArray = [[NSMutableArray alloc] initWithArray:other.guessWordsArray];
    } else {
      [resultPbfeed.guessWordsArray addObjectsFromArray:other.guessWordsArray];
    }
  }
  if (other.hasOpusStatus) {
    [self setOpusStatus:other.opusStatus];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCommentInfo) {
    [self mergeCommentInfo:other.commentInfo];
  }
  if (other.hasMatchTimes) {
    [self setMatchTimes:other.matchTimes];
  }
  if (other.hasCorrectTimes) {
    [self setCorrectTimes:other.correctTimes];
  }
  if (other.hasGuessTimes) {
    [self setGuessTimes:other.guessTimes];
  }
  if (other.hasCommentTimes) {
    [self setCommentTimes:other.commentTimes];
  }
  if (other.feedTimesArray.count > 0) {
    if (resultPbfeed.feedTimesArray == nil) {
      resultPbfeed.feedTimesArray = [[NSMutableArray alloc] initWithArray:other.feedTimesArray];
    } else {
      [resultPbfeed.feedTimesArray addObjectsFromArray:other.feedTimesArray];
    }
  }
  if (other.hasOpusCreatorUserId) {
    [self setOpusCreatorUserId:other.opusCreatorUserId];
  }
  if (other.hasOpusCreatorNickName) {
    [self setOpusCreatorNickName:other.opusCreatorNickName];
  }
  if (other.hasOpusCreatorGender) {
    [self setOpusCreatorGender:other.opusCreatorGender];
  }
  if (other.hasOpusCreatorAvatar) {
    [self setOpusCreatorAvatar:other.opusCreatorAvatar];
  }
  if (other.hasOpusWord) {
    [self setOpusWord:other.opusWord];
  }
  if (other.hasOpusImage) {
    [self setOpusImage:other.opusImage];
  }
  if (other.hasOpusThumbImage) {
    [self setOpusThumbImage:other.opusThumbImage];
  }
  if (other.hasDataUrl) {
    [self setDataUrl:other.dataUrl];
  }
  if (other.hasBgImageUrl) {
    [self setBgImageUrl:other.bgImageUrl];
  }
  if (other.hasBgImageName) {
    [self setBgImageName:other.bgImageName];
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  if (other.hasContestScore) {
    [self setContestScore:other.contestScore];
  }
  if (other.rankInfoArray.count > 0) {
    if (resultPbfeed.rankInfoArray == nil) {
      resultPbfeed.rankInfoArray = [[NSMutableArray alloc] initWithArray:other.rankInfoArray];
    } else {
      [resultPbfeed.rankInfoArray addObjectsFromArray:other.rankInfoArray];
    }
  }
  if (other.hasRankInTop) {
    [self setRankInTop:other.rankInTop];
  }
  if (other.hasLearnDraw) {
    [self mergeLearnDraw:other.learnDraw];
  }
  if (other.hasSing) {
    [self mergeSing:other.sing];
  }
  if (other.hasDescLabelInfo) {
    [self mergeDescLabelInfo:other.descLabelInfo];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.hasBgImageWidth) {
    [self setBgImageWidth:other.bgImageWidth];
  }
  if (other.hasBgImageHeight) {
    [self setBgImageHeight:other.bgImageHeight];
  }
  if (other.hasStrokes) {
    [self setStrokes:other.strokes];
  }
  if (other.hasDraftCompleteDate) {
    [self setDraftCompleteDate:other.draftCompleteDate];
  }
  if (other.hasDraftCreateDate) {
    [self setDraftCreateDate:other.draftCreateDate];
  }
  if (other.opusClassArray.count > 0) {
    if (resultPbfeed.opusClassArray == nil) {
      resultPbfeed.opusClassArray = [[NSMutableArray alloc] initWithArray:other.opusClassArray];
    } else {
      [resultPbfeed.opusClassArray addObjectsFromArray:other.opusClassArray];
    }
  }
  if (other.opusClassIdsArray.count > 0) {
    if (resultPbfeed.opusClassIdsArray == nil) {
      resultPbfeed.opusClassIdsArray = [[NSMutableArray alloc] initWithArray:other.opusClassIdsArray];
    } else {
      [resultPbfeed.opusClassIdsArray addObjectsFromArray:other.opusClassIdsArray];
    }
  }
  if (other.hasStageScore) {
    [self setStageScore:other.stageScore];
  }
  if (other.hasStageRank) {
    [self setStageRank:other.stageRank];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFeedId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 24: {
        [self setActionType:[input readInt32]];
        break;
      }
      case 32: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 40: {
        [self setDeviceType:[input readInt32]];
        break;
      }
      case 50: {
        [self setDeviceName:[input readString]];
        break;
      }
      case 58: {
        [self setGameId:[input readString]];
        break;
      }
      case 64: {
        PBOpusCategoryType value = (PBOpusCategoryType)[input readEnum];
        if (PBOpusCategoryTypeIsValidValue(value)) {
          [self setCategory:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 170: {
        [self setNickName:[input readString]];
        break;
      }
      case 178: {
        [self setAvatar:[input readString]];
        break;
      }
      case 184: {
        [self setGender:[input readBool]];
        break;
      }
      case 194: {
        [self setSignature:[input readString]];
        break;
      }
      case 200: {
        [self setVip:[input readInt32]];
        break;
      }
      case 250: {
        PBDrawBuilder* subBuilder = [PBDraw builder];
        if (self.hasDrawData) {
          [subBuilder mergeFrom:self.drawData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawData:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        [self setTargetUserId:[input readString]];
        break;
      }
      case 266: {
        [self setTargetUserNickName:[input readString]];
        break;
      }
      case 273: {
        [self setHistoryScore:[input readDouble]];
        break;
      }
      case 282: {
        [self setOpusDesc:[input readString]];
        break;
      }
      case 290: {
        [self setDrawDataUrl:[input readString]];
        break;
      }
      case 298: {
        [self addTags:[input readString]];
        break;
      }
      case 304: {
        [self setSpendTime:[input readInt32]];
        break;
      }
      case 330: {
        [self setOpusId:[input readString]];
        break;
      }
      case 336: {
        [self setIsCorrect:[input readBool]];
        break;
      }
      case 344: {
        [self setScore:[input readInt32]];
        break;
      }
      case 354: {
        [self addGuessWords:[input readString]];
        break;
      }
      case 360: {
        [self setOpusStatus:[input readInt32]];
        break;
      }
      case 410: {
        [self setComment:[input readString]];
        break;
      }
      case 418: {
        PBCommentInfoBuilder* subBuilder = [PBCommentInfo builder];
        if (self.hasCommentInfo) {
          [subBuilder mergeFrom:self.commentInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCommentInfo:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setMatchTimes:[input readInt32]];
        break;
      }
      case 496: {
        [self setCorrectTimes:[input readInt32]];
        break;
      }
      case 504: {
        [self setGuessTimes:[input readInt32]];
        break;
      }
      case 512: {
        [self setCommentTimes:[input readInt32]];
        break;
      }
      case 522: {
        PBFeedTimesBuilder* subBuilder = [PBFeedTimes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeedTimes:[subBuilder buildPartial]];
        break;
      }
      case 570: {
        [self setOpusCreatorUserId:[input readString]];
        break;
      }
      case 578: {
        [self setOpusCreatorNickName:[input readString]];
        break;
      }
      case 584: {
        [self setOpusCreatorGender:[input readBool]];
        break;
      }
      case 594: {
        [self setOpusCreatorAvatar:[input readString]];
        break;
      }
      case 650: {
        [self setOpusWord:[input readString]];
        break;
      }
      case 658: {
        [self setOpusImage:[input readString]];
        break;
      }
      case 666: {
        [self setOpusThumbImage:[input readString]];
        break;
      }
      case 674: {
        [self setDataUrl:[input readString]];
        break;
      }
      case 682: {
        [self setBgImageUrl:[input readString]];
        break;
      }
      case 690: {
        [self setBgImageName:[input readString]];
        break;
      }
      case 730: {
        [self setContestId:[input readString]];
        break;
      }
      case 737: {
        [self setContestScore:[input readDouble]];
        break;
      }
      case 746: {
        PBOpusRankBuilder* subBuilder = [PBOpusRank builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRankInfo:[subBuilder buildPartial]];
        break;
      }
      case 752: {
        [self setRankInTop:[input readInt32]];
        break;
      }
      case 802: {
        PBLearnDrawBuilder* subBuilder = [PBLearnDraw builder];
        if (self.hasLearnDraw) {
          [subBuilder mergeFrom:self.learnDraw];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLearnDraw:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        PBSingOpusBuilder* subBuilder = [PBSingOpus builder];
        if (self.hasSing) {
          [subBuilder mergeFrom:self.sing];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSing:[subBuilder buildPartial]];
        break;
      }
      case 1602: {
        PBLabelInfoBuilder* subBuilder = [PBLabelInfo builder];
        if (self.hasDescLabelInfo) {
          [subBuilder mergeFrom:self.descLabelInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDescLabelInfo:[subBuilder buildPartial]];
        break;
      }
      case 1610: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 1621: {
        [self setBgImageWidth:[input readFloat]];
        break;
      }
      case 1629: {
        [self setBgImageHeight:[input readFloat]];
        break;
      }
      case 1688: {
        [self setStrokes:[input readInt64]];
        break;
      }
      case 1696: {
        [self setDraftCompleteDate:[input readInt32]];
        break;
      }
      case 1704: {
        [self setDraftCreateDate:[input readInt32]];
        break;
      }
      case 1714: {
        PBClassBuilder* subBuilder = [PBClass builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpusClass:[subBuilder buildPartial]];
        break;
      }
      case 1722: {
        [self addOpusClassIds:[input readString]];
        break;
      }
      case 1728: {
        [self setStageScore:[input readInt32]];
        break;
      }
      case 1736: {
        [self setStageRank:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFeedId {
  return resultPbfeed.hasFeedId;
}
- (NSString*) feedId {
  return resultPbfeed.feedId;
}
- (PBFeedBuilder*) setFeedId:(NSString*) value {
  resultPbfeed.hasFeedId = YES;
  resultPbfeed.feedId = value;
  return self;
}
- (PBFeedBuilder*) clearFeedId {
  resultPbfeed.hasFeedId = NO;
  resultPbfeed.feedId = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultPbfeed.hasUserId;
}
- (NSString*) userId {
  return resultPbfeed.userId;
}
- (PBFeedBuilder*) setUserId:(NSString*) value {
  resultPbfeed.hasUserId = YES;
  resultPbfeed.userId = value;
  return self;
}
- (PBFeedBuilder*) clearUserId {
  resultPbfeed.hasUserId = NO;
  resultPbfeed.userId = @"";
  return self;
}
- (BOOL) hasActionType {
  return resultPbfeed.hasActionType;
}
- (SInt32) actionType {
  return resultPbfeed.actionType;
}
- (PBFeedBuilder*) setActionType:(SInt32) value {
  resultPbfeed.hasActionType = YES;
  resultPbfeed.actionType = value;
  return self;
}
- (PBFeedBuilder*) clearActionType {
  resultPbfeed.hasActionType = NO;
  resultPbfeed.actionType = 0;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbfeed.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbfeed.createDate;
}
- (PBFeedBuilder*) setCreateDate:(SInt32) value {
  resultPbfeed.hasCreateDate = YES;
  resultPbfeed.createDate = value;
  return self;
}
- (PBFeedBuilder*) clearCreateDate {
  resultPbfeed.hasCreateDate = NO;
  resultPbfeed.createDate = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return resultPbfeed.hasDeviceType;
}
- (SInt32) deviceType {
  return resultPbfeed.deviceType;
}
- (PBFeedBuilder*) setDeviceType:(SInt32) value {
  resultPbfeed.hasDeviceType = YES;
  resultPbfeed.deviceType = value;
  return self;
}
- (PBFeedBuilder*) clearDeviceType {
  resultPbfeed.hasDeviceType = NO;
  resultPbfeed.deviceType = 0;
  return self;
}
- (BOOL) hasDeviceName {
  return resultPbfeed.hasDeviceName;
}
- (NSString*) deviceName {
  return resultPbfeed.deviceName;
}
- (PBFeedBuilder*) setDeviceName:(NSString*) value {
  resultPbfeed.hasDeviceName = YES;
  resultPbfeed.deviceName = value;
  return self;
}
- (PBFeedBuilder*) clearDeviceName {
  resultPbfeed.hasDeviceName = NO;
  resultPbfeed.deviceName = @"";
  return self;
}
- (BOOL) hasGameId {
  return resultPbfeed.hasGameId;
}
- (NSString*) gameId {
  return resultPbfeed.gameId;
}
- (PBFeedBuilder*) setGameId:(NSString*) value {
  resultPbfeed.hasGameId = YES;
  resultPbfeed.gameId = value;
  return self;
}
- (PBFeedBuilder*) clearGameId {
  resultPbfeed.hasGameId = NO;
  resultPbfeed.gameId = @"";
  return self;
}
- (BOOL) hasCategory {
  return resultPbfeed.hasCategory;
}
- (PBOpusCategoryType) category {
  return resultPbfeed.category;
}
- (PBFeedBuilder*) setCategory:(PBOpusCategoryType) value {
  resultPbfeed.hasCategory = YES;
  resultPbfeed.category = value;
  return self;
}
- (PBFeedBuilder*) clearCategory {
  resultPbfeed.hasCategory = NO;
  resultPbfeed.category = PBOpusCategoryTypeDrawCategory;
  return self;
}
- (BOOL) hasNickName {
  return resultPbfeed.hasNickName;
}
- (NSString*) nickName {
  return resultPbfeed.nickName;
}
- (PBFeedBuilder*) setNickName:(NSString*) value {
  resultPbfeed.hasNickName = YES;
  resultPbfeed.nickName = value;
  return self;
}
- (PBFeedBuilder*) clearNickName {
  resultPbfeed.hasNickName = NO;
  resultPbfeed.nickName = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultPbfeed.hasAvatar;
}
- (NSString*) avatar {
  return resultPbfeed.avatar;
}
- (PBFeedBuilder*) setAvatar:(NSString*) value {
  resultPbfeed.hasAvatar = YES;
  resultPbfeed.avatar = value;
  return self;
}
- (PBFeedBuilder*) clearAvatar {
  resultPbfeed.hasAvatar = NO;
  resultPbfeed.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultPbfeed.hasGender;
}
- (BOOL) gender {
  return resultPbfeed.gender;
}
- (PBFeedBuilder*) setGender:(BOOL) value {
  resultPbfeed.hasGender = YES;
  resultPbfeed.gender = value;
  return self;
}
- (PBFeedBuilder*) clearGender {
  resultPbfeed.hasGender = NO;
  resultPbfeed.gender = NO;
  return self;
}
- (BOOL) hasSignature {
  return resultPbfeed.hasSignature;
}
- (NSString*) signature {
  return resultPbfeed.signature;
}
- (PBFeedBuilder*) setSignature:(NSString*) value {
  resultPbfeed.hasSignature = YES;
  resultPbfeed.signature = value;
  return self;
}
- (PBFeedBuilder*) clearSignature {
  resultPbfeed.hasSignature = NO;
  resultPbfeed.signature = @"";
  return self;
}
- (BOOL) hasVip {
  return resultPbfeed.hasVip;
}
- (SInt32) vip {
  return resultPbfeed.vip;
}
- (PBFeedBuilder*) setVip:(SInt32) value {
  resultPbfeed.hasVip = YES;
  resultPbfeed.vip = value;
  return self;
}
- (PBFeedBuilder*) clearVip {
  resultPbfeed.hasVip = NO;
  resultPbfeed.vip = 0;
  return self;
}
- (BOOL) hasDrawData {
  return resultPbfeed.hasDrawData;
}
- (PBDraw*) drawData {
  return resultPbfeed.drawData;
}
- (PBFeedBuilder*) setDrawData:(PBDraw*) value {
  resultPbfeed.hasDrawData = YES;
  resultPbfeed.drawData = value;
  return self;
}
- (PBFeedBuilder*) setDrawDataBuilder:(PBDrawBuilder*) builderForValue {
  return [self setDrawData:[builderForValue build]];
}
- (PBFeedBuilder*) mergeDrawData:(PBDraw*) value {
  if (resultPbfeed.hasDrawData &&
      resultPbfeed.drawData != [PBDraw defaultInstance]) {
    resultPbfeed.drawData =
      [[[PBDraw builderWithPrototype:resultPbfeed.drawData] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.drawData = value;
  }
  resultPbfeed.hasDrawData = YES;
  return self;
}
- (PBFeedBuilder*) clearDrawData {
  resultPbfeed.hasDrawData = NO;
  resultPbfeed.drawData = [PBDraw defaultInstance];
  return self;
}
- (BOOL) hasTargetUserId {
  return resultPbfeed.hasTargetUserId;
}
- (NSString*) targetUserId {
  return resultPbfeed.targetUserId;
}
- (PBFeedBuilder*) setTargetUserId:(NSString*) value {
  resultPbfeed.hasTargetUserId = YES;
  resultPbfeed.targetUserId = value;
  return self;
}
- (PBFeedBuilder*) clearTargetUserId {
  resultPbfeed.hasTargetUserId = NO;
  resultPbfeed.targetUserId = @"";
  return self;
}
- (BOOL) hasTargetUserNickName {
  return resultPbfeed.hasTargetUserNickName;
}
- (NSString*) targetUserNickName {
  return resultPbfeed.targetUserNickName;
}
- (PBFeedBuilder*) setTargetUserNickName:(NSString*) value {
  resultPbfeed.hasTargetUserNickName = YES;
  resultPbfeed.targetUserNickName = value;
  return self;
}
- (PBFeedBuilder*) clearTargetUserNickName {
  resultPbfeed.hasTargetUserNickName = NO;
  resultPbfeed.targetUserNickName = @"";
  return self;
}
- (BOOL) hasHistoryScore {
  return resultPbfeed.hasHistoryScore;
}
- (Float64) historyScore {
  return resultPbfeed.historyScore;
}
- (PBFeedBuilder*) setHistoryScore:(Float64) value {
  resultPbfeed.hasHistoryScore = YES;
  resultPbfeed.historyScore = value;
  return self;
}
- (PBFeedBuilder*) clearHistoryScore {
  resultPbfeed.hasHistoryScore = NO;
  resultPbfeed.historyScore = 0;
  return self;
}
- (BOOL) hasOpusDesc {
  return resultPbfeed.hasOpusDesc;
}
- (NSString*) opusDesc {
  return resultPbfeed.opusDesc;
}
- (PBFeedBuilder*) setOpusDesc:(NSString*) value {
  resultPbfeed.hasOpusDesc = YES;
  resultPbfeed.opusDesc = value;
  return self;
}
- (PBFeedBuilder*) clearOpusDesc {
  resultPbfeed.hasOpusDesc = NO;
  resultPbfeed.opusDesc = @"";
  return self;
}
- (BOOL) hasDrawDataUrl {
  return resultPbfeed.hasDrawDataUrl;
}
- (NSString*) drawDataUrl {
  return resultPbfeed.drawDataUrl;
}
- (PBFeedBuilder*) setDrawDataUrl:(NSString*) value {
  resultPbfeed.hasDrawDataUrl = YES;
  resultPbfeed.drawDataUrl = value;
  return self;
}
- (PBFeedBuilder*) clearDrawDataUrl {
  resultPbfeed.hasDrawDataUrl = NO;
  resultPbfeed.drawDataUrl = @"";
  return self;
}
- (NSMutableArray *)tags {
  return resultPbfeed.tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [resultPbfeed tagsAtIndex:index];
}
- (PBFeedBuilder *)addTags:(NSString*)value {
  if (resultPbfeed.tagsArray == nil) {
    resultPbfeed.tagsArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.tagsArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setTagsArray:(NSArray *)array {
  resultPbfeed.tagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearTags {
  resultPbfeed.tagsArray = nil;
  return self;
}
- (BOOL) hasSpendTime {
  return resultPbfeed.hasSpendTime;
}
- (SInt32) spendTime {
  return resultPbfeed.spendTime;
}
- (PBFeedBuilder*) setSpendTime:(SInt32) value {
  resultPbfeed.hasSpendTime = YES;
  resultPbfeed.spendTime = value;
  return self;
}
- (PBFeedBuilder*) clearSpendTime {
  resultPbfeed.hasSpendTime = NO;
  resultPbfeed.spendTime = 0;
  return self;
}
- (BOOL) hasOpusId {
  return resultPbfeed.hasOpusId;
}
- (NSString*) opusId {
  return resultPbfeed.opusId;
}
- (PBFeedBuilder*) setOpusId:(NSString*) value {
  resultPbfeed.hasOpusId = YES;
  resultPbfeed.opusId = value;
  return self;
}
- (PBFeedBuilder*) clearOpusId {
  resultPbfeed.hasOpusId = NO;
  resultPbfeed.opusId = @"";
  return self;
}
- (BOOL) hasIsCorrect {
  return resultPbfeed.hasIsCorrect;
}
- (BOOL) isCorrect {
  return resultPbfeed.isCorrect;
}
- (PBFeedBuilder*) setIsCorrect:(BOOL) value {
  resultPbfeed.hasIsCorrect = YES;
  resultPbfeed.isCorrect = value;
  return self;
}
- (PBFeedBuilder*) clearIsCorrect {
  resultPbfeed.hasIsCorrect = NO;
  resultPbfeed.isCorrect = NO;
  return self;
}
- (BOOL) hasScore {
  return resultPbfeed.hasScore;
}
- (SInt32) score {
  return resultPbfeed.score;
}
- (PBFeedBuilder*) setScore:(SInt32) value {
  resultPbfeed.hasScore = YES;
  resultPbfeed.score = value;
  return self;
}
- (PBFeedBuilder*) clearScore {
  resultPbfeed.hasScore = NO;
  resultPbfeed.score = 0;
  return self;
}
- (NSMutableArray *)guessWords {
  return resultPbfeed.guessWordsArray;
}
- (NSString*)guessWordsAtIndex:(NSUInteger)index {
  return [resultPbfeed guessWordsAtIndex:index];
}
- (PBFeedBuilder *)addGuessWords:(NSString*)value {
  if (resultPbfeed.guessWordsArray == nil) {
    resultPbfeed.guessWordsArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.guessWordsArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setGuessWordsArray:(NSArray *)array {
  resultPbfeed.guessWordsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearGuessWords {
  resultPbfeed.guessWordsArray = nil;
  return self;
}
- (BOOL) hasOpusStatus {
  return resultPbfeed.hasOpusStatus;
}
- (SInt32) opusStatus {
  return resultPbfeed.opusStatus;
}
- (PBFeedBuilder*) setOpusStatus:(SInt32) value {
  resultPbfeed.hasOpusStatus = YES;
  resultPbfeed.opusStatus = value;
  return self;
}
- (PBFeedBuilder*) clearOpusStatus {
  resultPbfeed.hasOpusStatus = NO;
  resultPbfeed.opusStatus = 0;
  return self;
}
- (BOOL) hasComment {
  return resultPbfeed.hasComment;
}
- (NSString*) comment {
  return resultPbfeed.comment;
}
- (PBFeedBuilder*) setComment:(NSString*) value {
  resultPbfeed.hasComment = YES;
  resultPbfeed.comment = value;
  return self;
}
- (PBFeedBuilder*) clearComment {
  resultPbfeed.hasComment = NO;
  resultPbfeed.comment = @"";
  return self;
}
- (BOOL) hasCommentInfo {
  return resultPbfeed.hasCommentInfo;
}
- (PBCommentInfo*) commentInfo {
  return resultPbfeed.commentInfo;
}
- (PBFeedBuilder*) setCommentInfo:(PBCommentInfo*) value {
  resultPbfeed.hasCommentInfo = YES;
  resultPbfeed.commentInfo = value;
  return self;
}
- (PBFeedBuilder*) setCommentInfoBuilder:(PBCommentInfoBuilder*) builderForValue {
  return [self setCommentInfo:[builderForValue build]];
}
- (PBFeedBuilder*) mergeCommentInfo:(PBCommentInfo*) value {
  if (resultPbfeed.hasCommentInfo &&
      resultPbfeed.commentInfo != [PBCommentInfo defaultInstance]) {
    resultPbfeed.commentInfo =
      [[[PBCommentInfo builderWithPrototype:resultPbfeed.commentInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.commentInfo = value;
  }
  resultPbfeed.hasCommentInfo = YES;
  return self;
}
- (PBFeedBuilder*) clearCommentInfo {
  resultPbfeed.hasCommentInfo = NO;
  resultPbfeed.commentInfo = [PBCommentInfo defaultInstance];
  return self;
}
- (BOOL) hasMatchTimes {
  return resultPbfeed.hasMatchTimes;
}
- (SInt32) matchTimes {
  return resultPbfeed.matchTimes;
}
- (PBFeedBuilder*) setMatchTimes:(SInt32) value {
  resultPbfeed.hasMatchTimes = YES;
  resultPbfeed.matchTimes = value;
  return self;
}
- (PBFeedBuilder*) clearMatchTimes {
  resultPbfeed.hasMatchTimes = NO;
  resultPbfeed.matchTimes = 0;
  return self;
}
- (BOOL) hasCorrectTimes {
  return resultPbfeed.hasCorrectTimes;
}
- (SInt32) correctTimes {
  return resultPbfeed.correctTimes;
}
- (PBFeedBuilder*) setCorrectTimes:(SInt32) value {
  resultPbfeed.hasCorrectTimes = YES;
  resultPbfeed.correctTimes = value;
  return self;
}
- (PBFeedBuilder*) clearCorrectTimes {
  resultPbfeed.hasCorrectTimes = NO;
  resultPbfeed.correctTimes = 0;
  return self;
}
- (BOOL) hasGuessTimes {
  return resultPbfeed.hasGuessTimes;
}
- (SInt32) guessTimes {
  return resultPbfeed.guessTimes;
}
- (PBFeedBuilder*) setGuessTimes:(SInt32) value {
  resultPbfeed.hasGuessTimes = YES;
  resultPbfeed.guessTimes = value;
  return self;
}
- (PBFeedBuilder*) clearGuessTimes {
  resultPbfeed.hasGuessTimes = NO;
  resultPbfeed.guessTimes = 0;
  return self;
}
- (BOOL) hasCommentTimes {
  return resultPbfeed.hasCommentTimes;
}
- (SInt32) commentTimes {
  return resultPbfeed.commentTimes;
}
- (PBFeedBuilder*) setCommentTimes:(SInt32) value {
  resultPbfeed.hasCommentTimes = YES;
  resultPbfeed.commentTimes = value;
  return self;
}
- (PBFeedBuilder*) clearCommentTimes {
  resultPbfeed.hasCommentTimes = NO;
  resultPbfeed.commentTimes = 0;
  return self;
}
- (NSMutableArray *)feedTimes {
  return resultPbfeed.feedTimesArray;
}
- (PBFeedTimes*)feedTimesAtIndex:(NSUInteger)index {
  return [resultPbfeed feedTimesAtIndex:index];
}
- (PBFeedBuilder *)addFeedTimes:(PBFeedTimes*)value {
  if (resultPbfeed.feedTimesArray == nil) {
    resultPbfeed.feedTimesArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.feedTimesArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setFeedTimesArray:(NSArray *)array {
  resultPbfeed.feedTimesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearFeedTimes {
  resultPbfeed.feedTimesArray = nil;
  return self;
}
- (BOOL) hasOpusCreatorUserId {
  return resultPbfeed.hasOpusCreatorUserId;
}
- (NSString*) opusCreatorUserId {
  return resultPbfeed.opusCreatorUserId;
}
- (PBFeedBuilder*) setOpusCreatorUserId:(NSString*) value {
  resultPbfeed.hasOpusCreatorUserId = YES;
  resultPbfeed.opusCreatorUserId = value;
  return self;
}
- (PBFeedBuilder*) clearOpusCreatorUserId {
  resultPbfeed.hasOpusCreatorUserId = NO;
  resultPbfeed.opusCreatorUserId = @"";
  return self;
}
- (BOOL) hasOpusCreatorNickName {
  return resultPbfeed.hasOpusCreatorNickName;
}
- (NSString*) opusCreatorNickName {
  return resultPbfeed.opusCreatorNickName;
}
- (PBFeedBuilder*) setOpusCreatorNickName:(NSString*) value {
  resultPbfeed.hasOpusCreatorNickName = YES;
  resultPbfeed.opusCreatorNickName = value;
  return self;
}
- (PBFeedBuilder*) clearOpusCreatorNickName {
  resultPbfeed.hasOpusCreatorNickName = NO;
  resultPbfeed.opusCreatorNickName = @"";
  return self;
}
- (BOOL) hasOpusCreatorGender {
  return resultPbfeed.hasOpusCreatorGender;
}
- (BOOL) opusCreatorGender {
  return resultPbfeed.opusCreatorGender;
}
- (PBFeedBuilder*) setOpusCreatorGender:(BOOL) value {
  resultPbfeed.hasOpusCreatorGender = YES;
  resultPbfeed.opusCreatorGender = value;
  return self;
}
- (PBFeedBuilder*) clearOpusCreatorGender {
  resultPbfeed.hasOpusCreatorGender = NO;
  resultPbfeed.opusCreatorGender = NO;
  return self;
}
- (BOOL) hasOpusCreatorAvatar {
  return resultPbfeed.hasOpusCreatorAvatar;
}
- (NSString*) opusCreatorAvatar {
  return resultPbfeed.opusCreatorAvatar;
}
- (PBFeedBuilder*) setOpusCreatorAvatar:(NSString*) value {
  resultPbfeed.hasOpusCreatorAvatar = YES;
  resultPbfeed.opusCreatorAvatar = value;
  return self;
}
- (PBFeedBuilder*) clearOpusCreatorAvatar {
  resultPbfeed.hasOpusCreatorAvatar = NO;
  resultPbfeed.opusCreatorAvatar = @"";
  return self;
}
- (BOOL) hasOpusWord {
  return resultPbfeed.hasOpusWord;
}
- (NSString*) opusWord {
  return resultPbfeed.opusWord;
}
- (PBFeedBuilder*) setOpusWord:(NSString*) value {
  resultPbfeed.hasOpusWord = YES;
  resultPbfeed.opusWord = value;
  return self;
}
- (PBFeedBuilder*) clearOpusWord {
  resultPbfeed.hasOpusWord = NO;
  resultPbfeed.opusWord = @"";
  return self;
}
- (BOOL) hasOpusImage {
  return resultPbfeed.hasOpusImage;
}
- (NSString*) opusImage {
  return resultPbfeed.opusImage;
}
- (PBFeedBuilder*) setOpusImage:(NSString*) value {
  resultPbfeed.hasOpusImage = YES;
  resultPbfeed.opusImage = value;
  return self;
}
- (PBFeedBuilder*) clearOpusImage {
  resultPbfeed.hasOpusImage = NO;
  resultPbfeed.opusImage = @"";
  return self;
}
- (BOOL) hasOpusThumbImage {
  return resultPbfeed.hasOpusThumbImage;
}
- (NSString*) opusThumbImage {
  return resultPbfeed.opusThumbImage;
}
- (PBFeedBuilder*) setOpusThumbImage:(NSString*) value {
  resultPbfeed.hasOpusThumbImage = YES;
  resultPbfeed.opusThumbImage = value;
  return self;
}
- (PBFeedBuilder*) clearOpusThumbImage {
  resultPbfeed.hasOpusThumbImage = NO;
  resultPbfeed.opusThumbImage = @"";
  return self;
}
- (BOOL) hasDataUrl {
  return resultPbfeed.hasDataUrl;
}
- (NSString*) dataUrl {
  return resultPbfeed.dataUrl;
}
- (PBFeedBuilder*) setDataUrl:(NSString*) value {
  resultPbfeed.hasDataUrl = YES;
  resultPbfeed.dataUrl = value;
  return self;
}
- (PBFeedBuilder*) clearDataUrl {
  resultPbfeed.hasDataUrl = NO;
  resultPbfeed.dataUrl = @"";
  return self;
}
- (BOOL) hasBgImageUrl {
  return resultPbfeed.hasBgImageUrl;
}
- (NSString*) bgImageUrl {
  return resultPbfeed.bgImageUrl;
}
- (PBFeedBuilder*) setBgImageUrl:(NSString*) value {
  resultPbfeed.hasBgImageUrl = YES;
  resultPbfeed.bgImageUrl = value;
  return self;
}
- (PBFeedBuilder*) clearBgImageUrl {
  resultPbfeed.hasBgImageUrl = NO;
  resultPbfeed.bgImageUrl = @"";
  return self;
}
- (BOOL) hasBgImageName {
  return resultPbfeed.hasBgImageName;
}
- (NSString*) bgImageName {
  return resultPbfeed.bgImageName;
}
- (PBFeedBuilder*) setBgImageName:(NSString*) value {
  resultPbfeed.hasBgImageName = YES;
  resultPbfeed.bgImageName = value;
  return self;
}
- (PBFeedBuilder*) clearBgImageName {
  resultPbfeed.hasBgImageName = NO;
  resultPbfeed.bgImageName = @"";
  return self;
}
- (BOOL) hasContestId {
  return resultPbfeed.hasContestId;
}
- (NSString*) contestId {
  return resultPbfeed.contestId;
}
- (PBFeedBuilder*) setContestId:(NSString*) value {
  resultPbfeed.hasContestId = YES;
  resultPbfeed.contestId = value;
  return self;
}
- (PBFeedBuilder*) clearContestId {
  resultPbfeed.hasContestId = NO;
  resultPbfeed.contestId = @"";
  return self;
}
- (BOOL) hasContestScore {
  return resultPbfeed.hasContestScore;
}
- (Float64) contestScore {
  return resultPbfeed.contestScore;
}
- (PBFeedBuilder*) setContestScore:(Float64) value {
  resultPbfeed.hasContestScore = YES;
  resultPbfeed.contestScore = value;
  return self;
}
- (PBFeedBuilder*) clearContestScore {
  resultPbfeed.hasContestScore = NO;
  resultPbfeed.contestScore = 0;
  return self;
}
- (NSMutableArray *)rankInfo {
  return resultPbfeed.rankInfoArray;
}
- (PBOpusRank*)rankInfoAtIndex:(NSUInteger)index {
  return [resultPbfeed rankInfoAtIndex:index];
}
- (PBFeedBuilder *)addRankInfo:(PBOpusRank*)value {
  if (resultPbfeed.rankInfoArray == nil) {
    resultPbfeed.rankInfoArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.rankInfoArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setRankInfoArray:(NSArray *)array {
  resultPbfeed.rankInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearRankInfo {
  resultPbfeed.rankInfoArray = nil;
  return self;
}
- (BOOL) hasRankInTop {
  return resultPbfeed.hasRankInTop;
}
- (SInt32) rankInTop {
  return resultPbfeed.rankInTop;
}
- (PBFeedBuilder*) setRankInTop:(SInt32) value {
  resultPbfeed.hasRankInTop = YES;
  resultPbfeed.rankInTop = value;
  return self;
}
- (PBFeedBuilder*) clearRankInTop {
  resultPbfeed.hasRankInTop = NO;
  resultPbfeed.rankInTop = 0;
  return self;
}
- (BOOL) hasLearnDraw {
  return resultPbfeed.hasLearnDraw;
}
- (PBLearnDraw*) learnDraw {
  return resultPbfeed.learnDraw;
}
- (PBFeedBuilder*) setLearnDraw:(PBLearnDraw*) value {
  resultPbfeed.hasLearnDraw = YES;
  resultPbfeed.learnDraw = value;
  return self;
}
- (PBFeedBuilder*) setLearnDrawBuilder:(PBLearnDrawBuilder*) builderForValue {
  return [self setLearnDraw:[builderForValue build]];
}
- (PBFeedBuilder*) mergeLearnDraw:(PBLearnDraw*) value {
  if (resultPbfeed.hasLearnDraw &&
      resultPbfeed.learnDraw != [PBLearnDraw defaultInstance]) {
    resultPbfeed.learnDraw =
      [[[PBLearnDraw builderWithPrototype:resultPbfeed.learnDraw] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.learnDraw = value;
  }
  resultPbfeed.hasLearnDraw = YES;
  return self;
}
- (PBFeedBuilder*) clearLearnDraw {
  resultPbfeed.hasLearnDraw = NO;
  resultPbfeed.learnDraw = [PBLearnDraw defaultInstance];
  return self;
}
- (BOOL) hasSing {
  return resultPbfeed.hasSing;
}
- (PBSingOpus*) sing {
  return resultPbfeed.sing;
}
- (PBFeedBuilder*) setSing:(PBSingOpus*) value {
  resultPbfeed.hasSing = YES;
  resultPbfeed.sing = value;
  return self;
}
- (PBFeedBuilder*) setSingBuilder:(PBSingOpusBuilder*) builderForValue {
  return [self setSing:[builderForValue build]];
}
- (PBFeedBuilder*) mergeSing:(PBSingOpus*) value {
  if (resultPbfeed.hasSing &&
      resultPbfeed.sing != [PBSingOpus defaultInstance]) {
    resultPbfeed.sing =
      [[[PBSingOpus builderWithPrototype:resultPbfeed.sing] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.sing = value;
  }
  resultPbfeed.hasSing = YES;
  return self;
}
- (PBFeedBuilder*) clearSing {
  resultPbfeed.hasSing = NO;
  resultPbfeed.sing = [PBSingOpus defaultInstance];
  return self;
}
- (BOOL) hasDescLabelInfo {
  return resultPbfeed.hasDescLabelInfo;
}
- (PBLabelInfo*) descLabelInfo {
  return resultPbfeed.descLabelInfo;
}
- (PBFeedBuilder*) setDescLabelInfo:(PBLabelInfo*) value {
  resultPbfeed.hasDescLabelInfo = YES;
  resultPbfeed.descLabelInfo = value;
  return self;
}
- (PBFeedBuilder*) setDescLabelInfoBuilder:(PBLabelInfoBuilder*) builderForValue {
  return [self setDescLabelInfo:[builderForValue build]];
}
- (PBFeedBuilder*) mergeDescLabelInfo:(PBLabelInfo*) value {
  if (resultPbfeed.hasDescLabelInfo &&
      resultPbfeed.descLabelInfo != [PBLabelInfo defaultInstance]) {
    resultPbfeed.descLabelInfo =
      [[[PBLabelInfo builderWithPrototype:resultPbfeed.descLabelInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.descLabelInfo = value;
  }
  resultPbfeed.hasDescLabelInfo = YES;
  return self;
}
- (PBFeedBuilder*) clearDescLabelInfo {
  resultPbfeed.hasDescLabelInfo = NO;
  resultPbfeed.descLabelInfo = [PBLabelInfo defaultInstance];
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbfeed.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbfeed.canvasSize;
}
- (PBFeedBuilder*) setCanvasSize:(PBSize*) value {
  resultPbfeed.hasCanvasSize = YES;
  resultPbfeed.canvasSize = value;
  return self;
}
- (PBFeedBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBFeedBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbfeed.hasCanvasSize &&
      resultPbfeed.canvasSize != [PBSize defaultInstance]) {
    resultPbfeed.canvasSize =
      [[[PBSize builderWithPrototype:resultPbfeed.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.canvasSize = value;
  }
  resultPbfeed.hasCanvasSize = YES;
  return self;
}
- (PBFeedBuilder*) clearCanvasSize {
  resultPbfeed.hasCanvasSize = NO;
  resultPbfeed.canvasSize = [PBSize defaultInstance];
  return self;
}
- (BOOL) hasBgImageWidth {
  return resultPbfeed.hasBgImageWidth;
}
- (Float32) bgImageWidth {
  return resultPbfeed.bgImageWidth;
}
- (PBFeedBuilder*) setBgImageWidth:(Float32) value {
  resultPbfeed.hasBgImageWidth = YES;
  resultPbfeed.bgImageWidth = value;
  return self;
}
- (PBFeedBuilder*) clearBgImageWidth {
  resultPbfeed.hasBgImageWidth = NO;
  resultPbfeed.bgImageWidth = 0;
  return self;
}
- (BOOL) hasBgImageHeight {
  return resultPbfeed.hasBgImageHeight;
}
- (Float32) bgImageHeight {
  return resultPbfeed.bgImageHeight;
}
- (PBFeedBuilder*) setBgImageHeight:(Float32) value {
  resultPbfeed.hasBgImageHeight = YES;
  resultPbfeed.bgImageHeight = value;
  return self;
}
- (PBFeedBuilder*) clearBgImageHeight {
  resultPbfeed.hasBgImageHeight = NO;
  resultPbfeed.bgImageHeight = 0;
  return self;
}
- (BOOL) hasStrokes {
  return resultPbfeed.hasStrokes;
}
- (SInt64) strokes {
  return resultPbfeed.strokes;
}
- (PBFeedBuilder*) setStrokes:(SInt64) value {
  resultPbfeed.hasStrokes = YES;
  resultPbfeed.strokes = value;
  return self;
}
- (PBFeedBuilder*) clearStrokes {
  resultPbfeed.hasStrokes = NO;
  resultPbfeed.strokes = 0L;
  return self;
}
- (BOOL) hasDraftCompleteDate {
  return resultPbfeed.hasDraftCompleteDate;
}
- (SInt32) draftCompleteDate {
  return resultPbfeed.draftCompleteDate;
}
- (PBFeedBuilder*) setDraftCompleteDate:(SInt32) value {
  resultPbfeed.hasDraftCompleteDate = YES;
  resultPbfeed.draftCompleteDate = value;
  return self;
}
- (PBFeedBuilder*) clearDraftCompleteDate {
  resultPbfeed.hasDraftCompleteDate = NO;
  resultPbfeed.draftCompleteDate = 0;
  return self;
}
- (BOOL) hasDraftCreateDate {
  return resultPbfeed.hasDraftCreateDate;
}
- (SInt32) draftCreateDate {
  return resultPbfeed.draftCreateDate;
}
- (PBFeedBuilder*) setDraftCreateDate:(SInt32) value {
  resultPbfeed.hasDraftCreateDate = YES;
  resultPbfeed.draftCreateDate = value;
  return self;
}
- (PBFeedBuilder*) clearDraftCreateDate {
  resultPbfeed.hasDraftCreateDate = NO;
  resultPbfeed.draftCreateDate = 0;
  return self;
}
- (NSMutableArray *)opusClass {
  return resultPbfeed.opusClassArray;
}
- (PBClass*)opusClassAtIndex:(NSUInteger)index {
  return [resultPbfeed opusClassAtIndex:index];
}
- (PBFeedBuilder *)addOpusClass:(PBClass*)value {
  if (resultPbfeed.opusClassArray == nil) {
    resultPbfeed.opusClassArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.opusClassArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setOpusClassArray:(NSArray *)array {
  resultPbfeed.opusClassArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearOpusClass {
  resultPbfeed.opusClassArray = nil;
  return self;
}
- (NSMutableArray *)opusClassIds {
  return resultPbfeed.opusClassIdsArray;
}
- (NSString*)opusClassIdsAtIndex:(NSUInteger)index {
  return [resultPbfeed opusClassIdsAtIndex:index];
}
- (PBFeedBuilder *)addOpusClassIds:(NSString*)value {
  if (resultPbfeed.opusClassIdsArray == nil) {
    resultPbfeed.opusClassIdsArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.opusClassIdsArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setOpusClassIdsArray:(NSArray *)array {
  resultPbfeed.opusClassIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearOpusClassIds {
  resultPbfeed.opusClassIdsArray = nil;
  return self;
}
- (BOOL) hasStageScore {
  return resultPbfeed.hasStageScore;
}
- (SInt32) stageScore {
  return resultPbfeed.stageScore;
}
- (PBFeedBuilder*) setStageScore:(SInt32) value {
  resultPbfeed.hasStageScore = YES;
  resultPbfeed.stageScore = value;
  return self;
}
- (PBFeedBuilder*) clearStageScore {
  resultPbfeed.hasStageScore = NO;
  resultPbfeed.stageScore = 0;
  return self;
}
- (BOOL) hasStageRank {
  return resultPbfeed.hasStageRank;
}
- (SInt32) stageRank {
  return resultPbfeed.stageRank;
}
- (PBFeedBuilder*) setStageRank:(SInt32) value {
  resultPbfeed.hasStageRank = YES;
  resultPbfeed.stageRank = value;
  return self;
}
- (PBFeedBuilder*) clearStageRank {
  resultPbfeed.hasStageRank = NO;
  resultPbfeed.stageRank = 0;
  return self;
}
@end

@interface PBPoint ()
@property Float32 x;
@property Float32 y;
@end

@implementation PBPoint

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) _value_ {
  hasX_ = !!_value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) _value_ {
  hasY_ = !!_value_;
}
@synthesize y;
- (instancetype) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
  }
  return self;
}
static PBPoint* defaultPBPointInstance = nil;
+ (void) initialize {
  if (self == [PBPoint class]) {
    defaultPBPointInstance = [[PBPoint alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBPointInstance;
}
- (instancetype) defaultInstance {
  return defaultPBPointInstance;
}
- (BOOL) isInitialized {
  if (!self.hasX) {
    return NO;
  }
  if (!self.hasY) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeFloat:1 value:self.x];
  }
  if (self.hasY) {
    [output writeFloat:2 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasX) {
    size_ += computeFloatSize(1, self.x);
  }
  if (self.hasY) {
    size_ += computeFloatSize(2, self.y);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBPoint*) parseFromData:(NSData*) data {
  return (PBPoint*)[[[PBPoint builder] mergeFromData:data] build];
}
+ (PBPoint*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPoint*) parseFromInputStream:(NSInputStream*) input {
  return (PBPoint*)[[[PBPoint builder] mergeFromInputStream:input] build];
}
+ (PBPoint*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPoint*)[[[PBPoint builder] mergeFromCodedInputStream:input] build];
}
+ (PBPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoint*)[[[PBPoint builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPointBuilder*) builder {
  return [[PBPointBuilder alloc] init];
}
+ (PBPointBuilder*) builderWithPrototype:(PBPoint*) prototype {
  return [[PBPoint builder] mergeFrom:prototype];
}
- (PBPointBuilder*) builder {
  return [PBPoint builder];
}
- (PBPointBuilder*) toBuilder {
  return [PBPoint builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithFloat:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithFloat:self.y]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBPoint class]]) {
    return NO;
  }
  PBPoint *otherMessage = other;
  return
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.y] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBPointBuilder()
@property (strong) PBPoint* resultPbpoint;
@end

@implementation PBPointBuilder
@synthesize resultPbpoint;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbpoint = [[PBPoint alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbpoint;
}
- (PBPointBuilder*) clear {
  self.resultPbpoint = [[PBPoint alloc] init];
  return self;
}
- (PBPointBuilder*) clone {
  return [PBPoint builderWithPrototype:resultPbpoint];
}
- (PBPoint*) defaultInstance {
  return [PBPoint defaultInstance];
}
- (PBPoint*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPoint*) buildPartial {
  PBPoint* returnMe = resultPbpoint;
  self.resultPbpoint = nil;
  return returnMe;
}
- (PBPointBuilder*) mergeFrom:(PBPoint*) other {
  if (other == [PBPoint defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPointBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPointBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setX:[input readFloat]];
        break;
      }
      case 21: {
        [self setY:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return resultPbpoint.hasX;
}
- (Float32) x {
  return resultPbpoint.x;
}
- (PBPointBuilder*) setX:(Float32) value {
  resultPbpoint.hasX = YES;
  resultPbpoint.x = value;
  return self;
}
- (PBPointBuilder*) clearX {
  resultPbpoint.hasX = NO;
  resultPbpoint.x = 0;
  return self;
}
- (BOOL) hasY {
  return resultPbpoint.hasY;
}
- (Float32) y {
  return resultPbpoint.y;
}
- (PBPointBuilder*) setY:(Float32) value {
  resultPbpoint.hasY = YES;
  resultPbpoint.y = value;
  return self;
}
- (PBPointBuilder*) clearY {
  resultPbpoint.hasY = NO;
  resultPbpoint.y = 0;
  return self;
}
@end

@interface PBColor ()
@property Float32 red;
@property Float32 blue;
@property Float32 green;
@property Float32 alpha;
@end

@implementation PBColor

- (BOOL) hasRed {
  return !!hasRed_;
}
- (void) setHasRed:(BOOL) _value_ {
  hasRed_ = !!_value_;
}
@synthesize red;
- (BOOL) hasBlue {
  return !!hasBlue_;
}
- (void) setHasBlue:(BOOL) _value_ {
  hasBlue_ = !!_value_;
}
@synthesize blue;
- (BOOL) hasGreen {
  return !!hasGreen_;
}
- (void) setHasGreen:(BOOL) _value_ {
  hasGreen_ = !!_value_;
}
@synthesize green;
- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) _value_ {
  hasAlpha_ = !!_value_;
}
@synthesize alpha;
- (instancetype) init {
  if ((self = [super init])) {
    self.red = 0;
    self.blue = 0;
    self.green = 0;
    self.alpha = 0;
  }
  return self;
}
static PBColor* defaultPBColorInstance = nil;
+ (void) initialize {
  if (self == [PBColor class]) {
    defaultPBColorInstance = [[PBColor alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBColorInstance;
}
- (instancetype) defaultInstance {
  return defaultPBColorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRed) {
    return NO;
  }
  if (!self.hasBlue) {
    return NO;
  }
  if (!self.hasGreen) {
    return NO;
  }
  if (!self.hasAlpha) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRed) {
    [output writeFloat:1 value:self.red];
  }
  if (self.hasBlue) {
    [output writeFloat:2 value:self.blue];
  }
  if (self.hasGreen) {
    [output writeFloat:3 value:self.green];
  }
  if (self.hasAlpha) {
    [output writeFloat:4 value:self.alpha];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRed) {
    size_ += computeFloatSize(1, self.red);
  }
  if (self.hasBlue) {
    size_ += computeFloatSize(2, self.blue);
  }
  if (self.hasGreen) {
    size_ += computeFloatSize(3, self.green);
  }
  if (self.hasAlpha) {
    size_ += computeFloatSize(4, self.alpha);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBColor*) parseFromData:(NSData*) data {
  return (PBColor*)[[[PBColor builder] mergeFromData:data] build];
}
+ (PBColor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBColor*) parseFromInputStream:(NSInputStream*) input {
  return (PBColor*)[[[PBColor builder] mergeFromInputStream:input] build];
}
+ (PBColor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBColor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBColor*)[[[PBColor builder] mergeFromCodedInputStream:input] build];
}
+ (PBColor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBColor*)[[[PBColor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBColorBuilder*) builder {
  return [[PBColorBuilder alloc] init];
}
+ (PBColorBuilder*) builderWithPrototype:(PBColor*) prototype {
  return [[PBColor builder] mergeFrom:prototype];
}
- (PBColorBuilder*) builder {
  return [PBColor builder];
}
- (PBColorBuilder*) toBuilder {
  return [PBColor builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"red", [NSNumber numberWithFloat:self.red]];
  }
  if (self.hasBlue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blue", [NSNumber numberWithFloat:self.blue]];
  }
  if (self.hasGreen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"green", [NSNumber numberWithFloat:self.green]];
  }
  if (self.hasAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alpha", [NSNumber numberWithFloat:self.alpha]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBColor class]]) {
    return NO;
  }
  PBColor *otherMessage = other;
  return
      self.hasRed == otherMessage.hasRed &&
      (!self.hasRed || self.red == otherMessage.red) &&
      self.hasBlue == otherMessage.hasBlue &&
      (!self.hasBlue || self.blue == otherMessage.blue) &&
      self.hasGreen == otherMessage.hasGreen &&
      (!self.hasGreen || self.green == otherMessage.green) &&
      self.hasAlpha == otherMessage.hasAlpha &&
      (!self.hasAlpha || self.alpha == otherMessage.alpha) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.red] hash];
  }
  if (self.hasBlue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.blue] hash];
  }
  if (self.hasGreen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.green] hash];
  }
  if (self.hasAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.alpha] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBColorBuilder()
@property (strong) PBColor* resultPbcolor;
@end

@implementation PBColorBuilder
@synthesize resultPbcolor;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcolor = [[PBColor alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcolor;
}
- (PBColorBuilder*) clear {
  self.resultPbcolor = [[PBColor alloc] init];
  return self;
}
- (PBColorBuilder*) clone {
  return [PBColor builderWithPrototype:resultPbcolor];
}
- (PBColor*) defaultInstance {
  return [PBColor defaultInstance];
}
- (PBColor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBColor*) buildPartial {
  PBColor* returnMe = resultPbcolor;
  self.resultPbcolor = nil;
  return returnMe;
}
- (PBColorBuilder*) mergeFrom:(PBColor*) other {
  if (other == [PBColor defaultInstance]) {
    return self;
  }
  if (other.hasRed) {
    [self setRed:other.red];
  }
  if (other.hasBlue) {
    [self setBlue:other.blue];
  }
  if (other.hasGreen) {
    [self setGreen:other.green];
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBColorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBColorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setRed:[input readFloat]];
        break;
      }
      case 21: {
        [self setBlue:[input readFloat]];
        break;
      }
      case 29: {
        [self setGreen:[input readFloat]];
        break;
      }
      case 37: {
        [self setAlpha:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasRed {
  return resultPbcolor.hasRed;
}
- (Float32) red {
  return resultPbcolor.red;
}
- (PBColorBuilder*) setRed:(Float32) value {
  resultPbcolor.hasRed = YES;
  resultPbcolor.red = value;
  return self;
}
- (PBColorBuilder*) clearRed {
  resultPbcolor.hasRed = NO;
  resultPbcolor.red = 0;
  return self;
}
- (BOOL) hasBlue {
  return resultPbcolor.hasBlue;
}
- (Float32) blue {
  return resultPbcolor.blue;
}
- (PBColorBuilder*) setBlue:(Float32) value {
  resultPbcolor.hasBlue = YES;
  resultPbcolor.blue = value;
  return self;
}
- (PBColorBuilder*) clearBlue {
  resultPbcolor.hasBlue = NO;
  resultPbcolor.blue = 0;
  return self;
}
- (BOOL) hasGreen {
  return resultPbcolor.hasGreen;
}
- (Float32) green {
  return resultPbcolor.green;
}
- (PBColorBuilder*) setGreen:(Float32) value {
  resultPbcolor.hasGreen = YES;
  resultPbcolor.green = value;
  return self;
}
- (PBColorBuilder*) clearGreen {
  resultPbcolor.hasGreen = NO;
  resultPbcolor.green = 0;
  return self;
}
- (BOOL) hasAlpha {
  return resultPbcolor.hasAlpha;
}
- (Float32) alpha {
  return resultPbcolor.alpha;
}
- (PBColorBuilder*) setAlpha:(Float32) value {
  resultPbcolor.hasAlpha = YES;
  resultPbcolor.alpha = value;
  return self;
}
- (PBColorBuilder*) clearAlpha {
  resultPbcolor.hasAlpha = NO;
  resultPbcolor.alpha = 0;
  return self;
}
@end

@interface PBNoCompressDrawAction ()
@property SInt32 type;
@property (strong) NSMutableArray * pointArray;
@property (strong) PBColor* color;
@property Float32 width;
@property SInt32 penType;
@property SInt32 shapeType;
@property (strong) PBAppendableArray * rectComponentArray;
@property (strong) PBSize* canvasSize;
@property (strong) PBAppendableArray * pointXArray;
@property (strong) PBAppendableArray * pointYArray;
@property UInt32 rgbColor;
@property Float32 red;
@property Float32 blue;
@property Float32 green;
@property Float32 alpha;
@property (strong) PBAppendableArray * brushPointWidthArray;
@property (strong) PBAppendableArray * brushRandomValueArray;
@property BOOL isOptimized;
@end

@implementation PBNoCompressDrawAction

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
@synthesize pointArray;
@dynamic point;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasPenType {
  return !!hasPenType_;
}
- (void) setHasPenType:(BOOL) _value_ {
  hasPenType_ = !!_value_;
}
@synthesize penType;
- (BOOL) hasShapeType {
  return !!hasShapeType_;
}
- (void) setHasShapeType:(BOOL) _value_ {
  hasShapeType_ = !!_value_;
}
@synthesize shapeType;
@synthesize rectComponentArray;
@dynamic rectComponent;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
@synthesize pointXArray;
@dynamic pointX;
@synthesize pointYArray;
@dynamic pointY;
- (BOOL) hasRgbColor {
  return !!hasRgbColor_;
}
- (void) setHasRgbColor:(BOOL) _value_ {
  hasRgbColor_ = !!_value_;
}
@synthesize rgbColor;
- (BOOL) hasRed {
  return !!hasRed_;
}
- (void) setHasRed:(BOOL) _value_ {
  hasRed_ = !!_value_;
}
@synthesize red;
- (BOOL) hasBlue {
  return !!hasBlue_;
}
- (void) setHasBlue:(BOOL) _value_ {
  hasBlue_ = !!_value_;
}
@synthesize blue;
- (BOOL) hasGreen {
  return !!hasGreen_;
}
- (void) setHasGreen:(BOOL) _value_ {
  hasGreen_ = !!_value_;
}
@synthesize green;
- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) _value_ {
  hasAlpha_ = !!_value_;
}
@synthesize alpha;
@synthesize brushPointWidthArray;
@dynamic brushPointWidth;
@synthesize brushRandomValueArray;
@dynamic brushRandomValue;
- (BOOL) hasIsOptimized {
  return !!hasIsOptimized_;
}
- (void) setHasIsOptimized:(BOOL) _value_ {
  hasIsOptimized_ = !!_value_;
}
- (BOOL) isOptimized {
  return !!isOptimized_;
}
- (void) setIsOptimized:(BOOL) _value_ {
  isOptimized_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.color = [PBColor defaultInstance];
    self.width = 0;
    self.penType = 0;
    self.shapeType = 0;
    self.canvasSize = [PBSize defaultInstance];
    self.rgbColor = 0;
    self.red = 0;
    self.blue = 0;
    self.green = 0;
    self.alpha = 0;
    self.isOptimized = NO;
  }
  return self;
}
static PBNoCompressDrawAction* defaultPBNoCompressDrawActionInstance = nil;
+ (void) initialize {
  if (self == [PBNoCompressDrawAction class]) {
    defaultPBNoCompressDrawActionInstance = [[PBNoCompressDrawAction alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBNoCompressDrawActionInstance;
}
- (instancetype) defaultInstance {
  return defaultPBNoCompressDrawActionInstance;
}
- (NSArray *)point {
  return pointArray;
}
- (PBPoint*)pointAtIndex:(NSUInteger)index {
  return [pointArray objectAtIndex:index];
}
- (PBArray *)rectComponent {
  return rectComponentArray;
}
- (Float32)rectComponentAtIndex:(NSUInteger)index {
  return [rectComponentArray floatAtIndex:index];
}
- (PBArray *)pointX {
  return pointXArray;
}
- (Float32)pointXAtIndex:(NSUInteger)index {
  return [pointXArray floatAtIndex:index];
}
- (PBArray *)pointY {
  return pointYArray;
}
- (Float32)pointYAtIndex:(NSUInteger)index {
  return [pointYArray floatAtIndex:index];
}
- (PBArray *)brushPointWidth {
  return brushPointWidthArray;
}
- (Float32)brushPointWidthAtIndex:(NSUInteger)index {
  return [brushPointWidthArray floatAtIndex:index];
}
- (PBArray *)brushRandomValue {
  return brushRandomValueArray;
}
- (SInt32)brushRandomValueAtIndex:(NSUInteger)index {
  return [brushRandomValueArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  __block BOOL isInitpoint = YES;
   [self.point enumerateObjectsUsingBlock:^(PBPoint *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitpoint = NO;
      *stop = YES;
    }
  }];
  if (!isInitpoint) return isInitpoint;
  if (self.hasColor) {
    if (!self.color.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  [self.pointArray enumerateObjectsUsingBlock:^(PBPoint *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasColor) {
    [output writeMessage:3 value:self.color];
  }
  if (self.hasWidth) {
    [output writeFloat:4 value:self.width];
  }
  if (self.hasPenType) {
    [output writeInt32:5 value:self.penType];
  }
  if (self.hasShapeType) {
    [output writeInt32:6 value:self.shapeType];
  }
  const NSUInteger rectComponentArrayCount = self.rectComponentArray.count;
  if (rectComponentArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.rectComponentArray.data;
    for (NSUInteger i = 0; i < rectComponentArrayCount; ++i) {
      [output writeFloat:7 value:values[i]];
    }
  }
  if (self.hasCanvasSize) {
    [output writeMessage:8 value:self.canvasSize];
  }
  const NSUInteger pointXArrayCount = self.pointXArray.count;
  if (pointXArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.pointXArray.data;
    for (NSUInteger i = 0; i < pointXArrayCount; ++i) {
      [output writeFloat:11 value:values[i]];
    }
  }
  const NSUInteger pointYArrayCount = self.pointYArray.count;
  if (pointYArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.pointYArray.data;
    for (NSUInteger i = 0; i < pointYArrayCount; ++i) {
      [output writeFloat:12 value:values[i]];
    }
  }
  if (self.hasRgbColor) {
    [output writeUInt32:20 value:self.rgbColor];
  }
  if (self.hasRed) {
    [output writeFloat:21 value:self.red];
  }
  if (self.hasBlue) {
    [output writeFloat:22 value:self.blue];
  }
  if (self.hasGreen) {
    [output writeFloat:23 value:self.green];
  }
  if (self.hasAlpha) {
    [output writeFloat:24 value:self.alpha];
  }
  const NSUInteger brushPointWidthArrayCount = self.brushPointWidthArray.count;
  if (brushPointWidthArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.brushPointWidthArray.data;
    for (NSUInteger i = 0; i < brushPointWidthArrayCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger brushRandomValueArrayCount = self.brushRandomValueArray.count;
  if (brushRandomValueArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.brushRandomValueArray.data;
    for (NSUInteger i = 0; i < brushRandomValueArrayCount; ++i) {
      [output writeInt32:42 value:values[i]];
    }
  }
  if (self.hasIsOptimized) {
    [output writeBool:43 value:self.isOptimized];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  [self.pointArray enumerateObjectsUsingBlock:^(PBPoint *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasColor) {
    size_ += computeMessageSize(3, self.color);
  }
  if (self.hasWidth) {
    size_ += computeFloatSize(4, self.width);
  }
  if (self.hasPenType) {
    size_ += computeInt32Size(5, self.penType);
  }
  if (self.hasShapeType) {
    size_ += computeInt32Size(6, self.shapeType);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.rectComponentArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(8, self.canvasSize);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointXArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pointYArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasRgbColor) {
    size_ += computeUInt32Size(20, self.rgbColor);
  }
  if (self.hasRed) {
    size_ += computeFloatSize(21, self.red);
  }
  if (self.hasBlue) {
    size_ += computeFloatSize(22, self.blue);
  }
  if (self.hasGreen) {
    size_ += computeFloatSize(23, self.green);
  }
  if (self.hasAlpha) {
    size_ += computeFloatSize(24, self.alpha);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.brushPointWidthArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.brushRandomValueArray.count;
    const SInt32 *values = (const SInt32 *)self.brushRandomValueArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasIsOptimized) {
    size_ += computeBoolSize(43, self.isOptimized);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBNoCompressDrawAction*) parseFromData:(NSData*) data {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromData:data] build];
}
+ (PBNoCompressDrawAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction*) parseFromInputStream:(NSInputStream*) input {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromInputStream:input] build];
}
+ (PBNoCompressDrawAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromCodedInputStream:input] build];
}
+ (PBNoCompressDrawAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawAction*)[[[PBNoCompressDrawAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawActionBuilder*) builder {
  return [[PBNoCompressDrawActionBuilder alloc] init];
}
+ (PBNoCompressDrawActionBuilder*) builderWithPrototype:(PBNoCompressDrawAction*) prototype {
  return [[PBNoCompressDrawAction builder] mergeFrom:prototype];
}
- (PBNoCompressDrawActionBuilder*) builder {
  return [PBNoCompressDrawAction builder];
}
- (PBNoCompressDrawActionBuilder*) toBuilder {
  return [PBNoCompressDrawAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.pointArray enumerateObjectsUsingBlock:^(PBPoint *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"point"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasColor) {
    [output appendFormat:@"%@%@ {\n", indent, @"color"];
    [self.color writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithFloat:self.width]];
  }
  if (self.hasPenType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penType", [NSNumber numberWithInteger:self.penType]];
  }
  if (self.hasShapeType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shapeType", [NSNumber numberWithInteger:self.shapeType]];
  }
  [self.rectComponentArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rectComponent", obj];
  }];
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.pointXArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointX", obj];
  }];
  [self.pointYArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointY", obj];
  }];
  if (self.hasRgbColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rgbColor", [NSNumber numberWithInteger:self.rgbColor]];
  }
  if (self.hasRed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"red", [NSNumber numberWithFloat:self.red]];
  }
  if (self.hasBlue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blue", [NSNumber numberWithFloat:self.blue]];
  }
  if (self.hasGreen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"green", [NSNumber numberWithFloat:self.green]];
  }
  if (self.hasAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alpha", [NSNumber numberWithFloat:self.alpha]];
  }
  [self.brushPointWidthArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brushPointWidth", obj];
  }];
  [self.brushRandomValueArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brushRandomValue", obj];
  }];
  if (self.hasIsOptimized) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isOptimized", [NSNumber numberWithBool:self.isOptimized]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBNoCompressDrawAction class]]) {
    return NO;
  }
  PBNoCompressDrawAction *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      [self.pointArray isEqualToArray:otherMessage.pointArray] &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || [self.color isEqual:otherMessage.color]) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasPenType == otherMessage.hasPenType &&
      (!self.hasPenType || self.penType == otherMessage.penType) &&
      self.hasShapeType == otherMessage.hasShapeType &&
      (!self.hasShapeType || self.shapeType == otherMessage.shapeType) &&
      [self.rectComponentArray isEqualToArray:otherMessage.rectComponentArray] &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      [self.pointXArray isEqualToArray:otherMessage.pointXArray] &&
      [self.pointYArray isEqualToArray:otherMessage.pointYArray] &&
      self.hasRgbColor == otherMessage.hasRgbColor &&
      (!self.hasRgbColor || self.rgbColor == otherMessage.rgbColor) &&
      self.hasRed == otherMessage.hasRed &&
      (!self.hasRed || self.red == otherMessage.red) &&
      self.hasBlue == otherMessage.hasBlue &&
      (!self.hasBlue || self.blue == otherMessage.blue) &&
      self.hasGreen == otherMessage.hasGreen &&
      (!self.hasGreen || self.green == otherMessage.green) &&
      self.hasAlpha == otherMessage.hasAlpha &&
      (!self.hasAlpha || self.alpha == otherMessage.alpha) &&
      [self.brushPointWidthArray isEqualToArray:otherMessage.brushPointWidthArray] &&
      [self.brushRandomValueArray isEqualToArray:otherMessage.brushRandomValueArray] &&
      self.hasIsOptimized == otherMessage.hasIsOptimized &&
      (!self.hasIsOptimized || self.isOptimized == otherMessage.isOptimized) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  [self.pointArray enumerateObjectsUsingBlock:^(PBPoint *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasColor) {
    hashCode = hashCode * 31 + [self.color hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.width] hash];
  }
  if (self.hasPenType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.penType] hash];
  }
  if (self.hasShapeType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shapeType] hash];
  }
  [self.rectComponentArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  [self.pointXArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.pointYArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasRgbColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rgbColor] hash];
  }
  if (self.hasRed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.red] hash];
  }
  if (self.hasBlue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.blue] hash];
  }
  if (self.hasGreen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.green] hash];
  }
  if (self.hasAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.alpha] hash];
  }
  [self.brushPointWidthArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.brushRandomValueArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasIsOptimized) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isOptimized] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBNoCompressDrawActionBuilder()
@property (strong) PBNoCompressDrawAction* resultPbnoCompressDrawAction;
@end

@implementation PBNoCompressDrawActionBuilder
@synthesize resultPbnoCompressDrawAction;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbnoCompressDrawAction = [[PBNoCompressDrawAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbnoCompressDrawAction;
}
- (PBNoCompressDrawActionBuilder*) clear {
  self.resultPbnoCompressDrawAction = [[PBNoCompressDrawAction alloc] init];
  return self;
}
- (PBNoCompressDrawActionBuilder*) clone {
  return [PBNoCompressDrawAction builderWithPrototype:resultPbnoCompressDrawAction];
}
- (PBNoCompressDrawAction*) defaultInstance {
  return [PBNoCompressDrawAction defaultInstance];
}
- (PBNoCompressDrawAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBNoCompressDrawAction*) buildPartial {
  PBNoCompressDrawAction* returnMe = resultPbnoCompressDrawAction;
  self.resultPbnoCompressDrawAction = nil;
  return returnMe;
}
- (PBNoCompressDrawActionBuilder*) mergeFrom:(PBNoCompressDrawAction*) other {
  if (other == [PBNoCompressDrawAction defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.pointArray.count > 0) {
    if (resultPbnoCompressDrawAction.pointArray == nil) {
      resultPbnoCompressDrawAction.pointArray = [[NSMutableArray alloc] initWithArray:other.pointArray];
    } else {
      [resultPbnoCompressDrawAction.pointArray addObjectsFromArray:other.pointArray];
    }
  }
  if (other.hasColor) {
    [self mergeColor:other.color];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasPenType) {
    [self setPenType:other.penType];
  }
  if (other.hasShapeType) {
    [self setShapeType:other.shapeType];
  }
  if (other.rectComponentArray.count > 0) {
    if (resultPbnoCompressDrawAction.rectComponentArray == nil) {
      resultPbnoCompressDrawAction.rectComponentArray = [other.rectComponentArray copy];
    } else {
      [resultPbnoCompressDrawAction.rectComponentArray appendArray:other.rectComponentArray];
    }
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.pointXArray.count > 0) {
    if (resultPbnoCompressDrawAction.pointXArray == nil) {
      resultPbnoCompressDrawAction.pointXArray = [other.pointXArray copy];
    } else {
      [resultPbnoCompressDrawAction.pointXArray appendArray:other.pointXArray];
    }
  }
  if (other.pointYArray.count > 0) {
    if (resultPbnoCompressDrawAction.pointYArray == nil) {
      resultPbnoCompressDrawAction.pointYArray = [other.pointYArray copy];
    } else {
      [resultPbnoCompressDrawAction.pointYArray appendArray:other.pointYArray];
    }
  }
  if (other.hasRgbColor) {
    [self setRgbColor:other.rgbColor];
  }
  if (other.hasRed) {
    [self setRed:other.red];
  }
  if (other.hasBlue) {
    [self setBlue:other.blue];
  }
  if (other.hasGreen) {
    [self setGreen:other.green];
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  if (other.brushPointWidthArray.count > 0) {
    if (resultPbnoCompressDrawAction.brushPointWidthArray == nil) {
      resultPbnoCompressDrawAction.brushPointWidthArray = [other.brushPointWidthArray copy];
    } else {
      [resultPbnoCompressDrawAction.brushPointWidthArray appendArray:other.brushPointWidthArray];
    }
  }
  if (other.brushRandomValueArray.count > 0) {
    if (resultPbnoCompressDrawAction.brushRandomValueArray == nil) {
      resultPbnoCompressDrawAction.brushRandomValueArray = [other.brushRandomValueArray copy];
    } else {
      [resultPbnoCompressDrawAction.brushRandomValueArray appendArray:other.brushRandomValueArray];
    }
  }
  if (other.hasIsOptimized) {
    [self setIsOptimized:other.isOptimized];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBNoCompressDrawActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBNoCompressDrawActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        PBPointBuilder* subBuilder = [PBPoint builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPoint:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBColorBuilder* subBuilder = [PBColor builder];
        if (self.hasColor) {
          [subBuilder mergeFrom:self.color];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setColor:[subBuilder buildPartial]];
        break;
      }
      case 37: {
        [self setWidth:[input readFloat]];
        break;
      }
      case 40: {
        [self setPenType:[input readInt32]];
        break;
      }
      case 48: {
        [self setShapeType:[input readInt32]];
        break;
      }
      case 61: {
        [self addRectComponent:[input readFloat]];
        break;
      }
      case 66: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 93: {
        [self addPointX:[input readFloat]];
        break;
      }
      case 101: {
        [self addPointY:[input readFloat]];
        break;
      }
      case 160: {
        [self setRgbColor:[input readUInt32]];
        break;
      }
      case 173: {
        [self setRed:[input readFloat]];
        break;
      }
      case 181: {
        [self setBlue:[input readFloat]];
        break;
      }
      case 189: {
        [self setGreen:[input readFloat]];
        break;
      }
      case 197: {
        [self setAlpha:[input readFloat]];
        break;
      }
      case 333: {
        [self addBrushPointWidth:[input readFloat]];
        break;
      }
      case 336: {
        [self addBrushRandomValue:[input readInt32]];
        break;
      }
      case 344: {
        [self setIsOptimized:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPbnoCompressDrawAction.hasType;
}
- (SInt32) type {
  return resultPbnoCompressDrawAction.type;
}
- (PBNoCompressDrawActionBuilder*) setType:(SInt32) value {
  resultPbnoCompressDrawAction.hasType = YES;
  resultPbnoCompressDrawAction.type = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearType {
  resultPbnoCompressDrawAction.hasType = NO;
  resultPbnoCompressDrawAction.type = 0;
  return self;
}
- (NSMutableArray *)point {
  return resultPbnoCompressDrawAction.pointArray;
}
- (PBPoint*)pointAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawAction pointAtIndex:index];
}
- (PBNoCompressDrawActionBuilder *)addPoint:(PBPoint*)value {
  if (resultPbnoCompressDrawAction.pointArray == nil) {
    resultPbnoCompressDrawAction.pointArray = [[NSMutableArray alloc]init];
  }
  [resultPbnoCompressDrawAction.pointArray addObject:value];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setPointArray:(NSArray *)array {
  resultPbnoCompressDrawAction.pointArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBNoCompressDrawActionBuilder *)clearPoint {
  resultPbnoCompressDrawAction.pointArray = nil;
  return self;
}
- (BOOL) hasColor {
  return resultPbnoCompressDrawAction.hasColor;
}
- (PBColor*) color {
  return resultPbnoCompressDrawAction.color;
}
- (PBNoCompressDrawActionBuilder*) setColor:(PBColor*) value {
  resultPbnoCompressDrawAction.hasColor = YES;
  resultPbnoCompressDrawAction.color = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) setColorBuilder:(PBColorBuilder*) builderForValue {
  return [self setColor:[builderForValue build]];
}
- (PBNoCompressDrawActionBuilder*) mergeColor:(PBColor*) value {
  if (resultPbnoCompressDrawAction.hasColor &&
      resultPbnoCompressDrawAction.color != [PBColor defaultInstance]) {
    resultPbnoCompressDrawAction.color =
      [[[PBColor builderWithPrototype:resultPbnoCompressDrawAction.color] mergeFrom:value] buildPartial];
  } else {
    resultPbnoCompressDrawAction.color = value;
  }
  resultPbnoCompressDrawAction.hasColor = YES;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearColor {
  resultPbnoCompressDrawAction.hasColor = NO;
  resultPbnoCompressDrawAction.color = [PBColor defaultInstance];
  return self;
}
- (BOOL) hasWidth {
  return resultPbnoCompressDrawAction.hasWidth;
}
- (Float32) width {
  return resultPbnoCompressDrawAction.width;
}
- (PBNoCompressDrawActionBuilder*) setWidth:(Float32) value {
  resultPbnoCompressDrawAction.hasWidth = YES;
  resultPbnoCompressDrawAction.width = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearWidth {
  resultPbnoCompressDrawAction.hasWidth = NO;
  resultPbnoCompressDrawAction.width = 0;
  return self;
}
- (BOOL) hasPenType {
  return resultPbnoCompressDrawAction.hasPenType;
}
- (SInt32) penType {
  return resultPbnoCompressDrawAction.penType;
}
- (PBNoCompressDrawActionBuilder*) setPenType:(SInt32) value {
  resultPbnoCompressDrawAction.hasPenType = YES;
  resultPbnoCompressDrawAction.penType = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearPenType {
  resultPbnoCompressDrawAction.hasPenType = NO;
  resultPbnoCompressDrawAction.penType = 0;
  return self;
}
- (BOOL) hasShapeType {
  return resultPbnoCompressDrawAction.hasShapeType;
}
- (SInt32) shapeType {
  return resultPbnoCompressDrawAction.shapeType;
}
- (PBNoCompressDrawActionBuilder*) setShapeType:(SInt32) value {
  resultPbnoCompressDrawAction.hasShapeType = YES;
  resultPbnoCompressDrawAction.shapeType = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearShapeType {
  resultPbnoCompressDrawAction.hasShapeType = NO;
  resultPbnoCompressDrawAction.shapeType = 0;
  return self;
}
- (PBAppendableArray *)rectComponent {
  return resultPbnoCompressDrawAction.rectComponentArray;
}
- (Float32)rectComponentAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawAction rectComponentAtIndex:index];
}
- (PBNoCompressDrawActionBuilder *)addRectComponent:(Float32)value {
  if (resultPbnoCompressDrawAction.rectComponentArray == nil) {
    resultPbnoCompressDrawAction.rectComponentArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbnoCompressDrawAction.rectComponentArray addFloat:value];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setRectComponentArray:(NSArray *)array {
  resultPbnoCompressDrawAction.rectComponentArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setRectComponentValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbnoCompressDrawAction.rectComponentArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)clearRectComponent {
  resultPbnoCompressDrawAction.rectComponentArray = nil;
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbnoCompressDrawAction.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbnoCompressDrawAction.canvasSize;
}
- (PBNoCompressDrawActionBuilder*) setCanvasSize:(PBSize*) value {
  resultPbnoCompressDrawAction.hasCanvasSize = YES;
  resultPbnoCompressDrawAction.canvasSize = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBNoCompressDrawActionBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbnoCompressDrawAction.hasCanvasSize &&
      resultPbnoCompressDrawAction.canvasSize != [PBSize defaultInstance]) {
    resultPbnoCompressDrawAction.canvasSize =
      [[[PBSize builderWithPrototype:resultPbnoCompressDrawAction.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbnoCompressDrawAction.canvasSize = value;
  }
  resultPbnoCompressDrawAction.hasCanvasSize = YES;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearCanvasSize {
  resultPbnoCompressDrawAction.hasCanvasSize = NO;
  resultPbnoCompressDrawAction.canvasSize = [PBSize defaultInstance];
  return self;
}
- (PBAppendableArray *)pointX {
  return resultPbnoCompressDrawAction.pointXArray;
}
- (Float32)pointXAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawAction pointXAtIndex:index];
}
- (PBNoCompressDrawActionBuilder *)addPointX:(Float32)value {
  if (resultPbnoCompressDrawAction.pointXArray == nil) {
    resultPbnoCompressDrawAction.pointXArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbnoCompressDrawAction.pointXArray addFloat:value];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setPointXArray:(NSArray *)array {
  resultPbnoCompressDrawAction.pointXArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setPointXValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbnoCompressDrawAction.pointXArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)clearPointX {
  resultPbnoCompressDrawAction.pointXArray = nil;
  return self;
}
- (PBAppendableArray *)pointY {
  return resultPbnoCompressDrawAction.pointYArray;
}
- (Float32)pointYAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawAction pointYAtIndex:index];
}
- (PBNoCompressDrawActionBuilder *)addPointY:(Float32)value {
  if (resultPbnoCompressDrawAction.pointYArray == nil) {
    resultPbnoCompressDrawAction.pointYArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbnoCompressDrawAction.pointYArray addFloat:value];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setPointYArray:(NSArray *)array {
  resultPbnoCompressDrawAction.pointYArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setPointYValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbnoCompressDrawAction.pointYArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)clearPointY {
  resultPbnoCompressDrawAction.pointYArray = nil;
  return self;
}
- (BOOL) hasRgbColor {
  return resultPbnoCompressDrawAction.hasRgbColor;
}
- (UInt32) rgbColor {
  return resultPbnoCompressDrawAction.rgbColor;
}
- (PBNoCompressDrawActionBuilder*) setRgbColor:(UInt32) value {
  resultPbnoCompressDrawAction.hasRgbColor = YES;
  resultPbnoCompressDrawAction.rgbColor = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearRgbColor {
  resultPbnoCompressDrawAction.hasRgbColor = NO;
  resultPbnoCompressDrawAction.rgbColor = 0;
  return self;
}
- (BOOL) hasRed {
  return resultPbnoCompressDrawAction.hasRed;
}
- (Float32) red {
  return resultPbnoCompressDrawAction.red;
}
- (PBNoCompressDrawActionBuilder*) setRed:(Float32) value {
  resultPbnoCompressDrawAction.hasRed = YES;
  resultPbnoCompressDrawAction.red = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearRed {
  resultPbnoCompressDrawAction.hasRed = NO;
  resultPbnoCompressDrawAction.red = 0;
  return self;
}
- (BOOL) hasBlue {
  return resultPbnoCompressDrawAction.hasBlue;
}
- (Float32) blue {
  return resultPbnoCompressDrawAction.blue;
}
- (PBNoCompressDrawActionBuilder*) setBlue:(Float32) value {
  resultPbnoCompressDrawAction.hasBlue = YES;
  resultPbnoCompressDrawAction.blue = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearBlue {
  resultPbnoCompressDrawAction.hasBlue = NO;
  resultPbnoCompressDrawAction.blue = 0;
  return self;
}
- (BOOL) hasGreen {
  return resultPbnoCompressDrawAction.hasGreen;
}
- (Float32) green {
  return resultPbnoCompressDrawAction.green;
}
- (PBNoCompressDrawActionBuilder*) setGreen:(Float32) value {
  resultPbnoCompressDrawAction.hasGreen = YES;
  resultPbnoCompressDrawAction.green = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearGreen {
  resultPbnoCompressDrawAction.hasGreen = NO;
  resultPbnoCompressDrawAction.green = 0;
  return self;
}
- (BOOL) hasAlpha {
  return resultPbnoCompressDrawAction.hasAlpha;
}
- (Float32) alpha {
  return resultPbnoCompressDrawAction.alpha;
}
- (PBNoCompressDrawActionBuilder*) setAlpha:(Float32) value {
  resultPbnoCompressDrawAction.hasAlpha = YES;
  resultPbnoCompressDrawAction.alpha = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearAlpha {
  resultPbnoCompressDrawAction.hasAlpha = NO;
  resultPbnoCompressDrawAction.alpha = 0;
  return self;
}
- (PBAppendableArray *)brushPointWidth {
  return resultPbnoCompressDrawAction.brushPointWidthArray;
}
- (Float32)brushPointWidthAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawAction brushPointWidthAtIndex:index];
}
- (PBNoCompressDrawActionBuilder *)addBrushPointWidth:(Float32)value {
  if (resultPbnoCompressDrawAction.brushPointWidthArray == nil) {
    resultPbnoCompressDrawAction.brushPointWidthArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultPbnoCompressDrawAction.brushPointWidthArray addFloat:value];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setBrushPointWidthArray:(NSArray *)array {
  resultPbnoCompressDrawAction.brushPointWidthArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setBrushPointWidthValues:(const Float32 *)values count:(NSUInteger)count {
  resultPbnoCompressDrawAction.brushPointWidthArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (PBNoCompressDrawActionBuilder *)clearBrushPointWidth {
  resultPbnoCompressDrawAction.brushPointWidthArray = nil;
  return self;
}
- (PBAppendableArray *)brushRandomValue {
  return resultPbnoCompressDrawAction.brushRandomValueArray;
}
- (SInt32)brushRandomValueAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawAction brushRandomValueAtIndex:index];
}
- (PBNoCompressDrawActionBuilder *)addBrushRandomValue:(SInt32)value {
  if (resultPbnoCompressDrawAction.brushRandomValueArray == nil) {
    resultPbnoCompressDrawAction.brushRandomValueArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbnoCompressDrawAction.brushRandomValueArray addInt32:value];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setBrushRandomValueArray:(NSArray *)array {
  resultPbnoCompressDrawAction.brushRandomValueArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBNoCompressDrawActionBuilder *)setBrushRandomValueValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbnoCompressDrawAction.brushRandomValueArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBNoCompressDrawActionBuilder *)clearBrushRandomValue {
  resultPbnoCompressDrawAction.brushRandomValueArray = nil;
  return self;
}
- (BOOL) hasIsOptimized {
  return resultPbnoCompressDrawAction.hasIsOptimized;
}
- (BOOL) isOptimized {
  return resultPbnoCompressDrawAction.isOptimized;
}
- (PBNoCompressDrawActionBuilder*) setIsOptimized:(BOOL) value {
  resultPbnoCompressDrawAction.hasIsOptimized = YES;
  resultPbnoCompressDrawAction.isOptimized = value;
  return self;
}
- (PBNoCompressDrawActionBuilder*) clearIsOptimized {
  resultPbnoCompressDrawAction.hasIsOptimized = NO;
  resultPbnoCompressDrawAction.isOptimized = NO;
  return self;
}
@end

@interface PBNoCompressDrawData ()
@property (strong) NSMutableArray * drawActionListArray;
@property SInt32 version;
@property (strong) PBSize* canvasSize;
@property (strong) NSMutableArray * drawActionList2Array;
@property (strong) PBUserBasicInfo* drawToUser;
@property (strong) NSString* opusDesc;
@property (strong) NSString* bgImageName;
@property (strong) NSMutableArray * layerArray;
@property SInt64 strokes;
@property SInt32 spendTime;
@property SInt32 completeDate;
@end

@implementation PBNoCompressDrawData

@synthesize drawActionListArray;
@dynamic drawActionList;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
@synthesize drawActionList2Array;
@dynamic drawActionList2;
- (BOOL) hasDrawToUser {
  return !!hasDrawToUser_;
}
- (void) setHasDrawToUser:(BOOL) _value_ {
  hasDrawToUser_ = !!_value_;
}
@synthesize drawToUser;
- (BOOL) hasOpusDesc {
  return !!hasOpusDesc_;
}
- (void) setHasOpusDesc:(BOOL) _value_ {
  hasOpusDesc_ = !!_value_;
}
@synthesize opusDesc;
- (BOOL) hasBgImageName {
  return !!hasBgImageName_;
}
- (void) setHasBgImageName:(BOOL) _value_ {
  hasBgImageName_ = !!_value_;
}
@synthesize bgImageName;
@synthesize layerArray;
@dynamic layer;
- (BOOL) hasStrokes {
  return !!hasStrokes_;
}
- (void) setHasStrokes:(BOOL) _value_ {
  hasStrokes_ = !!_value_;
}
@synthesize strokes;
- (BOOL) hasSpendTime {
  return !!hasSpendTime_;
}
- (void) setHasSpendTime:(BOOL) _value_ {
  hasSpendTime_ = !!_value_;
}
@synthesize spendTime;
- (BOOL) hasCompleteDate {
  return !!hasCompleteDate_;
}
- (void) setHasCompleteDate:(BOOL) _value_ {
  hasCompleteDate_ = !!_value_;
}
@synthesize completeDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
    self.canvasSize = [PBSize defaultInstance];
    self.drawToUser = [PBUserBasicInfo defaultInstance];
    self.opusDesc = @"";
    self.bgImageName = @"";
    self.strokes = 0L;
    self.spendTime = 0;
    self.completeDate = 0;
  }
  return self;
}
static PBNoCompressDrawData* defaultPBNoCompressDrawDataInstance = nil;
+ (void) initialize {
  if (self == [PBNoCompressDrawData class]) {
    defaultPBNoCompressDrawDataInstance = [[PBNoCompressDrawData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBNoCompressDrawDataInstance;
}
- (instancetype) defaultInstance {
  return defaultPBNoCompressDrawDataInstance;
}
- (NSArray *)drawActionList {
  return drawActionListArray;
}
- (PBNoCompressDrawAction*)drawActionListAtIndex:(NSUInteger)index {
  return [drawActionListArray objectAtIndex:index];
}
- (NSArray *)drawActionList2 {
  return drawActionList2Array;
}
- (PBDrawAction*)drawActionList2AtIndex:(NSUInteger)index {
  return [drawActionList2Array objectAtIndex:index];
}
- (NSArray *)layer {
  return layerArray;
}
- (PBLayer*)layerAtIndex:(NSUInteger)index {
  return [layerArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitdrawActionList = YES;
   [self.drawActionList enumerateObjectsUsingBlock:^(PBNoCompressDrawAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawActionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawActionList) return isInitdrawActionList;
  __block BOOL isInitdrawActionList2 = YES;
   [self.drawActionList2 enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawActionList2 = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawActionList2) return isInitdrawActionList2;
  if (self.hasDrawToUser) {
    if (!self.drawToUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitlayer = YES;
   [self.layer enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlayer = NO;
      *stop = YES;
    }
  }];
  if (!isInitlayer) return isInitlayer;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBNoCompressDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasVersion) {
    [output writeInt32:2 value:self.version];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:4 value:self.canvasSize];
  }
  [self.drawActionList2Array enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasDrawToUser) {
    [output writeMessage:6 value:self.drawToUser];
  }
  if (self.hasOpusDesc) {
    [output writeString:7 value:self.opusDesc];
  }
  if (self.hasBgImageName) {
    [output writeString:8 value:self.bgImageName];
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  if (self.hasStrokes) {
    [output writeInt64:31 value:self.strokes];
  }
  if (self.hasSpendTime) {
    [output writeInt32:32 value:self.spendTime];
  }
  if (self.hasCompleteDate) {
    [output writeInt32:33 value:self.completeDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBNoCompressDrawAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasVersion) {
    size_ += computeInt32Size(2, self.version);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(4, self.canvasSize);
  }
  [self.drawActionList2Array enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasDrawToUser) {
    size_ += computeMessageSize(6, self.drawToUser);
  }
  if (self.hasOpusDesc) {
    size_ += computeStringSize(7, self.opusDesc);
  }
  if (self.hasBgImageName) {
    size_ += computeStringSize(8, self.bgImageName);
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  if (self.hasStrokes) {
    size_ += computeInt64Size(31, self.strokes);
  }
  if (self.hasSpendTime) {
    size_ += computeInt32Size(32, self.spendTime);
  }
  if (self.hasCompleteDate) {
    size_ += computeInt32Size(33, self.completeDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBNoCompressDrawData*) parseFromData:(NSData*) data {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromData:data] build];
}
+ (PBNoCompressDrawData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData*) parseFromInputStream:(NSInputStream*) input {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromInputStream:input] build];
}
+ (PBNoCompressDrawData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromCodedInputStream:input] build];
}
+ (PBNoCompressDrawData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBNoCompressDrawData*)[[[PBNoCompressDrawData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBNoCompressDrawDataBuilder*) builder {
  return [[PBNoCompressDrawDataBuilder alloc] init];
}
+ (PBNoCompressDrawDataBuilder*) builderWithPrototype:(PBNoCompressDrawData*) prototype {
  return [[PBNoCompressDrawData builder] mergeFrom:prototype];
}
- (PBNoCompressDrawDataBuilder*) builder {
  return [PBNoCompressDrawData builder];
}
- (PBNoCompressDrawDataBuilder*) toBuilder {
  return [PBNoCompressDrawData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBNoCompressDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawActionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.drawActionList2Array enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawActionList2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDrawToUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawToUser"];
    [self.drawToUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOpusDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusDesc", self.opusDesc];
  }
  if (self.hasBgImageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bgImageName", self.bgImageName];
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"layer"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasStrokes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strokes", [NSNumber numberWithLongLong:self.strokes]];
  }
  if (self.hasSpendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spendTime", [NSNumber numberWithInteger:self.spendTime]];
  }
  if (self.hasCompleteDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completeDate", [NSNumber numberWithInteger:self.completeDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBNoCompressDrawData class]]) {
    return NO;
  }
  PBNoCompressDrawData *otherMessage = other;
  return
      [self.drawActionListArray isEqualToArray:otherMessage.drawActionListArray] &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      [self.drawActionList2Array isEqualToArray:otherMessage.drawActionList2Array] &&
      self.hasDrawToUser == otherMessage.hasDrawToUser &&
      (!self.hasDrawToUser || [self.drawToUser isEqual:otherMessage.drawToUser]) &&
      self.hasOpusDesc == otherMessage.hasOpusDesc &&
      (!self.hasOpusDesc || [self.opusDesc isEqual:otherMessage.opusDesc]) &&
      self.hasBgImageName == otherMessage.hasBgImageName &&
      (!self.hasBgImageName || [self.bgImageName isEqual:otherMessage.bgImageName]) &&
      [self.layerArray isEqualToArray:otherMessage.layerArray] &&
      self.hasStrokes == otherMessage.hasStrokes &&
      (!self.hasStrokes || self.strokes == otherMessage.strokes) &&
      self.hasSpendTime == otherMessage.hasSpendTime &&
      (!self.hasSpendTime || self.spendTime == otherMessage.spendTime) &&
      self.hasCompleteDate == otherMessage.hasCompleteDate &&
      (!self.hasCompleteDate || self.completeDate == otherMessage.completeDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.drawActionListArray enumerateObjectsUsingBlock:^(PBNoCompressDrawAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  [self.drawActionList2Array enumerateObjectsUsingBlock:^(PBDrawAction *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDrawToUser) {
    hashCode = hashCode * 31 + [self.drawToUser hash];
  }
  if (self.hasOpusDesc) {
    hashCode = hashCode * 31 + [self.opusDesc hash];
  }
  if (self.hasBgImageName) {
    hashCode = hashCode * 31 + [self.bgImageName hash];
  }
  [self.layerArray enumerateObjectsUsingBlock:^(PBLayer *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStrokes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.strokes] hash];
  }
  if (self.hasSpendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spendTime] hash];
  }
  if (self.hasCompleteDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.completeDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBNoCompressDrawDataBuilder()
@property (strong) PBNoCompressDrawData* resultPbnoCompressDrawData;
@end

@implementation PBNoCompressDrawDataBuilder
@synthesize resultPbnoCompressDrawData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbnoCompressDrawData = [[PBNoCompressDrawData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbnoCompressDrawData;
}
- (PBNoCompressDrawDataBuilder*) clear {
  self.resultPbnoCompressDrawData = [[PBNoCompressDrawData alloc] init];
  return self;
}
- (PBNoCompressDrawDataBuilder*) clone {
  return [PBNoCompressDrawData builderWithPrototype:resultPbnoCompressDrawData];
}
- (PBNoCompressDrawData*) defaultInstance {
  return [PBNoCompressDrawData defaultInstance];
}
- (PBNoCompressDrawData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBNoCompressDrawData*) buildPartial {
  PBNoCompressDrawData* returnMe = resultPbnoCompressDrawData;
  self.resultPbnoCompressDrawData = nil;
  return returnMe;
}
- (PBNoCompressDrawDataBuilder*) mergeFrom:(PBNoCompressDrawData*) other {
  if (other == [PBNoCompressDrawData defaultInstance]) {
    return self;
  }
  if (other.drawActionListArray.count > 0) {
    if (resultPbnoCompressDrawData.drawActionListArray == nil) {
      resultPbnoCompressDrawData.drawActionListArray = [[NSMutableArray alloc] initWithArray:other.drawActionListArray];
    } else {
      [resultPbnoCompressDrawData.drawActionListArray addObjectsFromArray:other.drawActionListArray];
    }
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.drawActionList2Array.count > 0) {
    if (resultPbnoCompressDrawData.drawActionList2Array == nil) {
      resultPbnoCompressDrawData.drawActionList2Array = [[NSMutableArray alloc] initWithArray:other.drawActionList2Array];
    } else {
      [resultPbnoCompressDrawData.drawActionList2Array addObjectsFromArray:other.drawActionList2Array];
    }
  }
  if (other.hasDrawToUser) {
    [self mergeDrawToUser:other.drawToUser];
  }
  if (other.hasOpusDesc) {
    [self setOpusDesc:other.opusDesc];
  }
  if (other.hasBgImageName) {
    [self setBgImageName:other.bgImageName];
  }
  if (other.layerArray.count > 0) {
    if (resultPbnoCompressDrawData.layerArray == nil) {
      resultPbnoCompressDrawData.layerArray = [[NSMutableArray alloc] initWithArray:other.layerArray];
    } else {
      [resultPbnoCompressDrawData.layerArray addObjectsFromArray:other.layerArray];
    }
  }
  if (other.hasStrokes) {
    [self setStrokes:other.strokes];
  }
  if (other.hasSpendTime) {
    [self setSpendTime:other.spendTime];
  }
  if (other.hasCompleteDate) {
    [self setCompleteDate:other.completeDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBNoCompressDrawDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBNoCompressDrawDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBNoCompressDrawActionBuilder* subBuilder = [PBNoCompressDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawActionList:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 34: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        PBDrawActionBuilder* subBuilder = [PBDrawAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawActionList2:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        PBUserBasicInfoBuilder* subBuilder = [PBUserBasicInfo builder];
        if (self.hasDrawToUser) {
          [subBuilder mergeFrom:self.drawToUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDrawToUser:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setOpusDesc:[input readString]];
        break;
      }
      case 66: {
        [self setBgImageName:[input readString]];
        break;
      }
      case 74: {
        PBLayerBuilder* subBuilder = [PBLayer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLayer:[subBuilder buildPartial]];
        break;
      }
      case 248: {
        [self setStrokes:[input readInt64]];
        break;
      }
      case 256: {
        [self setSpendTime:[input readInt32]];
        break;
      }
      case 264: {
        [self setCompleteDate:[input readInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)drawActionList {
  return resultPbnoCompressDrawData.drawActionListArray;
}
- (PBNoCompressDrawAction*)drawActionListAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawData drawActionListAtIndex:index];
}
- (PBNoCompressDrawDataBuilder *)addDrawActionList:(PBNoCompressDrawAction*)value {
  if (resultPbnoCompressDrawData.drawActionListArray == nil) {
    resultPbnoCompressDrawData.drawActionListArray = [[NSMutableArray alloc]init];
  }
  [resultPbnoCompressDrawData.drawActionListArray addObject:value];
  return self;
}
- (PBNoCompressDrawDataBuilder *)setDrawActionListArray:(NSArray *)array {
  resultPbnoCompressDrawData.drawActionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBNoCompressDrawDataBuilder *)clearDrawActionList {
  resultPbnoCompressDrawData.drawActionListArray = nil;
  return self;
}
- (BOOL) hasVersion {
  return resultPbnoCompressDrawData.hasVersion;
}
- (SInt32) version {
  return resultPbnoCompressDrawData.version;
}
- (PBNoCompressDrawDataBuilder*) setVersion:(SInt32) value {
  resultPbnoCompressDrawData.hasVersion = YES;
  resultPbnoCompressDrawData.version = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearVersion {
  resultPbnoCompressDrawData.hasVersion = NO;
  resultPbnoCompressDrawData.version = 0;
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbnoCompressDrawData.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbnoCompressDrawData.canvasSize;
}
- (PBNoCompressDrawDataBuilder*) setCanvasSize:(PBSize*) value {
  resultPbnoCompressDrawData.hasCanvasSize = YES;
  resultPbnoCompressDrawData.canvasSize = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBNoCompressDrawDataBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbnoCompressDrawData.hasCanvasSize &&
      resultPbnoCompressDrawData.canvasSize != [PBSize defaultInstance]) {
    resultPbnoCompressDrawData.canvasSize =
      [[[PBSize builderWithPrototype:resultPbnoCompressDrawData.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbnoCompressDrawData.canvasSize = value;
  }
  resultPbnoCompressDrawData.hasCanvasSize = YES;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearCanvasSize {
  resultPbnoCompressDrawData.hasCanvasSize = NO;
  resultPbnoCompressDrawData.canvasSize = [PBSize defaultInstance];
  return self;
}
- (NSMutableArray *)drawActionList2 {
  return resultPbnoCompressDrawData.drawActionList2Array;
}
- (PBDrawAction*)drawActionList2AtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawData drawActionList2AtIndex:index];
}
- (PBNoCompressDrawDataBuilder *)addDrawActionList2:(PBDrawAction*)value {
  if (resultPbnoCompressDrawData.drawActionList2Array == nil) {
    resultPbnoCompressDrawData.drawActionList2Array = [[NSMutableArray alloc]init];
  }
  [resultPbnoCompressDrawData.drawActionList2Array addObject:value];
  return self;
}
- (PBNoCompressDrawDataBuilder *)setDrawActionList2Array:(NSArray *)array {
  resultPbnoCompressDrawData.drawActionList2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBNoCompressDrawDataBuilder *)clearDrawActionList2 {
  resultPbnoCompressDrawData.drawActionList2Array = nil;
  return self;
}
- (BOOL) hasDrawToUser {
  return resultPbnoCompressDrawData.hasDrawToUser;
}
- (PBUserBasicInfo*) drawToUser {
  return resultPbnoCompressDrawData.drawToUser;
}
- (PBNoCompressDrawDataBuilder*) setDrawToUser:(PBUserBasicInfo*) value {
  resultPbnoCompressDrawData.hasDrawToUser = YES;
  resultPbnoCompressDrawData.drawToUser = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) setDrawToUserBuilder:(PBUserBasicInfoBuilder*) builderForValue {
  return [self setDrawToUser:[builderForValue build]];
}
- (PBNoCompressDrawDataBuilder*) mergeDrawToUser:(PBUserBasicInfo*) value {
  if (resultPbnoCompressDrawData.hasDrawToUser &&
      resultPbnoCompressDrawData.drawToUser != [PBUserBasicInfo defaultInstance]) {
    resultPbnoCompressDrawData.drawToUser =
      [[[PBUserBasicInfo builderWithPrototype:resultPbnoCompressDrawData.drawToUser] mergeFrom:value] buildPartial];
  } else {
    resultPbnoCompressDrawData.drawToUser = value;
  }
  resultPbnoCompressDrawData.hasDrawToUser = YES;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearDrawToUser {
  resultPbnoCompressDrawData.hasDrawToUser = NO;
  resultPbnoCompressDrawData.drawToUser = [PBUserBasicInfo defaultInstance];
  return self;
}
- (BOOL) hasOpusDesc {
  return resultPbnoCompressDrawData.hasOpusDesc;
}
- (NSString*) opusDesc {
  return resultPbnoCompressDrawData.opusDesc;
}
- (PBNoCompressDrawDataBuilder*) setOpusDesc:(NSString*) value {
  resultPbnoCompressDrawData.hasOpusDesc = YES;
  resultPbnoCompressDrawData.opusDesc = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearOpusDesc {
  resultPbnoCompressDrawData.hasOpusDesc = NO;
  resultPbnoCompressDrawData.opusDesc = @"";
  return self;
}
- (BOOL) hasBgImageName {
  return resultPbnoCompressDrawData.hasBgImageName;
}
- (NSString*) bgImageName {
  return resultPbnoCompressDrawData.bgImageName;
}
- (PBNoCompressDrawDataBuilder*) setBgImageName:(NSString*) value {
  resultPbnoCompressDrawData.hasBgImageName = YES;
  resultPbnoCompressDrawData.bgImageName = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearBgImageName {
  resultPbnoCompressDrawData.hasBgImageName = NO;
  resultPbnoCompressDrawData.bgImageName = @"";
  return self;
}
- (NSMutableArray *)layer {
  return resultPbnoCompressDrawData.layerArray;
}
- (PBLayer*)layerAtIndex:(NSUInteger)index {
  return [resultPbnoCompressDrawData layerAtIndex:index];
}
- (PBNoCompressDrawDataBuilder *)addLayer:(PBLayer*)value {
  if (resultPbnoCompressDrawData.layerArray == nil) {
    resultPbnoCompressDrawData.layerArray = [[NSMutableArray alloc]init];
  }
  [resultPbnoCompressDrawData.layerArray addObject:value];
  return self;
}
- (PBNoCompressDrawDataBuilder *)setLayerArray:(NSArray *)array {
  resultPbnoCompressDrawData.layerArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBNoCompressDrawDataBuilder *)clearLayer {
  resultPbnoCompressDrawData.layerArray = nil;
  return self;
}
- (BOOL) hasStrokes {
  return resultPbnoCompressDrawData.hasStrokes;
}
- (SInt64) strokes {
  return resultPbnoCompressDrawData.strokes;
}
- (PBNoCompressDrawDataBuilder*) setStrokes:(SInt64) value {
  resultPbnoCompressDrawData.hasStrokes = YES;
  resultPbnoCompressDrawData.strokes = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearStrokes {
  resultPbnoCompressDrawData.hasStrokes = NO;
  resultPbnoCompressDrawData.strokes = 0L;
  return self;
}
- (BOOL) hasSpendTime {
  return resultPbnoCompressDrawData.hasSpendTime;
}
- (SInt32) spendTime {
  return resultPbnoCompressDrawData.spendTime;
}
- (PBNoCompressDrawDataBuilder*) setSpendTime:(SInt32) value {
  resultPbnoCompressDrawData.hasSpendTime = YES;
  resultPbnoCompressDrawData.spendTime = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearSpendTime {
  resultPbnoCompressDrawData.hasSpendTime = NO;
  resultPbnoCompressDrawData.spendTime = 0;
  return self;
}
- (BOOL) hasCompleteDate {
  return resultPbnoCompressDrawData.hasCompleteDate;
}
- (SInt32) completeDate {
  return resultPbnoCompressDrawData.completeDate;
}
- (PBNoCompressDrawDataBuilder*) setCompleteDate:(SInt32) value {
  resultPbnoCompressDrawData.hasCompleteDate = YES;
  resultPbnoCompressDrawData.completeDate = value;
  return self;
}
- (PBNoCompressDrawDataBuilder*) clearCompleteDate {
  resultPbnoCompressDrawData.hasCompleteDate = NO;
  resultPbnoCompressDrawData.completeDate = 0;
  return self;
}
@end

@interface PBDrawBgGroup ()
@property SInt32 groupId;
@property (strong) NSMutableArray * drawBgsArray;
@property (strong) NSMutableArray * nameArray;
@end

@implementation PBDrawBgGroup

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize drawBgsArray;
@dynamic drawBgs;
@synthesize nameArray;
@dynamic name;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = 0;
  }
  return self;
}
static PBDrawBgGroup* defaultPBDrawBgGroupInstance = nil;
+ (void) initialize {
  if (self == [PBDrawBgGroup class]) {
    defaultPBDrawBgGroupInstance = [[PBDrawBgGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawBgGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawBgGroupInstance;
}
- (NSArray *)drawBgs {
  return drawBgsArray;
}
- (PBDrawBg*)drawBgsAtIndex:(NSUInteger)index {
  return [drawBgsArray objectAtIndex:index];
}
- (NSArray *)name {
  return nameArray;
}
- (PBLocalizeString*)nameAtIndex:(NSUInteger)index {
  return [nameArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  __block BOOL isInitdrawBgs = YES;
   [self.drawBgs enumerateObjectsUsingBlock:^(PBDrawBg *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawBgs = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawBgs) return isInitdrawBgs;
  __block BOOL isInitname = YES;
   [self.name enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitname = NO;
      *stop = YES;
    }
  }];
  if (!isInitname) return isInitname;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeInt32:1 value:self.groupId];
  }
  [self.drawBgsArray enumerateObjectsUsingBlock:^(PBDrawBg *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeInt32Size(1, self.groupId);
  }
  [self.drawBgsArray enumerateObjectsUsingBlock:^(PBDrawBg *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDrawBgGroup*) parseFromData:(NSData*) data {
  return (PBDrawBgGroup*)[[[PBDrawBgGroup builder] mergeFromData:data] build];
}
+ (PBDrawBgGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgGroup*)[[[PBDrawBgGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgGroup*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawBgGroup*)[[[PBDrawBgGroup builder] mergeFromInputStream:input] build];
}
+ (PBDrawBgGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgGroup*)[[[PBDrawBgGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawBgGroup*)[[[PBDrawBgGroup builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawBgGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgGroup*)[[[PBDrawBgGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgGroupBuilder*) builder {
  return [[PBDrawBgGroupBuilder alloc] init];
}
+ (PBDrawBgGroupBuilder*) builderWithPrototype:(PBDrawBgGroup*) prototype {
  return [[PBDrawBgGroup builder] mergeFrom:prototype];
}
- (PBDrawBgGroupBuilder*) builder {
  return [PBDrawBgGroup builder];
}
- (PBDrawBgGroupBuilder*) toBuilder {
  return [PBDrawBgGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.drawBgsArray enumerateObjectsUsingBlock:^(PBDrawBg *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawBgs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"name"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDrawBgGroup class]]) {
    return NO;
  }
  PBDrawBgGroup *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.drawBgsArray isEqualToArray:otherMessage.drawBgsArray] &&
      [self.nameArray isEqualToArray:otherMessage.nameArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.drawBgsArray enumerateObjectsUsingBlock:^(PBDrawBg *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.nameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawBgGroupBuilder()
@property (strong) PBDrawBgGroup* resultPbdrawBgGroup;
@end

@implementation PBDrawBgGroupBuilder
@synthesize resultPbdrawBgGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdrawBgGroup = [[PBDrawBgGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdrawBgGroup;
}
- (PBDrawBgGroupBuilder*) clear {
  self.resultPbdrawBgGroup = [[PBDrawBgGroup alloc] init];
  return self;
}
- (PBDrawBgGroupBuilder*) clone {
  return [PBDrawBgGroup builderWithPrototype:resultPbdrawBgGroup];
}
- (PBDrawBgGroup*) defaultInstance {
  return [PBDrawBgGroup defaultInstance];
}
- (PBDrawBgGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawBgGroup*) buildPartial {
  PBDrawBgGroup* returnMe = resultPbdrawBgGroup;
  self.resultPbdrawBgGroup = nil;
  return returnMe;
}
- (PBDrawBgGroupBuilder*) mergeFrom:(PBDrawBgGroup*) other {
  if (other == [PBDrawBgGroup defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.drawBgsArray.count > 0) {
    if (resultPbdrawBgGroup.drawBgsArray == nil) {
      resultPbdrawBgGroup.drawBgsArray = [[NSMutableArray alloc] initWithArray:other.drawBgsArray];
    } else {
      [resultPbdrawBgGroup.drawBgsArray addObjectsFromArray:other.drawBgsArray];
    }
  }
  if (other.nameArray.count > 0) {
    if (resultPbdrawBgGroup.nameArray == nil) {
      resultPbdrawBgGroup.nameArray = [[NSMutableArray alloc] initWithArray:other.nameArray];
    } else {
      [resultPbdrawBgGroup.nameArray addObjectsFromArray:other.nameArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawBgGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawBgGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readInt32]];
        break;
      }
      case 18: {
        PBDrawBgBuilder* subBuilder = [PBDrawBg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawBgs:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBLocalizeStringBuilder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addName:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultPbdrawBgGroup.hasGroupId;
}
- (SInt32) groupId {
  return resultPbdrawBgGroup.groupId;
}
- (PBDrawBgGroupBuilder*) setGroupId:(SInt32) value {
  resultPbdrawBgGroup.hasGroupId = YES;
  resultPbdrawBgGroup.groupId = value;
  return self;
}
- (PBDrawBgGroupBuilder*) clearGroupId {
  resultPbdrawBgGroup.hasGroupId = NO;
  resultPbdrawBgGroup.groupId = 0;
  return self;
}
- (NSMutableArray *)drawBgs {
  return resultPbdrawBgGroup.drawBgsArray;
}
- (PBDrawBg*)drawBgsAtIndex:(NSUInteger)index {
  return [resultPbdrawBgGroup drawBgsAtIndex:index];
}
- (PBDrawBgGroupBuilder *)addDrawBgs:(PBDrawBg*)value {
  if (resultPbdrawBgGroup.drawBgsArray == nil) {
    resultPbdrawBgGroup.drawBgsArray = [[NSMutableArray alloc]init];
  }
  [resultPbdrawBgGroup.drawBgsArray addObject:value];
  return self;
}
- (PBDrawBgGroupBuilder *)setDrawBgsArray:(NSArray *)array {
  resultPbdrawBgGroup.drawBgsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDrawBgGroupBuilder *)clearDrawBgs {
  resultPbdrawBgGroup.drawBgsArray = nil;
  return self;
}
- (NSMutableArray *)name {
  return resultPbdrawBgGroup.nameArray;
}
- (PBLocalizeString*)nameAtIndex:(NSUInteger)index {
  return [resultPbdrawBgGroup nameAtIndex:index];
}
- (PBDrawBgGroupBuilder *)addName:(PBLocalizeString*)value {
  if (resultPbdrawBgGroup.nameArray == nil) {
    resultPbdrawBgGroup.nameArray = [[NSMutableArray alloc]init];
  }
  [resultPbdrawBgGroup.nameArray addObject:value];
  return self;
}
- (PBDrawBgGroupBuilder *)setNameArray:(NSArray *)array {
  resultPbdrawBgGroup.nameArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDrawBgGroupBuilder *)clearName {
  resultPbdrawBgGroup.nameArray = nil;
  return self;
}
@end

@interface PBDrawBgMeta ()
@property (strong) NSMutableArray * drawBgGroupArray;
@end

@implementation PBDrawBgMeta

@synthesize drawBgGroupArray;
@dynamic drawBgGroup;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBDrawBgMeta* defaultPBDrawBgMetaInstance = nil;
+ (void) initialize {
  if (self == [PBDrawBgMeta class]) {
    defaultPBDrawBgMetaInstance = [[PBDrawBgMeta alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawBgMetaInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawBgMetaInstance;
}
- (NSArray *)drawBgGroup {
  return drawBgGroupArray;
}
- (PBDrawBgGroup*)drawBgGroupAtIndex:(NSUInteger)index {
  return [drawBgGroupArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitdrawBgGroup = YES;
   [self.drawBgGroup enumerateObjectsUsingBlock:^(PBDrawBgGroup *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawBgGroup = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawBgGroup) return isInitdrawBgGroup;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.drawBgGroupArray enumerateObjectsUsingBlock:^(PBDrawBgGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.drawBgGroupArray enumerateObjectsUsingBlock:^(PBDrawBgGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDrawBgMeta*) parseFromData:(NSData*) data {
  return (PBDrawBgMeta*)[[[PBDrawBgMeta builder] mergeFromData:data] build];
}
+ (PBDrawBgMeta*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgMeta*)[[[PBDrawBgMeta builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgMeta*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawBgMeta*)[[[PBDrawBgMeta builder] mergeFromInputStream:input] build];
}
+ (PBDrawBgMeta*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgMeta*)[[[PBDrawBgMeta builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawBgMeta*)[[[PBDrawBgMeta builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawBgMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawBgMeta*)[[[PBDrawBgMeta builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawBgMetaBuilder*) builder {
  return [[PBDrawBgMetaBuilder alloc] init];
}
+ (PBDrawBgMetaBuilder*) builderWithPrototype:(PBDrawBgMeta*) prototype {
  return [[PBDrawBgMeta builder] mergeFrom:prototype];
}
- (PBDrawBgMetaBuilder*) builder {
  return [PBDrawBgMeta builder];
}
- (PBDrawBgMetaBuilder*) toBuilder {
  return [PBDrawBgMeta builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.drawBgGroupArray enumerateObjectsUsingBlock:^(PBDrawBgGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawBgGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDrawBgMeta class]]) {
    return NO;
  }
  PBDrawBgMeta *otherMessage = other;
  return
      [self.drawBgGroupArray isEqualToArray:otherMessage.drawBgGroupArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.drawBgGroupArray enumerateObjectsUsingBlock:^(PBDrawBgGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawBgMetaBuilder()
@property (strong) PBDrawBgMeta* resultPbdrawBgMeta;
@end

@implementation PBDrawBgMetaBuilder
@synthesize resultPbdrawBgMeta;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdrawBgMeta = [[PBDrawBgMeta alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdrawBgMeta;
}
- (PBDrawBgMetaBuilder*) clear {
  self.resultPbdrawBgMeta = [[PBDrawBgMeta alloc] init];
  return self;
}
- (PBDrawBgMetaBuilder*) clone {
  return [PBDrawBgMeta builderWithPrototype:resultPbdrawBgMeta];
}
- (PBDrawBgMeta*) defaultInstance {
  return [PBDrawBgMeta defaultInstance];
}
- (PBDrawBgMeta*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawBgMeta*) buildPartial {
  PBDrawBgMeta* returnMe = resultPbdrawBgMeta;
  self.resultPbdrawBgMeta = nil;
  return returnMe;
}
- (PBDrawBgMetaBuilder*) mergeFrom:(PBDrawBgMeta*) other {
  if (other == [PBDrawBgMeta defaultInstance]) {
    return self;
  }
  if (other.drawBgGroupArray.count > 0) {
    if (resultPbdrawBgMeta.drawBgGroupArray == nil) {
      resultPbdrawBgMeta.drawBgGroupArray = [[NSMutableArray alloc] initWithArray:other.drawBgGroupArray];
    } else {
      [resultPbdrawBgMeta.drawBgGroupArray addObjectsFromArray:other.drawBgGroupArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawBgMetaBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawBgMetaBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBDrawBgGroupBuilder* subBuilder = [PBDrawBgGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawBgGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)drawBgGroup {
  return resultPbdrawBgMeta.drawBgGroupArray;
}
- (PBDrawBgGroup*)drawBgGroupAtIndex:(NSUInteger)index {
  return [resultPbdrawBgMeta drawBgGroupAtIndex:index];
}
- (PBDrawBgMetaBuilder *)addDrawBgGroup:(PBDrawBgGroup*)value {
  if (resultPbdrawBgMeta.drawBgGroupArray == nil) {
    resultPbdrawBgMeta.drawBgGroupArray = [[NSMutableArray alloc]init];
  }
  [resultPbdrawBgMeta.drawBgGroupArray addObject:value];
  return self;
}
- (PBDrawBgMetaBuilder *)setDrawBgGroupArray:(NSArray *)array {
  resultPbdrawBgMeta.drawBgGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBDrawBgMetaBuilder *)clearDrawBgGroup {
  resultPbdrawBgMeta.drawBgGroupArray = nil;
  return self;
}
@end

@interface PBImageShapeGroup ()
@property SInt32 groupId;
@property (strong) NSMutableArray * groupNameArray;
@property (strong) PBAppendableArray * shapeTypeArray;
@end

@implementation PBImageShapeGroup

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
@synthesize groupNameArray;
@dynamic groupName;
@synthesize shapeTypeArray;
@dynamic shapeType;
- (instancetype) init {
  if ((self = [super init])) {
    self.groupId = 0;
  }
  return self;
}
static PBImageShapeGroup* defaultPBImageShapeGroupInstance = nil;
+ (void) initialize {
  if (self == [PBImageShapeGroup class]) {
    defaultPBImageShapeGroupInstance = [[PBImageShapeGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBImageShapeGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultPBImageShapeGroupInstance;
}
- (NSArray *)groupName {
  return groupNameArray;
}
- (PBLocalizeString*)groupNameAtIndex:(NSUInteger)index {
  return [groupNameArray objectAtIndex:index];
}
- (PBArray *)shapeType {
  return shapeTypeArray;
}
- (SInt32)shapeTypeAtIndex:(NSUInteger)index {
  return [shapeTypeArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  __block BOOL isInitgroupName = YES;
   [self.groupName enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroupName = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroupName) return isInitgroupName;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeInt32:1 value:self.groupId];
  }
  [self.groupNameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  const NSUInteger shapeTypeArrayCount = self.shapeTypeArray.count;
  if (shapeTypeArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.shapeTypeArray.data;
    [output writeRawVarint32:26];
    [output writeRawVarint32:shapeTypeMemoizedSerializedSize];
    for (NSUInteger i = 0; i < shapeTypeArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeInt32Size(1, self.groupId);
  }
  [self.groupNameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.shapeTypeArray.count;
    const SInt32 *values = (const SInt32 *)self.shapeTypeArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    shapeTypeMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBImageShapeGroup*) parseFromData:(NSData*) data {
  return (PBImageShapeGroup*)[[[PBImageShapeGroup builder] mergeFromData:data] build];
}
+ (PBImageShapeGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBImageShapeGroup*)[[[PBImageShapeGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBImageShapeGroup*) parseFromInputStream:(NSInputStream*) input {
  return (PBImageShapeGroup*)[[[PBImageShapeGroup builder] mergeFromInputStream:input] build];
}
+ (PBImageShapeGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBImageShapeGroup*)[[[PBImageShapeGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBImageShapeGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBImageShapeGroup*)[[[PBImageShapeGroup builder] mergeFromCodedInputStream:input] build];
}
+ (PBImageShapeGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBImageShapeGroup*)[[[PBImageShapeGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBImageShapeGroupBuilder*) builder {
  return [[PBImageShapeGroupBuilder alloc] init];
}
+ (PBImageShapeGroupBuilder*) builderWithPrototype:(PBImageShapeGroup*) prototype {
  return [[PBImageShapeGroup builder] mergeFrom:prototype];
}
- (PBImageShapeGroupBuilder*) builder {
  return [PBImageShapeGroup builder];
}
- (PBImageShapeGroupBuilder*) toBuilder {
  return [PBImageShapeGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  [self.groupNameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupName"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.shapeTypeArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shapeType", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBImageShapeGroup class]]) {
    return NO;
  }
  PBImageShapeGroup *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      [self.groupNameArray isEqualToArray:otherMessage.groupNameArray] &&
      [self.shapeTypeArray isEqualToArray:otherMessage.shapeTypeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  [self.groupNameArray enumerateObjectsUsingBlock:^(PBLocalizeString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.shapeTypeArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBImageShapeGroupBuilder()
@property (strong) PBImageShapeGroup* resultPbimageShapeGroup;
@end

@implementation PBImageShapeGroupBuilder
@synthesize resultPbimageShapeGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbimageShapeGroup = [[PBImageShapeGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbimageShapeGroup;
}
- (PBImageShapeGroupBuilder*) clear {
  self.resultPbimageShapeGroup = [[PBImageShapeGroup alloc] init];
  return self;
}
- (PBImageShapeGroupBuilder*) clone {
  return [PBImageShapeGroup builderWithPrototype:resultPbimageShapeGroup];
}
- (PBImageShapeGroup*) defaultInstance {
  return [PBImageShapeGroup defaultInstance];
}
- (PBImageShapeGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBImageShapeGroup*) buildPartial {
  PBImageShapeGroup* returnMe = resultPbimageShapeGroup;
  self.resultPbimageShapeGroup = nil;
  return returnMe;
}
- (PBImageShapeGroupBuilder*) mergeFrom:(PBImageShapeGroup*) other {
  if (other == [PBImageShapeGroup defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.groupNameArray.count > 0) {
    if (resultPbimageShapeGroup.groupNameArray == nil) {
      resultPbimageShapeGroup.groupNameArray = [[NSMutableArray alloc] initWithArray:other.groupNameArray];
    } else {
      [resultPbimageShapeGroup.groupNameArray addObjectsFromArray:other.groupNameArray];
    }
  }
  if (other.shapeTypeArray.count > 0) {
    if (resultPbimageShapeGroup.shapeTypeArray == nil) {
      resultPbimageShapeGroup.shapeTypeArray = [other.shapeTypeArray copy];
    } else {
      [resultPbimageShapeGroup.shapeTypeArray appendArray:other.shapeTypeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBImageShapeGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBImageShapeGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readInt32]];
        break;
      }
      case 18: {
        PBLocalizeStringBuilder* subBuilder = [PBLocalizeString builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroupName:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultPbimageShapeGroup.shapeTypeArray == nil) {
          resultPbimageShapeGroup.shapeTypeArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultPbimageShapeGroup.shapeTypeArray addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return resultPbimageShapeGroup.hasGroupId;
}
- (SInt32) groupId {
  return resultPbimageShapeGroup.groupId;
}
- (PBImageShapeGroupBuilder*) setGroupId:(SInt32) value {
  resultPbimageShapeGroup.hasGroupId = YES;
  resultPbimageShapeGroup.groupId = value;
  return self;
}
- (PBImageShapeGroupBuilder*) clearGroupId {
  resultPbimageShapeGroup.hasGroupId = NO;
  resultPbimageShapeGroup.groupId = 0;
  return self;
}
- (NSMutableArray *)groupName {
  return resultPbimageShapeGroup.groupNameArray;
}
- (PBLocalizeString*)groupNameAtIndex:(NSUInteger)index {
  return [resultPbimageShapeGroup groupNameAtIndex:index];
}
- (PBImageShapeGroupBuilder *)addGroupName:(PBLocalizeString*)value {
  if (resultPbimageShapeGroup.groupNameArray == nil) {
    resultPbimageShapeGroup.groupNameArray = [[NSMutableArray alloc]init];
  }
  [resultPbimageShapeGroup.groupNameArray addObject:value];
  return self;
}
- (PBImageShapeGroupBuilder *)setGroupNameArray:(NSArray *)array {
  resultPbimageShapeGroup.groupNameArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBImageShapeGroupBuilder *)clearGroupName {
  resultPbimageShapeGroup.groupNameArray = nil;
  return self;
}
- (PBAppendableArray *)shapeType {
  return resultPbimageShapeGroup.shapeTypeArray;
}
- (SInt32)shapeTypeAtIndex:(NSUInteger)index {
  return [resultPbimageShapeGroup shapeTypeAtIndex:index];
}
- (PBImageShapeGroupBuilder *)addShapeType:(SInt32)value {
  if (resultPbimageShapeGroup.shapeTypeArray == nil) {
    resultPbimageShapeGroup.shapeTypeArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbimageShapeGroup.shapeTypeArray addInt32:value];
  return self;
}
- (PBImageShapeGroupBuilder *)setShapeTypeArray:(NSArray *)array {
  resultPbimageShapeGroup.shapeTypeArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBImageShapeGroupBuilder *)setShapeTypeValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPbimageShapeGroup.shapeTypeArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBImageShapeGroupBuilder *)clearShapeType {
  resultPbimageShapeGroup.shapeTypeArray = nil;
  return self;
}
@end

@interface PBImageShapeGroupMeta ()
@property (strong) NSMutableArray * imageShapeGroupArray;
@end

@implementation PBImageShapeGroupMeta

@synthesize imageShapeGroupArray;
@dynamic imageShapeGroup;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBImageShapeGroupMeta* defaultPBImageShapeGroupMetaInstance = nil;
+ (void) initialize {
  if (self == [PBImageShapeGroupMeta class]) {
    defaultPBImageShapeGroupMetaInstance = [[PBImageShapeGroupMeta alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBImageShapeGroupMetaInstance;
}
- (instancetype) defaultInstance {
  return defaultPBImageShapeGroupMetaInstance;
}
- (NSArray *)imageShapeGroup {
  return imageShapeGroupArray;
}
- (PBImageShapeGroup*)imageShapeGroupAtIndex:(NSUInteger)index {
  return [imageShapeGroupArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitimageShapeGroup = YES;
   [self.imageShapeGroup enumerateObjectsUsingBlock:^(PBImageShapeGroup *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitimageShapeGroup = NO;
      *stop = YES;
    }
  }];
  if (!isInitimageShapeGroup) return isInitimageShapeGroup;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.imageShapeGroupArray enumerateObjectsUsingBlock:^(PBImageShapeGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.imageShapeGroupArray enumerateObjectsUsingBlock:^(PBImageShapeGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBImageShapeGroupMeta*) parseFromData:(NSData*) data {
  return (PBImageShapeGroupMeta*)[[[PBImageShapeGroupMeta builder] mergeFromData:data] build];
}
+ (PBImageShapeGroupMeta*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBImageShapeGroupMeta*)[[[PBImageShapeGroupMeta builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBImageShapeGroupMeta*) parseFromInputStream:(NSInputStream*) input {
  return (PBImageShapeGroupMeta*)[[[PBImageShapeGroupMeta builder] mergeFromInputStream:input] build];
}
+ (PBImageShapeGroupMeta*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBImageShapeGroupMeta*)[[[PBImageShapeGroupMeta builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBImageShapeGroupMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBImageShapeGroupMeta*)[[[PBImageShapeGroupMeta builder] mergeFromCodedInputStream:input] build];
}
+ (PBImageShapeGroupMeta*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBImageShapeGroupMeta*)[[[PBImageShapeGroupMeta builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBImageShapeGroupMetaBuilder*) builder {
  return [[PBImageShapeGroupMetaBuilder alloc] init];
}
+ (PBImageShapeGroupMetaBuilder*) builderWithPrototype:(PBImageShapeGroupMeta*) prototype {
  return [[PBImageShapeGroupMeta builder] mergeFrom:prototype];
}
- (PBImageShapeGroupMetaBuilder*) builder {
  return [PBImageShapeGroupMeta builder];
}
- (PBImageShapeGroupMetaBuilder*) toBuilder {
  return [PBImageShapeGroupMeta builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.imageShapeGroupArray enumerateObjectsUsingBlock:^(PBImageShapeGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageShapeGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBImageShapeGroupMeta class]]) {
    return NO;
  }
  PBImageShapeGroupMeta *otherMessage = other;
  return
      [self.imageShapeGroupArray isEqualToArray:otherMessage.imageShapeGroupArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.imageShapeGroupArray enumerateObjectsUsingBlock:^(PBImageShapeGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBImageShapeGroupMetaBuilder()
@property (strong) PBImageShapeGroupMeta* resultPbimageShapeGroupMeta;
@end

@implementation PBImageShapeGroupMetaBuilder
@synthesize resultPbimageShapeGroupMeta;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbimageShapeGroupMeta = [[PBImageShapeGroupMeta alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbimageShapeGroupMeta;
}
- (PBImageShapeGroupMetaBuilder*) clear {
  self.resultPbimageShapeGroupMeta = [[PBImageShapeGroupMeta alloc] init];
  return self;
}
- (PBImageShapeGroupMetaBuilder*) clone {
  return [PBImageShapeGroupMeta builderWithPrototype:resultPbimageShapeGroupMeta];
}
- (PBImageShapeGroupMeta*) defaultInstance {
  return [PBImageShapeGroupMeta defaultInstance];
}
- (PBImageShapeGroupMeta*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBImageShapeGroupMeta*) buildPartial {
  PBImageShapeGroupMeta* returnMe = resultPbimageShapeGroupMeta;
  self.resultPbimageShapeGroupMeta = nil;
  return returnMe;
}
- (PBImageShapeGroupMetaBuilder*) mergeFrom:(PBImageShapeGroupMeta*) other {
  if (other == [PBImageShapeGroupMeta defaultInstance]) {
    return self;
  }
  if (other.imageShapeGroupArray.count > 0) {
    if (resultPbimageShapeGroupMeta.imageShapeGroupArray == nil) {
      resultPbimageShapeGroupMeta.imageShapeGroupArray = [[NSMutableArray alloc] initWithArray:other.imageShapeGroupArray];
    } else {
      [resultPbimageShapeGroupMeta.imageShapeGroupArray addObjectsFromArray:other.imageShapeGroupArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBImageShapeGroupMetaBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBImageShapeGroupMetaBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBImageShapeGroupBuilder* subBuilder = [PBImageShapeGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addImageShapeGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)imageShapeGroup {
  return resultPbimageShapeGroupMeta.imageShapeGroupArray;
}
- (PBImageShapeGroup*)imageShapeGroupAtIndex:(NSUInteger)index {
  return [resultPbimageShapeGroupMeta imageShapeGroupAtIndex:index];
}
- (PBImageShapeGroupMetaBuilder *)addImageShapeGroup:(PBImageShapeGroup*)value {
  if (resultPbimageShapeGroupMeta.imageShapeGroupArray == nil) {
    resultPbimageShapeGroupMeta.imageShapeGroupArray = [[NSMutableArray alloc]init];
  }
  [resultPbimageShapeGroupMeta.imageShapeGroupArray addObject:value];
  return self;
}
- (PBImageShapeGroupMetaBuilder *)setImageShapeGroupArray:(NSArray *)array {
  resultPbimageShapeGroupMeta.imageShapeGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBImageShapeGroupMetaBuilder *)clearImageShapeGroup {
  resultPbimageShapeGroupMeta.imageShapeGroupArray = nil;
  return self;
}
@end

@interface PBHotWord ()
@property (strong) NSString* wordId;
@property (strong) NSString* word;
@property SInt32 coins;
@property (strong) NSString* source;
@end

@implementation PBHotWord

- (BOOL) hasWordId {
  return !!hasWordId_;
}
- (void) setHasWordId:(BOOL) _value_ {
  hasWordId_ = !!_value_;
}
@synthesize wordId;
- (BOOL) hasWord {
  return !!hasWord_;
}
- (void) setHasWord:(BOOL) _value_ {
  hasWord_ = !!_value_;
}
@synthesize word;
- (BOOL) hasCoins {
  return !!hasCoins_;
}
- (void) setHasCoins:(BOOL) _value_ {
  hasCoins_ = !!_value_;
}
@synthesize coins;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (instancetype) init {
  if ((self = [super init])) {
    self.wordId = @"";
    self.word = @"";
    self.coins = 0;
    self.source = @"";
  }
  return self;
}
static PBHotWord* defaultPBHotWordInstance = nil;
+ (void) initialize {
  if (self == [PBHotWord class]) {
    defaultPBHotWordInstance = [[PBHotWord alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBHotWordInstance;
}
- (instancetype) defaultInstance {
  return defaultPBHotWordInstance;
}
- (BOOL) isInitialized {
  if (!self.hasWordId) {
    return NO;
  }
  if (!self.hasWord) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWordId) {
    [output writeString:1 value:self.wordId];
  }
  if (self.hasWord) {
    [output writeString:2 value:self.word];
  }
  if (self.hasCoins) {
    [output writeInt32:3 value:self.coins];
  }
  if (self.hasSource) {
    [output writeString:10 value:self.source];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWordId) {
    size_ += computeStringSize(1, self.wordId);
  }
  if (self.hasWord) {
    size_ += computeStringSize(2, self.word);
  }
  if (self.hasCoins) {
    size_ += computeInt32Size(3, self.coins);
  }
  if (self.hasSource) {
    size_ += computeStringSize(10, self.source);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBHotWord*) parseFromData:(NSData*) data {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromData:data] build];
}
+ (PBHotWord*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBHotWord*) parseFromInputStream:(NSInputStream*) input {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromInputStream:input] build];
}
+ (PBHotWord*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWord*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromCodedInputStream:input] build];
}
+ (PBHotWord*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWord*)[[[PBHotWord builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordBuilder*) builder {
  return [[PBHotWordBuilder alloc] init];
}
+ (PBHotWordBuilder*) builderWithPrototype:(PBHotWord*) prototype {
  return [[PBHotWord builder] mergeFrom:prototype];
}
- (PBHotWordBuilder*) builder {
  return [PBHotWord builder];
}
- (PBHotWordBuilder*) toBuilder {
  return [PBHotWord builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWordId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wordId", self.wordId];
  }
  if (self.hasWord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"word", self.word];
  }
  if (self.hasCoins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coins", [NSNumber numberWithInteger:self.coins]];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", self.source];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBHotWord class]]) {
    return NO;
  }
  PBHotWord *otherMessage = other;
  return
      self.hasWordId == otherMessage.hasWordId &&
      (!self.hasWordId || [self.wordId isEqual:otherMessage.wordId]) &&
      self.hasWord == otherMessage.hasWord &&
      (!self.hasWord || [self.word isEqual:otherMessage.word]) &&
      self.hasCoins == otherMessage.hasCoins &&
      (!self.hasCoins || self.coins == otherMessage.coins) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWordId) {
    hashCode = hashCode * 31 + [self.wordId hash];
  }
  if (self.hasWord) {
    hashCode = hashCode * 31 + [self.word hash];
  }
  if (self.hasCoins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.coins] hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBHotWordBuilder()
@property (strong) PBHotWord* resultPbhotWord;
@end

@implementation PBHotWordBuilder
@synthesize resultPbhotWord;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbhotWord = [[PBHotWord alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbhotWord;
}
- (PBHotWordBuilder*) clear {
  self.resultPbhotWord = [[PBHotWord alloc] init];
  return self;
}
- (PBHotWordBuilder*) clone {
  return [PBHotWord builderWithPrototype:resultPbhotWord];
}
- (PBHotWord*) defaultInstance {
  return [PBHotWord defaultInstance];
}
- (PBHotWord*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBHotWord*) buildPartial {
  PBHotWord* returnMe = resultPbhotWord;
  self.resultPbhotWord = nil;
  return returnMe;
}
- (PBHotWordBuilder*) mergeFrom:(PBHotWord*) other {
  if (other == [PBHotWord defaultInstance]) {
    return self;
  }
  if (other.hasWordId) {
    [self setWordId:other.wordId];
  }
  if (other.hasWord) {
    [self setWord:other.word];
  }
  if (other.hasCoins) {
    [self setCoins:other.coins];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBHotWordBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBHotWordBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setWordId:[input readString]];
        break;
      }
      case 18: {
        [self setWord:[input readString]];
        break;
      }
      case 24: {
        [self setCoins:[input readInt32]];
        break;
      }
      case 82: {
        [self setSource:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasWordId {
  return resultPbhotWord.hasWordId;
}
- (NSString*) wordId {
  return resultPbhotWord.wordId;
}
- (PBHotWordBuilder*) setWordId:(NSString*) value {
  resultPbhotWord.hasWordId = YES;
  resultPbhotWord.wordId = value;
  return self;
}
- (PBHotWordBuilder*) clearWordId {
  resultPbhotWord.hasWordId = NO;
  resultPbhotWord.wordId = @"";
  return self;
}
- (BOOL) hasWord {
  return resultPbhotWord.hasWord;
}
- (NSString*) word {
  return resultPbhotWord.word;
}
- (PBHotWordBuilder*) setWord:(NSString*) value {
  resultPbhotWord.hasWord = YES;
  resultPbhotWord.word = value;
  return self;
}
- (PBHotWordBuilder*) clearWord {
  resultPbhotWord.hasWord = NO;
  resultPbhotWord.word = @"";
  return self;
}
- (BOOL) hasCoins {
  return resultPbhotWord.hasCoins;
}
- (SInt32) coins {
  return resultPbhotWord.coins;
}
- (PBHotWordBuilder*) setCoins:(SInt32) value {
  resultPbhotWord.hasCoins = YES;
  resultPbhotWord.coins = value;
  return self;
}
- (PBHotWordBuilder*) clearCoins {
  resultPbhotWord.hasCoins = NO;
  resultPbhotWord.coins = 0;
  return self;
}
- (BOOL) hasSource {
  return resultPbhotWord.hasSource;
}
- (NSString*) source {
  return resultPbhotWord.source;
}
- (PBHotWordBuilder*) setSource:(NSString*) value {
  resultPbhotWord.hasSource = YES;
  resultPbhotWord.source = value;
  return self;
}
- (PBHotWordBuilder*) clearSource {
  resultPbhotWord.hasSource = NO;
  resultPbhotWord.source = @"";
  return self;
}
@end

@interface PBHotWordList ()
@property (strong) NSMutableArray * wordsArray;
@end

@implementation PBHotWordList

@synthesize wordsArray;
@dynamic words;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBHotWordList* defaultPBHotWordListInstance = nil;
+ (void) initialize {
  if (self == [PBHotWordList class]) {
    defaultPBHotWordListInstance = [[PBHotWordList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBHotWordListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBHotWordListInstance;
}
- (NSArray *)words {
  return wordsArray;
}
- (PBHotWord*)wordsAtIndex:(NSUInteger)index {
  return [wordsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitwords = YES;
   [self.words enumerateObjectsUsingBlock:^(PBHotWord *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitwords = NO;
      *stop = YES;
    }
  }];
  if (!isInitwords) return isInitwords;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.wordsArray enumerateObjectsUsingBlock:^(PBHotWord *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.wordsArray enumerateObjectsUsingBlock:^(PBHotWord *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBHotWordList*) parseFromData:(NSData*) data {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromData:data] build];
}
+ (PBHotWordList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordList*) parseFromInputStream:(NSInputStream*) input {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromInputStream:input] build];
}
+ (PBHotWordList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromCodedInputStream:input] build];
}
+ (PBHotWordList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBHotWordList*)[[[PBHotWordList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBHotWordListBuilder*) builder {
  return [[PBHotWordListBuilder alloc] init];
}
+ (PBHotWordListBuilder*) builderWithPrototype:(PBHotWordList*) prototype {
  return [[PBHotWordList builder] mergeFrom:prototype];
}
- (PBHotWordListBuilder*) builder {
  return [PBHotWordList builder];
}
- (PBHotWordListBuilder*) toBuilder {
  return [PBHotWordList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.wordsArray enumerateObjectsUsingBlock:^(PBHotWord *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"words"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBHotWordList class]]) {
    return NO;
  }
  PBHotWordList *otherMessage = other;
  return
      [self.wordsArray isEqualToArray:otherMessage.wordsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.wordsArray enumerateObjectsUsingBlock:^(PBHotWord *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBHotWordListBuilder()
@property (strong) PBHotWordList* resultPbhotWordList;
@end

@implementation PBHotWordListBuilder
@synthesize resultPbhotWordList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbhotWordList = [[PBHotWordList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbhotWordList;
}
- (PBHotWordListBuilder*) clear {
  self.resultPbhotWordList = [[PBHotWordList alloc] init];
  return self;
}
- (PBHotWordListBuilder*) clone {
  return [PBHotWordList builderWithPrototype:resultPbhotWordList];
}
- (PBHotWordList*) defaultInstance {
  return [PBHotWordList defaultInstance];
}
- (PBHotWordList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBHotWordList*) buildPartial {
  PBHotWordList* returnMe = resultPbhotWordList;
  self.resultPbhotWordList = nil;
  return returnMe;
}
- (PBHotWordListBuilder*) mergeFrom:(PBHotWordList*) other {
  if (other == [PBHotWordList defaultInstance]) {
    return self;
  }
  if (other.wordsArray.count > 0) {
    if (resultPbhotWordList.wordsArray == nil) {
      resultPbhotWordList.wordsArray = [[NSMutableArray alloc] initWithArray:other.wordsArray];
    } else {
      [resultPbhotWordList.wordsArray addObjectsFromArray:other.wordsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBHotWordListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBHotWordListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBHotWordBuilder* subBuilder = [PBHotWord builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWords:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)words {
  return resultPbhotWordList.wordsArray;
}
- (PBHotWord*)wordsAtIndex:(NSUInteger)index {
  return [resultPbhotWordList wordsAtIndex:index];
}
- (PBHotWordListBuilder *)addWords:(PBHotWord*)value {
  if (resultPbhotWordList.wordsArray == nil) {
    resultPbhotWordList.wordsArray = [[NSMutableArray alloc]init];
  }
  [resultPbhotWordList.wordsArray addObject:value];
  return self;
}
- (PBHotWordListBuilder *)setWordsArray:(NSArray *)array {
  resultPbhotWordList.wordsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBHotWordListBuilder *)clearWords {
  resultPbhotWordList.wordsArray = nil;
  return self;
}
@end

@interface PBWallOpus ()
@property SInt32 idOnWall;
@property (strong) PBFeed* opus;
@property (strong) PBFrame* frame;
@end

@implementation PBWallOpus

- (BOOL) hasIdOnWall {
  return !!hasIdOnWall_;
}
- (void) setHasIdOnWall:(BOOL) _value_ {
  hasIdOnWall_ = !!_value_;
}
@synthesize idOnWall;
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) _value_ {
  hasOpus_ = !!_value_;
}
@synthesize opus;
- (BOOL) hasFrame {
  return !!hasFrame_;
}
- (void) setHasFrame:(BOOL) _value_ {
  hasFrame_ = !!_value_;
}
@synthesize frame;
- (instancetype) init {
  if ((self = [super init])) {
    self.idOnWall = 0;
    self.opus = [PBFeed defaultInstance];
    self.frame = [PBFrame defaultInstance];
  }
  return self;
}
static PBWallOpus* defaultPBWallOpusInstance = nil;
+ (void) initialize {
  if (self == [PBWallOpus class]) {
    defaultPBWallOpusInstance = [[PBWallOpus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBWallOpusInstance;
}
- (instancetype) defaultInstance {
  return defaultPBWallOpusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIdOnWall) {
    return NO;
  }
  if (self.hasOpus) {
    if (!self.opus.isInitialized) {
      return NO;
    }
  }
  if (self.hasFrame) {
    if (!self.frame.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIdOnWall) {
    [output writeInt32:1 value:self.idOnWall];
  }
  if (self.hasOpus) {
    [output writeMessage:2 value:self.opus];
  }
  if (self.hasFrame) {
    [output writeMessage:3 value:self.frame];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIdOnWall) {
    size_ += computeInt32Size(1, self.idOnWall);
  }
  if (self.hasOpus) {
    size_ += computeMessageSize(2, self.opus);
  }
  if (self.hasFrame) {
    size_ += computeMessageSize(3, self.frame);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWallOpus*) parseFromData:(NSData*) data {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromData:data] build];
}
+ (PBWallOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWallOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromInputStream:input] build];
}
+ (PBWallOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWallOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBWallOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWallOpus*)[[[PBWallOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWallOpusBuilder*) builder {
  return [[PBWallOpusBuilder alloc] init];
}
+ (PBWallOpusBuilder*) builderWithPrototype:(PBWallOpus*) prototype {
  return [[PBWallOpus builder] mergeFrom:prototype];
}
- (PBWallOpusBuilder*) builder {
  return [PBWallOpus builder];
}
- (PBWallOpusBuilder*) toBuilder {
  return [PBWallOpus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIdOnWall) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idOnWall", [NSNumber numberWithInteger:self.idOnWall]];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@ {\n", indent, @"opus"];
    [self.opus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFrame) {
    [output appendFormat:@"%@%@ {\n", indent, @"frame"];
    [self.frame writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWallOpus class]]) {
    return NO;
  }
  PBWallOpus *otherMessage = other;
  return
      self.hasIdOnWall == otherMessage.hasIdOnWall &&
      (!self.hasIdOnWall || self.idOnWall == otherMessage.idOnWall) &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || [self.opus isEqual:otherMessage.opus]) &&
      self.hasFrame == otherMessage.hasFrame &&
      (!self.hasFrame || [self.frame isEqual:otherMessage.frame]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIdOnWall) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.idOnWall] hash];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [self.opus hash];
  }
  if (self.hasFrame) {
    hashCode = hashCode * 31 + [self.frame hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWallOpusBuilder()
@property (strong) PBWallOpus* resultPbwallOpus;
@end

@implementation PBWallOpusBuilder
@synthesize resultPbwallOpus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbwallOpus = [[PBWallOpus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbwallOpus;
}
- (PBWallOpusBuilder*) clear {
  self.resultPbwallOpus = [[PBWallOpus alloc] init];
  return self;
}
- (PBWallOpusBuilder*) clone {
  return [PBWallOpus builderWithPrototype:resultPbwallOpus];
}
- (PBWallOpus*) defaultInstance {
  return [PBWallOpus defaultInstance];
}
- (PBWallOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWallOpus*) buildPartial {
  PBWallOpus* returnMe = resultPbwallOpus;
  self.resultPbwallOpus = nil;
  return returnMe;
}
- (PBWallOpusBuilder*) mergeFrom:(PBWallOpus*) other {
  if (other == [PBWallOpus defaultInstance]) {
    return self;
  }
  if (other.hasIdOnWall) {
    [self setIdOnWall:other.idOnWall];
  }
  if (other.hasOpus) {
    [self mergeOpus:other.opus];
  }
  if (other.hasFrame) {
    [self mergeFrame:other.frame];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWallOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWallOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIdOnWall:[input readInt32]];
        break;
      }
      case 18: {
        PBFeedBuilder* subBuilder = [PBFeed builder];
        if (self.hasOpus) {
          [subBuilder mergeFrom:self.opus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpus:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBFrameBuilder* subBuilder = [PBFrame builder];
        if (self.hasFrame) {
          [subBuilder mergeFrom:self.frame];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFrame:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasIdOnWall {
  return resultPbwallOpus.hasIdOnWall;
}
- (SInt32) idOnWall {
  return resultPbwallOpus.idOnWall;
}
- (PBWallOpusBuilder*) setIdOnWall:(SInt32) value {
  resultPbwallOpus.hasIdOnWall = YES;
  resultPbwallOpus.idOnWall = value;
  return self;
}
- (PBWallOpusBuilder*) clearIdOnWall {
  resultPbwallOpus.hasIdOnWall = NO;
  resultPbwallOpus.idOnWall = 0;
  return self;
}
- (BOOL) hasOpus {
  return resultPbwallOpus.hasOpus;
}
- (PBFeed*) opus {
  return resultPbwallOpus.opus;
}
- (PBWallOpusBuilder*) setOpus:(PBFeed*) value {
  resultPbwallOpus.hasOpus = YES;
  resultPbwallOpus.opus = value;
  return self;
}
- (PBWallOpusBuilder*) setOpusBuilder:(PBFeedBuilder*) builderForValue {
  return [self setOpus:[builderForValue build]];
}
- (PBWallOpusBuilder*) mergeOpus:(PBFeed*) value {
  if (resultPbwallOpus.hasOpus &&
      resultPbwallOpus.opus != [PBFeed defaultInstance]) {
    resultPbwallOpus.opus =
      [[[PBFeed builderWithPrototype:resultPbwallOpus.opus] mergeFrom:value] buildPartial];
  } else {
    resultPbwallOpus.opus = value;
  }
  resultPbwallOpus.hasOpus = YES;
  return self;
}
- (PBWallOpusBuilder*) clearOpus {
  resultPbwallOpus.hasOpus = NO;
  resultPbwallOpus.opus = [PBFeed defaultInstance];
  return self;
}
- (BOOL) hasFrame {
  return resultPbwallOpus.hasFrame;
}
- (PBFrame*) frame {
  return resultPbwallOpus.frame;
}
- (PBWallOpusBuilder*) setFrame:(PBFrame*) value {
  resultPbwallOpus.hasFrame = YES;
  resultPbwallOpus.frame = value;
  return self;
}
- (PBWallOpusBuilder*) setFrameBuilder:(PBFrameBuilder*) builderForValue {
  return [self setFrame:[builderForValue build]];
}
- (PBWallOpusBuilder*) mergeFrame:(PBFrame*) value {
  if (resultPbwallOpus.hasFrame &&
      resultPbwallOpus.frame != [PBFrame defaultInstance]) {
    resultPbwallOpus.frame =
      [[[PBFrame builderWithPrototype:resultPbwallOpus.frame] mergeFrom:value] buildPartial];
  } else {
    resultPbwallOpus.frame = value;
  }
  resultPbwallOpus.hasFrame = YES;
  return self;
}
- (PBWallOpusBuilder*) clearFrame {
  resultPbwallOpus.hasFrame = NO;
  resultPbwallOpus.frame = [PBFrame defaultInstance];
  return self;
}
@end

@interface PBWall ()
@property (strong) NSString* wallId;
@property PBWallType type;
@property (strong) NSString* userId;
@property (strong) NSString* name;
@property (strong) PBLayout* content;
@property (strong) NSString* musicUrl;
@end

@implementation PBWall

- (BOOL) hasWallId {
  return !!hasWallId_;
}
- (void) setHasWallId:(BOOL) _value_ {
  hasWallId_ = !!_value_;
}
@synthesize wallId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasMusicUrl {
  return !!hasMusicUrl_;
}
- (void) setHasMusicUrl:(BOOL) _value_ {
  hasMusicUrl_ = !!_value_;
}
@synthesize musicUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.wallId = @"";
    self.type = PBWallTypeOpuses;
    self.userId = @"";
    self.name = @"";
    self.content = [PBLayout defaultInstance];
    self.musicUrl = @"";
  }
  return self;
}
static PBWall* defaultPBWallInstance = nil;
+ (void) initialize {
  if (self == [PBWall class]) {
    defaultPBWallInstance = [[PBWall alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBWallInstance;
}
- (instancetype) defaultInstance {
  return defaultPBWallInstance;
}
- (BOOL) isInitialized {
  if (!self.hasWallId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasUserId) {
    return NO;
  }
  if (self.hasContent) {
    if (!self.content.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWallId) {
    [output writeString:1 value:self.wallId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  if (self.hasName) {
    [output writeString:6 value:self.name];
  }
  if (self.hasContent) {
    [output writeMessage:7 value:self.content];
  }
  if (self.hasMusicUrl) {
    [output writeString:10 value:self.musicUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWallId) {
    size_ += computeStringSize(1, self.wallId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(3, self.userId);
  }
  if (self.hasName) {
    size_ += computeStringSize(6, self.name);
  }
  if (self.hasContent) {
    size_ += computeMessageSize(7, self.content);
  }
  if (self.hasMusicUrl) {
    size_ += computeStringSize(10, self.musicUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWall*) parseFromData:(NSData*) data {
  return (PBWall*)[[[PBWall builder] mergeFromData:data] build];
}
+ (PBWall*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWall*)[[[PBWall builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWall*) parseFromInputStream:(NSInputStream*) input {
  return (PBWall*)[[[PBWall builder] mergeFromInputStream:input] build];
}
+ (PBWall*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWall*)[[[PBWall builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWall*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWall*)[[[PBWall builder] mergeFromCodedInputStream:input] build];
}
+ (PBWall*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWall*)[[[PBWall builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWallBuilder*) builder {
  return [[PBWallBuilder alloc] init];
}
+ (PBWallBuilder*) builderWithPrototype:(PBWall*) prototype {
  return [[PBWall builder] mergeFrom:prototype];
}
- (PBWallBuilder*) builder {
  return [PBWall builder];
}
- (PBWallBuilder*) toBuilder {
  return [PBWall builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWallId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wallId", self.wallId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBWallType(self.type)];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@ {\n", indent, @"content"];
    [self.content writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMusicUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"musicUrl", self.musicUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWall class]]) {
    return NO;
  }
  PBWall *otherMessage = other;
  return
      self.hasWallId == otherMessage.hasWallId &&
      (!self.hasWallId || [self.wallId isEqual:otherMessage.wallId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasMusicUrl == otherMessage.hasMusicUrl &&
      (!self.hasMusicUrl || [self.musicUrl isEqual:otherMessage.musicUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWallId) {
    hashCode = hashCode * 31 + [self.wallId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasMusicUrl) {
    hashCode = hashCode * 31 + [self.musicUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWallBuilder()
@property (strong) PBWall* resultPbwall;
@end

@implementation PBWallBuilder
@synthesize resultPbwall;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbwall = [[PBWall alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbwall;
}
- (PBWallBuilder*) clear {
  self.resultPbwall = [[PBWall alloc] init];
  return self;
}
- (PBWallBuilder*) clone {
  return [PBWall builderWithPrototype:resultPbwall];
}
- (PBWall*) defaultInstance {
  return [PBWall defaultInstance];
}
- (PBWall*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWall*) buildPartial {
  PBWall* returnMe = resultPbwall;
  self.resultPbwall = nil;
  return returnMe;
}
- (PBWallBuilder*) mergeFrom:(PBWall*) other {
  if (other == [PBWall defaultInstance]) {
    return self;
  }
  if (other.hasWallId) {
    [self setWallId:other.wallId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasContent) {
    [self mergeContent:other.content];
  }
  if (other.hasMusicUrl) {
    [self setMusicUrl:other.musicUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWallBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWallBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setWallId:[input readString]];
        break;
      }
      case 16: {
        PBWallType value = (PBWallType)[input readEnum];
        if (PBWallTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
      case 50: {
        [self setName:[input readString]];
        break;
      }
      case 58: {
        PBLayoutBuilder* subBuilder = [PBLayout builder];
        if (self.hasContent) {
          [subBuilder mergeFrom:self.content];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContent:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        [self setMusicUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasWallId {
  return resultPbwall.hasWallId;
}
- (NSString*) wallId {
  return resultPbwall.wallId;
}
- (PBWallBuilder*) setWallId:(NSString*) value {
  resultPbwall.hasWallId = YES;
  resultPbwall.wallId = value;
  return self;
}
- (PBWallBuilder*) clearWallId {
  resultPbwall.hasWallId = NO;
  resultPbwall.wallId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbwall.hasType;
}
- (PBWallType) type {
  return resultPbwall.type;
}
- (PBWallBuilder*) setType:(PBWallType) value {
  resultPbwall.hasType = YES;
  resultPbwall.type = value;
  return self;
}
- (PBWallBuilder*) clearType {
  resultPbwall.hasType = NO;
  resultPbwall.type = PBWallTypeOpuses;
  return self;
}
- (BOOL) hasUserId {
  return resultPbwall.hasUserId;
}
- (NSString*) userId {
  return resultPbwall.userId;
}
- (PBWallBuilder*) setUserId:(NSString*) value {
  resultPbwall.hasUserId = YES;
  resultPbwall.userId = value;
  return self;
}
- (PBWallBuilder*) clearUserId {
  resultPbwall.hasUserId = NO;
  resultPbwall.userId = @"";
  return self;
}
- (BOOL) hasName {
  return resultPbwall.hasName;
}
- (NSString*) name {
  return resultPbwall.name;
}
- (PBWallBuilder*) setName:(NSString*) value {
  resultPbwall.hasName = YES;
  resultPbwall.name = value;
  return self;
}
- (PBWallBuilder*) clearName {
  resultPbwall.hasName = NO;
  resultPbwall.name = @"";
  return self;
}
- (BOOL) hasContent {
  return resultPbwall.hasContent;
}
- (PBLayout*) content {
  return resultPbwall.content;
}
- (PBWallBuilder*) setContent:(PBLayout*) value {
  resultPbwall.hasContent = YES;
  resultPbwall.content = value;
  return self;
}
- (PBWallBuilder*) setContentBuilder:(PBLayoutBuilder*) builderForValue {
  return [self setContent:[builderForValue build]];
}
- (PBWallBuilder*) mergeContent:(PBLayout*) value {
  if (resultPbwall.hasContent &&
      resultPbwall.content != [PBLayout defaultInstance]) {
    resultPbwall.content =
      [[[PBLayout builderWithPrototype:resultPbwall.content] mergeFrom:value] buildPartial];
  } else {
    resultPbwall.content = value;
  }
  resultPbwall.hasContent = YES;
  return self;
}
- (PBWallBuilder*) clearContent {
  resultPbwall.hasContent = NO;
  resultPbwall.content = [PBLayout defaultInstance];
  return self;
}
- (BOOL) hasMusicUrl {
  return resultPbwall.hasMusicUrl;
}
- (NSString*) musicUrl {
  return resultPbwall.musicUrl;
}
- (PBWallBuilder*) setMusicUrl:(NSString*) value {
  resultPbwall.hasMusicUrl = YES;
  resultPbwall.musicUrl = value;
  return self;
}
- (PBWallBuilder*) clearMusicUrl {
  resultPbwall.hasMusicUrl = NO;
  resultPbwall.musicUrl = @"";
  return self;
}
@end

@interface PBRect ()
@property SInt32 x;
@property SInt32 y;
@property SInt32 width;
@property SInt32 height;
@end

@implementation PBRect

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) _value_ {
  hasX_ = !!_value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) _value_ {
  hasY_ = !!_value_;
}
@synthesize y;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (instancetype) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static PBRect* defaultPBRectInstance = nil;
+ (void) initialize {
  if (self == [PBRect class]) {
    defaultPBRectInstance = [[PBRect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBRectInstance;
}
- (instancetype) defaultInstance {
  return defaultPBRectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeInt32:11 value:self.x];
  }
  if (self.hasY) {
    [output writeInt32:12 value:self.y];
  }
  if (self.hasWidth) {
    [output writeInt32:13 value:self.width];
  }
  if (self.hasHeight) {
    [output writeInt32:14 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasX) {
    size_ += computeInt32Size(11, self.x);
  }
  if (self.hasY) {
    size_ += computeInt32Size(12, self.y);
  }
  if (self.hasWidth) {
    size_ += computeInt32Size(13, self.width);
  }
  if (self.hasHeight) {
    size_ += computeInt32Size(14, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRect*) parseFromData:(NSData*) data {
  return (PBRect*)[[[PBRect builder] mergeFromData:data] build];
}
+ (PBRect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRect*)[[[PBRect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRect*) parseFromInputStream:(NSInputStream*) input {
  return (PBRect*)[[[PBRect builder] mergeFromInputStream:input] build];
}
+ (PBRect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRect*)[[[PBRect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRect*)[[[PBRect builder] mergeFromCodedInputStream:input] build];
}
+ (PBRect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRect*)[[[PBRect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRectBuilder*) builder {
  return [[PBRectBuilder alloc] init];
}
+ (PBRectBuilder*) builderWithPrototype:(PBRect*) prototype {
  return [[PBRect builder] mergeFrom:prototype];
}
- (PBRectBuilder*) builder {
  return [PBRect builder];
}
- (PBRectBuilder*) toBuilder {
  return [PBRect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithInteger:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithInteger:self.y]];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRect class]]) {
    return NO;
  }
  PBRect *otherMessage = other;
  return
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.y] hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRectBuilder()
@property (strong) PBRect* resultPbrect;
@end

@implementation PBRectBuilder
@synthesize resultPbrect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbrect = [[PBRect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbrect;
}
- (PBRectBuilder*) clear {
  self.resultPbrect = [[PBRect alloc] init];
  return self;
}
- (PBRectBuilder*) clone {
  return [PBRect builderWithPrototype:resultPbrect];
}
- (PBRect*) defaultInstance {
  return [PBRect defaultInstance];
}
- (PBRect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRect*) buildPartial {
  PBRect* returnMe = resultPbrect;
  self.resultPbrect = nil;
  return returnMe;
}
- (PBRectBuilder*) mergeFrom:(PBRect*) other {
  if (other == [PBRect defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 88: {
        [self setX:[input readInt32]];
        break;
      }
      case 96: {
        [self setY:[input readInt32]];
        break;
      }
      case 104: {
        [self setWidth:[input readInt32]];
        break;
      }
      case 112: {
        [self setHeight:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return resultPbrect.hasX;
}
- (SInt32) x {
  return resultPbrect.x;
}
- (PBRectBuilder*) setX:(SInt32) value {
  resultPbrect.hasX = YES;
  resultPbrect.x = value;
  return self;
}
- (PBRectBuilder*) clearX {
  resultPbrect.hasX = NO;
  resultPbrect.x = 0;
  return self;
}
- (BOOL) hasY {
  return resultPbrect.hasY;
}
- (SInt32) y {
  return resultPbrect.y;
}
- (PBRectBuilder*) setY:(SInt32) value {
  resultPbrect.hasY = YES;
  resultPbrect.y = value;
  return self;
}
- (PBRectBuilder*) clearY {
  resultPbrect.hasY = NO;
  resultPbrect.y = 0;
  return self;
}
- (BOOL) hasWidth {
  return resultPbrect.hasWidth;
}
- (SInt32) width {
  return resultPbrect.width;
}
- (PBRectBuilder*) setWidth:(SInt32) value {
  resultPbrect.hasWidth = YES;
  resultPbrect.width = value;
  return self;
}
- (PBRectBuilder*) clearWidth {
  resultPbrect.hasWidth = NO;
  resultPbrect.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultPbrect.hasHeight;
}
- (SInt32) height {
  return resultPbrect.height;
}
- (PBRectBuilder*) setHeight:(SInt32) value {
  resultPbrect.hasHeight = YES;
  resultPbrect.height = value;
  return self;
}
- (PBRectBuilder*) clearHeight {
  resultPbrect.hasHeight = NO;
  resultPbrect.height = 0;
  return self;
}
@end

@interface PBFrame ()
@property SInt32 frameId;
@property SInt32 type;
@property (strong) NSString* imageUrl;
@property (strong) PBRect* opusIphoneRect;
@property (strong) PBRect* opusIpadRect;
@property SInt32 price;
@end

@implementation PBFrame

- (BOOL) hasFrameId {
  return !!hasFrameId_;
}
- (void) setHasFrameId:(BOOL) _value_ {
  hasFrameId_ = !!_value_;
}
@synthesize frameId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) _value_ {
  hasImageUrl_ = !!_value_;
}
@synthesize imageUrl;
- (BOOL) hasOpusIphoneRect {
  return !!hasOpusIphoneRect_;
}
- (void) setHasOpusIphoneRect:(BOOL) _value_ {
  hasOpusIphoneRect_ = !!_value_;
}
@synthesize opusIphoneRect;
- (BOOL) hasOpusIpadRect {
  return !!hasOpusIpadRect_;
}
- (void) setHasOpusIpadRect:(BOOL) _value_ {
  hasOpusIpadRect_ = !!_value_;
}
@synthesize opusIpadRect;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (instancetype) init {
  if ((self = [super init])) {
    self.frameId = 0;
    self.type = 0;
    self.imageUrl = @"";
    self.opusIphoneRect = [PBRect defaultInstance];
    self.opusIpadRect = [PBRect defaultInstance];
    self.price = 0;
  }
  return self;
}
static PBFrame* defaultPBFrameInstance = nil;
+ (void) initialize {
  if (self == [PBFrame class]) {
    defaultPBFrameInstance = [[PBFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFrameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFrameId) {
    [output writeInt32:1 value:self.frameId];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasImageUrl) {
    [output writeString:10 value:self.imageUrl];
  }
  if (self.hasOpusIphoneRect) {
    [output writeMessage:13 value:self.opusIphoneRect];
  }
  if (self.hasOpusIpadRect) {
    [output writeMessage:14 value:self.opusIpadRect];
  }
  if (self.hasPrice) {
    [output writeInt32:18 value:self.price];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFrameId) {
    size_ += computeInt32Size(1, self.frameId);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasImageUrl) {
    size_ += computeStringSize(10, self.imageUrl);
  }
  if (self.hasOpusIphoneRect) {
    size_ += computeMessageSize(13, self.opusIphoneRect);
  }
  if (self.hasOpusIpadRect) {
    size_ += computeMessageSize(14, self.opusIpadRect);
  }
  if (self.hasPrice) {
    size_ += computeInt32Size(18, self.price);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFrame*) parseFromData:(NSData*) data {
  return (PBFrame*)[[[PBFrame builder] mergeFromData:data] build];
}
+ (PBFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFrame*) parseFromInputStream:(NSInputStream*) input {
  return (PBFrame*)[[[PBFrame builder] mergeFromInputStream:input] build];
}
+ (PBFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFrame*)[[[PBFrame builder] mergeFromCodedInputStream:input] build];
}
+ (PBFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrameBuilder*) builder {
  return [[PBFrameBuilder alloc] init];
}
+ (PBFrameBuilder*) builderWithPrototype:(PBFrame*) prototype {
  return [[PBFrame builder] mergeFrom:prototype];
}
- (PBFrameBuilder*) builder {
  return [PBFrame builder];
}
- (PBFrameBuilder*) toBuilder {
  return [PBFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFrameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frameId", [NSNumber numberWithInteger:self.frameId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  if (self.hasOpusIphoneRect) {
    [output appendFormat:@"%@%@ {\n", indent, @"opusIphoneRect"];
    [self.opusIphoneRect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOpusIpadRect) {
    [output appendFormat:@"%@%@ {\n", indent, @"opusIpadRect"];
    [self.opusIpadRect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFrame class]]) {
    return NO;
  }
  PBFrame *otherMessage = other;
  return
      self.hasFrameId == otherMessage.hasFrameId &&
      (!self.hasFrameId || self.frameId == otherMessage.frameId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      self.hasOpusIphoneRect == otherMessage.hasOpusIphoneRect &&
      (!self.hasOpusIphoneRect || [self.opusIphoneRect isEqual:otherMessage.opusIphoneRect]) &&
      self.hasOpusIpadRect == otherMessage.hasOpusIpadRect &&
      (!self.hasOpusIpadRect || [self.opusIpadRect isEqual:otherMessage.opusIpadRect]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFrameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.frameId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  if (self.hasOpusIphoneRect) {
    hashCode = hashCode * 31 + [self.opusIphoneRect hash];
  }
  if (self.hasOpusIpadRect) {
    hashCode = hashCode * 31 + [self.opusIpadRect hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFrameBuilder()
@property (strong) PBFrame* resultPbframe;
@end

@implementation PBFrameBuilder
@synthesize resultPbframe;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbframe = [[PBFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbframe;
}
- (PBFrameBuilder*) clear {
  self.resultPbframe = [[PBFrame alloc] init];
  return self;
}
- (PBFrameBuilder*) clone {
  return [PBFrame builderWithPrototype:resultPbframe];
}
- (PBFrame*) defaultInstance {
  return [PBFrame defaultInstance];
}
- (PBFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFrame*) buildPartial {
  PBFrame* returnMe = resultPbframe;
  self.resultPbframe = nil;
  return returnMe;
}
- (PBFrameBuilder*) mergeFrom:(PBFrame*) other {
  if (other == [PBFrame defaultInstance]) {
    return self;
  }
  if (other.hasFrameId) {
    [self setFrameId:other.frameId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  if (other.hasOpusIphoneRect) {
    [self mergeOpusIphoneRect:other.opusIphoneRect];
  }
  if (other.hasOpusIpadRect) {
    [self mergeOpusIpadRect:other.opusIpadRect];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFrameId:[input readInt32]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 82: {
        [self setImageUrl:[input readString]];
        break;
      }
      case 106: {
        PBRectBuilder* subBuilder = [PBRect builder];
        if (self.hasOpusIphoneRect) {
          [subBuilder mergeFrom:self.opusIphoneRect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpusIphoneRect:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        PBRectBuilder* subBuilder = [PBRect builder];
        if (self.hasOpusIpadRect) {
          [subBuilder mergeFrom:self.opusIpadRect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOpusIpadRect:[subBuilder buildPartial]];
        break;
      }
      case 144: {
        [self setPrice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFrameId {
  return resultPbframe.hasFrameId;
}
- (SInt32) frameId {
  return resultPbframe.frameId;
}
- (PBFrameBuilder*) setFrameId:(SInt32) value {
  resultPbframe.hasFrameId = YES;
  resultPbframe.frameId = value;
  return self;
}
- (PBFrameBuilder*) clearFrameId {
  resultPbframe.hasFrameId = NO;
  resultPbframe.frameId = 0;
  return self;
}
- (BOOL) hasType {
  return resultPbframe.hasType;
}
- (SInt32) type {
  return resultPbframe.type;
}
- (PBFrameBuilder*) setType:(SInt32) value {
  resultPbframe.hasType = YES;
  resultPbframe.type = value;
  return self;
}
- (PBFrameBuilder*) clearType {
  resultPbframe.hasType = NO;
  resultPbframe.type = 0;
  return self;
}
- (BOOL) hasImageUrl {
  return resultPbframe.hasImageUrl;
}
- (NSString*) imageUrl {
  return resultPbframe.imageUrl;
}
- (PBFrameBuilder*) setImageUrl:(NSString*) value {
  resultPbframe.hasImageUrl = YES;
  resultPbframe.imageUrl = value;
  return self;
}
- (PBFrameBuilder*) clearImageUrl {
  resultPbframe.hasImageUrl = NO;
  resultPbframe.imageUrl = @"";
  return self;
}
- (BOOL) hasOpusIphoneRect {
  return resultPbframe.hasOpusIphoneRect;
}
- (PBRect*) opusIphoneRect {
  return resultPbframe.opusIphoneRect;
}
- (PBFrameBuilder*) setOpusIphoneRect:(PBRect*) value {
  resultPbframe.hasOpusIphoneRect = YES;
  resultPbframe.opusIphoneRect = value;
  return self;
}
- (PBFrameBuilder*) setOpusIphoneRectBuilder:(PBRectBuilder*) builderForValue {
  return [self setOpusIphoneRect:[builderForValue build]];
}
- (PBFrameBuilder*) mergeOpusIphoneRect:(PBRect*) value {
  if (resultPbframe.hasOpusIphoneRect &&
      resultPbframe.opusIphoneRect != [PBRect defaultInstance]) {
    resultPbframe.opusIphoneRect =
      [[[PBRect builderWithPrototype:resultPbframe.opusIphoneRect] mergeFrom:value] buildPartial];
  } else {
    resultPbframe.opusIphoneRect = value;
  }
  resultPbframe.hasOpusIphoneRect = YES;
  return self;
}
- (PBFrameBuilder*) clearOpusIphoneRect {
  resultPbframe.hasOpusIphoneRect = NO;
  resultPbframe.opusIphoneRect = [PBRect defaultInstance];
  return self;
}
- (BOOL) hasOpusIpadRect {
  return resultPbframe.hasOpusIpadRect;
}
- (PBRect*) opusIpadRect {
  return resultPbframe.opusIpadRect;
}
- (PBFrameBuilder*) setOpusIpadRect:(PBRect*) value {
  resultPbframe.hasOpusIpadRect = YES;
  resultPbframe.opusIpadRect = value;
  return self;
}
- (PBFrameBuilder*) setOpusIpadRectBuilder:(PBRectBuilder*) builderForValue {
  return [self setOpusIpadRect:[builderForValue build]];
}
- (PBFrameBuilder*) mergeOpusIpadRect:(PBRect*) value {
  if (resultPbframe.hasOpusIpadRect &&
      resultPbframe.opusIpadRect != [PBRect defaultInstance]) {
    resultPbframe.opusIpadRect =
      [[[PBRect builderWithPrototype:resultPbframe.opusIpadRect] mergeFrom:value] buildPartial];
  } else {
    resultPbframe.opusIpadRect = value;
  }
  resultPbframe.hasOpusIpadRect = YES;
  return self;
}
- (PBFrameBuilder*) clearOpusIpadRect {
  resultPbframe.hasOpusIpadRect = NO;
  resultPbframe.opusIpadRect = [PBRect defaultInstance];
  return self;
}
- (BOOL) hasPrice {
  return resultPbframe.hasPrice;
}
- (SInt32) price {
  return resultPbframe.price;
}
- (PBFrameBuilder*) setPrice:(SInt32) value {
  resultPbframe.hasPrice = YES;
  resultPbframe.price = value;
  return self;
}
- (PBFrameBuilder*) clearPrice {
  resultPbframe.hasPrice = NO;
  resultPbframe.price = 0;
  return self;
}
@end

@interface PBFrameList ()
@property (strong) NSMutableArray * framesArray;
@end

@implementation PBFrameList

@synthesize framesArray;
@dynamic frames;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFrameList* defaultPBFrameListInstance = nil;
+ (void) initialize {
  if (self == [PBFrameList class]) {
    defaultPBFrameListInstance = [[PBFrameList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFrameListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFrameListInstance;
}
- (NSArray *)frames {
  return framesArray;
}
- (PBFrame*)framesAtIndex:(NSUInteger)index {
  return [framesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitframes = YES;
   [self.frames enumerateObjectsUsingBlock:^(PBFrame *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitframes = NO;
      *stop = YES;
    }
  }];
  if (!isInitframes) return isInitframes;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.framesArray enumerateObjectsUsingBlock:^(PBFrame *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.framesArray enumerateObjectsUsingBlock:^(PBFrame *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFrameList*) parseFromData:(NSData*) data {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromData:data] build];
}
+ (PBFrameList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFrameList*) parseFromInputStream:(NSInputStream*) input {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromInputStream:input] build];
}
+ (PBFrameList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrameList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromCodedInputStream:input] build];
}
+ (PBFrameList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrameList*)[[[PBFrameList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrameListBuilder*) builder {
  return [[PBFrameListBuilder alloc] init];
}
+ (PBFrameListBuilder*) builderWithPrototype:(PBFrameList*) prototype {
  return [[PBFrameList builder] mergeFrom:prototype];
}
- (PBFrameListBuilder*) builder {
  return [PBFrameList builder];
}
- (PBFrameListBuilder*) toBuilder {
  return [PBFrameList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.framesArray enumerateObjectsUsingBlock:^(PBFrame *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"frames"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFrameList class]]) {
    return NO;
  }
  PBFrameList *otherMessage = other;
  return
      [self.framesArray isEqualToArray:otherMessage.framesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.framesArray enumerateObjectsUsingBlock:^(PBFrame *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFrameListBuilder()
@property (strong) PBFrameList* resultPbframeList;
@end

@implementation PBFrameListBuilder
@synthesize resultPbframeList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbframeList = [[PBFrameList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbframeList;
}
- (PBFrameListBuilder*) clear {
  self.resultPbframeList = [[PBFrameList alloc] init];
  return self;
}
- (PBFrameListBuilder*) clone {
  return [PBFrameList builderWithPrototype:resultPbframeList];
}
- (PBFrameList*) defaultInstance {
  return [PBFrameList defaultInstance];
}
- (PBFrameList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFrameList*) buildPartial {
  PBFrameList* returnMe = resultPbframeList;
  self.resultPbframeList = nil;
  return returnMe;
}
- (PBFrameListBuilder*) mergeFrom:(PBFrameList*) other {
  if (other == [PBFrameList defaultInstance]) {
    return self;
  }
  if (other.framesArray.count > 0) {
    if (resultPbframeList.framesArray == nil) {
      resultPbframeList.framesArray = [[NSMutableArray alloc] initWithArray:other.framesArray];
    } else {
      [resultPbframeList.framesArray addObjectsFromArray:other.framesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFrameListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFrameListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBFrameBuilder* subBuilder = [PBFrame builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFrames:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)frames {
  return resultPbframeList.framesArray;
}
- (PBFrame*)framesAtIndex:(NSUInteger)index {
  return [resultPbframeList framesAtIndex:index];
}
- (PBFrameListBuilder *)addFrames:(PBFrame*)value {
  if (resultPbframeList.framesArray == nil) {
    resultPbframeList.framesArray = [[NSMutableArray alloc]init];
  }
  [resultPbframeList.framesArray addObject:value];
  return self;
}
- (PBFrameListBuilder *)setFramesArray:(NSArray *)array {
  resultPbframeList.framesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFrameListBuilder *)clearFrames {
  resultPbframeList.framesArray = nil;
  return self;
}
@end

@interface PBLayout ()
@property SInt32 layoutId;
@property (strong) NSString* name;
@property SInt32 displayMode;
@property (strong) NSMutableArray * wallOpusesArray;
@property (strong) NSString* imageUrl;
@property SInt32 price;
@end

@implementation PBLayout

- (BOOL) hasLayoutId {
  return !!hasLayoutId_;
}
- (void) setHasLayoutId:(BOOL) _value_ {
  hasLayoutId_ = !!_value_;
}
@synthesize layoutId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDisplayMode {
  return !!hasDisplayMode_;
}
- (void) setHasDisplayMode:(BOOL) _value_ {
  hasDisplayMode_ = !!_value_;
}
@synthesize displayMode;
@synthesize wallOpusesArray;
@dynamic wallOpuses;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) _value_ {
  hasImageUrl_ = !!_value_;
}
@synthesize imageUrl;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (instancetype) init {
  if ((self = [super init])) {
    self.layoutId = 0;
    self.name = @"";
    self.displayMode = 0;
    self.imageUrl = @"";
    self.price = 0;
  }
  return self;
}
static PBLayout* defaultPBLayoutInstance = nil;
+ (void) initialize {
  if (self == [PBLayout class]) {
    defaultPBLayoutInstance = [[PBLayout alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBLayoutInstance;
}
- (instancetype) defaultInstance {
  return defaultPBLayoutInstance;
}
- (NSArray *)wallOpuses {
  return wallOpusesArray;
}
- (PBWallOpus*)wallOpusesAtIndex:(NSUInteger)index {
  return [wallOpusesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasLayoutId) {
    return NO;
  }
  __block BOOL isInitwallOpuses = YES;
   [self.wallOpuses enumerateObjectsUsingBlock:^(PBWallOpus *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitwallOpuses = NO;
      *stop = YES;
    }
  }];
  if (!isInitwallOpuses) return isInitwallOpuses;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLayoutId) {
    [output writeInt32:1 value:self.layoutId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDisplayMode) {
    [output writeInt32:3 value:self.displayMode];
  }
  [self.wallOpusesArray enumerateObjectsUsingBlock:^(PBWallOpus *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasImageUrl) {
    [output writeString:7 value:self.imageUrl];
  }
  if (self.hasPrice) {
    [output writeInt32:18 value:self.price];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLayoutId) {
    size_ += computeInt32Size(1, self.layoutId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDisplayMode) {
    size_ += computeInt32Size(3, self.displayMode);
  }
  [self.wallOpusesArray enumerateObjectsUsingBlock:^(PBWallOpus *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasImageUrl) {
    size_ += computeStringSize(7, self.imageUrl);
  }
  if (self.hasPrice) {
    size_ += computeInt32Size(18, self.price);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBLayout*) parseFromData:(NSData*) data {
  return (PBLayout*)[[[PBLayout builder] mergeFromData:data] build];
}
+ (PBLayout*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayout*)[[[PBLayout builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLayout*) parseFromInputStream:(NSInputStream*) input {
  return (PBLayout*)[[[PBLayout builder] mergeFromInputStream:input] build];
}
+ (PBLayout*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayout*)[[[PBLayout builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayout*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLayout*)[[[PBLayout builder] mergeFromCodedInputStream:input] build];
}
+ (PBLayout*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayout*)[[[PBLayout builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutBuilder*) builder {
  return [[PBLayoutBuilder alloc] init];
}
+ (PBLayoutBuilder*) builderWithPrototype:(PBLayout*) prototype {
  return [[PBLayout builder] mergeFrom:prototype];
}
- (PBLayoutBuilder*) builder {
  return [PBLayout builder];
}
- (PBLayoutBuilder*) toBuilder {
  return [PBLayout builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLayoutId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"layoutId", [NSNumber numberWithInteger:self.layoutId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDisplayMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayMode", [NSNumber numberWithInteger:self.displayMode]];
  }
  [self.wallOpusesArray enumerateObjectsUsingBlock:^(PBWallOpus *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"wallOpuses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBLayout class]]) {
    return NO;
  }
  PBLayout *otherMessage = other;
  return
      self.hasLayoutId == otherMessage.hasLayoutId &&
      (!self.hasLayoutId || self.layoutId == otherMessage.layoutId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDisplayMode == otherMessage.hasDisplayMode &&
      (!self.hasDisplayMode || self.displayMode == otherMessage.displayMode) &&
      [self.wallOpusesArray isEqualToArray:otherMessage.wallOpusesArray] &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLayoutId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.layoutId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDisplayMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.displayMode] hash];
  }
  [self.wallOpusesArray enumerateObjectsUsingBlock:^(PBWallOpus *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBLayoutBuilder()
@property (strong) PBLayout* resultPblayout;
@end

@implementation PBLayoutBuilder
@synthesize resultPblayout;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPblayout = [[PBLayout alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPblayout;
}
- (PBLayoutBuilder*) clear {
  self.resultPblayout = [[PBLayout alloc] init];
  return self;
}
- (PBLayoutBuilder*) clone {
  return [PBLayout builderWithPrototype:resultPblayout];
}
- (PBLayout*) defaultInstance {
  return [PBLayout defaultInstance];
}
- (PBLayout*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLayout*) buildPartial {
  PBLayout* returnMe = resultPblayout;
  self.resultPblayout = nil;
  return returnMe;
}
- (PBLayoutBuilder*) mergeFrom:(PBLayout*) other {
  if (other == [PBLayout defaultInstance]) {
    return self;
  }
  if (other.hasLayoutId) {
    [self setLayoutId:other.layoutId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDisplayMode) {
    [self setDisplayMode:other.displayMode];
  }
  if (other.wallOpusesArray.count > 0) {
    if (resultPblayout.wallOpusesArray == nil) {
      resultPblayout.wallOpusesArray = [[NSMutableArray alloc] initWithArray:other.wallOpusesArray];
    } else {
      [resultPblayout.wallOpusesArray addObjectsFromArray:other.wallOpusesArray];
    }
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLayoutBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLayoutBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLayoutId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setDisplayMode:[input readInt32]];
        break;
      }
      case 42: {
        PBWallOpusBuilder* subBuilder = [PBWallOpus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWallOpuses:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setImageUrl:[input readString]];
        break;
      }
      case 144: {
        [self setPrice:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLayoutId {
  return resultPblayout.hasLayoutId;
}
- (SInt32) layoutId {
  return resultPblayout.layoutId;
}
- (PBLayoutBuilder*) setLayoutId:(SInt32) value {
  resultPblayout.hasLayoutId = YES;
  resultPblayout.layoutId = value;
  return self;
}
- (PBLayoutBuilder*) clearLayoutId {
  resultPblayout.hasLayoutId = NO;
  resultPblayout.layoutId = 0;
  return self;
}
- (BOOL) hasName {
  return resultPblayout.hasName;
}
- (NSString*) name {
  return resultPblayout.name;
}
- (PBLayoutBuilder*) setName:(NSString*) value {
  resultPblayout.hasName = YES;
  resultPblayout.name = value;
  return self;
}
- (PBLayoutBuilder*) clearName {
  resultPblayout.hasName = NO;
  resultPblayout.name = @"";
  return self;
}
- (BOOL) hasDisplayMode {
  return resultPblayout.hasDisplayMode;
}
- (SInt32) displayMode {
  return resultPblayout.displayMode;
}
- (PBLayoutBuilder*) setDisplayMode:(SInt32) value {
  resultPblayout.hasDisplayMode = YES;
  resultPblayout.displayMode = value;
  return self;
}
- (PBLayoutBuilder*) clearDisplayMode {
  resultPblayout.hasDisplayMode = NO;
  resultPblayout.displayMode = 0;
  return self;
}
- (NSMutableArray *)wallOpuses {
  return resultPblayout.wallOpusesArray;
}
- (PBWallOpus*)wallOpusesAtIndex:(NSUInteger)index {
  return [resultPblayout wallOpusesAtIndex:index];
}
- (PBLayoutBuilder *)addWallOpuses:(PBWallOpus*)value {
  if (resultPblayout.wallOpusesArray == nil) {
    resultPblayout.wallOpusesArray = [[NSMutableArray alloc]init];
  }
  [resultPblayout.wallOpusesArray addObject:value];
  return self;
}
- (PBLayoutBuilder *)setWallOpusesArray:(NSArray *)array {
  resultPblayout.wallOpusesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBLayoutBuilder *)clearWallOpuses {
  resultPblayout.wallOpusesArray = nil;
  return self;
}
- (BOOL) hasImageUrl {
  return resultPblayout.hasImageUrl;
}
- (NSString*) imageUrl {
  return resultPblayout.imageUrl;
}
- (PBLayoutBuilder*) setImageUrl:(NSString*) value {
  resultPblayout.hasImageUrl = YES;
  resultPblayout.imageUrl = value;
  return self;
}
- (PBLayoutBuilder*) clearImageUrl {
  resultPblayout.hasImageUrl = NO;
  resultPblayout.imageUrl = @"";
  return self;
}
- (BOOL) hasPrice {
  return resultPblayout.hasPrice;
}
- (SInt32) price {
  return resultPblayout.price;
}
- (PBLayoutBuilder*) setPrice:(SInt32) value {
  resultPblayout.hasPrice = YES;
  resultPblayout.price = value;
  return self;
}
- (PBLayoutBuilder*) clearPrice {
  resultPblayout.hasPrice = NO;
  resultPblayout.price = 0;
  return self;
}
@end

@interface PBLayoutList ()
@property (strong) NSMutableArray * layoutsArray;
@end

@implementation PBLayoutList

@synthesize layoutsArray;
@dynamic layouts;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBLayoutList* defaultPBLayoutListInstance = nil;
+ (void) initialize {
  if (self == [PBLayoutList class]) {
    defaultPBLayoutListInstance = [[PBLayoutList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBLayoutListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBLayoutListInstance;
}
- (NSArray *)layouts {
  return layoutsArray;
}
- (PBLayout*)layoutsAtIndex:(NSUInteger)index {
  return [layoutsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitlayouts = YES;
   [self.layouts enumerateObjectsUsingBlock:^(PBLayout *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlayouts = NO;
      *stop = YES;
    }
  }];
  if (!isInitlayouts) return isInitlayouts;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.layoutsArray enumerateObjectsUsingBlock:^(PBLayout *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.layoutsArray enumerateObjectsUsingBlock:^(PBLayout *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBLayoutList*) parseFromData:(NSData*) data {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromData:data] build];
}
+ (PBLayoutList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutList*) parseFromInputStream:(NSInputStream*) input {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromInputStream:input] build];
}
+ (PBLayoutList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromCodedInputStream:input] build];
}
+ (PBLayoutList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBLayoutList*)[[[PBLayoutList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBLayoutListBuilder*) builder {
  return [[PBLayoutListBuilder alloc] init];
}
+ (PBLayoutListBuilder*) builderWithPrototype:(PBLayoutList*) prototype {
  return [[PBLayoutList builder] mergeFrom:prototype];
}
- (PBLayoutListBuilder*) builder {
  return [PBLayoutList builder];
}
- (PBLayoutListBuilder*) toBuilder {
  return [PBLayoutList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.layoutsArray enumerateObjectsUsingBlock:^(PBLayout *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"layouts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBLayoutList class]]) {
    return NO;
  }
  PBLayoutList *otherMessage = other;
  return
      [self.layoutsArray isEqualToArray:otherMessage.layoutsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.layoutsArray enumerateObjectsUsingBlock:^(PBLayout *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBLayoutListBuilder()
@property (strong) PBLayoutList* resultPblayoutList;
@end

@implementation PBLayoutListBuilder
@synthesize resultPblayoutList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPblayoutList = [[PBLayoutList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPblayoutList;
}
- (PBLayoutListBuilder*) clear {
  self.resultPblayoutList = [[PBLayoutList alloc] init];
  return self;
}
- (PBLayoutListBuilder*) clone {
  return [PBLayoutList builderWithPrototype:resultPblayoutList];
}
- (PBLayoutList*) defaultInstance {
  return [PBLayoutList defaultInstance];
}
- (PBLayoutList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBLayoutList*) buildPartial {
  PBLayoutList* returnMe = resultPblayoutList;
  self.resultPblayoutList = nil;
  return returnMe;
}
- (PBLayoutListBuilder*) mergeFrom:(PBLayoutList*) other {
  if (other == [PBLayoutList defaultInstance]) {
    return self;
  }
  if (other.layoutsArray.count > 0) {
    if (resultPblayoutList.layoutsArray == nil) {
      resultPblayoutList.layoutsArray = [[NSMutableArray alloc] initWithArray:other.layoutsArray];
    } else {
      [resultPblayoutList.layoutsArray addObjectsFromArray:other.layoutsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBLayoutListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBLayoutListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBLayoutBuilder* subBuilder = [PBLayout builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLayouts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)layouts {
  return resultPblayoutList.layoutsArray;
}
- (PBLayout*)layoutsAtIndex:(NSUInteger)index {
  return [resultPblayoutList layoutsAtIndex:index];
}
- (PBLayoutListBuilder *)addLayouts:(PBLayout*)value {
  if (resultPblayoutList.layoutsArray == nil) {
    resultPblayoutList.layoutsArray = [[NSMutableArray alloc]init];
  }
  [resultPblayoutList.layoutsArray addObject:value];
  return self;
}
- (PBLayoutListBuilder *)setLayoutsArray:(NSArray *)array {
  resultPblayoutList.layoutsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBLayoutListBuilder *)clearLayouts {
  resultPblayoutList.layoutsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
