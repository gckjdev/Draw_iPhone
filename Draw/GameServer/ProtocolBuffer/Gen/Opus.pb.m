// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Opus.pb.h"
// @@protoc_insertion_point(imports)

@implementation OpusRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [OpusRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    [GameConstantsRoot registerAllExtensions:registry];
    [SingRoot registerAllExtensions:registry];
    [DrawRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBLanguageIsValidValue(PBLanguage value) {
  switch (value) {
    case PBLanguageChinese:
    case PBLanguageEnglish:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBLanguage(PBLanguage value) {
  switch (value) {
    case PBLanguageChinese:
      return @"PBLanguageChinese";
    case PBLanguageEnglish:
      return @"PBLanguageEnglish";
    default:
      return nil;
  }
}

BOOL PBOpusTypeIsValidValue(PBOpusType value) {
  switch (value) {
    case PBOpusTypeUnknown:
    case PBOpusTypeDraw:
    case PBOpusTypeGuess:
    case PBOpusTypeComment:
    case PBOpusTypeRepost:
    case PBOpusTypeDrawToUser:
    case PBOpusTypeFlower:
    case PBOpusTypeTomato:
    case PBOpusTypeOnlyComment:
    case PBOpusTypeDrawContest:
    case PBOpusTypeDrawPractice:
    case PBOpusTypeDrawConquer:
    case PBOpusTypeSing:
    case PBOpusTypeSingToUser:
    case PBOpusTypeSingContest:
    case PBOpusTypeAskPs:
    case PBOpusTypeAskPsOpus:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBOpusType(PBOpusType value) {
  switch (value) {
    case PBOpusTypeUnknown:
      return @"PBOpusTypeUnknown";
    case PBOpusTypeDraw:
      return @"PBOpusTypeDraw";
    case PBOpusTypeGuess:
      return @"PBOpusTypeGuess";
    case PBOpusTypeComment:
      return @"PBOpusTypeComment";
    case PBOpusTypeRepost:
      return @"PBOpusTypeRepost";
    case PBOpusTypeDrawToUser:
      return @"PBOpusTypeDrawToUser";
    case PBOpusTypeFlower:
      return @"PBOpusTypeFlower";
    case PBOpusTypeTomato:
      return @"PBOpusTypeTomato";
    case PBOpusTypeOnlyComment:
      return @"PBOpusTypeOnlyComment";
    case PBOpusTypeDrawContest:
      return @"PBOpusTypeDrawContest";
    case PBOpusTypeDrawPractice:
      return @"PBOpusTypeDrawPractice";
    case PBOpusTypeDrawConquer:
      return @"PBOpusTypeDrawConquer";
    case PBOpusTypeSing:
      return @"PBOpusTypeSing";
    case PBOpusTypeSingToUser:
      return @"PBOpusTypeSingToUser";
    case PBOpusTypeSingContest:
      return @"PBOpusTypeSingContest";
    case PBOpusTypeAskPs:
      return @"PBOpusTypeAskPs";
    case PBOpusTypeAskPsOpus:
      return @"PBOpusTypeAskPsOpus";
    default:
      return nil;
  }
}

BOOL PBOpusStoreTypeIsValidValue(PBOpusStoreType value) {
  switch (value) {
    case PBOpusStoreTypeNormalOpus:
    case PBOpusStoreTypeDraftOpus:
    case PBOpusStoreTypeSubmitOpus:
    case PBOpusStoreTypeSavedOpus:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBOpusStoreType(PBOpusStoreType value) {
  switch (value) {
    case PBOpusStoreTypeNormalOpus:
      return @"PBOpusStoreTypeNormalOpus";
    case PBOpusStoreTypeDraftOpus:
      return @"PBOpusStoreTypeDraftOpus";
    case PBOpusStoreTypeSubmitOpus:
      return @"PBOpusStoreTypeSubmitOpus";
    case PBOpusStoreTypeSavedOpus:
      return @"PBOpusStoreTypeSavedOpus";
    default:
      return nil;
  }
}

BOOL PBOpusStatusIsValidValue(PBOpusStatus value) {
  switch (value) {
    case PBOpusStatusOpusStatusNormal:
    case PBOpusStatusOpusStatusDelete:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBOpusStatus(PBOpusStatus value) {
  switch (value) {
    case PBOpusStatusOpusStatusNormal:
      return @"PBOpusStatusOpusStatusNormal";
    case PBOpusStatusOpusStatusDelete:
      return @"PBOpusStatusOpusStatusDelete";
    default:
      return nil;
  }
}

BOOL PBFeedTimesTypeIsValidValue(PBFeedTimesType value) {
  switch (value) {
    case PBFeedTimesTypeFeedTimesTypeMatch:
    case PBFeedTimesTypeFeedTimesTypeGuess:
    case PBFeedTimesTypeFeedTimesTypeCorrect:
    case PBFeedTimesTypeFeedTimesTypeComment:
    case PBFeedTimesTypeFeedTimesTypeFlower:
    case PBFeedTimesTypeFeedTimesTypeTomato:
    case PBFeedTimesTypeFeedTimesTypeSave:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBFeedTimesType(PBFeedTimesType value) {
  switch (value) {
    case PBFeedTimesTypeFeedTimesTypeMatch:
      return @"PBFeedTimesTypeFeedTimesTypeMatch";
    case PBFeedTimesTypeFeedTimesTypeGuess:
      return @"PBFeedTimesTypeFeedTimesTypeGuess";
    case PBFeedTimesTypeFeedTimesTypeCorrect:
      return @"PBFeedTimesTypeFeedTimesTypeCorrect";
    case PBFeedTimesTypeFeedTimesTypeComment:
      return @"PBFeedTimesTypeFeedTimesTypeComment";
    case PBFeedTimesTypeFeedTimesTypeFlower:
      return @"PBFeedTimesTypeFeedTimesTypeFlower";
    case PBFeedTimesTypeFeedTimesTypeTomato:
      return @"PBFeedTimesTypeFeedTimesTypeTomato";
    case PBFeedTimesTypeFeedTimesTypeSave:
      return @"PBFeedTimesTypeFeedTimesTypeSave";
    default:
      return nil;
  }
}

BOOL PBRankTypeIsValidValue(PBRankType value) {
  switch (value) {
    case PBRankTypeHotRank:
    case PBRankTypeAllTimeRank:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBRankType(PBRankType value) {
  switch (value) {
    case PBRankTypeHotRank:
      return @"PBRankTypeHotRank";
    case PBRankTypeAllTimeRank:
      return @"PBRankTypeAllTimeRank";
    default:
      return nil;
  }
}

BOOL PBUserGuessModeIsValidValue(PBUserGuessMode value) {
  switch (value) {
    case PBUserGuessModeGuessModeHappy:
    case PBUserGuessModeGuessModeGenius:
    case PBUserGuessModeGuessModeContest:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBUserGuessMode(PBUserGuessMode value) {
  switch (value) {
    case PBUserGuessModeGuessModeHappy:
      return @"PBUserGuessModeGuessModeHappy";
    case PBUserGuessModeGuessModeGenius:
      return @"PBUserGuessModeGuessModeGenius";
    case PBUserGuessModeGuessModeContest:
      return @"PBUserGuessModeGuessModeContest";
    default:
      return nil;
  }
}

BOOL PBGuessContestStateIsValidValue(PBGuessContestState value) {
  switch (value) {
    case PBGuessContestStateGuessContestStateEnd:
    case PBGuessContestStateGuessContestStateIng:
    case PBGuessContestStateGuessContestStateNotStart:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBGuessContestState(PBGuessContestState value) {
  switch (value) {
    case PBGuessContestStateGuessContestStateEnd:
      return @"PBGuessContestStateGuessContestStateEnd";
    case PBGuessContestStateGuessContestStateIng:
      return @"PBGuessContestStateGuessContestStateIng";
    case PBGuessContestStateGuessContestStateNotStart:
      return @"PBGuessContestStateGuessContestStateNotStart";
    default:
      return nil;
  }
}

@interface PBDrawOpus ()
@property SInt32 level;
@end

@implementation PBDrawOpus

- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (instancetype) init {
  if ((self = [super init])) {
    self.level = 0;
  }
  return self;
}
static PBDrawOpus* defaultPBDrawOpusInstance = nil;
+ (void) initialize {
  if (self == [PBDrawOpus class]) {
    defaultPBDrawOpusInstance = [[PBDrawOpus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBDrawOpusInstance;
}
- (instancetype) defaultInstance {
  return defaultPBDrawOpusInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLevel) {
    [output writeInt32:1 value:self.level];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLevel) {
    size_ += computeInt32Size(1, self.level);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDrawOpus*) parseFromData:(NSData*) data {
  return (PBDrawOpus*)[[[PBDrawOpus builder] mergeFromData:data] build];
}
+ (PBDrawOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawOpus*)[[[PBDrawOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDrawOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBDrawOpus*)[[[PBDrawOpus builder] mergeFromInputStream:input] build];
}
+ (PBDrawOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawOpus*)[[[PBDrawOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDrawOpus*)[[[PBDrawOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBDrawOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDrawOpus*)[[[PBDrawOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDrawOpusBuilder*) builder {
  return [[PBDrawOpusBuilder alloc] init];
}
+ (PBDrawOpusBuilder*) builderWithPrototype:(PBDrawOpus*) prototype {
  return [[PBDrawOpus builder] mergeFrom:prototype];
}
- (PBDrawOpusBuilder*) builder {
  return [PBDrawOpus builder];
}
- (PBDrawOpusBuilder*) toBuilder {
  return [PBDrawOpus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDrawOpus class]]) {
    return NO;
  }
  PBDrawOpus *otherMessage = other;
  return
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDrawOpusBuilder()
@property (strong) PBDrawOpus* resultPbdrawOpus;
@end

@implementation PBDrawOpusBuilder
@synthesize resultPbdrawOpus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbdrawOpus = [[PBDrawOpus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbdrawOpus;
}
- (PBDrawOpusBuilder*) clear {
  self.resultPbdrawOpus = [[PBDrawOpus alloc] init];
  return self;
}
- (PBDrawOpusBuilder*) clone {
  return [PBDrawOpus builderWithPrototype:resultPbdrawOpus];
}
- (PBDrawOpus*) defaultInstance {
  return [PBDrawOpus defaultInstance];
}
- (PBDrawOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDrawOpus*) buildPartial {
  PBDrawOpus* returnMe = resultPbdrawOpus;
  self.resultPbdrawOpus = nil;
  return returnMe;
}
- (PBDrawOpusBuilder*) mergeFrom:(PBDrawOpus*) other {
  if (other == [PBDrawOpus defaultInstance]) {
    return self;
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDrawOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDrawOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLevel:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLevel {
  return resultPbdrawOpus.hasLevel;
}
- (SInt32) level {
  return resultPbdrawOpus.level;
}
- (PBDrawOpusBuilder*) setLevel:(SInt32) value {
  resultPbdrawOpus.hasLevel = YES;
  resultPbdrawOpus.level = value;
  return self;
}
- (PBDrawOpusBuilder*) clearLevel {
  resultPbdrawOpus.hasLevel = NO;
  resultPbdrawOpus.level = 0;
  return self;
}
@end

@interface PBAskPs ()
@property (strong) NSMutableArray * requirementArray;
@property SInt32 awardCoinsPerUser;
@property SInt32 awardCoinsMaxTotal;
@property SInt32 awardIngotBestUser;
@property (strong) NSString* awardBestUserId;
@end

@implementation PBAskPs

@synthesize requirementArray;
@dynamic requirement;
- (BOOL) hasAwardCoinsPerUser {
  return !!hasAwardCoinsPerUser_;
}
- (void) setHasAwardCoinsPerUser:(BOOL) _value_ {
  hasAwardCoinsPerUser_ = !!_value_;
}
@synthesize awardCoinsPerUser;
- (BOOL) hasAwardCoinsMaxTotal {
  return !!hasAwardCoinsMaxTotal_;
}
- (void) setHasAwardCoinsMaxTotal:(BOOL) _value_ {
  hasAwardCoinsMaxTotal_ = !!_value_;
}
@synthesize awardCoinsMaxTotal;
- (BOOL) hasAwardIngotBestUser {
  return !!hasAwardIngotBestUser_;
}
- (void) setHasAwardIngotBestUser:(BOOL) _value_ {
  hasAwardIngotBestUser_ = !!_value_;
}
@synthesize awardIngotBestUser;
- (BOOL) hasAwardBestUserId {
  return !!hasAwardBestUserId_;
}
- (void) setHasAwardBestUserId:(BOOL) _value_ {
  hasAwardBestUserId_ = !!_value_;
}
@synthesize awardBestUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.awardCoinsPerUser = 0;
    self.awardCoinsMaxTotal = 0;
    self.awardIngotBestUser = 0;
    self.awardBestUserId = @"";
  }
  return self;
}
static PBAskPs* defaultPBAskPsInstance = nil;
+ (void) initialize {
  if (self == [PBAskPs class]) {
    defaultPBAskPsInstance = [[PBAskPs alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBAskPsInstance;
}
- (instancetype) defaultInstance {
  return defaultPBAskPsInstance;
}
- (NSArray *)requirement {
  return requirementArray;
}
- (NSString*)requirementAtIndex:(NSUInteger)index {
  return [requirementArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.requirementArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  if (self.hasAwardCoinsPerUser) {
    [output writeInt32:30 value:self.awardCoinsPerUser];
  }
  if (self.hasAwardCoinsMaxTotal) {
    [output writeInt32:31 value:self.awardCoinsMaxTotal];
  }
  if (self.hasAwardIngotBestUser) {
    [output writeInt32:32 value:self.awardIngotBestUser];
  }
  if (self.hasAwardBestUserId) {
    [output writeString:50 value:self.awardBestUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.requirementArray.count;
    [self.requirementArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAwardCoinsPerUser) {
    size_ += computeInt32Size(30, self.awardCoinsPerUser);
  }
  if (self.hasAwardCoinsMaxTotal) {
    size_ += computeInt32Size(31, self.awardCoinsMaxTotal);
  }
  if (self.hasAwardIngotBestUser) {
    size_ += computeInt32Size(32, self.awardIngotBestUser);
  }
  if (self.hasAwardBestUserId) {
    size_ += computeStringSize(50, self.awardBestUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBAskPs*) parseFromData:(NSData*) data {
  return (PBAskPs*)[[[PBAskPs builder] mergeFromData:data] build];
}
+ (PBAskPs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAskPs*)[[[PBAskPs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBAskPs*) parseFromInputStream:(NSInputStream*) input {
  return (PBAskPs*)[[[PBAskPs builder] mergeFromInputStream:input] build];
}
+ (PBAskPs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAskPs*)[[[PBAskPs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAskPs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBAskPs*)[[[PBAskPs builder] mergeFromCodedInputStream:input] build];
}
+ (PBAskPs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAskPs*)[[[PBAskPs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAskPsBuilder*) builder {
  return [[PBAskPsBuilder alloc] init];
}
+ (PBAskPsBuilder*) builderWithPrototype:(PBAskPs*) prototype {
  return [[PBAskPs builder] mergeFrom:prototype];
}
- (PBAskPsBuilder*) builder {
  return [PBAskPs builder];
}
- (PBAskPsBuilder*) toBuilder {
  return [PBAskPs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.requirementArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requirement", obj];
  }];
  if (self.hasAwardCoinsPerUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardCoinsPerUser", [NSNumber numberWithInteger:self.awardCoinsPerUser]];
  }
  if (self.hasAwardCoinsMaxTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardCoinsMaxTotal", [NSNumber numberWithInteger:self.awardCoinsMaxTotal]];
  }
  if (self.hasAwardIngotBestUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardIngotBestUser", [NSNumber numberWithInteger:self.awardIngotBestUser]];
  }
  if (self.hasAwardBestUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"awardBestUserId", self.awardBestUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBAskPs class]]) {
    return NO;
  }
  PBAskPs *otherMessage = other;
  return
      [self.requirementArray isEqualToArray:otherMessage.requirementArray] &&
      self.hasAwardCoinsPerUser == otherMessage.hasAwardCoinsPerUser &&
      (!self.hasAwardCoinsPerUser || self.awardCoinsPerUser == otherMessage.awardCoinsPerUser) &&
      self.hasAwardCoinsMaxTotal == otherMessage.hasAwardCoinsMaxTotal &&
      (!self.hasAwardCoinsMaxTotal || self.awardCoinsMaxTotal == otherMessage.awardCoinsMaxTotal) &&
      self.hasAwardIngotBestUser == otherMessage.hasAwardIngotBestUser &&
      (!self.hasAwardIngotBestUser || self.awardIngotBestUser == otherMessage.awardIngotBestUser) &&
      self.hasAwardBestUserId == otherMessage.hasAwardBestUserId &&
      (!self.hasAwardBestUserId || [self.awardBestUserId isEqual:otherMessage.awardBestUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.requirementArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAwardCoinsPerUser) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.awardCoinsPerUser] hash];
  }
  if (self.hasAwardCoinsMaxTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.awardCoinsMaxTotal] hash];
  }
  if (self.hasAwardIngotBestUser) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.awardIngotBestUser] hash];
  }
  if (self.hasAwardBestUserId) {
    hashCode = hashCode * 31 + [self.awardBestUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBAskPsBuilder()
@property (strong) PBAskPs* resultPbaskPs;
@end

@implementation PBAskPsBuilder
@synthesize resultPbaskPs;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbaskPs = [[PBAskPs alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbaskPs;
}
- (PBAskPsBuilder*) clear {
  self.resultPbaskPs = [[PBAskPs alloc] init];
  return self;
}
- (PBAskPsBuilder*) clone {
  return [PBAskPs builderWithPrototype:resultPbaskPs];
}
- (PBAskPs*) defaultInstance {
  return [PBAskPs defaultInstance];
}
- (PBAskPs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBAskPs*) buildPartial {
  PBAskPs* returnMe = resultPbaskPs;
  self.resultPbaskPs = nil;
  return returnMe;
}
- (PBAskPsBuilder*) mergeFrom:(PBAskPs*) other {
  if (other == [PBAskPs defaultInstance]) {
    return self;
  }
  if (other.requirementArray.count > 0) {
    if (resultPbaskPs.requirementArray == nil) {
      resultPbaskPs.requirementArray = [[NSMutableArray alloc] initWithArray:other.requirementArray];
    } else {
      [resultPbaskPs.requirementArray addObjectsFromArray:other.requirementArray];
    }
  }
  if (other.hasAwardCoinsPerUser) {
    [self setAwardCoinsPerUser:other.awardCoinsPerUser];
  }
  if (other.hasAwardCoinsMaxTotal) {
    [self setAwardCoinsMaxTotal:other.awardCoinsMaxTotal];
  }
  if (other.hasAwardIngotBestUser) {
    [self setAwardIngotBestUser:other.awardIngotBestUser];
  }
  if (other.hasAwardBestUserId) {
    [self setAwardBestUserId:other.awardBestUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBAskPsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBAskPsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addRequirement:[input readString]];
        break;
      }
      case 240: {
        [self setAwardCoinsPerUser:[input readInt32]];
        break;
      }
      case 248: {
        [self setAwardCoinsMaxTotal:[input readInt32]];
        break;
      }
      case 256: {
        [self setAwardIngotBestUser:[input readInt32]];
        break;
      }
      case 402: {
        [self setAwardBestUserId:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)requirement {
  return resultPbaskPs.requirementArray;
}
- (NSString*)requirementAtIndex:(NSUInteger)index {
  return [resultPbaskPs requirementAtIndex:index];
}
- (PBAskPsBuilder *)addRequirement:(NSString*)value {
  if (resultPbaskPs.requirementArray == nil) {
    resultPbaskPs.requirementArray = [[NSMutableArray alloc]init];
  }
  [resultPbaskPs.requirementArray addObject:value];
  return self;
}
- (PBAskPsBuilder *)setRequirementArray:(NSArray *)array {
  resultPbaskPs.requirementArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBAskPsBuilder *)clearRequirement {
  resultPbaskPs.requirementArray = nil;
  return self;
}
- (BOOL) hasAwardCoinsPerUser {
  return resultPbaskPs.hasAwardCoinsPerUser;
}
- (SInt32) awardCoinsPerUser {
  return resultPbaskPs.awardCoinsPerUser;
}
- (PBAskPsBuilder*) setAwardCoinsPerUser:(SInt32) value {
  resultPbaskPs.hasAwardCoinsPerUser = YES;
  resultPbaskPs.awardCoinsPerUser = value;
  return self;
}
- (PBAskPsBuilder*) clearAwardCoinsPerUser {
  resultPbaskPs.hasAwardCoinsPerUser = NO;
  resultPbaskPs.awardCoinsPerUser = 0;
  return self;
}
- (BOOL) hasAwardCoinsMaxTotal {
  return resultPbaskPs.hasAwardCoinsMaxTotal;
}
- (SInt32) awardCoinsMaxTotal {
  return resultPbaskPs.awardCoinsMaxTotal;
}
- (PBAskPsBuilder*) setAwardCoinsMaxTotal:(SInt32) value {
  resultPbaskPs.hasAwardCoinsMaxTotal = YES;
  resultPbaskPs.awardCoinsMaxTotal = value;
  return self;
}
- (PBAskPsBuilder*) clearAwardCoinsMaxTotal {
  resultPbaskPs.hasAwardCoinsMaxTotal = NO;
  resultPbaskPs.awardCoinsMaxTotal = 0;
  return self;
}
- (BOOL) hasAwardIngotBestUser {
  return resultPbaskPs.hasAwardIngotBestUser;
}
- (SInt32) awardIngotBestUser {
  return resultPbaskPs.awardIngotBestUser;
}
- (PBAskPsBuilder*) setAwardIngotBestUser:(SInt32) value {
  resultPbaskPs.hasAwardIngotBestUser = YES;
  resultPbaskPs.awardIngotBestUser = value;
  return self;
}
- (PBAskPsBuilder*) clearAwardIngotBestUser {
  resultPbaskPs.hasAwardIngotBestUser = NO;
  resultPbaskPs.awardIngotBestUser = 0;
  return self;
}
- (BOOL) hasAwardBestUserId {
  return resultPbaskPs.hasAwardBestUserId;
}
- (NSString*) awardBestUserId {
  return resultPbaskPs.awardBestUserId;
}
- (PBAskPsBuilder*) setAwardBestUserId:(NSString*) value {
  resultPbaskPs.hasAwardBestUserId = YES;
  resultPbaskPs.awardBestUserId = value;
  return self;
}
- (PBAskPsBuilder*) clearAwardBestUserId {
  resultPbaskPs.hasAwardBestUserId = NO;
  resultPbaskPs.awardBestUserId = @"";
  return self;
}
@end

@interface PBAskPsOpus ()
@property (strong) NSString* askPsId;
@end

@implementation PBAskPsOpus

- (BOOL) hasAskPsId {
  return !!hasAskPsId_;
}
- (void) setHasAskPsId:(BOOL) _value_ {
  hasAskPsId_ = !!_value_;
}
@synthesize askPsId;
- (instancetype) init {
  if ((self = [super init])) {
    self.askPsId = @"";
  }
  return self;
}
static PBAskPsOpus* defaultPBAskPsOpusInstance = nil;
+ (void) initialize {
  if (self == [PBAskPsOpus class]) {
    defaultPBAskPsOpusInstance = [[PBAskPsOpus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBAskPsOpusInstance;
}
- (instancetype) defaultInstance {
  return defaultPBAskPsOpusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAskPsId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAskPsId) {
    [output writeString:1 value:self.askPsId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAskPsId) {
    size_ += computeStringSize(1, self.askPsId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBAskPsOpus*) parseFromData:(NSData*) data {
  return (PBAskPsOpus*)[[[PBAskPsOpus builder] mergeFromData:data] build];
}
+ (PBAskPsOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAskPsOpus*)[[[PBAskPsOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBAskPsOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBAskPsOpus*)[[[PBAskPsOpus builder] mergeFromInputStream:input] build];
}
+ (PBAskPsOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAskPsOpus*)[[[PBAskPsOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAskPsOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBAskPsOpus*)[[[PBAskPsOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBAskPsOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAskPsOpus*)[[[PBAskPsOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAskPsOpusBuilder*) builder {
  return [[PBAskPsOpusBuilder alloc] init];
}
+ (PBAskPsOpusBuilder*) builderWithPrototype:(PBAskPsOpus*) prototype {
  return [[PBAskPsOpus builder] mergeFrom:prototype];
}
- (PBAskPsOpusBuilder*) builder {
  return [PBAskPsOpus builder];
}
- (PBAskPsOpusBuilder*) toBuilder {
  return [PBAskPsOpus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAskPsId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"askPsId", self.askPsId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBAskPsOpus class]]) {
    return NO;
  }
  PBAskPsOpus *otherMessage = other;
  return
      self.hasAskPsId == otherMessage.hasAskPsId &&
      (!self.hasAskPsId || [self.askPsId isEqual:otherMessage.askPsId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAskPsId) {
    hashCode = hashCode * 31 + [self.askPsId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBAskPsOpusBuilder()
@property (strong) PBAskPsOpus* resultPbaskPsOpus;
@end

@implementation PBAskPsOpusBuilder
@synthesize resultPbaskPsOpus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbaskPsOpus = [[PBAskPsOpus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbaskPsOpus;
}
- (PBAskPsOpusBuilder*) clear {
  self.resultPbaskPsOpus = [[PBAskPsOpus alloc] init];
  return self;
}
- (PBAskPsOpusBuilder*) clone {
  return [PBAskPsOpus builderWithPrototype:resultPbaskPsOpus];
}
- (PBAskPsOpus*) defaultInstance {
  return [PBAskPsOpus defaultInstance];
}
- (PBAskPsOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBAskPsOpus*) buildPartial {
  PBAskPsOpus* returnMe = resultPbaskPsOpus;
  self.resultPbaskPsOpus = nil;
  return returnMe;
}
- (PBAskPsOpusBuilder*) mergeFrom:(PBAskPsOpus*) other {
  if (other == [PBAskPsOpus defaultInstance]) {
    return self;
  }
  if (other.hasAskPsId) {
    [self setAskPsId:other.askPsId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBAskPsOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBAskPsOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAskPsId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAskPsId {
  return resultPbaskPsOpus.hasAskPsId;
}
- (NSString*) askPsId {
  return resultPbaskPsOpus.askPsId;
}
- (PBAskPsOpusBuilder*) setAskPsId:(NSString*) value {
  resultPbaskPsOpus.hasAskPsId = YES;
  resultPbaskPsOpus.askPsId = value;
  return self;
}
- (PBAskPsOpusBuilder*) clearAskPsId {
  resultPbaskPsOpus.hasAskPsId = NO;
  resultPbaskPsOpus.askPsId = @"";
  return self;
}
@end

@interface PBOpus ()
@property (strong) NSString* opusId;
@property PBOpusType type;
@property (strong) NSString* name;
@property (strong) NSString* desc;
@property (strong) NSString* image;
@property (strong) NSString* thumbImage;
@property (strong) NSString* dataUrl;
@property PBLanguage language;
@property PBOpusCategoryType category;
@property SInt32 createDate;
@property SInt32 status;
@property (strong) NSMutableArray * tagsArray;
@property SInt32 spendTime;
@property SInt32 deviceType;
@property (strong) NSString* deviceName;
@property (strong) NSString* appId;
@property (strong) PBGameUser* author;
@property (strong) PBGameUser* targetUser;
@property (strong) NSString* contestId;
@property (strong) NSMutableArray * feedTimesArray;
@property (strong) PBDrawOpus* draw;
@property (strong) PBSingOpus* sing;
@property (strong) PBAskPs* askPs;
@property (strong) PBAskPsOpus* askPsOpus;
@property (strong) NSString* localDataUrl;
@property (strong) NSString* localImageUrl;
@property (strong) NSString* localThumbImageUrl;
@property BOOL isRecovery;
@property PBOpusStoreType storeType;
@property (strong) PBLabelInfo* descLabelInfo;
@property (strong) PBSize* canvasSize;
@property (strong) PBOpusGuess* guessInfo;
@end

@implementation PBOpus

- (BOOL) hasOpusId {
  return !!hasOpusId_;
}
- (void) setHasOpusId:(BOOL) _value_ {
  hasOpusId_ = !!_value_;
}
@synthesize opusId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasImage {
  return !!hasImage_;
}
- (void) setHasImage:(BOOL) _value_ {
  hasImage_ = !!_value_;
}
@synthesize image;
- (BOOL) hasThumbImage {
  return !!hasThumbImage_;
}
- (void) setHasThumbImage:(BOOL) _value_ {
  hasThumbImage_ = !!_value_;
}
@synthesize thumbImage;
- (BOOL) hasDataUrl {
  return !!hasDataUrl_;
}
- (void) setHasDataUrl:(BOOL) _value_ {
  hasDataUrl_ = !!_value_;
}
@synthesize dataUrl;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) _value_ {
  hasCreateDate_ = !!_value_;
}
@synthesize createDate;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize tagsArray;
@dynamic tags;
- (BOOL) hasSpendTime {
  return !!hasSpendTime_;
}
- (void) setHasSpendTime:(BOOL) _value_ {
  hasSpendTime_ = !!_value_;
}
@synthesize spendTime;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) _value_ {
  hasDeviceName_ = !!_value_;
}
@synthesize deviceName;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) _value_ {
  hasAuthor_ = !!_value_;
}
@synthesize author;
- (BOOL) hasTargetUser {
  return !!hasTargetUser_;
}
- (void) setHasTargetUser:(BOOL) _value_ {
  hasTargetUser_ = !!_value_;
}
@synthesize targetUser;
- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) _value_ {
  hasContestId_ = !!_value_;
}
@synthesize contestId;
@synthesize feedTimesArray;
@dynamic feedTimes;
- (BOOL) hasDraw {
  return !!hasDraw_;
}
- (void) setHasDraw:(BOOL) _value_ {
  hasDraw_ = !!_value_;
}
@synthesize draw;
- (BOOL) hasSing {
  return !!hasSing_;
}
- (void) setHasSing:(BOOL) _value_ {
  hasSing_ = !!_value_;
}
@synthesize sing;
- (BOOL) hasAskPs {
  return !!hasAskPs_;
}
- (void) setHasAskPs:(BOOL) _value_ {
  hasAskPs_ = !!_value_;
}
@synthesize askPs;
- (BOOL) hasAskPsOpus {
  return !!hasAskPsOpus_;
}
- (void) setHasAskPsOpus:(BOOL) _value_ {
  hasAskPsOpus_ = !!_value_;
}
@synthesize askPsOpus;
- (BOOL) hasLocalDataUrl {
  return !!hasLocalDataUrl_;
}
- (void) setHasLocalDataUrl:(BOOL) _value_ {
  hasLocalDataUrl_ = !!_value_;
}
@synthesize localDataUrl;
- (BOOL) hasLocalImageUrl {
  return !!hasLocalImageUrl_;
}
- (void) setHasLocalImageUrl:(BOOL) _value_ {
  hasLocalImageUrl_ = !!_value_;
}
@synthesize localImageUrl;
- (BOOL) hasLocalThumbImageUrl {
  return !!hasLocalThumbImageUrl_;
}
- (void) setHasLocalThumbImageUrl:(BOOL) _value_ {
  hasLocalThumbImageUrl_ = !!_value_;
}
@synthesize localThumbImageUrl;
- (BOOL) hasIsRecovery {
  return !!hasIsRecovery_;
}
- (void) setHasIsRecovery:(BOOL) _value_ {
  hasIsRecovery_ = !!_value_;
}
- (BOOL) isRecovery {
  return !!isRecovery_;
}
- (void) setIsRecovery:(BOOL) _value_ {
  isRecovery_ = !!_value_;
}
- (BOOL) hasStoreType {
  return !!hasStoreType_;
}
- (void) setHasStoreType:(BOOL) _value_ {
  hasStoreType_ = !!_value_;
}
@synthesize storeType;
- (BOOL) hasDescLabelInfo {
  return !!hasDescLabelInfo_;
}
- (void) setHasDescLabelInfo:(BOOL) _value_ {
  hasDescLabelInfo_ = !!_value_;
}
@synthesize descLabelInfo;
- (BOOL) hasCanvasSize {
  return !!hasCanvasSize_;
}
- (void) setHasCanvasSize:(BOOL) _value_ {
  hasCanvasSize_ = !!_value_;
}
@synthesize canvasSize;
- (BOOL) hasGuessInfo {
  return !!hasGuessInfo_;
}
- (void) setHasGuessInfo:(BOOL) _value_ {
  hasGuessInfo_ = !!_value_;
}
@synthesize guessInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.opusId = @"";
    self.type = PBOpusTypeUnknown;
    self.name = @"";
    self.desc = @"";
    self.image = @"";
    self.thumbImage = @"";
    self.dataUrl = @"";
    self.language = PBLanguageChinese;
    self.category = PBOpusCategoryTypeDrawCategory;
    self.createDate = 0;
    self.status = 0;
    self.spendTime = 0;
    self.deviceType = 0;
    self.deviceName = @"";
    self.appId = @"";
    self.author = [PBGameUser defaultInstance];
    self.targetUser = [PBGameUser defaultInstance];
    self.contestId = @"";
    self.draw = [PBDrawOpus defaultInstance];
    self.sing = [PBSingOpus defaultInstance];
    self.askPs = [PBAskPs defaultInstance];
    self.askPsOpus = [PBAskPsOpus defaultInstance];
    self.localDataUrl = @"";
    self.localImageUrl = @"";
    self.localThumbImageUrl = @"";
    self.isRecovery = NO;
    self.storeType = PBOpusStoreTypeNormalOpus;
    self.descLabelInfo = [PBLabelInfo defaultInstance];
    self.canvasSize = [PBSize defaultInstance];
    self.guessInfo = [PBOpusGuess defaultInstance];
  }
  return self;
}
static PBOpus* defaultPBOpusInstance = nil;
+ (void) initialize {
  if (self == [PBOpus class]) {
    defaultPBOpusInstance = [[PBOpus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBOpusInstance;
}
- (instancetype) defaultInstance {
  return defaultPBOpusInstance;
}
- (NSArray *)tags {
  return tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (NSArray *)feedTimes {
  return feedTimesArray;
}
- (PBFeedTimes*)feedTimesAtIndex:(NSUInteger)index {
  return [feedTimesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasOpusId) {
    return NO;
  }
  if (self.hasAuthor) {
    if (!self.author.isInitialized) {
      return NO;
    }
  }
  if (self.hasTargetUser) {
    if (!self.targetUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitfeedTimes = YES;
   [self.feedTimes enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfeedTimes = NO;
      *stop = YES;
    }
  }];
  if (!isInitfeedTimes) return isInitfeedTimes;
  if (self.hasSing) {
    if (!self.sing.isInitialized) {
      return NO;
    }
  }
  if (self.hasAskPsOpus) {
    if (!self.askPsOpus.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOpusId) {
    [output writeString:1 value:self.opusId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:4 value:self.desc];
  }
  if (self.hasImage) {
    [output writeString:5 value:self.image];
  }
  if (self.hasThumbImage) {
    [output writeString:6 value:self.thumbImage];
  }
  if (self.hasDataUrl) {
    [output writeString:9 value:self.dataUrl];
  }
  if (self.hasLanguage) {
    [output writeEnum:10 value:self.language];
  }
  if (self.hasCategory) {
    [output writeEnum:11 value:self.category];
  }
  if (self.hasCreateDate) {
    [output writeInt32:15 value:self.createDate];
  }
  if (self.hasStatus) {
    [output writeInt32:20 value:self.status];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:21 value:element];
  }];
  if (self.hasSpendTime) {
    [output writeInt32:22 value:self.spendTime];
  }
  if (self.hasDeviceType) {
    [output writeInt32:25 value:self.deviceType];
  }
  if (self.hasDeviceName) {
    [output writeString:26 value:self.deviceName];
  }
  if (self.hasAppId) {
    [output writeString:28 value:self.appId];
  }
  if (self.hasAuthor) {
    [output writeMessage:35 value:self.author];
  }
  if (self.hasTargetUser) {
    [output writeMessage:41 value:self.targetUser];
  }
  if (self.hasContestId) {
    [output writeString:42 value:self.contestId];
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:45 value:element];
  }];
  if (self.hasDraw) {
    [output writeMessage:101 value:self.draw];
  }
  if (self.hasSing) {
    [output writeMessage:102 value:self.sing];
  }
  if (self.hasAskPs) {
    [output writeMessage:103 value:self.askPs];
  }
  if (self.hasAskPsOpus) {
    [output writeMessage:104 value:self.askPsOpus];
  }
  if (self.hasLocalDataUrl) {
    [output writeString:150 value:self.localDataUrl];
  }
  if (self.hasLocalImageUrl) {
    [output writeString:151 value:self.localImageUrl];
  }
  if (self.hasLocalThumbImageUrl) {
    [output writeString:152 value:self.localThumbImageUrl];
  }
  if (self.hasIsRecovery) {
    [output writeBool:153 value:self.isRecovery];
  }
  if (self.hasStoreType) {
    [output writeEnum:200 value:self.storeType];
  }
  if (self.hasDescLabelInfo) {
    [output writeMessage:201 value:self.descLabelInfo];
  }
  if (self.hasCanvasSize) {
    [output writeMessage:202 value:self.canvasSize];
  }
  if (self.hasGuessInfo) {
    [output writeMessage:250 value:self.guessInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOpusId) {
    size_ += computeStringSize(1, self.opusId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(4, self.desc);
  }
  if (self.hasImage) {
    size_ += computeStringSize(5, self.image);
  }
  if (self.hasThumbImage) {
    size_ += computeStringSize(6, self.thumbImage);
  }
  if (self.hasDataUrl) {
    size_ += computeStringSize(9, self.dataUrl);
  }
  if (self.hasLanguage) {
    size_ += computeEnumSize(10, self.language);
  }
  if (self.hasCategory) {
    size_ += computeEnumSize(11, self.category);
  }
  if (self.hasCreateDate) {
    size_ += computeInt32Size(15, self.createDate);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(20, self.status);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tagsArray.count;
    [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasSpendTime) {
    size_ += computeInt32Size(22, self.spendTime);
  }
  if (self.hasDeviceType) {
    size_ += computeInt32Size(25, self.deviceType);
  }
  if (self.hasDeviceName) {
    size_ += computeStringSize(26, self.deviceName);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(28, self.appId);
  }
  if (self.hasAuthor) {
    size_ += computeMessageSize(35, self.author);
  }
  if (self.hasTargetUser) {
    size_ += computeMessageSize(41, self.targetUser);
  }
  if (self.hasContestId) {
    size_ += computeStringSize(42, self.contestId);
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(45, element);
  }];
  if (self.hasDraw) {
    size_ += computeMessageSize(101, self.draw);
  }
  if (self.hasSing) {
    size_ += computeMessageSize(102, self.sing);
  }
  if (self.hasAskPs) {
    size_ += computeMessageSize(103, self.askPs);
  }
  if (self.hasAskPsOpus) {
    size_ += computeMessageSize(104, self.askPsOpus);
  }
  if (self.hasLocalDataUrl) {
    size_ += computeStringSize(150, self.localDataUrl);
  }
  if (self.hasLocalImageUrl) {
    size_ += computeStringSize(151, self.localImageUrl);
  }
  if (self.hasLocalThumbImageUrl) {
    size_ += computeStringSize(152, self.localThumbImageUrl);
  }
  if (self.hasIsRecovery) {
    size_ += computeBoolSize(153, self.isRecovery);
  }
  if (self.hasStoreType) {
    size_ += computeEnumSize(200, self.storeType);
  }
  if (self.hasDescLabelInfo) {
    size_ += computeMessageSize(201, self.descLabelInfo);
  }
  if (self.hasCanvasSize) {
    size_ += computeMessageSize(202, self.canvasSize);
  }
  if (self.hasGuessInfo) {
    size_ += computeMessageSize(250, self.guessInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBOpus*) parseFromData:(NSData*) data {
  return (PBOpus*)[[[PBOpus builder] mergeFromData:data] build];
}
+ (PBOpus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpus*)[[[PBOpus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBOpus*) parseFromInputStream:(NSInputStream*) input {
  return (PBOpus*)[[[PBOpus builder] mergeFromInputStream:input] build];
}
+ (PBOpus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpus*)[[[PBOpus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBOpus*)[[[PBOpus builder] mergeFromCodedInputStream:input] build];
}
+ (PBOpus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpus*)[[[PBOpus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusBuilder*) builder {
  return [[PBOpusBuilder alloc] init];
}
+ (PBOpusBuilder*) builderWithPrototype:(PBOpus*) prototype {
  return [[PBOpus builder] mergeFrom:prototype];
}
- (PBOpusBuilder*) builder {
  return [PBOpus builder];
}
- (PBOpusBuilder*) toBuilder {
  return [PBOpus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOpusId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opusId", self.opusId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBOpusType(self.type)];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"image", self.image];
  }
  if (self.hasThumbImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumbImage", self.thumbImage];
  }
  if (self.hasDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataUrl", self.dataUrl];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", NSStringFromPBLanguage(self.language)];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", NSStringFromPBOpusCategoryType(self.category)];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", [NSNumber numberWithInteger:self.createDate]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tags", obj];
  }];
  if (self.hasSpendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spendTime", [NSNumber numberWithInteger:self.spendTime]];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", [NSNumber numberWithInteger:self.deviceType]];
  }
  if (self.hasDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceName", self.deviceName];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasAuthor) {
    [output appendFormat:@"%@%@ {\n", indent, @"author"];
    [self.author writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTargetUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"targetUser"];
    [self.targetUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestId", self.contestId];
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedTimes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDraw) {
    [output appendFormat:@"%@%@ {\n", indent, @"draw"];
    [self.draw writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSing) {
    [output appendFormat:@"%@%@ {\n", indent, @"sing"];
    [self.sing writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAskPs) {
    [output appendFormat:@"%@%@ {\n", indent, @"askPs"];
    [self.askPs writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAskPsOpus) {
    [output appendFormat:@"%@%@ {\n", indent, @"askPsOpus"];
    [self.askPsOpus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocalDataUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localDataUrl", self.localDataUrl];
  }
  if (self.hasLocalImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localImageUrl", self.localImageUrl];
  }
  if (self.hasLocalThumbImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localThumbImageUrl", self.localThumbImageUrl];
  }
  if (self.hasIsRecovery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRecovery", [NSNumber numberWithBool:self.isRecovery]];
  }
  if (self.hasStoreType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"storeType", NSStringFromPBOpusStoreType(self.storeType)];
  }
  if (self.hasDescLabelInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"descLabelInfo"];
    [self.descLabelInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCanvasSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"canvasSize"];
    [self.canvasSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGuessInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"guessInfo"];
    [self.guessInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBOpus class]]) {
    return NO;
  }
  PBOpus *otherMessage = other;
  return
      self.hasOpusId == otherMessage.hasOpusId &&
      (!self.hasOpusId || [self.opusId isEqual:otherMessage.opusId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasImage == otherMessage.hasImage &&
      (!self.hasImage || [self.image isEqual:otherMessage.image]) &&
      self.hasThumbImage == otherMessage.hasThumbImage &&
      (!self.hasThumbImage || [self.thumbImage isEqual:otherMessage.thumbImage]) &&
      self.hasDataUrl == otherMessage.hasDataUrl &&
      (!self.hasDataUrl || [self.dataUrl isEqual:otherMessage.dataUrl]) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || self.language == otherMessage.language) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || self.category == otherMessage.category) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || self.createDate == otherMessage.createDate) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      self.hasSpendTime == otherMessage.hasSpendTime &&
      (!self.hasSpendTime || self.spendTime == otherMessage.spendTime) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasDeviceName == otherMessage.hasDeviceName &&
      (!self.hasDeviceName || [self.deviceName isEqual:otherMessage.deviceName]) &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasAuthor == otherMessage.hasAuthor &&
      (!self.hasAuthor || [self.author isEqual:otherMessage.author]) &&
      self.hasTargetUser == otherMessage.hasTargetUser &&
      (!self.hasTargetUser || [self.targetUser isEqual:otherMessage.targetUser]) &&
      self.hasContestId == otherMessage.hasContestId &&
      (!self.hasContestId || [self.contestId isEqual:otherMessage.contestId]) &&
      [self.feedTimesArray isEqualToArray:otherMessage.feedTimesArray] &&
      self.hasDraw == otherMessage.hasDraw &&
      (!self.hasDraw || [self.draw isEqual:otherMessage.draw]) &&
      self.hasSing == otherMessage.hasSing &&
      (!self.hasSing || [self.sing isEqual:otherMessage.sing]) &&
      self.hasAskPs == otherMessage.hasAskPs &&
      (!self.hasAskPs || [self.askPs isEqual:otherMessage.askPs]) &&
      self.hasAskPsOpus == otherMessage.hasAskPsOpus &&
      (!self.hasAskPsOpus || [self.askPsOpus isEqual:otherMessage.askPsOpus]) &&
      self.hasLocalDataUrl == otherMessage.hasLocalDataUrl &&
      (!self.hasLocalDataUrl || [self.localDataUrl isEqual:otherMessage.localDataUrl]) &&
      self.hasLocalImageUrl == otherMessage.hasLocalImageUrl &&
      (!self.hasLocalImageUrl || [self.localImageUrl isEqual:otherMessage.localImageUrl]) &&
      self.hasLocalThumbImageUrl == otherMessage.hasLocalThumbImageUrl &&
      (!self.hasLocalThumbImageUrl || [self.localThumbImageUrl isEqual:otherMessage.localThumbImageUrl]) &&
      self.hasIsRecovery == otherMessage.hasIsRecovery &&
      (!self.hasIsRecovery || self.isRecovery == otherMessage.isRecovery) &&
      self.hasStoreType == otherMessage.hasStoreType &&
      (!self.hasStoreType || self.storeType == otherMessage.storeType) &&
      self.hasDescLabelInfo == otherMessage.hasDescLabelInfo &&
      (!self.hasDescLabelInfo || [self.descLabelInfo isEqual:otherMessage.descLabelInfo]) &&
      self.hasCanvasSize == otherMessage.hasCanvasSize &&
      (!self.hasCanvasSize || [self.canvasSize isEqual:otherMessage.canvasSize]) &&
      self.hasGuessInfo == otherMessage.hasGuessInfo &&
      (!self.hasGuessInfo || [self.guessInfo isEqual:otherMessage.guessInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOpusId) {
    hashCode = hashCode * 31 + [self.opusId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasImage) {
    hashCode = hashCode * 31 + [self.image hash];
  }
  if (self.hasThumbImage) {
    hashCode = hashCode * 31 + [self.thumbImage hash];
  }
  if (self.hasDataUrl) {
    hashCode = hashCode * 31 + [self.dataUrl hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + self.language;
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + self.category;
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createDate] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSpendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spendTime] hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deviceType] hash];
  }
  if (self.hasDeviceName) {
    hashCode = hashCode * 31 + [self.deviceName hash];
  }
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasAuthor) {
    hashCode = hashCode * 31 + [self.author hash];
  }
  if (self.hasTargetUser) {
    hashCode = hashCode * 31 + [self.targetUser hash];
  }
  if (self.hasContestId) {
    hashCode = hashCode * 31 + [self.contestId hash];
  }
  [self.feedTimesArray enumerateObjectsUsingBlock:^(PBFeedTimes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDraw) {
    hashCode = hashCode * 31 + [self.draw hash];
  }
  if (self.hasSing) {
    hashCode = hashCode * 31 + [self.sing hash];
  }
  if (self.hasAskPs) {
    hashCode = hashCode * 31 + [self.askPs hash];
  }
  if (self.hasAskPsOpus) {
    hashCode = hashCode * 31 + [self.askPsOpus hash];
  }
  if (self.hasLocalDataUrl) {
    hashCode = hashCode * 31 + [self.localDataUrl hash];
  }
  if (self.hasLocalImageUrl) {
    hashCode = hashCode * 31 + [self.localImageUrl hash];
  }
  if (self.hasLocalThumbImageUrl) {
    hashCode = hashCode * 31 + [self.localThumbImageUrl hash];
  }
  if (self.hasIsRecovery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isRecovery] hash];
  }
  if (self.hasStoreType) {
    hashCode = hashCode * 31 + self.storeType;
  }
  if (self.hasDescLabelInfo) {
    hashCode = hashCode * 31 + [self.descLabelInfo hash];
  }
  if (self.hasCanvasSize) {
    hashCode = hashCode * 31 + [self.canvasSize hash];
  }
  if (self.hasGuessInfo) {
    hashCode = hashCode * 31 + [self.guessInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBOpusBuilder()
@property (strong) PBOpus* resultPbopus;
@end

@implementation PBOpusBuilder
@synthesize resultPbopus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbopus = [[PBOpus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbopus;
}
- (PBOpusBuilder*) clear {
  self.resultPbopus = [[PBOpus alloc] init];
  return self;
}
- (PBOpusBuilder*) clone {
  return [PBOpus builderWithPrototype:resultPbopus];
}
- (PBOpus*) defaultInstance {
  return [PBOpus defaultInstance];
}
- (PBOpus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBOpus*) buildPartial {
  PBOpus* returnMe = resultPbopus;
  self.resultPbopus = nil;
  return returnMe;
}
- (PBOpusBuilder*) mergeFrom:(PBOpus*) other {
  if (other == [PBOpus defaultInstance]) {
    return self;
  }
  if (other.hasOpusId) {
    [self setOpusId:other.opusId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasImage) {
    [self setImage:other.image];
  }
  if (other.hasThumbImage) {
    [self setThumbImage:other.thumbImage];
  }
  if (other.hasDataUrl) {
    [self setDataUrl:other.dataUrl];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.tagsArray.count > 0) {
    if (resultPbopus.tagsArray == nil) {
      resultPbopus.tagsArray = [[NSMutableArray alloc] initWithArray:other.tagsArray];
    } else {
      [resultPbopus.tagsArray addObjectsFromArray:other.tagsArray];
    }
  }
  if (other.hasSpendTime) {
    [self setSpendTime:other.spendTime];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasAuthor) {
    [self mergeAuthor:other.author];
  }
  if (other.hasTargetUser) {
    [self mergeTargetUser:other.targetUser];
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  if (other.feedTimesArray.count > 0) {
    if (resultPbopus.feedTimesArray == nil) {
      resultPbopus.feedTimesArray = [[NSMutableArray alloc] initWithArray:other.feedTimesArray];
    } else {
      [resultPbopus.feedTimesArray addObjectsFromArray:other.feedTimesArray];
    }
  }
  if (other.hasDraw) {
    [self mergeDraw:other.draw];
  }
  if (other.hasSing) {
    [self mergeSing:other.sing];
  }
  if (other.hasAskPs) {
    [self mergeAskPs:other.askPs];
  }
  if (other.hasAskPsOpus) {
    [self mergeAskPsOpus:other.askPsOpus];
  }
  if (other.hasLocalDataUrl) {
    [self setLocalDataUrl:other.localDataUrl];
  }
  if (other.hasLocalImageUrl) {
    [self setLocalImageUrl:other.localImageUrl];
  }
  if (other.hasLocalThumbImageUrl) {
    [self setLocalThumbImageUrl:other.localThumbImageUrl];
  }
  if (other.hasIsRecovery) {
    [self setIsRecovery:other.isRecovery];
  }
  if (other.hasStoreType) {
    [self setStoreType:other.storeType];
  }
  if (other.hasDescLabelInfo) {
    [self mergeDescLabelInfo:other.descLabelInfo];
  }
  if (other.hasCanvasSize) {
    [self mergeCanvasSize:other.canvasSize];
  }
  if (other.hasGuessInfo) {
    [self mergeGuessInfo:other.guessInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBOpusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setOpusId:[input readString]];
        break;
      }
      case 16: {
        PBOpusType value = (PBOpusType)[input readEnum];
        if (PBOpusTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setDesc:[input readString]];
        break;
      }
      case 42: {
        [self setImage:[input readString]];
        break;
      }
      case 50: {
        [self setThumbImage:[input readString]];
        break;
      }
      case 74: {
        [self setDataUrl:[input readString]];
        break;
      }
      case 80: {
        PBLanguage value = (PBLanguage)[input readEnum];
        if (PBLanguageIsValidValue(value)) {
          [self setLanguage:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        PBOpusCategoryType value = (PBOpusCategoryType)[input readEnum];
        if (PBOpusCategoryTypeIsValidValue(value)) {
          [self setCategory:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
      case 120: {
        [self setCreateDate:[input readInt32]];
        break;
      }
      case 160: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 170: {
        [self addTags:[input readString]];
        break;
      }
      case 176: {
        [self setSpendTime:[input readInt32]];
        break;
      }
      case 200: {
        [self setDeviceType:[input readInt32]];
        break;
      }
      case 210: {
        [self setDeviceName:[input readString]];
        break;
      }
      case 226: {
        [self setAppId:[input readString]];
        break;
      }
      case 282: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasAuthor) {
          [subBuilder mergeFrom:self.author];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthor:[subBuilder buildPartial]];
        break;
      }
      case 330: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasTargetUser) {
          [subBuilder mergeFrom:self.targetUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTargetUser:[subBuilder buildPartial]];
        break;
      }
      case 338: {
        [self setContestId:[input readString]];
        break;
      }
      case 362: {
        PBFeedTimesBuilder* subBuilder = [PBFeedTimes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeedTimes:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        PBDrawOpusBuilder* subBuilder = [PBDrawOpus builder];
        if (self.hasDraw) {
          [subBuilder mergeFrom:self.draw];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDraw:[subBuilder buildPartial]];
        break;
      }
      case 818: {
        PBSingOpusBuilder* subBuilder = [PBSingOpus builder];
        if (self.hasSing) {
          [subBuilder mergeFrom:self.sing];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSing:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        PBAskPsBuilder* subBuilder = [PBAskPs builder];
        if (self.hasAskPs) {
          [subBuilder mergeFrom:self.askPs];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAskPs:[subBuilder buildPartial]];
        break;
      }
      case 834: {
        PBAskPsOpusBuilder* subBuilder = [PBAskPsOpus builder];
        if (self.hasAskPsOpus) {
          [subBuilder mergeFrom:self.askPsOpus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAskPsOpus:[subBuilder buildPartial]];
        break;
      }
      case 1202: {
        [self setLocalDataUrl:[input readString]];
        break;
      }
      case 1210: {
        [self setLocalImageUrl:[input readString]];
        break;
      }
      case 1218: {
        [self setLocalThumbImageUrl:[input readString]];
        break;
      }
      case 1224: {
        [self setIsRecovery:[input readBool]];
        break;
      }
      case 1600: {
        PBOpusStoreType value = (PBOpusStoreType)[input readEnum];
        if (PBOpusStoreTypeIsValidValue(value)) {
          [self setStoreType:value];
        } else {
          [unknownFields mergeVarintField:200 value:value];
        }
        break;
      }
      case 1610: {
        PBLabelInfoBuilder* subBuilder = [PBLabelInfo builder];
        if (self.hasDescLabelInfo) {
          [subBuilder mergeFrom:self.descLabelInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDescLabelInfo:[subBuilder buildPartial]];
        break;
      }
      case 1618: {
        PBSizeBuilder* subBuilder = [PBSize builder];
        if (self.hasCanvasSize) {
          [subBuilder mergeFrom:self.canvasSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCanvasSize:[subBuilder buildPartial]];
        break;
      }
      case 2002: {
        PBOpusGuessBuilder* subBuilder = [PBOpusGuess builder];
        if (self.hasGuessInfo) {
          [subBuilder mergeFrom:self.guessInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGuessInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOpusId {
  return resultPbopus.hasOpusId;
}
- (NSString*) opusId {
  return resultPbopus.opusId;
}
- (PBOpusBuilder*) setOpusId:(NSString*) value {
  resultPbopus.hasOpusId = YES;
  resultPbopus.opusId = value;
  return self;
}
- (PBOpusBuilder*) clearOpusId {
  resultPbopus.hasOpusId = NO;
  resultPbopus.opusId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbopus.hasType;
}
- (PBOpusType) type {
  return resultPbopus.type;
}
- (PBOpusBuilder*) setType:(PBOpusType) value {
  resultPbopus.hasType = YES;
  resultPbopus.type = value;
  return self;
}
- (PBOpusBuilder*) clearType {
  resultPbopus.hasType = NO;
  resultPbopus.type = PBOpusTypeUnknown;
  return self;
}
- (BOOL) hasName {
  return resultPbopus.hasName;
}
- (NSString*) name {
  return resultPbopus.name;
}
- (PBOpusBuilder*) setName:(NSString*) value {
  resultPbopus.hasName = YES;
  resultPbopus.name = value;
  return self;
}
- (PBOpusBuilder*) clearName {
  resultPbopus.hasName = NO;
  resultPbopus.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultPbopus.hasDesc;
}
- (NSString*) desc {
  return resultPbopus.desc;
}
- (PBOpusBuilder*) setDesc:(NSString*) value {
  resultPbopus.hasDesc = YES;
  resultPbopus.desc = value;
  return self;
}
- (PBOpusBuilder*) clearDesc {
  resultPbopus.hasDesc = NO;
  resultPbopus.desc = @"";
  return self;
}
- (BOOL) hasImage {
  return resultPbopus.hasImage;
}
- (NSString*) image {
  return resultPbopus.image;
}
- (PBOpusBuilder*) setImage:(NSString*) value {
  resultPbopus.hasImage = YES;
  resultPbopus.image = value;
  return self;
}
- (PBOpusBuilder*) clearImage {
  resultPbopus.hasImage = NO;
  resultPbopus.image = @"";
  return self;
}
- (BOOL) hasThumbImage {
  return resultPbopus.hasThumbImage;
}
- (NSString*) thumbImage {
  return resultPbopus.thumbImage;
}
- (PBOpusBuilder*) setThumbImage:(NSString*) value {
  resultPbopus.hasThumbImage = YES;
  resultPbopus.thumbImage = value;
  return self;
}
- (PBOpusBuilder*) clearThumbImage {
  resultPbopus.hasThumbImage = NO;
  resultPbopus.thumbImage = @"";
  return self;
}
- (BOOL) hasDataUrl {
  return resultPbopus.hasDataUrl;
}
- (NSString*) dataUrl {
  return resultPbopus.dataUrl;
}
- (PBOpusBuilder*) setDataUrl:(NSString*) value {
  resultPbopus.hasDataUrl = YES;
  resultPbopus.dataUrl = value;
  return self;
}
- (PBOpusBuilder*) clearDataUrl {
  resultPbopus.hasDataUrl = NO;
  resultPbopus.dataUrl = @"";
  return self;
}
- (BOOL) hasLanguage {
  return resultPbopus.hasLanguage;
}
- (PBLanguage) language {
  return resultPbopus.language;
}
- (PBOpusBuilder*) setLanguage:(PBLanguage) value {
  resultPbopus.hasLanguage = YES;
  resultPbopus.language = value;
  return self;
}
- (PBOpusBuilder*) clearLanguage {
  resultPbopus.hasLanguage = NO;
  resultPbopus.language = PBLanguageChinese;
  return self;
}
- (BOOL) hasCategory {
  return resultPbopus.hasCategory;
}
- (PBOpusCategoryType) category {
  return resultPbopus.category;
}
- (PBOpusBuilder*) setCategory:(PBOpusCategoryType) value {
  resultPbopus.hasCategory = YES;
  resultPbopus.category = value;
  return self;
}
- (PBOpusBuilder*) clearCategory {
  resultPbopus.hasCategory = NO;
  resultPbopus.category = PBOpusCategoryTypeDrawCategory;
  return self;
}
- (BOOL) hasCreateDate {
  return resultPbopus.hasCreateDate;
}
- (SInt32) createDate {
  return resultPbopus.createDate;
}
- (PBOpusBuilder*) setCreateDate:(SInt32) value {
  resultPbopus.hasCreateDate = YES;
  resultPbopus.createDate = value;
  return self;
}
- (PBOpusBuilder*) clearCreateDate {
  resultPbopus.hasCreateDate = NO;
  resultPbopus.createDate = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultPbopus.hasStatus;
}
- (SInt32) status {
  return resultPbopus.status;
}
- (PBOpusBuilder*) setStatus:(SInt32) value {
  resultPbopus.hasStatus = YES;
  resultPbopus.status = value;
  return self;
}
- (PBOpusBuilder*) clearStatus {
  resultPbopus.hasStatus = NO;
  resultPbopus.status = 0;
  return self;
}
- (NSMutableArray *)tags {
  return resultPbopus.tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [resultPbopus tagsAtIndex:index];
}
- (PBOpusBuilder *)addTags:(NSString*)value {
  if (resultPbopus.tagsArray == nil) {
    resultPbopus.tagsArray = [[NSMutableArray alloc]init];
  }
  [resultPbopus.tagsArray addObject:value];
  return self;
}
- (PBOpusBuilder *)setTagsArray:(NSArray *)array {
  resultPbopus.tagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBOpusBuilder *)clearTags {
  resultPbopus.tagsArray = nil;
  return self;
}
- (BOOL) hasSpendTime {
  return resultPbopus.hasSpendTime;
}
- (SInt32) spendTime {
  return resultPbopus.spendTime;
}
- (PBOpusBuilder*) setSpendTime:(SInt32) value {
  resultPbopus.hasSpendTime = YES;
  resultPbopus.spendTime = value;
  return self;
}
- (PBOpusBuilder*) clearSpendTime {
  resultPbopus.hasSpendTime = NO;
  resultPbopus.spendTime = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return resultPbopus.hasDeviceType;
}
- (SInt32) deviceType {
  return resultPbopus.deviceType;
}
- (PBOpusBuilder*) setDeviceType:(SInt32) value {
  resultPbopus.hasDeviceType = YES;
  resultPbopus.deviceType = value;
  return self;
}
- (PBOpusBuilder*) clearDeviceType {
  resultPbopus.hasDeviceType = NO;
  resultPbopus.deviceType = 0;
  return self;
}
- (BOOL) hasDeviceName {
  return resultPbopus.hasDeviceName;
}
- (NSString*) deviceName {
  return resultPbopus.deviceName;
}
- (PBOpusBuilder*) setDeviceName:(NSString*) value {
  resultPbopus.hasDeviceName = YES;
  resultPbopus.deviceName = value;
  return self;
}
- (PBOpusBuilder*) clearDeviceName {
  resultPbopus.hasDeviceName = NO;
  resultPbopus.deviceName = @"";
  return self;
}
- (BOOL) hasAppId {
  return resultPbopus.hasAppId;
}
- (NSString*) appId {
  return resultPbopus.appId;
}
- (PBOpusBuilder*) setAppId:(NSString*) value {
  resultPbopus.hasAppId = YES;
  resultPbopus.appId = value;
  return self;
}
- (PBOpusBuilder*) clearAppId {
  resultPbopus.hasAppId = NO;
  resultPbopus.appId = @"";
  return self;
}
- (BOOL) hasAuthor {
  return resultPbopus.hasAuthor;
}
- (PBGameUser*) author {
  return resultPbopus.author;
}
- (PBOpusBuilder*) setAuthor:(PBGameUser*) value {
  resultPbopus.hasAuthor = YES;
  resultPbopus.author = value;
  return self;
}
- (PBOpusBuilder*) setAuthorBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setAuthor:[builderForValue build]];
}
- (PBOpusBuilder*) mergeAuthor:(PBGameUser*) value {
  if (resultPbopus.hasAuthor &&
      resultPbopus.author != [PBGameUser defaultInstance]) {
    resultPbopus.author =
      [[[PBGameUser builderWithPrototype:resultPbopus.author] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.author = value;
  }
  resultPbopus.hasAuthor = YES;
  return self;
}
- (PBOpusBuilder*) clearAuthor {
  resultPbopus.hasAuthor = NO;
  resultPbopus.author = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasTargetUser {
  return resultPbopus.hasTargetUser;
}
- (PBGameUser*) targetUser {
  return resultPbopus.targetUser;
}
- (PBOpusBuilder*) setTargetUser:(PBGameUser*) value {
  resultPbopus.hasTargetUser = YES;
  resultPbopus.targetUser = value;
  return self;
}
- (PBOpusBuilder*) setTargetUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setTargetUser:[builderForValue build]];
}
- (PBOpusBuilder*) mergeTargetUser:(PBGameUser*) value {
  if (resultPbopus.hasTargetUser &&
      resultPbopus.targetUser != [PBGameUser defaultInstance]) {
    resultPbopus.targetUser =
      [[[PBGameUser builderWithPrototype:resultPbopus.targetUser] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.targetUser = value;
  }
  resultPbopus.hasTargetUser = YES;
  return self;
}
- (PBOpusBuilder*) clearTargetUser {
  resultPbopus.hasTargetUser = NO;
  resultPbopus.targetUser = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasContestId {
  return resultPbopus.hasContestId;
}
- (NSString*) contestId {
  return resultPbopus.contestId;
}
- (PBOpusBuilder*) setContestId:(NSString*) value {
  resultPbopus.hasContestId = YES;
  resultPbopus.contestId = value;
  return self;
}
- (PBOpusBuilder*) clearContestId {
  resultPbopus.hasContestId = NO;
  resultPbopus.contestId = @"";
  return self;
}
- (NSMutableArray *)feedTimes {
  return resultPbopus.feedTimesArray;
}
- (PBFeedTimes*)feedTimesAtIndex:(NSUInteger)index {
  return [resultPbopus feedTimesAtIndex:index];
}
- (PBOpusBuilder *)addFeedTimes:(PBFeedTimes*)value {
  if (resultPbopus.feedTimesArray == nil) {
    resultPbopus.feedTimesArray = [[NSMutableArray alloc]init];
  }
  [resultPbopus.feedTimesArray addObject:value];
  return self;
}
- (PBOpusBuilder *)setFeedTimesArray:(NSArray *)array {
  resultPbopus.feedTimesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBOpusBuilder *)clearFeedTimes {
  resultPbopus.feedTimesArray = nil;
  return self;
}
- (BOOL) hasDraw {
  return resultPbopus.hasDraw;
}
- (PBDrawOpus*) draw {
  return resultPbopus.draw;
}
- (PBOpusBuilder*) setDraw:(PBDrawOpus*) value {
  resultPbopus.hasDraw = YES;
  resultPbopus.draw = value;
  return self;
}
- (PBOpusBuilder*) setDrawBuilder:(PBDrawOpusBuilder*) builderForValue {
  return [self setDraw:[builderForValue build]];
}
- (PBOpusBuilder*) mergeDraw:(PBDrawOpus*) value {
  if (resultPbopus.hasDraw &&
      resultPbopus.draw != [PBDrawOpus defaultInstance]) {
    resultPbopus.draw =
      [[[PBDrawOpus builderWithPrototype:resultPbopus.draw] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.draw = value;
  }
  resultPbopus.hasDraw = YES;
  return self;
}
- (PBOpusBuilder*) clearDraw {
  resultPbopus.hasDraw = NO;
  resultPbopus.draw = [PBDrawOpus defaultInstance];
  return self;
}
- (BOOL) hasSing {
  return resultPbopus.hasSing;
}
- (PBSingOpus*) sing {
  return resultPbopus.sing;
}
- (PBOpusBuilder*) setSing:(PBSingOpus*) value {
  resultPbopus.hasSing = YES;
  resultPbopus.sing = value;
  return self;
}
- (PBOpusBuilder*) setSingBuilder:(PBSingOpusBuilder*) builderForValue {
  return [self setSing:[builderForValue build]];
}
- (PBOpusBuilder*) mergeSing:(PBSingOpus*) value {
  if (resultPbopus.hasSing &&
      resultPbopus.sing != [PBSingOpus defaultInstance]) {
    resultPbopus.sing =
      [[[PBSingOpus builderWithPrototype:resultPbopus.sing] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.sing = value;
  }
  resultPbopus.hasSing = YES;
  return self;
}
- (PBOpusBuilder*) clearSing {
  resultPbopus.hasSing = NO;
  resultPbopus.sing = [PBSingOpus defaultInstance];
  return self;
}
- (BOOL) hasAskPs {
  return resultPbopus.hasAskPs;
}
- (PBAskPs*) askPs {
  return resultPbopus.askPs;
}
- (PBOpusBuilder*) setAskPs:(PBAskPs*) value {
  resultPbopus.hasAskPs = YES;
  resultPbopus.askPs = value;
  return self;
}
- (PBOpusBuilder*) setAskPsBuilder:(PBAskPsBuilder*) builderForValue {
  return [self setAskPs:[builderForValue build]];
}
- (PBOpusBuilder*) mergeAskPs:(PBAskPs*) value {
  if (resultPbopus.hasAskPs &&
      resultPbopus.askPs != [PBAskPs defaultInstance]) {
    resultPbopus.askPs =
      [[[PBAskPs builderWithPrototype:resultPbopus.askPs] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.askPs = value;
  }
  resultPbopus.hasAskPs = YES;
  return self;
}
- (PBOpusBuilder*) clearAskPs {
  resultPbopus.hasAskPs = NO;
  resultPbopus.askPs = [PBAskPs defaultInstance];
  return self;
}
- (BOOL) hasAskPsOpus {
  return resultPbopus.hasAskPsOpus;
}
- (PBAskPsOpus*) askPsOpus {
  return resultPbopus.askPsOpus;
}
- (PBOpusBuilder*) setAskPsOpus:(PBAskPsOpus*) value {
  resultPbopus.hasAskPsOpus = YES;
  resultPbopus.askPsOpus = value;
  return self;
}
- (PBOpusBuilder*) setAskPsOpusBuilder:(PBAskPsOpusBuilder*) builderForValue {
  return [self setAskPsOpus:[builderForValue build]];
}
- (PBOpusBuilder*) mergeAskPsOpus:(PBAskPsOpus*) value {
  if (resultPbopus.hasAskPsOpus &&
      resultPbopus.askPsOpus != [PBAskPsOpus defaultInstance]) {
    resultPbopus.askPsOpus =
      [[[PBAskPsOpus builderWithPrototype:resultPbopus.askPsOpus] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.askPsOpus = value;
  }
  resultPbopus.hasAskPsOpus = YES;
  return self;
}
- (PBOpusBuilder*) clearAskPsOpus {
  resultPbopus.hasAskPsOpus = NO;
  resultPbopus.askPsOpus = [PBAskPsOpus defaultInstance];
  return self;
}
- (BOOL) hasLocalDataUrl {
  return resultPbopus.hasLocalDataUrl;
}
- (NSString*) localDataUrl {
  return resultPbopus.localDataUrl;
}
- (PBOpusBuilder*) setLocalDataUrl:(NSString*) value {
  resultPbopus.hasLocalDataUrl = YES;
  resultPbopus.localDataUrl = value;
  return self;
}
- (PBOpusBuilder*) clearLocalDataUrl {
  resultPbopus.hasLocalDataUrl = NO;
  resultPbopus.localDataUrl = @"";
  return self;
}
- (BOOL) hasLocalImageUrl {
  return resultPbopus.hasLocalImageUrl;
}
- (NSString*) localImageUrl {
  return resultPbopus.localImageUrl;
}
- (PBOpusBuilder*) setLocalImageUrl:(NSString*) value {
  resultPbopus.hasLocalImageUrl = YES;
  resultPbopus.localImageUrl = value;
  return self;
}
- (PBOpusBuilder*) clearLocalImageUrl {
  resultPbopus.hasLocalImageUrl = NO;
  resultPbopus.localImageUrl = @"";
  return self;
}
- (BOOL) hasLocalThumbImageUrl {
  return resultPbopus.hasLocalThumbImageUrl;
}
- (NSString*) localThumbImageUrl {
  return resultPbopus.localThumbImageUrl;
}
- (PBOpusBuilder*) setLocalThumbImageUrl:(NSString*) value {
  resultPbopus.hasLocalThumbImageUrl = YES;
  resultPbopus.localThumbImageUrl = value;
  return self;
}
- (PBOpusBuilder*) clearLocalThumbImageUrl {
  resultPbopus.hasLocalThumbImageUrl = NO;
  resultPbopus.localThumbImageUrl = @"";
  return self;
}
- (BOOL) hasIsRecovery {
  return resultPbopus.hasIsRecovery;
}
- (BOOL) isRecovery {
  return resultPbopus.isRecovery;
}
- (PBOpusBuilder*) setIsRecovery:(BOOL) value {
  resultPbopus.hasIsRecovery = YES;
  resultPbopus.isRecovery = value;
  return self;
}
- (PBOpusBuilder*) clearIsRecovery {
  resultPbopus.hasIsRecovery = NO;
  resultPbopus.isRecovery = NO;
  return self;
}
- (BOOL) hasStoreType {
  return resultPbopus.hasStoreType;
}
- (PBOpusStoreType) storeType {
  return resultPbopus.storeType;
}
- (PBOpusBuilder*) setStoreType:(PBOpusStoreType) value {
  resultPbopus.hasStoreType = YES;
  resultPbopus.storeType = value;
  return self;
}
- (PBOpusBuilder*) clearStoreType {
  resultPbopus.hasStoreType = NO;
  resultPbopus.storeType = PBOpusStoreTypeNormalOpus;
  return self;
}
- (BOOL) hasDescLabelInfo {
  return resultPbopus.hasDescLabelInfo;
}
- (PBLabelInfo*) descLabelInfo {
  return resultPbopus.descLabelInfo;
}
- (PBOpusBuilder*) setDescLabelInfo:(PBLabelInfo*) value {
  resultPbopus.hasDescLabelInfo = YES;
  resultPbopus.descLabelInfo = value;
  return self;
}
- (PBOpusBuilder*) setDescLabelInfoBuilder:(PBLabelInfoBuilder*) builderForValue {
  return [self setDescLabelInfo:[builderForValue build]];
}
- (PBOpusBuilder*) mergeDescLabelInfo:(PBLabelInfo*) value {
  if (resultPbopus.hasDescLabelInfo &&
      resultPbopus.descLabelInfo != [PBLabelInfo defaultInstance]) {
    resultPbopus.descLabelInfo =
      [[[PBLabelInfo builderWithPrototype:resultPbopus.descLabelInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.descLabelInfo = value;
  }
  resultPbopus.hasDescLabelInfo = YES;
  return self;
}
- (PBOpusBuilder*) clearDescLabelInfo {
  resultPbopus.hasDescLabelInfo = NO;
  resultPbopus.descLabelInfo = [PBLabelInfo defaultInstance];
  return self;
}
- (BOOL) hasCanvasSize {
  return resultPbopus.hasCanvasSize;
}
- (PBSize*) canvasSize {
  return resultPbopus.canvasSize;
}
- (PBOpusBuilder*) setCanvasSize:(PBSize*) value {
  resultPbopus.hasCanvasSize = YES;
  resultPbopus.canvasSize = value;
  return self;
}
- (PBOpusBuilder*) setCanvasSizeBuilder:(PBSizeBuilder*) builderForValue {
  return [self setCanvasSize:[builderForValue build]];
}
- (PBOpusBuilder*) mergeCanvasSize:(PBSize*) value {
  if (resultPbopus.hasCanvasSize &&
      resultPbopus.canvasSize != [PBSize defaultInstance]) {
    resultPbopus.canvasSize =
      [[[PBSize builderWithPrototype:resultPbopus.canvasSize] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.canvasSize = value;
  }
  resultPbopus.hasCanvasSize = YES;
  return self;
}
- (PBOpusBuilder*) clearCanvasSize {
  resultPbopus.hasCanvasSize = NO;
  resultPbopus.canvasSize = [PBSize defaultInstance];
  return self;
}
- (BOOL) hasGuessInfo {
  return resultPbopus.hasGuessInfo;
}
- (PBOpusGuess*) guessInfo {
  return resultPbopus.guessInfo;
}
- (PBOpusBuilder*) setGuessInfo:(PBOpusGuess*) value {
  resultPbopus.hasGuessInfo = YES;
  resultPbopus.guessInfo = value;
  return self;
}
- (PBOpusBuilder*) setGuessInfoBuilder:(PBOpusGuessBuilder*) builderForValue {
  return [self setGuessInfo:[builderForValue build]];
}
- (PBOpusBuilder*) mergeGuessInfo:(PBOpusGuess*) value {
  if (resultPbopus.hasGuessInfo &&
      resultPbopus.guessInfo != [PBOpusGuess defaultInstance]) {
    resultPbopus.guessInfo =
      [[[PBOpusGuess builderWithPrototype:resultPbopus.guessInfo] mergeFrom:value] buildPartial];
  } else {
    resultPbopus.guessInfo = value;
  }
  resultPbopus.hasGuessInfo = YES;
  return self;
}
- (PBOpusBuilder*) clearGuessInfo {
  resultPbopus.hasGuessInfo = NO;
  resultPbopus.guessInfo = [PBOpusGuess defaultInstance];
  return self;
}
@end

@interface PBOpusList ()
@property (strong) NSMutableArray * opusesArray;
@end

@implementation PBOpusList

@synthesize opusesArray;
@dynamic opuses;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBOpusList* defaultPBOpusListInstance = nil;
+ (void) initialize {
  if (self == [PBOpusList class]) {
    defaultPBOpusListInstance = [[PBOpusList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBOpusListInstance;
}
- (instancetype) defaultInstance {
  return defaultPBOpusListInstance;
}
- (NSArray *)opuses {
  return opusesArray;
}
- (PBOpus*)opusesAtIndex:(NSUInteger)index {
  return [opusesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitopuses = YES;
   [self.opuses enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitopuses = NO;
      *stop = YES;
    }
  }];
  if (!isInitopuses) return isInitopuses;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.opusesArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.opusesArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBOpusList*) parseFromData:(NSData*) data {
  return (PBOpusList*)[[[PBOpusList builder] mergeFromData:data] build];
}
+ (PBOpusList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusList*)[[[PBOpusList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBOpusList*) parseFromInputStream:(NSInputStream*) input {
  return (PBOpusList*)[[[PBOpusList builder] mergeFromInputStream:input] build];
}
+ (PBOpusList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusList*)[[[PBOpusList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBOpusList*)[[[PBOpusList builder] mergeFromCodedInputStream:input] build];
}
+ (PBOpusList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusList*)[[[PBOpusList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusListBuilder*) builder {
  return [[PBOpusListBuilder alloc] init];
}
+ (PBOpusListBuilder*) builderWithPrototype:(PBOpusList*) prototype {
  return [[PBOpusList builder] mergeFrom:prototype];
}
- (PBOpusListBuilder*) builder {
  return [PBOpusList builder];
}
- (PBOpusListBuilder*) toBuilder {
  return [PBOpusList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.opusesArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"opuses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBOpusList class]]) {
    return NO;
  }
  PBOpusList *otherMessage = other;
  return
      [self.opusesArray isEqualToArray:otherMessage.opusesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.opusesArray enumerateObjectsUsingBlock:^(PBOpus *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBOpusListBuilder()
@property (strong) PBOpusList* resultPbopusList;
@end

@implementation PBOpusListBuilder
@synthesize resultPbopusList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbopusList = [[PBOpusList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbopusList;
}
- (PBOpusListBuilder*) clear {
  self.resultPbopusList = [[PBOpusList alloc] init];
  return self;
}
- (PBOpusListBuilder*) clone {
  return [PBOpusList builderWithPrototype:resultPbopusList];
}
- (PBOpusList*) defaultInstance {
  return [PBOpusList defaultInstance];
}
- (PBOpusList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBOpusList*) buildPartial {
  PBOpusList* returnMe = resultPbopusList;
  self.resultPbopusList = nil;
  return returnMe;
}
- (PBOpusListBuilder*) mergeFrom:(PBOpusList*) other {
  if (other == [PBOpusList defaultInstance]) {
    return self;
  }
  if (other.opusesArray.count > 0) {
    if (resultPbopusList.opusesArray == nil) {
      resultPbopusList.opusesArray = [[NSMutableArray alloc] initWithArray:other.opusesArray];
    } else {
      [resultPbopusList.opusesArray addObjectsFromArray:other.opusesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBOpusListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBOpusListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBOpusBuilder* subBuilder = [PBOpus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOpuses:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)opuses {
  return resultPbopusList.opusesArray;
}
- (PBOpus*)opusesAtIndex:(NSUInteger)index {
  return [resultPbopusList opusesAtIndex:index];
}
- (PBOpusListBuilder *)addOpuses:(PBOpus*)value {
  if (resultPbopusList.opusesArray == nil) {
    resultPbopusList.opusesArray = [[NSMutableArray alloc]init];
  }
  [resultPbopusList.opusesArray addObject:value];
  return self;
}
- (PBOpusListBuilder *)setOpusesArray:(NSArray *)array {
  resultPbopusList.opusesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBOpusListBuilder *)clearOpuses {
  resultPbopusList.opusesArray = nil;
  return self;
}
@end

@interface PBOpusGuess ()
@property BOOL isCorrect;
@end

@implementation PBOpusGuess

- (BOOL) hasIsCorrect {
  return !!hasIsCorrect_;
}
- (void) setHasIsCorrect:(BOOL) _value_ {
  hasIsCorrect_ = !!_value_;
}
- (BOOL) isCorrect {
  return !!isCorrect_;
}
- (void) setIsCorrect:(BOOL) _value_ {
  isCorrect_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.isCorrect = NO;
  }
  return self;
}
static PBOpusGuess* defaultPBOpusGuessInstance = nil;
+ (void) initialize {
  if (self == [PBOpusGuess class]) {
    defaultPBOpusGuessInstance = [[PBOpusGuess alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBOpusGuessInstance;
}
- (instancetype) defaultInstance {
  return defaultPBOpusGuessInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIsCorrect) {
    [output writeBool:2 value:self.isCorrect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIsCorrect) {
    size_ += computeBoolSize(2, self.isCorrect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBOpusGuess*) parseFromData:(NSData*) data {
  return (PBOpusGuess*)[[[PBOpusGuess builder] mergeFromData:data] build];
}
+ (PBOpusGuess*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusGuess*)[[[PBOpusGuess builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBOpusGuess*) parseFromInputStream:(NSInputStream*) input {
  return (PBOpusGuess*)[[[PBOpusGuess builder] mergeFromInputStream:input] build];
}
+ (PBOpusGuess*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusGuess*)[[[PBOpusGuess builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusGuess*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBOpusGuess*)[[[PBOpusGuess builder] mergeFromCodedInputStream:input] build];
}
+ (PBOpusGuess*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOpusGuess*)[[[PBOpusGuess builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOpusGuessBuilder*) builder {
  return [[PBOpusGuessBuilder alloc] init];
}
+ (PBOpusGuessBuilder*) builderWithPrototype:(PBOpusGuess*) prototype {
  return [[PBOpusGuess builder] mergeFrom:prototype];
}
- (PBOpusGuessBuilder*) builder {
  return [PBOpusGuess builder];
}
- (PBOpusGuessBuilder*) toBuilder {
  return [PBOpusGuess builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIsCorrect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCorrect", [NSNumber numberWithBool:self.isCorrect]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBOpusGuess class]]) {
    return NO;
  }
  PBOpusGuess *otherMessage = other;
  return
      self.hasIsCorrect == otherMessage.hasIsCorrect &&
      (!self.hasIsCorrect || self.isCorrect == otherMessage.isCorrect) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIsCorrect) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isCorrect] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBOpusGuessBuilder()
@property (strong) PBOpusGuess* resultPbopusGuess;
@end

@implementation PBOpusGuessBuilder
@synthesize resultPbopusGuess;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbopusGuess = [[PBOpusGuess alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbopusGuess;
}
- (PBOpusGuessBuilder*) clear {
  self.resultPbopusGuess = [[PBOpusGuess alloc] init];
  return self;
}
- (PBOpusGuessBuilder*) clone {
  return [PBOpusGuess builderWithPrototype:resultPbopusGuess];
}
- (PBOpusGuess*) defaultInstance {
  return [PBOpusGuess defaultInstance];
}
- (PBOpusGuess*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBOpusGuess*) buildPartial {
  PBOpusGuess* returnMe = resultPbopusGuess;
  self.resultPbopusGuess = nil;
  return returnMe;
}
- (PBOpusGuessBuilder*) mergeFrom:(PBOpusGuess*) other {
  if (other == [PBOpusGuess defaultInstance]) {
    return self;
  }
  if (other.hasIsCorrect) {
    [self setIsCorrect:other.isCorrect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBOpusGuessBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBOpusGuessBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16: {
        [self setIsCorrect:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasIsCorrect {
  return resultPbopusGuess.hasIsCorrect;
}
- (BOOL) isCorrect {
  return resultPbopusGuess.isCorrect;
}
- (PBOpusGuessBuilder*) setIsCorrect:(BOOL) value {
  resultPbopusGuess.hasIsCorrect = YES;
  resultPbopusGuess.isCorrect = value;
  return self;
}
- (PBOpusGuessBuilder*) clearIsCorrect {
  resultPbopusGuess.hasIsCorrect = NO;
  resultPbopusGuess.isCorrect = NO;
  return self;
}
@end

@interface PBGuessRank ()
@property (strong) PBGameUser* user;
@property SInt32 guess;
@property SInt32 pass;
@property SInt32 spendTime;
@property SInt32 earn;
@property PBGameCurrency currency;
@property SInt32 ranking;
@property SInt32 totalPlayer;
@property SInt32 startTime;
@property SInt32 endTime;
@end

@implementation PBGuessRank

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasGuess {
  return !!hasGuess_;
}
- (void) setHasGuess:(BOOL) _value_ {
  hasGuess_ = !!_value_;
}
@synthesize guess;
- (BOOL) hasPass {
  return !!hasPass_;
}
- (void) setHasPass:(BOOL) _value_ {
  hasPass_ = !!_value_;
}
@synthesize pass;
- (BOOL) hasSpendTime {
  return !!hasSpendTime_;
}
- (void) setHasSpendTime:(BOOL) _value_ {
  hasSpendTime_ = !!_value_;
}
@synthesize spendTime;
- (BOOL) hasEarn {
  return !!hasEarn_;
}
- (void) setHasEarn:(BOOL) _value_ {
  hasEarn_ = !!_value_;
}
@synthesize earn;
- (BOOL) hasCurrency {
  return !!hasCurrency_;
}
- (void) setHasCurrency:(BOOL) _value_ {
  hasCurrency_ = !!_value_;
}
@synthesize currency;
- (BOOL) hasRanking {
  return !!hasRanking_;
}
- (void) setHasRanking:(BOOL) _value_ {
  hasRanking_ = !!_value_;
}
@synthesize ranking;
- (BOOL) hasTotalPlayer {
  return !!hasTotalPlayer_;
}
- (void) setHasTotalPlayer:(BOOL) _value_ {
  hasTotalPlayer_ = !!_value_;
}
@synthesize totalPlayer;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) _value_ {
  hasStartTime_ = !!_value_;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) _value_ {
  hasEndTime_ = !!_value_;
}
@synthesize endTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [PBGameUser defaultInstance];
    self.guess = 0;
    self.pass = 0;
    self.spendTime = 0;
    self.earn = 0;
    self.currency = PBGameCurrencyCoin;
    self.ranking = 0;
    self.totalPlayer = 0;
    self.startTime = 0;
    self.endTime = 0;
  }
  return self;
}
static PBGuessRank* defaultPBGuessRankInstance = nil;
+ (void) initialize {
  if (self == [PBGuessRank class]) {
    defaultPBGuessRankInstance = [[PBGuessRank alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGuessRankInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGuessRankInstance;
}
- (BOOL) isInitialized {
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasGuess) {
    [output writeInt32:5 value:self.guess];
  }
  if (self.hasPass) {
    [output writeInt32:6 value:self.pass];
  }
  if (self.hasSpendTime) {
    [output writeInt32:7 value:self.spendTime];
  }
  if (self.hasEarn) {
    [output writeInt32:11 value:self.earn];
  }
  if (self.hasCurrency) {
    [output writeEnum:12 value:self.currency];
  }
  if (self.hasRanking) {
    [output writeInt32:25 value:self.ranking];
  }
  if (self.hasTotalPlayer) {
    [output writeInt32:31 value:self.totalPlayer];
  }
  if (self.hasStartTime) {
    [output writeInt32:35 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeInt32:36 value:self.endTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasGuess) {
    size_ += computeInt32Size(5, self.guess);
  }
  if (self.hasPass) {
    size_ += computeInt32Size(6, self.pass);
  }
  if (self.hasSpendTime) {
    size_ += computeInt32Size(7, self.spendTime);
  }
  if (self.hasEarn) {
    size_ += computeInt32Size(11, self.earn);
  }
  if (self.hasCurrency) {
    size_ += computeEnumSize(12, self.currency);
  }
  if (self.hasRanking) {
    size_ += computeInt32Size(25, self.ranking);
  }
  if (self.hasTotalPlayer) {
    size_ += computeInt32Size(31, self.totalPlayer);
  }
  if (self.hasStartTime) {
    size_ += computeInt32Size(35, self.startTime);
  }
  if (self.hasEndTime) {
    size_ += computeInt32Size(36, self.endTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGuessRank*) parseFromData:(NSData*) data {
  return (PBGuessRank*)[[[PBGuessRank builder] mergeFromData:data] build];
}
+ (PBGuessRank*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGuessRank*)[[[PBGuessRank builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGuessRank*) parseFromInputStream:(NSInputStream*) input {
  return (PBGuessRank*)[[[PBGuessRank builder] mergeFromInputStream:input] build];
}
+ (PBGuessRank*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGuessRank*)[[[PBGuessRank builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGuessRank*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGuessRank*)[[[PBGuessRank builder] mergeFromCodedInputStream:input] build];
}
+ (PBGuessRank*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGuessRank*)[[[PBGuessRank builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGuessRankBuilder*) builder {
  return [[PBGuessRankBuilder alloc] init];
}
+ (PBGuessRankBuilder*) builderWithPrototype:(PBGuessRank*) prototype {
  return [[PBGuessRank builder] mergeFrom:prototype];
}
- (PBGuessRankBuilder*) builder {
  return [PBGuessRank builder];
}
- (PBGuessRankBuilder*) toBuilder {
  return [PBGuessRank builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGuess) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guess", [NSNumber numberWithInteger:self.guess]];
  }
  if (self.hasPass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pass", [NSNumber numberWithInteger:self.pass]];
  }
  if (self.hasSpendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spendTime", [NSNumber numberWithInteger:self.spendTime]];
  }
  if (self.hasEarn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"earn", [NSNumber numberWithInteger:self.earn]];
  }
  if (self.hasCurrency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currency", NSStringFromPBGameCurrency(self.currency)];
  }
  if (self.hasRanking) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ranking", [NSNumber numberWithInteger:self.ranking]];
  }
  if (self.hasTotalPlayer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPlayer", [NSNumber numberWithInteger:self.totalPlayer]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithInteger:self.startTime]];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", [NSNumber numberWithInteger:self.endTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGuessRank class]]) {
    return NO;
  }
  PBGuessRank *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasGuess == otherMessage.hasGuess &&
      (!self.hasGuess || self.guess == otherMessage.guess) &&
      self.hasPass == otherMessage.hasPass &&
      (!self.hasPass || self.pass == otherMessage.pass) &&
      self.hasSpendTime == otherMessage.hasSpendTime &&
      (!self.hasSpendTime || self.spendTime == otherMessage.spendTime) &&
      self.hasEarn == otherMessage.hasEarn &&
      (!self.hasEarn || self.earn == otherMessage.earn) &&
      self.hasCurrency == otherMessage.hasCurrency &&
      (!self.hasCurrency || self.currency == otherMessage.currency) &&
      self.hasRanking == otherMessage.hasRanking &&
      (!self.hasRanking || self.ranking == otherMessage.ranking) &&
      self.hasTotalPlayer == otherMessage.hasTotalPlayer &&
      (!self.hasTotalPlayer || self.totalPlayer == otherMessage.totalPlayer) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || self.endTime == otherMessage.endTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasGuess) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guess] hash];
  }
  if (self.hasPass) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pass] hash];
  }
  if (self.hasSpendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spendTime] hash];
  }
  if (self.hasEarn) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.earn] hash];
  }
  if (self.hasCurrency) {
    hashCode = hashCode * 31 + self.currency;
  }
  if (self.hasRanking) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ranking] hash];
  }
  if (self.hasTotalPlayer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalPlayer] hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startTime] hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.endTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGuessRankBuilder()
@property (strong) PBGuessRank* resultPbguessRank;
@end

@implementation PBGuessRankBuilder
@synthesize resultPbguessRank;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbguessRank = [[PBGuessRank alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbguessRank;
}
- (PBGuessRankBuilder*) clear {
  self.resultPbguessRank = [[PBGuessRank alloc] init];
  return self;
}
- (PBGuessRankBuilder*) clone {
  return [PBGuessRank builderWithPrototype:resultPbguessRank];
}
- (PBGuessRank*) defaultInstance {
  return [PBGuessRank defaultInstance];
}
- (PBGuessRank*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGuessRank*) buildPartial {
  PBGuessRank* returnMe = resultPbguessRank;
  self.resultPbguessRank = nil;
  return returnMe;
}
- (PBGuessRankBuilder*) mergeFrom:(PBGuessRank*) other {
  if (other == [PBGuessRank defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasGuess) {
    [self setGuess:other.guess];
  }
  if (other.hasPass) {
    [self setPass:other.pass];
  }
  if (other.hasSpendTime) {
    [self setSpendTime:other.spendTime];
  }
  if (other.hasEarn) {
    [self setEarn:other.earn];
  }
  if (other.hasCurrency) {
    [self setCurrency:other.currency];
  }
  if (other.hasRanking) {
    [self setRanking:other.ranking];
  }
  if (other.hasTotalPlayer) {
    [self setTotalPlayer:other.totalPlayer];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGuessRankBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGuessRankBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBGameUserBuilder* subBuilder = [PBGameUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setGuess:[input readInt32]];
        break;
      }
      case 48: {
        [self setPass:[input readInt32]];
        break;
      }
      case 56: {
        [self setSpendTime:[input readInt32]];
        break;
      }
      case 88: {
        [self setEarn:[input readInt32]];
        break;
      }
      case 96: {
        PBGameCurrency value = (PBGameCurrency)[input readEnum];
        if (PBGameCurrencyIsValidValue(value)) {
          [self setCurrency:value];
        } else {
          [unknownFields mergeVarintField:12 value:value];
        }
        break;
      }
      case 200: {
        [self setRanking:[input readInt32]];
        break;
      }
      case 248: {
        [self setTotalPlayer:[input readInt32]];
        break;
      }
      case 280: {
        [self setStartTime:[input readInt32]];
        break;
      }
      case 288: {
        [self setEndTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultPbguessRank.hasUser;
}
- (PBGameUser*) user {
  return resultPbguessRank.user;
}
- (PBGuessRankBuilder*) setUser:(PBGameUser*) value {
  resultPbguessRank.hasUser = YES;
  resultPbguessRank.user = value;
  return self;
}
- (PBGuessRankBuilder*) setUserBuilder:(PBGameUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (PBGuessRankBuilder*) mergeUser:(PBGameUser*) value {
  if (resultPbguessRank.hasUser &&
      resultPbguessRank.user != [PBGameUser defaultInstance]) {
    resultPbguessRank.user =
      [[[PBGameUser builderWithPrototype:resultPbguessRank.user] mergeFrom:value] buildPartial];
  } else {
    resultPbguessRank.user = value;
  }
  resultPbguessRank.hasUser = YES;
  return self;
}
- (PBGuessRankBuilder*) clearUser {
  resultPbguessRank.hasUser = NO;
  resultPbguessRank.user = [PBGameUser defaultInstance];
  return self;
}
- (BOOL) hasGuess {
  return resultPbguessRank.hasGuess;
}
- (SInt32) guess {
  return resultPbguessRank.guess;
}
- (PBGuessRankBuilder*) setGuess:(SInt32) value {
  resultPbguessRank.hasGuess = YES;
  resultPbguessRank.guess = value;
  return self;
}
- (PBGuessRankBuilder*) clearGuess {
  resultPbguessRank.hasGuess = NO;
  resultPbguessRank.guess = 0;
  return self;
}
- (BOOL) hasPass {
  return resultPbguessRank.hasPass;
}
- (SInt32) pass {
  return resultPbguessRank.pass;
}
- (PBGuessRankBuilder*) setPass:(SInt32) value {
  resultPbguessRank.hasPass = YES;
  resultPbguessRank.pass = value;
  return self;
}
- (PBGuessRankBuilder*) clearPass {
  resultPbguessRank.hasPass = NO;
  resultPbguessRank.pass = 0;
  return self;
}
- (BOOL) hasSpendTime {
  return resultPbguessRank.hasSpendTime;
}
- (SInt32) spendTime {
  return resultPbguessRank.spendTime;
}
- (PBGuessRankBuilder*) setSpendTime:(SInt32) value {
  resultPbguessRank.hasSpendTime = YES;
  resultPbguessRank.spendTime = value;
  return self;
}
- (PBGuessRankBuilder*) clearSpendTime {
  resultPbguessRank.hasSpendTime = NO;
  resultPbguessRank.spendTime = 0;
  return self;
}
- (BOOL) hasEarn {
  return resultPbguessRank.hasEarn;
}
- (SInt32) earn {
  return resultPbguessRank.earn;
}
- (PBGuessRankBuilder*) setEarn:(SInt32) value {
  resultPbguessRank.hasEarn = YES;
  resultPbguessRank.earn = value;
  return self;
}
- (PBGuessRankBuilder*) clearEarn {
  resultPbguessRank.hasEarn = NO;
  resultPbguessRank.earn = 0;
  return self;
}
- (BOOL) hasCurrency {
  return resultPbguessRank.hasCurrency;
}
- (PBGameCurrency) currency {
  return resultPbguessRank.currency;
}
- (PBGuessRankBuilder*) setCurrency:(PBGameCurrency) value {
  resultPbguessRank.hasCurrency = YES;
  resultPbguessRank.currency = value;
  return self;
}
- (PBGuessRankBuilder*) clearCurrency {
  resultPbguessRank.hasCurrency = NO;
  resultPbguessRank.currency = PBGameCurrencyCoin;
  return self;
}
- (BOOL) hasRanking {
  return resultPbguessRank.hasRanking;
}
- (SInt32) ranking {
  return resultPbguessRank.ranking;
}
- (PBGuessRankBuilder*) setRanking:(SInt32) value {
  resultPbguessRank.hasRanking = YES;
  resultPbguessRank.ranking = value;
  return self;
}
- (PBGuessRankBuilder*) clearRanking {
  resultPbguessRank.hasRanking = NO;
  resultPbguessRank.ranking = 0;
  return self;
}
- (BOOL) hasTotalPlayer {
  return resultPbguessRank.hasTotalPlayer;
}
- (SInt32) totalPlayer {
  return resultPbguessRank.totalPlayer;
}
- (PBGuessRankBuilder*) setTotalPlayer:(SInt32) value {
  resultPbguessRank.hasTotalPlayer = YES;
  resultPbguessRank.totalPlayer = value;
  return self;
}
- (PBGuessRankBuilder*) clearTotalPlayer {
  resultPbguessRank.hasTotalPlayer = NO;
  resultPbguessRank.totalPlayer = 0;
  return self;
}
- (BOOL) hasStartTime {
  return resultPbguessRank.hasStartTime;
}
- (SInt32) startTime {
  return resultPbguessRank.startTime;
}
- (PBGuessRankBuilder*) setStartTime:(SInt32) value {
  resultPbguessRank.hasStartTime = YES;
  resultPbguessRank.startTime = value;
  return self;
}
- (PBGuessRankBuilder*) clearStartTime {
  resultPbguessRank.hasStartTime = NO;
  resultPbguessRank.startTime = 0;
  return self;
}
- (BOOL) hasEndTime {
  return resultPbguessRank.hasEndTime;
}
- (SInt32) endTime {
  return resultPbguessRank.endTime;
}
- (PBGuessRankBuilder*) setEndTime:(SInt32) value {
  resultPbguessRank.hasEndTime = YES;
  resultPbguessRank.endTime = value;
  return self;
}
- (PBGuessRankBuilder*) clearEndTime {
  resultPbguessRank.hasEndTime = NO;
  resultPbguessRank.endTime = 0;
  return self;
}
@end

@interface PBGuessContest ()
@property (strong) NSString* contestId;
@property (strong) NSString* name;
@property SInt32 state;
@property SInt32 startTime;
@property SInt32 endTime;
@end

@implementation PBGuessContest

- (BOOL) hasContestId {
  return !!hasContestId_;
}
- (void) setHasContestId:(BOOL) _value_ {
  hasContestId_ = !!_value_;
}
@synthesize contestId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) _value_ {
  hasStartTime_ = !!_value_;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) _value_ {
  hasEndTime_ = !!_value_;
}
@synthesize endTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.contestId = @"";
    self.name = @"";
    self.state = 0;
    self.startTime = 0;
    self.endTime = 0;
  }
  return self;
}
static PBGuessContest* defaultPBGuessContestInstance = nil;
+ (void) initialize {
  if (self == [PBGuessContest class]) {
    defaultPBGuessContestInstance = [[PBGuessContest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBGuessContestInstance;
}
- (instancetype) defaultInstance {
  return defaultPBGuessContestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasContestId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasContestId) {
    [output writeString:1 value:self.contestId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasState) {
    [output writeInt32:3 value:self.state];
  }
  if (self.hasStartTime) {
    [output writeInt32:5 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeInt32:6 value:self.endTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasContestId) {
    size_ += computeStringSize(1, self.contestId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasState) {
    size_ += computeInt32Size(3, self.state);
  }
  if (self.hasStartTime) {
    size_ += computeInt32Size(5, self.startTime);
  }
  if (self.hasEndTime) {
    size_ += computeInt32Size(6, self.endTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBGuessContest*) parseFromData:(NSData*) data {
  return (PBGuessContest*)[[[PBGuessContest builder] mergeFromData:data] build];
}
+ (PBGuessContest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGuessContest*)[[[PBGuessContest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBGuessContest*) parseFromInputStream:(NSInputStream*) input {
  return (PBGuessContest*)[[[PBGuessContest builder] mergeFromInputStream:input] build];
}
+ (PBGuessContest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGuessContest*)[[[PBGuessContest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGuessContest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBGuessContest*)[[[PBGuessContest builder] mergeFromCodedInputStream:input] build];
}
+ (PBGuessContest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBGuessContest*)[[[PBGuessContest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBGuessContestBuilder*) builder {
  return [[PBGuessContestBuilder alloc] init];
}
+ (PBGuessContestBuilder*) builderWithPrototype:(PBGuessContest*) prototype {
  return [[PBGuessContest builder] mergeFrom:prototype];
}
- (PBGuessContestBuilder*) builder {
  return [PBGuessContest builder];
}
- (PBGuessContestBuilder*) toBuilder {
  return [PBGuessContest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasContestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contestId", self.contestId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", [NSNumber numberWithInteger:self.state]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithInteger:self.startTime]];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", [NSNumber numberWithInteger:self.endTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBGuessContest class]]) {
    return NO;
  }
  PBGuessContest *otherMessage = other;
  return
      self.hasContestId == otherMessage.hasContestId &&
      (!self.hasContestId || [self.contestId isEqual:otherMessage.contestId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || self.endTime == otherMessage.endTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasContestId) {
    hashCode = hashCode * 31 + [self.contestId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.state] hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startTime] hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.endTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBGuessContestBuilder()
@property (strong) PBGuessContest* resultPbguessContest;
@end

@implementation PBGuessContestBuilder
@synthesize resultPbguessContest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbguessContest = [[PBGuessContest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbguessContest;
}
- (PBGuessContestBuilder*) clear {
  self.resultPbguessContest = [[PBGuessContest alloc] init];
  return self;
}
- (PBGuessContestBuilder*) clone {
  return [PBGuessContest builderWithPrototype:resultPbguessContest];
}
- (PBGuessContest*) defaultInstance {
  return [PBGuessContest defaultInstance];
}
- (PBGuessContest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBGuessContest*) buildPartial {
  PBGuessContest* returnMe = resultPbguessContest;
  self.resultPbguessContest = nil;
  return returnMe;
}
- (PBGuessContestBuilder*) mergeFrom:(PBGuessContest*) other {
  if (other == [PBGuessContest defaultInstance]) {
    return self;
  }
  if (other.hasContestId) {
    [self setContestId:other.contestId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBGuessContestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBGuessContestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setContestId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setState:[input readInt32]];
        break;
      }
      case 40: {
        [self setStartTime:[input readInt32]];
        break;
      }
      case 48: {
        [self setEndTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasContestId {
  return resultPbguessContest.hasContestId;
}
- (NSString*) contestId {
  return resultPbguessContest.contestId;
}
- (PBGuessContestBuilder*) setContestId:(NSString*) value {
  resultPbguessContest.hasContestId = YES;
  resultPbguessContest.contestId = value;
  return self;
}
- (PBGuessContestBuilder*) clearContestId {
  resultPbguessContest.hasContestId = NO;
  resultPbguessContest.contestId = @"";
  return self;
}
- (BOOL) hasName {
  return resultPbguessContest.hasName;
}
- (NSString*) name {
  return resultPbguessContest.name;
}
- (PBGuessContestBuilder*) setName:(NSString*) value {
  resultPbguessContest.hasName = YES;
  resultPbguessContest.name = value;
  return self;
}
- (PBGuessContestBuilder*) clearName {
  resultPbguessContest.hasName = NO;
  resultPbguessContest.name = @"";
  return self;
}
- (BOOL) hasState {
  return resultPbguessContest.hasState;
}
- (SInt32) state {
  return resultPbguessContest.state;
}
- (PBGuessContestBuilder*) setState:(SInt32) value {
  resultPbguessContest.hasState = YES;
  resultPbguessContest.state = value;
  return self;
}
- (PBGuessContestBuilder*) clearState {
  resultPbguessContest.hasState = NO;
  resultPbguessContest.state = 0;
  return self;
}
- (BOOL) hasStartTime {
  return resultPbguessContest.hasStartTime;
}
- (SInt32) startTime {
  return resultPbguessContest.startTime;
}
- (PBGuessContestBuilder*) setStartTime:(SInt32) value {
  resultPbguessContest.hasStartTime = YES;
  resultPbguessContest.startTime = value;
  return self;
}
- (PBGuessContestBuilder*) clearStartTime {
  resultPbguessContest.hasStartTime = NO;
  resultPbguessContest.startTime = 0;
  return self;
}
- (BOOL) hasEndTime {
  return resultPbguessContest.hasEndTime;
}
- (SInt32) endTime {
  return resultPbguessContest.endTime;
}
- (PBGuessContestBuilder*) setEndTime:(SInt32) value {
  resultPbguessContest.hasEndTime = YES;
  resultPbguessContest.endTime = value;
  return self;
}
- (PBGuessContestBuilder*) clearEndTime {
  resultPbguessContest.hasEndTime = NO;
  resultPbguessContest.endTime = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
