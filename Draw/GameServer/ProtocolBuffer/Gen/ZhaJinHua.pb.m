// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZhaJinHua.pb.h"

@implementation ZhaJinHuaRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZhaJinHuaRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBZJHCardTypeIsValidValue(PBZJHCardType value) {
  switch (value) {
    case PBZJHCardTypeUnknow:
    case PBZJHCardTypeHighCard:
    case PBZJHCardTypePair:
    case PBZJHCardTypeStraight:
    case PBZJHCardTypeFlush:
    case PBZJHCardTypeStraightFlush:
    case PBZJHCardTypeThreeOfAKind:
    case PBZJHCardTypeSpecial:
      return YES;
    default:
      return NO;
  }
}
BOOL PBZJHUserActionIsValidValue(PBZJHUserAction value) {
  switch (value) {
    case PBZJHUserActionNone:
    case PBZJHUserActionBet:
    case PBZJHUserActionRaiseBet:
    case PBZJHUserActionAutoBet:
    case PBZJHUserActionCheckCard:
    case PBZJHUserActionFoldCard:
    case PBZJHUserActionCompareCard:
    case PBZJHUserActionShowCard:
    case PBZJHUserActionChangeCard:
      return YES;
    default:
      return NO;
  }
}
BOOL PBPokerRankIsValidValue(PBPokerRank value) {
  switch (value) {
    case PBPokerRankPokerRank2:
    case PBPokerRankPokerRank3:
    case PBPokerRankPokerRank4:
    case PBPokerRankPokerRank5:
    case PBPokerRankPokerRank6:
    case PBPokerRankPokerRank7:
    case PBPokerRankPokerRank8:
    case PBPokerRankPokerRank9:
    case PBPokerRankPokerRank10:
    case PBPokerRankPokerRankJ:
    case PBPokerRankPokerRankQ:
    case PBPokerRankPokerRankK:
    case PBPokerRankPokerRankA:
    case PBPokerRankPokerRankBlackJoker:
    case PBPokerRankPokerRankRedJoker:
      return YES;
    default:
      return NO;
  }
}
BOOL PBPokerSuitIsValidValue(PBPokerSuit value) {
  switch (value) {
    case PBPokerSuitPokerSuitDiamond:
    case PBPokerSuitPokerSuitClub:
    case PBPokerSuitPokerSuitHeart:
    case PBPokerSuitPokerSuitSpade:
      return YES;
    default:
      return NO;
  }
}
@interface PBPoker ()
@property int32_t pokerId;
@property PBPokerRank rank;
@property PBPokerSuit suit;
@property BOOL faceUp;
@end

@implementation PBPoker

- (BOOL) hasPokerId {
  return !!hasPokerId_;
}
- (void) setHasPokerId:(BOOL) value {
  hasPokerId_ = !!value;
}
@synthesize pokerId;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value {
  hasRank_ = !!value;
}
@synthesize rank;
- (BOOL) hasSuit {
  return !!hasSuit_;
}
- (void) setHasSuit:(BOOL) value {
  hasSuit_ = !!value;
}
@synthesize suit;
- (BOOL) hasFaceUp {
  return !!hasFaceUp_;
}
- (void) setHasFaceUp:(BOOL) value {
  hasFaceUp_ = !!value;
}
- (BOOL) faceUp {
  return !!faceUp_;
}
- (void) setFaceUp:(BOOL) value {
  faceUp_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.pokerId = 0;
    self.rank = PBPokerRankPokerRank2;
    self.suit = PBPokerSuitPokerSuitDiamond;
    self.faceUp = NO;
  }
  return self;
}
static PBPoker* defaultPBPokerInstance = nil;
+ (void) initialize {
  if (self == [PBPoker class]) {
    defaultPBPokerInstance = [[PBPoker alloc] init];
  }
}
+ (PBPoker*) defaultInstance {
  return defaultPBPokerInstance;
}
- (PBPoker*) defaultInstance {
  return defaultPBPokerInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRank) {
    return NO;
  }
  if (!self.hasSuit) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPokerId) {
    [output writeInt32:1 value:self.pokerId];
  }
  if (self.hasRank) {
    [output writeEnum:2 value:self.rank];
  }
  if (self.hasSuit) {
    [output writeEnum:3 value:self.suit];
  }
  if (self.hasFaceUp) {
    [output writeBool:5 value:self.faceUp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPokerId) {
    size += computeInt32Size(1, self.pokerId);
  }
  if (self.hasRank) {
    size += computeEnumSize(2, self.rank);
  }
  if (self.hasSuit) {
    size += computeEnumSize(3, self.suit);
  }
  if (self.hasFaceUp) {
    size += computeBoolSize(5, self.faceUp);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBPoker*) parseFromData:(NSData*) data {
  return (PBPoker*)[[[PBPoker builder] mergeFromData:data] build];
}
+ (PBPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoker*)[[[PBPoker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input {
  return (PBPoker*)[[[PBPoker builder] mergeFromInputStream:input] build];
}
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoker*)[[[PBPoker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPoker*)[[[PBPoker builder] mergeFromCodedInputStream:input] build];
}
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoker*)[[[PBPoker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoker_Builder*) builder {
  return [[[PBPoker_Builder alloc] init] autorelease];
}
+ (PBPoker_Builder*) builderWithPrototype:(PBPoker*) prototype {
  return [[PBPoker builder] mergeFrom:prototype];
}
- (PBPoker_Builder*) builder {
  return [PBPoker builder];
}
@end

@interface PBPoker_Builder()
@property (retain) PBPoker* result;
@end

@implementation PBPoker_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBPoker alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPoker_Builder*) clear {
  self.result = [[[PBPoker alloc] init] autorelease];
  return self;
}
- (PBPoker_Builder*) clone {
  return [PBPoker builderWithPrototype:result];
}
- (PBPoker*) defaultInstance {
  return [PBPoker defaultInstance];
}
- (PBPoker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPoker*) buildPartial {
  PBPoker* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBPoker_Builder*) mergeFrom:(PBPoker*) other {
  if (other == [PBPoker defaultInstance]) {
    return self;
  }
  if (other.hasPokerId) {
    [self setPokerId:other.pokerId];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasSuit) {
    [self setSuit:other.suit];
  }
  if (other.hasFaceUp) {
    [self setFaceUp:other.faceUp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPokerId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (PBPokerRankIsValidValue(value)) {
          [self setRank:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (PBPokerSuitIsValidValue(value)) {
          [self setSuit:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 40: {
        [self setFaceUp:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasPokerId {
  return result.hasPokerId;
}
- (int32_t) pokerId {
  return result.pokerId;
}
- (PBPoker_Builder*) setPokerId:(int32_t) value {
  result.hasPokerId = YES;
  result.pokerId = value;
  return self;
}
- (PBPoker_Builder*) clearPokerId {
  result.hasPokerId = NO;
  result.pokerId = 0;
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (PBPokerRank) rank {
  return result.rank;
}
- (PBPoker_Builder*) setRank:(PBPokerRank) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (PBPoker_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = PBPokerRankPokerRank2;
  return self;
}
- (BOOL) hasSuit {
  return result.hasSuit;
}
- (PBPokerSuit) suit {
  return result.suit;
}
- (PBPoker_Builder*) setSuit:(PBPokerSuit) value {
  result.hasSuit = YES;
  result.suit = value;
  return self;
}
- (PBPoker_Builder*) clearSuit {
  result.hasSuit = NO;
  result.suit = PBPokerSuitPokerSuitDiamond;
  return self;
}
- (BOOL) hasFaceUp {
  return result.hasFaceUp;
}
- (BOOL) faceUp {
  return result.faceUp;
}
- (PBPoker_Builder*) setFaceUp:(BOOL) value {
  result.hasFaceUp = YES;
  result.faceUp = value;
  return self;
}
- (PBPoker_Builder*) clearFaceUp {
  result.hasFaceUp = NO;
  result.faceUp = NO;
  return self;
}
@end

@interface PBZJHGameState ()
@property int32_t totalBet;
@property int32_t singleBet;
@property (retain) NSMutableArray* mutableUsersInfoList;
@end

@implementation PBZJHGameState

- (BOOL) hasTotalBet {
  return !!hasTotalBet_;
}
- (void) setHasTotalBet:(BOOL) value {
  hasTotalBet_ = !!value;
}
@synthesize totalBet;
- (BOOL) hasSingleBet {
  return !!hasSingleBet_;
}
- (void) setHasSingleBet:(BOOL) value {
  hasSingleBet_ = !!value;
}
@synthesize singleBet;
@synthesize mutableUsersInfoList;
- (void) dealloc {
  self.mutableUsersInfoList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.totalBet = 0;
    self.singleBet = 0;
  }
  return self;
}
static PBZJHGameState* defaultPBZJHGameStateInstance = nil;
+ (void) initialize {
  if (self == [PBZJHGameState class]) {
    defaultPBZJHGameStateInstance = [[PBZJHGameState alloc] init];
  }
}
+ (PBZJHGameState*) defaultInstance {
  return defaultPBZJHGameStateInstance;
}
- (PBZJHGameState*) defaultInstance {
  return defaultPBZJHGameStateInstance;
}
- (NSArray*) usersInfoList {
  return mutableUsersInfoList;
}
- (PBZJHUserInfo*) usersInfoAtIndex:(int32_t) index {
  id value = [mutableUsersInfoList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasTotalBet) {
    return NO;
  }
  if (!self.hasSingleBet) {
    return NO;
  }
  for (PBZJHUserInfo* element in self.usersInfoList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalBet) {
    [output writeInt32:1 value:self.totalBet];
  }
  if (self.hasSingleBet) {
    [output writeInt32:2 value:self.singleBet];
  }
  for (PBZJHUserInfo* element in self.usersInfoList) {
    [output writeMessage:6 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTotalBet) {
    size += computeInt32Size(1, self.totalBet);
  }
  if (self.hasSingleBet) {
    size += computeInt32Size(2, self.singleBet);
  }
  for (PBZJHUserInfo* element in self.usersInfoList) {
    size += computeMessageSize(6, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBZJHGameState*) parseFromData:(NSData*) data {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromData:data] build];
}
+ (PBZJHGameState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromInputStream:input] build];
}
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameState_Builder*) builder {
  return [[[PBZJHGameState_Builder alloc] init] autorelease];
}
+ (PBZJHGameState_Builder*) builderWithPrototype:(PBZJHGameState*) prototype {
  return [[PBZJHGameState builder] mergeFrom:prototype];
}
- (PBZJHGameState_Builder*) builder {
  return [PBZJHGameState builder];
}
@end

@interface PBZJHGameState_Builder()
@property (retain) PBZJHGameState* result;
@end

@implementation PBZJHGameState_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBZJHGameState alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBZJHGameState_Builder*) clear {
  self.result = [[[PBZJHGameState alloc] init] autorelease];
  return self;
}
- (PBZJHGameState_Builder*) clone {
  return [PBZJHGameState builderWithPrototype:result];
}
- (PBZJHGameState*) defaultInstance {
  return [PBZJHGameState defaultInstance];
}
- (PBZJHGameState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHGameState*) buildPartial {
  PBZJHGameState* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBZJHGameState_Builder*) mergeFrom:(PBZJHGameState*) other {
  if (other == [PBZJHGameState defaultInstance]) {
    return self;
  }
  if (other.hasTotalBet) {
    [self setTotalBet:other.totalBet];
  }
  if (other.hasSingleBet) {
    [self setSingleBet:other.singleBet];
  }
  if (other.mutableUsersInfoList.count > 0) {
    if (result.mutableUsersInfoList == nil) {
      result.mutableUsersInfoList = [NSMutableArray array];
    }
    [result.mutableUsersInfoList addObjectsFromArray:other.mutableUsersInfoList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHGameState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHGameState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTotalBet:[input readInt32]];
        break;
      }
      case 16: {
        [self setSingleBet:[input readInt32]];
        break;
      }
      case 50: {
        PBZJHUserInfo_Builder* subBuilder = [PBZJHUserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalBet {
  return result.hasTotalBet;
}
- (int32_t) totalBet {
  return result.totalBet;
}
- (PBZJHGameState_Builder*) setTotalBet:(int32_t) value {
  result.hasTotalBet = YES;
  result.totalBet = value;
  return self;
}
- (PBZJHGameState_Builder*) clearTotalBet {
  result.hasTotalBet = NO;
  result.totalBet = 0;
  return self;
}
- (BOOL) hasSingleBet {
  return result.hasSingleBet;
}
- (int32_t) singleBet {
  return result.singleBet;
}
- (PBZJHGameState_Builder*) setSingleBet:(int32_t) value {
  result.hasSingleBet = YES;
  result.singleBet = value;
  return self;
}
- (PBZJHGameState_Builder*) clearSingleBet {
  result.hasSingleBet = NO;
  result.singleBet = 0;
  return self;
}
- (NSArray*) usersInfoList {
  if (result.mutableUsersInfoList == nil) { return [NSArray array]; }
  return result.mutableUsersInfoList;
}
- (PBZJHUserInfo*) usersInfoAtIndex:(int32_t) index {
  return [result usersInfoAtIndex:index];
}
- (PBZJHGameState_Builder*) replaceUsersInfoAtIndex:(int32_t) index with:(PBZJHUserInfo*) value {
  [result.mutableUsersInfoList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBZJHGameState_Builder*) addAllUsersInfo:(NSArray*) values {
  if (result.mutableUsersInfoList == nil) {
    result.mutableUsersInfoList = [NSMutableArray array];
  }
  [result.mutableUsersInfoList addObjectsFromArray:values];
  return self;
}
- (PBZJHGameState_Builder*) clearUsersInfoList {
  result.mutableUsersInfoList = nil;
  return self;
}
- (PBZJHGameState_Builder*) addUsersInfo:(PBZJHUserInfo*) value {
  if (result.mutableUsersInfoList == nil) {
    result.mutableUsersInfoList = [NSMutableArray array];
  }
  [result.mutableUsersInfoList addObject:value];
  return self;
}
@end

@interface PBZJHPoker ()
@property (retain) NSMutableArray* mutablePokersList;
@property PBZJHCardType cardType;
@end

@implementation PBZJHPoker

@synthesize mutablePokersList;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) value {
  hasCardType_ = !!value;
}
@synthesize cardType;
- (void) dealloc {
  self.mutablePokersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cardType = PBZJHCardTypeUnknow;
  }
  return self;
}
static PBZJHPoker* defaultPBZJHPokerInstance = nil;
+ (void) initialize {
  if (self == [PBZJHPoker class]) {
    defaultPBZJHPokerInstance = [[PBZJHPoker alloc] init];
  }
}
+ (PBZJHPoker*) defaultInstance {
  return defaultPBZJHPokerInstance;
}
- (PBZJHPoker*) defaultInstance {
  return defaultPBZJHPokerInstance;
}
- (NSArray*) pokersList {
  return mutablePokersList;
}
- (PBPoker*) pokersAtIndex:(int32_t) index {
  id value = [mutablePokersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBPoker* element in self.pokersList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBPoker* element in self.pokersList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasCardType) {
    [output writeEnum:2 value:self.cardType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBPoker* element in self.pokersList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasCardType) {
    size += computeEnumSize(2, self.cardType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBZJHPoker*) parseFromData:(NSData*) data {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromData:data] build];
}
+ (PBZJHPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromInputStream:input] build];
}
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHPoker_Builder*) builder {
  return [[[PBZJHPoker_Builder alloc] init] autorelease];
}
+ (PBZJHPoker_Builder*) builderWithPrototype:(PBZJHPoker*) prototype {
  return [[PBZJHPoker builder] mergeFrom:prototype];
}
- (PBZJHPoker_Builder*) builder {
  return [PBZJHPoker builder];
}
@end

@interface PBZJHPoker_Builder()
@property (retain) PBZJHPoker* result;
@end

@implementation PBZJHPoker_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBZJHPoker alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBZJHPoker_Builder*) clear {
  self.result = [[[PBZJHPoker alloc] init] autorelease];
  return self;
}
- (PBZJHPoker_Builder*) clone {
  return [PBZJHPoker builderWithPrototype:result];
}
- (PBZJHPoker*) defaultInstance {
  return [PBZJHPoker defaultInstance];
}
- (PBZJHPoker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHPoker*) buildPartial {
  PBZJHPoker* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBZJHPoker_Builder*) mergeFrom:(PBZJHPoker*) other {
  if (other == [PBZJHPoker defaultInstance]) {
    return self;
  }
  if (other.mutablePokersList.count > 0) {
    if (result.mutablePokersList == nil) {
      result.mutablePokersList = [NSMutableArray array];
    }
    [result.mutablePokersList addObjectsFromArray:other.mutablePokersList];
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBPoker_Builder* subBuilder = [PBPoker builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPokers:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (PBZJHCardTypeIsValidValue(value)) {
          [self setCardType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (NSArray*) pokersList {
  if (result.mutablePokersList == nil) { return [NSArray array]; }
  return result.mutablePokersList;
}
- (PBPoker*) pokersAtIndex:(int32_t) index {
  return [result pokersAtIndex:index];
}
- (PBZJHPoker_Builder*) replacePokersAtIndex:(int32_t) index with:(PBPoker*) value {
  [result.mutablePokersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBZJHPoker_Builder*) addAllPokers:(NSArray*) values {
  if (result.mutablePokersList == nil) {
    result.mutablePokersList = [NSMutableArray array];
  }
  [result.mutablePokersList addObjectsFromArray:values];
  return self;
}
- (PBZJHPoker_Builder*) clearPokersList {
  result.mutablePokersList = nil;
  return self;
}
- (PBZJHPoker_Builder*) addPokers:(PBPoker*) value {
  if (result.mutablePokersList == nil) {
    result.mutablePokersList = [NSMutableArray array];
  }
  [result.mutablePokersList addObject:value];
  return self;
}
- (BOOL) hasCardType {
  return result.hasCardType;
}
- (PBZJHCardType) cardType {
  return result.cardType;
}
- (PBZJHPoker_Builder*) setCardType:(PBZJHCardType) value {
  result.hasCardType = YES;
  result.cardType = value;
  return self;
}
- (PBZJHPoker_Builder*) clearCardType {
  result.hasCardType = NO;
  result.cardType = PBZJHCardTypeUnknow;
  return self;
}
@end

@interface PBZJHUserPoker ()
@property (retain) NSString* userId;
@property (retain) PBZJHPoker* pokers;
@end

@implementation PBZJHUserPoker

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasPokers {
  return !!hasPokers_;
}
- (void) setHasPokers:(BOOL) value {
  hasPokers_ = !!value;
}
@synthesize pokers;
- (void) dealloc {
  self.userId = nil;
  self.pokers = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.pokers = [PBZJHPoker defaultInstance];
  }
  return self;
}
static PBZJHUserPoker* defaultPBZJHUserPokerInstance = nil;
+ (void) initialize {
  if (self == [PBZJHUserPoker class]) {
    defaultPBZJHUserPokerInstance = [[PBZJHUserPoker alloc] init];
  }
}
+ (PBZJHUserPoker*) defaultInstance {
  return defaultPBZJHUserPokerInstance;
}
- (PBZJHUserPoker*) defaultInstance {
  return defaultPBZJHUserPokerInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (self.hasPokers) {
    if (!self.pokers.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasPokers) {
    [output writeMessage:2 value:self.pokers];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasPokers) {
    size += computeMessageSize(2, self.pokers);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBZJHUserPoker*) parseFromData:(NSData*) data {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromData:data] build];
}
+ (PBZJHUserPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromInputStream:input] build];
}
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPoker_Builder*) builder {
  return [[[PBZJHUserPoker_Builder alloc] init] autorelease];
}
+ (PBZJHUserPoker_Builder*) builderWithPrototype:(PBZJHUserPoker*) prototype {
  return [[PBZJHUserPoker builder] mergeFrom:prototype];
}
- (PBZJHUserPoker_Builder*) builder {
  return [PBZJHUserPoker builder];
}
@end

@interface PBZJHUserPoker_Builder()
@property (retain) PBZJHUserPoker* result;
@end

@implementation PBZJHUserPoker_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBZJHUserPoker alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBZJHUserPoker_Builder*) clear {
  self.result = [[[PBZJHUserPoker alloc] init] autorelease];
  return self;
}
- (PBZJHUserPoker_Builder*) clone {
  return [PBZJHUserPoker builderWithPrototype:result];
}
- (PBZJHUserPoker*) defaultInstance {
  return [PBZJHUserPoker defaultInstance];
}
- (PBZJHUserPoker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHUserPoker*) buildPartial {
  PBZJHUserPoker* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBZJHUserPoker_Builder*) mergeFrom:(PBZJHUserPoker*) other {
  if (other == [PBZJHUserPoker defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasPokers) {
    [self mergePokers:other.pokers];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHUserPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHUserPoker_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBZJHPoker_Builder* subBuilder = [PBZJHPoker builder];
        if (self.hasPokers) {
          [subBuilder mergeFrom:self.pokers];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPokers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBZJHUserPoker_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBZJHUserPoker_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasPokers {
  return result.hasPokers;
}
- (PBZJHPoker*) pokers {
  return result.pokers;
}
- (PBZJHUserPoker_Builder*) setPokers:(PBZJHPoker*) value {
  result.hasPokers = YES;
  result.pokers = value;
  return self;
}
- (PBZJHUserPoker_Builder*) setPokersBuilder:(PBZJHPoker_Builder*) builderForValue {
  return [self setPokers:[builderForValue build]];
}
- (PBZJHUserPoker_Builder*) mergePokers:(PBZJHPoker*) value {
  if (result.hasPokers &&
      result.pokers != [PBZJHPoker defaultInstance]) {
    result.pokers =
      [[[PBZJHPoker builderWithPrototype:result.pokers] mergeFrom:value] buildPartial];
  } else {
    result.pokers = value;
  }
  result.hasPokers = YES;
  return self;
}
- (PBZJHUserPoker_Builder*) clearPokers {
  result.hasPokers = NO;
  result.pokers = [PBZJHPoker defaultInstance];
  return self;
}
@end

@interface PBZJHUserInfo ()
@property (retain) NSString* userId;
@property (retain) PBZJHPoker* pokers;
@property int32_t totalBet;
@property BOOL isAutoBet;
@property PBZJHUserAction lastAction;
@property BOOL alreadCheckCard;
@property BOOL alreadFoldCard;
@property BOOL alreadShowCard;
@property BOOL alreadLose;
@end

@implementation PBZJHUserInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasPokers {
  return !!hasPokers_;
}
- (void) setHasPokers:(BOOL) value {
  hasPokers_ = !!value;
}
@synthesize pokers;
- (BOOL) hasTotalBet {
  return !!hasTotalBet_;
}
- (void) setHasTotalBet:(BOOL) value {
  hasTotalBet_ = !!value;
}
@synthesize totalBet;
- (BOOL) hasIsAutoBet {
  return !!hasIsAutoBet_;
}
- (void) setHasIsAutoBet:(BOOL) value {
  hasIsAutoBet_ = !!value;
}
- (BOOL) isAutoBet {
  return !!isAutoBet_;
}
- (void) setIsAutoBet:(BOOL) value {
  isAutoBet_ = !!value;
}
- (BOOL) hasLastAction {
  return !!hasLastAction_;
}
- (void) setHasLastAction:(BOOL) value {
  hasLastAction_ = !!value;
}
@synthesize lastAction;
- (BOOL) hasAlreadCheckCard {
  return !!hasAlreadCheckCard_;
}
- (void) setHasAlreadCheckCard:(BOOL) value {
  hasAlreadCheckCard_ = !!value;
}
- (BOOL) alreadCheckCard {
  return !!alreadCheckCard_;
}
- (void) setAlreadCheckCard:(BOOL) value {
  alreadCheckCard_ = !!value;
}
- (BOOL) hasAlreadFoldCard {
  return !!hasAlreadFoldCard_;
}
- (void) setHasAlreadFoldCard:(BOOL) value {
  hasAlreadFoldCard_ = !!value;
}
- (BOOL) alreadFoldCard {
  return !!alreadFoldCard_;
}
- (void) setAlreadFoldCard:(BOOL) value {
  alreadFoldCard_ = !!value;
}
- (BOOL) hasAlreadShowCard {
  return !!hasAlreadShowCard_;
}
- (void) setHasAlreadShowCard:(BOOL) value {
  hasAlreadShowCard_ = !!value;
}
- (BOOL) alreadShowCard {
  return !!alreadShowCard_;
}
- (void) setAlreadShowCard:(BOOL) value {
  alreadShowCard_ = !!value;
}
- (BOOL) hasAlreadLose {
  return !!hasAlreadLose_;
}
- (void) setHasAlreadLose:(BOOL) value {
  hasAlreadLose_ = !!value;
}
- (BOOL) alreadLose {
  return !!alreadLose_;
}
- (void) setAlreadLose:(BOOL) value {
  alreadLose_ = !!value;
}
- (void) dealloc {
  self.userId = nil;
  self.pokers = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.pokers = [PBZJHPoker defaultInstance];
    self.totalBet = 0;
    self.isAutoBet = NO;
    self.lastAction = PBZJHUserActionNone;
    self.alreadCheckCard = NO;
    self.alreadFoldCard = NO;
    self.alreadShowCard = NO;
    self.alreadLose = NO;
  }
  return self;
}
static PBZJHUserInfo* defaultPBZJHUserInfoInstance = nil;
+ (void) initialize {
  if (self == [PBZJHUserInfo class]) {
    defaultPBZJHUserInfoInstance = [[PBZJHUserInfo alloc] init];
  }
}
+ (PBZJHUserInfo*) defaultInstance {
  return defaultPBZJHUserInfoInstance;
}
- (PBZJHUserInfo*) defaultInstance {
  return defaultPBZJHUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (self.hasPokers) {
    if (!self.pokers.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasPokers) {
    [output writeMessage:2 value:self.pokers];
  }
  if (self.hasTotalBet) {
    [output writeInt32:5 value:self.totalBet];
  }
  if (self.hasIsAutoBet) {
    [output writeBool:6 value:self.isAutoBet];
  }
  if (self.hasLastAction) {
    [output writeEnum:7 value:self.lastAction];
  }
  if (self.hasAlreadCheckCard) {
    [output writeBool:11 value:self.alreadCheckCard];
  }
  if (self.hasAlreadFoldCard) {
    [output writeBool:12 value:self.alreadFoldCard];
  }
  if (self.hasAlreadShowCard) {
    [output writeBool:13 value:self.alreadShowCard];
  }
  if (self.hasAlreadLose) {
    [output writeBool:14 value:self.alreadLose];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeStringSize(1, self.userId);
  }
  if (self.hasPokers) {
    size += computeMessageSize(2, self.pokers);
  }
  if (self.hasTotalBet) {
    size += computeInt32Size(5, self.totalBet);
  }
  if (self.hasIsAutoBet) {
    size += computeBoolSize(6, self.isAutoBet);
  }
  if (self.hasLastAction) {
    size += computeEnumSize(7, self.lastAction);
  }
  if (self.hasAlreadCheckCard) {
    size += computeBoolSize(11, self.alreadCheckCard);
  }
  if (self.hasAlreadFoldCard) {
    size += computeBoolSize(12, self.alreadFoldCard);
  }
  if (self.hasAlreadShowCard) {
    size += computeBoolSize(13, self.alreadShowCard);
  }
  if (self.hasAlreadLose) {
    size += computeBoolSize(14, self.alreadLose);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBZJHUserInfo*) parseFromData:(NSData*) data {
  return (PBZJHUserInfo*)[[[PBZJHUserInfo builder] mergeFromData:data] build];
}
+ (PBZJHUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserInfo*)[[[PBZJHUserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHUserInfo*)[[[PBZJHUserInfo builder] mergeFromInputStream:input] build];
}
+ (PBZJHUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserInfo*)[[[PBZJHUserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHUserInfo*)[[[PBZJHUserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserInfo*)[[[PBZJHUserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserInfo_Builder*) builder {
  return [[[PBZJHUserInfo_Builder alloc] init] autorelease];
}
+ (PBZJHUserInfo_Builder*) builderWithPrototype:(PBZJHUserInfo*) prototype {
  return [[PBZJHUserInfo builder] mergeFrom:prototype];
}
- (PBZJHUserInfo_Builder*) builder {
  return [PBZJHUserInfo builder];
}
@end

@interface PBZJHUserInfo_Builder()
@property (retain) PBZJHUserInfo* result;
@end

@implementation PBZJHUserInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBZJHUserInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBZJHUserInfo_Builder*) clear {
  self.result = [[[PBZJHUserInfo alloc] init] autorelease];
  return self;
}
- (PBZJHUserInfo_Builder*) clone {
  return [PBZJHUserInfo builderWithPrototype:result];
}
- (PBZJHUserInfo*) defaultInstance {
  return [PBZJHUserInfo defaultInstance];
}
- (PBZJHUserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHUserInfo*) buildPartial {
  PBZJHUserInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBZJHUserInfo_Builder*) mergeFrom:(PBZJHUserInfo*) other {
  if (other == [PBZJHUserInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasPokers) {
    [self mergePokers:other.pokers];
  }
  if (other.hasTotalBet) {
    [self setTotalBet:other.totalBet];
  }
  if (other.hasIsAutoBet) {
    [self setIsAutoBet:other.isAutoBet];
  }
  if (other.hasLastAction) {
    [self setLastAction:other.lastAction];
  }
  if (other.hasAlreadCheckCard) {
    [self setAlreadCheckCard:other.alreadCheckCard];
  }
  if (other.hasAlreadFoldCard) {
    [self setAlreadFoldCard:other.alreadFoldCard];
  }
  if (other.hasAlreadShowCard) {
    [self setAlreadShowCard:other.alreadShowCard];
  }
  if (other.hasAlreadLose) {
    [self setAlreadLose:other.alreadLose];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBZJHPoker_Builder* subBuilder = [PBZJHPoker builder];
        if (self.hasPokers) {
          [subBuilder mergeFrom:self.pokers];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPokers:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setTotalBet:[input readInt32]];
        break;
      }
      case 48: {
        [self setIsAutoBet:[input readBool]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (PBZJHUserActionIsValidValue(value)) {
          [self setLastAction:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 88: {
        [self setAlreadCheckCard:[input readBool]];
        break;
      }
      case 96: {
        [self setAlreadFoldCard:[input readBool]];
        break;
      }
      case 104: {
        [self setAlreadShowCard:[input readBool]];
        break;
      }
      case 112: {
        [self setAlreadLose:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (PBZJHUserInfo_Builder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasPokers {
  return result.hasPokers;
}
- (PBZJHPoker*) pokers {
  return result.pokers;
}
- (PBZJHUserInfo_Builder*) setPokers:(PBZJHPoker*) value {
  result.hasPokers = YES;
  result.pokers = value;
  return self;
}
- (PBZJHUserInfo_Builder*) setPokersBuilder:(PBZJHPoker_Builder*) builderForValue {
  return [self setPokers:[builderForValue build]];
}
- (PBZJHUserInfo_Builder*) mergePokers:(PBZJHPoker*) value {
  if (result.hasPokers &&
      result.pokers != [PBZJHPoker defaultInstance]) {
    result.pokers =
      [[[PBZJHPoker builderWithPrototype:result.pokers] mergeFrom:value] buildPartial];
  } else {
    result.pokers = value;
  }
  result.hasPokers = YES;
  return self;
}
- (PBZJHUserInfo_Builder*) clearPokers {
  result.hasPokers = NO;
  result.pokers = [PBZJHPoker defaultInstance];
  return self;
}
- (BOOL) hasTotalBet {
  return result.hasTotalBet;
}
- (int32_t) totalBet {
  return result.totalBet;
}
- (PBZJHUserInfo_Builder*) setTotalBet:(int32_t) value {
  result.hasTotalBet = YES;
  result.totalBet = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearTotalBet {
  result.hasTotalBet = NO;
  result.totalBet = 0;
  return self;
}
- (BOOL) hasIsAutoBet {
  return result.hasIsAutoBet;
}
- (BOOL) isAutoBet {
  return result.isAutoBet;
}
- (PBZJHUserInfo_Builder*) setIsAutoBet:(BOOL) value {
  result.hasIsAutoBet = YES;
  result.isAutoBet = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearIsAutoBet {
  result.hasIsAutoBet = NO;
  result.isAutoBet = NO;
  return self;
}
- (BOOL) hasLastAction {
  return result.hasLastAction;
}
- (PBZJHUserAction) lastAction {
  return result.lastAction;
}
- (PBZJHUserInfo_Builder*) setLastAction:(PBZJHUserAction) value {
  result.hasLastAction = YES;
  result.lastAction = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearLastAction {
  result.hasLastAction = NO;
  result.lastAction = PBZJHUserActionNone;
  return self;
}
- (BOOL) hasAlreadCheckCard {
  return result.hasAlreadCheckCard;
}
- (BOOL) alreadCheckCard {
  return result.alreadCheckCard;
}
- (PBZJHUserInfo_Builder*) setAlreadCheckCard:(BOOL) value {
  result.hasAlreadCheckCard = YES;
  result.alreadCheckCard = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearAlreadCheckCard {
  result.hasAlreadCheckCard = NO;
  result.alreadCheckCard = NO;
  return self;
}
- (BOOL) hasAlreadFoldCard {
  return result.hasAlreadFoldCard;
}
- (BOOL) alreadFoldCard {
  return result.alreadFoldCard;
}
- (PBZJHUserInfo_Builder*) setAlreadFoldCard:(BOOL) value {
  result.hasAlreadFoldCard = YES;
  result.alreadFoldCard = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearAlreadFoldCard {
  result.hasAlreadFoldCard = NO;
  result.alreadFoldCard = NO;
  return self;
}
- (BOOL) hasAlreadShowCard {
  return result.hasAlreadShowCard;
}
- (BOOL) alreadShowCard {
  return result.alreadShowCard;
}
- (PBZJHUserInfo_Builder*) setAlreadShowCard:(BOOL) value {
  result.hasAlreadShowCard = YES;
  result.alreadShowCard = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearAlreadShowCard {
  result.hasAlreadShowCard = NO;
  result.alreadShowCard = NO;
  return self;
}
- (BOOL) hasAlreadLose {
  return result.hasAlreadLose;
}
- (BOOL) alreadLose {
  return result.alreadLose;
}
- (PBZJHUserInfo_Builder*) setAlreadLose:(BOOL) value {
  result.hasAlreadLose = YES;
  result.alreadLose = value;
  return self;
}
- (PBZJHUserInfo_Builder*) clearAlreadLose {
  result.hasAlreadLose = NO;
  result.alreadLose = NO;
  return self;
}
@end

@interface PBZJHGameResult ()
@property (retain) NSMutableArray* mutableUserResultList;
@end

@implementation PBZJHGameResult

@synthesize mutableUserResultList;
- (void) dealloc {
  self.mutableUserResultList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBZJHGameResult* defaultPBZJHGameResultInstance = nil;
+ (void) initialize {
  if (self == [PBZJHGameResult class]) {
    defaultPBZJHGameResultInstance = [[PBZJHGameResult alloc] init];
  }
}
+ (PBZJHGameResult*) defaultInstance {
  return defaultPBZJHGameResultInstance;
}
- (PBZJHGameResult*) defaultInstance {
  return defaultPBZJHGameResultInstance;
}
- (NSArray*) userResultList {
  return mutableUserResultList;
}
- (PBUserResult*) userResultAtIndex:(int32_t) index {
  id value = [mutableUserResultList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (PBUserResult* element in self.userResultList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (PBUserResult* element in self.userResultList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (PBUserResult* element in self.userResultList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PBZJHGameResult*) parseFromData:(NSData*) data {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromData:data] build];
}
+ (PBZJHGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromInputStream:input] build];
}
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameResult_Builder*) builder {
  return [[[PBZJHGameResult_Builder alloc] init] autorelease];
}
+ (PBZJHGameResult_Builder*) builderWithPrototype:(PBZJHGameResult*) prototype {
  return [[PBZJHGameResult builder] mergeFrom:prototype];
}
- (PBZJHGameResult_Builder*) builder {
  return [PBZJHGameResult builder];
}
@end

@interface PBZJHGameResult_Builder()
@property (retain) PBZJHGameResult* result;
@end

@implementation PBZJHGameResult_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PBZJHGameResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBZJHGameResult_Builder*) clear {
  self.result = [[[PBZJHGameResult alloc] init] autorelease];
  return self;
}
- (PBZJHGameResult_Builder*) clone {
  return [PBZJHGameResult builderWithPrototype:result];
}
- (PBZJHGameResult*) defaultInstance {
  return [PBZJHGameResult defaultInstance];
}
- (PBZJHGameResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHGameResult*) buildPartial {
  PBZJHGameResult* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PBZJHGameResult_Builder*) mergeFrom:(PBZJHGameResult*) other {
  if (other == [PBZJHGameResult defaultInstance]) {
    return self;
  }
  if (other.mutableUserResultList.count > 0) {
    if (result.mutableUserResultList == nil) {
      result.mutableUserResultList = [NSMutableArray array];
    }
    [result.mutableUserResultList addObjectsFromArray:other.mutableUserResultList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PBUserResult_Builder* subBuilder = [PBUserResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResult:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) userResultList {
  if (result.mutableUserResultList == nil) { return [NSArray array]; }
  return result.mutableUserResultList;
}
- (PBUserResult*) userResultAtIndex:(int32_t) index {
  return [result userResultAtIndex:index];
}
- (PBZJHGameResult_Builder*) replaceUserResultAtIndex:(int32_t) index with:(PBUserResult*) value {
  [result.mutableUserResultList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PBZJHGameResult_Builder*) addAllUserResult:(NSArray*) values {
  if (result.mutableUserResultList == nil) {
    result.mutableUserResultList = [NSMutableArray array];
  }
  [result.mutableUserResultList addObjectsFromArray:values];
  return self;
}
- (PBZJHGameResult_Builder*) clearUserResultList {
  result.mutableUserResultList = nil;
  return self;
}
- (PBZJHGameResult_Builder*) addUserResult:(PBUserResult*) value {
  if (result.mutableUserResultList == nil) {
    result.mutableUserResultList = [NSMutableArray array];
  }
  [result.mutableUserResultList addObject:value];
  return self;
}
@end

