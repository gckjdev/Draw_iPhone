// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZhaJinHua.pb.h"
// @@protoc_insertion_point(imports)

@implementation ZhaJinHuaRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZhaJinHuaRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GameBasicRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBZJHRuleTypeIsValidValue(PBZJHRuleType value) {
  switch (value) {
    case PBZJHRuleTypeBeginer:
    case PBZJHRuleTypeNormal:
    case PBZJHRuleTypeRich:
    case PBZJHRuleTypeDual:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBZJHRuleType(PBZJHRuleType value) {
  switch (value) {
    case PBZJHRuleTypeBeginer:
      return @"PBZJHRuleTypeBeginer";
    case PBZJHRuleTypeNormal:
      return @"PBZJHRuleTypeNormal";
    case PBZJHRuleTypeRich:
      return @"PBZJHRuleTypeRich";
    case PBZJHRuleTypeDual:
      return @"PBZJHRuleTypeDual";
    default:
      return nil;
  }
}

BOOL PBZJHCardTypeIsValidValue(PBZJHCardType value) {
  switch (value) {
    case PBZJHCardTypeUnknow:
    case PBZJHCardTypeHighCard:
    case PBZJHCardTypePair:
    case PBZJHCardTypeStraight:
    case PBZJHCardTypeFlush:
    case PBZJHCardTypeStraightFlush:
    case PBZJHCardTypeThreeOfAKind:
    case PBZJHCardTypeSpecial:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBZJHCardType(PBZJHCardType value) {
  switch (value) {
    case PBZJHCardTypeUnknow:
      return @"PBZJHCardTypeUnknow";
    case PBZJHCardTypeHighCard:
      return @"PBZJHCardTypeHighCard";
    case PBZJHCardTypePair:
      return @"PBZJHCardTypePair";
    case PBZJHCardTypeStraight:
      return @"PBZJHCardTypeStraight";
    case PBZJHCardTypeFlush:
      return @"PBZJHCardTypeFlush";
    case PBZJHCardTypeStraightFlush:
      return @"PBZJHCardTypeStraightFlush";
    case PBZJHCardTypeThreeOfAKind:
      return @"PBZJHCardTypeThreeOfAKind";
    case PBZJHCardTypeSpecial:
      return @"PBZJHCardTypeSpecial";
    default:
      return nil;
  }
}

BOOL PBZJHUserActionIsValidValue(PBZJHUserAction value) {
  switch (value) {
    case PBZJHUserActionNone:
    case PBZJHUserActionBet:
    case PBZJHUserActionRaiseBet:
    case PBZJHUserActionAutoBet:
    case PBZJHUserActionCheckCard:
    case PBZJHUserActionFoldCard:
    case PBZJHUserActionCompareCard:
    case PBZJHUserActionShowCard:
    case PBZJHUserActionChangeCard:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBZJHUserAction(PBZJHUserAction value) {
  switch (value) {
    case PBZJHUserActionNone:
      return @"PBZJHUserActionNone";
    case PBZJHUserActionBet:
      return @"PBZJHUserActionBet";
    case PBZJHUserActionRaiseBet:
      return @"PBZJHUserActionRaiseBet";
    case PBZJHUserActionAutoBet:
      return @"PBZJHUserActionAutoBet";
    case PBZJHUserActionCheckCard:
      return @"PBZJHUserActionCheckCard";
    case PBZJHUserActionFoldCard:
      return @"PBZJHUserActionFoldCard";
    case PBZJHUserActionCompareCard:
      return @"PBZJHUserActionCompareCard";
    case PBZJHUserActionShowCard:
      return @"PBZJHUserActionShowCard";
    case PBZJHUserActionChangeCard:
      return @"PBZJHUserActionChangeCard";
    default:
      return nil;
  }
}

BOOL PBPokerRankIsValidValue(PBPokerRank value) {
  switch (value) {
    case PBPokerRankPokerRank2:
    case PBPokerRankPokerRank3:
    case PBPokerRankPokerRank4:
    case PBPokerRankPokerRank5:
    case PBPokerRankPokerRank6:
    case PBPokerRankPokerRank7:
    case PBPokerRankPokerRank8:
    case PBPokerRankPokerRank9:
    case PBPokerRankPokerRank10:
    case PBPokerRankPokerRankJ:
    case PBPokerRankPokerRankQ:
    case PBPokerRankPokerRankK:
    case PBPokerRankPokerRankA:
    case PBPokerRankPokerRankBlackJoker:
    case PBPokerRankPokerRankRedJoker:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBPokerRank(PBPokerRank value) {
  switch (value) {
    case PBPokerRankPokerRank2:
      return @"PBPokerRankPokerRank2";
    case PBPokerRankPokerRank3:
      return @"PBPokerRankPokerRank3";
    case PBPokerRankPokerRank4:
      return @"PBPokerRankPokerRank4";
    case PBPokerRankPokerRank5:
      return @"PBPokerRankPokerRank5";
    case PBPokerRankPokerRank6:
      return @"PBPokerRankPokerRank6";
    case PBPokerRankPokerRank7:
      return @"PBPokerRankPokerRank7";
    case PBPokerRankPokerRank8:
      return @"PBPokerRankPokerRank8";
    case PBPokerRankPokerRank9:
      return @"PBPokerRankPokerRank9";
    case PBPokerRankPokerRank10:
      return @"PBPokerRankPokerRank10";
    case PBPokerRankPokerRankJ:
      return @"PBPokerRankPokerRankJ";
    case PBPokerRankPokerRankQ:
      return @"PBPokerRankPokerRankQ";
    case PBPokerRankPokerRankK:
      return @"PBPokerRankPokerRankK";
    case PBPokerRankPokerRankA:
      return @"PBPokerRankPokerRankA";
    case PBPokerRankPokerRankBlackJoker:
      return @"PBPokerRankPokerRankBlackJoker";
    case PBPokerRankPokerRankRedJoker:
      return @"PBPokerRankPokerRankRedJoker";
    default:
      return nil;
  }
}

BOOL PBPokerSuitIsValidValue(PBPokerSuit value) {
  switch (value) {
    case PBPokerSuitPokerSuitDiamond:
    case PBPokerSuitPokerSuitClub:
    case PBPokerSuitPokerSuitHeart:
    case PBPokerSuitPokerSuitSpade:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBPokerSuit(PBPokerSuit value) {
  switch (value) {
    case PBPokerSuitPokerSuitDiamond:
      return @"PBPokerSuitPokerSuitDiamond";
    case PBPokerSuitPokerSuitClub:
      return @"PBPokerSuitPokerSuitClub";
    case PBPokerSuitPokerSuitHeart:
      return @"PBPokerSuitPokerSuitHeart";
    case PBPokerSuitPokerSuitSpade:
      return @"PBPokerSuitPokerSuitSpade";
    default:
      return nil;
  }
}

@interface PBPoker ()
@property SInt32 pokerId;
@property PBPokerRank rank;
@property PBPokerSuit suit;
@property BOOL faceUp;
@end

@implementation PBPoker

- (BOOL) hasPokerId {
  return !!hasPokerId_;
}
- (void) setHasPokerId:(BOOL) _value_ {
  hasPokerId_ = !!_value_;
}
@synthesize pokerId;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) _value_ {
  hasRank_ = !!_value_;
}
@synthesize rank;
- (BOOL) hasSuit {
  return !!hasSuit_;
}
- (void) setHasSuit:(BOOL) _value_ {
  hasSuit_ = !!_value_;
}
@synthesize suit;
- (BOOL) hasFaceUp {
  return !!hasFaceUp_;
}
- (void) setHasFaceUp:(BOOL) _value_ {
  hasFaceUp_ = !!_value_;
}
- (BOOL) faceUp {
  return !!faceUp_;
}
- (void) setFaceUp:(BOOL) _value_ {
  faceUp_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.pokerId = 0;
    self.rank = PBPokerRankPokerRank2;
    self.suit = PBPokerSuitPokerSuitDiamond;
    self.faceUp = NO;
  }
  return self;
}
static PBPoker* defaultPBPokerInstance = nil;
+ (void) initialize {
  if (self == [PBPoker class]) {
    defaultPBPokerInstance = [[PBPoker alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBPokerInstance;
}
- (instancetype) defaultInstance {
  return defaultPBPokerInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRank) {
    return NO;
  }
  if (!self.hasSuit) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPokerId) {
    [output writeInt32:1 value:self.pokerId];
  }
  if (self.hasRank) {
    [output writeEnum:2 value:self.rank];
  }
  if (self.hasSuit) {
    [output writeEnum:3 value:self.suit];
  }
  if (self.hasFaceUp) {
    [output writeBool:5 value:self.faceUp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPokerId) {
    size_ += computeInt32Size(1, self.pokerId);
  }
  if (self.hasRank) {
    size_ += computeEnumSize(2, self.rank);
  }
  if (self.hasSuit) {
    size_ += computeEnumSize(3, self.suit);
  }
  if (self.hasFaceUp) {
    size_ += computeBoolSize(5, self.faceUp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBPoker*) parseFromData:(NSData*) data {
  return (PBPoker*)[[[PBPoker builder] mergeFromData:data] build];
}
+ (PBPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoker*)[[[PBPoker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input {
  return (PBPoker*)[[[PBPoker builder] mergeFromInputStream:input] build];
}
+ (PBPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoker*)[[[PBPoker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPoker*)[[[PBPoker builder] mergeFromCodedInputStream:input] build];
}
+ (PBPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPoker*)[[[PBPoker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPokerBuilder*) builder {
  return [[PBPokerBuilder alloc] init];
}
+ (PBPokerBuilder*) builderWithPrototype:(PBPoker*) prototype {
  return [[PBPoker builder] mergeFrom:prototype];
}
- (PBPokerBuilder*) builder {
  return [PBPoker builder];
}
- (PBPokerBuilder*) toBuilder {
  return [PBPoker builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPokerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pokerId", [NSNumber numberWithInteger:self.pokerId]];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", NSStringFromPBPokerRank(self.rank)];
  }
  if (self.hasSuit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suit", NSStringFromPBPokerSuit(self.suit)];
  }
  if (self.hasFaceUp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"faceUp", [NSNumber numberWithBool:self.faceUp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBPoker class]]) {
    return NO;
  }
  PBPoker *otherMessage = other;
  return
      self.hasPokerId == otherMessage.hasPokerId &&
      (!self.hasPokerId || self.pokerId == otherMessage.pokerId) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasSuit == otherMessage.hasSuit &&
      (!self.hasSuit || self.suit == otherMessage.suit) &&
      self.hasFaceUp == otherMessage.hasFaceUp &&
      (!self.hasFaceUp || self.faceUp == otherMessage.faceUp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPokerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pokerId] hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + self.rank;
  }
  if (self.hasSuit) {
    hashCode = hashCode * 31 + self.suit;
  }
  if (self.hasFaceUp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.faceUp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBPokerBuilder()
@property (strong) PBPoker* resultPbpoker;
@end

@implementation PBPokerBuilder
@synthesize resultPbpoker;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbpoker = [[PBPoker alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbpoker;
}
- (PBPokerBuilder*) clear {
  self.resultPbpoker = [[PBPoker alloc] init];
  return self;
}
- (PBPokerBuilder*) clone {
  return [PBPoker builderWithPrototype:resultPbpoker];
}
- (PBPoker*) defaultInstance {
  return [PBPoker defaultInstance];
}
- (PBPoker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPoker*) buildPartial {
  PBPoker* returnMe = resultPbpoker;
  self.resultPbpoker = nil;
  return returnMe;
}
- (PBPokerBuilder*) mergeFrom:(PBPoker*) other {
  if (other == [PBPoker defaultInstance]) {
    return self;
  }
  if (other.hasPokerId) {
    [self setPokerId:other.pokerId];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasSuit) {
    [self setSuit:other.suit];
  }
  if (other.hasFaceUp) {
    [self setFaceUp:other.faceUp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPokerId:[input readInt32]];
        break;
      }
      case 16: {
        PBPokerRank value = (PBPokerRank)[input readEnum];
        if (PBPokerRankIsValidValue(value)) {
          [self setRank:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        PBPokerSuit value = (PBPokerSuit)[input readEnum];
        if (PBPokerSuitIsValidValue(value)) {
          [self setSuit:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 40: {
        [self setFaceUp:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasPokerId {
  return resultPbpoker.hasPokerId;
}
- (SInt32) pokerId {
  return resultPbpoker.pokerId;
}
- (PBPokerBuilder*) setPokerId:(SInt32) value {
  resultPbpoker.hasPokerId = YES;
  resultPbpoker.pokerId = value;
  return self;
}
- (PBPokerBuilder*) clearPokerId {
  resultPbpoker.hasPokerId = NO;
  resultPbpoker.pokerId = 0;
  return self;
}
- (BOOL) hasRank {
  return resultPbpoker.hasRank;
}
- (PBPokerRank) rank {
  return resultPbpoker.rank;
}
- (PBPokerBuilder*) setRank:(PBPokerRank) value {
  resultPbpoker.hasRank = YES;
  resultPbpoker.rank = value;
  return self;
}
- (PBPokerBuilder*) clearRank {
  resultPbpoker.hasRank = NO;
  resultPbpoker.rank = PBPokerRankPokerRank2;
  return self;
}
- (BOOL) hasSuit {
  return resultPbpoker.hasSuit;
}
- (PBPokerSuit) suit {
  return resultPbpoker.suit;
}
- (PBPokerBuilder*) setSuit:(PBPokerSuit) value {
  resultPbpoker.hasSuit = YES;
  resultPbpoker.suit = value;
  return self;
}
- (PBPokerBuilder*) clearSuit {
  resultPbpoker.hasSuit = NO;
  resultPbpoker.suit = PBPokerSuitPokerSuitDiamond;
  return self;
}
- (BOOL) hasFaceUp {
  return resultPbpoker.hasFaceUp;
}
- (BOOL) faceUp {
  return resultPbpoker.faceUp;
}
- (PBPokerBuilder*) setFaceUp:(BOOL) value {
  resultPbpoker.hasFaceUp = YES;
  resultPbpoker.faceUp = value;
  return self;
}
- (PBPokerBuilder*) clearFaceUp {
  resultPbpoker.hasFaceUp = NO;
  resultPbpoker.faceUp = NO;
  return self;
}
@end

@interface PBZJHGameState ()
@property SInt32 totalBet;
@property SInt32 singleBet;
@property (strong) NSMutableArray * usersInfoArray;
@end

@implementation PBZJHGameState

- (BOOL) hasTotalBet {
  return !!hasTotalBet_;
}
- (void) setHasTotalBet:(BOOL) _value_ {
  hasTotalBet_ = !!_value_;
}
@synthesize totalBet;
- (BOOL) hasSingleBet {
  return !!hasSingleBet_;
}
- (void) setHasSingleBet:(BOOL) _value_ {
  hasSingleBet_ = !!_value_;
}
@synthesize singleBet;
@synthesize usersInfoArray;
@dynamic usersInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.totalBet = 0;
    self.singleBet = 0;
  }
  return self;
}
static PBZJHGameState* defaultPBZJHGameStateInstance = nil;
+ (void) initialize {
  if (self == [PBZJHGameState class]) {
    defaultPBZJHGameStateInstance = [[PBZJHGameState alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBZJHGameStateInstance;
}
- (instancetype) defaultInstance {
  return defaultPBZJHGameStateInstance;
}
- (NSArray *)usersInfo {
  return usersInfoArray;
}
- (PBZJHUserPlayInfo*)usersInfoAtIndex:(NSUInteger)index {
  return [usersInfoArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTotalBet) {
    return NO;
  }
  if (!self.hasSingleBet) {
    return NO;
  }
  __block BOOL isInitusersInfo = YES;
   [self.usersInfo enumerateObjectsUsingBlock:^(PBZJHUserPlayInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusersInfo = NO;
      *stop = YES;
    }
  }];
  if (!isInitusersInfo) return isInitusersInfo;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalBet) {
    [output writeInt32:1 value:self.totalBet];
  }
  if (self.hasSingleBet) {
    [output writeInt32:2 value:self.singleBet];
  }
  [self.usersInfoArray enumerateObjectsUsingBlock:^(PBZJHUserPlayInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTotalBet) {
    size_ += computeInt32Size(1, self.totalBet);
  }
  if (self.hasSingleBet) {
    size_ += computeInt32Size(2, self.singleBet);
  }
  [self.usersInfoArray enumerateObjectsUsingBlock:^(PBZJHUserPlayInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBZJHGameState*) parseFromData:(NSData*) data {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromData:data] build];
}
+ (PBZJHGameState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromInputStream:input] build];
}
+ (PBZJHGameState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHGameState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameState*)[[[PBZJHGameState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameStateBuilder*) builder {
  return [[PBZJHGameStateBuilder alloc] init];
}
+ (PBZJHGameStateBuilder*) builderWithPrototype:(PBZJHGameState*) prototype {
  return [[PBZJHGameState builder] mergeFrom:prototype];
}
- (PBZJHGameStateBuilder*) builder {
  return [PBZJHGameState builder];
}
- (PBZJHGameStateBuilder*) toBuilder {
  return [PBZJHGameState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTotalBet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalBet", [NSNumber numberWithInteger:self.totalBet]];
  }
  if (self.hasSingleBet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"singleBet", [NSNumber numberWithInteger:self.singleBet]];
  }
  [self.usersInfoArray enumerateObjectsUsingBlock:^(PBZJHUserPlayInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"usersInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBZJHGameState class]]) {
    return NO;
  }
  PBZJHGameState *otherMessage = other;
  return
      self.hasTotalBet == otherMessage.hasTotalBet &&
      (!self.hasTotalBet || self.totalBet == otherMessage.totalBet) &&
      self.hasSingleBet == otherMessage.hasSingleBet &&
      (!self.hasSingleBet || self.singleBet == otherMessage.singleBet) &&
      [self.usersInfoArray isEqualToArray:otherMessage.usersInfoArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTotalBet) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalBet] hash];
  }
  if (self.hasSingleBet) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.singleBet] hash];
  }
  [self.usersInfoArray enumerateObjectsUsingBlock:^(PBZJHUserPlayInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBZJHGameStateBuilder()
@property (strong) PBZJHGameState* resultPbzjhgameState;
@end

@implementation PBZJHGameStateBuilder
@synthesize resultPbzjhgameState;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbzjhgameState = [[PBZJHGameState alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbzjhgameState;
}
- (PBZJHGameStateBuilder*) clear {
  self.resultPbzjhgameState = [[PBZJHGameState alloc] init];
  return self;
}
- (PBZJHGameStateBuilder*) clone {
  return [PBZJHGameState builderWithPrototype:resultPbzjhgameState];
}
- (PBZJHGameState*) defaultInstance {
  return [PBZJHGameState defaultInstance];
}
- (PBZJHGameState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHGameState*) buildPartial {
  PBZJHGameState* returnMe = resultPbzjhgameState;
  self.resultPbzjhgameState = nil;
  return returnMe;
}
- (PBZJHGameStateBuilder*) mergeFrom:(PBZJHGameState*) other {
  if (other == [PBZJHGameState defaultInstance]) {
    return self;
  }
  if (other.hasTotalBet) {
    [self setTotalBet:other.totalBet];
  }
  if (other.hasSingleBet) {
    [self setSingleBet:other.singleBet];
  }
  if (other.usersInfoArray.count > 0) {
    if (resultPbzjhgameState.usersInfoArray == nil) {
      resultPbzjhgameState.usersInfoArray = [[NSMutableArray alloc] initWithArray:other.usersInfoArray];
    } else {
      [resultPbzjhgameState.usersInfoArray addObjectsFromArray:other.usersInfoArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHGameStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHGameStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTotalBet:[input readInt32]];
        break;
      }
      case 16: {
        [self setSingleBet:[input readInt32]];
        break;
      }
      case 50: {
        PBZJHUserPlayInfoBuilder* subBuilder = [PBZJHUserPlayInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersInfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalBet {
  return resultPbzjhgameState.hasTotalBet;
}
- (SInt32) totalBet {
  return resultPbzjhgameState.totalBet;
}
- (PBZJHGameStateBuilder*) setTotalBet:(SInt32) value {
  resultPbzjhgameState.hasTotalBet = YES;
  resultPbzjhgameState.totalBet = value;
  return self;
}
- (PBZJHGameStateBuilder*) clearTotalBet {
  resultPbzjhgameState.hasTotalBet = NO;
  resultPbzjhgameState.totalBet = 0;
  return self;
}
- (BOOL) hasSingleBet {
  return resultPbzjhgameState.hasSingleBet;
}
- (SInt32) singleBet {
  return resultPbzjhgameState.singleBet;
}
- (PBZJHGameStateBuilder*) setSingleBet:(SInt32) value {
  resultPbzjhgameState.hasSingleBet = YES;
  resultPbzjhgameState.singleBet = value;
  return self;
}
- (PBZJHGameStateBuilder*) clearSingleBet {
  resultPbzjhgameState.hasSingleBet = NO;
  resultPbzjhgameState.singleBet = 0;
  return self;
}
- (NSMutableArray *)usersInfo {
  return resultPbzjhgameState.usersInfoArray;
}
- (PBZJHUserPlayInfo*)usersInfoAtIndex:(NSUInteger)index {
  return [resultPbzjhgameState usersInfoAtIndex:index];
}
- (PBZJHGameStateBuilder *)addUsersInfo:(PBZJHUserPlayInfo*)value {
  if (resultPbzjhgameState.usersInfoArray == nil) {
    resultPbzjhgameState.usersInfoArray = [[NSMutableArray alloc]init];
  }
  [resultPbzjhgameState.usersInfoArray addObject:value];
  return self;
}
- (PBZJHGameStateBuilder *)setUsersInfoArray:(NSArray *)array {
  resultPbzjhgameState.usersInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBZJHGameStateBuilder *)clearUsersInfo {
  resultPbzjhgameState.usersInfoArray = nil;
  return self;
}
@end

@interface PBZJHPoker ()
@property (strong) NSMutableArray * pokersArray;
@property PBZJHCardType cardType;
@end

@implementation PBZJHPoker

@synthesize pokersArray;
@dynamic pokers;
- (BOOL) hasCardType {
  return !!hasCardType_;
}
- (void) setHasCardType:(BOOL) _value_ {
  hasCardType_ = !!_value_;
}
@synthesize cardType;
- (instancetype) init {
  if ((self = [super init])) {
    self.cardType = PBZJHCardTypeUnknow;
  }
  return self;
}
static PBZJHPoker* defaultPBZJHPokerInstance = nil;
+ (void) initialize {
  if (self == [PBZJHPoker class]) {
    defaultPBZJHPokerInstance = [[PBZJHPoker alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBZJHPokerInstance;
}
- (instancetype) defaultInstance {
  return defaultPBZJHPokerInstance;
}
- (NSArray *)pokers {
  return pokersArray;
}
- (PBPoker*)pokersAtIndex:(NSUInteger)index {
  return [pokersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitpokers = YES;
   [self.pokers enumerateObjectsUsingBlock:^(PBPoker *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitpokers = NO;
      *stop = YES;
    }
  }];
  if (!isInitpokers) return isInitpokers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.pokersArray enumerateObjectsUsingBlock:^(PBPoker *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasCardType) {
    [output writeEnum:2 value:self.cardType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.pokersArray enumerateObjectsUsingBlock:^(PBPoker *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasCardType) {
    size_ += computeEnumSize(2, self.cardType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBZJHPoker*) parseFromData:(NSData*) data {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromData:data] build];
}
+ (PBZJHPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromInputStream:input] build];
}
+ (PBZJHPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHPoker*)[[[PBZJHPoker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHPokerBuilder*) builder {
  return [[PBZJHPokerBuilder alloc] init];
}
+ (PBZJHPokerBuilder*) builderWithPrototype:(PBZJHPoker*) prototype {
  return [[PBZJHPoker builder] mergeFrom:prototype];
}
- (PBZJHPokerBuilder*) builder {
  return [PBZJHPoker builder];
}
- (PBZJHPokerBuilder*) toBuilder {
  return [PBZJHPoker builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.pokersArray enumerateObjectsUsingBlock:^(PBPoker *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"pokers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCardType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardType", NSStringFromPBZJHCardType(self.cardType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBZJHPoker class]]) {
    return NO;
  }
  PBZJHPoker *otherMessage = other;
  return
      [self.pokersArray isEqualToArray:otherMessage.pokersArray] &&
      self.hasCardType == otherMessage.hasCardType &&
      (!self.hasCardType || self.cardType == otherMessage.cardType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.pokersArray enumerateObjectsUsingBlock:^(PBPoker *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCardType) {
    hashCode = hashCode * 31 + self.cardType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBZJHPokerBuilder()
@property (strong) PBZJHPoker* resultPbzjhpoker;
@end

@implementation PBZJHPokerBuilder
@synthesize resultPbzjhpoker;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbzjhpoker = [[PBZJHPoker alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbzjhpoker;
}
- (PBZJHPokerBuilder*) clear {
  self.resultPbzjhpoker = [[PBZJHPoker alloc] init];
  return self;
}
- (PBZJHPokerBuilder*) clone {
  return [PBZJHPoker builderWithPrototype:resultPbzjhpoker];
}
- (PBZJHPoker*) defaultInstance {
  return [PBZJHPoker defaultInstance];
}
- (PBZJHPoker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHPoker*) buildPartial {
  PBZJHPoker* returnMe = resultPbzjhpoker;
  self.resultPbzjhpoker = nil;
  return returnMe;
}
- (PBZJHPokerBuilder*) mergeFrom:(PBZJHPoker*) other {
  if (other == [PBZJHPoker defaultInstance]) {
    return self;
  }
  if (other.pokersArray.count > 0) {
    if (resultPbzjhpoker.pokersArray == nil) {
      resultPbzjhpoker.pokersArray = [[NSMutableArray alloc] initWithArray:other.pokersArray];
    } else {
      [resultPbzjhpoker.pokersArray addObjectsFromArray:other.pokersArray];
    }
  }
  if (other.hasCardType) {
    [self setCardType:other.cardType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBPokerBuilder* subBuilder = [PBPoker builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPokers:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        PBZJHCardType value = (PBZJHCardType)[input readEnum];
        if (PBZJHCardTypeIsValidValue(value)) {
          [self setCardType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (NSMutableArray *)pokers {
  return resultPbzjhpoker.pokersArray;
}
- (PBPoker*)pokersAtIndex:(NSUInteger)index {
  return [resultPbzjhpoker pokersAtIndex:index];
}
- (PBZJHPokerBuilder *)addPokers:(PBPoker*)value {
  if (resultPbzjhpoker.pokersArray == nil) {
    resultPbzjhpoker.pokersArray = [[NSMutableArray alloc]init];
  }
  [resultPbzjhpoker.pokersArray addObject:value];
  return self;
}
- (PBZJHPokerBuilder *)setPokersArray:(NSArray *)array {
  resultPbzjhpoker.pokersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBZJHPokerBuilder *)clearPokers {
  resultPbzjhpoker.pokersArray = nil;
  return self;
}
- (BOOL) hasCardType {
  return resultPbzjhpoker.hasCardType;
}
- (PBZJHCardType) cardType {
  return resultPbzjhpoker.cardType;
}
- (PBZJHPokerBuilder*) setCardType:(PBZJHCardType) value {
  resultPbzjhpoker.hasCardType = YES;
  resultPbzjhpoker.cardType = value;
  return self;
}
- (PBZJHPokerBuilder*) clearCardType {
  resultPbzjhpoker.hasCardType = NO;
  resultPbzjhpoker.cardType = PBZJHCardTypeUnknow;
  return self;
}
@end

@interface PBZJHUserPoker ()
@property (strong) NSString* userId;
@property (strong) PBZJHPoker* pokers;
@end

@implementation PBZJHUserPoker

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasPokers {
  return !!hasPokers_;
}
- (void) setHasPokers:(BOOL) _value_ {
  hasPokers_ = !!_value_;
}
@synthesize pokers;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.pokers = [PBZJHPoker defaultInstance];
  }
  return self;
}
static PBZJHUserPoker* defaultPBZJHUserPokerInstance = nil;
+ (void) initialize {
  if (self == [PBZJHUserPoker class]) {
    defaultPBZJHUserPokerInstance = [[PBZJHUserPoker alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBZJHUserPokerInstance;
}
- (instancetype) defaultInstance {
  return defaultPBZJHUserPokerInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (self.hasPokers) {
    if (!self.pokers.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasPokers) {
    [output writeMessage:2 value:self.pokers];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasPokers) {
    size_ += computeMessageSize(2, self.pokers);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBZJHUserPoker*) parseFromData:(NSData*) data {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromData:data] build];
}
+ (PBZJHUserPoker*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromInputStream:input] build];
}
+ (PBZJHUserPoker*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHUserPoker*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPoker*)[[[PBZJHUserPoker builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPokerBuilder*) builder {
  return [[PBZJHUserPokerBuilder alloc] init];
}
+ (PBZJHUserPokerBuilder*) builderWithPrototype:(PBZJHUserPoker*) prototype {
  return [[PBZJHUserPoker builder] mergeFrom:prototype];
}
- (PBZJHUserPokerBuilder*) builder {
  return [PBZJHUserPoker builder];
}
- (PBZJHUserPokerBuilder*) toBuilder {
  return [PBZJHUserPoker builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasPokers) {
    [output appendFormat:@"%@%@ {\n", indent, @"pokers"];
    [self.pokers writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBZJHUserPoker class]]) {
    return NO;
  }
  PBZJHUserPoker *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasPokers == otherMessage.hasPokers &&
      (!self.hasPokers || [self.pokers isEqual:otherMessage.pokers]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasPokers) {
    hashCode = hashCode * 31 + [self.pokers hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBZJHUserPokerBuilder()
@property (strong) PBZJHUserPoker* resultPbzjhuserPoker;
@end

@implementation PBZJHUserPokerBuilder
@synthesize resultPbzjhuserPoker;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbzjhuserPoker = [[PBZJHUserPoker alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbzjhuserPoker;
}
- (PBZJHUserPokerBuilder*) clear {
  self.resultPbzjhuserPoker = [[PBZJHUserPoker alloc] init];
  return self;
}
- (PBZJHUserPokerBuilder*) clone {
  return [PBZJHUserPoker builderWithPrototype:resultPbzjhuserPoker];
}
- (PBZJHUserPoker*) defaultInstance {
  return [PBZJHUserPoker defaultInstance];
}
- (PBZJHUserPoker*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHUserPoker*) buildPartial {
  PBZJHUserPoker* returnMe = resultPbzjhuserPoker;
  self.resultPbzjhuserPoker = nil;
  return returnMe;
}
- (PBZJHUserPokerBuilder*) mergeFrom:(PBZJHUserPoker*) other {
  if (other == [PBZJHUserPoker defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasPokers) {
    [self mergePokers:other.pokers];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHUserPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHUserPokerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBZJHPokerBuilder* subBuilder = [PBZJHPoker builder];
        if (self.hasPokers) {
          [subBuilder mergeFrom:self.pokers];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPokers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbzjhuserPoker.hasUserId;
}
- (NSString*) userId {
  return resultPbzjhuserPoker.userId;
}
- (PBZJHUserPokerBuilder*) setUserId:(NSString*) value {
  resultPbzjhuserPoker.hasUserId = YES;
  resultPbzjhuserPoker.userId = value;
  return self;
}
- (PBZJHUserPokerBuilder*) clearUserId {
  resultPbzjhuserPoker.hasUserId = NO;
  resultPbzjhuserPoker.userId = @"";
  return self;
}
- (BOOL) hasPokers {
  return resultPbzjhuserPoker.hasPokers;
}
- (PBZJHPoker*) pokers {
  return resultPbzjhuserPoker.pokers;
}
- (PBZJHUserPokerBuilder*) setPokers:(PBZJHPoker*) value {
  resultPbzjhuserPoker.hasPokers = YES;
  resultPbzjhuserPoker.pokers = value;
  return self;
}
- (PBZJHUserPokerBuilder*) setPokersBuilder:(PBZJHPokerBuilder*) builderForValue {
  return [self setPokers:[builderForValue build]];
}
- (PBZJHUserPokerBuilder*) mergePokers:(PBZJHPoker*) value {
  if (resultPbzjhuserPoker.hasPokers &&
      resultPbzjhuserPoker.pokers != [PBZJHPoker defaultInstance]) {
    resultPbzjhuserPoker.pokers =
      [[[PBZJHPoker builderWithPrototype:resultPbzjhuserPoker.pokers] mergeFrom:value] buildPartial];
  } else {
    resultPbzjhuserPoker.pokers = value;
  }
  resultPbzjhuserPoker.hasPokers = YES;
  return self;
}
- (PBZJHUserPokerBuilder*) clearPokers {
  resultPbzjhuserPoker.hasPokers = NO;
  resultPbzjhuserPoker.pokers = [PBZJHPoker defaultInstance];
  return self;
}
@end

@interface PBZJHUserPlayInfo ()
@property (strong) NSString* userId;
@property (strong) PBZJHPoker* pokers;
@property SInt32 totalBet;
@property BOOL isAutoBet;
@property PBZJHUserAction lastAction;
@property BOOL alreadCheckCard;
@property BOOL alreadFoldCard;
@property BOOL alreadShowCard;
@property BOOL alreadCompareLose;
@end

@implementation PBZJHUserPlayInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasPokers {
  return !!hasPokers_;
}
- (void) setHasPokers:(BOOL) _value_ {
  hasPokers_ = !!_value_;
}
@synthesize pokers;
- (BOOL) hasTotalBet {
  return !!hasTotalBet_;
}
- (void) setHasTotalBet:(BOOL) _value_ {
  hasTotalBet_ = !!_value_;
}
@synthesize totalBet;
- (BOOL) hasIsAutoBet {
  return !!hasIsAutoBet_;
}
- (void) setHasIsAutoBet:(BOOL) _value_ {
  hasIsAutoBet_ = !!_value_;
}
- (BOOL) isAutoBet {
  return !!isAutoBet_;
}
- (void) setIsAutoBet:(BOOL) _value_ {
  isAutoBet_ = !!_value_;
}
- (BOOL) hasLastAction {
  return !!hasLastAction_;
}
- (void) setHasLastAction:(BOOL) _value_ {
  hasLastAction_ = !!_value_;
}
@synthesize lastAction;
- (BOOL) hasAlreadCheckCard {
  return !!hasAlreadCheckCard_;
}
- (void) setHasAlreadCheckCard:(BOOL) _value_ {
  hasAlreadCheckCard_ = !!_value_;
}
- (BOOL) alreadCheckCard {
  return !!alreadCheckCard_;
}
- (void) setAlreadCheckCard:(BOOL) _value_ {
  alreadCheckCard_ = !!_value_;
}
- (BOOL) hasAlreadFoldCard {
  return !!hasAlreadFoldCard_;
}
- (void) setHasAlreadFoldCard:(BOOL) _value_ {
  hasAlreadFoldCard_ = !!_value_;
}
- (BOOL) alreadFoldCard {
  return !!alreadFoldCard_;
}
- (void) setAlreadFoldCard:(BOOL) _value_ {
  alreadFoldCard_ = !!_value_;
}
- (BOOL) hasAlreadShowCard {
  return !!hasAlreadShowCard_;
}
- (void) setHasAlreadShowCard:(BOOL) _value_ {
  hasAlreadShowCard_ = !!_value_;
}
- (BOOL) alreadShowCard {
  return !!alreadShowCard_;
}
- (void) setAlreadShowCard:(BOOL) _value_ {
  alreadShowCard_ = !!_value_;
}
- (BOOL) hasAlreadCompareLose {
  return !!hasAlreadCompareLose_;
}
- (void) setHasAlreadCompareLose:(BOOL) _value_ {
  hasAlreadCompareLose_ = !!_value_;
}
- (BOOL) alreadCompareLose {
  return !!alreadCompareLose_;
}
- (void) setAlreadCompareLose:(BOOL) _value_ {
  alreadCompareLose_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.pokers = [PBZJHPoker defaultInstance];
    self.totalBet = 0;
    self.isAutoBet = NO;
    self.lastAction = PBZJHUserActionNone;
    self.alreadCheckCard = NO;
    self.alreadFoldCard = NO;
    self.alreadShowCard = NO;
    self.alreadCompareLose = NO;
  }
  return self;
}
static PBZJHUserPlayInfo* defaultPBZJHUserPlayInfoInstance = nil;
+ (void) initialize {
  if (self == [PBZJHUserPlayInfo class]) {
    defaultPBZJHUserPlayInfoInstance = [[PBZJHUserPlayInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBZJHUserPlayInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultPBZJHUserPlayInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (self.hasPokers) {
    if (!self.pokers.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasPokers) {
    [output writeMessage:2 value:self.pokers];
  }
  if (self.hasTotalBet) {
    [output writeInt32:5 value:self.totalBet];
  }
  if (self.hasIsAutoBet) {
    [output writeBool:6 value:self.isAutoBet];
  }
  if (self.hasLastAction) {
    [output writeEnum:7 value:self.lastAction];
  }
  if (self.hasAlreadCheckCard) {
    [output writeBool:11 value:self.alreadCheckCard];
  }
  if (self.hasAlreadFoldCard) {
    [output writeBool:12 value:self.alreadFoldCard];
  }
  if (self.hasAlreadShowCard) {
    [output writeBool:13 value:self.alreadShowCard];
  }
  if (self.hasAlreadCompareLose) {
    [output writeBool:14 value:self.alreadCompareLose];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasPokers) {
    size_ += computeMessageSize(2, self.pokers);
  }
  if (self.hasTotalBet) {
    size_ += computeInt32Size(5, self.totalBet);
  }
  if (self.hasIsAutoBet) {
    size_ += computeBoolSize(6, self.isAutoBet);
  }
  if (self.hasLastAction) {
    size_ += computeEnumSize(7, self.lastAction);
  }
  if (self.hasAlreadCheckCard) {
    size_ += computeBoolSize(11, self.alreadCheckCard);
  }
  if (self.hasAlreadFoldCard) {
    size_ += computeBoolSize(12, self.alreadFoldCard);
  }
  if (self.hasAlreadShowCard) {
    size_ += computeBoolSize(13, self.alreadShowCard);
  }
  if (self.hasAlreadCompareLose) {
    size_ += computeBoolSize(14, self.alreadCompareLose);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBZJHUserPlayInfo*) parseFromData:(NSData*) data {
  return (PBZJHUserPlayInfo*)[[[PBZJHUserPlayInfo builder] mergeFromData:data] build];
}
+ (PBZJHUserPlayInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPlayInfo*)[[[PBZJHUserPlayInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPlayInfo*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHUserPlayInfo*)[[[PBZJHUserPlayInfo builder] mergeFromInputStream:input] build];
}
+ (PBZJHUserPlayInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPlayInfo*)[[[PBZJHUserPlayInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPlayInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHUserPlayInfo*)[[[PBZJHUserPlayInfo builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHUserPlayInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHUserPlayInfo*)[[[PBZJHUserPlayInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHUserPlayInfoBuilder*) builder {
  return [[PBZJHUserPlayInfoBuilder alloc] init];
}
+ (PBZJHUserPlayInfoBuilder*) builderWithPrototype:(PBZJHUserPlayInfo*) prototype {
  return [[PBZJHUserPlayInfo builder] mergeFrom:prototype];
}
- (PBZJHUserPlayInfoBuilder*) builder {
  return [PBZJHUserPlayInfo builder];
}
- (PBZJHUserPlayInfoBuilder*) toBuilder {
  return [PBZJHUserPlayInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasPokers) {
    [output appendFormat:@"%@%@ {\n", indent, @"pokers"];
    [self.pokers writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTotalBet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalBet", [NSNumber numberWithInteger:self.totalBet]];
  }
  if (self.hasIsAutoBet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAutoBet", [NSNumber numberWithBool:self.isAutoBet]];
  }
  if (self.hasLastAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastAction", NSStringFromPBZJHUserAction(self.lastAction)];
  }
  if (self.hasAlreadCheckCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alreadCheckCard", [NSNumber numberWithBool:self.alreadCheckCard]];
  }
  if (self.hasAlreadFoldCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alreadFoldCard", [NSNumber numberWithBool:self.alreadFoldCard]];
  }
  if (self.hasAlreadShowCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alreadShowCard", [NSNumber numberWithBool:self.alreadShowCard]];
  }
  if (self.hasAlreadCompareLose) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alreadCompareLose", [NSNumber numberWithBool:self.alreadCompareLose]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBZJHUserPlayInfo class]]) {
    return NO;
  }
  PBZJHUserPlayInfo *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasPokers == otherMessage.hasPokers &&
      (!self.hasPokers || [self.pokers isEqual:otherMessage.pokers]) &&
      self.hasTotalBet == otherMessage.hasTotalBet &&
      (!self.hasTotalBet || self.totalBet == otherMessage.totalBet) &&
      self.hasIsAutoBet == otherMessage.hasIsAutoBet &&
      (!self.hasIsAutoBet || self.isAutoBet == otherMessage.isAutoBet) &&
      self.hasLastAction == otherMessage.hasLastAction &&
      (!self.hasLastAction || self.lastAction == otherMessage.lastAction) &&
      self.hasAlreadCheckCard == otherMessage.hasAlreadCheckCard &&
      (!self.hasAlreadCheckCard || self.alreadCheckCard == otherMessage.alreadCheckCard) &&
      self.hasAlreadFoldCard == otherMessage.hasAlreadFoldCard &&
      (!self.hasAlreadFoldCard || self.alreadFoldCard == otherMessage.alreadFoldCard) &&
      self.hasAlreadShowCard == otherMessage.hasAlreadShowCard &&
      (!self.hasAlreadShowCard || self.alreadShowCard == otherMessage.alreadShowCard) &&
      self.hasAlreadCompareLose == otherMessage.hasAlreadCompareLose &&
      (!self.hasAlreadCompareLose || self.alreadCompareLose == otherMessage.alreadCompareLose) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasPokers) {
    hashCode = hashCode * 31 + [self.pokers hash];
  }
  if (self.hasTotalBet) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalBet] hash];
  }
  if (self.hasIsAutoBet) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAutoBet] hash];
  }
  if (self.hasLastAction) {
    hashCode = hashCode * 31 + self.lastAction;
  }
  if (self.hasAlreadCheckCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.alreadCheckCard] hash];
  }
  if (self.hasAlreadFoldCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.alreadFoldCard] hash];
  }
  if (self.hasAlreadShowCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.alreadShowCard] hash];
  }
  if (self.hasAlreadCompareLose) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.alreadCompareLose] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBZJHUserPlayInfoBuilder()
@property (strong) PBZJHUserPlayInfo* resultPbzjhuserPlayInfo;
@end

@implementation PBZJHUserPlayInfoBuilder
@synthesize resultPbzjhuserPlayInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbzjhuserPlayInfo = [[PBZJHUserPlayInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbzjhuserPlayInfo;
}
- (PBZJHUserPlayInfoBuilder*) clear {
  self.resultPbzjhuserPlayInfo = [[PBZJHUserPlayInfo alloc] init];
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clone {
  return [PBZJHUserPlayInfo builderWithPrototype:resultPbzjhuserPlayInfo];
}
- (PBZJHUserPlayInfo*) defaultInstance {
  return [PBZJHUserPlayInfo defaultInstance];
}
- (PBZJHUserPlayInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHUserPlayInfo*) buildPartial {
  PBZJHUserPlayInfo* returnMe = resultPbzjhuserPlayInfo;
  self.resultPbzjhuserPlayInfo = nil;
  return returnMe;
}
- (PBZJHUserPlayInfoBuilder*) mergeFrom:(PBZJHUserPlayInfo*) other {
  if (other == [PBZJHUserPlayInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasPokers) {
    [self mergePokers:other.pokers];
  }
  if (other.hasTotalBet) {
    [self setTotalBet:other.totalBet];
  }
  if (other.hasIsAutoBet) {
    [self setIsAutoBet:other.isAutoBet];
  }
  if (other.hasLastAction) {
    [self setLastAction:other.lastAction];
  }
  if (other.hasAlreadCheckCard) {
    [self setAlreadCheckCard:other.alreadCheckCard];
  }
  if (other.hasAlreadFoldCard) {
    [self setAlreadFoldCard:other.alreadFoldCard];
  }
  if (other.hasAlreadShowCard) {
    [self setAlreadShowCard:other.alreadShowCard];
  }
  if (other.hasAlreadCompareLose) {
    [self setAlreadCompareLose:other.alreadCompareLose];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHUserPlayInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHUserPlayInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        PBZJHPokerBuilder* subBuilder = [PBZJHPoker builder];
        if (self.hasPokers) {
          [subBuilder mergeFrom:self.pokers];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPokers:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setTotalBet:[input readInt32]];
        break;
      }
      case 48: {
        [self setIsAutoBet:[input readBool]];
        break;
      }
      case 56: {
        PBZJHUserAction value = (PBZJHUserAction)[input readEnum];
        if (PBZJHUserActionIsValidValue(value)) {
          [self setLastAction:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 88: {
        [self setAlreadCheckCard:[input readBool]];
        break;
      }
      case 96: {
        [self setAlreadFoldCard:[input readBool]];
        break;
      }
      case 104: {
        [self setAlreadShowCard:[input readBool]];
        break;
      }
      case 112: {
        [self setAlreadCompareLose:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultPbzjhuserPlayInfo.hasUserId;
}
- (NSString*) userId {
  return resultPbzjhuserPlayInfo.userId;
}
- (PBZJHUserPlayInfoBuilder*) setUserId:(NSString*) value {
  resultPbzjhuserPlayInfo.hasUserId = YES;
  resultPbzjhuserPlayInfo.userId = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearUserId {
  resultPbzjhuserPlayInfo.hasUserId = NO;
  resultPbzjhuserPlayInfo.userId = @"";
  return self;
}
- (BOOL) hasPokers {
  return resultPbzjhuserPlayInfo.hasPokers;
}
- (PBZJHPoker*) pokers {
  return resultPbzjhuserPlayInfo.pokers;
}
- (PBZJHUserPlayInfoBuilder*) setPokers:(PBZJHPoker*) value {
  resultPbzjhuserPlayInfo.hasPokers = YES;
  resultPbzjhuserPlayInfo.pokers = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) setPokersBuilder:(PBZJHPokerBuilder*) builderForValue {
  return [self setPokers:[builderForValue build]];
}
- (PBZJHUserPlayInfoBuilder*) mergePokers:(PBZJHPoker*) value {
  if (resultPbzjhuserPlayInfo.hasPokers &&
      resultPbzjhuserPlayInfo.pokers != [PBZJHPoker defaultInstance]) {
    resultPbzjhuserPlayInfo.pokers =
      [[[PBZJHPoker builderWithPrototype:resultPbzjhuserPlayInfo.pokers] mergeFrom:value] buildPartial];
  } else {
    resultPbzjhuserPlayInfo.pokers = value;
  }
  resultPbzjhuserPlayInfo.hasPokers = YES;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearPokers {
  resultPbzjhuserPlayInfo.hasPokers = NO;
  resultPbzjhuserPlayInfo.pokers = [PBZJHPoker defaultInstance];
  return self;
}
- (BOOL) hasTotalBet {
  return resultPbzjhuserPlayInfo.hasTotalBet;
}
- (SInt32) totalBet {
  return resultPbzjhuserPlayInfo.totalBet;
}
- (PBZJHUserPlayInfoBuilder*) setTotalBet:(SInt32) value {
  resultPbzjhuserPlayInfo.hasTotalBet = YES;
  resultPbzjhuserPlayInfo.totalBet = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearTotalBet {
  resultPbzjhuserPlayInfo.hasTotalBet = NO;
  resultPbzjhuserPlayInfo.totalBet = 0;
  return self;
}
- (BOOL) hasIsAutoBet {
  return resultPbzjhuserPlayInfo.hasIsAutoBet;
}
- (BOOL) isAutoBet {
  return resultPbzjhuserPlayInfo.isAutoBet;
}
- (PBZJHUserPlayInfoBuilder*) setIsAutoBet:(BOOL) value {
  resultPbzjhuserPlayInfo.hasIsAutoBet = YES;
  resultPbzjhuserPlayInfo.isAutoBet = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearIsAutoBet {
  resultPbzjhuserPlayInfo.hasIsAutoBet = NO;
  resultPbzjhuserPlayInfo.isAutoBet = NO;
  return self;
}
- (BOOL) hasLastAction {
  return resultPbzjhuserPlayInfo.hasLastAction;
}
- (PBZJHUserAction) lastAction {
  return resultPbzjhuserPlayInfo.lastAction;
}
- (PBZJHUserPlayInfoBuilder*) setLastAction:(PBZJHUserAction) value {
  resultPbzjhuserPlayInfo.hasLastAction = YES;
  resultPbzjhuserPlayInfo.lastAction = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearLastAction {
  resultPbzjhuserPlayInfo.hasLastAction = NO;
  resultPbzjhuserPlayInfo.lastAction = PBZJHUserActionNone;
  return self;
}
- (BOOL) hasAlreadCheckCard {
  return resultPbzjhuserPlayInfo.hasAlreadCheckCard;
}
- (BOOL) alreadCheckCard {
  return resultPbzjhuserPlayInfo.alreadCheckCard;
}
- (PBZJHUserPlayInfoBuilder*) setAlreadCheckCard:(BOOL) value {
  resultPbzjhuserPlayInfo.hasAlreadCheckCard = YES;
  resultPbzjhuserPlayInfo.alreadCheckCard = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearAlreadCheckCard {
  resultPbzjhuserPlayInfo.hasAlreadCheckCard = NO;
  resultPbzjhuserPlayInfo.alreadCheckCard = NO;
  return self;
}
- (BOOL) hasAlreadFoldCard {
  return resultPbzjhuserPlayInfo.hasAlreadFoldCard;
}
- (BOOL) alreadFoldCard {
  return resultPbzjhuserPlayInfo.alreadFoldCard;
}
- (PBZJHUserPlayInfoBuilder*) setAlreadFoldCard:(BOOL) value {
  resultPbzjhuserPlayInfo.hasAlreadFoldCard = YES;
  resultPbzjhuserPlayInfo.alreadFoldCard = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearAlreadFoldCard {
  resultPbzjhuserPlayInfo.hasAlreadFoldCard = NO;
  resultPbzjhuserPlayInfo.alreadFoldCard = NO;
  return self;
}
- (BOOL) hasAlreadShowCard {
  return resultPbzjhuserPlayInfo.hasAlreadShowCard;
}
- (BOOL) alreadShowCard {
  return resultPbzjhuserPlayInfo.alreadShowCard;
}
- (PBZJHUserPlayInfoBuilder*) setAlreadShowCard:(BOOL) value {
  resultPbzjhuserPlayInfo.hasAlreadShowCard = YES;
  resultPbzjhuserPlayInfo.alreadShowCard = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearAlreadShowCard {
  resultPbzjhuserPlayInfo.hasAlreadShowCard = NO;
  resultPbzjhuserPlayInfo.alreadShowCard = NO;
  return self;
}
- (BOOL) hasAlreadCompareLose {
  return resultPbzjhuserPlayInfo.hasAlreadCompareLose;
}
- (BOOL) alreadCompareLose {
  return resultPbzjhuserPlayInfo.alreadCompareLose;
}
- (PBZJHUserPlayInfoBuilder*) setAlreadCompareLose:(BOOL) value {
  resultPbzjhuserPlayInfo.hasAlreadCompareLose = YES;
  resultPbzjhuserPlayInfo.alreadCompareLose = value;
  return self;
}
- (PBZJHUserPlayInfoBuilder*) clearAlreadCompareLose {
  resultPbzjhuserPlayInfo.hasAlreadCompareLose = NO;
  resultPbzjhuserPlayInfo.alreadCompareLose = NO;
  return self;
}
@end

@interface PBZJHGameResult ()
@property (strong) NSMutableArray * userResultArray;
@end

@implementation PBZJHGameResult

@synthesize userResultArray;
@dynamic userResult;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBZJHGameResult* defaultPBZJHGameResultInstance = nil;
+ (void) initialize {
  if (self == [PBZJHGameResult class]) {
    defaultPBZJHGameResultInstance = [[PBZJHGameResult alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBZJHGameResultInstance;
}
- (instancetype) defaultInstance {
  return defaultPBZJHGameResultInstance;
}
- (NSArray *)userResult {
  return userResultArray;
}
- (PBUserResult*)userResultAtIndex:(NSUInteger)index {
  return [userResultArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserResult = YES;
   [self.userResult enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserResult = NO;
      *stop = YES;
    }
  }];
  if (!isInituserResult) return isInituserResult;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBZJHGameResult*) parseFromData:(NSData*) data {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromData:data] build];
}
+ (PBZJHGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromInputStream:input] build];
}
+ (PBZJHGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromCodedInputStream:input] build];
}
+ (PBZJHGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBZJHGameResult*)[[[PBZJHGameResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBZJHGameResultBuilder*) builder {
  return [[PBZJHGameResultBuilder alloc] init];
}
+ (PBZJHGameResultBuilder*) builderWithPrototype:(PBZJHGameResult*) prototype {
  return [[PBZJHGameResult builder] mergeFrom:prototype];
}
- (PBZJHGameResultBuilder*) builder {
  return [PBZJHGameResult builder];
}
- (PBZJHGameResultBuilder*) toBuilder {
  return [PBZJHGameResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userResult"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBZJHGameResult class]]) {
    return NO;
  }
  PBZJHGameResult *otherMessage = other;
  return
      [self.userResultArray isEqualToArray:otherMessage.userResultArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userResultArray enumerateObjectsUsingBlock:^(PBUserResult *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBZJHGameResultBuilder()
@property (strong) PBZJHGameResult* resultPbzjhgameResult;
@end

@implementation PBZJHGameResultBuilder
@synthesize resultPbzjhgameResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbzjhgameResult = [[PBZJHGameResult alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbzjhgameResult;
}
- (PBZJHGameResultBuilder*) clear {
  self.resultPbzjhgameResult = [[PBZJHGameResult alloc] init];
  return self;
}
- (PBZJHGameResultBuilder*) clone {
  return [PBZJHGameResult builderWithPrototype:resultPbzjhgameResult];
}
- (PBZJHGameResult*) defaultInstance {
  return [PBZJHGameResult defaultInstance];
}
- (PBZJHGameResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBZJHGameResult*) buildPartial {
  PBZJHGameResult* returnMe = resultPbzjhgameResult;
  self.resultPbzjhgameResult = nil;
  return returnMe;
}
- (PBZJHGameResultBuilder*) mergeFrom:(PBZJHGameResult*) other {
  if (other == [PBZJHGameResult defaultInstance]) {
    return self;
  }
  if (other.userResultArray.count > 0) {
    if (resultPbzjhgameResult.userResultArray == nil) {
      resultPbzjhgameResult.userResultArray = [[NSMutableArray alloc] initWithArray:other.userResultArray];
    } else {
      [resultPbzjhgameResult.userResultArray addObjectsFromArray:other.userResultArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBZJHGameResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBZJHGameResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        PBUserResultBuilder* subBuilder = [PBUserResult builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResult:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userResult {
  return resultPbzjhgameResult.userResultArray;
}
- (PBUserResult*)userResultAtIndex:(NSUInteger)index {
  return [resultPbzjhgameResult userResultAtIndex:index];
}
- (PBZJHGameResultBuilder *)addUserResult:(PBUserResult*)value {
  if (resultPbzjhgameResult.userResultArray == nil) {
    resultPbzjhgameResult.userResultArray = [[NSMutableArray alloc]init];
  }
  [resultPbzjhgameResult.userResultArray addObject:value];
  return self;
}
- (PBZJHGameResultBuilder *)setUserResultArray:(NSArray *)array {
  resultPbzjhgameResult.userResultArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBZJHGameResultBuilder *)clearUserResult {
  resultPbzjhgameResult.userResultArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
