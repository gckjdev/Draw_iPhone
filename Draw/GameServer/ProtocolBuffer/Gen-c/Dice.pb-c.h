/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Dice.proto */

#ifndef PROTOBUF_C_Dice_2eproto__INCLUDED
#define PROTOBUF_C_Dice_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "GameBasic.pb-c.h"

typedef struct _Game__PBDice Game__PBDice;
typedef struct _Game__PBUserDice Game__PBUserDice;
typedef struct _Game__PBDiceFinalCount Game__PBDiceFinalCount;
typedef struct _Game__PBDiceGameResult Game__PBDiceGameResult;
typedef struct _Game__PBDiceAction Game__PBDiceAction;


/* --- enums --- */

typedef enum _Game__PBDiceType {
  GAME__PBDICE_TYPE__DICE_NORMAL = 0,
  /*
   * 蛇骰
   */
  GAME__PBDICE_TYPE__DICE_SNAKE = 1,
  /*
   * 全骰 or 净骰
   */
  GAME__PBDICE_TYPE__DICE_NET = 2,
  /*
   * 围骰
   */
  GAME__PBDICE_TYPE__DICE_WAI = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBDICE_TYPE)
} Game__PBDiceType;

/* --- messages --- */

struct  _Game__PBDice
{
  ProtobufCMessage base;
  protobuf_c_boolean has_diceid;
  int32_t diceid;
  int32_t dice;
};
#define GAME__PBDICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdice__descriptor) \
    , 0,0, 0 }


struct  _Game__PBUserDice
{
  ProtobufCMessage base;
  char *userid;
  size_t n_dices;
  Game__PBDice **dices;
  /*
   * 新增
   */
  protobuf_c_boolean has_type;
  Game__PBDiceType type;
};
#define GAME__PBUSER_DICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbuser_dice__descriptor) \
    , NULL, 0,NULL, 0,GAME__PBDICE_TYPE__DICE_NORMAL }


struct  _Game__PBDiceFinalCount
{
  ProtobufCMessage base;
  char *userid;
  Game__PBDiceType type;
  /*
   * 最后实际符合开的骰子的点数                       
   */
  int32_t finaldicecount;
};
#define GAME__PBDICE_FINAL_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdice_final_count__descriptor) \
    , NULL, GAME__PBDICE_TYPE__DICE_NORMAL, 0 }


struct  _Game__PBDiceGameResult
{
  ProtobufCMessage base;
  size_t n_userresult;
  Game__PBUserResult **userresult;
  /*
   * 开0，抢开1
   */
  protobuf_c_boolean has_opentype;
  int32_t opentype;
  /*
   * 所有用户最终符合开骰的点数
   */
  size_t n_finalcount;
  Game__PBDiceFinalCount **finalcount;
};
#define GAME__PBDICE_GAME_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdice_game_result__descriptor) \
    , 0,NULL, 0,0, 0,NULL }


struct  _Game__PBDiceAction
{
  ProtobufCMessage base;
  /*
   * 0：叫；2：开
   */
  int32_t type;
  /*
   * 叫的骰子数量
   */
  protobuf_c_boolean has_num;
  int32_t num;
  /*
   * 叫的骰子点
   */
  protobuf_c_boolean has_dice;
  int32_t dice;
  /*
   * 是否叫斋     
   */
  protobuf_c_boolean has_wilds;
  protobuf_c_boolean wilds;
};
#define GAME__PBDICE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdice_action__descriptor) \
    , 0, 0,0, 0,0, 0,0 }


/* Game__PBDice methods */
void   game__pbdice__init
                     (Game__PBDice         *message);
size_t game__pbdice__get_packed_size
                     (const Game__PBDice   *message);
size_t game__pbdice__pack
                     (const Game__PBDice   *message,
                      uint8_t             *out);
size_t game__pbdice__pack_to_buffer
                     (const Game__PBDice   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDice *
       game__pbdice__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdice__free_unpacked
                     (Game__PBDice *message,
                      ProtobufCAllocator *allocator);
/* Game__PBUserDice methods */
void   game__pbuser_dice__init
                     (Game__PBUserDice         *message);
size_t game__pbuser_dice__get_packed_size
                     (const Game__PBUserDice   *message);
size_t game__pbuser_dice__pack
                     (const Game__PBUserDice   *message,
                      uint8_t             *out);
size_t game__pbuser_dice__pack_to_buffer
                     (const Game__PBUserDice   *message,
                      ProtobufCBuffer     *buffer);
Game__PBUserDice *
       game__pbuser_dice__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbuser_dice__free_unpacked
                     (Game__PBUserDice *message,
                      ProtobufCAllocator *allocator);
/* Game__PBDiceFinalCount methods */
void   game__pbdice_final_count__init
                     (Game__PBDiceFinalCount         *message);
size_t game__pbdice_final_count__get_packed_size
                     (const Game__PBDiceFinalCount   *message);
size_t game__pbdice_final_count__pack
                     (const Game__PBDiceFinalCount   *message,
                      uint8_t             *out);
size_t game__pbdice_final_count__pack_to_buffer
                     (const Game__PBDiceFinalCount   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDiceFinalCount *
       game__pbdice_final_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdice_final_count__free_unpacked
                     (Game__PBDiceFinalCount *message,
                      ProtobufCAllocator *allocator);
/* Game__PBDiceGameResult methods */
void   game__pbdice_game_result__init
                     (Game__PBDiceGameResult         *message);
size_t game__pbdice_game_result__get_packed_size
                     (const Game__PBDiceGameResult   *message);
size_t game__pbdice_game_result__pack
                     (const Game__PBDiceGameResult   *message,
                      uint8_t             *out);
size_t game__pbdice_game_result__pack_to_buffer
                     (const Game__PBDiceGameResult   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDiceGameResult *
       game__pbdice_game_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdice_game_result__free_unpacked
                     (Game__PBDiceGameResult *message,
                      ProtobufCAllocator *allocator);
/* Game__PBDiceAction methods */
void   game__pbdice_action__init
                     (Game__PBDiceAction         *message);
size_t game__pbdice_action__get_packed_size
                     (const Game__PBDiceAction   *message);
size_t game__pbdice_action__pack
                     (const Game__PBDiceAction   *message,
                      uint8_t             *out);
size_t game__pbdice_action__pack_to_buffer
                     (const Game__PBDiceAction   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDiceAction *
       game__pbdice_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdice_action__free_unpacked
                     (Game__PBDiceAction *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Game__PBDice_Closure)
                 (const Game__PBDice *message,
                  void *closure_data);
typedef void (*Game__PBUserDice_Closure)
                 (const Game__PBUserDice *message,
                  void *closure_data);
typedef void (*Game__PBDiceFinalCount_Closure)
                 (const Game__PBDiceFinalCount *message,
                  void *closure_data);
typedef void (*Game__PBDiceGameResult_Closure)
                 (const Game__PBDiceGameResult *message,
                  void *closure_data);
typedef void (*Game__PBDiceAction_Closure)
                 (const Game__PBDiceAction *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    game__pbdice_type__descriptor;
extern const ProtobufCMessageDescriptor game__pbdice__descriptor;
extern const ProtobufCMessageDescriptor game__pbuser_dice__descriptor;
extern const ProtobufCMessageDescriptor game__pbdice_final_count__descriptor;
extern const ProtobufCMessageDescriptor game__pbdice_game_result__descriptor;
extern const ProtobufCMessageDescriptor game__pbdice_action__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Dice_2eproto__INCLUDED */
