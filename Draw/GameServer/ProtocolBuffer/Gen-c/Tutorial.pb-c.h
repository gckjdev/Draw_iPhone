/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Tutorial.proto */

#ifndef PROTOBUF_C_Tutorial_2eproto__INCLUDED
#define PROTOBUF_C_Tutorial_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "GameConstants.pb-c.h"
#include "GameBasic.pb-c.h"
#include "BBS.pb-c.h"

typedef struct _Game__PBTip Game__PBTip;
typedef struct _Game__PBChapter Game__PBChapter;
typedef struct _Game__PBStage Game__PBStage;
typedef struct _Game__PBTutorial Game__PBTutorial;
typedef struct _Game__PBTutorialCore Game__PBTutorialCore;
typedef struct _Game__PBUserStageOpus Game__PBUserStageOpus;
typedef struct _Game__PBUserStage Game__PBUserStage;
typedef struct _Game__PBUserTutorial Game__PBUserTutorial;


/* --- enums --- */

typedef enum _Game__PBTutorialLevel {
  GAME__PBTUTORIAL_LEVEL__TUTORIAL_LEVEL_ENTRY = 0,
  GAME__PBTUTORIAL_LEVEL__TUTORIAL_LEVEL_EASY = 1,
  GAME__PBTUTORIAL_LEVEL__TUTORIAL_LEVEL_NORMAL = 2,
  GAME__PBTUTORIAL_LEVEL__TUTORIAL_LEVEL_HARD = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBTUTORIAL_LEVEL)
} Game__PBTutorialLevel;
typedef enum _Game__PBTutorialType {
  GAME__PBTUTORIAL_TYPE__TUTORIAL_TYPE_OTHER = 0,
  /*
   * 教程
   */
  GAME__PBTUTORIAL_TYPE__TUTORIAL_TYPE_LEARN = 1,
  /*
   * 休闲临摹
   */
  GAME__PBTUTORIAL_TYPE__TUTORIAL_TYPE_RELAX_COPY = 2,
  /*
   * 二次创作
   */
  GAME__PBTUTORIAL_TYPE__TUTORIAL_TYPE_RELAX_DRAW = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBTUTORIAL_TYPE)
} Game__PBTutorialType;
typedef enum _Game__PBTutorialDrawLevel {
  GAME__PBTUTORIAL_DRAW_LEVEL__TUTORIAL_DRAW_LEVEL_1 = 1,
  GAME__PBTUTORIAL_DRAW_LEVEL__TUTORIAL_DRAW_LEVEL_2 = 2,
  GAME__PBTUTORIAL_DRAW_LEVEL__TUTORIAL_DRAW_LEVEL_3 = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBTUTORIAL_DRAW_LEVEL)
} Game__PBTutorialDrawLevel;
typedef enum _Game__PBTutorialCategory {
  GAME__PBTUTORIAL_CATEGORY__TUTORIAL_CATEGORY_NEW = 0,
  GAME__PBTUTORIAL_CATEGORY__TUTORIAL_CATEGORY_MEDIUM = 1,
  GAME__PBTUTORIAL_CATEGORY__TUTORIAL_CATEGORY_ADVANCE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBTUTORIAL_CATEGORY)
} Game__PBTutorialCategory;
typedef enum _Game__PBTutorialImageStyle {
  GAME__PBTUTORIAL_IMAGE_STYLE__TUTORIAL_IMAGE_COLOR = 0,
  GAME__PBTUTORIAL_IMAGE_STYLE__TUTORIAL_IMAGE_BLACK_WHITE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBTUTORIAL_IMAGE_STYLE)
} Game__PBTutorialImageStyle;
typedef enum _Game__PBScoreEngineType {
  /*
   * 正常
   */
  GAME__PBSCORE_ENGINE_TYPE__SCORE_ENGINE_NORMAL = 0,
  /*
   * 简笔画
   */
  GAME__PBSCORE_ENGINE_TYPE__SCORE_ENGINE_STICK_PICTURE = 1,
  /*
   * 涂色，用于在有背景形状的涂色练习
   */
  GAME__PBSCORE_ENGINE_TYPE__SCORE_ENGINE_FILL_COLOR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBSCORE_ENGINE_TYPE)
} Game__PBScoreEngineType;
typedef enum _Game__PBUserTutorialStatus {
  /*
   * 未开始学习
   */
  GAME__PBUSER_TUTORIAL_STATUS__UT_STATUS_NOT_START = 0,
  /*
   * 开始学习中
   */
  GAME__PBUSER_TUTORIAL_STATUS__UT_STATUS_START = 1,
  /*
   * 已经完成学习
   */
  GAME__PBUSER_TUTORIAL_STATUS__UT_STATUS_COMPLETE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBUSER_TUTORIAL_STATUS)
} Game__PBUserTutorialStatus;

/* --- messages --- */

struct  _Game__PBTip
{
  ProtobufCMessage base;
  int32_t index;
  /*
   * 简体中文名称
   */
  char *cnname;
  /*
   * 英文名称
   */
  char *enname;
  /*
   * 繁体中文名称
   */
  char *tcnname;
  char *cndesc;
  char *endesc;
  char *tcndesc;
  /*
   * 提示图片URL（远程的）
   */
  char *image;
  /*
   * 提示图片文件名（在zip包中的）
   */
  char *imagename;
};
#define GAME__PBTIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbtip__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Game__PBChapter
{
  ProtobufCMessage base;
  /*
   * 索引，唯一
   */
  int32_t index;
  /*
   * 简体中文名称
   */
  char *cnname;
  /*
   * 英文名称
   */
  char *enname;
  /*
   * 繁体中文名称
   */
  char *tcnname;
  char *cndesc;
  char *endesc;
  char *tcndesc;
  /*
   * 回放作品ID（可以直接从ID获得URL、Image等信息），废弃
   */
  char *opusid;
  /*
   * 回放作品包URL，废弃
   */
  char *opusdata;
  /*
   * 作品图片URL，废弃
   */
  char *image;
  /*
   * 绘画底图URL，废弃
   */
  char *background;
  /*
   * 回放作品包文件名，废弃
   */
  char *opusname;
  /*
   * 本小节图片文件名
   */
  char *imagename;
  /*
   * 绘画底图文件名，废弃
   */
  char *backgroundname;
  /*
   * 每个小节的提示
   */
  size_t n_tips;
  Game__PBTip **tips;
  /*
   * 作品播放起始点，为0表示开始
   */
  protobuf_c_boolean has_startindex;
  int32_t startindex;
  /*
   * 作品播放结束点，为-1表示到最后
   */
  protobuf_c_boolean has_endindex;
  int32_t endindex;
};
#define GAME__PBCHAPTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbchapter__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,0, 0,0 }


/*
 * 关卡
 * 一个关卡zip包里面包含信息如下
 * 1) tutorial.pb 文件，包括完整的教程、关卡和章节信息
 * 2) 关卡作品图片、关卡底图、关卡回放作品
 */
struct  _Game__PBStage
{
  ProtobufCMessage base;
  char *stageid;
  /*
   * 简体中文名称
   */
  char *cnname;
  /*
   * 英文名称
   */
  char *enname;
  /*
   * 繁体中文名称
   */
  char *tcnname;
  char *cndesc;
  char *endesc;
  char *tcndesc;
  /*
   *    optional string tutorialId = 18;                
   */
  /*
   * 本关卡作品的ID
   */
  char *opusid;
  /*
   * 本关卡的作品图片URL
   */
  char *image;
  /*
   * 本关卡的作品小图片URL
   */
  char *thumbimage;
  /*
   * 本关卡的作品图片URL
   */
  char *opusdata;
  /*
   * 本关卡的作品图片URL
   */
  char *bgimage;
  /*
   * 下载的zip包URL，格式为 <tutorialId>__<stageId>.zip
   */
  char *dataurl;
  /*
   * 本关卡的作品图片名称，用于最后闯关比对
   */
  char *imagename;
  /*
   * 本关卡的作品数据名称
   */
  char *opusname;
  /*
   * 本关卡的作品图片名称，作品回放时候将画在该底图上
   */
  char *bgimagename;
  /*
   * 教程章节
   */
  size_t n_chapter;
  Game__PBChapter **chapter;
  /*
   * 闯关图片类型，取值参考PBTutorialImageStyle
   */
  protobuf_c_boolean has_imagestyle;
  int32_t imagestyle;
  /*
   * 评分引擎，取值参考PBScoreEngineType
   */
  protobuf_c_boolean has_scoreengine;
  int32_t scoreengine;
  /*
   * 本关作品难度系数，默认为1.0（for简笔画，其他可能要取0.8-0.9）
   */
  protobuf_c_boolean has_difficulty;
  float difficulty;
  /*
   * 本关作品是否使用上一关的背景图
   */
  protobuf_c_boolean has_usebgfromprev;
  protobuf_c_boolean usebgfromprev;
  /*
   * 背景图是否用于上色，是则放在描边层（上面），否则放在底部
   */
  protobuf_c_boolean has_usebgforfill;
  protobuf_c_boolean usebgforfill;
};
#define GAME__PBSTAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbstage__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,0, 0,0, 0,1, 0,0, 0,1 }


/*
 * 教程
 * 一个教程zip包里面包含信息如下
 * 1) tutorial.pb 文件，包括完整的教程、关卡和章节信息
 * 2) 关卡作品图片、关卡底图、关卡回放作品
 */
struct  _Game__PBTutorial
{
  ProtobufCMessage base;
  char *tutorialid;
  /*
   * 简体中文名称
   */
  char *cnname;
  /*
   * 英文名称
   */
  char *enname;
  /*
   * 繁体中文名称
   */
  char *tcnname;
  char *cndesc;
  char *endesc;
  char *tcndesc;
  /*
   * 参考PBTutorialLevel
   */
  protobuf_c_boolean has_level;
  int32_t level;
  /*
   * 分类列表，暂时不用
   */
  size_t n_categories;
  int32_t *categories;
  /*
   * 是否推荐
   */
  protobuf_c_boolean has_isfeature;
  protobuf_c_boolean isfeature;
  /*
   * 大图片
   */
  char *image;
  /*
   * 小图片
   */
  char *thumbimage;
  /*
   * 教程包的下载文件名
   */
  char *dataurl;
  /*
   * 教程的关卡的基础信息
   */
  size_t n_stages;
  Game__PBStage **stages;
  /*
   * 主题包类型，参考PBTutorialType
   */
  protobuf_c_boolean has_type;
  int32_t type;
  /*
   * 画画难度星级，取值范围从1-3
   */
  protobuf_c_boolean has_drawlevel;
  int32_t drawlevel;
  protobuf_c_boolean has_isfree;
  protobuf_c_boolean isfree;
  protobuf_c_boolean has_price;
  int32_t price;
  protobuf_c_boolean has_priceunit;
  int32_t priceunit;
  protobuf_c_boolean has_createdate;
  int32_t createdate;
  protobuf_c_boolean has_modifydate;
  int32_t modifydate;
  /*
   * 是否最近推出
   */
  protobuf_c_boolean has_isnew;
  protobuf_c_boolean isnew;
  /*
   * 是否不用打分（如娱乐教程可不打分，本项设置为true）
   */
  protobuf_c_boolean has_disablescore;
  protobuf_c_boolean disablescore;
  /*
   * 是否不用修炼（如娱乐教程可不修炼，本项设置为true）
   */
  protobuf_c_boolean has_disablepractice;
  protobuf_c_boolean disablepractice;
  /*
   * 每一关是否直接通过（比如娱乐教程可直接过关，本项设置为true）
   */
  protobuf_c_boolean has_directpass;
  protobuf_c_boolean directpass;
  /*
   * 每一关的过关分数（默认60分过关）
   */
  protobuf_c_boolean has_passscore;
  int32_t passscore;
  /*
   * 排行榜方式：0，根据临摹相似度打分；1：根据人气打分
   */
  protobuf_c_boolean has_topranktype;
  int32_t topranktype;
  /*
   * 是否可以解锁所有关卡，无需闯关
   */
  protobuf_c_boolean has_unlockallstage;
  protobuf_c_boolean unlockallstage;
  /*
   * 修炼时候，是否跳过回放教程（比如涂色教程，无需回放，直接进入，显示知识点即可）
   */
  protobuf_c_boolean has_skipreplay;
  protobuf_c_boolean skipreplay;
  /*
   * 修炼时候，是否跳过提示
   */
  protobuf_c_boolean has_skiptips;
  protobuf_c_boolean skiptips;
  /*
   * 教程文件版本
   */
  protobuf_c_boolean has_version;
  int32_t version;
};
#define GAME__PBTUTORIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbtutorial__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,NULL, 0,0, NULL, NULL, NULL, 0,NULL, 0,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,60, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Game__PBTutorialCore
{
  ProtobufCMessage base;
  size_t n_tutorials;
  Game__PBTutorial **tutorials;
  protobuf_c_boolean has_version;
  int32_t version;
  /*
   * 默认开始学习的教程ID线索
   */
  size_t n_stepbysteptutorialid;
  char **stepbysteptutorialid;
};
#define GAME__PBTUTORIAL_CORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbtutorial_core__descriptor) \
    , 0,NULL, 0,0, 0,NULL }


/*
 * 用户闯关的作品
 */
struct  _Game__PBUserStageOpus
{
  ProtobufCMessage base;
  char *localopusid;
  char *remoteopusid;
  protobuf_c_boolean has_score;
  int32_t score;
  protobuf_c_boolean has_createdate;
  int32_t createdate;
  char *localurl;
  char *remoteurl;
};
#define GAME__PBUSER_STAGE_OPUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbuser_stage_opus__descriptor) \
    , NULL, NULL, 0,0, 0,0, NULL, NULL }


/*
 * 用户和关卡的关系
 */
struct  _Game__PBUserStage
{
  ProtobufCMessage base;
  char *userid;
  char *tutorialid;
  char *stageid;
  protobuf_c_boolean has_stageindex;
  int32_t stageindex;
  /*
   * 闯关记录信息
   */
  size_t n_opus;
  Game__PBUserStageOpus **opus;
  /*
   * 当前修炼的章节索引，从0开始
   */
  protobuf_c_boolean has_currentchapterindex;
  int32_t currentchapterindex;
  /*
   * 当前修炼的作品ID
   */
  char *practicelocalopusid;
  /*
   * 当前闯关的作品ID
   */
  char *conquerlocalopusid;
  /*
   * 当前最近一次闯关成功的作品图片本地路径
   */
  char *conquerlocalimage;
  /*
   * 最好闯关的作品ID
   */
  char *bestopusid;
  /*
   * 最好成绩
   */
  protobuf_c_boolean has_bestscore;
  int32_t bestscore;
  /*
   * 最好成绩时间
   */
  protobuf_c_boolean has_bestscoredate;
  int32_t bestscoredate;
  /*
   * 最后一次闯关作品ID
   */
  char *lastopusid;
  /*
   * 最后一次闯关成绩
   */
  protobuf_c_boolean has_lastscore;
  int32_t lastscore;
  /*
   * 最后一次闯关时间
   */
  protobuf_c_boolean has_lastscoredate;
  int32_t lastscoredate;
  /*
   * 最后一次闯关时候作品总数
   */
  protobuf_c_boolean has_totalcount;
  int32_t totalcount;
  /*
   * 最后一次闯关时候击败用户总数
   */
  protobuf_c_boolean has_defeatcount;
  int32_t defeatcount;
};
#define GAME__PBUSER_STAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbuser_stage__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,NULL, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * 用户和教程的关系，用于保存到本地
 */
struct  _Game__PBUserTutorial
{
  ProtobufCMessage base;
  char *userid;
  Game__PBTutorial *tutorial;
  /*
   * 是否正在学习，取值参考PBUserTutorialStatus
   */
  protobuf_c_boolean has_status;
  int32_t status;
  /*
   * 是否已经下载
   */
  protobuf_c_boolean has_isdownload;
  protobuf_c_boolean isdownload;
  /*
   * 是否已经购买，仅适用于付费教程
   */
  protobuf_c_boolean has_ispurchase;
  protobuf_c_boolean ispurchase;
  protobuf_c_boolean has_createdate;
  int32_t createdate;
  protobuf_c_boolean has_lastplaydate;
  int32_t lastplaydate;
  /*
   * 下载、购买、开始闯关、修炼都可以修改该时间
   */
  protobuf_c_boolean has_modifydate;
  int32_t modifydate;
  /*
   * 当前玩到第几关
   */
  protobuf_c_boolean has_currentstageindex;
  int32_t currentstageindex;
  /*
   * 当前关的ID
   */
  char *currentstageid;
  /*
   * 每一关的具体信息
   */
  size_t n_userstages;
  Game__PBUserStage **userstages;
  /*
   * 本数据是否已经同步到服务器
   */
  protobuf_c_boolean has_syncserver;
  protobuf_c_boolean syncserver;
  /*
   * 保存到本地的ID
   */
  char *localid;
  /*
   * 服务器返回的ID
   */
  char *remoteid;
};
#define GAME__PBUSER_TUTORIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbuser_tutorial__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,NULL, 0,0, NULL, NULL }


/* Game__PBTip methods */
void   game__pbtip__init
                     (Game__PBTip         *message);
size_t game__pbtip__get_packed_size
                     (const Game__PBTip   *message);
size_t game__pbtip__pack
                     (const Game__PBTip   *message,
                      uint8_t             *out);
size_t game__pbtip__pack_to_buffer
                     (const Game__PBTip   *message,
                      ProtobufCBuffer     *buffer);
Game__PBTip *
       game__pbtip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbtip__free_unpacked
                     (Game__PBTip *message,
                      ProtobufCAllocator *allocator);
/* Game__PBChapter methods */
void   game__pbchapter__init
                     (Game__PBChapter         *message);
size_t game__pbchapter__get_packed_size
                     (const Game__PBChapter   *message);
size_t game__pbchapter__pack
                     (const Game__PBChapter   *message,
                      uint8_t             *out);
size_t game__pbchapter__pack_to_buffer
                     (const Game__PBChapter   *message,
                      ProtobufCBuffer     *buffer);
Game__PBChapter *
       game__pbchapter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbchapter__free_unpacked
                     (Game__PBChapter *message,
                      ProtobufCAllocator *allocator);
/* Game__PBStage methods */
void   game__pbstage__init
                     (Game__PBStage         *message);
size_t game__pbstage__get_packed_size
                     (const Game__PBStage   *message);
size_t game__pbstage__pack
                     (const Game__PBStage   *message,
                      uint8_t             *out);
size_t game__pbstage__pack_to_buffer
                     (const Game__PBStage   *message,
                      ProtobufCBuffer     *buffer);
Game__PBStage *
       game__pbstage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbstage__free_unpacked
                     (Game__PBStage *message,
                      ProtobufCAllocator *allocator);
/* Game__PBTutorial methods */
void   game__pbtutorial__init
                     (Game__PBTutorial         *message);
size_t game__pbtutorial__get_packed_size
                     (const Game__PBTutorial   *message);
size_t game__pbtutorial__pack
                     (const Game__PBTutorial   *message,
                      uint8_t             *out);
size_t game__pbtutorial__pack_to_buffer
                     (const Game__PBTutorial   *message,
                      ProtobufCBuffer     *buffer);
Game__PBTutorial *
       game__pbtutorial__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbtutorial__free_unpacked
                     (Game__PBTutorial *message,
                      ProtobufCAllocator *allocator);
/* Game__PBTutorialCore methods */
void   game__pbtutorial_core__init
                     (Game__PBTutorialCore         *message);
size_t game__pbtutorial_core__get_packed_size
                     (const Game__PBTutorialCore   *message);
size_t game__pbtutorial_core__pack
                     (const Game__PBTutorialCore   *message,
                      uint8_t             *out);
size_t game__pbtutorial_core__pack_to_buffer
                     (const Game__PBTutorialCore   *message,
                      ProtobufCBuffer     *buffer);
Game__PBTutorialCore *
       game__pbtutorial_core__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbtutorial_core__free_unpacked
                     (Game__PBTutorialCore *message,
                      ProtobufCAllocator *allocator);
/* Game__PBUserStageOpus methods */
void   game__pbuser_stage_opus__init
                     (Game__PBUserStageOpus         *message);
size_t game__pbuser_stage_opus__get_packed_size
                     (const Game__PBUserStageOpus   *message);
size_t game__pbuser_stage_opus__pack
                     (const Game__PBUserStageOpus   *message,
                      uint8_t             *out);
size_t game__pbuser_stage_opus__pack_to_buffer
                     (const Game__PBUserStageOpus   *message,
                      ProtobufCBuffer     *buffer);
Game__PBUserStageOpus *
       game__pbuser_stage_opus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbuser_stage_opus__free_unpacked
                     (Game__PBUserStageOpus *message,
                      ProtobufCAllocator *allocator);
/* Game__PBUserStage methods */
void   game__pbuser_stage__init
                     (Game__PBUserStage         *message);
size_t game__pbuser_stage__get_packed_size
                     (const Game__PBUserStage   *message);
size_t game__pbuser_stage__pack
                     (const Game__PBUserStage   *message,
                      uint8_t             *out);
size_t game__pbuser_stage__pack_to_buffer
                     (const Game__PBUserStage   *message,
                      ProtobufCBuffer     *buffer);
Game__PBUserStage *
       game__pbuser_stage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbuser_stage__free_unpacked
                     (Game__PBUserStage *message,
                      ProtobufCAllocator *allocator);
/* Game__PBUserTutorial methods */
void   game__pbuser_tutorial__init
                     (Game__PBUserTutorial         *message);
size_t game__pbuser_tutorial__get_packed_size
                     (const Game__PBUserTutorial   *message);
size_t game__pbuser_tutorial__pack
                     (const Game__PBUserTutorial   *message,
                      uint8_t             *out);
size_t game__pbuser_tutorial__pack_to_buffer
                     (const Game__PBUserTutorial   *message,
                      ProtobufCBuffer     *buffer);
Game__PBUserTutorial *
       game__pbuser_tutorial__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbuser_tutorial__free_unpacked
                     (Game__PBUserTutorial *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Game__PBTip_Closure)
                 (const Game__PBTip *message,
                  void *closure_data);
typedef void (*Game__PBChapter_Closure)
                 (const Game__PBChapter *message,
                  void *closure_data);
typedef void (*Game__PBStage_Closure)
                 (const Game__PBStage *message,
                  void *closure_data);
typedef void (*Game__PBTutorial_Closure)
                 (const Game__PBTutorial *message,
                  void *closure_data);
typedef void (*Game__PBTutorialCore_Closure)
                 (const Game__PBTutorialCore *message,
                  void *closure_data);
typedef void (*Game__PBUserStageOpus_Closure)
                 (const Game__PBUserStageOpus *message,
                  void *closure_data);
typedef void (*Game__PBUserStage_Closure)
                 (const Game__PBUserStage *message,
                  void *closure_data);
typedef void (*Game__PBUserTutorial_Closure)
                 (const Game__PBUserTutorial *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    game__pbtutorial_level__descriptor;
extern const ProtobufCEnumDescriptor    game__pbtutorial_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbtutorial_draw_level__descriptor;
extern const ProtobufCEnumDescriptor    game__pbtutorial_category__descriptor;
extern const ProtobufCEnumDescriptor    game__pbtutorial_image_style__descriptor;
extern const ProtobufCEnumDescriptor    game__pbscore_engine_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbuser_tutorial_status__descriptor;
extern const ProtobufCMessageDescriptor game__pbtip__descriptor;
extern const ProtobufCMessageDescriptor game__pbchapter__descriptor;
extern const ProtobufCMessageDescriptor game__pbstage__descriptor;
extern const ProtobufCMessageDescriptor game__pbtutorial__descriptor;
extern const ProtobufCMessageDescriptor game__pbtutorial_core__descriptor;
extern const ProtobufCMessageDescriptor game__pbuser_stage_opus__descriptor;
extern const ProtobufCMessageDescriptor game__pbuser_stage__descriptor;
extern const ProtobufCMessageDescriptor game__pbuser_tutorial__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Tutorial_2eproto__INCLUDED */
