/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_Draw_2eproto__INCLUDED
#define PROTOBUF_C_Draw_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "GameBasic.pb-c.h"
#include "GameConstants.pb-c.h"
#include "Sing.pb-c.h"

typedef struct _Game__PBDraw Game__PBDraw;
typedef struct _Game__PBFeedTimes Game__PBFeedTimes;
typedef struct _Game__PBCommentInfo Game__PBCommentInfo;
typedef struct _Game__PBLearnDraw Game__PBLearnDraw;
typedef struct _Game__PBLabelInfo Game__PBLabelInfo;
typedef struct _Game__PBFeed Game__PBFeed;
typedef struct _Game__PBPoint Game__PBPoint;
typedef struct _Game__PBColor Game__PBColor;
typedef struct _Game__PBNoCompressDrawAction Game__PBNoCompressDrawAction;
typedef struct _Game__PBNoCompressDrawData Game__PBNoCompressDrawData;
typedef struct _Game__PBDrawBgGroup Game__PBDrawBgGroup;
typedef struct _Game__PBDrawBgMeta Game__PBDrawBgMeta;
typedef struct _Game__PBImageShapeGroup Game__PBImageShapeGroup;
typedef struct _Game__PBImageShapeGroupMeta Game__PBImageShapeGroupMeta;
typedef struct _Game__PBHotWord Game__PBHotWord;
typedef struct _Game__PBHotWordList Game__PBHotWordList;
typedef struct _Game__PBWallOpus Game__PBWallOpus;
typedef struct _Game__PBWall Game__PBWall;
typedef struct _Game__PBRect Game__PBRect;
typedef struct _Game__PBFrame Game__PBFrame;
typedef struct _Game__PBFrameList Game__PBFrameList;
typedef struct _Game__PBLayout Game__PBLayout;
typedef struct _Game__PBLayoutList Game__PBLayoutList;


/* --- enums --- */


/* --- messages --- */

struct  _Game__PBDraw
{
  ProtobufCMessage base;
  char *userid;
  char *word;
  int32_t level;
  int32_t language;
  protobuf_c_boolean has_createdate;
  int32_t createdate;
  char *nickname;
  char *avatar;
  protobuf_c_boolean has_gender;
  protobuf_c_boolean gender;
  protobuf_c_boolean has_version;
  int32_t version;
  size_t n_drawdata;
  Game__PBDrawAction **drawdata;
  char *opusid;
  protobuf_c_boolean has_score;
  int32_t score;
  protobuf_c_boolean has_iscompressed;
  protobuf_c_boolean iscompressed;
  Game__PBSize *canvassize;
  size_t n_layer;
  Game__PBLayer **layer;
  protobuf_c_boolean has_strokes;
  int64_t strokes;
  protobuf_c_boolean has_spendtime;
  int32_t spendtime;
  protobuf_c_boolean has_completedate;
  int32_t completedate;
};
#define GAME__PBDRAW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdraw__descriptor) \
    , NULL, NULL, 0, 0, 0,0, NULL, NULL, 0,0, 0,0, 0,NULL, NULL, 0,0, 0,1, NULL, 0,NULL, 0,0, 0,0, 0,0 }


struct  _Game__PBFeedTimes
{
  ProtobufCMessage base;
  int32_t type;
  int32_t value;
};
#define GAME__PBFEED_TIMES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbfeed_times__descriptor) \
    , 0, 0 }


struct  _Game__PBCommentInfo
{
  ProtobufCMessage base;
  int32_t type;
  char *comment;
  char *actionid;
  char *actionuserid;
  char *actionnickname;
  char *actionsummary;
};
#define GAME__PBCOMMENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbcomment_info__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL }


struct  _Game__PBLearnDraw
{
  ProtobufCMessage base;
  char *opusid;
  protobuf_c_boolean has_type;
  int32_t type;
  protobuf_c_boolean has_price;
  int32_t price;
  protobuf_c_boolean has_boughtcount;
  int32_t boughtcount;
};
#define GAME__PBLEARN_DRAW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pblearn_draw__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


struct  _Game__PBLabelInfo
{
  ProtobufCMessage base;
  Game__PBRect *frame;
  protobuf_c_boolean has_textcolor;
  int32_t textcolor;
  protobuf_c_boolean has_textfont;
  float textfont;
  protobuf_c_boolean has_style;
  int32_t style;
  protobuf_c_boolean has_textstrokecolor;
  int32_t textstrokecolor;
};
#define GAME__PBLABEL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pblabel_info__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _Game__PBFeed
{
  ProtobufCMessage base;
  char *feedid;
  char *userid;
  int32_t actiontype;
  int32_t createdate;
  protobuf_c_boolean has_devicetype;
  int32_t devicetype;
  char *devicename;
  char *gameid;
  protobuf_c_boolean has_category;
  Game__PBOpusCategoryType category;
  char *nickname;
  char *avatar;
  protobuf_c_boolean has_gender;
  protobuf_c_boolean gender;
  char *signature;
  protobuf_c_boolean has_vip;
  int32_t vip;
  Game__PBDraw *drawdata;
  char *targetuserid;
  char *targetusernickname;
  protobuf_c_boolean has_historyscore;
  double historyscore;
  char *opusdesc;
  char *drawdataurl;
  size_t n_tags;
  char **tags;
  protobuf_c_boolean has_spendtime;
  int32_t spendtime;
  char *opusid;
  protobuf_c_boolean has_iscorrect;
  protobuf_c_boolean iscorrect;
  protobuf_c_boolean has_score;
  int32_t score;
  size_t n_guesswords;
  char **guesswords;
  protobuf_c_boolean has_opusstatus;
  int32_t opusstatus;
  char *comment;
  Game__PBCommentInfo *commentinfo;
  protobuf_c_boolean has_matchtimes;
  int32_t matchtimes;
  protobuf_c_boolean has_correcttimes;
  int32_t correcttimes;
  protobuf_c_boolean has_guesstimes;
  int32_t guesstimes;
  protobuf_c_boolean has_commenttimes;
  int32_t commenttimes;
  size_t n_feedtimes;
  Game__PBFeedTimes **feedtimes;
  char *opuscreatoruserid;
  char *opuscreatornickname;
  protobuf_c_boolean has_opuscreatorgender;
  protobuf_c_boolean opuscreatorgender;
  char *opuscreatoravatar;
  char *opusword;
  char *opusimage;
  char *opusthumbimage;
  char *dataurl;
  char *bgimageurl;
  char *bgimagename;
  char *contestid;
  protobuf_c_boolean has_contestscore;
  double contestscore;
  size_t n_rankinfo;
  Game__PBOpusRank **rankinfo;
  protobuf_c_boolean has_rankintop;
  int32_t rankintop;
  Game__PBLearnDraw *learndraw;
  Game__PBSingOpus *sing;
  Game__PBLabelInfo *desclabelinfo;
  Game__PBSize *canvassize;
  protobuf_c_boolean has_bgimagewidth;
  float bgimagewidth;
  protobuf_c_boolean has_bgimageheight;
  float bgimageheight;
  protobuf_c_boolean has_strokes;
  int64_t strokes;
  protobuf_c_boolean has_draftcompletedate;
  int32_t draftcompletedate;
  protobuf_c_boolean has_draftcreatedate;
  int32_t draftcreatedate;
  size_t n_opusclass;
  Game__PBClass **opusclass;
  size_t n_opusclassids;
  char **opusclassids;
  protobuf_c_boolean has_stagescore;
  int32_t stagescore;
  protobuf_c_boolean has_stagerank;
  int32_t stagerank;
};
#define GAME__PBFEED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbfeed__descriptor) \
    , NULL, NULL, 0, 0, 0,0, NULL, NULL, 0,0, NULL, NULL, 0,0, NULL, 0,0, NULL, NULL, NULL, 0,0, NULL, NULL, 0,NULL, 0,0, NULL, 0,0, 0,0, 0,NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, NULL, NULL, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,NULL, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,0, 0,0 }


struct  _Game__PBPoint
{
  ProtobufCMessage base;
  float x;
  float y;
};
#define GAME__PBPOINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbpoint__descriptor) \
    , 0, 0 }


struct  _Game__PBColor
{
  ProtobufCMessage base;
  float red;
  float blue;
  float green;
  float alpha;
};
#define GAME__PBCOLOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbcolor__descriptor) \
    , 0, 0, 0, 0 }


struct  _Game__PBNoCompressDrawAction
{
  ProtobufCMessage base;
  int32_t type;
  size_t n_point;
  Game__PBPoint **point;
  Game__PBColor *color;
  protobuf_c_boolean has_width;
  float width;
  protobuf_c_boolean has_pentype;
  int32_t pentype;
  protobuf_c_boolean has_shapetype;
  int32_t shapetype;
  size_t n_rectcomponent;
  float *rectcomponent;
  Game__PBSize *canvassize;
  size_t n_pointx;
  float *pointx;
  size_t n_pointy;
  float *pointy;
  protobuf_c_boolean has_rgbcolor;
  uint32_t rgbcolor;
  protobuf_c_boolean has_red;
  float red;
  protobuf_c_boolean has_blue;
  float blue;
  protobuf_c_boolean has_green;
  float green;
  protobuf_c_boolean has_alpha;
  float alpha;
  size_t n_brushpointwidth;
  float *brushpointwidth;
};
#define GAME__PBNO_COMPRESS_DRAW_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbno_compress_draw_action__descriptor) \
    , 0, 0,NULL, NULL, 0,0, 0,0, 0,0, 0,NULL, NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Game__PBNoCompressDrawData
{
  ProtobufCMessage base;
  size_t n_drawactionlist;
  Game__PBNoCompressDrawAction **drawactionlist;
  protobuf_c_boolean has_version;
  int32_t version;
  Game__PBSize *canvassize;
  size_t n_drawactionlist2;
  Game__PBDrawAction **drawactionlist2;
  Game__PBUserBasicInfo *drawtouser;
  char *opusdesc;
  char *bgimagename;
  size_t n_layer;
  Game__PBLayer **layer;
  protobuf_c_boolean has_strokes;
  int64_t strokes;
  protobuf_c_boolean has_spendtime;
  int32_t spendtime;
  protobuf_c_boolean has_completedate;
  int32_t completedate;
};
#define GAME__PBNO_COMPRESS_DRAW_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbno_compress_draw_data__descriptor) \
    , 0,NULL, 0,0, NULL, 0,NULL, NULL, NULL, NULL, 0,NULL, 0,0, 0,0, 0,0 }


struct  _Game__PBDrawBgGroup
{
  ProtobufCMessage base;
  int32_t groupid;
  size_t n_drawbgs;
  Game__PBDrawBg **drawbgs;
  size_t n_name;
  Game__PBLocalizeString **name;
};
#define GAME__PBDRAW_BG_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdraw_bg_group__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _Game__PBDrawBgMeta
{
  ProtobufCMessage base;
  size_t n_drawbggroup;
  Game__PBDrawBgGroup **drawbggroup;
};
#define GAME__PBDRAW_BG_META__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdraw_bg_meta__descriptor) \
    , 0,NULL }


struct  _Game__PBImageShapeGroup
{
  ProtobufCMessage base;
  int32_t groupid;
  size_t n_groupname;
  Game__PBLocalizeString **groupname;
  size_t n_shapetype;
  int32_t *shapetype;
};
#define GAME__PBIMAGE_SHAPE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbimage_shape_group__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _Game__PBImageShapeGroupMeta
{
  ProtobufCMessage base;
  size_t n_imageshapegroup;
  Game__PBImageShapeGroup **imageshapegroup;
};
#define GAME__PBIMAGE_SHAPE_GROUP_META__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbimage_shape_group_meta__descriptor) \
    , 0,NULL }


struct  _Game__PBHotWord
{
  ProtobufCMessage base;
  char *wordid;
  char *word;
  protobuf_c_boolean has_coins;
  int32_t coins;
  char *source;
};
#define GAME__PBHOT_WORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbhot_word__descriptor) \
    , NULL, NULL, 0,0, NULL }


struct  _Game__PBHotWordList
{
  ProtobufCMessage base;
  size_t n_words;
  Game__PBHotWord **words;
};
#define GAME__PBHOT_WORD_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbhot_word_list__descriptor) \
    , 0,NULL }


struct  _Game__PBWallOpus
{
  ProtobufCMessage base;
  int32_t idonwall;
  Game__PBFeed *opus;
  Game__PBFrame *frame;
};
#define GAME__PBWALL_OPUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbwall_opus__descriptor) \
    , 0, NULL, NULL }


struct  _Game__PBWall
{
  ProtobufCMessage base;
  char *wallid;
  Game__PBWallType type;
  char *userid;
  char *name;
  Game__PBLayout *content;
  char *musicurl;
};
#define GAME__PBWALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbwall__descriptor) \
    , NULL, 0, NULL, NULL, NULL, NULL }


struct  _Game__PBRect
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  int32_t x;
  protobuf_c_boolean has_y;
  int32_t y;
  protobuf_c_boolean has_width;
  int32_t width;
  protobuf_c_boolean has_height;
  int32_t height;
};
#define GAME__PBRECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbrect__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _Game__PBFrame
{
  ProtobufCMessage base;
  int32_t frameid;
  protobuf_c_boolean has_type;
  int32_t type;
  char *imageurl;
  Game__PBRect *opusiphonerect;
  Game__PBRect *opusipadrect;
  protobuf_c_boolean has_price;
  int32_t price;
};
#define GAME__PBFRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbframe__descriptor) \
    , 0, 0,0, NULL, NULL, NULL, 0,0 }


struct  _Game__PBFrameList
{
  ProtobufCMessage base;
  size_t n_frames;
  Game__PBFrame **frames;
};
#define GAME__PBFRAME_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbframe_list__descriptor) \
    , 0,NULL }


struct  _Game__PBLayout
{
  ProtobufCMessage base;
  int32_t layoutid;
  char *name;
  protobuf_c_boolean has_displaymode;
  int32_t displaymode;
  size_t n_wallopuses;
  Game__PBWallOpus **wallopuses;
  char *imageurl;
  protobuf_c_boolean has_price;
  int32_t price;
};
#define GAME__PBLAYOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pblayout__descriptor) \
    , 0, NULL, 0,0, 0,NULL, NULL, 0,0 }


struct  _Game__PBLayoutList
{
  ProtobufCMessage base;
  size_t n_layouts;
  Game__PBLayout **layouts;
};
#define GAME__PBLAYOUT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pblayout_list__descriptor) \
    , 0,NULL }


/* Game__PBDraw methods */
void   game__pbdraw__init
                     (Game__PBDraw         *message);
size_t game__pbdraw__get_packed_size
                     (const Game__PBDraw   *message);
size_t game__pbdraw__pack
                     (const Game__PBDraw   *message,
                      uint8_t             *out);
size_t game__pbdraw__pack_to_buffer
                     (const Game__PBDraw   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDraw *
       game__pbdraw__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdraw__free_unpacked
                     (Game__PBDraw *message,
                      ProtobufCAllocator *allocator);
/* Game__PBFeedTimes methods */
void   game__pbfeed_times__init
                     (Game__PBFeedTimes         *message);
size_t game__pbfeed_times__get_packed_size
                     (const Game__PBFeedTimes   *message);
size_t game__pbfeed_times__pack
                     (const Game__PBFeedTimes   *message,
                      uint8_t             *out);
size_t game__pbfeed_times__pack_to_buffer
                     (const Game__PBFeedTimes   *message,
                      ProtobufCBuffer     *buffer);
Game__PBFeedTimes *
       game__pbfeed_times__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbfeed_times__free_unpacked
                     (Game__PBFeedTimes *message,
                      ProtobufCAllocator *allocator);
/* Game__PBCommentInfo methods */
void   game__pbcomment_info__init
                     (Game__PBCommentInfo         *message);
size_t game__pbcomment_info__get_packed_size
                     (const Game__PBCommentInfo   *message);
size_t game__pbcomment_info__pack
                     (const Game__PBCommentInfo   *message,
                      uint8_t             *out);
size_t game__pbcomment_info__pack_to_buffer
                     (const Game__PBCommentInfo   *message,
                      ProtobufCBuffer     *buffer);
Game__PBCommentInfo *
       game__pbcomment_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbcomment_info__free_unpacked
                     (Game__PBCommentInfo *message,
                      ProtobufCAllocator *allocator);
/* Game__PBLearnDraw methods */
void   game__pblearn_draw__init
                     (Game__PBLearnDraw         *message);
size_t game__pblearn_draw__get_packed_size
                     (const Game__PBLearnDraw   *message);
size_t game__pblearn_draw__pack
                     (const Game__PBLearnDraw   *message,
                      uint8_t             *out);
size_t game__pblearn_draw__pack_to_buffer
                     (const Game__PBLearnDraw   *message,
                      ProtobufCBuffer     *buffer);
Game__PBLearnDraw *
       game__pblearn_draw__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pblearn_draw__free_unpacked
                     (Game__PBLearnDraw *message,
                      ProtobufCAllocator *allocator);
/* Game__PBLabelInfo methods */
void   game__pblabel_info__init
                     (Game__PBLabelInfo         *message);
size_t game__pblabel_info__get_packed_size
                     (const Game__PBLabelInfo   *message);
size_t game__pblabel_info__pack
                     (const Game__PBLabelInfo   *message,
                      uint8_t             *out);
size_t game__pblabel_info__pack_to_buffer
                     (const Game__PBLabelInfo   *message,
                      ProtobufCBuffer     *buffer);
Game__PBLabelInfo *
       game__pblabel_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pblabel_info__free_unpacked
                     (Game__PBLabelInfo *message,
                      ProtobufCAllocator *allocator);
/* Game__PBFeed methods */
void   game__pbfeed__init
                     (Game__PBFeed         *message);
size_t game__pbfeed__get_packed_size
                     (const Game__PBFeed   *message);
size_t game__pbfeed__pack
                     (const Game__PBFeed   *message,
                      uint8_t             *out);
size_t game__pbfeed__pack_to_buffer
                     (const Game__PBFeed   *message,
                      ProtobufCBuffer     *buffer);
Game__PBFeed *
       game__pbfeed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbfeed__free_unpacked
                     (Game__PBFeed *message,
                      ProtobufCAllocator *allocator);
/* Game__PBPoint methods */
void   game__pbpoint__init
                     (Game__PBPoint         *message);
size_t game__pbpoint__get_packed_size
                     (const Game__PBPoint   *message);
size_t game__pbpoint__pack
                     (const Game__PBPoint   *message,
                      uint8_t             *out);
size_t game__pbpoint__pack_to_buffer
                     (const Game__PBPoint   *message,
                      ProtobufCBuffer     *buffer);
Game__PBPoint *
       game__pbpoint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbpoint__free_unpacked
                     (Game__PBPoint *message,
                      ProtobufCAllocator *allocator);
/* Game__PBColor methods */
void   game__pbcolor__init
                     (Game__PBColor         *message);
size_t game__pbcolor__get_packed_size
                     (const Game__PBColor   *message);
size_t game__pbcolor__pack
                     (const Game__PBColor   *message,
                      uint8_t             *out);
size_t game__pbcolor__pack_to_buffer
                     (const Game__PBColor   *message,
                      ProtobufCBuffer     *buffer);
Game__PBColor *
       game__pbcolor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbcolor__free_unpacked
                     (Game__PBColor *message,
                      ProtobufCAllocator *allocator);
/* Game__PBNoCompressDrawAction methods */
void   game__pbno_compress_draw_action__init
                     (Game__PBNoCompressDrawAction         *message);
size_t game__pbno_compress_draw_action__get_packed_size
                     (const Game__PBNoCompressDrawAction   *message);
size_t game__pbno_compress_draw_action__pack
                     (const Game__PBNoCompressDrawAction   *message,
                      uint8_t             *out);
size_t game__pbno_compress_draw_action__pack_to_buffer
                     (const Game__PBNoCompressDrawAction   *message,
                      ProtobufCBuffer     *buffer);
Game__PBNoCompressDrawAction *
       game__pbno_compress_draw_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbno_compress_draw_action__free_unpacked
                     (Game__PBNoCompressDrawAction *message,
                      ProtobufCAllocator *allocator);
/* Game__PBNoCompressDrawData methods */
void   game__pbno_compress_draw_data__init
                     (Game__PBNoCompressDrawData         *message);
size_t game__pbno_compress_draw_data__get_packed_size
                     (const Game__PBNoCompressDrawData   *message);
size_t game__pbno_compress_draw_data__pack
                     (const Game__PBNoCompressDrawData   *message,
                      uint8_t             *out);
size_t game__pbno_compress_draw_data__pack_to_buffer
                     (const Game__PBNoCompressDrawData   *message,
                      ProtobufCBuffer     *buffer);
Game__PBNoCompressDrawData *
       game__pbno_compress_draw_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbno_compress_draw_data__free_unpacked
                     (Game__PBNoCompressDrawData *message,
                      ProtobufCAllocator *allocator);
/* Game__PBDrawBgGroup methods */
void   game__pbdraw_bg_group__init
                     (Game__PBDrawBgGroup         *message);
size_t game__pbdraw_bg_group__get_packed_size
                     (const Game__PBDrawBgGroup   *message);
size_t game__pbdraw_bg_group__pack
                     (const Game__PBDrawBgGroup   *message,
                      uint8_t             *out);
size_t game__pbdraw_bg_group__pack_to_buffer
                     (const Game__PBDrawBgGroup   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDrawBgGroup *
       game__pbdraw_bg_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdraw_bg_group__free_unpacked
                     (Game__PBDrawBgGroup *message,
                      ProtobufCAllocator *allocator);
/* Game__PBDrawBgMeta methods */
void   game__pbdraw_bg_meta__init
                     (Game__PBDrawBgMeta         *message);
size_t game__pbdraw_bg_meta__get_packed_size
                     (const Game__PBDrawBgMeta   *message);
size_t game__pbdraw_bg_meta__pack
                     (const Game__PBDrawBgMeta   *message,
                      uint8_t             *out);
size_t game__pbdraw_bg_meta__pack_to_buffer
                     (const Game__PBDrawBgMeta   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDrawBgMeta *
       game__pbdraw_bg_meta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdraw_bg_meta__free_unpacked
                     (Game__PBDrawBgMeta *message,
                      ProtobufCAllocator *allocator);
/* Game__PBImageShapeGroup methods */
void   game__pbimage_shape_group__init
                     (Game__PBImageShapeGroup         *message);
size_t game__pbimage_shape_group__get_packed_size
                     (const Game__PBImageShapeGroup   *message);
size_t game__pbimage_shape_group__pack
                     (const Game__PBImageShapeGroup   *message,
                      uint8_t             *out);
size_t game__pbimage_shape_group__pack_to_buffer
                     (const Game__PBImageShapeGroup   *message,
                      ProtobufCBuffer     *buffer);
Game__PBImageShapeGroup *
       game__pbimage_shape_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbimage_shape_group__free_unpacked
                     (Game__PBImageShapeGroup *message,
                      ProtobufCAllocator *allocator);
/* Game__PBImageShapeGroupMeta methods */
void   game__pbimage_shape_group_meta__init
                     (Game__PBImageShapeGroupMeta         *message);
size_t game__pbimage_shape_group_meta__get_packed_size
                     (const Game__PBImageShapeGroupMeta   *message);
size_t game__pbimage_shape_group_meta__pack
                     (const Game__PBImageShapeGroupMeta   *message,
                      uint8_t             *out);
size_t game__pbimage_shape_group_meta__pack_to_buffer
                     (const Game__PBImageShapeGroupMeta   *message,
                      ProtobufCBuffer     *buffer);
Game__PBImageShapeGroupMeta *
       game__pbimage_shape_group_meta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbimage_shape_group_meta__free_unpacked
                     (Game__PBImageShapeGroupMeta *message,
                      ProtobufCAllocator *allocator);
/* Game__PBHotWord methods */
void   game__pbhot_word__init
                     (Game__PBHotWord         *message);
size_t game__pbhot_word__get_packed_size
                     (const Game__PBHotWord   *message);
size_t game__pbhot_word__pack
                     (const Game__PBHotWord   *message,
                      uint8_t             *out);
size_t game__pbhot_word__pack_to_buffer
                     (const Game__PBHotWord   *message,
                      ProtobufCBuffer     *buffer);
Game__PBHotWord *
       game__pbhot_word__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbhot_word__free_unpacked
                     (Game__PBHotWord *message,
                      ProtobufCAllocator *allocator);
/* Game__PBHotWordList methods */
void   game__pbhot_word_list__init
                     (Game__PBHotWordList         *message);
size_t game__pbhot_word_list__get_packed_size
                     (const Game__PBHotWordList   *message);
size_t game__pbhot_word_list__pack
                     (const Game__PBHotWordList   *message,
                      uint8_t             *out);
size_t game__pbhot_word_list__pack_to_buffer
                     (const Game__PBHotWordList   *message,
                      ProtobufCBuffer     *buffer);
Game__PBHotWordList *
       game__pbhot_word_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbhot_word_list__free_unpacked
                     (Game__PBHotWordList *message,
                      ProtobufCAllocator *allocator);
/* Game__PBWallOpus methods */
void   game__pbwall_opus__init
                     (Game__PBWallOpus         *message);
size_t game__pbwall_opus__get_packed_size
                     (const Game__PBWallOpus   *message);
size_t game__pbwall_opus__pack
                     (const Game__PBWallOpus   *message,
                      uint8_t             *out);
size_t game__pbwall_opus__pack_to_buffer
                     (const Game__PBWallOpus   *message,
                      ProtobufCBuffer     *buffer);
Game__PBWallOpus *
       game__pbwall_opus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbwall_opus__free_unpacked
                     (Game__PBWallOpus *message,
                      ProtobufCAllocator *allocator);
/* Game__PBWall methods */
void   game__pbwall__init
                     (Game__PBWall         *message);
size_t game__pbwall__get_packed_size
                     (const Game__PBWall   *message);
size_t game__pbwall__pack
                     (const Game__PBWall   *message,
                      uint8_t             *out);
size_t game__pbwall__pack_to_buffer
                     (const Game__PBWall   *message,
                      ProtobufCBuffer     *buffer);
Game__PBWall *
       game__pbwall__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbwall__free_unpacked
                     (Game__PBWall *message,
                      ProtobufCAllocator *allocator);
/* Game__PBRect methods */
void   game__pbrect__init
                     (Game__PBRect         *message);
size_t game__pbrect__get_packed_size
                     (const Game__PBRect   *message);
size_t game__pbrect__pack
                     (const Game__PBRect   *message,
                      uint8_t             *out);
size_t game__pbrect__pack_to_buffer
                     (const Game__PBRect   *message,
                      ProtobufCBuffer     *buffer);
Game__PBRect *
       game__pbrect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbrect__free_unpacked
                     (Game__PBRect *message,
                      ProtobufCAllocator *allocator);
/* Game__PBFrame methods */
void   game__pbframe__init
                     (Game__PBFrame         *message);
size_t game__pbframe__get_packed_size
                     (const Game__PBFrame   *message);
size_t game__pbframe__pack
                     (const Game__PBFrame   *message,
                      uint8_t             *out);
size_t game__pbframe__pack_to_buffer
                     (const Game__PBFrame   *message,
                      ProtobufCBuffer     *buffer);
Game__PBFrame *
       game__pbframe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbframe__free_unpacked
                     (Game__PBFrame *message,
                      ProtobufCAllocator *allocator);
/* Game__PBFrameList methods */
void   game__pbframe_list__init
                     (Game__PBFrameList         *message);
size_t game__pbframe_list__get_packed_size
                     (const Game__PBFrameList   *message);
size_t game__pbframe_list__pack
                     (const Game__PBFrameList   *message,
                      uint8_t             *out);
size_t game__pbframe_list__pack_to_buffer
                     (const Game__PBFrameList   *message,
                      ProtobufCBuffer     *buffer);
Game__PBFrameList *
       game__pbframe_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbframe_list__free_unpacked
                     (Game__PBFrameList *message,
                      ProtobufCAllocator *allocator);
/* Game__PBLayout methods */
void   game__pblayout__init
                     (Game__PBLayout         *message);
size_t game__pblayout__get_packed_size
                     (const Game__PBLayout   *message);
size_t game__pblayout__pack
                     (const Game__PBLayout   *message,
                      uint8_t             *out);
size_t game__pblayout__pack_to_buffer
                     (const Game__PBLayout   *message,
                      ProtobufCBuffer     *buffer);
Game__PBLayout *
       game__pblayout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pblayout__free_unpacked
                     (Game__PBLayout *message,
                      ProtobufCAllocator *allocator);
/* Game__PBLayoutList methods */
void   game__pblayout_list__init
                     (Game__PBLayoutList         *message);
size_t game__pblayout_list__get_packed_size
                     (const Game__PBLayoutList   *message);
size_t game__pblayout_list__pack
                     (const Game__PBLayoutList   *message,
                      uint8_t             *out);
size_t game__pblayout_list__pack_to_buffer
                     (const Game__PBLayoutList   *message,
                      ProtobufCBuffer     *buffer);
Game__PBLayoutList *
       game__pblayout_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pblayout_list__free_unpacked
                     (Game__PBLayoutList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Game__PBDraw_Closure)
                 (const Game__PBDraw *message,
                  void *closure_data);
typedef void (*Game__PBFeedTimes_Closure)
                 (const Game__PBFeedTimes *message,
                  void *closure_data);
typedef void (*Game__PBCommentInfo_Closure)
                 (const Game__PBCommentInfo *message,
                  void *closure_data);
typedef void (*Game__PBLearnDraw_Closure)
                 (const Game__PBLearnDraw *message,
                  void *closure_data);
typedef void (*Game__PBLabelInfo_Closure)
                 (const Game__PBLabelInfo *message,
                  void *closure_data);
typedef void (*Game__PBFeed_Closure)
                 (const Game__PBFeed *message,
                  void *closure_data);
typedef void (*Game__PBPoint_Closure)
                 (const Game__PBPoint *message,
                  void *closure_data);
typedef void (*Game__PBColor_Closure)
                 (const Game__PBColor *message,
                  void *closure_data);
typedef void (*Game__PBNoCompressDrawAction_Closure)
                 (const Game__PBNoCompressDrawAction *message,
                  void *closure_data);
typedef void (*Game__PBNoCompressDrawData_Closure)
                 (const Game__PBNoCompressDrawData *message,
                  void *closure_data);
typedef void (*Game__PBDrawBgGroup_Closure)
                 (const Game__PBDrawBgGroup *message,
                  void *closure_data);
typedef void (*Game__PBDrawBgMeta_Closure)
                 (const Game__PBDrawBgMeta *message,
                  void *closure_data);
typedef void (*Game__PBImageShapeGroup_Closure)
                 (const Game__PBImageShapeGroup *message,
                  void *closure_data);
typedef void (*Game__PBImageShapeGroupMeta_Closure)
                 (const Game__PBImageShapeGroupMeta *message,
                  void *closure_data);
typedef void (*Game__PBHotWord_Closure)
                 (const Game__PBHotWord *message,
                  void *closure_data);
typedef void (*Game__PBHotWordList_Closure)
                 (const Game__PBHotWordList *message,
                  void *closure_data);
typedef void (*Game__PBWallOpus_Closure)
                 (const Game__PBWallOpus *message,
                  void *closure_data);
typedef void (*Game__PBWall_Closure)
                 (const Game__PBWall *message,
                  void *closure_data);
typedef void (*Game__PBRect_Closure)
                 (const Game__PBRect *message,
                  void *closure_data);
typedef void (*Game__PBFrame_Closure)
                 (const Game__PBFrame *message,
                  void *closure_data);
typedef void (*Game__PBFrameList_Closure)
                 (const Game__PBFrameList *message,
                  void *closure_data);
typedef void (*Game__PBLayout_Closure)
                 (const Game__PBLayout *message,
                  void *closure_data);
typedef void (*Game__PBLayoutList_Closure)
                 (const Game__PBLayoutList *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor game__pbdraw__descriptor;
extern const ProtobufCMessageDescriptor game__pbfeed_times__descriptor;
extern const ProtobufCMessageDescriptor game__pbcomment_info__descriptor;
extern const ProtobufCMessageDescriptor game__pblearn_draw__descriptor;
extern const ProtobufCMessageDescriptor game__pblabel_info__descriptor;
extern const ProtobufCMessageDescriptor game__pbfeed__descriptor;
extern const ProtobufCMessageDescriptor game__pbpoint__descriptor;
extern const ProtobufCMessageDescriptor game__pbcolor__descriptor;
extern const ProtobufCMessageDescriptor game__pbno_compress_draw_action__descriptor;
extern const ProtobufCMessageDescriptor game__pbno_compress_draw_data__descriptor;
extern const ProtobufCMessageDescriptor game__pbdraw_bg_group__descriptor;
extern const ProtobufCMessageDescriptor game__pbdraw_bg_meta__descriptor;
extern const ProtobufCMessageDescriptor game__pbimage_shape_group__descriptor;
extern const ProtobufCMessageDescriptor game__pbimage_shape_group_meta__descriptor;
extern const ProtobufCMessageDescriptor game__pbhot_word__descriptor;
extern const ProtobufCMessageDescriptor game__pbhot_word_list__descriptor;
extern const ProtobufCMessageDescriptor game__pbwall_opus__descriptor;
extern const ProtobufCMessageDescriptor game__pbwall__descriptor;
extern const ProtobufCMessageDescriptor game__pbrect__descriptor;
extern const ProtobufCMessageDescriptor game__pbframe__descriptor;
extern const ProtobufCMessageDescriptor game__pbframe_list__descriptor;
extern const ProtobufCMessageDescriptor game__pblayout__descriptor;
extern const ProtobufCMessageDescriptor game__pblayout_list__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_Draw_2eproto__INCLUDED */
