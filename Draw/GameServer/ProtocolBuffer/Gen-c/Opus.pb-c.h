/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Opus.proto */

#ifndef PROTOBUF_C_Opus_2eproto__INCLUDED
#define PROTOBUF_C_Opus_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "GameBasic.pb-c.h"
#include "GameConstants.pb-c.h"
#include "Sing.pb-c.h"
#include "Draw.pb-c.h"

typedef struct _Game__PBDrawOpus Game__PBDrawOpus;
typedef struct _Game__PBAskPs Game__PBAskPs;
typedef struct _Game__PBAskPsOpus Game__PBAskPsOpus;
typedef struct _Game__PBOpus Game__PBOpus;
typedef struct _Game__PBOpusList Game__PBOpusList;
typedef struct _Game__PBOpusGuess Game__PBOpusGuess;
typedef struct _Game__PBGuessRank Game__PBGuessRank;
typedef struct _Game__PBGuessContest Game__PBGuessContest;


/* --- enums --- */

typedef enum _Game__PBLanguage {
  GAME__PBLANGUAGE__CHINESE = 1,
  GAME__PBLANGUAGE__ENGLISH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBLANGUAGE)
} Game__PBLanguage;
typedef enum _Game__PBOpusType {
  GAME__PBOPUS_TYPE__UNKNOWN = 0,
  GAME__PBOPUS_TYPE__DRAW = 1,
  GAME__PBOPUS_TYPE__GUESS = 2,
  GAME__PBOPUS_TYPE__COMMENT = 3,
  /*
   * useless at this moment
   */
  GAME__PBOPUS_TYPE__REPOST = 4,
  GAME__PBOPUS_TYPE__DRAW_TO_USER = 5,
  /*
   * align with ItemTypeFlower
   */
  GAME__PBOPUS_TYPE__FLOWER = 6,
  /*
   * align with ItemTypeTomato
   */
  GAME__PBOPUS_TYPE__TOMATO = 7,
  /*
   * TODO check what it is
   */
  GAME__PBOPUS_TYPE__ONLY_COMMENT = 8,
  GAME__PBOPUS_TYPE__DRAW_CONTEST = 9,
  /*
   * 学画画修炼
   */
  GAME__PBOPUS_TYPE__DRAW_PRACTICE = 10,
  /*
   * 学画画闯关
   */
  GAME__PBOPUS_TYPE__DRAW_CONQUER = 11,
  GAME__PBOPUS_TYPE__SING = 1000,
  GAME__PBOPUS_TYPE__SING_TO_USER = 1001,
  GAME__PBOPUS_TYPE__SING_CONTEST = 1002,
  /*
   * 求PS作品
   */
  GAME__PBOPUS_TYPE__ASK_PS = 1500,
  /*
   * 求PS的PS作品
   */
  GAME__PBOPUS_TYPE__ASK_PS_OPUS = 1501
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBOPUS_TYPE)
} Game__PBOpusType;
typedef enum _Game__PBOpusStoreType {
  GAME__PBOPUS_STORE_TYPE__NORMAL_OPUS = 0,
  /*
   * 本地草稿
   */
  GAME__PBOPUS_STORE_TYPE__DRAFT_OPUS = 1,
  /*
   * 已经提交的作品
   */
  GAME__PBOPUS_STORE_TYPE__SUBMIT_OPUS = 2,
  /*
   * 收藏的作品
   */
  GAME__PBOPUS_STORE_TYPE__SAVED_OPUS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBOPUS_STORE_TYPE)
} Game__PBOpusStoreType;
typedef enum _Game__PBOpusStatus {
  GAME__PBOPUS_STATUS__OPUS_STATUS_NORMAL = 0,
  GAME__PBOPUS_STATUS__OPUS_STATUS_DELETE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBOPUS_STATUS)
} Game__PBOpusStatus;
typedef enum _Game__PBFeedTimesType {
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_MATCH = 1,
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_GUESS = 2,
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_CORRECT = 3,
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_COMMENT = 4,
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_FLOWER = 5,
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_TOMATO = 6,
  GAME__PBFEED_TIMES_TYPE__FEED_TIMES_TYPE_SAVE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBFEED_TIMES_TYPE)
} Game__PBFeedTimesType;
typedef enum _Game__PBRankType {
  GAME__PBRANK_TYPE__HOT_RANK = 1,
  GAME__PBRANK_TYPE__ALL_TIME_RANK = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBRANK_TYPE)
} Game__PBRankType;
typedef enum _Game__PBUserGuessMode {
  GAME__PBUSER_GUESS_MODE__GUESS_MODE_HAPPY = 1,
  GAME__PBUSER_GUESS_MODE__GUESS_MODE_GENIUS = 2,
  GAME__PBUSER_GUESS_MODE__GUESS_MODE_CONTEST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBUSER_GUESS_MODE)
} Game__PBUserGuessMode;
typedef enum _Game__PBGuessContestState {
  /*
   * 比赛已经结束
   */
  GAME__PBGUESS_CONTEST_STATE__GUESS_CONTEST_STATE_END = 0,
  /*
   * 比赛进行中
   */
  GAME__PBGUESS_CONTEST_STATE__GUESS_CONTEST_STATE_ING = 1,
  /*
   * 比赛还没开始
   */
  GAME__PBGUESS_CONTEST_STATE__GUESS_CONTEST_STATE_NOT_START = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBGUESS_CONTEST_STATE)
} Game__PBGuessContestState;

/* --- messages --- */

struct  _Game__PBDrawOpus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_level;
  int32_t level;
};
#define GAME__PBDRAW_OPUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbdraw_opus__descriptor) \
    , 0,0 }


/*
 *求PS信息
 */
struct  _Game__PBAskPs
{
  ProtobufCMessage base;
  /*
   *要求列表，文字描述
   */
  size_t n_requirement;
  char **requirement;
  /*
   *每PS作品奖励
   */
  protobuf_c_boolean has_awardcoinsperuser;
  int32_t awardcoinsperuser;
  /*
   *PS奖励限额
   */
  protobuf_c_boolean has_awardcoinsmaxtotal;
  int32_t awardcoinsmaxtotal;
  /*
   *最佳PS奖励
   */
  protobuf_c_boolean has_awardingotbestuser;
  int32_t awardingotbestuser;
  /*
   *最佳作品用户
   */
  char *awardbestuserid;
};
#define GAME__PBASK_PS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbask_ps__descriptor) \
    , 0,NULL, 0,0, 0,0, 0,0, NULL }


/*
 *求PS作品
 */
struct  _Game__PBAskPsOpus
{
  ProtobufCMessage base;
  /*
   * 关联的求PS的ID
   */
  char *askpsid;
};
#define GAME__PBASK_PS_OPUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbask_ps_opus__descriptor) \
    , NULL }


struct  _Game__PBOpus
{
  ProtobufCMessage base;
  /*
   * 作品Id
   */
  char *opusid;
  /*
   * 作品类型
   */
  protobuf_c_boolean has_type;
  Game__PBOpusType type;
  /*
   * 作品名称
   */
  char *name;
  /*
   * 作品描述
   */
  char *desc;
  /*
   * 作品图片
   */
  char *image;
  /*
   * 作品缩略图
   */
  char *thumbimage;
  /*
   * 作品数据远程URL
   */
  char *dataurl;
  /*
   * 作品语言
   */
  protobuf_c_boolean has_language;
  Game__PBLanguage language;
  /*
   * 作品大分类
   */
  protobuf_c_boolean has_category;
  Game__PBOpusCategoryType category;
  /*
   * 作品创建时间
   */
  protobuf_c_boolean has_createdate;
  int32_t createdate;
  /*
   * 作品状态，0表示正常，1表示已删除。
   */
  protobuf_c_boolean has_status;
  int32_t status;
  /*
   * 作品标签，用于作品分类，如搞笑，故事等。
   */
  size_t n_tags;
  char **tags;
  /*
   * 制作作品花费的时间
   */
  protobuf_c_boolean has_spendtime;
  int32_t spendtime;
  /*
   * 创建来源信息，如来自哪些设备、应用
   */
  /*
   * deviceType : (1:iPhone/iPod Touch, 2:iPad, 3:Android Phone)
   */
  protobuf_c_boolean has_devicetype;
  int32_t devicetype;
  /*
   * 设备名称，如 iPhone4, New iPad, iPhone5, 三星Galaxy 等等
   */
  char *devicename;
  /*
   * 来自哪个应用创作的
   */
  char *appid;
  /*
   * 作者基本信息
   */
  Game__PBGameUser *author;
  /*
   * 作品是给谁的
   */
  Game__PBGameUser *targetuser;
  /*
   * 参与的比赛的Id
   */
  char *contestid;
  /*
   * 作品操作统计信息
   */
  size_t n_feedtimes;
  Game__PBFeedTimes **feedtimes;
  /*
   * 画画特有信息
   */
  Game__PBDrawOpus *draw;
  /*
   * 唱歌特有信息
   */
  Game__PBSingOpus *sing;
  /*
   * 求PS
   */
  Game__PBAskPs *askps;
  /*
   * 求PS作品
   */
  Game__PBAskPsOpus *askpsopus;
  /*
   * for local draft & opus storage
   */
  /*
   * 保存数据文件的本地路径URL
   */
  char *localdataurl;
  /*
   * 本地图片的大图路径
   */
  char *localimageurl;
  /*
   * 本地图片的小图路径
   */
  char *localthumbimageurl;
  /*
   * 是否是自动恢复的草稿
   */
  protobuf_c_boolean has_isrecovery;
  protobuf_c_boolean isrecovery;
  /*
   * 当前保存类型
   */
  protobuf_c_boolean has_storetype;
  Game__PBOpusStoreType storetype;
  Game__PBLabelInfo *desclabelinfo;
  Game__PBSize *canvassize;
  /*
   * 用户猜的信息
   */
  Game__PBOpusGuess *guessinfo;
};
#define GAME__PBOPUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbopus__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, NULL, NULL, NULL }


struct  _Game__PBOpusList
{
  ProtobufCMessage base;
  size_t n_opuses;
  Game__PBOpus **opuses;
};
#define GAME__PBOPUS_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbopus_list__descriptor) \
    , 0,NULL }


struct  _Game__PBOpusGuess
{
  ProtobufCMessage base;
  /*
   * 已经猜中过
   */
  protobuf_c_boolean has_iscorrect;
  protobuf_c_boolean iscorrect;
};
#define GAME__PBOPUS_GUESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbopus_guess__descriptor) \
    , 0,0 }


struct  _Game__PBGuessRank
{
  ProtobufCMessage base;
  Game__PBGameUser *user;
  /*
   * 猜的总次数
   */
  protobuf_c_boolean has_guess;
  int32_t guess;
  /*
   * 一共通过了多少关
   */
  protobuf_c_boolean has_pass;
  int32_t pass;
  /*
   * 总耗时
   */
  protobuf_c_boolean has_spendtime;
  int32_t spendtime;
  /*
   * 赢得了多少
   */
  protobuf_c_boolean has_earn;
  int32_t earn;
  /*
   * 货币种类
   */
  protobuf_c_boolean has_currency;
  Game__PBGameCurrency currency;
  /*
   * 排名
   */
  protobuf_c_boolean has_ranking;
  int32_t ranking;
  /*
   * 总共参赛人数
   */
  protobuf_c_boolean has_totalplayer;
  int32_t totalplayer;
  /*
   * 开始时间
   */
  protobuf_c_boolean has_starttime;
  int32_t starttime;
  /*
   * 结束时间
   */
  protobuf_c_boolean has_endtime;
  int32_t endtime;
};
#define GAME__PBGUESS_RANK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbguess_rank__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Game__PBGuessContest
{
  ProtobufCMessage base;
  char *contestid;
  char *name;
  protobuf_c_boolean has_state;
  int32_t state;
  protobuf_c_boolean has_starttime;
  int32_t starttime;
  protobuf_c_boolean has_endtime;
  int32_t endtime;
};
#define GAME__PBGUESS_CONTEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbguess_contest__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


/* Game__PBDrawOpus methods */
void   game__pbdraw_opus__init
                     (Game__PBDrawOpus         *message);
size_t game__pbdraw_opus__get_packed_size
                     (const Game__PBDrawOpus   *message);
size_t game__pbdraw_opus__pack
                     (const Game__PBDrawOpus   *message,
                      uint8_t             *out);
size_t game__pbdraw_opus__pack_to_buffer
                     (const Game__PBDrawOpus   *message,
                      ProtobufCBuffer     *buffer);
Game__PBDrawOpus *
       game__pbdraw_opus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbdraw_opus__free_unpacked
                     (Game__PBDrawOpus *message,
                      ProtobufCAllocator *allocator);
/* Game__PBAskPs methods */
void   game__pbask_ps__init
                     (Game__PBAskPs         *message);
size_t game__pbask_ps__get_packed_size
                     (const Game__PBAskPs   *message);
size_t game__pbask_ps__pack
                     (const Game__PBAskPs   *message,
                      uint8_t             *out);
size_t game__pbask_ps__pack_to_buffer
                     (const Game__PBAskPs   *message,
                      ProtobufCBuffer     *buffer);
Game__PBAskPs *
       game__pbask_ps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbask_ps__free_unpacked
                     (Game__PBAskPs *message,
                      ProtobufCAllocator *allocator);
/* Game__PBAskPsOpus methods */
void   game__pbask_ps_opus__init
                     (Game__PBAskPsOpus         *message);
size_t game__pbask_ps_opus__get_packed_size
                     (const Game__PBAskPsOpus   *message);
size_t game__pbask_ps_opus__pack
                     (const Game__PBAskPsOpus   *message,
                      uint8_t             *out);
size_t game__pbask_ps_opus__pack_to_buffer
                     (const Game__PBAskPsOpus   *message,
                      ProtobufCBuffer     *buffer);
Game__PBAskPsOpus *
       game__pbask_ps_opus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbask_ps_opus__free_unpacked
                     (Game__PBAskPsOpus *message,
                      ProtobufCAllocator *allocator);
/* Game__PBOpus methods */
void   game__pbopus__init
                     (Game__PBOpus         *message);
size_t game__pbopus__get_packed_size
                     (const Game__PBOpus   *message);
size_t game__pbopus__pack
                     (const Game__PBOpus   *message,
                      uint8_t             *out);
size_t game__pbopus__pack_to_buffer
                     (const Game__PBOpus   *message,
                      ProtobufCBuffer     *buffer);
Game__PBOpus *
       game__pbopus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbopus__free_unpacked
                     (Game__PBOpus *message,
                      ProtobufCAllocator *allocator);
/* Game__PBOpusList methods */
void   game__pbopus_list__init
                     (Game__PBOpusList         *message);
size_t game__pbopus_list__get_packed_size
                     (const Game__PBOpusList   *message);
size_t game__pbopus_list__pack
                     (const Game__PBOpusList   *message,
                      uint8_t             *out);
size_t game__pbopus_list__pack_to_buffer
                     (const Game__PBOpusList   *message,
                      ProtobufCBuffer     *buffer);
Game__PBOpusList *
       game__pbopus_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbopus_list__free_unpacked
                     (Game__PBOpusList *message,
                      ProtobufCAllocator *allocator);
/* Game__PBOpusGuess methods */
void   game__pbopus_guess__init
                     (Game__PBOpusGuess         *message);
size_t game__pbopus_guess__get_packed_size
                     (const Game__PBOpusGuess   *message);
size_t game__pbopus_guess__pack
                     (const Game__PBOpusGuess   *message,
                      uint8_t             *out);
size_t game__pbopus_guess__pack_to_buffer
                     (const Game__PBOpusGuess   *message,
                      ProtobufCBuffer     *buffer);
Game__PBOpusGuess *
       game__pbopus_guess__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbopus_guess__free_unpacked
                     (Game__PBOpusGuess *message,
                      ProtobufCAllocator *allocator);
/* Game__PBGuessRank methods */
void   game__pbguess_rank__init
                     (Game__PBGuessRank         *message);
size_t game__pbguess_rank__get_packed_size
                     (const Game__PBGuessRank   *message);
size_t game__pbguess_rank__pack
                     (const Game__PBGuessRank   *message,
                      uint8_t             *out);
size_t game__pbguess_rank__pack_to_buffer
                     (const Game__PBGuessRank   *message,
                      ProtobufCBuffer     *buffer);
Game__PBGuessRank *
       game__pbguess_rank__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbguess_rank__free_unpacked
                     (Game__PBGuessRank *message,
                      ProtobufCAllocator *allocator);
/* Game__PBGuessContest methods */
void   game__pbguess_contest__init
                     (Game__PBGuessContest         *message);
size_t game__pbguess_contest__get_packed_size
                     (const Game__PBGuessContest   *message);
size_t game__pbguess_contest__pack
                     (const Game__PBGuessContest   *message,
                      uint8_t             *out);
size_t game__pbguess_contest__pack_to_buffer
                     (const Game__PBGuessContest   *message,
                      ProtobufCBuffer     *buffer);
Game__PBGuessContest *
       game__pbguess_contest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbguess_contest__free_unpacked
                     (Game__PBGuessContest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Game__PBDrawOpus_Closure)
                 (const Game__PBDrawOpus *message,
                  void *closure_data);
typedef void (*Game__PBAskPs_Closure)
                 (const Game__PBAskPs *message,
                  void *closure_data);
typedef void (*Game__PBAskPsOpus_Closure)
                 (const Game__PBAskPsOpus *message,
                  void *closure_data);
typedef void (*Game__PBOpus_Closure)
                 (const Game__PBOpus *message,
                  void *closure_data);
typedef void (*Game__PBOpusList_Closure)
                 (const Game__PBOpusList *message,
                  void *closure_data);
typedef void (*Game__PBOpusGuess_Closure)
                 (const Game__PBOpusGuess *message,
                  void *closure_data);
typedef void (*Game__PBGuessRank_Closure)
                 (const Game__PBGuessRank *message,
                  void *closure_data);
typedef void (*Game__PBGuessContest_Closure)
                 (const Game__PBGuessContest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    game__pblanguage__descriptor;
extern const ProtobufCEnumDescriptor    game__pbopus_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbopus_store_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbopus_status__descriptor;
extern const ProtobufCEnumDescriptor    game__pbfeed_times_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbrank_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbuser_guess_mode__descriptor;
extern const ProtobufCEnumDescriptor    game__pbguess_contest_state__descriptor;
extern const ProtobufCMessageDescriptor game__pbdraw_opus__descriptor;
extern const ProtobufCMessageDescriptor game__pbask_ps__descriptor;
extern const ProtobufCMessageDescriptor game__pbask_ps_opus__descriptor;
extern const ProtobufCMessageDescriptor game__pbopus__descriptor;
extern const ProtobufCMessageDescriptor game__pbopus_list__descriptor;
extern const ProtobufCMessageDescriptor game__pbopus_guess__descriptor;
extern const ProtobufCMessageDescriptor game__pbguess_rank__descriptor;
extern const ProtobufCMessageDescriptor game__pbguess_contest__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Opus_2eproto__INCLUDED */
