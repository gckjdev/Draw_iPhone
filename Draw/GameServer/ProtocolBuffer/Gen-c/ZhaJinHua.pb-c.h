/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ZhaJinHua.proto */

#ifndef PROTOBUF_C_ZhaJinHua_2eproto__INCLUDED
#define PROTOBUF_C_ZhaJinHua_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "GameBasic.pb-c.h"

typedef struct _Game__PBPoker Game__PBPoker;
typedef struct _Game__PBZJHGameState Game__PBZJHGameState;
typedef struct _Game__PBZJHPoker Game__PBZJHPoker;
typedef struct _Game__PBZJHUserPoker Game__PBZJHUserPoker;
typedef struct _Game__PBZJHUserPlayInfo Game__PBZJHUserPlayInfo;
typedef struct _Game__PBZJHGameResult Game__PBZJHGameResult;


/* --- enums --- */

typedef enum _Game__PBZJHRuleType {
  GAME__PBZJHRULE_TYPE__BEGINER = 0,
  GAME__PBZJHRULE_TYPE__NORMAL = 1,
  GAME__PBZJHRULE_TYPE__RICH = 2,
  GAME__PBZJHRULE_TYPE__DUAL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBZJHRULE_TYPE)
} Game__PBZJHRuleType;
typedef enum _Game__PBZJHCardType {
  /*
   * 未知
   */
  GAME__PBZJHCARD_TYPE__UNKNOW = 0,
  /*
   * 散牌
   */
  GAME__PBZJHCARD_TYPE__HIGH_CARD = 1,
  /*
   * 对子
   */
  GAME__PBZJHCARD_TYPE__PAIR = 2,
  /*
   * 顺子
   */
  GAME__PBZJHCARD_TYPE__STRAIGHT = 3,
  /*
   * 金花
   */
  GAME__PBZJHCARD_TYPE__FLUSH = 4,
  /*
   * 顺金
   */
  GAME__PBZJHCARD_TYPE__STRAIGHT_FLUSH = 5,
  /*
   * 豹子
   */
  GAME__PBZJHCARD_TYPE__THREE_OF_A_KIND = 6,
  /*
   * 特殊
   */
  GAME__PBZJHCARD_TYPE__SPECIAL = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBZJHCARD_TYPE)
} Game__PBZJHCardType;
typedef enum _Game__PBZJHUserAction {
  /*
   * 无动作
   */
  GAME__PBZJHUSER_ACTION__NONE = 0,
  /*
   * 跟注
   */
  GAME__PBZJHUSER_ACTION__BET = 1,
  /*
   * 加注
   */
  GAME__PBZJHUSER_ACTION__RAISE_BET = 2,
  /*
   * 自动跟注
   */
  GAME__PBZJHUSER_ACTION__AUTO_BET = 3,
  /*
   * 看牌
   */
  GAME__PBZJHUSER_ACTION__CHECK_CARD = 4,
  /*
   * 弃牌
   */
  GAME__PBZJHUSER_ACTION__FOLD_CARD = 5,
  /*
   * 比牌
   */
  GAME__PBZJHUSER_ACTION__COMPARE_CARD = 6,
  /*
   * 亮牌
   */
  GAME__PBZJHUSER_ACTION__SHOW_CARD = 7,
  /*
   * 换牌
   */
  GAME__PBZJHUSER_ACTION__CHANGE_CARD = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBZJHUSER_ACTION)
} Game__PBZJHUserAction;
typedef enum _Game__PBPokerRank {
  GAME__PBPOKER_RANK__POKER_RANK_2 = 2,
  GAME__PBPOKER_RANK__POKER_RANK_3 = 3,
  GAME__PBPOKER_RANK__POKER_RANK_4 = 4,
  GAME__PBPOKER_RANK__POKER_RANK_5 = 5,
  GAME__PBPOKER_RANK__POKER_RANK_6 = 6,
  GAME__PBPOKER_RANK__POKER_RANK_7 = 7,
  GAME__PBPOKER_RANK__POKER_RANK_8 = 8,
  GAME__PBPOKER_RANK__POKER_RANK_9 = 9,
  GAME__PBPOKER_RANK__POKER_RANK_10 = 10,
  GAME__PBPOKER_RANK__POKER_RANK_J = 11,
  GAME__PBPOKER_RANK__POKER_RANK_Q = 12,
  GAME__PBPOKER_RANK__POKER_RANK_K = 13,
  GAME__PBPOKER_RANK__POKER_RANK_A = 14,
  GAME__PBPOKER_RANK__POKER_RANK_BLACK_JOKER = 15,
  GAME__PBPOKER_RANK__POKER_RANK_RED_JOKER = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBPOKER_RANK)
} Game__PBPokerRank;
typedef enum _Game__PBPokerSuit {
  /*
   * 方块
   */
  GAME__PBPOKER_SUIT__POKER_SUIT_DIAMOND = 1,
  /*
   * 梅花
   */
  GAME__PBPOKER_SUIT__POKER_SUIT_CLUB = 2,
  /*
   * 红桃
   */
  GAME__PBPOKER_SUIT__POKER_SUIT_HEART = 3,
  /*
   * 黑桃
   */
  GAME__PBPOKER_SUIT__POKER_SUIT_SPADE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GAME__PBPOKER_SUIT)
} Game__PBPokerSuit;

/* --- messages --- */

struct  _Game__PBPoker
{
  ProtobufCMessage base;
  /*
   * 扑克Id
   */
  protobuf_c_boolean has_pokerid;
  int32_t pokerid;
  /*
   * 扑克点数
   */
  Game__PBPokerRank rank;
  /*
   * 扑克花色
   */
  Game__PBPokerSuit suit;
  /*
   * 牌面是否朝上
   */
  protobuf_c_boolean has_faceup;
  protobuf_c_boolean faceup;
};
#define GAME__PBPOKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbpoker__descriptor) \
    , 0,0, 0, 0, 0,0 }


struct  _Game__PBZJHGameState
{
  ProtobufCMessage base;
  /*
   * 游戏总注
   */
  int32_t totalbet;
  /*
   * 游戏单注
   */
  int32_t singlebet;
  /*
   * 炸金花所有用户状态
   */
  size_t n_usersinfo;
  Game__PBZJHUserPlayInfo **usersinfo;
};
#define GAME__PBZJHGAME_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbzjhgame_state__descriptor) \
    , 0, 0, 0,NULL }


struct  _Game__PBZJHPoker
{
  ProtobufCMessage base;
  /*
   * 用户的扑克牌
   */
  size_t n_pokers;
  Game__PBPoker **pokers;
  /*
   * 牌类型
   */
  protobuf_c_boolean has_cardtype;
  Game__PBZJHCardType cardtype;
};
#define GAME__PBZJHPOKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbzjhpoker__descriptor) \
    , 0,NULL, 0,GAME__PBZJHCARD_TYPE__UNKNOW }


struct  _Game__PBZJHUserPoker
{
  ProtobufCMessage base;
  /*
   * 用户Id
   */
  char *userid;
  /*
   * 扑克
   */
  Game__PBZJHPoker *pokers;
};
#define GAME__PBZJHUSER_POKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbzjhuser_poker__descriptor) \
    , NULL, NULL }


struct  _Game__PBZJHUserPlayInfo
{
  ProtobufCMessage base;
  /*
   * 用户Id  
   */
  char *userid;
  /*
   * 用户扑克
   */
  Game__PBZJHPoker *pokers;
  /*
   * 用户下的总注
   */
  protobuf_c_boolean has_totalbet;
  int32_t totalbet;
  /*
   * 是否自动跟
   */
  protobuf_c_boolean has_isautobet;
  protobuf_c_boolean isautobet;
  /*
   * 用户最近的操作
   */
  protobuf_c_boolean has_lastaction;
  Game__PBZJHUserAction lastaction;
  /*
   * 是否已经看牌
   */
  protobuf_c_boolean has_alreadcheckcard;
  protobuf_c_boolean alreadcheckcard;
  /*
   * 是否已经弃牌
   */
  protobuf_c_boolean has_alreadfoldcard;
  protobuf_c_boolean alreadfoldcard;
  /*
   * 是否已经亮牌
   */
  protobuf_c_boolean has_alreadshowcard;
  protobuf_c_boolean alreadshowcard;
  /*
   * 是否已经比牌失败
   */
  protobuf_c_boolean has_alreadcomparelose;
  protobuf_c_boolean alreadcomparelose;
};
#define GAME__PBZJHUSER_PLAY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbzjhuser_play_info__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,GAME__PBZJHUSER_ACTION__NONE, 0,0, 0,0, 0,0, 0,0 }


struct  _Game__PBZJHGameResult
{
  ProtobufCMessage base;
  size_t n_userresult;
  Game__PBUserResult **userresult;
};
#define GAME__PBZJHGAME_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game__pbzjhgame_result__descriptor) \
    , 0,NULL }


/* Game__PBPoker methods */
void   game__pbpoker__init
                     (Game__PBPoker         *message);
size_t game__pbpoker__get_packed_size
                     (const Game__PBPoker   *message);
size_t game__pbpoker__pack
                     (const Game__PBPoker   *message,
                      uint8_t             *out);
size_t game__pbpoker__pack_to_buffer
                     (const Game__PBPoker   *message,
                      ProtobufCBuffer     *buffer);
Game__PBPoker *
       game__pbpoker__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbpoker__free_unpacked
                     (Game__PBPoker *message,
                      ProtobufCAllocator *allocator);
/* Game__PBZJHGameState methods */
void   game__pbzjhgame_state__init
                     (Game__PBZJHGameState         *message);
size_t game__pbzjhgame_state__get_packed_size
                     (const Game__PBZJHGameState   *message);
size_t game__pbzjhgame_state__pack
                     (const Game__PBZJHGameState   *message,
                      uint8_t             *out);
size_t game__pbzjhgame_state__pack_to_buffer
                     (const Game__PBZJHGameState   *message,
                      ProtobufCBuffer     *buffer);
Game__PBZJHGameState *
       game__pbzjhgame_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbzjhgame_state__free_unpacked
                     (Game__PBZJHGameState *message,
                      ProtobufCAllocator *allocator);
/* Game__PBZJHPoker methods */
void   game__pbzjhpoker__init
                     (Game__PBZJHPoker         *message);
size_t game__pbzjhpoker__get_packed_size
                     (const Game__PBZJHPoker   *message);
size_t game__pbzjhpoker__pack
                     (const Game__PBZJHPoker   *message,
                      uint8_t             *out);
size_t game__pbzjhpoker__pack_to_buffer
                     (const Game__PBZJHPoker   *message,
                      ProtobufCBuffer     *buffer);
Game__PBZJHPoker *
       game__pbzjhpoker__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbzjhpoker__free_unpacked
                     (Game__PBZJHPoker *message,
                      ProtobufCAllocator *allocator);
/* Game__PBZJHUserPoker methods */
void   game__pbzjhuser_poker__init
                     (Game__PBZJHUserPoker         *message);
size_t game__pbzjhuser_poker__get_packed_size
                     (const Game__PBZJHUserPoker   *message);
size_t game__pbzjhuser_poker__pack
                     (const Game__PBZJHUserPoker   *message,
                      uint8_t             *out);
size_t game__pbzjhuser_poker__pack_to_buffer
                     (const Game__PBZJHUserPoker   *message,
                      ProtobufCBuffer     *buffer);
Game__PBZJHUserPoker *
       game__pbzjhuser_poker__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbzjhuser_poker__free_unpacked
                     (Game__PBZJHUserPoker *message,
                      ProtobufCAllocator *allocator);
/* Game__PBZJHUserPlayInfo methods */
void   game__pbzjhuser_play_info__init
                     (Game__PBZJHUserPlayInfo         *message);
size_t game__pbzjhuser_play_info__get_packed_size
                     (const Game__PBZJHUserPlayInfo   *message);
size_t game__pbzjhuser_play_info__pack
                     (const Game__PBZJHUserPlayInfo   *message,
                      uint8_t             *out);
size_t game__pbzjhuser_play_info__pack_to_buffer
                     (const Game__PBZJHUserPlayInfo   *message,
                      ProtobufCBuffer     *buffer);
Game__PBZJHUserPlayInfo *
       game__pbzjhuser_play_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbzjhuser_play_info__free_unpacked
                     (Game__PBZJHUserPlayInfo *message,
                      ProtobufCAllocator *allocator);
/* Game__PBZJHGameResult methods */
void   game__pbzjhgame_result__init
                     (Game__PBZJHGameResult         *message);
size_t game__pbzjhgame_result__get_packed_size
                     (const Game__PBZJHGameResult   *message);
size_t game__pbzjhgame_result__pack
                     (const Game__PBZJHGameResult   *message,
                      uint8_t             *out);
size_t game__pbzjhgame_result__pack_to_buffer
                     (const Game__PBZJHGameResult   *message,
                      ProtobufCBuffer     *buffer);
Game__PBZJHGameResult *
       game__pbzjhgame_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game__pbzjhgame_result__free_unpacked
                     (Game__PBZJHGameResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Game__PBPoker_Closure)
                 (const Game__PBPoker *message,
                  void *closure_data);
typedef void (*Game__PBZJHGameState_Closure)
                 (const Game__PBZJHGameState *message,
                  void *closure_data);
typedef void (*Game__PBZJHPoker_Closure)
                 (const Game__PBZJHPoker *message,
                  void *closure_data);
typedef void (*Game__PBZJHUserPoker_Closure)
                 (const Game__PBZJHUserPoker *message,
                  void *closure_data);
typedef void (*Game__PBZJHUserPlayInfo_Closure)
                 (const Game__PBZJHUserPlayInfo *message,
                  void *closure_data);
typedef void (*Game__PBZJHGameResult_Closure)
                 (const Game__PBZJHGameResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    game__pbzjhrule_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbzjhcard_type__descriptor;
extern const ProtobufCEnumDescriptor    game__pbzjhuser_action__descriptor;
extern const ProtobufCEnumDescriptor    game__pbpoker_rank__descriptor;
extern const ProtobufCEnumDescriptor    game__pbpoker_suit__descriptor;
extern const ProtobufCMessageDescriptor game__pbpoker__descriptor;
extern const ProtobufCMessageDescriptor game__pbzjhgame_state__descriptor;
extern const ProtobufCMessageDescriptor game__pbzjhpoker__descriptor;
extern const ProtobufCMessageDescriptor game__pbzjhuser_poker__descriptor;
extern const ProtobufCMessageDescriptor game__pbzjhuser_play_info__descriptor;
extern const ProtobufCMessageDescriptor game__pbzjhgame_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ZhaJinHua_2eproto__INCLUDED */
